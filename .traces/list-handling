parse: instruction: run
parse:   ingredient: {name: "\n#?     $start-tracing #? 1\n    1:address:list <- copy 0:literal\n    1:address:list <- push 3:literal, 1:address:list\n    1:address:list <- push 4:literal, 1:address:list\n    1:address:list <- push 5:literal, 1:address:list\n    2:number <- first 1:address:list\n    1:address:list <- rest 1:address:list\n    3:number <- first 1:address:list\n    1:address:list <- rest 1:address:list\n    4:number <- first 1:address:list\n    1:address:list <- rest 1:address:list\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    1 <- 0  # empty to empty, dust to dust..\n    2 <- 5\n    3 <- 4\n    4 <- 3\n  ", properties: [_: "literal-string"]}
after-brace: recipe list-handling
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: list-handling
 101 run: run [
#?     $start-tracing #? 1
    1:address:list <- copy 0:literal
    1:address:list <- push 3:literal, 1:address:list
    1:address:list <- push 4:literal, 1:address:list
    1:address:list <- push 5:literal, 1:address:list
    2:number <- first 1:address:list
    1:address:list <- rest 1:address:list
    3:number <- first 1:address:list
    1:address:list <- rest 1:address:list
    4:number <- first 1:address:list
    1:address:list <- rest 1:address:list
  ]
parse: instruction: copy
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: push
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: push
parse:   ingredient: {name: "4", properties: ["4": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: push
parse:   ingredient: {name: "5", properties: ["5": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: first
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: instruction: rest
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: first
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: rest
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: first
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "4", properties: ["4": "number"]}
parse: instruction: rest
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
after-brace: recipe run1001
after-brace: copy ...
after-brace: push ...
after-brace: push ...
after-brace: push ...
after-brace: first ...
after-brace: rest ...
after-brace: first ...
after-brace: rest ...
after-brace: first ...
after-brace: rest ...
 101 run: 1:address:list <- copy 0:literal
9999 mem: storing 0 in location 1
 101 run: 1:address:list <- push 3:literal, 1:address:list
9999 mem: location 1 is 0
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 102 run: x:location <- next-ingredient 
9999 mem: storing 3 in location 1002
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 0 in location 1003
 102 run: result:address:list <- new list:type
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1004
 102 run: val:address:location <- get-address result:address:list/deref, value:offset
9999 mem: location 1004 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1004 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1005
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1002 is 3
9999 mem: location 1005 is 1007
9999 mem: storing 3 in location 1007
 102 run: next:address:address:list <- get-address result:address:list/deref, next:offset
9999 mem: location 1004 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 0
9999 mem: location 1004 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1006
 102 run: next:address:address:list/deref <- copy in:address:list
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1008
9999 mem: storing 0 in location 1008
 102 run: reply result:address:list
9999 mem: location 1004 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 101 run: 1:address:list <- push 4:literal, 1:address:list
9999 mem: location 1 is 1007
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1009
 102 run: x:location <- next-ingredient 
9999 mem: storing 4 in location 1011
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1007 in location 1012
 102 run: result:address:list <- new list:type
9999 mem: new alloc: 1016
9999 mem: storing 1016 in location 1013
 102 run: val:address:location <- get-address result:address:list/deref, value:offset
9999 mem: location 1013 is 1016
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1013 is 1016
9999 run: address to copy is 1016
9999 mem: storing 1016 in location 1014
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1011 is 4
9999 mem: location 1014 is 1016
9999 mem: storing 4 in location 1016
 102 run: next:address:address:list <- get-address result:address:list/deref, next:offset
9999 mem: location 1013 is 1016
9999 mem: location 1016 is 4
9999 mem: location 1017 is 0
9999 mem: location 1013 is 1016
9999 run: address to copy is 1017
9999 mem: storing 1017 in location 1015
 102 run: next:address:address:list/deref <- copy in:address:list
9999 mem: location 1012 is 1007
9999 mem: location 1015 is 1017
9999 mem: storing 1007 in location 1017
 102 run: reply result:address:list
9999 mem: location 1013 is 1016
9999 run: result 0 is 1016
9999 mem: storing 1016 in location 1
 101 run: 1:address:list <- push 5:literal, 1:address:list
9999 mem: location 1 is 1016
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1018
 102 run: x:location <- next-ingredient 
9999 mem: storing 5 in location 1020
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1016 in location 1021
 102 run: result:address:list <- new list:type
9999 mem: new alloc: 1025
9999 mem: storing 1025 in location 1022
 102 run: val:address:location <- get-address result:address:list/deref, value:offset
9999 mem: location 1022 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1022 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1023
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1020 is 5
9999 mem: location 1023 is 1025
9999 mem: storing 5 in location 1025
 102 run: next:address:address:list <- get-address result:address:list/deref, next:offset
9999 mem: location 1022 is 1025
9999 mem: location 1025 is 5
9999 mem: location 1026 is 0
9999 mem: location 1022 is 1025
9999 run: address to copy is 1026
9999 mem: storing 1026 in location 1024
 102 run: next:address:address:list/deref <- copy in:address:list
9999 mem: location 1021 is 1016
9999 mem: location 1024 is 1026
9999 mem: storing 1016 in location 1026
 102 run: reply result:address:list
9999 mem: location 1022 is 1025
9999 run: result 0 is 1025
9999 mem: storing 1025 in location 1
 101 run: 2:number <- first 1:address:list
9999 mem: location 1 is 1025
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1027
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1025 in location 1029
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 5
9999 mem: location 1026 is 1016
9999 mem: location 1029 is 1025
9999 run: address to copy is 1025
9999 run: its type is number
9999 mem: location 1025 is 5
9999 mem: storing 5 in location 1030
 102 run: reply result:location
9999 mem: location 1030 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 2
 101 run: 1:address:list <- rest 1:address:list
9999 mem: location 1 is 1025
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1031
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1025 in location 1033
 102 run: result:address:list <- get in:address:list/deref, next:offset
9999 mem: location 1033 is 1025
9999 mem: location 1025 is 5
9999 mem: location 1026 is 1016
9999 mem: location 1033 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1016
9999 mem: storing 1016 in location 1034
 102 run: reply result:address:list
9999 mem: location 1034 is 1016
9999 run: result 0 is 1016
9999 mem: storing 1016 in location 1
 101 run: 3:number <- first 1:address:list
9999 mem: location 1 is 1016
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1035
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1016 in location 1037
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1037 is 1016
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1007
9999 mem: location 1037 is 1016
9999 run: address to copy is 1016
9999 run: its type is number
9999 mem: location 1016 is 4
9999 mem: storing 4 in location 1038
 102 run: reply result:location
9999 mem: location 1038 is 4
9999 run: result 0 is 4
9999 mem: storing 4 in location 3
 101 run: 1:address:list <- rest 1:address:list
9999 mem: location 1 is 1016
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1039
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1016 in location 1041
 102 run: result:address:list <- get in:address:list/deref, next:offset
9999 mem: location 1041 is 1016
9999 mem: location 1016 is 4
9999 mem: location 1017 is 1007
9999 mem: location 1041 is 1016
9999 run: address to copy is 1017
9999 run: its type is address
9999 mem: location 1017 is 1007
9999 mem: storing 1007 in location 1042
 102 run: reply result:address:list
9999 mem: location 1042 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 101 run: 4:number <- first 1:address:list
9999 mem: location 1 is 1007
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1043
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1007 in location 1045
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 0
9999 mem: location 1045 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 3
9999 mem: storing 3 in location 1046
 102 run: reply result:location
9999 mem: location 1046 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 4
 101 run: 1:address:list <- rest 1:address:list
9999 mem: location 1 is 1007
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1047
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1007 in location 1049
 102 run: result:address:list <- get in:address:list/deref, next:offset
9999 mem: location 1049 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 0
9999 mem: location 1049 is 1007
9999 run: address to copy is 1008
9999 run: its type is address
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1050
 102 run: reply result:address:list
9999 mem: location 1050 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1
 100 run: memory-should-contain [
    1 <- 0  # empty to empty, dust to dust..
    2 <- 5
    3 <- 4
    4 <- 3
  ]
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
