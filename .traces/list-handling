9991 parse: --- defining scenario_list-handling
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:list:number <- push 3, 0\n    1:address:shared:list:number <- push 4, 1:address:shared:list:number\n    1:address:shared:list:number <- push 5, 1:address:shared:list:number\n    2:number <- first 1:address:shared:list:number\n    1:address:shared:list:number <- rest 1:address:shared:list:number\n    3:number <- first 1:address:shared:list:number\n    1:address:shared:list:number <- rest 1:address:shared:list:number\n    4:number <- first 1:address:shared:list:number\n    1:address:shared:list:number <- rest 1:address:shared:list:number\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:shared:list:number <- push 3, 0
    1:address:shared:list:number <- push 4, 1:address:shared:list:number
    1:address:shared:list:number <- push 5, 1:address:shared:list:number
    2:number <- first 1:address:shared:list:number
    1:address:shared:list:number <- rest 1:address:shared:list:number
    3:number <- first 1:address:shared:list:number
    1:address:shared:list:number <- rest 1:address:shared:list:number
    4:number <- first 1:address:shared:list:number
    1:address:shared:list:number <- rest 1:address:shared:list:number
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1 <- 0  # empty to empty, dust to dust..\n    2 <- 5\n    3 <- 4\n    4 <- 3\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    1 <- 0  # empty to empty, dust to dust..
    2 <- 5
    3 <- 4
    4 <- 3
  ]
9999 parse: recipe scenario_list-handling has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_list-handling
9991 transform: --- deduce types for recipe scenario_list-handling
9991 transform: --- collect surrounding spaces for recipe scenario_list-handling
9991 transform: --- transform names for recipe scenario_list-handling
9991 transform: --- resolve ambiguous calls for recipe scenario_list-handling
9991 transform: --- compute instruction operations for recipe scenario_list-handling
9991 transform: --- transform braces for recipe scenario_list-handling
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_list-handling
9991 transform: --- type-check 'call' instructions inside recipe scenario_list-handling
9991 transform: --- type-check calls inside recipe scenario_list-handling
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_list-handling
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_list-handling
 102 run: run [
    1:address:shared:list:number <- push 3, 0
    1:address:shared:list:number <- push 4, 1:address:shared:list:number
    1:address:shared:list:number <- push 5, 1:address:shared:list:number
    2:number <- first 1:address:shared:list:number
    1:address:shared:list:number <- rest 1:address:shared:list:number
    3:number <- first 1:address:shared:list:number
    1:address:shared:list:number <- rest 1:address:shared:list:number
    4:number <- first 1:address:shared:list:number
    1:address:shared:list:number <- rest 1:address:shared:list:number
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 load: after rewriting: 1:address:shared:list:number <- push 3, 0
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 load: after rewriting: 1:address:shared:list:number <- push 4, 1:address:shared:list:number
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"5": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 load: after rewriting: 1:address:shared:list:number <- push 5, 1:address:shared:list:number
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- first 1:address:shared:list:number
9993 parse: instruction: rest
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 load: after rewriting: 1:address:shared:list:number <- rest 1:address:shared:list:number
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- first 1:address:shared:list:number
9993 parse: instruction: rest
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 load: after rewriting: 1:address:shared:list:number <- rest 1:address:shared:list:number
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9993 parse:   product: {"4": "number"}
9992 load: after rewriting: 4:number <- first 1:address:shared:list:number
9993 parse: instruction: rest
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 load: after rewriting: 1:address:shared:list:number <- rest 1:address:shared:list:number
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction 1:address:shared:list:number <- push 3, 0
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: checking variant 0: recipe push {"x": "_elem"} {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: checking variant 1: recipe push_2 {"x": "_elem"} {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: checking variant 2: recipe push_3 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: non-strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: mismatch: product 0
9992 transform: score for variant 2: -1
9992 transform: checking variant 3: recipe push_4 {"x": <"address" : <"shared" : <"operation" : <>>>>} {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: no variant found; checking for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0: recipe push {"x": "_elem"} {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}
9992 transform: final score: 106
9992 transform: matches
9992 transform: checking shape-shifting variant 1: recipe push_2 {"x": "_elem"} {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}
9993 transform: mismatch: product 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 2: recipe push_3 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 3: recipe push_4 {"x": <"address" : <"shared" : <"operation" : <>>>>} {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>}
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 235 push
9993 transform: switching push to specialized push_5
9993 transform: compute type names: push_5
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: type of in is <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: x:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: result:address:shared:list:_elem <- new {(list _elem): type}
9994 transform:     checking {"(list _elem)": "type"}: "type"
9993 transform: type of (list _elem) is "type"
9994 transform:     checking {"result": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: type of result is <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: val:address:_elem <- get-address *result, value:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"val": <"address" : <"_elem" : <>>>}: <"address" : <"_elem" : <>>>
9993 transform: type of val is <"address" : <"_elem" : <>>>
9993 transform:   instruction: *val <- copy x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"val": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"_elem" : <>>>
9993 transform:   instruction: next:address:address:shared:list:_elem <- get-address *result, next:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"next": <"address" : <"address" : <"shared" : <"list" : <"_elem" : <>>>>>>}: <"address" : <"address" : <"shared" : <"list" : <"_elem" : <>>>>>>
9993 transform: type of next is <"address" : <"address" : <"shared" : <"list" : <"_elem" : <>>>>>>
9993 transform:   instruction: *next <- copy in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"shared" : <"list" : <"_elem" : <>>>>>>
9993 transform:   instruction: reply result
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: adding mapping from _elem to "literal"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'in:address:shared:list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'result:address:shared:list:_elem <- new {(list _elem): type}'
9993 transform: replacing in ingredient {(list _elem): type}
9993 transform:   after: ?0
9993 transform: replacing in ingredient result:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'val:address:_elem <- get-address *result, value:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient val:address:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <number : <>>>
9993 transform: replacing in instruction '*val <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient *val
9993 transform: _elem => "number"
9993 transform:   after: <address : <number : <>>>
9993 transform: replacing in instruction 'next:address:address:shared:list:_elem <- get-address *result, next:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient next:address:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <address : <shared : <list : <number : <>>>>>>
9993 transform: replacing in instruction '*next <- copy in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient *next
9993 transform: _elem => "number"
9993 transform:   after: <address : <address : <shared : <list : <number : <>>>>>>
9993 transform: replacing in instruction 'reply result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9992 transform: transforming new specialization: push_5
9991 transform: --- checking reply instructions against header for push_5
9991 transform: --- fill in reply ingredients from header for recipe push_5
9991 transform: --- deduce types for recipe push_5
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: x => number
9992 transform: in => <address : <shared : <list : <number : <>>>>>
9992 transform: result => <address : <shared : <list : <number : <>>>>>
9992 transform: val => <address : <number : <>>>
9992 transform: next => <address : <address : <shared : <list : <number : <>>>>>>
9991 transform: --- deduce types from header for push_5
9993 transform: type of x is number
9993 transform: type of in is <address : <shared : <list : <number : <>>>>>
9993 transform: type of in is <address : <shared : <list : <number : <>>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: x:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: x: number -- {"x": "number"}
9992 transform: instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: <address : <shared : <list : <number : <>>>>> -- {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: result:address:shared:list:_elem <- new {(list _elem): type}
9993 transform:   product: result: <address : <shared : <list : <number : <>>>>> -- {"result": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: val:address:_elem <- get-address *result, value:offset
9993 transform:   product: val: <address : <number : <>>> -- {"val": <"address" : <"number" : <>>>}
9992 transform: instruction: *val <- copy x
9993 transform:   product: val: <address : <number : <>>> -- {"val": <"address" : <"number" : <>>>, "lookup": <>}
9992 transform: instruction: next:address:address:shared:list:_elem <- get-address *result, next:offset
9993 transform:   product: next: <address : <address : <shared : <list : <number : <>>>>>> -- {"next": <"address" : <"address" : <"shared" : <"list" : <"number" : <>>>>>>}
9992 transform: instruction: *next <- copy in
9993 transform:   product: next: <address : <address : <shared : <list : <number : <>>>>>> -- {"next": <"address" : <"address" : <"shared" : <"list" : <"number" : <>>>>>>, "lookup": <>}
9992 transform: instruction: reply result
9991 transform: --- collect surrounding spaces for recipe push_5
9991 transform: --- transform names for recipe push_5
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element value of type list is at offset 0
9993 name: assign val 4
9993 name: element next of type list is at offset 1
9993 name: assign next 5
9991 transform: --- resolve ambiguous calls for recipe push_5
9991 transform: --- compute instruction operations for recipe push_5
9991 transform: --- transform braces for recipe push_5
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: reply ...
9991 transform: --- perform checks for recipe push_5
9991 transform: --- type-check 'call' instructions inside recipe push_5
9991 transform: --- type-check calls inside recipe push_5
9991 transform: --- convert 'new' to 'allocate' for recipe push_5
9992 new: size of "location" is 1
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9992 new: size of <"list" : <"number" : <>>> is 2
9991 transform: --- check that recipe push_5 sets default-space
9991 transform: --- checking reply instructions against header for push_5
9992 transform: new specialization: push_5
9992 transform: instruction 1:address:shared:list:number <- push 4, 1:address:shared:list:number
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: checking variant 0: recipe push {"x": "_elem"} {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: checking variant 1: recipe push_2 {"x": "_elem"} {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: checking variant 2: recipe push_3 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: non-strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 2: -1
9992 transform: checking variant 3: recipe push_4 {"x": <"address" : <"shared" : <"operation" : <>>>>} {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: checking variant 4: recipe push_5 {"x": "number"} {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 4: 100
9993 transform: switching push to push_5
9992 transform: instruction 1:address:shared:list:number <- push 5, 1:address:shared:list:number
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: checking variant 0: recipe push {"x": "_elem"} {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: checking variant 1: recipe push_2 {"x": "_elem"} {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: checking variant 2: recipe push_3 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: non-strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 2: -1
9992 transform: checking variant 3: recipe push_4 {"x": <"address" : <"shared" : <"operation" : <>>>>} {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: checking variant 4: recipe push_5 {"x": "number"} {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 4: 100
9993 transform: switching push to push_5
9992 transform: instruction 2:number <- first 1:address:shared:list:number
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: checking variant 0: recipe first {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: checking variant 1: recipe first_2 {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: checking variant 2: recipe first_3 {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"result": <"address" : <"shared" : <"operation" : <>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9992 transform: no variant found; checking for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0: recipe first {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9992 transform: final score: 103
9992 transform: matches
9992 transform: checking shape-shifting variant 1: recipe first_2 {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: mismatch: ingredient 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 2: recipe first_3 {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"result": <"address" : <"shared" : <"operation" : <>>>>}
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 236 first
9993 transform: switching first to specialized first_4
9993 transform: compute type names: first_4
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: type of in is <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"result": "_elem"}: "_elem"
9993 transform: type of result is "_elem"
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: result <- get *in, value:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to "_elem"
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'in:address:shared:list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'result <- get *in, value:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform:   after: number
9992 transform: transforming new specialization: first_4
9991 transform: --- checking reply instructions against header for first_4
9991 transform: --- fill in reply ingredients from header for recipe first_4
9991 transform: --- deduce types for recipe first_4
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: in => <address : <shared : <list : <number : <>>>>>
9992 transform: result => number
9991 transform: --- deduce types from header for first_4
9993 transform: type of in is <address : <shared : <list : <number : <>>>>>
9993 transform: type of result is number
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: <address : <shared : <list : <number : <>>>>> -- {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: result <- get *in, value:offset
9993 transform:   product: result: number -- {"result": "number"}
9992 transform: instruction: reply result:_elem
9991 transform: --- collect surrounding spaces for recipe first_4
9991 transform: --- transform names for recipe first_4
9993 name: assign in 1
9993 name: element value of type list is at offset 0
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe first_4
9991 transform: --- compute instruction operations for recipe first_4
9991 transform: --- transform braces for recipe first_4
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe first_4
9991 transform: --- type-check 'call' instructions inside recipe first_4
9991 transform: --- type-check calls inside recipe first_4
9991 transform: --- convert 'new' to 'allocate' for recipe first_4
9992 new: size of "location" is 1
9991 transform: --- check that recipe first_4 sets default-space
9991 transform: --- checking reply instructions against header for first_4
9992 transform: new specialization: first_4
9992 transform: instruction 1:address:shared:list:number <- rest 1:address:shared:list:number
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: checking variant 0: recipe rest {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"result": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>, "contained-in": "in"}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: checking variant 1: recipe rest_2 {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"result": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>, "contained-in": "in"}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: no variant found; checking for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0: recipe rest {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"result": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>, "contained-in": "in"}
9992 transform: final score: 106
9992 transform: matches
9992 transform: checking shape-shifting variant 1: recipe rest_2 {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"result": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>, "contained-in": "in"}
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 237 rest
9993 transform: switching rest to specialized rest_3
9993 transform: compute type names: rest_3
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: type of in is <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"result": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>, "contained-in": "in"}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: type of result is <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: result <- get *in, next:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:shared:list:_elem/contained-in:in
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'in:address:shared:list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'result <- get *in, next:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9992 transform: transforming new specialization: rest_3
9991 transform: --- checking reply instructions against header for rest_3
9991 transform: --- fill in reply ingredients from header for recipe rest_3
9991 transform: --- deduce types for recipe rest_3
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: in => <address : <shared : <list : <number : <>>>>>
9992 transform: result => <address : <shared : <list : <number : <>>>>>
9991 transform: --- deduce types from header for rest_3
9993 transform: type of in is <address : <shared : <list : <number : <>>>>>
9993 transform: type of result is <address : <shared : <list : <number : <>>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: <address : <shared : <list : <number : <>>>>> -- {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: result <- get *in, next:offset
9993 transform:   product: result: <address : <shared : <list : <number : <>>>>> -- {"result": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: reply result:address:shared:list:_elem/contained-in:in
9991 transform: --- collect surrounding spaces for recipe rest_3
9991 transform: --- transform names for recipe rest_3
9993 name: assign in 1
9993 name: element next of type list is at offset 1
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe rest_3
9991 transform: --- compute instruction operations for recipe rest_3
9991 transform: --- transform braces for recipe rest_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe rest_3
9991 transform: --- type-check 'call' instructions inside recipe rest_3
9991 transform: --- type-check calls inside recipe rest_3
9991 transform: --- convert 'new' to 'allocate' for recipe rest_3
9992 new: size of "location" is 1
9991 transform: --- check that recipe rest_3 sets default-space
9991 transform: --- checking reply instructions against header for rest_3
9992 transform: new specialization: rest_3
9992 transform: instruction 3:number <- first 1:address:shared:list:number
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: checking variant 0: recipe first {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: checking variant 1: recipe first_2 {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: checking variant 2: recipe first_3 {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"result": <"address" : <"shared" : <"operation" : <>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9992 transform: checking variant 3: recipe first_4 {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>} -> {"result": "number"}
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 3: 100
9993 transform: switching first to first_4
9992 transform: instruction 1:address:shared:list:number <- rest 1:address:shared:list:number
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: checking variant 0: recipe rest {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"result": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>, "contained-in": "in"}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: checking variant 1: recipe rest_2 {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"result": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>, "contained-in": "in"}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: checking variant 2: recipe rest_3 {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>} -> {"result": <"address" : <"shared" : <"list" : <"number" : <>>>>>, "contained-in": "in"}
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 2: 100
9993 transform: switching rest to rest_3
9992 transform: instruction 4:number <- first 1:address:shared:list:number
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: checking variant 0: recipe first {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: checking variant 1: recipe first_2 {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: checking variant 2: recipe first_3 {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"result": <"address" : <"shared" : <"operation" : <>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9992 transform: checking variant 3: recipe first_4 {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>} -> {"result": "number"}
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 3: 100
9993 transform: switching first to first_4
9992 transform: instruction 1:address:shared:list:number <- rest 1:address:shared:list:number
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: checking variant 0: recipe rest {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"result": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>, "contained-in": "in"}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: checking variant 1: recipe rest_2 {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"result": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>, "contained-in": "in"}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: checking variant 2: recipe rest_3 {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>} -> {"result": <"address" : <"shared" : <"list" : <"number" : <>>>>>, "contained-in": "in"}
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 2: 100
9993 transform: switching rest to rest_3
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: first ...
9992 transform: rest ...
9992 transform: first ...
9992 transform: rest ...
9992 transform: first ...
9992 transform: rest ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:list:number <- push_5 3, 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1003
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1004
 104 run: result:address:shared:list:_elem <- new {(list _elem): type}
9999 mem: allocating size 3
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1005
9999 mem: incrementing refcount of 1008: 0 -> 1
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 3
9999 mem: location 1006 is 1009
9999 mem: storing 3 in location 1009
 104 run: next:address:address:shared:list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 3
9999 mem: location 1010 is 0
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 type: type deduced to be number$
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1007
 104 run: *next <- copy in
9999 mem: location 1004 is 0
9999 mem: location 1007 is 1010
9999 mem: storing 0 in location 1010
 104 run: reply result
9999 mem: location 1005 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1
9999 mem: incrementing refcount of 1008: 1 -> 2
 103 run: 1:address:shared:list:number <- push_5 4, 1:address:shared:list:number
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1003
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1004
9999 mem: incrementing refcount of 1008: 2 -> 3
 104 run: result:address:shared:list:_elem <- new {(list _elem): type}
9999 mem: allocating size 3
9999 mem: new alloc: 1011
9999 mem: storing 1011 in location 1005
9999 mem: incrementing refcount of 1011: 0 -> 1
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1011
9999 mem: skipping refcount at 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1005 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 4
9999 mem: location 1006 is 1012
9999 mem: storing 4 in location 1012
 104 run: next:address:address:shared:list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1011
9999 mem: skipping refcount at 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1012 is 4
9999 mem: location 1013 is 0
9999 mem: location 1005 is 1011
9999 mem: skipping refcount at 1011
9999 type: type deduced to be number$
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1007
 104 run: *next <- copy in
9999 mem: location 1004 is 1008
9999 mem: location 1007 is 1013
9999 mem: storing 1008 in location 1013
9999 mem: incrementing refcount of 1008: 3 -> 4
 104 run: reply result
9999 mem: location 1005 is 1011
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: decrementing refcount of 1008: 4 -> 3
9999 mem: storing 1011 in location 1
9999 mem: incrementing refcount of 1011: 1 -> 2
 103 run: 1:address:shared:list:number <- push_5 5, 1:address:shared:list:number
9999 mem: location 1 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1004
9999 mem: incrementing refcount of 1011: 2 -> 3
 104 run: result:address:shared:list:_elem <- new {(list _elem): type}
9999 mem: allocating size 3
9999 mem: new alloc: 1014
9999 mem: storing 1014 in location 1005
9999 mem: incrementing refcount of 1014: 0 -> 1
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1014
9999 mem: skipping refcount at 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1005 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 5
9999 mem: location 1006 is 1015
9999 mem: storing 5 in location 1015
 104 run: next:address:address:shared:list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1014
9999 mem: skipping refcount at 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1015 is 5
9999 mem: location 1016 is 0
9999 mem: location 1005 is 1014
9999 mem: skipping refcount at 1014
9999 type: type deduced to be number$
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1007
 104 run: *next <- copy in
9999 mem: location 1004 is 1011
9999 mem: location 1007 is 1016
9999 mem: storing 1011 in location 1016
9999 mem: incrementing refcount of 1011: 3 -> 4
 104 run: reply result
9999 mem: location 1005 is 1014
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1014
9999 mem: decrementing refcount of 1011: 4 -> 3
9999 mem: storing 1014 in location 1
9999 mem: incrementing refcount of 1014: 1 -> 2
 103 run: 2:number <- first_4 1:address:shared:list:number
9999 mem: location 1 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1017
9999 mem: storing 3 in location 1018
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1014 in location 1020
9999 mem: incrementing refcount of 1014: 2 -> 3
 104 run: result <- get *in, value:offset
9999 mem: location 1020 is 1014
9999 mem: skipping refcount at 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1015 is 5
9999 mem: location 1016 is 1011
9999 mem: location 1020 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1015
9998 run: its type is number
9999 mem: location 1015 is 5
9999 mem: storing 5 in location 1021
 104 run: reply result:_elem
9999 mem: location 1021 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 5
9999 mem: storing 5 in location 2
 103 run: 1:address:shared:list:number <- rest_3 1:address:shared:list:number
9999 mem: location 1 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1014 in location 1020
9999 mem: incrementing refcount of 1014: 3 -> 4
 104 run: result <- get *in, next:offset
9999 mem: location 1020 is 1014
9999 mem: skipping refcount at 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1015 is 5
9999 mem: location 1016 is 1011
9999 mem: location 1020 is 1014
9999 mem: skipping refcount at 1014
9999 type: type deduced to be number$
9998 run: address to copy is 1016
9998 run: its type is <address : <shared : <list : <number : <>>>>>
9999 mem: location 1016 is 1011
9999 mem: storing 1011 in location 1021
9999 mem: incrementing refcount of 1011: 3 -> 4
 104 run: reply result:address:shared:list:_elem/contained-in:in
9999 mem: location 1021 is 1011
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: decrementing refcount of 1014: 4 -> 3
9999 mem: storing 1011 in location 1
9999 mem: incrementing refcount of 1011: 4 -> 5
 103 run: 3:number <- first_4 1:address:shared:list:number
9999 mem: location 1 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1020
9999 mem: incrementing refcount of 1011: 5 -> 6
 104 run: result <- get *in, value:offset
9999 mem: location 1020 is 1011
9999 mem: skipping refcount at 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1008
9999 mem: location 1020 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9998 run: its type is number
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 1021
 104 run: reply result:_elem
9999 mem: location 1021 is 4
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9999 mem: storing 4 in location 3
 103 run: 1:address:shared:list:number <- rest_3 1:address:shared:list:number
9999 mem: location 1 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1020
9999 mem: incrementing refcount of 1011: 6 -> 7
 104 run: result <- get *in, next:offset
9999 mem: location 1020 is 1011
9999 mem: skipping refcount at 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1008
9999 mem: location 1020 is 1011
9999 mem: skipping refcount at 1011
9999 type: type deduced to be number$
9998 run: address to copy is 1013
9998 run: its type is <address : <shared : <list : <number : <>>>>>
9999 mem: location 1013 is 1008
9999 mem: storing 1008 in location 1021
9999 mem: incrementing refcount of 1008: 3 -> 4
 104 run: reply result:address:shared:list:_elem/contained-in:in
9999 mem: location 1021 is 1008
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1011: 7 -> 6
9999 mem: storing 1008 in location 1
9999 mem: incrementing refcount of 1008: 4 -> 5
 103 run: 4:number <- first_4 1:address:shared:list:number
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1020
9999 mem: incrementing refcount of 1008: 5 -> 6
 104 run: result <- get *in, value:offset
9999 mem: location 1020 is 1008
9999 mem: skipping refcount at 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 3
9999 mem: location 1010 is 0
9999 mem: location 1020 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1021
 104 run: reply result:_elem
9999 mem: location 1021 is 3
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 3
9999 mem: storing 3 in location 4
 103 run: 1:address:shared:list:number <- rest_3 1:address:shared:list:number
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1020
9999 mem: incrementing refcount of 1008: 6 -> 7
 104 run: result <- get *in, next:offset
9999 mem: location 1020 is 1008
9999 mem: skipping refcount at 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 3
9999 mem: location 1010 is 0
9999 mem: location 1020 is 1008
9999 mem: skipping refcount at 1008
9999 type: type deduced to be number$
9998 run: address to copy is 1010
9998 run: its type is <address : <shared : <list : <number : <>>>>>
9999 mem: location 1010 is 0
9999 mem: storing 0 in location 1021
 104 run: reply result:address:shared:list:_elem/contained-in:in
9999 mem: location 1021 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1008: 7 -> 6
9999 mem: storing 0 in location 1
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    1 <- 0  # empty to empty, dust to dust..
    2 <- 5
    3 <- 4
    4 <- 3
  ]
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
