9991 parse: --- defining scenario-list-handling
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:list:number <- copy 0\n    2:number <- copy 3\n    1:address:list:number <- push 2:number, 1:address:list:number\n    1:address:list:number <- push 4, 1:address:list:number\n    1:address:list:number <- push 5, 1:address:list:number\n    2:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n    3:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n    4:number <- first 1:address:list:number\n    1:address:list:number <- rest 1:address:list:number\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:list:number <- copy 0
    2:number <- copy 3
    1:address:list:number <- push 2:number, 1:address:list:number
    1:address:list:number <- push 4, 1:address:list:number
    1:address:list:number <- push 5, 1:address:list:number
    2:number <- first 1:address:list:number
    1:address:list:number <- rest 1:address:list:number
    3:number <- first 1:address:list:number
    1:address:list:number <- rest 1:address:list:number
    4:number <- first 1:address:list:number
    1:address:list:number <- rest 1:address:list:number
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1 <- 0  # empty to empty, dust to dust..\n    2 <- 5\n    3 <- 4\n    4 <- 3\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    1 <- 0  # empty to empty, dust to dust..
    2 <- 5
    3 <- 4
    4 <- 3
  ]
9999 parse: recipe scenario-list-handling has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-list-handling
9991 transform: --- transform braces for recipe scenario-list-handling
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- deduce types for recipe scenario-list-handling
9991 transform: --- resolve ambiguous calls for recipe scenario-list-handling
9991 transform: --- collect surrounding spaces for recipe scenario-list-handling
9991 transform: --- transform names for recipe scenario-list-handling
9991 transform: --- compute instruction operations for recipe scenario-list-handling
9991 transform: --- perform checks for recipe scenario-list-handling
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-list-handling
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-list-handling
 102 run: run [
    1:address:list:number <- copy 0
    2:number <- copy 3
    1:address:list:number <- push 2:number, 1:address:list:number
    1:address:list:number <- push 4, 1:address:list:number
    1:address:list:number <- push 5, 1:address:list:number
    2:number <- first 1:address:list:number
    1:address:list:number <- rest 1:address:list:number
    3:number <- first 1:address:list:number
    1:address:list:number <- rest 1:address:list:number
    4:number <- first 1:address:list:number
    1:address:list:number <- rest 1:address:list:number
  ]
9991 parse: --- defining run1001
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"1": <"address" : <"list" : <"number" : <>>>>}
9992 load: after rewriting: 1:address:list:number <- copy 0
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- copy 3
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": "number"}
9993 parse:   ingredient: {"1": <"address" : <"list" : <"number" : <>>>>}
9993 parse:   product: {"1": <"address" : <"list" : <"number" : <>>>>}
9992 load: after rewriting: 1:address:list:number <- push 2:number, 1:address:list:number
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"list" : <"number" : <>>>>}
9993 parse:   product: {"1": <"address" : <"list" : <"number" : <>>>>}
9992 load: after rewriting: 1:address:list:number <- push 4, 1:address:list:number
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"5": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"list" : <"number" : <>>>>}
9993 parse:   product: {"1": <"address" : <"list" : <"number" : <>>>>}
9992 load: after rewriting: 1:address:list:number <- push 5, 1:address:list:number
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"list" : <"number" : <>>>>}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- first 1:address:list:number
9993 parse: instruction: rest
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"list" : <"number" : <>>>>}
9993 parse:   product: {"1": <"address" : <"list" : <"number" : <>>>>}
9992 load: after rewriting: 1:address:list:number <- rest 1:address:list:number
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"list" : <"number" : <>>>>}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- first 1:address:list:number
9993 parse: instruction: rest
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"list" : <"number" : <>>>>}
9993 parse:   product: {"1": <"address" : <"list" : <"number" : <>>>>}
9992 load: after rewriting: 1:address:list:number <- rest 1:address:list:number
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"list" : <"number" : <>>>>}
9993 parse:   product: {"4": "number"}
9992 load: after rewriting: 4:number <- first 1:address:list:number
9993 parse: instruction: rest
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"list" : <"number" : <>>>>}
9993 parse:   product: {"1": <"address" : <"list" : <"number" : <>>>>}
9992 load: after rewriting: 1:address:list:number <- rest 1:address:list:number
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: copy ...
9992 transform: copy ...
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: first ...
9992 transform: rest ...
9992 transform: first ...
9992 transform: rest ...
9992 transform: first ...
9992 transform: rest ...
9992 transform:  ...
9991 transform: --- deduce types for recipe run1001
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction push
9993 transform: mismatch: ingredient 1
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction push
9993 transform: mismatch: ingredient 1
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction rest
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction rest
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction rest
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:list:number <- copy 0
9999 mem: storing 0 in location 1
 103 run: 2:number <- copy 3
9999 mem: storing 3 in location 2
 103 run: 1:address:list:number <- push_2 2:number, 1:address:list:number
9999 mem: location 2 is 3
9999 mem: location 1 is 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 3 in location 1002
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 0 in location 1003
 104 run: result <- new {(list _elem): type}
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1004 is 1007
9998 run: address to copy is 1007
9999 mem: storing 1007 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 3
9999 mem: location 1005 is 1007
9999 mem: storing 3 in location 1007
 104 run: next:address:address:list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 3
9999 mem: location 1008 is 0
9999 mem: location 1004 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1008
9999 mem: storing 0 in location 1008
 104 run: reply result
9999 mem: location 1004 is 1007
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: 1:address:list:number <- push_2 4, 1:address:list:number
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1002
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1003
 104 run: result <- new {(list _elem): type}
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1009
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 4
9999 mem: location 1005 is 1009
9999 mem: storing 4 in location 1009
 104 run: next:address:address:list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 4
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1009
9999 type: type deduced to be number$
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 1007
9999 mem: location 1006 is 1010
9999 mem: storing 1007 in location 1010
 104 run: reply result
9999 mem: location 1004 is 1009
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1
 103 run: 1:address:list:number <- push_2 5, 1:address:list:number
9999 mem: location 1 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 5 in location 1002
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1009 in location 1003
 104 run: result <- new {(list _elem): type}
9999 mem: new alloc: 1011
9999 mem: storing 1011 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1004 is 1011
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 5
9999 mem: location 1005 is 1011
9999 mem: storing 5 in location 1011
 104 run: next:address:address:list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1004 is 1011
9999 type: type deduced to be number$
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 1009
9999 mem: location 1006 is 1012
9999 mem: storing 1009 in location 1012
 104 run: reply result
9999 mem: location 1004 is 1011
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 1
 103 run: 2:number <- first_2 1:address:list:number
9999 mem: location 1 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1013
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1015
 104 run: result <- get *in, value:offset
9999 mem: location 1015 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1011 is 5
9999 mem: location 1012 is 1009
9999 mem: location 1015 is 1011
9998 run: address to copy is 1011
9998 run: its type is number
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1016
 104 run: reply result:_elem
9999 mem: location 1016 is 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 5
9999 mem: storing 5 in location 2
 103 run: 1:address:list:number <- rest_2 1:address:list:number
9999 mem: location 1 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1015
 104 run: result <- get *in, next:offset
9999 mem: location 1015 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1011 is 5
9999 mem: location 1012 is 1009
9999 mem: location 1015 is 1011
9999 type: type deduced to be number$
9998 run: address to copy is 1012
9998 run: its type is <address : <list : <number : <>>>>
9999 mem: location 1012 is 1009
9999 mem: storing 1009 in location 1016
 104 run: reply result:address:list:_elem
9999 mem: location 1016 is 1009
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1
 103 run: 3:number <- first_2 1:address:list:number
9999 mem: location 1 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1009 in location 1015
 104 run: result <- get *in, value:offset
9999 mem: location 1015 is 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 4
9999 mem: location 1010 is 1007
9999 mem: location 1015 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1016
 104 run: reply result:_elem
9999 mem: location 1016 is 4
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9999 mem: storing 4 in location 3
 103 run: 1:address:list:number <- rest_2 1:address:list:number
9999 mem: location 1 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1009 in location 1015
 104 run: result <- get *in, next:offset
9999 mem: location 1015 is 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 4
9999 mem: location 1010 is 1007
9999 mem: location 1015 is 1009
9999 type: type deduced to be number$
9998 run: address to copy is 1010
9998 run: its type is <address : <list : <number : <>>>>
9999 mem: location 1010 is 1007
9999 mem: storing 1007 in location 1016
 104 run: reply result:address:list:_elem
9999 mem: location 1016 is 1007
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: 4:number <- first_2 1:address:list:number
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1015
 104 run: result <- get *in, value:offset
9999 mem: location 1015 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 3
9999 mem: location 1008 is 0
9999 mem: location 1015 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 3
9999 mem: storing 3 in location 1016
 104 run: reply result:_elem
9999 mem: location 1016 is 3
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 3
9999 mem: storing 3 in location 4
 103 run: 1:address:list:number <- rest_2 1:address:list:number
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1015
 104 run: result <- get *in, next:offset
9999 mem: location 1015 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 3
9999 mem: location 1008 is 0
9999 mem: location 1015 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9998 run: its type is <address : <list : <number : <>>>>
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1016
 104 run: reply result:address:list:_elem
9999 mem: location 1016 is 0
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 1
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    1 <- 0  # empty to empty, dust to dust..
    2 <- 5
    3 <- 4
    4 <- 3
  ]
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
