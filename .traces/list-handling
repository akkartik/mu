parse: instruction: run
parse:   ingredient: {name: "
#?     $start-tracing #? 1
    1:address:list <- copy 0:literal
    1:address:list <- push 3:literal, 1:address:list
    1:address:list <- push 4:literal, 1:address:list
    1:address:list <- push 5:literal, 1:address:list
    2:number <- first 1:address:list
    1:address:list <- rest 1:address:list
    3:number <- first 1:address:list
    1:address:list <- rest 1:address:list
    4:number <- first 1:address:list
    1:address:list <- rest 1:address:list
  ", properties: ["
#?     $start-tracing #? 1
    1:address:list <- copy 0:literal
    1:address:list <- push 3:literal, 1:address:list
    1:address:list <- push 4:literal, 1:address:list
    1:address:list <- push 5:literal, 1:address:list
    2:number <- first 1:address:list
    1:address:list <- rest 1:address:list
    3:number <- first 1:address:list
    1:address:list <- rest 1:address:list
    4:number <- first 1:address:list
    1:address:list <- rest 1:address:list
  ": "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    1 <- 0  # empty to empty, dust to dust..
    2 <- 5
    3 <- 4
    4 <- 3
  ", properties: ["
    1 <- 0  # empty to empty, dust to dust..
    2 <- 5
    3 <- 4
    4 <- 3
  ": "literal-string"]}
after-brace: recipe list-handling
after-brace: run ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: list-handling
run: run [
#?     $start-tracing #? 1
    1:address:list <- copy 0:literal
    1:address:list <- push 3:literal, 1:address:list
    1:address:list <- push 4:literal, 1:address:list
    1:address:list <- push 5:literal, 1:address:list
    2:number <- first 1:address:list
    1:address:list <- rest 1:address:list
    3:number <- first 1:address:list
    1:address:list <- rest 1:address:list
    4:number <- first 1:address:list
    1:address:list <- rest 1:address:list
  ]
parse: instruction: copy
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: push
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: push
parse:   ingredient: {name: "4", properties: ["4": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: push
parse:   ingredient: {name: "5", properties: ["5": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: first
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: instruction: rest
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: first
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: rest
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: first
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "4", properties: ["4": "number"]}
parse: instruction: rest
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
after-brace: recipe run1001
after-brace: copy ...
after-brace: push ...
after-brace: push ...
after-brace: push ...
after-brace: first ...
after-brace: rest ...
after-brace: first ...
after-brace: rest ...
after-brace: first ...
after-brace: rest ...
run: 1:address:list <- copy 0:literal
mem: storing 0 in location 1
run: 1:address:list <- push 3:literal, 1:address:list
mem: location 1 is 0
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1000
run: x:location <- next-ingredient 
mem: storing 3 in location 1002
run: in:address:list <- next-ingredient 
mem: storing 0 in location 1003
run: result:address:list <- new list:type
mem: new alloc: 1031
mem: storing 1031 in location 1004
run: val:address:location <- get-address result:address:list/deref, value:offset
mem: location 1004 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1004 is 1031
run: address to copy is 1031
mem: storing 1031 in location 1005
run: val:address:location/deref <- copy x:location
mem: location 1002 is 3
mem: location 1005 is 1031
mem: storing 3 in location 1031
run: next:address:address:list <- get-address result:address:list/deref, next:offset
mem: location 1004 is 1031
mem: location 1031 is 3
mem: location 1032 is 0
mem: location 1004 is 1031
run: address to copy is 1032
mem: storing 1032 in location 1006
run: next:address:address:list/deref <- copy in:address:list
mem: location 1003 is 0
mem: location 1006 is 1032
mem: storing 0 in location 1032
run: reply result:address:list
mem: location 1004 is 1031
run: result 0 is 1031
mem: storing 1031 in location 1
run: 1:address:list <- push 4:literal, 1:address:list
mem: location 1 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1033
run: x:location <- next-ingredient 
mem: storing 4 in location 1035
run: in:address:list <- next-ingredient 
mem: storing 1031 in location 1036
run: result:address:list <- new list:type
mem: new alloc: 1064
mem: storing 1064 in location 1037
run: val:address:location <- get-address result:address:list/deref, value:offset
mem: location 1037 is 1064
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1037 is 1064
run: address to copy is 1064
mem: storing 1064 in location 1038
run: val:address:location/deref <- copy x:location
mem: location 1035 is 4
mem: location 1038 is 1064
mem: storing 4 in location 1064
run: next:address:address:list <- get-address result:address:list/deref, next:offset
mem: location 1037 is 1064
mem: location 1064 is 4
mem: location 1065 is 0
mem: location 1037 is 1064
run: address to copy is 1065
mem: storing 1065 in location 1039
run: next:address:address:list/deref <- copy in:address:list
mem: location 1036 is 1031
mem: location 1039 is 1065
mem: storing 1031 in location 1065
run: reply result:address:list
mem: location 1037 is 1064
run: result 0 is 1064
mem: storing 1064 in location 1
run: 1:address:list <- push 5:literal, 1:address:list
mem: location 1 is 1064
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1066
run: x:location <- next-ingredient 
mem: storing 5 in location 1068
run: in:address:list <- next-ingredient 
mem: storing 1064 in location 1069
run: result:address:list <- new list:type
mem: new alloc: 1097
mem: storing 1097 in location 1070
run: val:address:location <- get-address result:address:list/deref, value:offset
mem: location 1070 is 1097
mem: location 1097 is 0
mem: location 1098 is 0
mem: location 1070 is 1097
run: address to copy is 1097
mem: storing 1097 in location 1071
run: val:address:location/deref <- copy x:location
mem: location 1068 is 5
mem: location 1071 is 1097
mem: storing 5 in location 1097
run: next:address:address:list <- get-address result:address:list/deref, next:offset
mem: location 1070 is 1097
mem: location 1097 is 5
mem: location 1098 is 0
mem: location 1070 is 1097
run: address to copy is 1098
mem: storing 1098 in location 1072
run: next:address:address:list/deref <- copy in:address:list
mem: location 1069 is 1064
mem: location 1072 is 1098
mem: storing 1064 in location 1098
run: reply result:address:list
mem: location 1070 is 1097
run: result 0 is 1097
mem: storing 1097 in location 1
run: 2:number <- first 1:address:list
mem: location 1 is 1097
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1099
run: in:address:list <- next-ingredient 
mem: storing 1097 in location 1101
run: result:location <- get in:address:list/deref, value:offset
mem: location 1101 is 1097
mem: location 1097 is 5
mem: location 1098 is 1064
mem: location 1101 is 1097
run: address to copy is 1097
run: its type is 1
mem: location 1097 is 5
mem: storing 5 in location 1102
run: reply result:location
mem: location 1102 is 5
run: result 0 is 5
mem: storing 5 in location 2
run: 1:address:list <- rest 1:address:list
mem: location 1 is 1097
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1130
run: in:address:list <- next-ingredient 
mem: storing 1097 in location 1132
run: result:address:list <- get in:address:list/deref, next:offset
mem: location 1132 is 1097
mem: location 1097 is 5
mem: location 1098 is 1064
mem: location 1132 is 1097
run: address to copy is 1098
run: its type is 2
mem: location 1098 is 1064
mem: storing 1064 in location 1133
run: reply result:address:list
mem: location 1133 is 1064
run: result 0 is 1064
mem: storing 1064 in location 1
run: 3:number <- first 1:address:list
mem: location 1 is 1064
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1161
run: in:address:list <- next-ingredient 
mem: storing 1064 in location 1163
run: result:location <- get in:address:list/deref, value:offset
mem: location 1163 is 1064
mem: location 1064 is 4
mem: location 1065 is 1031
mem: location 1163 is 1064
run: address to copy is 1064
run: its type is 1
mem: location 1064 is 4
mem: storing 4 in location 1164
run: reply result:location
mem: location 1164 is 4
run: result 0 is 4
mem: storing 4 in location 3
run: 1:address:list <- rest 1:address:list
mem: location 1 is 1064
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1192
run: in:address:list <- next-ingredient 
mem: storing 1064 in location 1194
run: result:address:list <- get in:address:list/deref, next:offset
mem: location 1194 is 1064
mem: location 1064 is 4
mem: location 1065 is 1031
mem: location 1194 is 1064
run: address to copy is 1065
run: its type is 2
mem: location 1065 is 1031
mem: storing 1031 in location 1195
run: reply result:address:list
mem: location 1195 is 1031
run: result 0 is 1031
mem: storing 1031 in location 1
run: 4:number <- first 1:address:list
mem: location 1 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1223
run: in:address:list <- next-ingredient 
mem: storing 1031 in location 1225
run: result:location <- get in:address:list/deref, value:offset
mem: location 1225 is 1031
mem: location 1031 is 3
mem: location 1032 is 0
mem: location 1225 is 1031
run: address to copy is 1031
run: its type is 1
mem: location 1031 is 3
mem: storing 3 in location 1226
run: reply result:location
mem: location 1226 is 3
run: result 0 is 3
mem: storing 3 in location 4
run: 1:address:list <- rest 1:address:list
mem: location 1 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1254
run: in:address:list <- next-ingredient 
mem: storing 1031 in location 1256
run: result:address:list <- get in:address:list/deref, next:offset
mem: location 1256 is 1031
mem: location 1031 is 3
mem: location 1032 is 0
mem: location 1256 is 1031
run: address to copy is 1032
run: its type is 2
mem: location 1032 is 0
mem: storing 0 in location 1257
run: reply result:address:list
mem: location 1257 is 0
run: result 0 is 0
mem: storing 0 in location 1
run: memory-should-contain [
    1 <- 0  # empty to empty, dust to dust..
    2 <- 5
    3 <- 4
    4 <- 3
  ]
run: checking location 1
run: checking location 2
run: checking location 3
run: checking location 4
