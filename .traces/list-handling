parse: instruction: run
parse:   ingredient: {name: "\n#?     $start-tracing #? 1\n    1:address:list <- copy 0\n    1:address:list <- push 3, 1:address:list\n    1:address:list <- push 4, 1:address:list\n    1:address:list <- push 5, 1:address:list\n    2:number <- first 1:address:list\n    1:address:list <- rest 1:address:list\n    3:number <- first 1:address:list\n    1:address:list <- rest 1:address:list\n    4:number <- first 1:address:list\n    1:address:list <- rest 1:address:list\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    1 <- 0  # empty to empty, dust to dust..\n    2 <- 5\n    3 <- 4\n    4 <- 3\n  ", properties: [_: "literal-string"]}
after-brace: recipe scenario-list-handling
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: scenario-list-handling
 101 run: run [
#?     $start-tracing #? 1
    1:address:list <- copy 0
    1:address:list <- push 3, 1:address:list
    1:address:list <- push 4, 1:address:list
    1:address:list <- push 5, 1:address:list
    2:number <- first 1:address:list
    1:address:list <- rest 1:address:list
    3:number <- first 1:address:list
    1:address:list <- rest 1:address:list
    4:number <- first 1:address:list
    1:address:list <- rest 1:address:list
  ]
parse: instruction: copy
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: push
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: push
parse:   ingredient: {name: "4", properties: ["4": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: push
parse:   ingredient: {name: "5", properties: ["5": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: first
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: instruction: rest
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: first
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: rest
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
parse: instruction: first
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "4", properties: ["4": "number"]}
parse: instruction: rest
parse:   ingredient: {name: "1", properties: ["1": "address":"list"]}
parse:   product: {name: "1", properties: ["1": "address":"list"]}
after-brace: recipe run1001
after-brace: copy ...
after-brace: push ...
after-brace: push ...
after-brace: push ...
after-brace: first ...
after-brace: rest ...
after-brace: first ...
after-brace: rest ...
after-brace: first ...
after-brace: rest ...
 101 run: 1:address:list <- copy 0
9999 mem: storing 0 in location 1
 101 run: 1:address:list <- push 3, 1:address:list
9999 mem: location 1 is 0
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 102 run: x:location <- next-ingredient 
9999 mem: storing 3 in location 1002
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 0 in location 1003
 102 run: result:address:list <- new list:type
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1004
 102 run: val:address:location <- get-address *result, value:offset
9999 mem: location 1004 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1004 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1005
 102 run: *val <- copy x
9999 mem: location 1002 is 3
9999 mem: location 1005 is 1007
9999 mem: location 1005 is 1007
9999 mem: storing 3 in location 1007
 102 run: next:address:address:list <- get-address *result, next:offset
9999 mem: location 1004 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 0
9999 mem: location 1004 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1006
 102 run: *next <- copy in
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1008
9999 mem: location 1006 is 1008
9999 mem: storing 0 in location 1008
 102 run: reply result
9999 mem: location 1004 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 101 run: 1:address:list <- push 4, 1:address:list
9999 mem: location 1 is 1007
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 102 run: x:location <- next-ingredient 
9999 mem: storing 4 in location 1002
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1007 in location 1003
 102 run: result:address:list <- new list:type
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1004
 102 run: val:address:location <- get-address *result, value:offset
9999 mem: location 1004 is 1009
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1009
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1005
 102 run: *val <- copy x
9999 mem: location 1002 is 4
9999 mem: location 1005 is 1009
9999 mem: location 1005 is 1009
9999 mem: storing 4 in location 1009
 102 run: next:address:address:list <- get-address *result, next:offset
9999 mem: location 1004 is 1009
9999 mem: location 1009 is 4
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1009
9999 run: address to copy is 1010
9999 mem: storing 1010 in location 1006
 102 run: *next <- copy in
9999 mem: location 1003 is 1007
9999 mem: location 1006 is 1010
9999 mem: location 1006 is 1010
9999 mem: storing 1007 in location 1010
 102 run: reply result
9999 mem: location 1004 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1
 101 run: 1:address:list <- push 5, 1:address:list
9999 mem: location 1 is 1009
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 102 run: x:location <- next-ingredient 
9999 mem: storing 5 in location 1002
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1009 in location 1003
 102 run: result:address:list <- new list:type
9999 mem: new alloc: 1011
9999 mem: storing 1011 in location 1004
 102 run: val:address:location <- get-address *result, value:offset
9999 mem: location 1004 is 1011
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1004 is 1011
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 102 run: *val <- copy x
9999 mem: location 1002 is 5
9999 mem: location 1005 is 1011
9999 mem: location 1005 is 1011
9999 mem: storing 5 in location 1011
 102 run: next:address:address:list <- get-address *result, next:offset
9999 mem: location 1004 is 1011
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1004 is 1011
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 102 run: *next <- copy in
9999 mem: location 1003 is 1009
9999 mem: location 1006 is 1012
9999 mem: location 1006 is 1012
9999 mem: storing 1009 in location 1012
 102 run: reply result
9999 mem: location 1004 is 1011
9999 run: result 0 is 1011
9999 mem: storing 1011 in location 1
 101 run: 2:number <- first 1:address:list
9999 mem: location 1 is 1011
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1013
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1011 in location 1015
 102 run: result:location <- get *in, value:offset
9999 mem: location 1015 is 1011
9999 mem: location 1011 is 5
9999 mem: location 1012 is 1009
9999 mem: location 1015 is 1011
9999 run: address to copy is 1011
9999 run: its type is number
9999 mem: location 1011 is 5
9999 mem: storing 5 in location 1016
 102 run: reply result
9999 mem: location 1016 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 2
 101 run: 1:address:list <- rest 1:address:list
9999 mem: location 1 is 1011
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1011 in location 1015
 102 run: result:address:list <- get *in, next:offset
9999 mem: location 1015 is 1011
9999 mem: location 1011 is 5
9999 mem: location 1012 is 1009
9999 mem: location 1015 is 1011
9999 run: address to copy is 1012
9999 run: its type is address
9999 mem: location 1012 is 1009
9999 mem: storing 1009 in location 1016
 102 run: reply result
9999 mem: location 1016 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1
 101 run: 3:number <- first 1:address:list
9999 mem: location 1 is 1009
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1009 in location 1015
 102 run: result:location <- get *in, value:offset
9999 mem: location 1015 is 1009
9999 mem: location 1009 is 4
9999 mem: location 1010 is 1007
9999 mem: location 1015 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1016
 102 run: reply result
9999 mem: location 1016 is 4
9999 run: result 0 is 4
9999 mem: storing 4 in location 3
 101 run: 1:address:list <- rest 1:address:list
9999 mem: location 1 is 1009
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1009 in location 1015
 102 run: result:address:list <- get *in, next:offset
9999 mem: location 1015 is 1009
9999 mem: location 1009 is 4
9999 mem: location 1010 is 1007
9999 mem: location 1015 is 1009
9999 run: address to copy is 1010
9999 run: its type is address
9999 mem: location 1010 is 1007
9999 mem: storing 1007 in location 1016
 102 run: reply result
9999 mem: location 1016 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 101 run: 4:number <- first 1:address:list
9999 mem: location 1 is 1007
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1007 in location 1015
 102 run: result:location <- get *in, value:offset
9999 mem: location 1015 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 0
9999 mem: location 1015 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 3
9999 mem: storing 3 in location 1016
 102 run: reply result
9999 mem: location 1016 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 4
 101 run: 1:address:list <- rest 1:address:list
9999 mem: location 1 is 1007
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1007 in location 1015
 102 run: result:address:list <- get *in, next:offset
9999 mem: location 1015 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 0
9999 mem: location 1015 is 1007
9999 run: address to copy is 1008
9999 run: its type is address
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1016
 102 run: reply result
9999 mem: location 1016 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1
 100 run: memory-should-contain [
    1 <- 0  # empty to empty, dust to dust..
    2 <- 5
    3 <- 4
    4 <- 3
  ]
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
