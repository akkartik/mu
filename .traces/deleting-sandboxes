9999 parse: instruction: trace-until
9999 parse:   ingredient: {name: "100", properties: ["100": "literal", "app": ]}
9999 parse: instruction: assume-screen
9999 parse:   ingredient: {name: "100", properties: ["100": "literal", "width": ]}
9999 parse:   ingredient: {name: "15", properties: ["15": "literal", "height": ]}
9999 parse: instruction: new
9999 parse:   ingredient: {name: "", properties: [_: "literal-string"]}
9999 parse:   product: {name: "1", properties: ["1": "address":"array":"character"]}
9999 parse: instruction: new
9999 parse:   ingredient: {name: "", properties: [_: "literal-string"]}
9999 parse:   product: {name: "2", properties: ["2": "address":"array":"character"]}
9999 parse: instruction: new-programming-environment
9999 parse:   ingredient: {name: "screen", properties: ["screen": "address"]}
9999 parse:   ingredient: {name: "1", properties: ["1": "address":"array":"character"]}
9999 parse:   ingredient: {name: "2", properties: ["2": "address":"array":"character"]}
9999 parse:   product: {name: "3", properties: ["3": "address":"programming-environment-data"]}
9999 parse: instruction: assume-console
9999 parse:   ingredient: {name: "\n    left-click 1, 80\n    type [divide-with-remainder 11, 3]\n    press F4\n    type [add 2, 2]\n    press F4\n  ", properties: [_: "literal-string"]}
9999 parse: instruction: event-loop
9999 parse:   ingredient: {name: "screen", properties: ["screen": "address"]}
9999 parse:   ingredient: {name: "console", properties: ["console": "address"]}
9999 parse:   ingredient: {name: "3", properties: ["3": "address":"programming-environment-data"]}
9999 parse: instruction: screen-should-contain
9999 parse:   ingredient: {name: "\n    .                                                                                 run (F4)           .\n    .                                                  ┊                                                 .\n    .┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┊━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━.\n    .                                                  ┊                                                x.\n    .                                                  ┊add 2, 2                                         .\n    .                                                  ┊4                                                .\n    .                                                  ┊━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━.\n    .                                                  ┊                                                x.\n    .                                                  ┊divide-with-remainder 11, 3                      .\n    .                                                  ┊3                                                .\n    .                                                  ┊2                                                .\n    .                                                  ┊━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━.\n    .                                                  ┊                                                 .\n  ", properties: [_: "literal-string"]}
9999 parse: instruction: assume-console
9999 parse:   ingredient: {name: "\n    left-click 7, 99\n  ", properties: [_: "literal-string"]}
9999 parse: instruction: run
9999 parse:   ingredient: {name: "\n    event-loop screen:address, console:address, 3:address:programming-environment-data\n  ", properties: [_: "literal-string"]}
9999 parse: instruction: screen-should-contain
9999 parse:   ingredient: {name: "\n    .                                                                                 run (F4)           .\n    .                                                  ┊                                                 .\n    .┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┊━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━.\n    .                                                  ┊                                                x.\n    .                                                  ┊add 2, 2                                         .\n    .                                                  ┊4                                                .\n    .                                                  ┊━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━.\n    .                                                  ┊                                                 .\n    .                                                  ┊                                                 .\n  ", properties: [_: "literal-string"]}
9999 parse: instruction: assume-console
9999 parse:   ingredient: {name: "\n    left-click 3, 99\n  ", properties: [_: "literal-string"]}
9999 parse: instruction: run
9999 parse:   ingredient: {name: "\n    event-loop screen:address, console:address, 3:address:programming-environment-data\n  ", properties: [_: "literal-string"]}
9999 parse: instruction: screen-should-contain
9999 parse:   ingredient: {name: "\n    .                                                                                 run (F4)           .\n    .                                                  ┊                                                 .\n    .┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┊━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━.\n    .                                                  ┊                                                 .\n    .                                                  ┊                                                 .\n  ", properties: [_: "literal-string"]}
9999 after-brace: recipe scenario-deleting-sandboxes
9999 after-brace: trace-until ...
9999 after-brace: new-fake-screen ...
9999 after-brace: new ...
9999 after-brace: new ...
9999 after-brace: new-programming-environment ...
9999 after-brace: assume-console ...
9999 after-brace: event-loop ...
9999 after-brace: screen-should-contain ...
9999 after-brace: assume-console ...
9999 after-brace: run ...
9999 after-brace: screen-should-contain ...
9999 after-brace: assume-console ...
9999 after-brace: run ...
9999 after-brace: screen-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
9999 schedule: scenario-deleting-sandboxes
 101 run: trace-until 100/app
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 114 
  90 print-character: 117 
  90 print-character: 110 
  90 print-character: 32 
  90 print-character: 40 
  90 print-character: 70 
  90 print-character: 52 
  90 print-character: 41 
  90 print-character: 32 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  10 app: next-event 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 100 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 105 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 118 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 105 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 100 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 101 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 45 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 119 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 105 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 116 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 104 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 45 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 114 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 101 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 109 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 97 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 105 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 110 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 100 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 101 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 114 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 32 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 49 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 49 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 44 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 32 
  10 app: next-event 
  10 app: handle-keyboard-event: special character 
  90 print-character: 51 
  10 app: next-event 
  90 print-character: 114 
  90 print-character: 117 
  90 print-character: 110 
  90 print-character: 110 
  90 print-character: 105 
  90 print-character: 110 
  90 print-character: 103 
  90 print-character: 46 
  90 print-character: 46 
  90 print-character: 46 
  90 print-character: 32 
  90 print-character: 32 
 100 run: screen <- render-all screen, env
  10 app: render all 
  11 app: render top menu 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 114 
  90 print-character: 117 
  90 print-character: 110 
  90 print-character: 32 
  90 print-character: 40 
  90 print-character: 70 
  90 print-character: 52 
  90 print-character: 41 
  90 print-character: 32 
  11 app: render divider 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  90 print-character: 9482 
  11 app: render recipes 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 9480 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  11 app: render sandbox side 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 120 
  90 print-character: 100 
  90 print-character: 105 
  90 print-character: 118 
  90 print-character: 105 
  90 print-character: 100 
  90 print-character: 101 
  90 print-character: 45 
  90 print-character: 119 
  90 print-character: 105 
  90 print-character: 116 
  90 print-character: 104 
  90 print-character: 45 
  90 print-character: 114 
  90 print-character: 101 
  90 print-character: 109 
  90 print-character: 97 
  90 print-character: 105 
  90 print-character: 110 
  90 print-character: 100 
  90 print-character: 101 
  90 print-character: 114 
  90 print-character: 32 
  90 print-character: 49 
  90 print-character: 49 
  90 print-character: 44 
  90 print-character: 32 
  90 print-character: 51 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 51 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 50 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  11 app: render status 
 100 run: break-if error?, 
 100 run: status:address:array:character <- new [            ]
 100 run: screen <- update-status screen, status, 245/grey
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: screen <- update-cursor screen, recipes, current-sandbox, *sandbox-in-focus?
 100 run: loop +next-event:label
 100 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
 100 run: loop-unless found?, 
 100 run: break-if quit?, 
 100 run: trace 10, [app], [next-event]
  10 app: next-event 
 100 run: maximized?:address:boolean <- get-address *env, maximized?:offset
 100 run: break-unless *maximized?, 
 100 run: k:address:number <- maybe-convert e:event, keycode:variant
 100 run: break-unless k, 
 100 run: c:address:character <- maybe-convert e:event, text:variant
 100 run: break-unless c, 
 100 run: maximize?:boolean <- equal *c, 24/ctrl-x
 100 run: break-unless maximize?, 
 100 run: switch-side?:boolean <- equal *c, 14/ctrl-n
 100 run: break-unless switch-side?, 
 100 run: redraw-screen?:boolean <- equal *c, 12/ctrl-l
 100 run: break-unless redraw-screen?, 
 100 run: t:address:touch-event <- maybe-convert e:event, touch:variant
 100 run: break-unless t, 
 100 run: r:address:resize-event <- maybe-convert e:event, resize:variant
 100 run: break-unless r, 
 100 run: hide-screen screen
 100 run: break-if *sandbox-in-focus?, 
 100 run: break-unless *sandbox-in-focus?, 
 100 run: screen, current-sandbox, render?:boolean <- handle-keyboard-event screen, current-sandbox, e:event
  10 app: handle-keyboard-event: special character 
  90 print-character: 97 
 100 run: more-events?:boolean <- has-more-events? console
 100 run: break-unless more-events?, 
 100 run: break-if more-events?, 
 100 run: break-unless render-all-on-no-more-events?, 
 100 run: break-unless render?, 
 100 run: screen <- update-cursor screen, recipes, current-sandbox, *sandbox-in-focus?
 100 run: show-screen screen
 100 run: loop 
 100 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
 100 run: loop-unless found?, 
 100 run: break-if quit?, 
 100 run: trace 10, [app], [next-event]
  10 app: next-event 
 100 run: maximized?:address:boolean <- get-address *env, maximized?:offset
 100 run: break-unless *maximized?, 
 100 run: k:address:number <- maybe-convert e:event, keycode:variant
 100 run: break-unless k, 
 100 run: c:address:character <- maybe-convert e:event, text:variant
 100 run: break-unless c, 
 100 run: maximize?:boolean <- equal *c, 24/ctrl-x
 100 run: break-unless maximize?, 
 100 run: switch-side?:boolean <- equal *c, 14/ctrl-n
 100 run: break-unless switch-side?, 
 100 run: redraw-screen?:boolean <- equal *c, 12/ctrl-l
 100 run: break-unless redraw-screen?, 
 100 run: t:address:touch-event <- maybe-convert e:event, touch:variant
 100 run: break-unless t, 
 100 run: r:address:resize-event <- maybe-convert e:event, resize:variant
 100 run: break-unless r, 
 100 run: hide-screen screen
 100 run: break-if *sandbox-in-focus?, 
 100 run: break-unless *sandbox-in-focus?, 
 100 run: screen, current-sandbox, render?:boolean <- handle-keyboard-event screen, current-sandbox, e:event
  10 app: handle-keyboard-event: special character 
  90 print-character: 100 
 100 run: more-events?:boolean <- has-more-events? console
 100 run: break-unless more-events?, 
 100 run: break-if more-events?, 
 100 run: break-unless render-all-on-no-more-events?, 
 100 run: break-unless render?, 
 100 run: screen <- update-cursor screen, recipes, current-sandbox, *sandbox-in-focus?
 100 run: show-screen screen
 100 run: loop 
 100 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
 100 run: loop-unless found?, 
 100 run: break-if quit?, 
 100 run: trace 10, [app], [next-event]
  10 app: next-event 
 100 run: maximized?:address:boolean <- get-address *env, maximized?:offset
 100 run: break-unless *maximized?, 
 100 run: k:address:number <- maybe-convert e:event, keycode:variant
 100 run: break-unless k, 
 100 run: c:address:character <- maybe-convert e:event, text:variant
 100 run: break-unless c, 
 100 run: maximize?:boolean <- equal *c, 24/ctrl-x
 100 run: break-unless maximize?, 
 100 run: switch-side?:boolean <- equal *c, 14/ctrl-n
 100 run: break-unless switch-side?, 
 100 run: redraw-screen?:boolean <- equal *c, 12/ctrl-l
 100 run: break-unless redraw-screen?, 
 100 run: t:address:touch-event <- maybe-convert e:event, touch:variant
 100 run: break-unless t, 
 100 run: r:address:resize-event <- maybe-convert e:event, resize:variant
 100 run: break-unless r, 
 100 run: hide-screen screen
 100 run: break-if *sandbox-in-focus?, 
 100 run: break-unless *sandbox-in-focus?, 
 100 run: screen, current-sandbox, render?:boolean <- handle-keyboard-event screen, current-sandbox, e:event
  10 app: handle-keyboard-event: special character 
  90 print-character: 100 
 100 run: more-events?:boolean <- has-more-events? console
 100 run: break-unless more-events?, 
 100 run: break-if more-events?, 
 100 run: break-unless render-all-on-no-more-events?, 
 100 run: break-unless render?, 
 100 run: screen <- update-cursor screen, recipes, current-sandbox, *sandbox-in-focus?
 100 run: show-screen screen
 100 run: loop 
 100 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
 100 run: loop-unless found?, 
 100 run: break-if quit?, 
 100 run: trace 10, [app], [next-event]
  10 app: next-event 
 100 run: maximized?:address:boolean <- get-address *env, maximized?:offset
 100 run: break-unless *maximized?, 
 100 run: k:address:number <- maybe-convert e:event, keycode:variant
 100 run: break-unless k, 
 100 run: c:address:character <- maybe-convert e:event, text:variant
 100 run: break-unless c, 
 100 run: maximize?:boolean <- equal *c, 24/ctrl-x
 100 run: break-unless maximize?, 
 100 run: switch-side?:boolean <- equal *c, 14/ctrl-n
 100 run: break-unless switch-side?, 
 100 run: redraw-screen?:boolean <- equal *c, 12/ctrl-l
 100 run: break-unless redraw-screen?, 
 100 run: t:address:touch-event <- maybe-convert e:event, touch:variant
 100 run: break-unless t, 
 100 run: r:address:resize-event <- maybe-convert e:event, resize:variant
 100 run: break-unless r, 
 100 run: hide-screen screen
 100 run: break-if *sandbox-in-focus?, 
 100 run: break-unless *sandbox-in-focus?, 
 100 run: screen, current-sandbox, render?:boolean <- handle-keyboard-event screen, current-sandbox, e:event
  10 app: handle-keyboard-event: special character 
  90 print-character: 32 
 100 run: more-events?:boolean <- has-more-events? console
 100 run: break-unless more-events?, 
 100 run: break-if more-events?, 
 100 run: break-unless render-all-on-no-more-events?, 
 100 run: break-unless render?, 
 100 run: screen <- update-cursor screen, recipes, current-sandbox, *sandbox-in-focus?
 100 run: show-screen screen
 100 run: loop 
 100 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
 100 run: loop-unless found?, 
 100 run: break-if quit?, 
 100 run: trace 10, [app], [next-event]
  10 app: next-event 
 100 run: maximized?:address:boolean <- get-address *env, maximized?:offset
 100 run: break-unless *maximized?, 
 100 run: k:address:number <- maybe-convert e:event, keycode:variant
 100 run: break-unless k, 
 100 run: c:address:character <- maybe-convert e:event, text:variant
 100 run: break-unless c, 
 100 run: maximize?:boolean <- equal *c, 24/ctrl-x
 100 run: break-unless maximize?, 
 100 run: switch-side?:boolean <- equal *c, 14/ctrl-n
 100 run: break-unless switch-side?, 
 100 run: redraw-screen?:boolean <- equal *c, 12/ctrl-l
 100 run: break-unless redraw-screen?, 
 100 run: t:address:touch-event <- maybe-convert e:event, touch:variant
 100 run: break-unless t, 
 100 run: r:address:resize-event <- maybe-convert e:event, resize:variant
 100 run: break-unless r, 
 100 run: hide-screen screen
 100 run: break-if *sandbox-in-focus?, 
 100 run: break-unless *sandbox-in-focus?, 
 100 run: screen, current-sandbox, render?:boolean <- handle-keyboard-event screen, current-sandbox, e:event
  10 app: handle-keyboard-event: special character 
  90 print-character: 50 
 100 run: more-events?:boolean <- has-more-events? console
 100 run: break-unless more-events?, 
 100 run: break-if more-events?, 
 100 run: break-unless render-all-on-no-more-events?, 
 100 run: break-unless render?, 
 100 run: screen <- update-cursor screen, recipes, current-sandbox, *sandbox-in-focus?
 100 run: show-screen screen
 100 run: loop 
 100 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
 100 run: loop-unless found?, 
 100 run: break-if quit?, 
 100 run: trace 10, [app], [next-event]
  10 app: next-event 
 100 run: maximized?:address:boolean <- get-address *env, maximized?:offset
 100 run: break-unless *maximized?, 
 100 run: k:address:number <- maybe-convert e:event, keycode:variant
 100 run: break-unless k, 
 100 run: c:address:character <- maybe-convert e:event, text:variant
 100 run: break-unless c, 
 100 run: maximize?:boolean <- equal *c, 24/ctrl-x
 100 run: break-unless maximize?, 
 100 run: switch-side?:boolean <- equal *c, 14/ctrl-n
 100 run: break-unless switch-side?, 
 100 run: redraw-screen?:boolean <- equal *c, 12/ctrl-l
 100 run: break-unless redraw-screen?, 
 100 run: t:address:touch-event <- maybe-convert e:event, touch:variant
 100 run: break-unless t, 
 100 run: r:address:resize-event <- maybe-convert e:event, resize:variant
 100 run: break-unless r, 
 100 run: hide-screen screen
 100 run: break-if *sandbox-in-focus?, 
 100 run: break-unless *sandbox-in-focus?, 
 100 run: screen, current-sandbox, render?:boolean <- handle-keyboard-event screen, current-sandbox, e:event
  10 app: handle-keyboard-event: special character 
  90 print-character: 44 
 100 run: more-events?:boolean <- has-more-events? console
 100 run: break-unless more-events?, 
 100 run: break-if more-events?, 
 100 run: break-unless render-all-on-no-more-events?, 
 100 run: break-unless render?, 
 100 run: screen <- update-cursor screen, recipes, current-sandbox, *sandbox-in-focus?
 100 run: show-screen screen
 100 run: loop 
 100 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
 100 run: loop-unless found?, 
 100 run: break-if quit?, 
 100 run: trace 10, [app], [next-event]
  10 app: next-event 
 100 run: maximized?:address:boolean <- get-address *env, maximized?:offset
 100 run: break-unless *maximized?, 
 100 run: k:address:number <- maybe-convert e:event, keycode:variant
 100 run: break-unless k, 
 100 run: c:address:character <- maybe-convert e:event, text:variant
 100 run: break-unless c, 
 100 run: maximize?:boolean <- equal *c, 24/ctrl-x
 100 run: break-unless maximize?, 
 100 run: switch-side?:boolean <- equal *c, 14/ctrl-n
 100 run: break-unless switch-side?, 
 100 run: redraw-screen?:boolean <- equal *c, 12/ctrl-l
 100 run: break-unless redraw-screen?, 
 100 run: t:address:touch-event <- maybe-convert e:event, touch:variant
 100 run: break-unless t, 
 100 run: r:address:resize-event <- maybe-convert e:event, resize:variant
 100 run: break-unless r, 
 100 run: hide-screen screen
 100 run: break-if *sandbox-in-focus?, 
 100 run: break-unless *sandbox-in-focus?, 
 100 run: screen, current-sandbox, render?:boolean <- handle-keyboard-event screen, current-sandbox, e:event
  10 app: handle-keyboard-event: special character 
  90 print-character: 32 
 100 run: more-events?:boolean <- has-more-events? console
 100 run: break-unless more-events?, 
 100 run: break-if more-events?, 
 100 run: break-unless render-all-on-no-more-events?, 
 100 run: break-unless render?, 
 100 run: screen <- update-cursor screen, recipes, current-sandbox, *sandbox-in-focus?
 100 run: show-screen screen
 100 run: loop 
 100 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
 100 run: loop-unless found?, 
 100 run: break-if quit?, 
 100 run: trace 10, [app], [next-event]
  10 app: next-event 
 100 run: maximized?:address:boolean <- get-address *env, maximized?:offset
 100 run: break-unless *maximized?, 
 100 run: k:address:number <- maybe-convert e:event, keycode:variant
 100 run: break-unless k, 
 100 run: c:address:character <- maybe-convert e:event, text:variant
 100 run: break-unless c, 
 100 run: maximize?:boolean <- equal *c, 24/ctrl-x
 100 run: break-unless maximize?, 
 100 run: switch-side?:boolean <- equal *c, 14/ctrl-n
 100 run: break-unless switch-side?, 
 100 run: redraw-screen?:boolean <- equal *c, 12/ctrl-l
 100 run: break-unless redraw-screen?, 
 100 run: t:address:touch-event <- maybe-convert e:event, touch:variant
 100 run: break-unless t, 
 100 run: r:address:resize-event <- maybe-convert e:event, resize:variant
 100 run: break-unless r, 
 100 run: hide-screen screen
 100 run: break-if *sandbox-in-focus?, 
 100 run: break-unless *sandbox-in-focus?, 
 100 run: screen, current-sandbox, render?:boolean <- handle-keyboard-event screen, current-sandbox, e:event
  10 app: handle-keyboard-event: special character 
  90 print-character: 50 
 100 run: more-events?:boolean <- has-more-events? console
 100 run: break-unless more-events?, 
 100 run: break-if more-events?, 
 100 run: break-unless render-all-on-no-more-events?, 
 100 run: break-unless render?, 
 100 run: screen <- update-cursor screen, recipes, current-sandbox, *sandbox-in-focus?
 100 run: show-screen screen
 100 run: loop 
 100 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
 100 run: loop-unless found?, 
 100 run: break-if quit?, 
 100 run: trace 10, [app], [next-event]
  10 app: next-event 
 100 run: maximized?:address:boolean <- get-address *env, maximized?:offset
 100 run: break-unless *maximized?, 
 100 run: k:address:number <- maybe-convert e:event, keycode:variant
 100 run: break-unless k, 
 100 run: do-run?:boolean <- equal *k, 65532/F4
 100 run: break-unless do-run?, 
 100 run: status:address:array:character <- new [running...  ]
 100 run: screen <- update-status screen, status, 245/grey
  90 print-character: 114 
  90 print-character: 117 
  90 print-character: 110 
  90 print-character: 110 
  90 print-character: 105 
  90 print-character: 110 
  90 print-character: 103 
  90 print-character: 46 
  90 print-character: 46 
  90 print-character: 46 
  90 print-character: 32 
  90 print-character: 32 
 100 run: error?:boolean, env, screen <- run-sandboxes env, screen
 100 run: break-if *warnings, 
 100 run: break-if completed?:boolean, 
  99 run: curr <- get *curr, next-sandbox:offset
  99 run: loop 
  99 run: break-unless curr, 
  99 run: update-sandbox curr
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sandbox:address:sandbox-data <- next-ingredient 
 100 run: data:address:array:character <- get *sandbox, data:offset
 100 run: response:address:address:array:character <- get-address *sandbox, response:offset
 100 run: warnings:address:address:array:character <- get-address *sandbox, warnings:offset
 100 run: trace:address:address:array:character <- get-address *sandbox, trace:offset
 100 run: fake-screen:address:address:screen <- get-address *sandbox, screen:offset
 100 run: *response, *warnings, *fake-screen, *trace, completed?:boolean <- run-interactive data
  99 run: reply output, warnings, screen, stashes, completed?
  98 run: break-if *warnings, 
  98 run: break-if completed?:boolean, 
  97 run: curr <- get *curr, next-sandbox:offset
  97 run: loop 
  97 run: break-unless curr, 
  97 run: reply 0/no-errors-found, env/same-as-ingredient:0, screen/same-as-ingredient:1
  96 run: screen <- render-all screen, env
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: screen:address <- next-ingredient 
  97 run: env:address:programming-environment-data <- next-ingredient 
  97 run: trace 10, [app], [render all]
  10 app: render all 
  97 run: hide-screen screen
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: break-unless screen, 
  98 run: reply screen
  97 run: trace 11, [app], [render top menu]
  11 app: render top menu 
  97 run: width:number <- screen-width screen
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: reply width
  97 run: draw-horizontal screen, 0, 0/left, width, 32/space, 0/black, 238/grey
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: row:number <- next-ingredient 
  98 run: x:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: style:character, style-found?:boolean <- next-ingredient 
  98 run: break-if style-found?, 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: screen <- move-cursor screen, row, x
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  97 run: button-start:number <- subtract width, 20
  97 run: button-on-screen?:boolean <- greater-or-equal button-start, 0
  97 run: assert button-on-screen?, [screen too narrow for menu]
  97 run: screen <- move-cursor screen, 0/row, button-start
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: run-button:address:array:character <- new [ run (F4) ]
  97 run: print-string screen, run-button, 255/white, 161/reddish
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address:screen <- next-ingredient 
  98 run: s:address:array:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: len:number <- length *s
  98 run: i:number <- copy 0
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 114 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 117 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 110 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 40 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 70 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 52 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 41 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: reply screen/same-as-ingredient:0
  97 run: trace 11, [app], [render divider]
  11 app: render divider 
  97 run: divider:number, _ <- divide-with-remainder width, 2
  97 run: height:number <- screen-height screen
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: break-unless sc, 
  98 run: height:number <- get *sc, num-rows:offset
  98 run: reply height
  97 run: draw-vertical screen, divider, 1/top, height, 9482/vertical-dotted
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: col:number <- next-ingredient 
  98 run: y:number <- next-ingredient 
  98 run: bottom:number <- next-ingredient 
  98 run: style:character, style-found?:boolean <- next-ingredient 
  98 run: break-if style-found?, 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: color <- copy 245/grey
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  98 run: screen <- move-cursor screen, y, col
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: print-character screen, style, color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 9482 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: y <- add y, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-than y, bottom
  98 run: break-unless continue?, 
  97 run: screen <- render-recipes screen, env
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: env:address:programming-environment-data <- next-ingredient 
  98 run: trace 11, [app], [render recipes]
  11 app: render recipes 
  98 run: recipes:address:editor-data <- get *env, recipes:offset
  98 run: left:number <- get *recipes, left:offset
  98 run: right:number <- get *recipes, right:offset
  98 run: row:number, column:number, screen <- render screen, recipes
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: editor:address:editor-data <- next-ingredient 
  99 run: jump-if editor, 1:offset
  99 run: left:number <- get *editor, left:offset
  99 run: screen-height:number <- screen-height screen
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: break-unless sc, 
 100 run: height:number <- get *sc, num-rows:offset
 100 run: reply height
  99 run: right:number <- get *editor, right:offset
  99 run: curr:address:duplex-list <- get *editor, top-of-screen:offset
  99 run: prev:address:duplex-list <- copy curr
  99 run: curr <- next-duplex curr
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: in:address:duplex-list <- next-ingredient 
 100 run: jump-if in, 1:offset
 100 run: result:address:duplex-list <- get *in, next:offset
 100 run: reply result
  99 run: color:number <- copy 7/white
  99 run: row:number <- copy 1/top
  99 run: column:number <- copy left
  99 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
  99 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
  99 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
  99 run: screen <- move-cursor screen, row, column
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: break-unless curr, 
  99 run: bottom-of-screen:address:address:duplex-list <- get-address *editor, bottom-of-screen:offset
  99 run: *bottom-of-screen <- copy curr
  99 run: at-cursor-row?:boolean <- equal row, *cursor-row
  99 run: cursor-outside-line?:boolean <- lesser-or-equal column, *cursor-column
  99 run: before-cursor-on-same-line?:boolean <- and at-cursor-row?, cursor-outside-line?
  99 run: above-cursor-row?:boolean <- lesser-than row, *cursor-row
  99 run: before-cursor?:boolean <- or before-cursor-on-same-line?, above-cursor-row?
  99 run: break-unless before-cursor?, 
  99 run: *cursor-row <- copy row
  99 run: *cursor-column <- copy column
  99 run: *before-cursor <- copy prev
  99 run: reply row, column, screen/same-as-ingredient:0, editor/same-as-ingredient:1
  98 run: clear-line-delimited screen, column, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: recipe-warnings:address:array:character <- get *env, recipe-warnings:offset
  98 run: break-unless recipe-warnings, 
  98 run: draw-horizontal screen, row, left, right, 9480/horizontal-dotted
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: row:number <- next-ingredient 
  99 run: x:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: style:character, style-found?:boolean <- next-ingredient 
  99 run: break-if style-found?, 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 245/grey
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: screen <- move-cursor screen, row, x
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9480 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  98 run: row <- add row, 1
  98 run: clear-screen-from screen, row, left, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: row:number <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: left:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: break-if screen, 
  99 run: screen <- move-cursor screen, row, column
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, column, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: clear-rest-of-screen screen, row, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: row:number <- next-ingredient 
 100 run: left:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: row <- add row, 1
 100 run: screen <- move-cursor screen, row, left
 100 run: screen-height:number <- screen-height screen
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
  99 run: reply screen/same-as-ingredient:0
  98 run: reply screen/same-as-ingredient:0
  97 run: screen <- render-sandbox-side screen, env
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: env:address:programming-environment-data <- next-ingredient 
  98 run: trace 11, [app], [render sandbox side]
  11 app: render sandbox side 
  98 run: current-sandbox:address:editor-data <- get *env, current-sandbox:offset
  98 run: left:number <- get *current-sandbox, left:offset
  98 run: right:number <- get *current-sandbox, right:offset
  98 run: row:number, column:number, screen, current-sandbox <- render screen, current-sandbox
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: editor:address:editor-data <- next-ingredient 
  99 run: jump-if editor, 1:offset
  99 run: left:number <- get *editor, left:offset
  99 run: screen-height:number <- screen-height screen
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: break-unless sc, 
 100 run: height:number <- get *sc, num-rows:offset
 100 run: reply height
  99 run: right:number <- get *editor, right:offset
  99 run: curr:address:duplex-list <- get *editor, top-of-screen:offset
  99 run: prev:address:duplex-list <- copy curr
  99 run: curr <- next-duplex curr
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: in:address:duplex-list <- next-ingredient 
 100 run: jump-if in, 1:offset
 100 run: result:address:duplex-list <- get *in, next:offset
 100 run: reply result
  99 run: color:number <- copy 7/white
  99 run: row:number <- copy 1/top
  99 run: column:number <- copy left
  99 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
  99 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
  99 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
  99 run: screen <- move-cursor screen, row, column
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: break-unless curr, 
  99 run: bottom-of-screen:address:address:duplex-list <- get-address *editor, bottom-of-screen:offset
  99 run: *bottom-of-screen <- copy curr
  99 run: at-cursor-row?:boolean <- equal row, *cursor-row
  99 run: cursor-outside-line?:boolean <- lesser-or-equal column, *cursor-column
  99 run: before-cursor-on-same-line?:boolean <- and at-cursor-row?, cursor-outside-line?
  99 run: above-cursor-row?:boolean <- lesser-than row, *cursor-row
  99 run: before-cursor?:boolean <- or before-cursor-on-same-line?, above-cursor-row?
  99 run: break-unless before-cursor?, 
  99 run: *cursor-row <- copy row
  99 run: *cursor-column <- copy column
  99 run: *before-cursor <- copy prev
  99 run: reply row, column, screen/same-as-ingredient:0, editor/same-as-ingredient:1
  98 run: clear-screen-from screen, row, column, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: row:number <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: left:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: break-if screen, 
  99 run: screen <- move-cursor screen, row, column
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, column, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: clear-rest-of-screen screen, row, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: row:number <- next-ingredient 
 100 run: left:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: row <- add row, 1
 100 run: screen <- move-cursor screen, row, left
 100 run: screen-height:number <- screen-height screen
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: row <- add row, 1
 100 run: loop 
 100 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
 100 run: break-if at-bottom-of-screen?, 
  99 run: reply screen/same-as-ingredient:0
  98 run: row <- add row, 1
  98 run: draw-horizontal screen, row, left, right, 9473/horizontal-double
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: row:number <- next-ingredient 
  99 run: x:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: style:character, style-found?:boolean <- next-ingredient 
  99 run: break-if style-found?, 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 245/grey
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: screen <- move-cursor screen, row, x
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  98 run: sandbox:address:sandbox-data <- get *env, sandbox:offset
  98 run: row, screen <- render-sandboxes screen, sandbox, left, right, row
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: sandbox:address:sandbox-data <- next-ingredient 
  99 run: left:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: row:number <- next-ingredient 
  99 run: jump-if sandbox, 1:offset
  99 run: screen-height:number <- screen-height screen
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: break-unless sc, 
 100 run: height:number <- get *sc, num-rows:offset
 100 run: reply height
  99 run: at-bottom?:boolean <- greater-or-equal row, screen-height
  99 run: jump-unless at-bottom?:boolean, 1:offset
  99 run: row <- add row, 1
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: print-character screen, 120/x, 245/grey
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 120 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: starting-row:address:number <- get-address *sandbox, starting-row-on-screen:offset
  99 run: *starting-row <- copy row
  99 run: row <- add row, 1
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: sandbox-data:address:array:character <- get *sandbox, data:offset
  99 run: row, screen <- render-code-string screen, sandbox-data, left, right, row
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: s:address:array:character <- next-ingredient 
 100 run: left:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: row:number <- next-ingredient 
 100 run: jump-if s, 1:offset
 100 run: color:number <- copy 7/white
 100 run: column:number <- copy left
 100 run: screen <- move-cursor screen, row, column
 100 run: screen-height:number <- screen-height screen
 100 run: i:number <- copy 0
 100 run: len:number <- length *s
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: done? <- greater-or-equal row, screen-height
 100 run: break-if done?, 
 100 run: c:character <- index *s, i
 100 run: color <- get-color color, c
 100 run: at-right?:boolean <- equal column, right
 100 run: break-unless at-right?, 
 100 run: i <- add i, 1
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: print-character screen, c, color
  90 print-character: 97 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: done? <- greater-or-equal row, screen-height
 100 run: break-if done?, 
 100 run: c:character <- index *s, i
 100 run: color <- get-color color, c
 100 run: at-right?:boolean <- equal column, right
 100 run: break-unless at-right?, 
 100 run: i <- add i, 1
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: print-character screen, c, color
  90 print-character: 100 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: done? <- greater-or-equal row, screen-height
 100 run: break-if done?, 
 100 run: c:character <- index *s, i
 100 run: color <- get-color color, c
 100 run: at-right?:boolean <- equal column, right
 100 run: break-unless at-right?, 
 100 run: i <- add i, 1
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: print-character screen, c, color
  90 print-character: 100 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: done? <- greater-or-equal row, screen-height
 100 run: break-if done?, 
 100 run: c:character <- index *s, i
 100 run: color <- get-color color, c
 100 run: at-right?:boolean <- equal column, right
 100 run: break-unless at-right?, 
 100 run: i <- add i, 1
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: print-character screen, c, color
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: done? <- greater-or-equal row, screen-height
 100 run: break-if done?, 
 100 run: c:character <- index *s, i
 100 run: color <- get-color color, c
 100 run: at-right?:boolean <- equal column, right
 100 run: break-unless at-right?, 
 100 run: i <- add i, 1
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: print-character screen, c, color
  90 print-character: 50 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: done? <- greater-or-equal row, screen-height
 100 run: break-if done?, 
 100 run: c:character <- index *s, i
 100 run: color <- get-color color, c
 100 run: at-right?:boolean <- equal column, right
 100 run: break-unless at-right?, 
 100 run: i <- add i, 1
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: print-character screen, c, color
  90 print-character: 44 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: done? <- greater-or-equal row, screen-height
 100 run: break-if done?, 
 100 run: c:character <- index *s, i
 100 run: color <- get-color color, c
 100 run: at-right?:boolean <- equal column, right
 100 run: break-unless at-right?, 
 100 run: i <- add i, 1
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: print-character screen, c, color
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: done? <- greater-or-equal row, screen-height
 100 run: break-if done?, 
 100 run: c:character <- index *s, i
 100 run: color <- get-color color, c
 100 run: at-right?:boolean <- equal column, right
 100 run: break-unless at-right?, 
 100 run: i <- add i, 1
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: print-character screen, c, color
  90 print-character: 50 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: was-at-left?:boolean <- equal column, left
 100 run: clear-line-delimited screen, column, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: break-if was-at-left?, 
 100 run: row <- add row, 1
 100 run: move-cursor screen, row, left
 100 run: reply row/same-as-ingredient:4, screen/same-as-ingredient:0
  99 run: code-ending-row:address:number <- get-address *sandbox, code-ending-row-on-screen:offset
  99 run: *code-ending-row <- copy row
  99 run: response-starting-row:address:number <- get-address *sandbox, response-starting-row-on-screen:offset
  99 run: sandbox-response:address:array:character <- get *sandbox, response:offset
  99 run: display-trace?:boolean <- get *sandbox, display-trace?:offset
  99 run: break-unless display-trace?, 
  99 run: sandbox-warnings:address:array:character <- get *sandbox, warnings:offset
  99 run: break-unless sandbox-warnings, 
  99 run: sandbox-screen:address <- get *sandbox, screen:offset
  99 run: empty-screen?:boolean <- fake-screen-is-empty? sandbox-screen
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: jump-if sc, 1:offset
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: i:number <- copy 0
 100 run: len:number <- length *buf
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: curr:screen-cell <- index *buf, i
 100 run: curr-contents:character <- get curr, contents:offset
 100 run: i <- add i, 1
 100 run: loop-unless curr-contents, 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: reply 1/true
  99 run: break-if empty-screen?, 
  99 run: break-unless empty-screen?, 
  99 run: *response-starting-row <- copy row
  99 run: break-unless sandbox-response, 
  99 run: expected-response:address:array:character <- get *sandbox, expected-response:offset
  99 run: break-unless expected-response, 
  99 run: row, screen <- render-string screen, sandbox-response, left, right, 245/grey, row
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: s:address:array:character <- next-ingredient 
 100 run: left:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: color:number <- next-ingredient 
 100 run: row:number <- next-ingredient 
 100 run: jump-if s, 1:offset
 100 run: column:number <- copy left
 100 run: screen <- move-cursor screen, row, column
 100 run: screen-height:number <- screen-height screen
 100 run: i:number <- copy 0
 100 run: len:number <- length *s
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: done? <- greater-or-equal row, screen-height
 100 run: break-if done?, 
 100 run: c:character <- index *s, i
 100 run: at-right?:boolean <- equal column, right
 100 run: break-unless at-right?, 
 100 run: i <- add i, 1
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: print-character screen, c, color
  90 print-character: 52 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: done? <- greater-or-equal row, screen-height
 100 run: break-if done?, 
 100 run: c:character <- index *s, i
 100 run: at-right?:boolean <- equal column, right
 100 run: break-unless at-right?, 
 100 run: i <- add i, 1
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: print-character screen, c, color
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: done? <- greater-or-equal row, screen-height
 100 run: break-if done?, 
 100 run: c:character <- index *s, i
 100 run: at-right?:boolean <- equal column, right
 100 run: break-unless at-right?, 
 100 run: i <- add i, 1
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: row <- add row, 1
 100 run: column <- copy left
 100 run: screen <- move-cursor screen, row, column
 100 run: loop +next-character:label
 100 run: done?:boolean <- greater-or-equal i, len
 100 run: break-if done?, 
 100 run: was-at-left?:boolean <- equal column, left
 100 run: clear-line-delimited screen, column, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: break-if was-at-left?, 
 100 run: move-cursor screen, row, left
 100 run: reply row/same-as-ingredient:5, screen/same-as-ingredient:0
  99 run: at-bottom?:boolean <- greater-or-equal row, screen-height
  99 run: jump-unless at-bottom?, 1:offset
  99 run: draw-horizontal screen, row, left, right, 9473/horizontal-double
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: row:number <- next-ingredient 
 100 run: x:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: style:character, style-found?:boolean <- next-ingredient 
 100 run: break-if style-found?, 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 245/grey
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: screen <- move-cursor screen, row, x
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
 100 run: print-character screen, style, color, bg-color
  90 print-character: 9473 
 100 run: x <- add x, 1
 100 run: loop 
 100 run: continue?:boolean <- lesser-or-equal x, right
 100 run: break-unless continue?, 
  99 run: next-sandbox:address:sandbox-data <- get *sandbox, next-sandbox:offset
  99 run: row, screen <- render-sandboxes screen, next-sandbox, left, right, row
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: sandbox:address:sandbox-data <- next-ingredient 
 100 run: left:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: row:number <- next-ingredient 
 100 run: jump-if sandbox, 1:offset
 100 run: screen-height:number <- screen-height screen
 100 run: at-bottom?:boolean <- greater-or-equal row, screen-height
 100 run: jump-unless at-bottom?:boolean, 1:offset
 100 run: row <- add row, 1
 100 run: screen <- move-cursor screen, row, left
 100 run: clear-line-delimited screen, left, right
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: print-character screen, 120/x, 245/grey
  90 print-character: 120 
 100 run: starting-row:address:number <- get-address *sandbox, starting-row-on-screen:offset
 100 run: *starting-row <- copy row
 100 run: row <- add row, 1
 100 run: screen <- move-cursor screen, row, left
 100 run: sandbox-data:address:array:character <- get *sandbox, data:offset
 100 run: row, screen <- render-code-string screen, sandbox-data, left, right, row
  90 print-character: 100 
  90 print-character: 105 
  90 print-character: 118 
  90 print-character: 105 
  90 print-character: 100 
  90 print-character: 101 
  90 print-character: 45 
  90 print-character: 119 
  90 print-character: 105 
  90 print-character: 116 
  90 print-character: 104 
  90 print-character: 45 
  90 print-character: 114 
  90 print-character: 101 
  90 print-character: 109 
  90 print-character: 97 
  90 print-character: 105 
  90 print-character: 110 
  90 print-character: 100 
  90 print-character: 101 
  90 print-character: 114 
  90 print-character: 32 
  90 print-character: 49 
  90 print-character: 49 
  90 print-character: 44 
  90 print-character: 32 
  90 print-character: 51 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: code-ending-row:address:number <- get-address *sandbox, code-ending-row-on-screen:offset
 100 run: *code-ending-row <- copy row
 100 run: response-starting-row:address:number <- get-address *sandbox, response-starting-row-on-screen:offset
 100 run: sandbox-response:address:array:character <- get *sandbox, response:offset
 100 run: display-trace?:boolean <- get *sandbox, display-trace?:offset
 100 run: break-unless display-trace?, 
 100 run: sandbox-warnings:address:array:character <- get *sandbox, warnings:offset
 100 run: break-unless sandbox-warnings, 
 100 run: sandbox-screen:address <- get *sandbox, screen:offset
 100 run: empty-screen?:boolean <- fake-screen-is-empty? sandbox-screen
 100 run: break-if empty-screen?, 
 100 run: break-unless empty-screen?, 
 100 run: *response-starting-row <- copy row
 100 run: break-unless sandbox-response, 
 100 run: expected-response:address:array:character <- get *sandbox, expected-response:offset
 100 run: break-unless expected-response, 
 100 run: row, screen <- render-string screen, sandbox-response, left, right, 245/grey, row
  90 print-character: 51 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 50 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
  90 print-character: 32 
 100 run: at-bottom?:boolean <- greater-or-equal row, screen-height
 100 run: jump-unless at-bottom?, 1:offset
 100 run: draw-horizontal screen, row, left, right, 9473/horizontal-double
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
  90 print-character: 9473 
 100 run: next-sandbox:address:sandbox-data <- get *sandbox, next-sandbox:offset
 100 run: row, screen <- render-sandboxes screen, next-sandbox, left, right, row
 100 run: reply row/same-as-ingredient:4, screen/same-as-ingredient:0
  99 run: reply row/same-as-ingredient:4, screen/same-as-ingredient:0
  98 run: clear-rest-of-screen screen, row, left, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: row:number <- next-ingredient 
  99 run: left:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: row <- add row, 1
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: screen-height:number <- screen-height screen
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: break-unless sc, 
 100 run: height:number <- get *sc, num-rows:offset
 100 run: reply height
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  98 run: reply screen/same-as-ingredient:0
  97 run: trace 11, [app], [render status]
  11 app: render status 
  97 run: recipe-warnings:address:array:character <- get *env, recipe-warnings:offset
  97 run: break-unless recipe-warnings, 
  97 run: recipes:address:editor-data <- get *env, recipes:offset
  97 run: current-sandbox:address:editor-data <- get *env, current-sandbox:offset
  97 run: sandbox-in-focus?:boolean <- get *env, sandbox-in-focus?:offset
  97 run: screen <- update-cursor screen, recipes, current-sandbox, sandbox-in-focus?
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: recipes:address:editor-data <- next-ingredient 
  98 run: current-sandbox:address:editor-data <- next-ingredient 
  98 run: sandbox-in-focus?:boolean <- next-ingredient 
  98 run: break-if sandbox-in-focus?, 
  98 run: break-unless sandbox-in-focus?, 
  98 run: cursor-row:number <- get *current-sandbox, cursor-row:offset
  98 run: cursor-column:number <- get *current-sandbox, cursor-column:offset
  98 run: screen <- move-cursor screen, cursor-row, cursor-column
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: reply screen/same-as-ingredient:0
  97 run: show-screen screen
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: break-unless screen, 
  98 run: reply screen
  97 run: reply screen/same-as-ingredient:0
  96 run: break-if error?, 
  96 run: status:address:array:character <- new [            ]
  96 run: screen <- update-status screen, status, 245/grey
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: screen:address <- next-ingredient 
  97 run: msg:address:array:character <- next-ingredient 
  97 run: color:number <- next-ingredient 
  97 run: screen <- move-cursor screen, 0, 2
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: screen <- print-string screen, msg, color, 238/grey/background
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address:screen <- next-ingredient 
  98 run: s:address:array:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: len:number <- length *s
  98 run: i:number <- copy 0
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: c:character <- index *s, i
  98 run: print-character screen, c, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: i <- add i, 1
  98 run: loop 
  98 run: done?:boolean <- greater-or-equal i, len
  98 run: break-if done?, 
  98 run: reply screen/same-as-ingredient:0
  97 run: reply screen/same-as-ingredient:0
  96 run: screen <- update-cursor screen, recipes, current-sandbox, *sandbox-in-focus?
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: screen:address <- next-ingredient 
  97 run: recipes:address:editor-data <- next-ingredient 
  97 run: current-sandbox:address:editor-data <- next-ingredient 
  97 run: sandbox-in-focus?:boolean <- next-ingredient 
  97 run: break-if sandbox-in-focus?, 
  97 run: break-unless sandbox-in-focus?, 
  97 run: cursor-row:number <- get *current-sandbox, cursor-row:offset
  97 run: cursor-column:number <- get *current-sandbox, cursor-column:offset
  97 run: screen <- move-cursor screen, cursor-row, cursor-column
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: reply screen/same-as-ingredient:0
  96 run: loop +next-event:label
  96 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: x:address:console <- next-ingredient 
  97 run: break-unless x, 
  97 run: idx:address:number <- get-address *x, index:offset
  97 run: buf:address:array:event <- get *x, data:offset
  97 run: max:number <- length *buf
  97 run: done?:boolean <- greater-or-equal *idx, max
  97 run: break-unless done?, 
  97 run: dummy:address:event <- new event:type
  97 run: reply *dummy, x/same-as-ingredient:0, 1/found, 1/quit
  96 run: loop-unless found?, 
  96 run: break-if quit?, 
  95 run: screen-should-contain [
    .                                                                                 run (F4)           .
    .                                                  ┊                                                 .
    .┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┊━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━.
    .                                                  ┊                                                x.
    .                                                  ┊add 2, 2                                         .
    .                                                  ┊4                                                .
    .                                                  ┊━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━.
    .                                                  ┊                                                x.
    .                                                  ┊divide-with-remainder 11, 3                      .
    .                                                  ┊3                                                .
    .                                                  ┊2                                                .
    .                                                  ┊━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━.
    .                                                  ┊                                                 .
  ]
  95 run: assume-console [
    left-click 7, 99
  ]
  95 run: run [
    event-loop screen:address, console:address, 3:address:programming-environment-data
  ]
  95 run: event-loop screen:address, console:address, 3:address:programming-environment-data
  96 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  96 run: screen:address <- next-ingredient 
  96 run: console:address <- next-ingredient 
  96 run: env:address:programming-environment-data <- next-ingredient 
  96 run: recipes:address:editor-data <- get *env, recipes:offset
  96 run: current-sandbox:address:editor-data <- get *env, current-sandbox:offset
  96 run: sandbox-in-focus?:address:boolean <- get-address *env, sandbox-in-focus?:offset
  96 run: render-all-on-no-more-events?:boolean <- copy 0/false
  96 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: x:address:console <- next-ingredient 
  97 run: break-unless x, 
  97 run: idx:address:number <- get-address *x, index:offset
  97 run: buf:address:array:event <- get *x, data:offset
  97 run: max:number <- length *buf
  97 run: done?:boolean <- greater-or-equal *idx, max
  97 run: break-unless done?, 
  97 run: result:event <- index *buf, *idx
  97 run: *idx <- add *idx, 1
  97 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
  96 run: loop-unless found?, 
  96 run: break-if quit?, 
  96 run: trace 10, [app], [next-event]
  10 app: next-event 
  96 run: maximized?:address:boolean <- get-address *env, maximized?:offset
  96 run: break-unless *maximized?, 
  96 run: k:address:number <- maybe-convert e:event, keycode:variant
  96 run: break-unless k, 
  96 run: c:address:character <- maybe-convert e:event, text:variant
  96 run: break-unless c, 
  96 run: t:address:touch-event <- maybe-convert e:event, touch:variant
  96 run: break-unless t, 
  96 run: touch-type:number <- get *t, type:offset
  96 run: is-left-click?:boolean <- equal touch-type, 65513/mouse-left
  96 run: loop-unless is-left-click?, +next-event:label
  96 run: sandbox-left-margin:number <- get *current-sandbox, left:offset
  96 run: click-column:number <- get *t, column:offset
  96 run: on-sandbox-side?:boolean <- greater-or-equal click-column, sandbox-left-margin
  96 run: break-unless on-sandbox-side?, 
  96 run: first-sandbox:address:sandbox-data <- get *env, sandbox:offset
  96 run: break-unless first-sandbox, 
  96 run: first-sandbox-begins:number <- get *first-sandbox, starting-row-on-screen:offset
  96 run: click-row:number <- get *t, row:offset
  96 run: below-sandbox-editor?:boolean <- greater-or-equal click-row, first-sandbox-begins
  96 run: break-unless below-sandbox-editor?, 
  96 run: sandbox:address:sandbox-data <- find-click-in-sandbox-code env, click-row
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: env:address:programming-environment-data <- next-ingredient 
  97 run: click-row:number <- next-ingredient 
  97 run: sandbox:address:sandbox-data <- get *env, sandbox:offset
  97 run: start:number <- get *sandbox, starting-row-on-screen:offset
  97 run: clicked-on-sandboxes?:boolean <- greater-or-equal click-row, start
  97 run: assert clicked-on-sandboxes?, [extract-sandbox called on click to sandbox editor]
  97 run: next-sandbox:address:sandbox-data <- get *sandbox, next-sandbox:offset
  97 run: break-unless next-sandbox, 
  97 run: next-start:number <- get *next-sandbox, starting-row-on-screen:offset
  97 run: found?:boolean <- lesser-than click-row, next-start
  97 run: break-if found?, 
  97 run: sandbox <- copy next-sandbox
  97 run: loop 
  97 run: next-sandbox:address:sandbox-data <- get *sandbox, next-sandbox:offset
  97 run: break-unless next-sandbox, 
  97 run: code-ending-row:number <- get *sandbox, code-ending-row-on-screen:offset
  97 run: click-above-response?:boolean <- lesser-than click-row, code-ending-row
  97 run: start:number <- get *sandbox, starting-row-on-screen:offset
  97 run: click-below-menu?:boolean <- greater-than click-row, start
  97 run: click-on-sandbox-code?:boolean <- and click-above-response?, click-below-menu?
  97 run: break-if click-on-sandbox-code?, 
  97 run: reply 0/no-click-in-sandbox-output
  96 run: break-unless sandbox, 
  96 run: sandbox-left-margin:number <- get *current-sandbox, left:offset
  96 run: click-column:number <- get *t, column:offset
  96 run: on-sandbox-side?:boolean <- greater-or-equal click-column, sandbox-left-margin
  96 run: break-unless on-sandbox-side?, 
  96 run: first-sandbox:address:sandbox-data <- get *env, sandbox:offset
  96 run: break-unless first-sandbox, 
  96 run: first-sandbox-begins:number <- get *first-sandbox, starting-row-on-screen:offset
  96 run: click-row:number <- get *t, row:offset
  96 run: below-sandbox-editor?:boolean <- greater-or-equal click-row, first-sandbox-begins
  96 run: break-unless below-sandbox-editor?, 
  96 run: sandbox:address:sandbox-data <- find-click-in-sandbox-output env, click-row
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: env:address:programming-environment-data <- next-ingredient 
  97 run: click-row:number <- next-ingredient 
  97 run: sandbox:address:sandbox-data <- get *env, sandbox:offset
  97 run: start:number <- get *sandbox, starting-row-on-screen:offset
  97 run: clicked-on-sandboxes?:boolean <- greater-or-equal click-row, start
  97 run: assert clicked-on-sandboxes?, [extract-sandbox called on click to sandbox editor]
  97 run: next-sandbox:address:sandbox-data <- get *sandbox, next-sandbox:offset
  97 run: break-unless next-sandbox, 
  97 run: next-start:number <- get *next-sandbox, starting-row-on-screen:offset
  97 run: found?:boolean <- lesser-than click-row, next-start
  97 run: break-if found?, 
  97 run: sandbox <- copy next-sandbox
  97 run: loop 
  97 run: next-sandbox:address:sandbox-data <- get *sandbox, next-sandbox:offset
  97 run: break-unless next-sandbox, 
  97 run: response-starting-row:number <- get *sandbox, response-starting-row-on-screen:offset
  97 run: jump-if response-starting-row, 1:offset
  97 run: click-in-response?:boolean <- greater-or-equal click-row, response-starting-row
  97 run: jump-if click-in-response?, 1:offset
  97 run: reply 0/no-click-in-sandbox-output
  96 run: break-unless sandbox, 
  96 run: was-delete?:boolean <- delete-sandbox *t, env
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: t:touch-event <- next-ingredient 
  97 run: env:address:programming-environment-data <- next-ingredient 
  97 run: click-column:number <- get t, column:offset
  97 run: current-sandbox:address:editor-data <- get *env, current-sandbox:offset
  97 run: right:number <- get *current-sandbox, right:offset
  97 run: at-right?:boolean <- equal click-column, right
  97 run: jump-if at-right?, 1:offset
  97 run: click-row:number <- get t, row:offset
  97 run: prev:address:address:sandbox-data <- get-address *env, sandbox:offset
  97 run: curr:address:sandbox-data <- get *env, sandbox:offset
  97 run: break-unless curr, 
  97 run: target-row:number <- get *curr, starting-row-on-screen:offset
  97 run: delete-curr?:boolean <- equal target-row, click-row
  97 run: break-unless delete-curr?, 
  97 run: prev <- get-address *curr, next-sandbox:offset
  97 run: curr <- get *curr, next-sandbox:offset
  97 run: loop 
  97 run: break-unless curr, 
  97 run: target-row:number <- get *curr, starting-row-on-screen:offset
  97 run: delete-curr?:boolean <- equal target-row, click-row
  97 run: break-unless delete-curr?, 
  97 run: *prev <- get *curr, next-sandbox:offset
  97 run: reply 1/true
  96 run: break-unless was-delete?, 
  96 run: hide-screen screen
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: screen:address <- next-ingredient 
  97 run: break-unless screen, 
  97 run: reply screen
  96 run: screen <- render-sandbox-side screen, env
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: screen:address <- next-ingredient 
  97 run: env:address:programming-environment-data <- next-ingredient 
  97 run: trace 11, [app], [render sandbox side]
  11 app: render sandbox side 
  97 run: current-sandbox:address:editor-data <- get *env, current-sandbox:offset
  97 run: left:number <- get *current-sandbox, left:offset
  97 run: right:number <- get *current-sandbox, right:offset
  97 run: row:number, column:number, screen, current-sandbox <- render screen, current-sandbox
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: editor:address:editor-data <- next-ingredient 
  98 run: jump-if editor, 1:offset
  98 run: left:number <- get *editor, left:offset
  98 run: screen-height:number <- screen-height screen
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: break-unless sc, 
  99 run: height:number <- get *sc, num-rows:offset
  99 run: reply height
  98 run: right:number <- get *editor, right:offset
  98 run: curr:address:duplex-list <- get *editor, top-of-screen:offset
  98 run: prev:address:duplex-list <- copy curr
  98 run: curr <- next-duplex curr
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: in:address:duplex-list <- next-ingredient 
  99 run: jump-if in, 1:offset
  99 run: result:address:duplex-list <- get *in, next:offset
  99 run: reply result
  98 run: color:number <- copy 7/white
  98 run: row:number <- copy 1/top
  98 run: column:number <- copy left
  98 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
  98 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
  98 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
  98 run: screen <- move-cursor screen, row, column
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: break-unless curr, 
  98 run: bottom-of-screen:address:address:duplex-list <- get-address *editor, bottom-of-screen:offset
  98 run: *bottom-of-screen <- copy curr
  98 run: at-cursor-row?:boolean <- equal row, *cursor-row
  98 run: cursor-outside-line?:boolean <- lesser-or-equal column, *cursor-column
  98 run: before-cursor-on-same-line?:boolean <- and at-cursor-row?, cursor-outside-line?
  98 run: above-cursor-row?:boolean <- lesser-than row, *cursor-row
  98 run: before-cursor?:boolean <- or before-cursor-on-same-line?, above-cursor-row?
  98 run: break-unless before-cursor?, 
  98 run: *cursor-row <- copy row
  98 run: *cursor-column <- copy column
  98 run: *before-cursor <- copy prev
  98 run: reply row, column, screen/same-as-ingredient:0, editor/same-as-ingredient:1
  97 run: clear-screen-from screen, row, column, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: row:number <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: left:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: break-if screen, 
  98 run: screen <- move-cursor screen, row, column
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, column, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: clear-rest-of-screen screen, row, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: row:number <- next-ingredient 
  99 run: left:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: row <- add row, 1
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: screen-height:number <- screen-height screen
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: break-unless sc, 
 100 run: height:number <- get *sc, num-rows:offset
 100 run: reply height
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  99 run: screen <- move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: clear-line-delimited screen, left, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: loop 
  99 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  99 run: break-if at-bottom-of-screen?, 
  98 run: reply screen/same-as-ingredient:0
  97 run: row <- add row, 1
  97 run: draw-horizontal screen, row, left, right, 9473/horizontal-double
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: row:number <- next-ingredient 
  98 run: x:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: style:character, style-found?:boolean <- next-ingredient 
  98 run: break-if style-found?, 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: color <- copy 245/grey
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: bg-color <- copy 0/black
  98 run: screen <- move-cursor screen, row, x
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  98 run: print-character screen, style, color, bg-color
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: trace 90, [print-character], c
  90 print-character: 9473 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: reply sc/same-as-ingredient:0
  98 run: x <- add x, 1
  98 run: loop 
  98 run: continue?:boolean <- lesser-or-equal x, right
  98 run: break-unless continue?, 
  97 run: sandbox:address:sandbox-data <- get *env, sandbox:offset
  97 run: row, screen <- render-sandboxes screen, sandbox, left, right, row
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: sandbox:address:sandbox-data <- next-ingredient 
  98 run: left:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: row:number <- next-ingredient 
  98 run: jump-if sandbox, 1:offset
  98 run: screen-height:number <- screen-height screen
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: break-unless sc, 
  99 run: height:number <- get *sc, num-rows:offset
  99 run: reply height
  98 run: at-bottom?:boolean <- greater-or-equal row, screen-height
  98 run: jump-unless at-bottom?:boolean, 1:offset
  98 run: row <- add row, 1
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: print-character screen, 120/x, 245/grey
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 120 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: reply sc/same-as-ingredient:0
  98 run: starting-row:address:number <- get-address *sandbox, starting-row-on-screen:offset
  98 run: *starting-row <- copy row
  98 run: row <- add row, 1
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: sandbox-data:address:array:character <- get *sandbox, data:offset
  98 run: row, screen <- render-code-string screen, sandbox-data, left, right, row
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: s:address:array:character <- next-ingredient 
  99 run: left:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: row:number <- next-ingredient 
  99 run: jump-if s, 1:offset
  99 run: color:number <- copy 7/white
  99 run: column:number <- copy left
  99 run: screen <- move-cursor screen, row, column
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: screen-height:number <- screen-height screen
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: break-unless sc, 
 100 run: height:number <- get *sc, num-rows:offset
 100 run: reply height
  99 run: i:number <- copy 0
  99 run: len:number <- length *s
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: done? <- greater-or-equal row, screen-height
  99 run: break-if done?, 
  99 run: c:character <- index *s, i
  99 run: color <- get-color color, c
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: color:number <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color-is-white?:boolean <- equal color, 7/white
 100 run: break-unless color-is-white?, 
 100 run: starting-comment?:boolean <- equal c, 35/#
 100 run: break-unless starting-comment?, 
 100 run: color-is-blue?:boolean <- equal color, 12/lightblue
 100 run: break-unless color-is-blue?, 
 100 run: break-unless color-is-white?, 
 100 run: starting-assignment?:boolean <- equal c, 60/<
 100 run: break-unless starting-assignment?, 
 100 run: color-is-red?:boolean <- equal color, 1/red
 100 run: break-unless color-is-red?, 
 100 run: reply color
  99 run: at-right?:boolean <- equal column, right
  99 run: break-unless at-right?, 
  99 run: i <- add i, 1
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: print-character screen, c, color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 97 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: done? <- greater-or-equal row, screen-height
  99 run: break-if done?, 
  99 run: c:character <- index *s, i
  99 run: color <- get-color color, c
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: color:number <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color-is-white?:boolean <- equal color, 7/white
 100 run: break-unless color-is-white?, 
 100 run: starting-comment?:boolean <- equal c, 35/#
 100 run: break-unless starting-comment?, 
 100 run: color-is-blue?:boolean <- equal color, 12/lightblue
 100 run: break-unless color-is-blue?, 
 100 run: break-unless color-is-white?, 
 100 run: starting-assignment?:boolean <- equal c, 60/<
 100 run: break-unless starting-assignment?, 
 100 run: color-is-red?:boolean <- equal color, 1/red
 100 run: break-unless color-is-red?, 
 100 run: reply color
  99 run: at-right?:boolean <- equal column, right
  99 run: break-unless at-right?, 
  99 run: i <- add i, 1
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: print-character screen, c, color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 100 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: done? <- greater-or-equal row, screen-height
  99 run: break-if done?, 
  99 run: c:character <- index *s, i
  99 run: color <- get-color color, c
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: color:number <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color-is-white?:boolean <- equal color, 7/white
 100 run: break-unless color-is-white?, 
 100 run: starting-comment?:boolean <- equal c, 35/#
 100 run: break-unless starting-comment?, 
 100 run: color-is-blue?:boolean <- equal color, 12/lightblue
 100 run: break-unless color-is-blue?, 
 100 run: break-unless color-is-white?, 
 100 run: starting-assignment?:boolean <- equal c, 60/<
 100 run: break-unless starting-assignment?, 
 100 run: color-is-red?:boolean <- equal color, 1/red
 100 run: break-unless color-is-red?, 
 100 run: reply color
  99 run: at-right?:boolean <- equal column, right
  99 run: break-unless at-right?, 
  99 run: i <- add i, 1
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: print-character screen, c, color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 100 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: done? <- greater-or-equal row, screen-height
  99 run: break-if done?, 
  99 run: c:character <- index *s, i
  99 run: color <- get-color color, c
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: color:number <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color-is-white?:boolean <- equal color, 7/white
 100 run: break-unless color-is-white?, 
 100 run: starting-comment?:boolean <- equal c, 35/#
 100 run: break-unless starting-comment?, 
 100 run: color-is-blue?:boolean <- equal color, 12/lightblue
 100 run: break-unless color-is-blue?, 
 100 run: break-unless color-is-white?, 
 100 run: starting-assignment?:boolean <- equal c, 60/<
 100 run: break-unless starting-assignment?, 
 100 run: color-is-red?:boolean <- equal color, 1/red
 100 run: break-unless color-is-red?, 
 100 run: reply color
  99 run: at-right?:boolean <- equal column, right
  99 run: break-unless at-right?, 
  99 run: i <- add i, 1
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: print-character screen, c, color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: done? <- greater-or-equal row, screen-height
  99 run: break-if done?, 
  99 run: c:character <- index *s, i
  99 run: color <- get-color color, c
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: color:number <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color-is-white?:boolean <- equal color, 7/white
 100 run: break-unless color-is-white?, 
 100 run: starting-comment?:boolean <- equal c, 35/#
 100 run: break-unless starting-comment?, 
 100 run: color-is-blue?:boolean <- equal color, 12/lightblue
 100 run: break-unless color-is-blue?, 
 100 run: break-unless color-is-white?, 
 100 run: starting-assignment?:boolean <- equal c, 60/<
 100 run: break-unless starting-assignment?, 
 100 run: color-is-red?:boolean <- equal color, 1/red
 100 run: break-unless color-is-red?, 
 100 run: reply color
  99 run: at-right?:boolean <- equal column, right
  99 run: break-unless at-right?, 
  99 run: i <- add i, 1
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: print-character screen, c, color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 50 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: done? <- greater-or-equal row, screen-height
  99 run: break-if done?, 
  99 run: c:character <- index *s, i
  99 run: color <- get-color color, c
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: color:number <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color-is-white?:boolean <- equal color, 7/white
 100 run: break-unless color-is-white?, 
 100 run: starting-comment?:boolean <- equal c, 35/#
 100 run: break-unless starting-comment?, 
 100 run: color-is-blue?:boolean <- equal color, 12/lightblue
 100 run: break-unless color-is-blue?, 
 100 run: break-unless color-is-white?, 
 100 run: starting-assignment?:boolean <- equal c, 60/<
 100 run: break-unless starting-assignment?, 
 100 run: color-is-red?:boolean <- equal color, 1/red
 100 run: break-unless color-is-red?, 
 100 run: reply color
  99 run: at-right?:boolean <- equal column, right
  99 run: break-unless at-right?, 
  99 run: i <- add i, 1
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: print-character screen, c, color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 44 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: done? <- greater-or-equal row, screen-height
  99 run: break-if done?, 
  99 run: c:character <- index *s, i
  99 run: color <- get-color color, c
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: color:number <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color-is-white?:boolean <- equal color, 7/white
 100 run: break-unless color-is-white?, 
 100 run: starting-comment?:boolean <- equal c, 35/#
 100 run: break-unless starting-comment?, 
 100 run: color-is-blue?:boolean <- equal color, 12/lightblue
 100 run: break-unless color-is-blue?, 
 100 run: break-unless color-is-white?, 
 100 run: starting-assignment?:boolean <- equal c, 60/<
 100 run: break-unless starting-assignment?, 
 100 run: color-is-red?:boolean <- equal color, 1/red
 100 run: break-unless color-is-red?, 
 100 run: reply color
  99 run: at-right?:boolean <- equal column, right
  99 run: break-unless at-right?, 
  99 run: i <- add i, 1
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: print-character screen, c, color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: done? <- greater-or-equal row, screen-height
  99 run: break-if done?, 
  99 run: c:character <- index *s, i
  99 run: color <- get-color color, c
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: color:number <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color-is-white?:boolean <- equal color, 7/white
 100 run: break-unless color-is-white?, 
 100 run: starting-comment?:boolean <- equal c, 35/#
 100 run: break-unless starting-comment?, 
 100 run: color-is-blue?:boolean <- equal color, 12/lightblue
 100 run: break-unless color-is-blue?, 
 100 run: break-unless color-is-white?, 
 100 run: starting-assignment?:boolean <- equal c, 60/<
 100 run: break-unless starting-assignment?, 
 100 run: color-is-red?:boolean <- equal color, 1/red
 100 run: break-unless color-is-red?, 
 100 run: reply color
  99 run: at-right?:boolean <- equal column, right
  99 run: break-unless at-right?, 
  99 run: i <- add i, 1
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: print-character screen, c, color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 50 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: was-at-left?:boolean <- equal column, left
  99 run: clear-line-delimited screen, column, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: break-if was-at-left?, 
  99 run: row <- add row, 1
  99 run: move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: reply row/same-as-ingredient:4, screen/same-as-ingredient:0
  98 run: code-ending-row:address:number <- get-address *sandbox, code-ending-row-on-screen:offset
  98 run: *code-ending-row <- copy row
  98 run: response-starting-row:address:number <- get-address *sandbox, response-starting-row-on-screen:offset
  98 run: sandbox-response:address:array:character <- get *sandbox, response:offset
  98 run: display-trace?:boolean <- get *sandbox, display-trace?:offset
  98 run: break-unless display-trace?, 
  98 run: sandbox-warnings:address:array:character <- get *sandbox, warnings:offset
  98 run: break-unless sandbox-warnings, 
  98 run: sandbox-screen:address <- get *sandbox, screen:offset
  98 run: empty-screen?:boolean <- fake-screen-is-empty? sandbox-screen
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: jump-if sc, 1:offset
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: i:number <- copy 0
  99 run: len:number <- length *buf
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: curr:screen-cell <- index *buf, i
  99 run: curr-contents:character <- get curr, contents:offset
  99 run: i <- add i, 1
  99 run: loop-unless curr-contents, 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: reply 1/true
  98 run: break-if empty-screen?, 
  98 run: break-unless empty-screen?, 
  98 run: *response-starting-row <- copy row
  98 run: break-unless sandbox-response, 
  98 run: expected-response:address:array:character <- get *sandbox, expected-response:offset
  98 run: break-unless expected-response, 
  98 run: row, screen <- render-string screen, sandbox-response, left, right, 245/grey, row
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: s:address:array:character <- next-ingredient 
  99 run: left:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: color:number <- next-ingredient 
  99 run: row:number <- next-ingredient 
  99 run: jump-if s, 1:offset
  99 run: column:number <- copy left
  99 run: screen <- move-cursor screen, row, column
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: screen-height:number <- screen-height screen
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: break-unless sc, 
 100 run: height:number <- get *sc, num-rows:offset
 100 run: reply height
  99 run: i:number <- copy 0
  99 run: len:number <- length *s
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: done? <- greater-or-equal row, screen-height
  99 run: break-if done?, 
  99 run: c:character <- index *s, i
  99 run: at-right?:boolean <- equal column, right
  99 run: break-unless at-right?, 
  99 run: i <- add i, 1
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: print-character screen, c, color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 52 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: done? <- greater-or-equal row, screen-height
  99 run: break-if done?, 
  99 run: c:character <- index *s, i
  99 run: at-right?:boolean <- equal column, right
  99 run: break-unless at-right?, 
  99 run: i <- add i, 1
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: print-character screen, c, color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: done? <- greater-or-equal row, screen-height
  99 run: break-if done?, 
  99 run: c:character <- index *s, i
  99 run: at-right?:boolean <- equal column, right
  99 run: break-unless at-right?, 
  99 run: i <- add i, 1
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: row <- add row, 1
  99 run: column <- copy left
  99 run: screen <- move-cursor screen, row, column
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: loop +next-character:label
  99 run: done?:boolean <- greater-or-equal i, len
  99 run: break-if done?, 
  99 run: was-at-left?:boolean <- equal column, left
  99 run: clear-line-delimited screen, column, right
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: screen:address <- next-ingredient 
 100 run: column:number <- next-ingredient 
 100 run: right:number <- next-ingredient 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
 100 run: print-character screen, 32/space
  90 print-character: 32 
 100 run: column <- add column, 1
 100 run: loop 
 100 run: done?:boolean <- greater-than column, right
 100 run: break-if done?, 
  99 run: break-if was-at-left?, 
  99 run: move-cursor screen, row, left
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: reply row/same-as-ingredient:5, screen/same-as-ingredient:0
  98 run: at-bottom?:boolean <- greater-or-equal row, screen-height
  98 run: jump-unless at-bottom?, 1:offset
  98 run: draw-horizontal screen, row, left, right, 9473/horizontal-double
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: row:number <- next-ingredient 
  99 run: x:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: style:character, style-found?:boolean <- next-ingredient 
  99 run: break-if style-found?, 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 245/grey
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: screen <- move-cursor screen, row, x
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: new-row:number <- next-ingredient 
 100 run: new-column:number <- next-ingredient 
 100 run: break-unless sc, 
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: *row <- copy new-row
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: *column <- copy new-column
 100 run: reply sc/same-as-ingredient:0
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  99 run: print-character screen, style, color, bg-color
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: trace 90, [print-character], c
  90 print-character: 9473 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: x <- add x, 1
  99 run: loop 
  99 run: continue?:boolean <- lesser-or-equal x, right
  99 run: break-unless continue?, 
  98 run: next-sandbox:address:sandbox-data <- get *sandbox, next-sandbox:offset
  98 run: row, screen <- render-sandboxes screen, next-sandbox, left, right, row
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: sandbox:address:sandbox-data <- next-ingredient 
  99 run: left:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: row:number <- next-ingredient 
  99 run: jump-if sandbox, 1:offset
  99 run: reply row/same-as-ingredient:4, screen/same-as-ingredient:0
  98 run: reply row/same-as-ingredient:4, screen/same-as-ingredient:0
  97 run: clear-rest-of-screen screen, row, left, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: row:number <- next-ingredient 
  98 run: left:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: row <- add row, 1
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: screen-height:number <- screen-height screen
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: break-unless sc, 
  99 run: height:number <- get *sc, num-rows:offset
  99 run: reply height
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  97 run: reply screen/same-as-ingredient:0
  96 run: screen <- update-cursor screen, recipes, current-sandbox, *sandbox-in-focus?
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: screen:address <- next-ingredient 
  97 run: recipes:address:editor-data <- next-ingredient 
  97 run: current-sandbox:address:editor-data <- next-ingredient 
  97 run: sandbox-in-focus?:boolean <- next-ingredient 
  97 run: break-if sandbox-in-focus?, 
  97 run: break-unless sandbox-in-focus?, 
  97 run: cursor-row:number <- get *current-sandbox, cursor-row:offset
  97 run: cursor-column:number <- get *current-sandbox, cursor-column:offset
  97 run: screen <- move-cursor screen, cursor-row, cursor-column
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: reply screen/same-as-ingredient:0
  96 run: show-screen screen
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: screen:address <- next-ingredient 
  97 run: break-unless screen, 
  97 run: reply screen
  96 run: loop +next-event:label
  96 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: x:address:console <- next-ingredient 
  97 run: break-unless x, 
  97 run: idx:address:number <- get-address *x, index:offset
  97 run: buf:address:array:event <- get *x, data:offset
  97 run: max:number <- length *buf
  97 run: done?:boolean <- greater-or-equal *idx, max
  97 run: break-unless done?, 
  97 run: dummy:address:event <- new event:type
  97 run: reply *dummy, x/same-as-ingredient:0, 1/found, 1/quit
  96 run: loop-unless found?, 
  96 run: break-if quit?, 
  94 run: screen-should-contain [
    .                                                                                 run (F4)           .
    .                                                  ┊                                                 .
    .┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┊━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━.
    .                                                  ┊                                                x.
    .                                                  ┊add 2, 2                                         .
    .                                                  ┊4                                                .
    .                                                  ┊━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━.
    .                                                  ┊                                                 .
    .                                                  ┊                                                 .
  ]
  94 run: assume-console [
    left-click 3, 99
  ]
  94 run: run [
    event-loop screen:address, console:address, 3:address:programming-environment-data
  ]
  94 run: event-loop screen:address, console:address, 3:address:programming-environment-data
  95 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  95 run: screen:address <- next-ingredient 
  95 run: console:address <- next-ingredient 
  95 run: env:address:programming-environment-data <- next-ingredient 
  95 run: recipes:address:editor-data <- get *env, recipes:offset
  95 run: current-sandbox:address:editor-data <- get *env, current-sandbox:offset
  95 run: sandbox-in-focus?:address:boolean <- get-address *env, sandbox-in-focus?:offset
  95 run: render-all-on-no-more-events?:boolean <- copy 0/false
  95 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
  96 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  96 run: x:address:console <- next-ingredient 
  96 run: break-unless x, 
  96 run: idx:address:number <- get-address *x, index:offset
  96 run: buf:address:array:event <- get *x, data:offset
  96 run: max:number <- length *buf
  96 run: done?:boolean <- greater-or-equal *idx, max
  96 run: break-unless done?, 
  96 run: result:event <- index *buf, *idx
  96 run: *idx <- add *idx, 1
  96 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
  95 run: loop-unless found?, 
  95 run: break-if quit?, 
  95 run: trace 10, [app], [next-event]
  10 app: next-event 
  95 run: maximized?:address:boolean <- get-address *env, maximized?:offset
  95 run: break-unless *maximized?, 
  95 run: k:address:number <- maybe-convert e:event, keycode:variant
  95 run: break-unless k, 
  95 run: c:address:character <- maybe-convert e:event, text:variant
  95 run: break-unless c, 
  95 run: t:address:touch-event <- maybe-convert e:event, touch:variant
  95 run: break-unless t, 
  95 run: touch-type:number <- get *t, type:offset
  95 run: is-left-click?:boolean <- equal touch-type, 65513/mouse-left
  95 run: loop-unless is-left-click?, +next-event:label
  95 run: sandbox-left-margin:number <- get *current-sandbox, left:offset
  95 run: click-column:number <- get *t, column:offset
  95 run: on-sandbox-side?:boolean <- greater-or-equal click-column, sandbox-left-margin
  95 run: break-unless on-sandbox-side?, 
  95 run: first-sandbox:address:sandbox-data <- get *env, sandbox:offset
  95 run: break-unless first-sandbox, 
  95 run: first-sandbox-begins:number <- get *first-sandbox, starting-row-on-screen:offset
  95 run: click-row:number <- get *t, row:offset
  95 run: below-sandbox-editor?:boolean <- greater-or-equal click-row, first-sandbox-begins
  95 run: break-unless below-sandbox-editor?, 
  95 run: sandbox:address:sandbox-data <- find-click-in-sandbox-code env, click-row
  96 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  96 run: env:address:programming-environment-data <- next-ingredient 
  96 run: click-row:number <- next-ingredient 
  96 run: sandbox:address:sandbox-data <- get *env, sandbox:offset
  96 run: start:number <- get *sandbox, starting-row-on-screen:offset
  96 run: clicked-on-sandboxes?:boolean <- greater-or-equal click-row, start
  96 run: assert clicked-on-sandboxes?, [extract-sandbox called on click to sandbox editor]
  96 run: next-sandbox:address:sandbox-data <- get *sandbox, next-sandbox:offset
  96 run: break-unless next-sandbox, 
  96 run: code-ending-row:number <- get *sandbox, code-ending-row-on-screen:offset
  96 run: click-above-response?:boolean <- lesser-than click-row, code-ending-row
  96 run: start:number <- get *sandbox, starting-row-on-screen:offset
  96 run: click-below-menu?:boolean <- greater-than click-row, start
  96 run: click-on-sandbox-code?:boolean <- and click-above-response?, click-below-menu?
  96 run: break-if click-on-sandbox-code?, 
  96 run: reply 0/no-click-in-sandbox-output
  95 run: break-unless sandbox, 
  95 run: sandbox-left-margin:number <- get *current-sandbox, left:offset
  95 run: click-column:number <- get *t, column:offset
  95 run: on-sandbox-side?:boolean <- greater-or-equal click-column, sandbox-left-margin
  95 run: break-unless on-sandbox-side?, 
  95 run: first-sandbox:address:sandbox-data <- get *env, sandbox:offset
  95 run: break-unless first-sandbox, 
  95 run: first-sandbox-begins:number <- get *first-sandbox, starting-row-on-screen:offset
  95 run: click-row:number <- get *t, row:offset
  95 run: below-sandbox-editor?:boolean <- greater-or-equal click-row, first-sandbox-begins
  95 run: break-unless below-sandbox-editor?, 
  95 run: sandbox:address:sandbox-data <- find-click-in-sandbox-output env, click-row
  96 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  96 run: env:address:programming-environment-data <- next-ingredient 
  96 run: click-row:number <- next-ingredient 
  96 run: sandbox:address:sandbox-data <- get *env, sandbox:offset
  96 run: start:number <- get *sandbox, starting-row-on-screen:offset
  96 run: clicked-on-sandboxes?:boolean <- greater-or-equal click-row, start
  96 run: assert clicked-on-sandboxes?, [extract-sandbox called on click to sandbox editor]
  96 run: next-sandbox:address:sandbox-data <- get *sandbox, next-sandbox:offset
  96 run: break-unless next-sandbox, 
  96 run: response-starting-row:number <- get *sandbox, response-starting-row-on-screen:offset
  96 run: jump-if response-starting-row, 1:offset
  96 run: click-in-response?:boolean <- greater-or-equal click-row, response-starting-row
  96 run: jump-if click-in-response?, 1:offset
  96 run: reply 0/no-click-in-sandbox-output
  95 run: break-unless sandbox, 
  95 run: was-delete?:boolean <- delete-sandbox *t, env
  96 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  96 run: t:touch-event <- next-ingredient 
  96 run: env:address:programming-environment-data <- next-ingredient 
  96 run: click-column:number <- get t, column:offset
  96 run: current-sandbox:address:editor-data <- get *env, current-sandbox:offset
  96 run: right:number <- get *current-sandbox, right:offset
  96 run: at-right?:boolean <- equal click-column, right
  96 run: jump-if at-right?, 1:offset
  96 run: click-row:number <- get t, row:offset
  96 run: prev:address:address:sandbox-data <- get-address *env, sandbox:offset
  96 run: curr:address:sandbox-data <- get *env, sandbox:offset
  96 run: break-unless curr, 
  96 run: target-row:number <- get *curr, starting-row-on-screen:offset
  96 run: delete-curr?:boolean <- equal target-row, click-row
  96 run: break-unless delete-curr?, 
  96 run: *prev <- get *curr, next-sandbox:offset
  96 run: reply 1/true
  95 run: break-unless was-delete?, 
  95 run: hide-screen screen
  96 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  96 run: screen:address <- next-ingredient 
  96 run: break-unless screen, 
  96 run: reply screen
  95 run: screen <- render-sandbox-side screen, env
  96 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  96 run: screen:address <- next-ingredient 
  96 run: env:address:programming-environment-data <- next-ingredient 
  96 run: trace 11, [app], [render sandbox side]
  11 app: render sandbox side 
  96 run: current-sandbox:address:editor-data <- get *env, current-sandbox:offset
  96 run: left:number <- get *current-sandbox, left:offset
  96 run: right:number <- get *current-sandbox, right:offset
  96 run: row:number, column:number, screen, current-sandbox <- render screen, current-sandbox
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: screen:address <- next-ingredient 
  97 run: editor:address:editor-data <- next-ingredient 
  97 run: jump-if editor, 1:offset
  97 run: left:number <- get *editor, left:offset
  97 run: screen-height:number <- screen-height screen
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: break-unless sc, 
  98 run: height:number <- get *sc, num-rows:offset
  98 run: reply height
  97 run: right:number <- get *editor, right:offset
  97 run: curr:address:duplex-list <- get *editor, top-of-screen:offset
  97 run: prev:address:duplex-list <- copy curr
  97 run: curr <- next-duplex curr
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: in:address:duplex-list <- next-ingredient 
  98 run: jump-if in, 1:offset
  98 run: result:address:duplex-list <- get *in, next:offset
  98 run: reply result
  97 run: color:number <- copy 7/white
  97 run: row:number <- copy 1/top
  97 run: column:number <- copy left
  97 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
  97 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
  97 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
  97 run: screen <- move-cursor screen, row, column
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: break-unless curr, 
  97 run: bottom-of-screen:address:address:duplex-list <- get-address *editor, bottom-of-screen:offset
  97 run: *bottom-of-screen <- copy curr
  97 run: at-cursor-row?:boolean <- equal row, *cursor-row
  97 run: cursor-outside-line?:boolean <- lesser-or-equal column, *cursor-column
  97 run: before-cursor-on-same-line?:boolean <- and at-cursor-row?, cursor-outside-line?
  97 run: above-cursor-row?:boolean <- lesser-than row, *cursor-row
  97 run: before-cursor?:boolean <- or before-cursor-on-same-line?, above-cursor-row?
  97 run: break-unless before-cursor?, 
  97 run: *cursor-row <- copy row
  97 run: *cursor-column <- copy column
  97 run: *before-cursor <- copy prev
  97 run: reply row, column, screen/same-as-ingredient:0, editor/same-as-ingredient:1
  96 run: clear-screen-from screen, row, column, left, right
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: screen:address <- next-ingredient 
  97 run: row:number <- next-ingredient 
  97 run: column:number <- next-ingredient 
  97 run: left:number <- next-ingredient 
  97 run: right:number <- next-ingredient 
  97 run: break-if screen, 
  97 run: screen <- move-cursor screen, row, column
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, column, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: clear-rest-of-screen screen, row, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: row:number <- next-ingredient 
  98 run: left:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: row <- add row, 1
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: screen-height:number <- screen-height screen
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: break-unless sc, 
  99 run: height:number <- get *sc, num-rows:offset
  99 run: reply height
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  98 run: screen <- move-cursor screen, row, left
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: new-row:number <- next-ingredient 
  99 run: new-column:number <- next-ingredient 
  99 run: break-unless sc, 
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: *row <- copy new-row
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: *column <- copy new-column
  99 run: reply sc/same-as-ingredient:0
  98 run: clear-line-delimited screen, left, right
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: screen:address <- next-ingredient 
  99 run: column:number <- next-ingredient 
  99 run: right:number <- next-ingredient 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: *column <- add *column, 1
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  99 run: print-character screen, 32/space
 100 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
 100 run: sc:address:screen <- next-ingredient 
 100 run: c:character <- next-ingredient 
 100 run: color:number, color-found?:boolean <- next-ingredient 
 100 run: break-if color-found?, 
 100 run: color <- copy 7/white
 100 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
 100 run: break-if bg-color-found?, 
 100 run: bg-color <- copy 0/black
 100 run: trace 90, [print-character], c
  90 print-character: 32 
 100 run: break-unless sc, 
 100 run: width:number <- get *sc, num-columns:offset
 100 run: height:number <- get *sc, num-rows:offset
 100 run: row:address:number <- get-address *sc, cursor-row:offset
 100 run: legal?:boolean <- greater-or-equal *row, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *row, height
 100 run: jump-if legal?, 1:offset
 100 run: column:address:number <- get-address *sc, cursor-column:offset
 100 run: legal? <- greater-or-equal *column, 0
 100 run: jump-if legal?, 1:offset
 100 run: legal? <- lesser-than *column, width
 100 run: jump-if legal?, 1:offset
 100 run: newline?:boolean <- equal c, 10/newline
 100 run: break-unless newline?, 
 100 run: index:number <- multiply *row, width
 100 run: index <- add index, *column
 100 run: buf:address:array:screen-cell <- get *sc, data:offset
 100 run: len:number <- length *buf
 100 run: backspace?:boolean <- equal c, 8
 100 run: break-unless backspace?, 
 100 run: cursor:address:screen-cell <- index-address *buf, index
 100 run: cursor-contents:address:character <- get-address *cursor, contents:offset
 100 run: *cursor-contents <- copy c
 100 run: cursor-color:address:number <- get-address *cursor, color:offset
 100 run: *cursor-color <- copy color
 100 run: right:number <- subtract width, 1
 100 run: at-right?:boolean <- greater-or-equal *column, right
 100 run: break-if at-right?, 
 100 run: reply sc/same-as-ingredient:0
  99 run: column <- add column, 1
  99 run: loop 
  99 run: done?:boolean <- greater-than column, right
  99 run: break-if done?, 
  98 run: row <- add row, 1
  98 run: loop 
  98 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  98 run: break-if at-bottom-of-screen?, 
  97 run: reply screen/same-as-ingredient:0
  96 run: row <- add row, 1
  96 run: draw-horizontal screen, row, left, right, 9473/horizontal-double
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: screen:address <- next-ingredient 
  97 run: row:number <- next-ingredient 
  97 run: x:number <- next-ingredient 
  97 run: right:number <- next-ingredient 
  97 run: style:character, style-found?:boolean <- next-ingredient 
  97 run: break-if style-found?, 
  97 run: color:number, color-found?:boolean <- next-ingredient 
  97 run: break-if color-found?, 
  97 run: color <- copy 245/grey
  97 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  97 run: break-if bg-color-found?, 
  97 run: bg-color <- copy 0/black
  97 run: screen <- move-cursor screen, row, x
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: *column <- add *column, 1
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  97 run: print-character screen, style, color, bg-color
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: c:character <- next-ingredient 
  98 run: color:number, color-found?:boolean <- next-ingredient 
  98 run: break-if color-found?, 
  98 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  98 run: break-if bg-color-found?, 
  98 run: trace 90, [print-character], c
  90 print-character: 9473 
  98 run: break-unless sc, 
  98 run: width:number <- get *sc, num-columns:offset
  98 run: height:number <- get *sc, num-rows:offset
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: legal?:boolean <- greater-or-equal *row, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *row, height
  98 run: jump-if legal?, 1:offset
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: legal? <- greater-or-equal *column, 0
  98 run: jump-if legal?, 1:offset
  98 run: legal? <- lesser-than *column, width
  98 run: jump-if legal?, 1:offset
  98 run: newline?:boolean <- equal c, 10/newline
  98 run: break-unless newline?, 
  98 run: index:number <- multiply *row, width
  98 run: index <- add index, *column
  98 run: buf:address:array:screen-cell <- get *sc, data:offset
  98 run: len:number <- length *buf
  98 run: backspace?:boolean <- equal c, 8
  98 run: break-unless backspace?, 
  98 run: cursor:address:screen-cell <- index-address *buf, index
  98 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  98 run: *cursor-contents <- copy c
  98 run: cursor-color:address:number <- get-address *cursor, color:offset
  98 run: *cursor-color <- copy color
  98 run: right:number <- subtract width, 1
  98 run: at-right?:boolean <- greater-or-equal *column, right
  98 run: break-if at-right?, 
  98 run: reply sc/same-as-ingredient:0
  97 run: x <- add x, 1
  97 run: loop 
  97 run: continue?:boolean <- lesser-or-equal x, right
  97 run: break-unless continue?, 
  96 run: sandbox:address:sandbox-data <- get *env, sandbox:offset
  96 run: row, screen <- render-sandboxes screen, sandbox, left, right, row
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: screen:address <- next-ingredient 
  97 run: sandbox:address:sandbox-data <- next-ingredient 
  97 run: left:number <- next-ingredient 
  97 run: right:number <- next-ingredient 
  97 run: row:number <- next-ingredient 
  97 run: jump-if sandbox, 1:offset
  97 run: reply row/same-as-ingredient:4, screen/same-as-ingredient:0
  96 run: clear-rest-of-screen screen, row, left, left, right
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: screen:address <- next-ingredient 
  97 run: row:number <- next-ingredient 
  97 run: left:number <- next-ingredient 
  97 run: right:number <- next-ingredient 
  97 run: row <- add row, 1
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: screen-height:number <- screen-height screen
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: break-unless sc, 
  98 run: height:number <- get *sc, num-rows:offset
  98 run: reply height
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: row <- add row, 1
  97 run: loop 
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: row <- add row, 1
  97 run: loop 
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: row <- add row, 1
  97 run: loop 
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: row <- add row, 1
  97 run: loop 
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: row <- add row, 1
  97 run: loop 
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: row <- add row, 1
  97 run: loop 
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: row <- add row, 1
  97 run: loop 
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: row <- add row, 1
  97 run: loop 
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: row <- add row, 1
  97 run: loop 
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: row <- add row, 1
  97 run: loop 
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: row <- add row, 1
  97 run: loop 
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  97 run: screen <- move-cursor screen, row, left
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: sc:address:screen <- next-ingredient 
  98 run: new-row:number <- next-ingredient 
  98 run: new-column:number <- next-ingredient 
  98 run: break-unless sc, 
  98 run: row:address:number <- get-address *sc, cursor-row:offset
  98 run: *row <- copy new-row
  98 run: column:address:number <- get-address *sc, cursor-column:offset
  98 run: *column <- copy new-column
  98 run: reply sc/same-as-ingredient:0
  97 run: clear-line-delimited screen, left, right
  98 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  98 run: screen:address <- next-ingredient 
  98 run: column:number <- next-ingredient 
  98 run: right:number <- next-ingredient 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  98 run: print-character screen, 32/space
  99 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  99 run: sc:address:screen <- next-ingredient 
  99 run: c:character <- next-ingredient 
  99 run: color:number, color-found?:boolean <- next-ingredient 
  99 run: break-if color-found?, 
  99 run: color <- copy 7/white
  99 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
  99 run: break-if bg-color-found?, 
  99 run: bg-color <- copy 0/black
  99 run: trace 90, [print-character], c
  90 print-character: 32 
  99 run: break-unless sc, 
  99 run: width:number <- get *sc, num-columns:offset
  99 run: height:number <- get *sc, num-rows:offset
  99 run: row:address:number <- get-address *sc, cursor-row:offset
  99 run: legal?:boolean <- greater-or-equal *row, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *row, height
  99 run: jump-if legal?, 1:offset
  99 run: column:address:number <- get-address *sc, cursor-column:offset
  99 run: legal? <- greater-or-equal *column, 0
  99 run: jump-if legal?, 1:offset
  99 run: legal? <- lesser-than *column, width
  99 run: jump-if legal?, 1:offset
  99 run: newline?:boolean <- equal c, 10/newline
  99 run: break-unless newline?, 
  99 run: index:number <- multiply *row, width
  99 run: index <- add index, *column
  99 run: buf:address:array:screen-cell <- get *sc, data:offset
  99 run: len:number <- length *buf
  99 run: backspace?:boolean <- equal c, 8
  99 run: break-unless backspace?, 
  99 run: cursor:address:screen-cell <- index-address *buf, index
  99 run: cursor-contents:address:character <- get-address *cursor, contents:offset
  99 run: *cursor-contents <- copy c
  99 run: cursor-color:address:number <- get-address *cursor, color:offset
  99 run: *cursor-color <- copy color
  99 run: right:number <- subtract width, 1
  99 run: at-right?:boolean <- greater-or-equal *column, right
  99 run: break-if at-right?, 
  99 run: *column <- add *column, 1
  99 run: reply sc/same-as-ingredient:0
  98 run: column <- add column, 1
  98 run: loop 
  98 run: done?:boolean <- greater-than column, right
  98 run: break-if done?, 
  97 run: row <- add row, 1
  97 run: loop 
  97 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
  97 run: break-if at-bottom-of-screen?, 
  96 run: reply screen/same-as-ingredient:0
  95 run: screen <- update-cursor screen, recipes, current-sandbox, *sandbox-in-focus?
  96 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  96 run: screen:address <- next-ingredient 
  96 run: recipes:address:editor-data <- next-ingredient 
  96 run: current-sandbox:address:editor-data <- next-ingredient 
  96 run: sandbox-in-focus?:boolean <- next-ingredient 
  96 run: break-if sandbox-in-focus?, 
  96 run: break-unless sandbox-in-focus?, 
  96 run: cursor-row:number <- get *current-sandbox, cursor-row:offset
  96 run: cursor-column:number <- get *current-sandbox, cursor-column:offset
  96 run: screen <- move-cursor screen, cursor-row, cursor-column
  97 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  97 run: sc:address:screen <- next-ingredient 
  97 run: new-row:number <- next-ingredient 
  97 run: new-column:number <- next-ingredient 
  97 run: break-unless sc, 
  97 run: row:address:number <- get-address *sc, cursor-row:offset
  97 run: *row <- copy new-row
  97 run: column:address:number <- get-address *sc, cursor-column:offset
  97 run: *column <- copy new-column
  97 run: reply sc/same-as-ingredient:0
  96 run: reply screen/same-as-ingredient:0
  95 run: show-screen screen
  96 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  96 run: screen:address <- next-ingredient 
  96 run: break-unless screen, 
  96 run: reply screen
  95 run: loop +next-event:label
  95 run: e:event, console, found?:boolean, quit?:boolean <- read-event console
  96 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
  96 run: x:address:console <- next-ingredient 
  96 run: break-unless x, 
  96 run: idx:address:number <- get-address *x, index:offset
  96 run: buf:address:array:event <- get *x, data:offset
  96 run: max:number <- length *buf
  96 run: done?:boolean <- greater-or-equal *idx, max
  96 run: break-unless done?, 
  96 run: dummy:address:event <- new event:type
  96 run: reply *dummy, x/same-as-ingredient:0, 1/found, 1/quit
  95 run: loop-unless found?, 
  95 run: break-if quit?, 
  93 run: screen-should-contain [
    .                                                                                 run (F4)           .
    .                                                  ┊                                                 .
    .┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┊━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━.
    .                                                  ┊                                                 .
    .                                                  ┊                                                 .
  ]
