c{0: 0 (((1 integer)) <- ((copy)) ((34 literal))) -- nil
c{0: 1 (((2 integer)) <- ((copy)) ((35 literal))) -- nil
c{0: 2 (((3 integer)) <- ((copy)) ((36 literal))) -- nil
c{0: 3 (((4 integer-integer-pair)) <- ((get)) ((1 integer-point-pair)) ((1 offset))) -- nil
c{1: 0 âœ“ (((1 integer)) <- ((copy)) ((34 literal)))
c{1: 1 âœ“ (((2 integer)) <- ((copy)) ((35 literal)))
c{1: 2 âœ“ (((3 integer)) <- ((copy)) ((36 literal)))
c{1: 3 âœ“ (((4 integer-integer-pair)) <- ((get)) ((1 integer-point-pair)) ((1 offset)))
cn0: convert-names in main
cn0: (((1 integer)) <- ((copy)) ((34 literal))) nil nil
cn0: checking arg ((34 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((2 integer)) <- ((copy)) ((35 literal))) nil nil
cn0: checking arg ((35 literal))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: (((3 integer)) <- ((copy)) ((36 literal))) nil nil
cn0: checking arg ((36 literal))
cn0: checking oarg ((3 integer))
maybe-add: ((3 integer))
cn0: (((4 integer-integer-pair)) <- ((get)) ((1 integer-point-pair)) ((1 offset))) nil nil
cn0: field-access 1 in 1integer-point-pair of type integer-point-pair
cn0: checking arg ((1 integer-point-pair))
maybe-add: ((1 integer-point-pair))
cn0: checking arg ((1 offset))
cn0: checking oarg ((4 integer-integer-pair))
maybe-add: ((4 integer-integer-pair))
cn1: (((1 integer)) <- ((copy)) ((34 literal)))
cn1: (((2 integer)) <- ((copy)) ((35 literal)))
cn1: (((3 integer)) <- ((copy)) ((36 literal)))
cn1: (((4 integer-integer-pair)) <- ((get)) ((1 integer-point-pair)) ((1 offset)))
schedule: main
run: main 0: (((1 integer)) <- ((copy)) ((34 literal)))
run: main 0: 34 => ((1 integer))
mem: ((1 integer)): 1 <= 34
run: main 1: (((2 integer)) <- ((copy)) ((35 literal)))
run: main 1: 35 => ((2 integer))
mem: ((2 integer)): 2 <= 35
run: main 2: (((3 integer)) <- ((copy)) ((36 literal)))
run: main 2: 36 => ((3 integer))
mem: ((3 integer)): 3 <= 36
run: main 3: (((4 integer-integer-pair)) <- ((get)) ((1 integer-point-pair)) ((1 offset)))
mem: ((2 integer-integer-pair) (raw)) => #(tagged record (35 36 . nil))
run: main 3: #(tagged record (35 36 . nil)) => ((4 integer-integer-pair))
mem: ((4 integer-integer-pair)): 4 <= 35
mem: ((4 integer-integer-pair)): 5 <= 36
schedule: done with routine nil
