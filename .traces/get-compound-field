schedule: main
run: -- nil
run: 1 main 0: ((1 integer) <- copy (34 literal))
run: 34 => (1 integer)
setm: (1 integer) <= 34
sizeof: (1 integer)
setm: size of (1 integer) is 1
setm: (1 integer): setting 1 to 34
run: -- ((1 34))
run: 2 main 1: ((2 integer) <- copy (35 literal))
run: 35 => (2 integer)
setm: (2 integer) <= 35
sizeof: (2 integer)
setm: size of (2 integer) is 1
setm: (2 integer): setting 2 to 35
run: -- ((1 34) (2 35))
run: 3 main 2: ((3 integer) <- copy (36 literal))
run: 36 => (3 integer)
setm: (3 integer) <= 36
sizeof: (3 integer)
setm: size of (3 integer) is 1
setm: (3 integer): setting 3 to 36
run: -- ((1 34) (2 35) (3 36))
run: 4 main 3: ((4 integer-integer-pair) <- get (1 integer-point-pair) (1 offset))
record-info: (1 integer-point-pair) (1 offset)
record-info: initial base 1 type ((elems (integer integer-integer-pair)) (record t) (size 2))
sizeof: integer
get: (1 integer-point-pair) (1 offset) => 2 integer-integer-pair
m: (2 integer-integer-pair global)
sizeof: (2 integer-integer-pair global)
sizeof: integer
sizeof: integer
run: #(tagged record (35 36 . nil)) => (4 integer-integer-pair)
setm: (4 integer-integer-pair) <= #(tagged record (35 36 . nil))
sizeof: (4 integer-integer-pair)
sizeof: integer
sizeof: integer
setm: size of (4 integer-integer-pair) is 2
setm: (4 integer-integer-pair): setting 4 to 35
setm: (4 integer-integer-pair): setting 5 to 36
schedule: done with routine
