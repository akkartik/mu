c{0: 0 (((1 channel-address)) <- ((init-channel)) ((3 literal))) -- nil
c{0: 1 (((2 integer)) <- ((copy)) ((34 literal))) -- nil
c{0: 2 (((3 tagged-value)) <- ((save-type)) ((2 integer))) -- nil
c{0: 3 (((1 channel-address) (deref)) <- ((write)) ((1 channel-address)) ((3 tagged-value))) -- nil
c{0: 4 (((1 channel-address) (deref)) <- ((write)) ((1 channel-address)) ((3 tagged-value))) -- nil
c{0: 5 (_ ((1 channel-address) (deref)) <- ((read)) ((1 channel-address))) -- nil
c{0: 6 (((5 boolean)) <- ((empty?)) ((1 channel-address) (deref))) -- nil
c{0: 7 (((6 boolean)) <- ((full?)) ((1 channel-address) (deref))) -- nil
c{1: 0 ✓ (((1 channel-address)) <- ((init-channel)) ((3 literal)))
c{1: 1 ✓ (((2 integer)) <- ((copy)) ((34 literal)))
c{1: 2 ✓ (((3 tagged-value)) <- ((save-type)) ((2 integer)))
c{1: 3 ✓ (((1 channel-address) (deref)) <- ((write)) ((1 channel-address)) ((3 tagged-value)))
c{1: 4 ✓ (((1 channel-address) (deref)) <- ((write)) ((1 channel-address)) ((3 tagged-value)))
c{1: 5 ✓ (_ ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
c{1: 6 ✓ (((5 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
c{1: 7 ✓ (((6 boolean)) <- ((full?)) ((1 channel-address) (deref)))
cn0: convert-names in main
cn0: (((1 channel-address)) <- ((init-channel)) ((3 literal))) nil nil
cn0: checking arg ((3 literal))
cn0: checking oarg ((1 channel-address))
maybe-add: ((1 channel-address))
cn0: (((2 integer)) <- ((copy)) ((34 literal))) nil nil
cn0: checking arg ((34 literal))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: (((3 tagged-value)) <- ((save-type)) ((2 integer))) nil nil
cn0: checking arg ((2 integer))
maybe-add: ((2 integer))
cn0: checking oarg ((3 tagged-value))
maybe-add: ((3 tagged-value))
cn0: (((1 channel-address) (deref)) <- ((write)) ((1 channel-address)) ((3 tagged-value))) nil nil
cn0: checking arg ((1 channel-address))
maybe-add: ((1 channel-address))
cn0: checking arg ((3 tagged-value))
maybe-add: ((3 tagged-value))
cn0: checking oarg ((1 channel-address) (deref))
maybe-add: ((1 channel-address) (deref))
cn0: (((1 channel-address) (deref)) <- ((write)) ((1 channel-address)) ((3 tagged-value))) nil nil
cn0: checking arg ((1 channel-address))
maybe-add: ((1 channel-address))
cn0: checking arg ((3 tagged-value))
maybe-add: ((3 tagged-value))
cn0: checking oarg ((1 channel-address) (deref))
maybe-add: ((1 channel-address) (deref))
cn0: (_ ((1 channel-address) (deref)) <- ((read)) ((1 channel-address))) nil nil
cn0: checking arg ((1 channel-address))
maybe-add: ((1 channel-address))
cn0: checking oarg _
cn0: checking oarg ((1 channel-address) (deref))
maybe-add: ((1 channel-address) (deref))
cn0: (((5 boolean)) <- ((empty?)) ((1 channel-address) (deref))) nil nil
cn0: checking arg ((1 channel-address) (deref))
maybe-add: ((1 channel-address) (deref))
cn0: checking oarg ((5 boolean))
maybe-add: ((5 boolean))
cn0: (((6 boolean)) <- ((full?)) ((1 channel-address) (deref))) nil nil
cn0: checking arg ((1 channel-address) (deref))
maybe-add: ((1 channel-address) (deref))
cn0: checking oarg ((6 boolean))
maybe-add: ((6 boolean))
cn1: (((1 channel-address)) <- ((init-channel)) ((3 literal)))
cn1: (((2 integer)) <- ((copy)) ((34 literal)))
cn1: (((3 tagged-value)) <- ((save-type)) ((2 integer)))
cn1: (((1 channel-address) (deref)) <- ((write)) ((1 channel-address)) ((3 tagged-value)))
cn1: (((1 channel-address) (deref)) <- ((write)) ((1 channel-address)) ((3 tagged-value)))
cn1: (_ ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
cn1: (((5 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
cn1: (((6 boolean)) <- ((full?)) ((1 channel-address) (deref)))
schedule: main
run: main 0: (((1 channel-address)) <- ((init-channel)) ((3 literal)))
run: init-channel/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-channel/main 0: 1000 => ((default-space space-address))
run: init-channel/main 1: (((1 channel-address)) <- ((new)) ((channel literal)))
run: init-channel/main 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 1002 <= 1031
run: init-channel/main 2: (((2 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: init-channel/main 2: 1031 => ((2 integer-address))
mem: ((2 integer-address)): 1003 <= 1031
run: init-channel/main 3: (((2 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: init-channel/main 3: 0 => ((2 integer-address) (deref))
mem: ((2 integer-address) (deref)): 1031 <= 0
run: init-channel/main 4: (((3 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: init-channel/main 4: 1032 => ((3 integer-address))
mem: ((3 integer-address)): 1004 <= 1032
run: init-channel/main 5: (((3 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: init-channel/main 5: 0 => ((3 integer-address) (deref))
mem: ((3 integer-address) (deref)): 1032 <= 0
run: init-channel/main 6: (((4 integer)) <- ((next-input)))
arg: nil 0 (3)
run: init-channel/main 6: 3 => ((4 integer))
mem: ((4 integer)): 1005 <= 3
run: init-channel/main 7: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 3
run: init-channel/main 7: 4 => ((4 integer))
mem: ((4 integer)): 1005 <= 4
run: init-channel/main 8: (((5 tagged-value-array-address-address)) <- ((get-address)) ((1 channel-address) (deref)) ((2 offset)))
run: init-channel/main 8: 1033 => ((5 tagged-value-array-address-address))
mem: ((5 tagged-value-array-address-address)): 1006 <= 1033
run: init-channel/main 9: (((5 tagged-value-array-address-address) (deref)) <- ((new)) ((tagged-value-array literal)) ((4 integer)))
mem: ((4 integer)) => 4
run: init-channel/main 9: 1034 => ((5 tagged-value-array-address-address) (deref))
mem: ((5 tagged-value-array-address-address) (deref)): 1033 <= 1034
run: init-channel/main 10: (((reply)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: main 0: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 1 <= 1031
run: main 1: (((2 integer)) <- ((copy)) ((34 literal)))
run: main 1: 34 => ((2 integer))
mem: ((2 integer)): 2 <= 34
run: main 2: (((3 tagged-value)) <- ((save-type)) ((2 integer)))
mem: ((2 integer)) => 34
run: main 2: #(tagged record (integer 34)) => ((3 tagged-value))
mem: ((3 tagged-value)): 3 <= integer
mem: ((3 tagged-value)): 4 <= 34
run: main 3: (((1 channel-address) (deref)) <- ((write)) ((1 channel-address)) ((3 tagged-value)))
mem: ((1 channel-address)) => 1031
mem: ((3 tagged-value)) => #(tagged record (integer 34 . nil))
run: write/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: write/main 0: 1043 => ((default-space space-address))
run: write/main 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 #(tagged record (integer 34 . nil)))
run: write/main 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 1045 <= 1031
run: write/main 2: (((2 tagged-value)) <- ((next-input)))
arg: nil 1 (1031 #(tagged record (integer 34 . nil)))
run: write/main 2: #(tagged record (integer 34 . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 1046 <= integer
mem: ((2 tagged-value)): 1047 <= 34
run: write/main 3: (((4 boolean)) <- ((full?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (0 0 1034 . nil))
run: full?/write/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: full?/write/main 0: 1074 => ((default-space space-address))
run: full?/write/main 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 0 1034 . nil)))
run: full?/write/main 1: #(tagged record (0 0 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 1076 <= 0
mem: ((1 channel)): 1077 <= 0
mem: ((1 channel)): 1078 <= 1034
run: full?/write/main 2: (((4 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((1077 integer) (raw)) => 0
run: full?/write/main 2: 0 => ((4 integer))
mem: ((4 integer)): 1079 <= 0
run: full?/write/main 3: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 0
run: full?/write/main 3: 1 => ((4 integer))
mem: ((4 integer)): 1079 <= 1
run: full?/write/main 4: (((5 integer)) <- ((capacity)) ((1 channel)))
mem: ((1 channel)) => #(tagged record (0 0 1034 . nil))
run: capacity/full?/write/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: capacity/full?/write/main 0: 1105 => ((default-space space-address))
run: capacity/full?/write/main 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 0 1034 . nil)))
run: capacity/full?/write/main 1: #(tagged record (0 0 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 1107 <= 0
mem: ((1 channel)): 1108 <= 0
mem: ((1 channel)): 1109 <= 1034
run: capacity/full?/write/main 2: (((4 tagged-value-array-address)) <- ((get)) ((1 channel)) ((2 offset)))
mem: ((1109 tagged-value-array-address) (raw)) => 1034
run: capacity/full?/write/main 2: 1034 => ((4 tagged-value-array-address))
mem: ((4 tagged-value-array-address)): 1110 <= 1034
run: capacity/full?/write/main 3: (((5 integer)) <- ((length)) ((4 tagged-value-array-address) (deref)))
array-len: ((4 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 4
run: capacity/full?/write/main 3: 4 => ((5 integer))
mem: ((5 integer)): 1111 <= 4
run: capacity/full?/write/main 4: (((reply)) ((5 integer)))
mem: ((5 integer)) => 4
run: full?/write/main 4: 4 => ((5 integer))
mem: ((5 integer)): 1080 <= 4
run: full?/write/main 5: (((6 boolean)) <- ((less-than)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 1
mem: ((5 integer)) => 4
run: full?/write/main 5: t => ((6 boolean))
mem: ((6 boolean)): 1081 <= t
run: full?/write/main 6: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: full?/write/main 8: (((7 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((1076 integer) (raw)) => 0
run: full?/write/main 8: 0 => ((7 integer))
mem: ((7 integer)): 1082 <= 0
run: full?/write/main 9: (((8 boolean)) <- ((equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 1
run: full?/write/main 9: nil => ((8 boolean))
mem: ((8 boolean)): 1083 <= nil
run: full?/write/main 10: (((reply)) ((8 boolean)))
mem: ((8 boolean)) => nil
run: write/main 3: nil => ((4 boolean))
mem: ((4 boolean)): 1048 <= nil
run: write/main 4: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => nil
run: write/main 7: (((6 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: write/main 7: 1034 => ((6 tagged-value-array-address))
mem: ((6 tagged-value-array-address)): 1050 <= 1034
run: write/main 8: (((7 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: write/main 8: 1032 => ((7 integer-address))
mem: ((7 integer-address)): 1051 <= 1032
run: write/main 9: (((8 tagged-value-address)) <- ((index-address)) ((6 tagged-value-array-address) (deref)) ((7 integer-address) (deref)))
mem: ((7 integer-address) (deref)) => 0
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 4
run: write/main 9: 1035 => ((8 tagged-value-address))
mem: ((8 tagged-value-address)): 1052 <= 1035
run: write/main 10: (((8 tagged-value-address) (deref)) <- ((copy)) ((2 tagged-value)))
mem: ((2 tagged-value)) => #(tagged record (integer 34 . nil))
run: write/main 10: #(tagged record (integer 34 . nil)) => ((8 tagged-value-address) (deref))
mem: ((8 tagged-value-address) (deref)): 1035 <= integer
mem: ((8 tagged-value-address) (deref)): 1036 <= 34
run: write/main 11: (((7 integer-address) (deref)) <- ((add)) ((7 integer-address) (deref)) ((1 literal)))
mem: ((7 integer-address) (deref)) => 0
run: write/main 11: 1 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 1
run: write/main 12: (((9 integer)) <- ((length)) ((6 tagged-value-array-address) (deref)))
array-len: ((6 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 4
run: write/main 12: 4 => ((9 integer))
mem: ((9 integer)): 1053 <= 4
run: write/main 13: (((10 boolean)) <- ((less-than)) ((7 integer-address) (deref)) ((9 integer)))
mem: ((7 integer-address) (deref)) => 1
mem: ((9 integer)) => 4
run: write/main 13: t => ((10 boolean))
mem: ((10 boolean)): 1054 <= t
run: write/main 14: (((jump-if)) ((10 boolean)) ((1 offset)))
mem: ((10 boolean)) => t
run: write/main 16: (((reply)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (0 1 1034 . nil))
run: main 3: #(tagged record (0 1 1034 . nil)) => ((1 channel-address) (deref))
mem: ((1 channel-address) (deref)): 1031 <= 0
mem: ((1 channel-address) (deref)): 1032 <= 1
mem: ((1 channel-address) (deref)): 1033 <= 1034
run: main 4: (((1 channel-address) (deref)) <- ((write)) ((1 channel-address)) ((3 tagged-value)))
mem: ((1 channel-address)) => 1031
mem: ((3 tagged-value)) => #(tagged record (integer 34 . nil))
run: write/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: write/main 0: 1136 => ((default-space space-address))
run: write/main 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 #(tagged record (integer 34 . nil)))
run: write/main 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 1138 <= 1031
run: write/main 2: (((2 tagged-value)) <- ((next-input)))
arg: nil 1 (1031 #(tagged record (integer 34 . nil)))
run: write/main 2: #(tagged record (integer 34 . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 1139 <= integer
mem: ((2 tagged-value)): 1140 <= 34
run: write/main 3: (((4 boolean)) <- ((full?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (0 1 1034 . nil))
run: full?/write/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: full?/write/main 0: 1167 => ((default-space space-address))
run: full?/write/main 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 1 1034 . nil)))
run: full?/write/main 1: #(tagged record (0 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 1169 <= 0
mem: ((1 channel)): 1170 <= 1
mem: ((1 channel)): 1171 <= 1034
run: full?/write/main 2: (((4 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((1170 integer) (raw)) => 1
run: full?/write/main 2: 1 => ((4 integer))
mem: ((4 integer)): 1172 <= 1
run: full?/write/main 3: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 1
run: full?/write/main 3: 2 => ((4 integer))
mem: ((4 integer)): 1172 <= 2
run: full?/write/main 4: (((5 integer)) <- ((capacity)) ((1 channel)))
mem: ((1 channel)) => #(tagged record (0 1 1034 . nil))
run: capacity/full?/write/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: capacity/full?/write/main 0: 1198 => ((default-space space-address))
run: capacity/full?/write/main 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 1 1034 . nil)))
run: capacity/full?/write/main 1: #(tagged record (0 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 1200 <= 0
mem: ((1 channel)): 1201 <= 1
mem: ((1 channel)): 1202 <= 1034
run: capacity/full?/write/main 2: (((4 tagged-value-array-address)) <- ((get)) ((1 channel)) ((2 offset)))
mem: ((1202 tagged-value-array-address) (raw)) => 1034
run: capacity/full?/write/main 2: 1034 => ((4 tagged-value-array-address))
mem: ((4 tagged-value-array-address)): 1203 <= 1034
run: capacity/full?/write/main 3: (((5 integer)) <- ((length)) ((4 tagged-value-array-address) (deref)))
array-len: ((4 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 4
run: capacity/full?/write/main 3: 4 => ((5 integer))
mem: ((5 integer)): 1204 <= 4
run: capacity/full?/write/main 4: (((reply)) ((5 integer)))
mem: ((5 integer)) => 4
run: full?/write/main 4: 4 => ((5 integer))
mem: ((5 integer)): 1173 <= 4
run: full?/write/main 5: (((6 boolean)) <- ((less-than)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 2
mem: ((5 integer)) => 4
run: full?/write/main 5: t => ((6 boolean))
mem: ((6 boolean)): 1174 <= t
run: full?/write/main 6: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: full?/write/main 8: (((7 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((1169 integer) (raw)) => 0
run: full?/write/main 8: 0 => ((7 integer))
mem: ((7 integer)): 1175 <= 0
run: full?/write/main 9: (((8 boolean)) <- ((equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 2
run: full?/write/main 9: nil => ((8 boolean))
mem: ((8 boolean)): 1176 <= nil
run: full?/write/main 10: (((reply)) ((8 boolean)))
mem: ((8 boolean)) => nil
run: write/main 3: nil => ((4 boolean))
mem: ((4 boolean)): 1141 <= nil
run: write/main 4: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => nil
run: write/main 7: (((6 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: write/main 7: 1034 => ((6 tagged-value-array-address))
mem: ((6 tagged-value-array-address)): 1143 <= 1034
run: write/main 8: (((7 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: write/main 8: 1032 => ((7 integer-address))
mem: ((7 integer-address)): 1144 <= 1032
run: write/main 9: (((8 tagged-value-address)) <- ((index-address)) ((6 tagged-value-array-address) (deref)) ((7 integer-address) (deref)))
mem: ((7 integer-address) (deref)) => 1
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 4
run: write/main 9: 1037 => ((8 tagged-value-address))
mem: ((8 tagged-value-address)): 1145 <= 1037
run: write/main 10: (((8 tagged-value-address) (deref)) <- ((copy)) ((2 tagged-value)))
mem: ((2 tagged-value)) => #(tagged record (integer 34 . nil))
run: write/main 10: #(tagged record (integer 34 . nil)) => ((8 tagged-value-address) (deref))
mem: ((8 tagged-value-address) (deref)): 1037 <= integer
mem: ((8 tagged-value-address) (deref)): 1038 <= 34
run: write/main 11: (((7 integer-address) (deref)) <- ((add)) ((7 integer-address) (deref)) ((1 literal)))
mem: ((7 integer-address) (deref)) => 1
run: write/main 11: 2 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 2
run: write/main 12: (((9 integer)) <- ((length)) ((6 tagged-value-array-address) (deref)))
array-len: ((6 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 4
run: write/main 12: 4 => ((9 integer))
mem: ((9 integer)): 1146 <= 4
run: write/main 13: (((10 boolean)) <- ((less-than)) ((7 integer-address) (deref)) ((9 integer)))
mem: ((7 integer-address) (deref)) => 2
mem: ((9 integer)) => 4
run: write/main 13: t => ((10 boolean))
mem: ((10 boolean)): 1147 <= t
run: write/main 14: (((jump-if)) ((10 boolean)) ((1 offset)))
mem: ((10 boolean)) => t
run: write/main 16: (((reply)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (0 2 1034 . nil))
run: main 4: #(tagged record (0 2 1034 . nil)) => ((1 channel-address) (deref))
mem: ((1 channel-address) (deref)): 1031 <= 0
mem: ((1 channel-address) (deref)): 1032 <= 2
mem: ((1 channel-address) (deref)): 1033 <= 1034
run: main 5: (_ ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read/main 0: 1229 => ((default-space space-address))
run: read/main 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read/main 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 1231 <= 1031
run: read/main 2: (((2 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (0 2 1034 . nil))
run: empty?/read/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: empty?/read/main 0: 1260 => ((default-space space-address))
run: empty?/read/main 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 2 1034 . nil)))
run: empty?/read/main 1: #(tagged record (0 2 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 1262 <= 0
mem: ((1 channel)): 1263 <= 2
mem: ((1 channel)): 1264 <= 1034
run: empty?/read/main 2: (((4 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((1262 integer) (raw)) => 0
run: empty?/read/main 2: 0 => ((4 integer))
mem: ((4 integer)): 1265 <= 0
run: empty?/read/main 3: (((5 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((1263 integer) (raw)) => 2
run: empty?/read/main 3: 2 => ((5 integer))
mem: ((5 integer)): 1266 <= 2
run: empty?/read/main 4: (((6 boolean)) <- ((equal)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 0
mem: ((5 integer)) => 2
run: empty?/read/main 4: nil => ((6 boolean))
mem: ((6 boolean)): 1267 <= nil
run: empty?/read/main 5: (((reply)) ((6 boolean)))
mem: ((6 boolean)) => nil
run: read/main 2: nil => ((2 boolean))
mem: ((2 boolean)): 1232 <= nil
run: read/main 3: (((jump-unless)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => nil
run: read/main 6: (((4 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: read/main 6: 1031 => ((4 integer-address))
mem: ((4 integer-address)): 1234 <= 1031
run: read/main 7: (((5 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: read/main 7: 1034 => ((5 tagged-value-array-address))
mem: ((5 tagged-value-array-address)): 1235 <= 1034
run: read/main 8: (((6 tagged-value)) <- ((index)) ((5 tagged-value-array-address) (deref)) ((4 integer-address) (deref)))
mem: ((4 integer-address) (deref)) => 0
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 4
mem: ((1035 tagged-value) (raw)) => #(tagged record (integer 34 . nil))
run: read/main 8: #(tagged record (integer 34 . nil)) => ((6 tagged-value))
mem: ((6 tagged-value)): 1236 <= integer
mem: ((6 tagged-value)): 1237 <= 34
run: read/main 9: (((4 integer-address) (deref)) <- ((add)) ((4 integer-address) (deref)) ((1 literal)))
mem: ((4 integer-address) (deref)) => 0
run: read/main 9: 1 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1031 <= 1
run: read/main 10: (((8 integer)) <- ((length)) ((5 tagged-value-array-address) (deref)))
array-len: ((5 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 4
run: read/main 10: 4 => ((8 integer))
mem: ((8 integer)): 1238 <= 4
run: read/main 11: (((9 boolean)) <- ((less-than)) ((4 integer-address) (deref)) ((8 integer)))
mem: ((4 integer-address) (deref)) => 1
mem: ((8 integer)) => 4
run: read/main 11: t => ((9 boolean))
mem: ((9 boolean)): 1239 <= t
run: read/main 12: (((jump-if)) ((9 boolean)) ((1 offset)))
mem: ((9 boolean)) => t
run: read/main 14: (((reply)) ((6 tagged-value)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((6 tagged-value)) => #(tagged record (integer 34 . nil))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (1 2 1034 . nil))
run: main 5: #(tagged record (integer 34 . nil)) => _
run: main 5: #(tagged record (1 2 1034 . nil)) => ((1 channel-address) (deref))
mem: ((1 channel-address) (deref)): 1031 <= 1
mem: ((1 channel-address) (deref)): 1032 <= 2
mem: ((1 channel-address) (deref)): 1033 <= 1034
run: main 6: (((5 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 2 1034 . nil))
run: empty?/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: empty?/main 0: 1291 => ((default-space space-address))
run: empty?/main 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 2 1034 . nil)))
run: empty?/main 1: #(tagged record (1 2 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 1293 <= 1
mem: ((1 channel)): 1294 <= 2
mem: ((1 channel)): 1295 <= 1034
run: empty?/main 2: (((4 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((1293 integer) (raw)) => 1
run: empty?/main 2: 1 => ((4 integer))
mem: ((4 integer)): 1296 <= 1
run: empty?/main 3: (((5 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((1294 integer) (raw)) => 2
run: empty?/main 3: 2 => ((5 integer))
mem: ((5 integer)): 1297 <= 2
run: empty?/main 4: (((6 boolean)) <- ((equal)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 1
mem: ((5 integer)) => 2
run: empty?/main 4: nil => ((6 boolean))
mem: ((6 boolean)): 1298 <= nil
run: empty?/main 5: (((reply)) ((6 boolean)))
mem: ((6 boolean)) => nil
run: main 6: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: main 7: (((6 boolean)) <- ((full?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 2 1034 . nil))
run: full?/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: full?/main 0: 1322 => ((default-space space-address))
run: full?/main 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 2 1034 . nil)))
run: full?/main 1: #(tagged record (1 2 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 1324 <= 1
mem: ((1 channel)): 1325 <= 2
mem: ((1 channel)): 1326 <= 1034
run: full?/main 2: (((4 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((1325 integer) (raw)) => 2
run: full?/main 2: 2 => ((4 integer))
mem: ((4 integer)): 1327 <= 2
run: full?/main 3: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 2
run: full?/main 3: 3 => ((4 integer))
mem: ((4 integer)): 1327 <= 3
run: full?/main 4: (((5 integer)) <- ((capacity)) ((1 channel)))
mem: ((1 channel)) => #(tagged record (1 2 1034 . nil))
run: capacity/full?/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: capacity/full?/main 0: 1353 => ((default-space space-address))
run: capacity/full?/main 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 2 1034 . nil)))
run: capacity/full?/main 1: #(tagged record (1 2 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 1355 <= 1
mem: ((1 channel)): 1356 <= 2
mem: ((1 channel)): 1357 <= 1034
run: capacity/full?/main 2: (((4 tagged-value-array-address)) <- ((get)) ((1 channel)) ((2 offset)))
mem: ((1357 tagged-value-array-address) (raw)) => 1034
run: capacity/full?/main 2: 1034 => ((4 tagged-value-array-address))
mem: ((4 tagged-value-array-address)): 1358 <= 1034
run: capacity/full?/main 3: (((5 integer)) <- ((length)) ((4 tagged-value-array-address) (deref)))
array-len: ((4 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 4
run: capacity/full?/main 3: 4 => ((5 integer))
mem: ((5 integer)): 1359 <= 4
run: capacity/full?/main 4: (((reply)) ((5 integer)))
mem: ((5 integer)) => 4
run: full?/main 4: 4 => ((5 integer))
mem: ((5 integer)): 1328 <= 4
run: full?/main 5: (((6 boolean)) <- ((less-than)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 3
mem: ((5 integer)) => 4
run: full?/main 5: t => ((6 boolean))
mem: ((6 boolean)): 1329 <= t
run: full?/main 6: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: full?/main 8: (((7 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((1324 integer) (raw)) => 1
run: full?/main 8: 1 => ((7 integer))
mem: ((7 integer)): 1330 <= 1
run: full?/main 9: (((8 boolean)) <- ((equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 1
mem: ((4 integer)) => 3
run: full?/main 9: nil => ((8 boolean))
mem: ((8 boolean)): 1331 <= nil
run: full?/main 10: (((reply)) ((8 boolean)))
mem: ((8 boolean)) => nil
run: main 7: nil => ((6 boolean))
mem: ((6 boolean)): 6 <= nil
schedule: done with routine nil
