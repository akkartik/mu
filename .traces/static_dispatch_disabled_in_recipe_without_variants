9991 parse: --- defining main
9993 parse: instruction: test
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   product: {"1": "number"}
9992 load: after rewriting: 1:number <- test 3
9999 parse: recipe main has a header
9991 parse: --- defining test
9993 parse: instruction: next-ingredient
9993 parse:   number of ingredients: 0
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- next-ingredient 
9993 parse: instruction: reply
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"34": "literal"}
9992 load: after rewriting: reply 34
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- deduce types for recipe test
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe test
9991 transform: --- transform names for recipe main
9991 transform: --- transform names for recipe test
9991 transform: --- resolve ambiguous calls for recipe main
9991 transform: --- resolve ambiguous calls for recipe test
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe test
9991 transform: --- transform braces for recipe main
9992 transform: test ...
9992 transform:  ...
9991 transform: --- transform braces for recipe test
9992 transform: next-ingredient ...
9992 transform: reply ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe test
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe test
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe test
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe test
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: 1:number <- test 3
9999 trace: incrementing callstack depth to 2
 103 run: 2:number <- next-ingredient 
9999 mem: storing 3 in location 2
 103 run: reply 34
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 34
9999 mem: storing 34 in location 1
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
