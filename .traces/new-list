schedule: main
run: -- nil
run: 1 main 0: ((1 integer) <- new-list (3 literal) (4 literal) (5 literal))
run: -- nil
run: 2 new-list 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1000 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1000 30))
run: 3 new-list 1: ((1 list-address) <- new (list literal))
sizeof: list
sizeof: tagged-value
sizeof: type
sizeof: location
sizeof: list-address
run: 1031 => (1 list-address)
setm: (1 list-address) <= 1031
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1001 to 1031
run: -- ((1000 30) (1001 1031))
run: 4 new-list 2: ((2 list-address) <- copy (1 list-address))
m: (1 list-address)
sizeof: (1 list-address)
run: 1031 => (2 list-address)
setm: (2 list-address) <= 1031
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1002 to 1031
run: -- ((1000 30) (1001 1031) (1002 1031))
run: 5 new-list 3: ((3 integer) (4 boolean) <- arg)
arg: nil 0 (3 4 5)
run: 3 => (3 integer)
setm: (3 integer) <= 3
setm: size of (3 integer) is 1
setm: (3 integer): setting 1003 to 3
run: t => (4 boolean)
setm: (4 boolean) <= t
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1004 to t
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t))
run: 6 new-list 4: (jump-unless (4 boolean) (6 offset))
m: (4 boolean)
sizeof: (4 boolean)
jump: checking that t is not t
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t))
run: 7 new-list 5: ((5 list-address-address) <- get-address (2 list-address deref) (1 offset))
record-info: (2 list-address deref) (1 offset)
record-info: initial base 1031 type ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
sizeof: tagged-value
sizeof: type
sizeof: location
get-address: (2 list-address deref) (1 offset) => 1033
run: 1033 => (5 list-address-address)
setm: (5 list-address-address) <= 1033
setm: size of (5 list-address-address) is 1
setm: (5 list-address-address): setting 1005 to 1033
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t) (1005 1033))
run: 8 new-list 6: ((5 list-address-address deref) <- new (list literal))
sizeof: list
sizeof: tagged-value
sizeof: type
sizeof: location
sizeof: list-address
run: 1034 => (5 list-address-address deref)
setm: (5 list-address-address deref) <= 1034
setm: size of (5 list-address-address deref) is 1
setm: (5 list-address-address deref): setting 1033 to 1034
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t) (1005 1033) (1033 1034))
run: 9 new-list 7: ((2 list-address) <- list-next (2 list-address))
m: (2 list-address)
sizeof: (2 list-address)
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t) (1005 1033) (1033 1034))
run: 10 list-next 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1037 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30))
run: 11 list-next 1: ((1 list-address) <- arg)
arg: nil 0 (1031)
run: 1031 => (1 list-address)
setm: (1 list-address) <= 1031
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1038 to 1031
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031))
run: 12 list-next 2: ((2 list-address) <- get (1 list-address deref) (1 offset))
record-info: (1 list-address deref) (1 offset)
record-info: initial base 1031 type ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
sizeof: tagged-value
sizeof: type
sizeof: location
get: (1 list-address deref) (1 offset) => 1033 list-address
m: (1033 list-address global)
sizeof: (1033 list-address global)
run: 1034 => (2 list-address)
setm: (2 list-address) <= 1034
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1039 to 1034
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031) (1039 1034))
run: 13 list-next 3: (reply (2 list-address))
m: (2 list-address)
sizeof: (2 list-address)
reply: ((2 list-address)) ((2 list-address))
reply: 1034 => (2 list-address)
setm: (2 list-address) <= 1034
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1002 to 1034
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031) (1039 1034))
run: 14 new-list 8: ((6 tagged-value-address) <- list-value-address (2 list-address))
m: (2 list-address)
sizeof: (2 list-address)
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031) (1039 1034))
run: 15 list-value-address 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1068 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031) (1039 1034) (1068 30))
run: 16 list-value-address 1: ((1 list-address) <- arg)
arg: nil 0 (1034)
run: 1034 => (1 list-address)
setm: (1 list-address) <= 1034
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1069 to 1034
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034))
run: 17 list-value-address 2: ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset))
record-info: (1 list-address deref) (0 offset)
record-info: initial base 1034 type ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get-address: (1 list-address deref) (0 offset) => 1034
run: 1034 => (2 tagged-value-address)
setm: (2 tagged-value-address) <= 1034
setm: size of (2 tagged-value-address) is 1
setm: (2 tagged-value-address): setting 1070 to 1034
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 18 list-value-address 3: (reply (2 tagged-value-address))
m: (2 tagged-value-address)
sizeof: (2 tagged-value-address)
reply: ((2 tagged-value-address)) ((6 tagged-value-address))
reply: 1034 => (6 tagged-value-address)
setm: (6 tagged-value-address) <= 1034
setm: size of (6 tagged-value-address) is 1
setm: (6 tagged-value-address): setting 1006 to 1034
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1006 1034) (1033 1034) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 19 new-list 9: ((6 tagged-value-address deref) <- save-type (3 integer))
m: (3 integer)
sizeof: (3 integer)
run: #(tagged record (integer 3)) => (6 tagged-value-address deref)
setm: (6 tagged-value-address deref) <= #(tagged record (integer 3))
setm: size of (6 tagged-value-address deref) is 2
sizeof: (6 tagged-value-address deref)
sizeof: (nil tagged-value)
sizeof: type
sizeof: location
setm: (6 tagged-value-address deref): setting 1034 to integer
setm: (6 tagged-value-address deref): setting 1035 to 3
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 20 new-list 10: (jump (-8 offset))
jump: jumping to 3
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 21 new-list 3: ((3 integer) (4 boolean) <- arg)
arg: nil 1 (3 4 5)
run: 4 => (3 integer)
setm: (3 integer) <= 4
setm: size of (3 integer) is 1
setm: (3 integer): setting 1003 to 4
run: t => (4 boolean)
setm: (4 boolean) <= t
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1004 to t
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1033) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 22 new-list 4: (jump-unless (4 boolean) (6 offset))
m: (4 boolean)
sizeof: (4 boolean)
jump: checking that t is not t
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1033) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 23 new-list 5: ((5 list-address-address) <- get-address (2 list-address deref) (1 offset))
record-info: (2 list-address deref) (1 offset)
record-info: initial base 1034 type ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
sizeof: tagged-value
sizeof: type
sizeof: location
get-address: (2 list-address deref) (1 offset) => 1036
run: 1036 => (5 list-address-address)
setm: (5 list-address-address) <= 1036
setm: size of (5 list-address-address) is 1
setm: (5 list-address-address): setting 1005 to 1036
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 24 new-list 6: ((5 list-address-address deref) <- new (list literal))
sizeof: list
sizeof: tagged-value
sizeof: type
sizeof: location
sizeof: list-address
run: 1099 => (5 list-address-address deref)
setm: (5 list-address-address deref) <= 1099
setm: size of (5 list-address-address deref) is 1
setm: (5 list-address-address deref): setting 1036 to 1099
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 25 new-list 7: ((2 list-address) <- list-next (2 list-address))
m: (2 list-address)
sizeof: (2 list-address)
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 26 list-next 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1102 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30))
run: 27 list-next 1: ((1 list-address) <- arg)
arg: nil 0 (1034)
run: 1034 => (1 list-address)
setm: (1 list-address) <= 1034
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1103 to 1034
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034))
run: 28 list-next 2: ((2 list-address) <- get (1 list-address deref) (1 offset))
record-info: (1 list-address deref) (1 offset)
record-info: initial base 1034 type ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
sizeof: tagged-value
sizeof: type
sizeof: location
get: (1 list-address deref) (1 offset) => 1036 list-address
m: (1036 list-address global)
sizeof: (1036 list-address global)
run: 1099 => (2 list-address)
setm: (2 list-address) <= 1099
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1104 to 1099
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099))
run: 29 list-next 3: (reply (2 list-address))
m: (2 list-address)
sizeof: (2 list-address)
reply: ((2 list-address)) ((2 list-address))
reply: 1099 => (2 list-address)
setm: (2 list-address) <= 1099
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1002 to 1099
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099))
run: 30 new-list 8: ((6 tagged-value-address) <- list-value-address (2 list-address))
m: (2 list-address)
sizeof: (2 list-address)
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099))
run: 31 list-value-address 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1133 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099) (1133 30))
run: 32 list-value-address 1: ((1 list-address) <- arg)
arg: nil 0 (1099)
run: 1099 => (1 list-address)
setm: (1 list-address) <= 1099
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1134 to 1099
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099))
run: 33 list-value-address 2: ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset))
record-info: (1 list-address deref) (0 offset)
record-info: initial base 1099 type ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get-address: (1 list-address deref) (0 offset) => 1099
run: 1099 => (2 tagged-value-address)
setm: (2 tagged-value-address) <= 1099
setm: size of (2 tagged-value-address) is 1
setm: (2 tagged-value-address): setting 1135 to 1099
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 34 list-value-address 3: (reply (2 tagged-value-address))
m: (2 tagged-value-address)
sizeof: (2 tagged-value-address)
reply: ((2 tagged-value-address)) ((6 tagged-value-address))
reply: 1099 => (6 tagged-value-address)
setm: (6 tagged-value-address) <= 1099
setm: size of (6 tagged-value-address) is 1
setm: (6 tagged-value-address): setting 1006 to 1099
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 35 new-list 9: ((6 tagged-value-address deref) <- save-type (3 integer))
m: (3 integer)
sizeof: (3 integer)
run: #(tagged record (integer 4)) => (6 tagged-value-address deref)
setm: (6 tagged-value-address deref) <= #(tagged record (integer 4))
setm: size of (6 tagged-value-address deref) is 2
sizeof: (6 tagged-value-address deref)
sizeof: (nil tagged-value)
sizeof: type
sizeof: location
setm: (6 tagged-value-address deref): setting 1099 to integer
setm: (6 tagged-value-address deref): setting 1100 to 4
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 36 new-list 10: (jump (-8 offset))
jump: jumping to 3
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 37 new-list 3: ((3 integer) (4 boolean) <- arg)
arg: nil 2 (3 4 5)
run: 5 => (3 integer)
setm: (3 integer) <= 5
setm: size of (3 integer) is 1
setm: (3 integer): setting 1003 to 5
run: t => (4 boolean)
setm: (4 boolean) <= t
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1004 to t
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1036) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 38 new-list 4: (jump-unless (4 boolean) (6 offset))
m: (4 boolean)
sizeof: (4 boolean)
jump: checking that t is not t
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1036) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 39 new-list 5: ((5 list-address-address) <- get-address (2 list-address deref) (1 offset))
record-info: (2 list-address deref) (1 offset)
record-info: initial base 1099 type ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
sizeof: tagged-value
sizeof: type
sizeof: location
get-address: (2 list-address deref) (1 offset) => 1101
run: 1101 => (5 list-address-address)
setm: (5 list-address-address) <= 1101
setm: size of (5 list-address-address) is 1
setm: (5 list-address-address): setting 1005 to 1101
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 40 new-list 6: ((5 list-address-address deref) <- new (list literal))
sizeof: list
sizeof: tagged-value
sizeof: type
sizeof: location
sizeof: list-address
run: 1164 => (5 list-address-address deref)
setm: (5 list-address-address deref) <= 1164
setm: size of (5 list-address-address deref) is 1
setm: (5 list-address-address deref): setting 1101 to 1164
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 41 new-list 7: ((2 list-address) <- list-next (2 list-address))
m: (2 list-address)
sizeof: (2 list-address)
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 42 list-next 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1167 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30))
run: 43 list-next 1: ((1 list-address) <- arg)
arg: nil 0 (1099)
run: 1099 => (1 list-address)
setm: (1 list-address) <= 1099
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1168 to 1099
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099))
run: 44 list-next 2: ((2 list-address) <- get (1 list-address deref) (1 offset))
record-info: (1 list-address deref) (1 offset)
record-info: initial base 1099 type ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
sizeof: tagged-value
sizeof: type
sizeof: location
get: (1 list-address deref) (1 offset) => 1101 list-address
m: (1101 list-address global)
sizeof: (1101 list-address global)
run: 1164 => (2 list-address)
setm: (2 list-address) <= 1164
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1169 to 1164
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164))
run: 45 list-next 3: (reply (2 list-address))
m: (2 list-address)
sizeof: (2 list-address)
reply: ((2 list-address)) ((2 list-address))
reply: 1164 => (2 list-address)
setm: (2 list-address) <= 1164
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1002 to 1164
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164))
run: 46 new-list 8: ((6 tagged-value-address) <- list-value-address (2 list-address))
m: (2 list-address)
sizeof: (2 list-address)
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164))
run: 47 list-value-address 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1198 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164) (1198 30))
run: 48 list-value-address 1: ((1 list-address) <- arg)
arg: nil 0 (1164)
run: 1164 => (1 list-address)
setm: (1 list-address) <= 1164
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1199 to 1164
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164))
run: 49 list-value-address 2: ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset))
record-info: (1 list-address deref) (0 offset)
record-info: initial base 1164 type ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get-address: (1 list-address deref) (0 offset) => 1164
run: 1164 => (2 tagged-value-address)
setm: (2 tagged-value-address) <= 1164
setm: size of (2 tagged-value-address) is 1
setm: (2 tagged-value-address): setting 1200 to 1164
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 50 list-value-address 3: (reply (2 tagged-value-address))
m: (2 tagged-value-address)
sizeof: (2 tagged-value-address)
reply: ((2 tagged-value-address)) ((6 tagged-value-address))
reply: 1164 => (6 tagged-value-address)
setm: (6 tagged-value-address) <= 1164
setm: size of (6 tagged-value-address) is 1
setm: (6 tagged-value-address): setting 1006 to 1164
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 51 new-list 9: ((6 tagged-value-address deref) <- save-type (3 integer))
m: (3 integer)
sizeof: (3 integer)
run: #(tagged record (integer 5)) => (6 tagged-value-address deref)
setm: (6 tagged-value-address deref) <= #(tagged record (integer 5))
setm: size of (6 tagged-value-address deref) is 2
sizeof: (6 tagged-value-address deref)
sizeof: (nil tagged-value)
sizeof: type
sizeof: location
setm: (6 tagged-value-address deref): setting 1164 to integer
setm: (6 tagged-value-address deref): setting 1165 to 5
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 52 new-list 10: (jump (-8 offset))
jump: jumping to 3
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 53 new-list 3: ((3 integer) (4 boolean) <- arg)
arg: nil 3 (3 4 5)
run: nil => (3 integer)
setm: (3 integer) <= nil
setm: size of (3 integer) is 1
setm: (3 integer): setting 1003 to nil
run: nil => (4 boolean)
setm: (4 boolean) <= nil
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1004 to nil
run: -- ((1000 30) (1001 1031) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 54 new-list 4: (jump-unless (4 boolean) (6 offset))
m: (4 boolean)
sizeof: (4 boolean)
jump: checking that nil is not t
jump: jumping to 11
run: -- ((1000 30) (1001 1031) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 55 new-list 11: ((1 list-address) <- list-next (1 list-address))
m: (1 list-address)
sizeof: (1 list-address)
run: -- ((1000 30) (1001 1031) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 56 list-next 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1229 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164) (1229 30))
run: 57 list-next 1: ((1 list-address) <- arg)
arg: nil 0 (1031)
run: 1031 => (1 list-address)
setm: (1 list-address) <= 1031
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1230 to 1031
run: -- ((1000 30) (1001 1031) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164) (1229 30) (1230 1031))
run: 58 list-next 2: ((2 list-address) <- get (1 list-address deref) (1 offset))
record-info: (1 list-address deref) (1 offset)
record-info: initial base 1031 type ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
sizeof: tagged-value
sizeof: type
sizeof: location
get: (1 list-address deref) (1 offset) => 1033 list-address
m: (1033 list-address global)
sizeof: (1033 list-address global)
run: 1034 => (2 list-address)
setm: (2 list-address) <= 1034
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1231 to 1034
run: -- ((1000 30) (1001 1031) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164) (1229 30) (1230 1031) (1231 1034))
run: 59 list-next 3: (reply (2 list-address))
m: (2 list-address)
sizeof: (2 list-address)
reply: ((2 list-address)) ((1 list-address))
reply: 1034 => (1 list-address)
setm: (1 list-address) <= 1034
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1001 to 1034
run: -- ((1000 30) (1001 1034) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164) (1229 30) (1230 1031) (1231 1034))
run: 60 new-list 12: (reply (1 list-address))
m: (1 list-address)
sizeof: (1 list-address)
reply: ((1 list-address)) ((1 integer))
reply: 1034 => (1 integer)
setm: (1 integer) <= 1034
setm: size of (1 integer) is 1
setm: (1 integer): setting 1 to 1034
schedule: done with routine
