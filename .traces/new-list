c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 tagged-value-address) <- new (tagged-value literal)) -- nil
c{0: 2 ((1 tagged-value-address deref) <- arg) -- nil
c{0: 3 ((2 type) <- arg) -- nil
c{0: 4 ((3 type) <- get (1 tagged-value-address deref) (0 offset)) -- nil
c{0: 5 ((4 boolean) <- eq (3 type) (2 type)) -- nil
c{0: 6 (break-if (4 boolean)) -- ((open 6))
c{0: 7 (reply (0 literal) (nil literal)) -- ((open 6))
c{0: 8 ((5 location) <- get (1 tagged-value-address deref) (1 offset)) -- ((close 8) (open 6))
c{0: 9 (reply (5 location) (4 boolean)) -- ((close 8) (open 6))
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 tagged-value-address))
c{1: 2 arg ((1 tagged-value-address deref))
c{1: 3 arg ((2 type))
c{1: 4 get ((3 type))
c{1: 5 eq ((4 boolean))
c{1: 6 begin nil
c{1: 6 break-if nil
c{1: 7 reply nil
c{1: 8 get ((5 location))
c{1: 9 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 tagged-value-address) <- new (tagged-value literal)) nil nil
maybe-add: (tagged-value literal)
cn0: checking (1 tagged-value-address)
maybe-add: (1 tagged-value-address)
cn0: ((1 tagged-value-address deref) <- arg) nil nil
cn0: checking (1 tagged-value-address deref)
maybe-add: (1 tagged-value-address deref)
cn0: ((2 type) <- arg) nil nil
cn0: checking (2 type)
maybe-add: (2 type)
cn0: ((3 type) <- get (1 tagged-value-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (3 type)
maybe-add: (3 type)
cn0: ((4 boolean) <- eq (3 type) (2 type)) nil nil
maybe-add: (3 type)
maybe-add: (2 type)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-if (4 boolean) (1 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (1 offset)
cn0: (reply (0 literal) (nil literal)) nil nil
maybe-add: (0 literal)
maybe-add: (nil literal)
cn0: ((5 location) <- get (1 tagged-value-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (5 location)
maybe-add: (5 location)
cn0: (reply (5 location) (4 boolean)) nil nil
maybe-add: (5 location)
maybe-add: (4 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 type) <- arg) -- nil
c{0: 2 ((2 integer) <- sizeof (1 type)) -- nil
c{0: 3 ((3 boolean) <- eq (2 integer) (1 literal)) -- nil
c{0: 4 (assert (3 boolean)) -- nil
c{0: 5 ((4 tagged-value-address) <- new (tagged-value literal)) -- nil
c{0: 6 ((5 location) <- get-address (4 tagged-value-address deref) (0 offset)) -- nil
c{0: 7 ((5 location deref) <- copy (1 type)) -- nil
c{0: 8 ((6 location) <- get-address (4 tagged-value-address deref) (1 offset)) -- nil
c{0: 9 ((6 location deref) <- arg) -- nil
c{0: 10 (reply (4 tagged-value-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 type))
c{1: 2 sizeof ((2 integer))
c{1: 3 eq ((3 boolean))
c{1: 4 assert nil
c{1: 5 new ((4 tagged-value-address))
c{1: 6 get-address ((5 location))
c{1: 7 copy ((5 location deref))
c{1: 8 get-address ((6 location))
c{1: 9 arg ((6 location deref))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 type) <- arg) nil nil
cn0: checking (1 type)
maybe-add: (1 type)
cn0: ((2 integer) <- sizeof (1 type)) nil nil
maybe-add: (1 type)
cn0: checking (2 integer)
maybe-add: (2 integer)
cn0: ((3 boolean) <- eq (2 integer) (1 literal)) nil nil
maybe-add: (2 integer)
maybe-add: (1 literal)
cn0: checking (3 boolean)
maybe-add: (3 boolean)
cn0: (assert (3 boolean)) nil nil
maybe-add: (3 boolean)
cn0: ((4 tagged-value-address) <- new (tagged-value literal)) nil nil
maybe-add: (tagged-value literal)
cn0: checking (4 tagged-value-address)
maybe-add: (4 tagged-value-address)
cn0: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (5 location)
maybe-add: (5 location)
cn0: ((5 location deref) <- copy (1 type)) nil nil
maybe-add: (1 type)
cn0: checking (5 location deref)
maybe-add: (5 location deref)
cn0: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (6 location)
maybe-add: (6 location)
cn0: ((6 location deref) <- arg) nil nil
cn0: checking (6 location deref)
maybe-add: (6 location deref)
cn0: (reply (4 tagged-value-address)) nil nil
maybe-add: (4 tagged-value-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- arg) -- nil
c{0: 2 ((2 list-address) <- get (1 list-address deref) (1 offset)) -- nil
c{0: 3 (reply (2 list-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 list-address))
c{1: 2 get ((2 list-address))
c{1: 3 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- arg) nil nil
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 list-address) <- get (1 list-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: (reply (2 list-address)) nil nil
maybe-add: (2 list-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- arg) -- nil
c{0: 2 ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset)) -- nil
c{0: 3 (reply (2 tagged-value-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 list-address))
c{1: 2 get-address ((2 tagged-value-address))
c{1: 3 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- arg) nil nil
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (2 tagged-value-address)
maybe-add: (2 tagged-value-address)
cn0: (reply (2 tagged-value-address)) nil nil
maybe-add: (2 tagged-value-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- new (list literal)) -- nil
c{0: 2 ((2 list-address) <- copy (1 list-address)) -- nil
c{0: 3 ((3 integer) (4 boolean) <- arg) -- ((open 3))
c{0: 4 (break-unless (4 boolean)) -- ((open 3))
c{0: 5 ((5 list-address-address) <- get-address (2 list-address deref) (1 offset)) -- ((open 3))
c{0: 6 ((5 list-address-address deref) <- new (list literal)) -- ((open 3))
c{0: 7 ((2 list-address) <- list-next (2 list-address)) -- ((open 3))
c{0: 8 ((6 tagged-value-address) <- list-value-address (2 list-address)) -- ((open 3))
c{0: 9 ((6 tagged-value-address deref) <- save-type (3 integer)) -- ((open 3))
c{0: 10 (loop) -- ((open 3))
c{0: 11 ((1 list-address) <- list-next (1 list-address)) -- ((close 11) (open 3))
c{0: 12 (reply (1 list-address)) -- ((close 11) (open 3))
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 list-address))
c{1: 2 copy ((2 list-address))
c{1: 3 begin nil
c{1: 3 arg ((3 integer) (4 boolean))
c{1: 4 break-unless nil
c{1: 5 get-address ((5 list-address-address))
c{1: 6 new ((5 list-address-address deref))
c{1: 7 list-next ((2 list-address))
c{1: 8 list-value-address ((6 tagged-value-address))
c{1: 9 save-type ((6 tagged-value-address deref))
c{1: 10 loop nil
c{1: 11 list-next ((1 list-address))
c{1: 12 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- new (list literal)) nil nil
maybe-add: (list literal)
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 list-address) <- copy (1 list-address)) nil nil
maybe-add: (1 list-address)
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: ((3 integer) (4 boolean) <- arg) nil nil
cn0: checking (3 integer)
maybe-add: (3 integer)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-unless (4 boolean) (6 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (6 offset)
cn0: ((5 list-address-address) <- get-address (2 list-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (5 list-address-address)
maybe-add: (5 list-address-address)
cn0: ((5 list-address-address deref) <- new (list literal)) nil nil
maybe-add: (list literal)
cn0: checking (5 list-address-address deref)
maybe-add: (5 list-address-address deref)
cn0: ((2 list-address) <- list-next (2 list-address)) nil nil
maybe-add: (2 list-address)
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: ((6 tagged-value-address) <- list-value-address (2 list-address)) nil nil
maybe-add: (2 list-address)
cn0: checking (6 tagged-value-address)
maybe-add: (6 tagged-value-address)
cn0: ((6 tagged-value-address deref) <- save-type (3 integer)) nil nil
maybe-add: (3 integer)
cn0: checking (6 tagged-value-address deref)
maybe-add: (6 tagged-value-address deref)
cn0: (jump (-8 offset)) nil nil
maybe-add: (-8 offset)
cn0: ((1 list-address) <- list-next (1 list-address)) nil nil
maybe-add: (1 list-address)
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: (reply (1 list-address)) nil nil
maybe-add: (1 list-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- new (channel literal)) -- nil
c{0: 2 ((2 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- nil
c{0: 3 ((2 integer-address deref) <- copy (0 literal)) -- nil
c{0: 4 ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- nil
c{0: 5 ((3 integer-address deref) <- copy (0 literal)) -- nil
c{0: 6 ((4 integer) <- arg) -- nil
c{0: 7 ((4 integer) <- add (4 integer) (1 literal)) -- nil
c{0: 8 ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset)) -- nil
c{0: 9 ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer)) -- nil
c{0: 10 (reply (1 channel-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 channel-address))
c{1: 2 get-address ((2 integer-address))
c{1: 3 copy ((2 integer-address deref))
c{1: 4 get-address ((3 integer-address))
c{1: 5 copy ((3 integer-address deref))
c{1: 6 arg ((4 integer))
c{1: 7 add ((4 integer))
c{1: 8 get-address ((5 tagged-value-array-address-address))
c{1: 9 new ((5 tagged-value-array-address-address deref))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- new (channel literal)) nil nil
maybe-add: (channel literal)
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (2 integer-address)
maybe-add: (2 integer-address)
cn0: ((2 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (2 integer-address deref)
maybe-add: (2 integer-address deref)
cn0: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (3 integer-address)
maybe-add: (3 integer-address)
cn0: ((3 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (3 integer-address deref)
maybe-add: (3 integer-address deref)
cn0: ((4 integer) <- arg) nil nil
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((4 integer) <- add (4 integer) (1 literal)) nil nil
maybe-add: (4 integer)
maybe-add: (1 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (5 tagged-value-array-address-address)
maybe-add: (5 tagged-value-array-address-address)
cn0: ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer)) nil nil
maybe-add: (tagged-value-array literal)
maybe-add: (4 integer)
cn0: checking (5 tagged-value-array-address-address deref)
maybe-add: (5 tagged-value-array-address-address deref)
cn0: (reply (1 channel-address)) nil nil
maybe-add: (1 channel-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 tagged-value-array-address) <- get (1 channel) (2 offset)) -- nil
c{0: 3 ((5 integer) <- len (4 tagged-value-array-address deref)) -- nil
c{0: 4 (reply (5 integer)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 tagged-value-array-address))
c{1: 3 len ((5 integer))
c{1: 4 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 tagged-value-array-address) <- get (1 channel) (2 offset)) nil nil
cn0: field-access 2
cn0: checking (4 tagged-value-array-address)
maybe-add: (4 tagged-value-array-address)
cn0: ((5 integer) <- len (4 tagged-value-array-address deref)) nil nil
maybe-add: (4 tagged-value-array-address deref)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: (reply (5 integer)) nil nil
maybe-add: (5 integer)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- arg) -- nil
c{0: 2 ((2 tagged-value) <- arg) -- nil
c{0: 3 ((4 boolean) <- full? (1 channel-address deref)) -- ((open 3))
c{0: 4 (break-unless (4 boolean)) -- ((open 3))
c{0: 5 ((5 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- ((open 3))
c{0: 6 (sleep (5 integer-address deref)) -- ((open 3))
c{0: 7 ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) -- ((close 7) (open 3))
c{0: 8 ((7 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- ((close 7) (open 3))
c{0: 9 ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref)) -- ((close 7) (open 3))
c{0: 10 ((8 tagged-value-address deref) <- copy (2 tagged-value)) -- ((close 7) (open 3))
c{0: 11 ((7 integer-address deref) <- add (7 integer-address deref) (1 literal)) -- ((close 7) (open 3))
c{0: 12 ((9 integer) <- len (6 tagged-value-array-address deref)) -- ((open 12) (close 7) (open 3))
c{0: 13 ((10 boolean) <- lt (7 integer-address deref) (9 integer)) -- ((open 12) (close 7) (open 3))
c{0: 14 (break-if (10 boolean)) -- ((open 12) (close 7) (open 3))
c{0: 15 ((7 integer-address deref) <- copy (0 literal)) -- ((open 12) (close 7) (open 3))
c{0: 16 (reply (1 channel-address deref)) -- ((close 16) (open 12) (close 7) (open 3))
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel-address))
c{1: 2 arg ((2 tagged-value))
c{1: 3 begin nil
c{1: 3 full? ((4 boolean))
c{1: 4 break-unless nil
c{1: 5 get-address ((5 integer-address))
c{1: 6 sleep nil
c{1: 7 get ((6 tagged-value-array-address))
c{1: 8 get-address ((7 integer-address))
c{1: 9 index-address ((8 tagged-value-address))
c{1: 10 copy ((8 tagged-value-address deref))
c{1: 11 add ((7 integer-address deref))
c{1: 12 begin nil
c{1: 12 len ((9 integer))
c{1: 13 lt ((10 boolean))
c{1: 14 break-if nil
c{1: 15 copy ((7 integer-address deref))
c{1: 16 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- arg) nil nil
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 tagged-value) <- arg) nil nil
cn0: checking (2 tagged-value)
maybe-add: (2 tagged-value)
cn0: ((4 boolean) <- full? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-unless (4 boolean) (2 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (2 offset)
cn0: ((5 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (5 integer-address)
maybe-add: (5 integer-address)
cn0: (sleep (5 integer-address deref)) nil nil
maybe-add: (5 integer-address deref)
cn0: ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (6 tagged-value-array-address)
maybe-add: (6 tagged-value-array-address)
cn0: ((7 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (7 integer-address)
maybe-add: (7 integer-address)
cn0: ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref)) nil nil
maybe-add: (6 tagged-value-array-address deref)
maybe-add: (7 integer-address deref)
cn0: checking (8 tagged-value-address)
maybe-add: (8 tagged-value-address)
cn0: ((8 tagged-value-address deref) <- copy (2 tagged-value)) nil nil
maybe-add: (2 tagged-value)
cn0: checking (8 tagged-value-address deref)
maybe-add: (8 tagged-value-address deref)
cn0: ((7 integer-address deref) <- add (7 integer-address deref) (1 literal)) nil nil
maybe-add: (7 integer-address deref)
maybe-add: (1 literal)
cn0: checking (7 integer-address deref)
maybe-add: (7 integer-address deref)
cn0: ((9 integer) <- len (6 tagged-value-array-address deref)) nil nil
maybe-add: (6 tagged-value-array-address deref)
cn0: checking (9 integer)
maybe-add: (9 integer)
cn0: ((10 boolean) <- lt (7 integer-address deref) (9 integer)) nil nil
maybe-add: (7 integer-address deref)
maybe-add: (9 integer)
cn0: checking (10 boolean)
maybe-add: (10 boolean)
cn0: (jump-if (10 boolean) (1 offset)) nil nil
maybe-add: (10 boolean)
maybe-add: (1 offset)
cn0: ((7 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (7 integer-address deref)
maybe-add: (7 integer-address deref)
cn0: (reply (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- arg) -- nil
c{0: 2 ((2 boolean) <- empty? (1 channel-address deref)) -- ((open 2))
c{0: 3 (break-unless (2 boolean)) -- ((open 2))
c{0: 4 ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- ((open 2))
c{0: 5 (sleep (3 integer-address deref)) -- ((open 2))
c{0: 6 ((4 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- ((close 6) (open 2))
c{0: 7 ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) -- ((close 6) (open 2))
c{0: 8 ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref)) -- ((close 6) (open 2))
c{0: 9 ((4 integer-address deref) <- add (4 integer-address deref) (1 literal)) -- ((close 6) (open 2))
c{0: 10 ((8 integer) <- len (5 tagged-value-array-address deref)) -- ((open 10) (close 6) (open 2))
c{0: 11 ((9 boolean) <- lt (4 integer-address deref) (8 integer)) -- ((open 10) (close 6) (open 2))
c{0: 12 (break-if (9 boolean)) -- ((open 10) (close 6) (open 2))
c{0: 13 ((4 integer-address deref) <- copy (0 literal)) -- ((open 10) (close 6) (open 2))
c{0: 14 (reply (6 tagged-value) (1 channel-address deref)) -- ((close 14) (open 10) (close 6) (open 2))
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel-address))
c{1: 2 begin nil
c{1: 2 empty? ((2 boolean))
c{1: 3 break-unless nil
c{1: 4 get-address ((3 integer-address))
c{1: 5 sleep nil
c{1: 6 get-address ((4 integer-address))
c{1: 7 get ((5 tagged-value-array-address))
c{1: 8 index ((6 tagged-value))
c{1: 9 add ((4 integer-address deref))
c{1: 10 begin nil
c{1: 10 len ((8 integer))
c{1: 11 lt ((9 boolean))
c{1: 12 break-if nil
c{1: 13 copy ((4 integer-address deref))
c{1: 14 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- arg) nil nil
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 boolean) <- empty? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (2 boolean)
maybe-add: (2 boolean)
cn0: (jump-unless (2 boolean) (2 offset)) nil nil
maybe-add: (2 boolean)
maybe-add: (2 offset)
cn0: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (3 integer-address)
maybe-add: (3 integer-address)
cn0: (sleep (3 integer-address deref)) nil nil
maybe-add: (3 integer-address deref)
cn0: ((4 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (4 integer-address)
maybe-add: (4 integer-address)
cn0: ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (5 tagged-value-array-address)
maybe-add: (5 tagged-value-array-address)
cn0: ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref)) nil nil
maybe-add: (5 tagged-value-array-address deref)
maybe-add: (4 integer-address deref)
cn0: checking (6 tagged-value)
maybe-add: (6 tagged-value)
cn0: ((4 integer-address deref) <- add (4 integer-address deref) (1 literal)) nil nil
maybe-add: (4 integer-address deref)
maybe-add: (1 literal)
cn0: checking (4 integer-address deref)
maybe-add: (4 integer-address deref)
cn0: ((8 integer) <- len (5 tagged-value-array-address deref)) nil nil
maybe-add: (5 tagged-value-array-address deref)
cn0: checking (8 integer)
maybe-add: (8 integer)
cn0: ((9 boolean) <- lt (4 integer-address deref) (8 integer)) nil nil
maybe-add: (4 integer-address deref)
maybe-add: (8 integer)
cn0: checking (9 boolean)
maybe-add: (9 boolean)
cn0: (jump-if (9 boolean) (1 offset)) nil nil
maybe-add: (9 boolean)
maybe-add: (1 offset)
cn0: ((4 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer-address deref)
maybe-add: (4 integer-address deref)
cn0: (reply (6 tagged-value) (1 channel-address deref)) nil nil
maybe-add: (6 tagged-value)
maybe-add: (1 channel-address deref)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 integer) <- get (1 channel) (0 offset)) -- nil
c{0: 3 ((5 integer) <- get (1 channel) (1 offset)) -- nil
c{0: 4 ((6 boolean) <- eq (4 integer) (5 integer)) -- nil
c{0: 5 (reply (6 boolean)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 integer))
c{1: 3 get ((5 integer))
c{1: 4 eq ((6 boolean))
c{1: 5 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 integer) <- get (1 channel) (0 offset)) nil nil
cn0: field-access 0
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- get (1 channel) (1 offset)) nil nil
cn0: field-access 1
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((6 boolean) <- eq (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn0: (reply (6 boolean)) nil nil
maybe-add: (6 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 integer) <- get (1 channel) (1 offset)) -- nil
c{0: 3 ((4 integer) <- add (4 integer) (1 literal)) -- nil
c{0: 4 ((5 integer) <- capacity (1 channel)) -- ((open 4))
c{0: 5 ((6 boolean) <- lt (4 integer) (5 integer)) -- ((open 4))
c{0: 6 (break-if (6 boolean)) -- ((open 4))
c{0: 7 ((4 integer) <- copy (0 literal)) -- ((open 4))
c{0: 8 ((7 integer) <- get (1 channel) (0 offset)) -- ((close 8) (open 4))
c{0: 9 ((8 boolean) <- eq (7 integer) (4 integer)) -- ((close 8) (open 4))
c{0: 10 (reply (8 boolean)) -- ((close 8) (open 4))
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 integer))
c{1: 3 add ((4 integer))
c{1: 4 begin nil
c{1: 4 capacity ((5 integer))
c{1: 5 lt ((6 boolean))
c{1: 6 break-if nil
c{1: 7 copy ((4 integer))
c{1: 8 get ((7 integer))
c{1: 9 eq ((8 boolean))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 integer) <- get (1 channel) (1 offset)) nil nil
cn0: field-access 1
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((4 integer) <- add (4 integer) (1 literal)) nil nil
maybe-add: (4 integer)
maybe-add: (1 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- capacity (1 channel)) nil nil
maybe-add: (1 channel)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((6 boolean) <- lt (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn0: (jump-if (6 boolean) (1 offset)) nil nil
maybe-add: (6 boolean)
maybe-add: (1 offset)
cn0: ((4 integer) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((7 integer) <- get (1 channel) (0 offset)) nil nil
cn0: field-access 0
cn0: checking (7 integer)
maybe-add: (7 integer)
cn0: ((8 boolean) <- eq (7 integer) (4 integer)) nil nil
maybe-add: (7 integer)
maybe-add: (4 integer)
cn0: checking (8 boolean)
maybe-add: (8 boolean)
cn0: (reply (8 boolean)) nil nil
maybe-add: (8 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 tagged-value-array-address) <- get (1 channel) (2 offset)) -- nil
c{0: 3 ((5 integer) <- len (4 tagged-value-array-address deref)) -- nil
c{0: 4 (reply (5 integer)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 tagged-value-array-address))
c{1: 3 len ((5 integer))
c{1: 4 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 tagged-value-array-address) <- get (1 channel) (2 offset)) nil nil
cn0: field-access 2
cn0: checking (4 tagged-value-array-address)
maybe-add: (4 tagged-value-array-address)
cn0: ((5 integer) <- len (4 tagged-value-array-address deref)) nil nil
maybe-add: (4 tagged-value-array-address deref)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: (reply (5 integer)) nil nil
maybe-add: (5 integer)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 integer) <- get (1 channel) (0 offset)) -- nil
c{0: 3 ((5 integer) <- get (1 channel) (1 offset)) -- nil
c{0: 4 ((6 boolean) <- eq (4 integer) (5 integer)) -- nil
c{0: 5 (reply (6 boolean)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 integer))
c{1: 3 get ((5 integer))
c{1: 4 eq ((6 boolean))
c{1: 5 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 integer) <- get (1 channel) (0 offset)) nil nil
cn0: field-access 0
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- get (1 channel) (1 offset)) nil nil
cn0: field-access 1
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((6 boolean) <- eq (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn0: (reply (6 boolean)) nil nil
maybe-add: (6 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 integer) <- get (1 channel) (1 offset)) -- nil
c{0: 3 ((4 integer) <- add (4 integer) (1 literal)) -- nil
c{0: 4 ((5 integer) <- capacity (1 channel)) -- nil
c{0: 5 ((6 boolean) <- lt (4 integer) (5 integer)) -- nil
c{0: 6 (jump-if (6 boolean) (1 offset)) -- nil
c{0: 7 ((4 integer) <- copy (0 literal)) -- nil
c{0: 8 ((7 integer) <- get (1 channel) (0 offset)) -- nil
c{0: 9 ((8 boolean) <- eq (7 integer) (4 integer)) -- nil
c{0: 10 (reply (8 boolean)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 integer))
c{1: 3 add ((4 integer))
c{1: 4 capacity ((5 integer))
c{1: 5 lt ((6 boolean))
c{1: 6 jump-if nil
c{1: 7 copy ((4 integer))
c{1: 8 get ((7 integer))
c{1: 9 eq ((8 boolean))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 integer) <- get (1 channel) (1 offset)) nil nil
cn0: field-access 1
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((4 integer) <- add (4 integer) (1 literal)) nil nil
maybe-add: (4 integer)
maybe-add: (1 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- capacity (1 channel)) nil nil
maybe-add: (1 channel)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((6 boolean) <- lt (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn0: (jump-if (6 boolean) (1 offset)) nil nil
maybe-add: (6 boolean)
maybe-add: (1 offset)
cn0: ((4 integer) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((7 integer) <- get (1 channel) (0 offset)) nil nil
cn0: field-access 0
cn0: checking (7 integer)
maybe-add: (7 integer)
cn0: ((8 boolean) <- eq (7 integer) (4 integer)) nil nil
maybe-add: (7 integer)
maybe-add: (4 integer)
cn0: checking (8 boolean)
maybe-add: (8 boolean)
cn0: (reply (8 boolean)) nil nil
maybe-add: (8 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- arg) -- nil
c{0: 2 ((2 list-address) <- get (1 list-address deref) (1 offset)) -- nil
c{0: 3 (reply (2 list-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 list-address))
c{1: 2 get ((2 list-address))
c{1: 3 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- arg) nil nil
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 list-address) <- get (1 list-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: (reply (2 list-address)) nil nil
maybe-add: (2 list-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- arg) -- nil
c{0: 2 ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset)) -- nil
c{0: 3 (reply (2 tagged-value-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 list-address))
c{1: 2 get-address ((2 tagged-value-address))
c{1: 3 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- arg) nil nil
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (2 tagged-value-address)
maybe-add: (2 tagged-value-address)
cn0: (reply (2 tagged-value-address)) nil nil
maybe-add: (2 tagged-value-address)
cn1: update names nil nil
c{0: 0 ((1 integer) <- new-list (3 literal) (4 literal) (5 literal)) -- nil
c{1: 0 new-list ((1 integer))
cn0: ((1 integer) <- new-list (3 literal) (4 literal) (5 literal)) nil nil
maybe-add: (3 literal)
maybe-add: (4 literal)
maybe-add: (5 literal)
cn0: checking (1 integer)
maybe-add: (1 integer)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 tagged-value-address) <- new (tagged-value literal)) -- nil
c{0: 2 ((1 tagged-value-address deref) <- arg) -- nil
c{0: 3 ((2 type) <- arg) -- nil
c{0: 4 ((3 type) <- get (1 tagged-value-address deref) (0 offset)) -- nil
c{0: 5 ((4 boolean) <- eq (3 type) (2 type)) -- nil
c{0: 6 (jump-if (4 boolean) (1 offset)) -- nil
c{0: 7 (reply (0 literal) (nil literal)) -- nil
c{0: 8 ((5 location) <- get (1 tagged-value-address deref) (1 offset)) -- nil
c{0: 9 (reply (5 location) (4 boolean)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 tagged-value-address))
c{1: 2 arg ((1 tagged-value-address deref))
c{1: 3 arg ((2 type))
c{1: 4 get ((3 type))
c{1: 5 eq ((4 boolean))
c{1: 6 jump-if nil
c{1: 7 reply nil
c{1: 8 get ((5 location))
c{1: 9 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 tagged-value-address) <- new (tagged-value literal)) nil nil
maybe-add: (tagged-value literal)
cn0: checking (1 tagged-value-address)
maybe-add: (1 tagged-value-address)
cn0: ((1 tagged-value-address deref) <- arg) nil nil
cn0: checking (1 tagged-value-address deref)
maybe-add: (1 tagged-value-address deref)
cn0: ((2 type) <- arg) nil nil
cn0: checking (2 type)
maybe-add: (2 type)
cn0: ((3 type) <- get (1 tagged-value-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (3 type)
maybe-add: (3 type)
cn0: ((4 boolean) <- eq (3 type) (2 type)) nil nil
maybe-add: (3 type)
maybe-add: (2 type)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-if (4 boolean) (1 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (1 offset)
cn0: (reply (0 literal) (nil literal)) nil nil
maybe-add: (0 literal)
maybe-add: (nil literal)
cn0: ((5 location) <- get (1 tagged-value-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (5 location)
maybe-add: (5 location)
cn0: (reply (5 location) (4 boolean)) nil nil
maybe-add: (5 location)
maybe-add: (4 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- new (channel literal)) -- nil
c{0: 2 ((2 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- nil
c{0: 3 ((2 integer-address deref) <- copy (0 literal)) -- nil
c{0: 4 ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- nil
c{0: 5 ((3 integer-address deref) <- copy (0 literal)) -- nil
c{0: 6 ((4 integer) <- arg) -- nil
c{0: 7 ((4 integer) <- add (4 integer) (1 literal)) -- nil
c{0: 8 ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset)) -- nil
c{0: 9 ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer)) -- nil
c{0: 10 (reply (1 channel-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 channel-address))
c{1: 2 get-address ((2 integer-address))
c{1: 3 copy ((2 integer-address deref))
c{1: 4 get-address ((3 integer-address))
c{1: 5 copy ((3 integer-address deref))
c{1: 6 arg ((4 integer))
c{1: 7 add ((4 integer))
c{1: 8 get-address ((5 tagged-value-array-address-address))
c{1: 9 new ((5 tagged-value-array-address-address deref))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- new (channel literal)) nil nil
maybe-add: (channel literal)
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (2 integer-address)
maybe-add: (2 integer-address)
cn0: ((2 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (2 integer-address deref)
maybe-add: (2 integer-address deref)
cn0: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (3 integer-address)
maybe-add: (3 integer-address)
cn0: ((3 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (3 integer-address deref)
maybe-add: (3 integer-address deref)
cn0: ((4 integer) <- arg) nil nil
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((4 integer) <- add (4 integer) (1 literal)) nil nil
maybe-add: (4 integer)
maybe-add: (1 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (5 tagged-value-array-address-address)
maybe-add: (5 tagged-value-array-address-address)
cn0: ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer)) nil nil
maybe-add: (tagged-value-array literal)
maybe-add: (4 integer)
cn0: checking (5 tagged-value-array-address-address deref)
maybe-add: (5 tagged-value-array-address-address deref)
cn0: (reply (1 channel-address)) nil nil
maybe-add: (1 channel-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- new (list literal)) -- nil
c{0: 2 ((2 list-address) <- copy (1 list-address)) -- nil
c{0: 3 ((3 integer) (4 boolean) <- arg) -- nil
c{0: 4 (jump-unless (4 boolean) (6 offset)) -- nil
c{0: 5 ((5 list-address-address) <- get-address (2 list-address deref) (1 offset)) -- nil
c{0: 6 ((5 list-address-address deref) <- new (list literal)) -- nil
c{0: 7 ((2 list-address) <- list-next (2 list-address)) -- nil
c{0: 8 ((6 tagged-value-address) <- list-value-address (2 list-address)) -- nil
c{0: 9 ((6 tagged-value-address deref) <- save-type (3 integer)) -- nil
c{0: 10 (jump (-8 offset)) -- nil
c{0: 11 ((1 list-address) <- list-next (1 list-address)) -- nil
c{0: 12 (reply (1 list-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 list-address))
c{1: 2 copy ((2 list-address))
c{1: 3 arg ((3 integer) (4 boolean))
c{1: 4 jump-unless nil
c{1: 5 get-address ((5 list-address-address))
c{1: 6 new ((5 list-address-address deref))
c{1: 7 list-next ((2 list-address))
c{1: 8 list-value-address ((6 tagged-value-address))
c{1: 9 save-type ((6 tagged-value-address deref))
c{1: 10 jump nil
c{1: 11 list-next ((1 list-address))
c{1: 12 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- new (list literal)) nil nil
maybe-add: (list literal)
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 list-address) <- copy (1 list-address)) nil nil
maybe-add: (1 list-address)
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: ((3 integer) (4 boolean) <- arg) nil nil
cn0: checking (3 integer)
maybe-add: (3 integer)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-unless (4 boolean) (6 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (6 offset)
cn0: ((5 list-address-address) <- get-address (2 list-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (5 list-address-address)
maybe-add: (5 list-address-address)
cn0: ((5 list-address-address deref) <- new (list literal)) nil nil
maybe-add: (list literal)
cn0: checking (5 list-address-address deref)
maybe-add: (5 list-address-address deref)
cn0: ((2 list-address) <- list-next (2 list-address)) nil nil
maybe-add: (2 list-address)
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: ((6 tagged-value-address) <- list-value-address (2 list-address)) nil nil
maybe-add: (2 list-address)
cn0: checking (6 tagged-value-address)
maybe-add: (6 tagged-value-address)
cn0: ((6 tagged-value-address deref) <- save-type (3 integer)) nil nil
maybe-add: (3 integer)
cn0: checking (6 tagged-value-address deref)
maybe-add: (6 tagged-value-address deref)
cn0: (jump (-8 offset)) nil nil
maybe-add: (-8 offset)
cn0: ((1 list-address) <- list-next (1 list-address)) nil nil
maybe-add: (1 list-address)
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: (reply (1 list-address)) nil nil
maybe-add: (1 list-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 type) <- arg) -- nil
c{0: 2 ((2 integer) <- sizeof (1 type)) -- nil
c{0: 3 ((3 boolean) <- eq (2 integer) (1 literal)) -- nil
c{0: 4 (assert (3 boolean)) -- nil
c{0: 5 ((4 tagged-value-address) <- new (tagged-value literal)) -- nil
c{0: 6 ((5 location) <- get-address (4 tagged-value-address deref) (0 offset)) -- nil
c{0: 7 ((5 location deref) <- copy (1 type)) -- nil
c{0: 8 ((6 location) <- get-address (4 tagged-value-address deref) (1 offset)) -- nil
c{0: 9 ((6 location deref) <- arg) -- nil
c{0: 10 (reply (4 tagged-value-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 type))
c{1: 2 sizeof ((2 integer))
c{1: 3 eq ((3 boolean))
c{1: 4 assert nil
c{1: 5 new ((4 tagged-value-address))
c{1: 6 get-address ((5 location))
c{1: 7 copy ((5 location deref))
c{1: 8 get-address ((6 location))
c{1: 9 arg ((6 location deref))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 type) <- arg) nil nil
cn0: checking (1 type)
maybe-add: (1 type)
cn0: ((2 integer) <- sizeof (1 type)) nil nil
maybe-add: (1 type)
cn0: checking (2 integer)
maybe-add: (2 integer)
cn0: ((3 boolean) <- eq (2 integer) (1 literal)) nil nil
maybe-add: (2 integer)
maybe-add: (1 literal)
cn0: checking (3 boolean)
maybe-add: (3 boolean)
cn0: (assert (3 boolean)) nil nil
maybe-add: (3 boolean)
cn0: ((4 tagged-value-address) <- new (tagged-value literal)) nil nil
maybe-add: (tagged-value literal)
cn0: checking (4 tagged-value-address)
maybe-add: (4 tagged-value-address)
cn0: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (5 location)
maybe-add: (5 location)
cn0: ((5 location deref) <- copy (1 type)) nil nil
maybe-add: (1 type)
cn0: checking (5 location deref)
maybe-add: (5 location deref)
cn0: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (6 location)
maybe-add: (6 location)
cn0: ((6 location deref) <- arg) nil nil
cn0: checking (6 location deref)
maybe-add: (6 location deref)
cn0: (reply (4 tagged-value-address)) nil nil
maybe-add: (4 tagged-value-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- arg) -- nil
c{0: 2 ((2 boolean) <- empty? (1 channel-address deref)) -- nil
c{0: 3 (jump-unless (2 boolean) (2 offset)) -- nil
c{0: 4 ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- nil
c{0: 5 (sleep (3 integer-address deref)) -- nil
c{0: 6 ((4 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- nil
c{0: 7 ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) -- nil
c{0: 8 ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref)) -- nil
c{0: 9 ((4 integer-address deref) <- add (4 integer-address deref) (1 literal)) -- nil
c{0: 10 ((8 integer) <- len (5 tagged-value-array-address deref)) -- nil
c{0: 11 ((9 boolean) <- lt (4 integer-address deref) (8 integer)) -- nil
c{0: 12 (jump-if (9 boolean) (1 offset)) -- nil
c{0: 13 ((4 integer-address deref) <- copy (0 literal)) -- nil
c{0: 14 (reply (6 tagged-value) (1 channel-address deref)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel-address))
c{1: 2 empty? ((2 boolean))
c{1: 3 jump-unless nil
c{1: 4 get-address ((3 integer-address))
c{1: 5 sleep nil
c{1: 6 get-address ((4 integer-address))
c{1: 7 get ((5 tagged-value-array-address))
c{1: 8 index ((6 tagged-value))
c{1: 9 add ((4 integer-address deref))
c{1: 10 len ((8 integer))
c{1: 11 lt ((9 boolean))
c{1: 12 jump-if nil
c{1: 13 copy ((4 integer-address deref))
c{1: 14 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- arg) nil nil
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 boolean) <- empty? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (2 boolean)
maybe-add: (2 boolean)
cn0: (jump-unless (2 boolean) (2 offset)) nil nil
maybe-add: (2 boolean)
maybe-add: (2 offset)
cn0: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (3 integer-address)
maybe-add: (3 integer-address)
cn0: (sleep (3 integer-address deref)) nil nil
maybe-add: (3 integer-address deref)
cn0: ((4 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (4 integer-address)
maybe-add: (4 integer-address)
cn0: ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (5 tagged-value-array-address)
maybe-add: (5 tagged-value-array-address)
cn0: ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref)) nil nil
maybe-add: (5 tagged-value-array-address deref)
maybe-add: (4 integer-address deref)
cn0: checking (6 tagged-value)
maybe-add: (6 tagged-value)
cn0: ((4 integer-address deref) <- add (4 integer-address deref) (1 literal)) nil nil
maybe-add: (4 integer-address deref)
maybe-add: (1 literal)
cn0: checking (4 integer-address deref)
maybe-add: (4 integer-address deref)
cn0: ((8 integer) <- len (5 tagged-value-array-address deref)) nil nil
maybe-add: (5 tagged-value-array-address deref)
cn0: checking (8 integer)
maybe-add: (8 integer)
cn0: ((9 boolean) <- lt (4 integer-address deref) (8 integer)) nil nil
maybe-add: (4 integer-address deref)
maybe-add: (8 integer)
cn0: checking (9 boolean)
maybe-add: (9 boolean)
cn0: (jump-if (9 boolean) (1 offset)) nil nil
maybe-add: (9 boolean)
maybe-add: (1 offset)
cn0: ((4 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer-address deref)
maybe-add: (4 integer-address deref)
cn0: (reply (6 tagged-value) (1 channel-address deref)) nil nil
maybe-add: (6 tagged-value)
maybe-add: (1 channel-address deref)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- arg) -- nil
c{0: 2 ((2 tagged-value) <- arg) -- nil
c{0: 3 ((4 boolean) <- full? (1 channel-address deref)) -- nil
c{0: 4 (jump-unless (4 boolean) (2 offset)) -- nil
c{0: 5 ((5 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- nil
c{0: 6 (sleep (5 integer-address deref)) -- nil
c{0: 7 ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) -- nil
c{0: 8 ((7 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- nil
c{0: 9 ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref)) -- nil
c{0: 10 ((8 tagged-value-address deref) <- copy (2 tagged-value)) -- nil
c{0: 11 ((7 integer-address deref) <- add (7 integer-address deref) (1 literal)) -- nil
c{0: 12 ((9 integer) <- len (6 tagged-value-array-address deref)) -- nil
c{0: 13 ((10 boolean) <- lt (7 integer-address deref) (9 integer)) -- nil
c{0: 14 (jump-if (10 boolean) (1 offset)) -- nil
c{0: 15 ((7 integer-address deref) <- copy (0 literal)) -- nil
c{0: 16 (reply (1 channel-address deref)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel-address))
c{1: 2 arg ((2 tagged-value))
c{1: 3 full? ((4 boolean))
c{1: 4 jump-unless nil
c{1: 5 get-address ((5 integer-address))
c{1: 6 sleep nil
c{1: 7 get ((6 tagged-value-array-address))
c{1: 8 get-address ((7 integer-address))
c{1: 9 index-address ((8 tagged-value-address))
c{1: 10 copy ((8 tagged-value-address deref))
c{1: 11 add ((7 integer-address deref))
c{1: 12 len ((9 integer))
c{1: 13 lt ((10 boolean))
c{1: 14 jump-if nil
c{1: 15 copy ((7 integer-address deref))
c{1: 16 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- arg) nil nil
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 tagged-value) <- arg) nil nil
cn0: checking (2 tagged-value)
maybe-add: (2 tagged-value)
cn0: ((4 boolean) <- full? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-unless (4 boolean) (2 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (2 offset)
cn0: ((5 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (5 integer-address)
maybe-add: (5 integer-address)
cn0: (sleep (5 integer-address deref)) nil nil
maybe-add: (5 integer-address deref)
cn0: ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (6 tagged-value-array-address)
maybe-add: (6 tagged-value-array-address)
cn0: ((7 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (7 integer-address)
maybe-add: (7 integer-address)
cn0: ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref)) nil nil
maybe-add: (6 tagged-value-array-address deref)
maybe-add: (7 integer-address deref)
cn0: checking (8 tagged-value-address)
maybe-add: (8 tagged-value-address)
cn0: ((8 tagged-value-address deref) <- copy (2 tagged-value)) nil nil
maybe-add: (2 tagged-value)
cn0: checking (8 tagged-value-address deref)
maybe-add: (8 tagged-value-address deref)
cn0: ((7 integer-address deref) <- add (7 integer-address deref) (1 literal)) nil nil
maybe-add: (7 integer-address deref)
maybe-add: (1 literal)
cn0: checking (7 integer-address deref)
maybe-add: (7 integer-address deref)
cn0: ((9 integer) <- len (6 tagged-value-array-address deref)) nil nil
maybe-add: (6 tagged-value-array-address deref)
cn0: checking (9 integer)
maybe-add: (9 integer)
cn0: ((10 boolean) <- lt (7 integer-address deref) (9 integer)) nil nil
maybe-add: (7 integer-address deref)
maybe-add: (9 integer)
cn0: checking (10 boolean)
maybe-add: (10 boolean)
cn0: (jump-if (10 boolean) (1 offset)) nil nil
maybe-add: (10 boolean)
maybe-add: (1 offset)
cn0: ((7 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (7 integer-address deref)
maybe-add: (7 integer-address deref)
cn0: (reply (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn1: update names nil nil
schedule: main
run: -- nil
run: 1 main 0: ((1 integer) <- new-list (3 literal) (4 literal) (5 literal))
run: -- nil
run: 2 new-list 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: 3 new-list 1: ((1 list-address) <- new (list literal))
sizeof: list
sizeof: tagged-value
sizeof: type
sizeof: location
sizeof: list-address
run: 1031 => (1 list-address)
setm: (1 list-address) <= 1031
sz: (1 list-address)
addr: (1 list-address)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1001 to 1031
run: -- ((1000 30) (1001 1031))
run: 4 new-list 2: ((2 list-address) <- copy (1 list-address))
m: (1 list-address)
sz: (1 list-address)
addr: (1 list-address)
addr: initial result: 1
addr: incrementing by 1000
run: 1031 => (2 list-address)
setm: (2 list-address) <= 1031
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1002 to 1031
run: -- ((1000 30) (1001 1031) (1002 1031))
run: 5 new-list 3: ((3 integer) (4 boolean) <- arg)
arg: nil 0 (3 4 5)
run: 3 => (3 integer)
setm: (3 integer) <= 3
sz: (3 integer)
addr: (3 integer)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 integer) is 1
setm: (3 integer): setting 1003 to 3
run: t => (4 boolean)
setm: (4 boolean) <= t
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1004 to t
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t))
run: 6 new-list 4: (jump-unless (4 boolean) (6 offset))
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1000
jump: checking that t is not t
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t))
run: 7 new-list 5: ((5 list-address-address) <- get-address (2 list-address deref) (1 offset))
record-info: (2 list-address deref) (1 offset)
addr: (2 list-address deref)
addr: initial result: 2
addr: incrementing by 1000
addr: deref 1002 => 1031
record-info: initial base 1031 type ((address t) (elem list) (size 1))
record-info: (2 list-address deref) requests deref => ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get-address: (2 list-address deref) (1 offset) => 1033
run: 1033 => (5 list-address-address)
setm: (5 list-address-address) <= 1033
sz: (5 list-address-address)
addr: (5 list-address-address)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 list-address-address) is 1
setm: (5 list-address-address): setting 1005 to 1033
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t) (1005 1033))
run: 8 new-list 6: ((5 list-address-address deref) <- new (list literal))
sizeof: list
sizeof: tagged-value
sizeof: type
sizeof: location
sizeof: list-address
run: 1034 => (5 list-address-address deref)
setm: (5 list-address-address deref) <= 1034
sz: (5 list-address-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1033 list-address)
addr: (5 list-address-address deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1033
setm: size of (5 list-address-address deref) is 1
setm: (5 list-address-address deref): setting 1033 to 1034
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t) (1005 1033) (1033 1034))
run: 9 new-list 7: ((2 list-address) <- list-next (2 list-address))
m: (2 list-address)
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1000
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t) (1005 1033) (1033 1034))
run: 10 list-next 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1037 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30))
run: 11 list-next 1: ((1 list-address) <- arg)
arg: nil 0 (1031)
run: 1031 => (1 list-address)
setm: (1 list-address) <= 1031
sz: (1 list-address)
addr: (1 list-address)
addr: initial result: 1
addr: incrementing by 1037
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1038 to 1031
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031))
run: 12 list-next 2: ((2 list-address) <- get (1 list-address deref) (1 offset))
record-info: (1 list-address deref) (1 offset)
addr: (1 list-address deref)
addr: initial result: 1
addr: incrementing by 1037
addr: deref 1038 => 1031
record-info: initial base 1031 type ((address t) (elem list) (size 1))
record-info: (1 list-address deref) requests deref => ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get: (1 list-address deref) (1 offset) => 1033 list-address
m: (1033 list-address global)
sz: (1033 list-address global)
addr: (1033 list-address global)
addr: initial result: 1033
run: 1034 => (2 list-address)
setm: (2 list-address) <= 1034
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1037
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1039 to 1034
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031) (1039 1034))
run: 13 list-next 3: (reply (2 list-address))
m: (2 list-address)
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1037
reply: ((2 list-address)) ((2 list-address))
reply: 1034 => (2 list-address)
setm: (2 list-address) <= 1034
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1002 to 1034
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031) (1039 1034))
run: 14 new-list 8: ((6 tagged-value-address) <- list-value-address (2 list-address))
m: (2 list-address)
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1000
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031) (1039 1034))
run: 15 list-value-address 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1068 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031) (1039 1034) (1068 30))
run: 16 list-value-address 1: ((1 list-address) <- arg)
arg: nil 0 (1034)
run: 1034 => (1 list-address)
setm: (1 list-address) <= 1034
sz: (1 list-address)
addr: (1 list-address)
addr: initial result: 1
addr: incrementing by 1068
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1069 to 1034
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034))
run: 17 list-value-address 2: ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset))
record-info: (1 list-address deref) (0 offset)
addr: (1 list-address deref)
addr: initial result: 1
addr: incrementing by 1068
addr: deref 1069 => 1034
record-info: initial base 1034 type ((address t) (elem list) (size 1))
record-info: (1 list-address deref) requests deref => ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get-address: (1 list-address deref) (0 offset) => 1034
run: 1034 => (2 tagged-value-address)
setm: (2 tagged-value-address) <= 1034
sz: (2 tagged-value-address)
addr: (2 tagged-value-address)
addr: initial result: 2
addr: incrementing by 1068
setm: size of (2 tagged-value-address) is 1
setm: (2 tagged-value-address): setting 1070 to 1034
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1033 1034) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 18 list-value-address 3: (reply (2 tagged-value-address))
m: (2 tagged-value-address)
sz: (2 tagged-value-address)
addr: (2 tagged-value-address)
addr: initial result: 2
addr: incrementing by 1068
reply: ((2 tagged-value-address)) ((6 tagged-value-address))
reply: 1034 => (6 tagged-value-address)
setm: (6 tagged-value-address) <= 1034
sz: (6 tagged-value-address)
addr: (6 tagged-value-address)
addr: initial result: 6
addr: incrementing by 1000
setm: size of (6 tagged-value-address) is 1
setm: (6 tagged-value-address): setting 1006 to 1034
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1006 1034) (1033 1034) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 19 new-list 9: ((6 tagged-value-address deref) <- save-type (3 integer))
m: (3 integer)
sz: (3 integer)
addr: (3 integer)
addr: initial result: 3
addr: incrementing by 1000
run: #(tagged record (integer 3)) => (6 tagged-value-address deref)
setm: (6 tagged-value-address deref) <= #(tagged record (integer 3))
sz: (6 tagged-value-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1000
sz: (1034 tagged-value)
addr: (6 tagged-value-address deref)
addr: initial result: 6
addr: incrementing by 1000
addr: deref 1006 => 1034
setm: size of (6 tagged-value-address deref) is 2
setm: (6 tagged-value-address deref): setting 1034 to integer
setm: (6 tagged-value-address deref): setting 1035 to 3
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 20 new-list 10: (jump (-8 offset))
jump: jumping to 3
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 3) (1004 t) (1005 1033) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 21 new-list 3: ((3 integer) (4 boolean) <- arg)
arg: nil 1 (3 4 5)
run: 4 => (3 integer)
setm: (3 integer) <= 4
sz: (3 integer)
addr: (3 integer)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 integer) is 1
setm: (3 integer): setting 1003 to 4
run: t => (4 boolean)
setm: (4 boolean) <= t
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1004 to t
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1033) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 22 new-list 4: (jump-unless (4 boolean) (6 offset))
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1000
jump: checking that t is not t
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1033) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 23 new-list 5: ((5 list-address-address) <- get-address (2 list-address deref) (1 offset))
record-info: (2 list-address deref) (1 offset)
addr: (2 list-address deref)
addr: initial result: 2
addr: incrementing by 1000
addr: deref 1002 => 1034
record-info: initial base 1034 type ((address t) (elem list) (size 1))
record-info: (2 list-address deref) requests deref => ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get-address: (2 list-address deref) (1 offset) => 1036
run: 1036 => (5 list-address-address)
setm: (5 list-address-address) <= 1036
sz: (5 list-address-address)
addr: (5 list-address-address)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 list-address-address) is 1
setm: (5 list-address-address): setting 1005 to 1036
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 24 new-list 6: ((5 list-address-address deref) <- new (list literal))
sizeof: list
sizeof: tagged-value
sizeof: type
sizeof: location
sizeof: list-address
run: 1099 => (5 list-address-address deref)
setm: (5 list-address-address deref) <= 1099
sz: (5 list-address-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1036 list-address)
addr: (5 list-address-address deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1036
setm: size of (5 list-address-address deref) is 1
setm: (5 list-address-address deref): setting 1036 to 1099
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 25 new-list 7: ((2 list-address) <- list-next (2 list-address))
m: (2 list-address)
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1000
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034))
run: 26 list-next 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1102 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30))
run: 27 list-next 1: ((1 list-address) <- arg)
arg: nil 0 (1034)
run: 1034 => (1 list-address)
setm: (1 list-address) <= 1034
sz: (1 list-address)
addr: (1 list-address)
addr: initial result: 1
addr: incrementing by 1102
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1103 to 1034
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034))
run: 28 list-next 2: ((2 list-address) <- get (1 list-address deref) (1 offset))
record-info: (1 list-address deref) (1 offset)
addr: (1 list-address deref)
addr: initial result: 1
addr: incrementing by 1102
addr: deref 1103 => 1034
record-info: initial base 1034 type ((address t) (elem list) (size 1))
record-info: (1 list-address deref) requests deref => ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get: (1 list-address deref) (1 offset) => 1036 list-address
m: (1036 list-address global)
sz: (1036 list-address global)
addr: (1036 list-address global)
addr: initial result: 1036
run: 1099 => (2 list-address)
setm: (2 list-address) <= 1099
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1102
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1104 to 1099
run: -- ((1000 30) (1001 1031) (1002 1034) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099))
run: 29 list-next 3: (reply (2 list-address))
m: (2 list-address)
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1102
reply: ((2 list-address)) ((2 list-address))
reply: 1099 => (2 list-address)
setm: (2 list-address) <= 1099
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1002 to 1099
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099))
run: 30 new-list 8: ((6 tagged-value-address) <- list-value-address (2 list-address))
m: (2 list-address)
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1000
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099))
run: 31 list-value-address 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1133 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099) (1133 30))
run: 32 list-value-address 1: ((1 list-address) <- arg)
arg: nil 0 (1099)
run: 1099 => (1 list-address)
setm: (1 list-address) <= 1099
sz: (1 list-address)
addr: (1 list-address)
addr: initial result: 1
addr: incrementing by 1133
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1134 to 1099
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099))
run: 33 list-value-address 2: ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset))
record-info: (1 list-address deref) (0 offset)
addr: (1 list-address deref)
addr: initial result: 1
addr: incrementing by 1133
addr: deref 1134 => 1099
record-info: initial base 1099 type ((address t) (elem list) (size 1))
record-info: (1 list-address deref) requests deref => ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get-address: (1 list-address deref) (0 offset) => 1099
run: 1099 => (2 tagged-value-address)
setm: (2 tagged-value-address) <= 1099
sz: (2 tagged-value-address)
addr: (2 tagged-value-address)
addr: initial result: 2
addr: incrementing by 1133
setm: size of (2 tagged-value-address) is 1
setm: (2 tagged-value-address): setting 1135 to 1099
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1034) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 34 list-value-address 3: (reply (2 tagged-value-address))
m: (2 tagged-value-address)
sz: (2 tagged-value-address)
addr: (2 tagged-value-address)
addr: initial result: 2
addr: incrementing by 1133
reply: ((2 tagged-value-address)) ((6 tagged-value-address))
reply: 1099 => (6 tagged-value-address)
setm: (6 tagged-value-address) <= 1099
sz: (6 tagged-value-address)
addr: (6 tagged-value-address)
addr: initial result: 6
addr: incrementing by 1000
setm: size of (6 tagged-value-address) is 1
setm: (6 tagged-value-address): setting 1006 to 1099
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 35 new-list 9: ((6 tagged-value-address deref) <- save-type (3 integer))
m: (3 integer)
sz: (3 integer)
addr: (3 integer)
addr: initial result: 3
addr: incrementing by 1000
run: #(tagged record (integer 4)) => (6 tagged-value-address deref)
setm: (6 tagged-value-address deref) <= #(tagged record (integer 4))
sz: (6 tagged-value-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1000
sz: (1099 tagged-value)
addr: (6 tagged-value-address deref)
addr: initial result: 6
addr: incrementing by 1000
addr: deref 1006 => 1099
setm: size of (6 tagged-value-address deref) is 2
setm: (6 tagged-value-address deref): setting 1099 to integer
setm: (6 tagged-value-address deref): setting 1100 to 4
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 36 new-list 10: (jump (-8 offset))
jump: jumping to 3
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 4) (1004 t) (1005 1036) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 37 new-list 3: ((3 integer) (4 boolean) <- arg)
arg: nil 2 (3 4 5)
run: 5 => (3 integer)
setm: (3 integer) <= 5
sz: (3 integer)
addr: (3 integer)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 integer) is 1
setm: (3 integer): setting 1003 to 5
run: t => (4 boolean)
setm: (4 boolean) <= t
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1004 to t
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1036) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 38 new-list 4: (jump-unless (4 boolean) (6 offset))
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1000
jump: checking that t is not t
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1036) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 39 new-list 5: ((5 list-address-address) <- get-address (2 list-address deref) (1 offset))
record-info: (2 list-address deref) (1 offset)
addr: (2 list-address deref)
addr: initial result: 2
addr: incrementing by 1000
addr: deref 1002 => 1099
record-info: initial base 1099 type ((address t) (elem list) (size 1))
record-info: (2 list-address deref) requests deref => ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get-address: (2 list-address deref) (1 offset) => 1101
run: 1101 => (5 list-address-address)
setm: (5 list-address-address) <= 1101
sz: (5 list-address-address)
addr: (5 list-address-address)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 list-address-address) is 1
setm: (5 list-address-address): setting 1005 to 1101
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 40 new-list 6: ((5 list-address-address deref) <- new (list literal))
sizeof: list
sizeof: tagged-value
sizeof: type
sizeof: location
sizeof: list-address
run: 1164 => (5 list-address-address deref)
setm: (5 list-address-address deref) <= 1164
sz: (5 list-address-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1101 list-address)
addr: (5 list-address-address deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1101
setm: size of (5 list-address-address deref) is 1
setm: (5 list-address-address deref): setting 1101 to 1164
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 41 new-list 7: ((2 list-address) <- list-next (2 list-address))
m: (2 list-address)
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1000
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099))
run: 42 list-next 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1167 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30))
run: 43 list-next 1: ((1 list-address) <- arg)
arg: nil 0 (1099)
run: 1099 => (1 list-address)
setm: (1 list-address) <= 1099
sz: (1 list-address)
addr: (1 list-address)
addr: initial result: 1
addr: incrementing by 1167
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1168 to 1099
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099))
run: 44 list-next 2: ((2 list-address) <- get (1 list-address deref) (1 offset))
record-info: (1 list-address deref) (1 offset)
addr: (1 list-address deref)
addr: initial result: 1
addr: incrementing by 1167
addr: deref 1168 => 1099
record-info: initial base 1099 type ((address t) (elem list) (size 1))
record-info: (1 list-address deref) requests deref => ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get: (1 list-address deref) (1 offset) => 1101 list-address
m: (1101 list-address global)
sz: (1101 list-address global)
addr: (1101 list-address global)
addr: initial result: 1101
run: 1164 => (2 list-address)
setm: (2 list-address) <= 1164
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1167
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1169 to 1164
run: -- ((1000 30) (1001 1031) (1002 1099) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164))
run: 45 list-next 3: (reply (2 list-address))
m: (2 list-address)
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1167
reply: ((2 list-address)) ((2 list-address))
reply: 1164 => (2 list-address)
setm: (2 list-address) <= 1164
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1002 to 1164
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164))
run: 46 new-list 8: ((6 tagged-value-address) <- list-value-address (2 list-address))
m: (2 list-address)
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1000
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164))
run: 47 list-value-address 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1198 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164) (1198 30))
run: 48 list-value-address 1: ((1 list-address) <- arg)
arg: nil 0 (1164)
run: 1164 => (1 list-address)
setm: (1 list-address) <= 1164
sz: (1 list-address)
addr: (1 list-address)
addr: initial result: 1
addr: incrementing by 1198
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1199 to 1164
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164))
run: 49 list-value-address 2: ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset))
record-info: (1 list-address deref) (0 offset)
addr: (1 list-address deref)
addr: initial result: 1
addr: incrementing by 1198
addr: deref 1199 => 1164
record-info: initial base 1164 type ((address t) (elem list) (size 1))
record-info: (1 list-address deref) requests deref => ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get-address: (1 list-address deref) (0 offset) => 1164
run: 1164 => (2 tagged-value-address)
setm: (2 tagged-value-address) <= 1164
sz: (2 tagged-value-address)
addr: (2 tagged-value-address)
addr: initial result: 2
addr: incrementing by 1198
setm: size of (2 tagged-value-address) is 1
setm: (2 tagged-value-address): setting 1200 to 1164
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1099) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 50 list-value-address 3: (reply (2 tagged-value-address))
m: (2 tagged-value-address)
sz: (2 tagged-value-address)
addr: (2 tagged-value-address)
addr: initial result: 2
addr: incrementing by 1198
reply: ((2 tagged-value-address)) ((6 tagged-value-address))
reply: 1164 => (6 tagged-value-address)
setm: (6 tagged-value-address) <= 1164
sz: (6 tagged-value-address)
addr: (6 tagged-value-address)
addr: initial result: 6
addr: incrementing by 1000
setm: size of (6 tagged-value-address) is 1
setm: (6 tagged-value-address): setting 1006 to 1164
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 51 new-list 9: ((6 tagged-value-address deref) <- save-type (3 integer))
m: (3 integer)
sz: (3 integer)
addr: (3 integer)
addr: initial result: 3
addr: incrementing by 1000
run: #(tagged record (integer 5)) => (6 tagged-value-address deref)
setm: (6 tagged-value-address deref) <= #(tagged record (integer 5))
sz: (6 tagged-value-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1000
sz: (1164 tagged-value)
addr: (6 tagged-value-address deref)
addr: initial result: 6
addr: incrementing by 1000
addr: deref 1006 => 1164
setm: size of (6 tagged-value-address deref) is 2
setm: (6 tagged-value-address deref): setting 1164 to integer
setm: (6 tagged-value-address deref): setting 1165 to 5
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 52 new-list 10: (jump (-8 offset))
jump: jumping to 3
run: -- ((1000 30) (1001 1031) (1002 1164) (1003 5) (1004 t) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 53 new-list 3: ((3 integer) (4 boolean) <- arg)
arg: nil 3 (3 4 5)
run: nil => (3 integer)
setm: (3 integer) <= nil
sz: (3 integer)
addr: (3 integer)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 integer) is 1
setm: (3 integer): setting 1003 to nil
run: nil => (4 boolean)
setm: (4 boolean) <= nil
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1004 to nil
run: -- ((1000 30) (1001 1031) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 54 new-list 4: (jump-unless (4 boolean) (6 offset))
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1000
jump: checking that nil is not t
jump: jumping to 11
run: -- ((1000 30) (1001 1031) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 55 new-list 11: ((1 list-address) <- list-next (1 list-address))
m: (1 list-address)
sz: (1 list-address)
addr: (1 list-address)
addr: initial result: 1
addr: incrementing by 1000
run: -- ((1000 30) (1001 1031) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164))
run: 56 list-next 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1229 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1031) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164) (1229 30))
run: 57 list-next 1: ((1 list-address) <- arg)
arg: nil 0 (1031)
run: 1031 => (1 list-address)
setm: (1 list-address) <= 1031
sz: (1 list-address)
addr: (1 list-address)
addr: initial result: 1
addr: incrementing by 1229
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1230 to 1031
run: -- ((1000 30) (1001 1031) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164) (1229 30) (1230 1031))
run: 58 list-next 2: ((2 list-address) <- get (1 list-address deref) (1 offset))
record-info: (1 list-address deref) (1 offset)
addr: (1 list-address deref)
addr: initial result: 1
addr: incrementing by 1229
addr: deref 1230 => 1031
record-info: initial base 1031 type ((address t) (elem list) (size 1))
record-info: (1 list-address deref) requests deref => ((elems (tagged-value list-address)) (fields (car cdr)) (record t) (size 2))
get: (1 list-address deref) (1 offset) => 1033 list-address
m: (1033 list-address global)
sz: (1033 list-address global)
addr: (1033 list-address global)
addr: initial result: 1033
run: 1034 => (2 list-address)
setm: (2 list-address) <= 1034
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1229
setm: size of (2 list-address) is 1
setm: (2 list-address): setting 1231 to 1034
run: -- ((1000 30) (1001 1031) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164) (1229 30) (1230 1031) (1231 1034))
run: 59 list-next 3: (reply (2 list-address))
m: (2 list-address)
sz: (2 list-address)
addr: (2 list-address)
addr: initial result: 2
addr: incrementing by 1229
reply: ((2 list-address)) ((1 list-address))
reply: 1034 => (1 list-address)
setm: (1 list-address) <= 1034
sz: (1 list-address)
addr: (1 list-address)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 list-address) is 1
setm: (1 list-address): setting 1001 to 1034
run: -- ((1000 30) (1001 1034) (1002 1164) (1005 1101) (1006 1164) (1033 1034) (1034 integer) (1035 3) (1036 1099) (1037 30) (1038 1031) (1039 1034) (1068 30) (1069 1034) (1070 1034) (1099 integer) (1100 4) (1101 1164) (1102 30) (1103 1034) (1104 1099) (1133 30) (1134 1099) (1135 1099) (1164 integer) (1165 5) (1167 30) (1168 1099) (1169 1164) (1198 30) (1199 1164) (1200 1164) (1229 30) (1230 1031) (1231 1034))
run: 60 new-list 12: (reply (1 list-address))
m: (1 list-address)
sz: (1 list-address)
addr: (1 list-address)
addr: initial result: 1
addr: incrementing by 1000
reply: ((1 list-address)) ((1 integer))
reply: 1034 => (1 integer)
setm: (1 integer) <= 1034
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
setm: size of (1 integer) is 1
setm: (1 integer): setting 1 to 1034
schedule: done with routine
