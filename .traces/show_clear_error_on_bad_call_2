9991 parse: --- defining main
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"1": "boolean"}
9992 load: after rewriting: 1:boolean <- foo 34
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:number
9999 parse: header product: y:number
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: reply
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"x": <>}
9992 load: after rewriting: reply x
9999 parse: recipe foo has a header
9990 transform: === transform_all()
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe main
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: x => number
9992 transform: x <= number
9991 transform: --- deduce types from header for foo
9993 transform: type of x is number
9993 transform: type of y is number
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: x:number <- next-ingredient-without-typechecking 
9993 transform:   product: x: number -- {"x": "number"}
9992 transform: instruction: reply x
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9991 transform: --- transform names for recipe foo
9993 name: assign x 1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction 1:boolean <- foo 34
9993 transform: strict match: ingredient 0
9993 transform: mismatch: product 0
9992 transform: score for base: -1
9992 transform: checking variant 1: recipe foo {"x": "number"} -> {"y": "number"}
9993 transform: strict match: ingredient 0
9993 transform: mismatch: product 0
9992 transform: score for variant 1: -1
9992 transform: no variant found; checking for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 1: recipe foo {"x": "number"} -> {"y": "number"}
9993 transform: no type ingredients
9992 transform: final score: -1
   0 error: main: failed to find a matching call for '1:boolean <- foo 34'

9991 transform: --- resolve ambiguous calls for recipe foo
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: reply ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe main
   0 error: main: product 0 has the wrong type at '1:boolean <- foo 34'

9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
   0 error: foo: reply ingredient x can't be saved in 1:boolean

   0 error: number vs boolean

9991 transform: --- checking reply instructions against header for foo
9991 transform: --- parsing any uninitialized reagents as integers
