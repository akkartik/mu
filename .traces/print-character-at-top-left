parse: instruction: run
parse:   ingredient: {name: "\n#?     $start-tracing #? 3\n    1:address:screen <- new-fake-screen 3/width, 2/height\n    1:address:screen <- print-character 1:address:screen, 97  # 'a'\n    2:address:array:screen-cell <- get 1:address:screen/deref, data:offset\n    3:array:screen-cell <- copy 2:address:array:screen-cell/deref\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    3 <- 6  # width*height\n    4 <- 97  # 'a'\n    5 <- 7  # white\n    6 <- 0\n  ", properties: [_: "literal-string"]}
after-brace: recipe scenario-print-character-at-top-left
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: scenario-print-character-at-top-left
 101 run: run [
#?     $start-tracing #? 3
    1:address:screen <- new-fake-screen 3/width, 2/height
    1:address:screen <- print-character 1:address:screen, 97  # 'a'
    2:address:array:screen-cell <- get 1:address:screen/deref, data:offset
    3:array:screen-cell <- copy 2:address:array:screen-cell/deref
  ]
parse: instruction: new-fake-screen
parse:   ingredient: {name: "3", properties: ["3": "literal", "width": ]}
parse:   ingredient: {name: "2", properties: ["2": "literal", "height": ]}
parse:   product: {name: "1", properties: ["1": "address":"screen"]}
parse: instruction: print-character
parse:   ingredient: {name: "1", properties: ["1": "address":"screen"]}
parse:   ingredient: {name: "97", properties: ["97": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"screen"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"screen", "deref": ]}
parse:   ingredient: {name: "data", properties: ["data": "offset"]}
parse:   product: {name: "2", properties: ["2": "address":"array":"screen-cell"]}
parse: instruction: copy
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"screen-cell", "deref": ]}
parse:   product: {name: "3", properties: ["3": "array":"screen-cell"]}
name: element data of type screen is at offset 4
after-brace: recipe run1001
after-brace: new-fake-screen ...
after-brace: print-character ...
after-brace: get ...
after-brace: copy ...
 101 run: 1:address:screen <- new-fake-screen 3/width, 2/height
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1000
 102 run: result:address:screen <- new screen:type
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1002
 102 run: width:address:number <- get-address result:address:screen/deref, num-columns:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1010
9999 mem: storing 1010 in location 1003
 102 run: width:address:number/deref <- next-ingredient 
9999 mem: location 1003 is 1010
9999 mem: storing 3 in location 1010
 102 run: height:address:number <- get-address result:address:screen/deref, num-rows:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 0
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1004
 102 run: height:address:number/deref <- next-ingredient 
9999 mem: location 1004 is 1009
9999 mem: storing 2 in location 1009
 102 run: row:address:number <- get-address result:address:screen/deref, cursor-row:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 102 run: row:address:number/deref <- copy 0
9999 mem: location 1005 is 1011
9999 mem: storing 0 in location 1011
 102 run: column:address:number <- get-address result:address:screen/deref, cursor-column:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 102 run: column:address:number/deref <- copy 0
9999 mem: location 1006 is 1012
9999 mem: storing 0 in location 1012
 102 run: bufsize:number <- multiply width:address:number/deref, height:address:number/deref
9999 mem: location 1003 is 1010
9999 mem: location 1010 is 3
9999 mem: location 1004 is 1009
9999 mem: location 1009 is 2
9999 mem: storing 6 in location 1007
 102 run: buf:address:address:array:screen-cell <- get-address result:address:screen/deref, data:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1008
 102 run: buf:address:address:array:screen-cell/deref <- new screen-cell:type, bufsize:number
9999 mem: location 1007 is 6
9999 mem: array size is 6
9999 mem: new alloc: 1014
9999 mem: location 1008 is 1013
9999 mem: storing 1014 in location 1013
 102 run: clear-screen result:address:screen
9999 mem: location 1002 is 1009
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1027
 103 run: x:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1029
 103 run: break-unless x:address:screen, 
9999 mem: location 1029 is 1009
9999 run: jump-unless fell through
 103 run: buf:address:array:screen-cell <- get x:address:screen/deref, data:offset
9999 mem: location 1029 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1029 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1030
 103 run: max:number <- length buf:address:array:screen-cell/deref
9999 mem: location 1030 is 1014
9999 mem: location 1014 is 6
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1030 is 1014
9999 mem: storing 6 in location 1031
 103 run: i:number <- copy 0
9999 mem: storing 0 in location 1032
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1032 is 0
9999 mem: location 1031 is 6
9999 mem: storing 0 in location 1033
 103 run: break-if done?:boolean, 
9999 mem: location 1033 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address buf:address:array:screen-cell/deref, i:number
9999 mem: location 1030 is 1014
9999 mem: location 1014 is 6
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1032 is 0
9999 mem: location 1030 is 1014
9999 mem: location 1032 is 0
9999 mem: storing 1015 in location 1034
 103 run: curr-content:address:character <- get-address curr:address:screen-cell/deref, contents:offset
9999 mem: location 1034 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1034 is 1015
9999 run: address to copy is 1015
9999 mem: storing 1015 in location 1035
 103 run: curr-content:address:character/deref <- copy [ ]
9999 mem: location 1035 is 1015
9999 mem: storing 0 in location 1015
 103 run: curr-color:address:character <- get-address curr:address:screen-cell/deref, color:offset
9999 mem: location 1034 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1034 is 1015
9999 run: address to copy is 1016
9999 mem: storing 1016 in location 1036
 103 run: curr-color:address:character/deref <- copy 7/white
9999 mem: location 1036 is 1016
9999 mem: storing 7 in location 1016
 103 run: i:number <- add i:number, 1
9999 mem: location 1032 is 0
9999 mem: storing 1 in location 1032
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1032 is 1
9999 mem: location 1031 is 6
9999 mem: storing 0 in location 1033
 103 run: break-if done?:boolean, 
9999 mem: location 1033 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address buf:address:array:screen-cell/deref, i:number
9999 mem: location 1030 is 1014
9999 mem: location 1014 is 6
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1032 is 1
9999 mem: location 1030 is 1014
9999 mem: location 1032 is 1
9999 mem: storing 1017 in location 1034
 103 run: curr-content:address:character <- get-address curr:address:screen-cell/deref, contents:offset
9999 mem: location 1034 is 1017
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1034 is 1017
9999 run: address to copy is 1017
9999 mem: storing 1017 in location 1035
 103 run: curr-content:address:character/deref <- copy [ ]
9999 mem: location 1035 is 1017
9999 mem: storing 0 in location 1017
 103 run: curr-color:address:character <- get-address curr:address:screen-cell/deref, color:offset
9999 mem: location 1034 is 1017
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1034 is 1017
9999 run: address to copy is 1018
9999 mem: storing 1018 in location 1036
 103 run: curr-color:address:character/deref <- copy 7/white
9999 mem: location 1036 is 1018
9999 mem: storing 7 in location 1018
 103 run: i:number <- add i:number, 1
9999 mem: location 1032 is 1
9999 mem: storing 2 in location 1032
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1032 is 2
9999 mem: location 1031 is 6
9999 mem: storing 0 in location 1033
 103 run: break-if done?:boolean, 
9999 mem: location 1033 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address buf:address:array:screen-cell/deref, i:number
9999 mem: location 1030 is 1014
9999 mem: location 1014 is 6
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1032 is 2
9999 mem: location 1030 is 1014
9999 mem: location 1032 is 2
9999 mem: storing 1019 in location 1034
 103 run: curr-content:address:character <- get-address curr:address:screen-cell/deref, contents:offset
9999 mem: location 1034 is 1019
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1034 is 1019
9999 run: address to copy is 1019
9999 mem: storing 1019 in location 1035
 103 run: curr-content:address:character/deref <- copy [ ]
9999 mem: location 1035 is 1019
9999 mem: storing 0 in location 1019
 103 run: curr-color:address:character <- get-address curr:address:screen-cell/deref, color:offset
9999 mem: location 1034 is 1019
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1034 is 1019
9999 run: address to copy is 1020
9999 mem: storing 1020 in location 1036
 103 run: curr-color:address:character/deref <- copy 7/white
9999 mem: location 1036 is 1020
9999 mem: storing 7 in location 1020
 103 run: i:number <- add i:number, 1
9999 mem: location 1032 is 2
9999 mem: storing 3 in location 1032
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1032 is 3
9999 mem: location 1031 is 6
9999 mem: storing 0 in location 1033
 103 run: break-if done?:boolean, 
9999 mem: location 1033 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address buf:address:array:screen-cell/deref, i:number
9999 mem: location 1030 is 1014
9999 mem: location 1014 is 6
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1032 is 3
9999 mem: location 1030 is 1014
9999 mem: location 1032 is 3
9999 mem: storing 1021 in location 1034
 103 run: curr-content:address:character <- get-address curr:address:screen-cell/deref, contents:offset
9999 mem: location 1034 is 1021
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1034 is 1021
9999 run: address to copy is 1021
9999 mem: storing 1021 in location 1035
 103 run: curr-content:address:character/deref <- copy [ ]
9999 mem: location 1035 is 1021
9999 mem: storing 0 in location 1021
 103 run: curr-color:address:character <- get-address curr:address:screen-cell/deref, color:offset
9999 mem: location 1034 is 1021
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1034 is 1021
9999 run: address to copy is 1022
9999 mem: storing 1022 in location 1036
 103 run: curr-color:address:character/deref <- copy 7/white
9999 mem: location 1036 is 1022
9999 mem: storing 7 in location 1022
 103 run: i:number <- add i:number, 1
9999 mem: location 1032 is 3
9999 mem: storing 4 in location 1032
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1032 is 4
9999 mem: location 1031 is 6
9999 mem: storing 0 in location 1033
 103 run: break-if done?:boolean, 
9999 mem: location 1033 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address buf:address:array:screen-cell/deref, i:number
9999 mem: location 1030 is 1014
9999 mem: location 1014 is 6
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1032 is 4
9999 mem: location 1030 is 1014
9999 mem: location 1032 is 4
9999 mem: storing 1023 in location 1034
 103 run: curr-content:address:character <- get-address curr:address:screen-cell/deref, contents:offset
9999 mem: location 1034 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1034 is 1023
9999 run: address to copy is 1023
9999 mem: storing 1023 in location 1035
 103 run: curr-content:address:character/deref <- copy [ ]
9999 mem: location 1035 is 1023
9999 mem: storing 0 in location 1023
 103 run: curr-color:address:character <- get-address curr:address:screen-cell/deref, color:offset
9999 mem: location 1034 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1034 is 1023
9999 run: address to copy is 1024
9999 mem: storing 1024 in location 1036
 103 run: curr-color:address:character/deref <- copy 7/white
9999 mem: location 1036 is 1024
9999 mem: storing 7 in location 1024
 103 run: i:number <- add i:number, 1
9999 mem: location 1032 is 4
9999 mem: storing 5 in location 1032
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1032 is 5
9999 mem: location 1031 is 6
9999 mem: storing 0 in location 1033
 103 run: break-if done?:boolean, 
9999 mem: location 1033 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address buf:address:array:screen-cell/deref, i:number
9999 mem: location 1030 is 1014
9999 mem: location 1014 is 6
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1032 is 5
9999 mem: location 1030 is 1014
9999 mem: location 1032 is 5
9999 mem: storing 1025 in location 1034
 103 run: curr-content:address:character <- get-address curr:address:screen-cell/deref, contents:offset
9999 mem: location 1034 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1034 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1035
 103 run: curr-content:address:character/deref <- copy [ ]
9999 mem: location 1035 is 1025
9999 mem: storing 0 in location 1025
 103 run: curr-color:address:character <- get-address curr:address:screen-cell/deref, color:offset
9999 mem: location 1034 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1034 is 1025
9999 run: address to copy is 1026
9999 mem: storing 1026 in location 1036
 103 run: curr-color:address:character/deref <- copy 7/white
9999 mem: location 1036 is 1026
9999 mem: storing 7 in location 1026
 103 run: i:number <- add i:number, 1
9999 mem: location 1032 is 5
9999 mem: storing 6 in location 1032
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1032 is 6
9999 mem: location 1031 is 6
9999 mem: storing 1 in location 1033
 103 run: break-if done?:boolean, 
9999 mem: location 1033 is 1
9999 run: jumping to instruction 17
 103 run: cur:address:number <- get-address x:address:screen/deref, cursor-row:offset
9999 mem: location 1029 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1029 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1037
 103 run: cur:address:number/deref <- copy 0
9999 mem: location 1037 is 1011
9999 mem: storing 0 in location 1011
 103 run: cur:address:number <- get-address x:address:screen/deref, cursor-column:offset
9999 mem: location 1029 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1029 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1037
 103 run: cur:address:number/deref <- copy 0
9999 mem: location 1037 is 1012
9999 mem: storing 0 in location 1012
 103 run: reply x:address:screen/same-as-ingredient:0
9999 mem: location 1029 is 1009
 102 run: reply result:address:screen
9999 mem: location 1002 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1
 101 run: 1:address:screen <- print-character 1:address:screen, 97
9999 mem: location 1 is 1009
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
9999 mem: new alloc: 1038
 102 run: x:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1040
 102 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1041
 102 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
 102 run: break-if color-found?:boolean, 
9999 mem: location 1043 is 0
9999 run: jump-if fell through
 102 run: color:number <- copy 7/white
9999 mem: storing 7 in location 1042
 102 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1044
9999 mem: storing 0 in location 1045
 102 run: break-if bg-color-found?:boolean, 
9999 mem: location 1045 is 0
9999 run: jump-if fell through
 102 run: bg-color:number <- copy 0/black
9999 mem: storing 0 in location 1044
 102 run: break-unless x:address:screen, 
9999 mem: location 1040 is 1009
9999 run: jump-unless fell through
 102 run: width:number <- get x:address:screen/deref, num-columns:offset
9999 mem: location 1040 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1040 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 3
9999 mem: storing 3 in location 1046
 102 run: height:number <- get x:address:screen/deref, num-rows:offset
9999 mem: location 1040 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1040 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 2
9999 mem: storing 2 in location 1047
 102 run: row:address:number <- get-address x:address:screen/deref, cursor-row:offset
9999 mem: location 1040 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1040 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1048
 102 run: legal?:boolean <- greater-or-equal row:address:number/deref, 0
9999 mem: location 1048 is 1011
9999 mem: location 1011 is 0
9999 mem: storing 1 in location 1049
 102 run: jump-if legal?:boolean, 1:offset
9999 mem: location 1049 is 1
9999 run: jumping to instruction 21
 102 run: legal?:boolean <- lesser-than row:address:number/deref, height:number
9999 mem: location 1048 is 1011
9999 mem: location 1011 is 0
9999 mem: location 1047 is 2
9999 mem: storing 1 in location 1049
 102 run: jump-if legal?:boolean, 1:offset
9999 mem: location 1049 is 1
9999 run: jumping to instruction 24
 102 run: column:address:number <- get-address x:address:screen/deref, cursor-column:offset
9999 mem: location 1040 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1040 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1050
 102 run: legal?:boolean <- greater-or-equal column:address:number/deref, 0
9999 mem: location 1050 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 1 in location 1049
 102 run: jump-if legal?:boolean, 1:offset
9999 mem: location 1049 is 1
9999 run: jumping to instruction 28
 102 run: legal?:boolean <- lesser-than column:address:number/deref, width:number
9999 mem: location 1050 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1046 is 3
9999 mem: storing 1 in location 1049
 102 run: jump-if legal?:boolean, 1:offset
9999 mem: location 1049 is 1
9999 run: jumping to instruction 31
 102 run: newline?:boolean <- equal c:character, 10/newline
9999 mem: location 1041 is 97
9999 mem: storing 0 in location 1051
 102 run: break-unless newline?:boolean, 
9999 mem: location 1051 is 0
9999 run: jumping to instruction 42
 102 run: index:number <- multiply row:address:number/deref, width:number
9999 mem: location 1048 is 1011
9999 mem: location 1011 is 0
9999 mem: location 1046 is 3
9999 mem: storing 0 in location 1054
 102 run: index:number <- add index:number, column:address:number/deref
9999 mem: location 1054 is 0
9999 mem: location 1050 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1054
 102 run: buf:address:array:screen-cell <- get x:address:screen/deref, data:offset
9999 mem: location 1040 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1040 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1055
 102 run: len:number <- length buf:address:array:screen-cell/deref
9999 mem: location 1055 is 1014
9999 mem: location 1014 is 6
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1055 is 1014
9999 mem: storing 6 in location 1056
 102 run: backspace?:boolean <- equal c:character, 8
9999 mem: location 1041 is 97
9999 mem: storing 0 in location 1057
 102 run: break-unless backspace?:boolean, 
9999 mem: location 1057 is 0
9999 run: jumping to instruction 62
 102 run: cursor:address:screen-cell <- index-address buf:address:array:screen-cell/deref, index:number
9999 mem: location 1055 is 1014
9999 mem: location 1014 is 6
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1054 is 0
9999 mem: location 1055 is 1014
9999 mem: location 1054 is 0
9999 mem: storing 1015 in location 1059
 102 run: cursor-contents:address:character <- get-address cursor:address:screen-cell/deref, contents:offset
9999 mem: location 1059 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1059 is 1015
9999 run: address to copy is 1015
9999 mem: storing 1015 in location 1060
 102 run: cursor-color:address:number <- get-address cursor:address:screen-cell/deref, color:offset
9999 mem: location 1059 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1059 is 1015
9999 run: address to copy is 1016
9999 mem: storing 1016 in location 1061
 102 run: cursor-contents:address:character/deref <- copy c:character
9999 mem: location 1041 is 97
9999 mem: location 1060 is 1015
9999 mem: storing 97 in location 1015
 102 run: cursor-color:address:number/deref <- copy color:number
9999 mem: location 1042 is 7
9999 mem: location 1061 is 1016
9999 mem: storing 7 in location 1016
 102 run: right:number <- subtract width:number, 1
9999 mem: location 1046 is 3
9999 mem: storing 2 in location 1062
 102 run: at-right?:boolean <- greater-or-equal column:address:number/deref, right:number
9999 mem: location 1050 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1062 is 2
9999 mem: storing 0 in location 1063
 102 run: break-if at-right?:boolean, 
9999 mem: location 1063 is 0
9999 run: jump-if fell through
 102 run: column:address:number/deref <- add column:address:number/deref, 1
9999 mem: location 1050 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1050 is 1012
9999 mem: storing 1 in location 1012
 102 run: reply x:address:screen/same-as-ingredient:0
9999 mem: location 1040 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1
 101 run: 2:address:array:screen-cell <- get 1:address:screen/deref, data:offset
9999 mem: location 1 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 2
 101 run: 3:array:screen-cell <- copy 2:address:array:screen-cell/deref
9999 mem: location 2 is 1014
9999 mem: location 1014 is 6
9999 mem: location 1015 is 97
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: storing 6 in location 3
9999 mem: storing 97 in location 4
9999 mem: storing 7 in location 5
9999 mem: storing 0 in location 6
9999 mem: storing 7 in location 7
9999 mem: storing 0 in location 8
9999 mem: storing 7 in location 9
9999 mem: storing 0 in location 10
9999 mem: storing 7 in location 11
9999 mem: storing 0 in location 12
9999 mem: storing 7 in location 13
9999 mem: storing 0 in location 14
9999 mem: storing 7 in location 15
 100 run: memory-should-contain [
    3 <- 6  # width*height
    4 <- 97  # 'a'
    5 <- 7  # white
    6 <- 0
  ]
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 6
