9991 parse: --- defining scenario-inserting-after-start-of-duplex-list
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:duplex-list:character <- copy 0  # 1 points to head of list\n    1:address:duplex-list:character <- push-duplex 3, 1:address:duplex-list:character\n    1:address:duplex-list:character <- push-duplex 4, 1:address:duplex-list:character\n    1:address:duplex-list:character <- push-duplex 5, 1:address:duplex-list:character\n    2:address:duplex-list:character <- insert-duplex 6, 1:address:duplex-list:character\n    # check structure like before\n    2:address:duplex-list:character <- copy 1:address:duplex-list:character\n    3:character <- first-duplex 2:address:duplex-list:character\n    2:address:duplex-list:character <- next-duplex 2:address:duplex-list:character\n    4:character <- first-duplex 2:address:duplex-list:character\n    2:address:duplex-list:character <- next-duplex 2:address:duplex-list:character\n    5:character <- first-duplex 2:address:duplex-list:character\n    2:address:duplex-list:character <- next-duplex 2:address:duplex-list:character\n    6:character <- first-duplex 2:address:duplex-list:character\n    2:address:duplex-list:character <- prev-duplex 2:address:duplex-list:character\n    7:character <- first-duplex 2:address:duplex-list:character\n    2:address:duplex-list:character <- prev-duplex 2:address:duplex-list:character\n    8:character <- first-duplex 2:address:duplex-list:character\n    2:address:duplex-list:character <- prev-duplex 2:address:duplex-list:character\n    9:character <- first-duplex 2:address:duplex-list:character\n    10:boolean <- equal 1:address:duplex-list:character, 2:address:duplex-list:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:duplex-list:character <- copy 0  # 1 points to head of list
    1:address:duplex-list:character <- push-duplex 3, 1:address:duplex-list:character
    1:address:duplex-list:character <- push-duplex 4, 1:address:duplex-list:character
    1:address:duplex-list:character <- push-duplex 5, 1:address:duplex-list:character
    2:address:duplex-list:character <- insert-duplex 6, 1:address:duplex-list:character
    # check structure like before
    2:address:duplex-list:character <- copy 1:address:duplex-list:character
    3:character <- first-duplex 2:address:duplex-list:character
    2:address:duplex-list:character <- next-duplex 2:address:duplex-list:character
    4:character <- first-duplex 2:address:duplex-list:character
    2:address:duplex-list:character <- next-duplex 2:address:duplex-list:character
    5:character <- first-duplex 2:address:duplex-list:character
    2:address:duplex-list:character <- next-duplex 2:address:duplex-list:character
    6:character <- first-duplex 2:address:duplex-list:character
    2:address:duplex-list:character <- prev-duplex 2:address:duplex-list:character
    7:character <- first-duplex 2:address:duplex-list:character
    2:address:duplex-list:character <- prev-duplex 2:address:duplex-list:character
    8:character <- first-duplex 2:address:duplex-list:character
    2:address:duplex-list:character <- prev-duplex 2:address:duplex-list:character
    9:character <- first-duplex 2:address:duplex-list:character
    10:boolean <- equal 1:address:duplex-list:character, 2:address:duplex-list:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3 <- 5  # scanning next\n    4 <- 6  # inserted element\n    5 <- 4\n    6 <- 3\n    7 <- 4  # then prev\n    8 <- 6\n    9 <- 5\n    10 <- 1  # list back at start\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    3 <- 5  # scanning next
    4 <- 6  # inserted element
    5 <- 4
    6 <- 3
    7 <- 4  # then prev
    8 <- 6
    9 <- 5
    10 <- 1  # list back at start
  ]
9999 parse: recipe scenario-inserting-after-start-of-duplex-list has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-inserting-after-start-of-duplex-list
9991 transform: --- collect surrounding spaces for recipe scenario-inserting-after-start-of-duplex-list
9991 transform: --- deduce types for recipe scenario-inserting-after-start-of-duplex-list
9991 transform: --- resolve ambiguous calls for recipe scenario-inserting-after-start-of-duplex-list
9991 transform: --- transform names for recipe scenario-inserting-after-start-of-duplex-list
9991 transform: --- transform braces for recipe scenario-inserting-after-start-of-duplex-list
9992 transform: run ...
9992 transform: memory-should-contain ...
9991 transform: --- compute instruction operations for recipe scenario-inserting-after-start-of-duplex-list
9991 transform: --- perform checks for recipe scenario-inserting-after-start-of-duplex-list
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-inserting-after-start-of-duplex-list
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-inserting-after-start-of-duplex-list
 102 run: run [
    1:address:duplex-list:character <- copy 0  # 1 points to head of list
    1:address:duplex-list:character <- push-duplex 3, 1:address:duplex-list:character
    1:address:duplex-list:character <- push-duplex 4, 1:address:duplex-list:character
    1:address:duplex-list:character <- push-duplex 5, 1:address:duplex-list:character
    2:address:duplex-list:character <- insert-duplex 6, 1:address:duplex-list:character
    # check structure like before
    2:address:duplex-list:character <- copy 1:address:duplex-list:character
    3:character <- first-duplex 2:address:duplex-list:character
    2:address:duplex-list:character <- next-duplex 2:address:duplex-list:character
    4:character <- first-duplex 2:address:duplex-list:character
    2:address:duplex-list:character <- next-duplex 2:address:duplex-list:character
    5:character <- first-duplex 2:address:duplex-list:character
    2:address:duplex-list:character <- next-duplex 2:address:duplex-list:character
    6:character <- first-duplex 2:address:duplex-list:character
    2:address:duplex-list:character <- prev-duplex 2:address:duplex-list:character
    7:character <- first-duplex 2:address:duplex-list:character
    2:address:duplex-list:character <- prev-duplex 2:address:duplex-list:character
    8:character <- first-duplex 2:address:duplex-list:character
    2:address:duplex-list:character <- prev-duplex 2:address:duplex-list:character
    9:character <- first-duplex 2:address:duplex-list:character
    10:boolean <- equal 1:address:duplex-list:character, 2:address:duplex-list:character
  ]
9991 parse: --- defining run1001
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:duplex-list:character <- copy 0
9993 parse: instruction: push-duplex
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:duplex-list:character <- push-duplex 3, 1:address:duplex-list:character
9993 parse: instruction: push-duplex
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:duplex-list:character <- push-duplex 4, 1:address:duplex-list:character
9993 parse: instruction: push-duplex
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"5": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:duplex-list:character <- push-duplex 5, 1:address:duplex-list:character
9993 parse: instruction: insert-duplex
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"6": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 2:address:duplex-list:character <- insert-duplex 6, 1:address:duplex-list:character
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 2:address:duplex-list:character <- copy 1:address:duplex-list:character
9993 parse: instruction: first-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"3": "character"}
9992 load: after rewriting: 3:character <- first-duplex 2:address:duplex-list:character
9993 parse: instruction: next-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 2:address:duplex-list:character <- next-duplex 2:address:duplex-list:character
9993 parse: instruction: first-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"4": "character"}
9992 load: after rewriting: 4:character <- first-duplex 2:address:duplex-list:character
9993 parse: instruction: next-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 2:address:duplex-list:character <- next-duplex 2:address:duplex-list:character
9993 parse: instruction: first-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"5": "character"}
9992 load: after rewriting: 5:character <- first-duplex 2:address:duplex-list:character
9993 parse: instruction: next-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 2:address:duplex-list:character <- next-duplex 2:address:duplex-list:character
9993 parse: instruction: first-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"6": "character"}
9992 load: after rewriting: 6:character <- first-duplex 2:address:duplex-list:character
9993 parse: instruction: prev-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 2:address:duplex-list:character <- prev-duplex 2:address:duplex-list:character
9993 parse: instruction: first-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"7": "character"}
9992 load: after rewriting: 7:character <- first-duplex 2:address:duplex-list:character
9993 parse: instruction: prev-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 2:address:duplex-list:character <- prev-duplex 2:address:duplex-list:character
9993 parse: instruction: first-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"8": "character"}
9992 load: after rewriting: 8:character <- first-duplex 2:address:duplex-list:character
9993 parse: instruction: prev-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 2:address:duplex-list:character <- prev-duplex 2:address:duplex-list:character
9993 parse: instruction: first-duplex
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"9": "character"}
9992 load: after rewriting: 9:character <- first-duplex 2:address:duplex-list:character
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"10": "boolean"}
9992 load: after rewriting: 10:boolean <- equal 1:address:duplex-list:character, 2:address:duplex-list:character
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- deduce types for recipe run1001
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction push-duplex
9993 transform: mismatch: ingredient 1
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction push-duplex
9993 transform: mismatch: ingredient 1
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction push-duplex
9993 transform: mismatch: ingredient 1
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction insert-duplex
9993 transform: mismatch: ingredient 1
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction next-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction next-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction next-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction prev-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction prev-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction prev-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first-duplex
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9991 transform: --- transform names for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: copy ...
9992 transform: push-duplex ...
9992 transform: push-duplex ...
9992 transform: push-duplex ...
9992 transform: insert-duplex ...
9992 transform: copy ...
9992 transform: first-duplex ...
9992 transform: next-duplex ...
9992 transform: first-duplex ...
9992 transform: next-duplex ...
9992 transform: first-duplex ...
9992 transform: next-duplex ...
9992 transform: first-duplex ...
9992 transform: prev-duplex ...
9992 transform: first-duplex ...
9992 transform: prev-duplex ...
9992 transform: first-duplex ...
9992 transform: prev-duplex ...
9992 transform: first-duplex ...
9992 transform: equal ...
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:duplex-list:character <- copy 0
9999 mem: storing 0 in location 1
 103 run: 1:address:duplex-list:character <- push-duplex_2 3, 1:address:duplex-list:character
9999 mem: location 1 is 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1000
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 3 in location 1002
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 0 in location 1003
 104 run: result <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 3
9999 mem: location 1005 is 1008
9999 mem: storing 3 in location 1008
 104 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1009
9999 mem: storing 0 in location 1009
 104 run: jump-if in, 1:offset
9999 mem: location 1003 is 0
9998 run: jump-if fell through
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1004 is 1008
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1
 103 run: 1:address:duplex-list:character <- push-duplex_2 4, 1:address:duplex-list:character
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1002
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1008 in location 1003
 104 run: result <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1011
9999 mem: storing 1011 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1004 is 1011
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 4
9999 mem: location 1005 is 1011
9999 mem: storing 4 in location 1011
 104 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1004 is 1011
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 1008
9999 mem: location 1006 is 1012
9999 mem: storing 1008 in location 1012
 104 run: jump-if in, 1:offset
9999 mem: location 1003 is 1008
9998 run: jumping to instruction 10
 104 run: prev:address:address:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1003 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1003 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1007
 104 run: *prev <- copy result
9999 mem: location 1004 is 1011
9999 mem: location 1007 is 1010
9999 mem: storing 1011 in location 1010
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1004 is 1011
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 1
 103 run: 1:address:duplex-list:character <- push-duplex_2 5, 1:address:duplex-list:character
9999 mem: location 1 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 5 in location 1002
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1003
 104 run: result <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1014
9999 mem: storing 1014 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1014
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 5
9999 mem: location 1005 is 1014
9999 mem: storing 5 in location 1014
 104 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1014
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 1011
9999 mem: location 1006 is 1015
9999 mem: storing 1011 in location 1015
 104 run: jump-if in, 1:offset
9999 mem: location 1003 is 1011
9998 run: jumping to instruction 10
 104 run: prev:address:address:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1003 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 0
9999 mem: location 1003 is 1011
9999 type: type deduced to be character$
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1007
 104 run: *prev <- copy result
9999 mem: location 1004 is 1014
9999 mem: location 1007 is 1013
9999 mem: storing 1014 in location 1013
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1004 is 1014
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 1
 103 run: 2:address:duplex-list:character <- insert-duplex_2 6, 1:address:duplex-list:character
9999 mem: location 1 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 6 in location 1002
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1014 in location 1003
 104 run: new-node <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1017
9999 mem: storing 1017 in location 1004
 104 run: val:address:_elem <- get-address *new-node, value:offset
9999 mem: location 1004 is 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1004 is 1017
9998 run: address to copy is 1017
9999 mem: storing 1017 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 6
9999 mem: location 1005 is 1017
9999 mem: storing 6 in location 1017
 104 run: next-node:address:duplex-list:_elem <- get *in, next:offset
9999 mem: location 1003 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1011
9999 mem: location 1016 is 0
9999 mem: location 1003 is 1014
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1015 is 1011
9999 mem: storing 1011 in location 1006
 104 run: y:address:address:duplex-list:_elem <- get-address *in, next:offset
9999 mem: location 1003 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1011
9999 mem: location 1016 is 0
9999 mem: location 1003 is 1014
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1007
 104 run: *y <- copy new-node
9999 mem: location 1004 is 1017
9999 mem: location 1007 is 1015
9999 mem: storing 1017 in location 1015
 104 run: y <- get-address *new-node, prev:offset
9999 mem: location 1004 is 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1017 is 6
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1004 is 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1019
9999 mem: storing 1019 in location 1007
 104 run: *y <- copy in
9999 mem: location 1003 is 1014
9999 mem: location 1007 is 1019
9999 mem: storing 1014 in location 1019
 104 run: y <- get-address *new-node, next:offset
9999 mem: location 1004 is 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1017 is 6
9999 mem: location 1018 is 0
9999 mem: location 1019 is 1014
9999 mem: location 1004 is 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1018
9999 mem: storing 1018 in location 1007
 104 run: *y <- copy next-node
9999 mem: location 1006 is 1011
9999 mem: location 1007 is 1018
9999 mem: storing 1011 in location 1018
 104 run: jump-if next-node, 1:offset
9999 mem: location 1006 is 1011
9998 run: jumping to instruction 15
 104 run: y <- get-address *next-node, prev:offset
9999 mem: location 1006 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1006 is 1011
9999 type: type deduced to be character$
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1007
 104 run: *y <- copy new-node
9999 mem: location 1004 is 1017
9999 mem: location 1007 is 1013
9999 mem: storing 1017 in location 1013
 104 run: reply new-node
9999 mem: location 1004 is 1017
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: storing 1017 in location 2
 103 run: 2:address:duplex-list:character <- copy 1:address:duplex-list:character
9999 mem: location 1 is 1014
9999 mem: storing 1014 in location 2
 103 run: 3:character <- first-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1020
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1014 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1014
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1022 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1017
9999 mem: location 1016 is 0
9999 mem: location 1022 is 1014
9998 run: address to copy is 1014
9998 run: its type is character
9999 mem: location 1014 is 5
9999 mem: storing 5 in location 1023
 104 run: reply result:_elem
9999 mem: location 1023 is 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 5
9999 mem: storing 5 in location 3
 103 run: 2:address:duplex-list:character <- next-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1014 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1014
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1022 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1017
9999 mem: location 1016 is 0
9999 mem: location 1022 is 1014
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1015 is 1017
9999 mem: storing 1017 in location 1023
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1023 is 1017
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: storing 1017 in location 2
 103 run: 4:character <- first-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1017 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1022 is 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1017 is 6
9999 mem: location 1018 is 1011
9999 mem: location 1019 is 1014
9999 mem: location 1022 is 1017
9998 run: address to copy is 1017
9998 run: its type is character
9999 mem: location 1017 is 6
9999 mem: storing 6 in location 1023
 104 run: reply result:_elem
9999 mem: location 1023 is 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 6
9999 mem: storing 6 in location 4
 103 run: 2:address:duplex-list:character <- next-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1017 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1022 is 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1017 is 6
9999 mem: location 1018 is 1011
9999 mem: location 1019 is 1014
9999 mem: location 1022 is 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1018
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1018 is 1011
9999 mem: storing 1011 in location 1023
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1023 is 1011
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 2
 103 run: 5:character <- first-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1011
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1022 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1017
9999 mem: location 1022 is 1011
9998 run: address to copy is 1011
9998 run: its type is character
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1023
 104 run: reply result:_elem
9999 mem: location 1023 is 4
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9999 mem: storing 4 in location 5
 103 run: 2:address:duplex-list:character <- next-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1011
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1022 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1017
9999 mem: location 1022 is 1011
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1012 is 1008
9999 mem: storing 1008 in location 1023
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1023 is 1008
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 2
 103 run: 6:character <- first-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1008 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1008
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1022 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: location 1022 is 1008
9998 run: address to copy is 1008
9998 run: its type is character
9999 mem: location 1008 is 3
9999 mem: storing 3 in location 1023
 104 run: reply result:_elem
9999 mem: location 1023 is 3
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 3
9999 mem: storing 3 in location 6
 103 run: 2:address:duplex-list:character <- prev-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1008 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1008
9998 run: jumping to instruction 4
 104 run: result <- get *in, prev:offset
9999 mem: location 1022 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: location 1022 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1010
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1010 is 1011
9999 mem: storing 1011 in location 1023
 104 run: reply result
9999 mem: location 1023 is 1011
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 2
 103 run: 7:character <- first-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1011
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1022 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1017
9999 mem: location 1022 is 1011
9998 run: address to copy is 1011
9998 run: its type is character
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1023
 104 run: reply result:_elem
9999 mem: location 1023 is 4
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9999 mem: storing 4 in location 7
 103 run: 2:address:duplex-list:character <- prev-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1011
9998 run: jumping to instruction 4
 104 run: result <- get *in, prev:offset
9999 mem: location 1022 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1017
9999 mem: location 1022 is 1011
9999 type: type deduced to be character$
9998 run: address to copy is 1013
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1013 is 1017
9999 mem: storing 1017 in location 1023
 104 run: reply result
9999 mem: location 1023 is 1017
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: storing 1017 in location 2
 103 run: 8:character <- first-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1017 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1022 is 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1017 is 6
9999 mem: location 1018 is 1011
9999 mem: location 1019 is 1014
9999 mem: location 1022 is 1017
9998 run: address to copy is 1017
9998 run: its type is character
9999 mem: location 1017 is 6
9999 mem: storing 6 in location 1023
 104 run: reply result:_elem
9999 mem: location 1023 is 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 6
9999 mem: storing 6 in location 8
 103 run: 2:address:duplex-list:character <- prev-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1017 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, prev:offset
9999 mem: location 1022 is 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1017 is 6
9999 mem: location 1018 is 1011
9999 mem: location 1019 is 1014
9999 mem: location 1022 is 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1019
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1019 is 1014
9999 mem: storing 1014 in location 1023
 104 run: reply result
9999 mem: location 1023 is 1014
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 2
 103 run: 9:character <- first-duplex_2 2:address:duplex-list:character
9999 mem: location 2 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1014 in location 1022
 104 run: jump-if in, 1:offset
9999 mem: location 1022 is 1014
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1022 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 type: type deduced to be character$
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1017
9999 mem: location 1016 is 0
9999 mem: location 1022 is 1014
9998 run: address to copy is 1014
9998 run: its type is character
9999 mem: location 1014 is 5
9999 mem: storing 5 in location 1023
 104 run: reply result:_elem
9999 mem: location 1023 is 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 5
9999 mem: storing 5 in location 9
 103 run: 10:boolean <- equal 1:address:duplex-list:character, 2:address:duplex-list:character
9999 mem: location 1 is 1014
9999 mem: location 2 is 1014
9999 mem: storing 1 in location 10
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    3 <- 5  # scanning next
    4 <- 6  # inserted element
    5 <- 4
    6 <- 3
    7 <- 4  # then prev
    8 <- 6
    9 <- 5
    10 <- 1  # list back at start
  ]
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
9999 trace: fall-through: exiting scenario-inserting-after-start-of-duplex-list; decrementing callstack depth from 1
