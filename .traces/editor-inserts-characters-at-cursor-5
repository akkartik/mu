 101 run: assume-console [
    left-click 3, 5  # below all text
    type [ef]
  ]
parse: instruction: left-click
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse:   ingredient: {name: "5", properties: ["5": "literal"]}
parse: instruction: type
parse:   ingredient: {name: "ef", properties: [_: "literal-string"]}
 101 run: run [
    editor-event-loop screen:address, console:address, 2:address:editor-data
  ]
parse: instruction: editor-event-loop
parse:   ingredient: {name: "screen", properties: ["screen": "address"]}
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   ingredient: {name: "2", properties: ["2": "address":"editor-data"]}
after-brace: recipe run1001
after-brace: editor-event-loop ...
 101 run: editor-event-loop screen:address, console:address, 2:address:editor-data
9999 mem: location 900 is 1009
9999 mem: location 901 is 1282
9999 mem: location 2 is 1000
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
 102 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1134
 102 run: console:address <- next-ingredient 
9999 mem: storing 1282 in location 1135
 102 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1136
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1135 is 1282
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1282 in location 1258
 103 run: break-unless x, 
9999 mem: location 1258 is 1282
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1258 is 1282
9999 mem: location 1282 is 0
9999 mem: location 1283 is 1269
9999 mem: location 1258 is 1282
9999 run: address to copy is 1282
9999 mem: storing 1282 in location 1259
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1258 is 1282
9999 mem: location 1282 is 0
9999 mem: location 1283 is 1269
9999 mem: location 1258 is 1282
9999 run: address to copy is 1283
9999 run: its type is address
9999 mem: location 1283 is 1269
9999 mem: storing 1269 in location 1260
 103 run: max:number <- length *buf
9999 mem: location 1260 is 1269
9999 mem: storing 3 in location 1261
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1259 is 1282
9999 mem: location 1282 is 0
9999 mem: location 1261 is 3
9999 mem: storing 0 in location 1262
 103 run: break-unless done?, 
9999 mem: location 1262 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index *buf, *idx
9999 mem: location 1260 is 1269
9999 mem: location 1259 is 1282
9999 mem: location 1282 is 0
9999 run: address to copy is 1270
9999 run: its type is event
9999 mem: location 1270 is 2
9999 mem: location 1271 is 65513
9999 mem: location 1272 is 3
9999 mem: location 1273 is 5
9999 mem: storing 2 in location 1264
9999 mem: storing 65513 in location 1265
9999 mem: storing 3 in location 1266
9999 mem: storing 5 in location 1267
 103 run: *idx <- add *idx, 1
9999 mem: location 1259 is 1282
9999 mem: location 1282 is 0
9999 mem: location 1259 is 1282
9999 mem: storing 1 in location 1282
 103 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1264 is 2
9999 mem: location 1265 is 65513
9999 mem: location 1266 is 3
9999 mem: location 1267 is 5
9999 mem: location 1258 is 1282
9999 run: result 0 is [2, 65513, 3, 5]
9999 run: result 1 is 1282
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 2 in location 1137
9999 mem: storing 65513 in location 1138
9999 mem: storing 3 in location 1139
9999 mem: storing 5 in location 1140
9999 mem: storing 1282 in location 1135
9999 mem: storing 1 in location 1141
9999 mem: storing 0 in location 1142
 102 run: loop-unless found?, 
9999 mem: location 1141 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1142 is 0
9999 run: jump-if fell through
 102 run: trace 10, [app], [next-event]
  10 app: next-event
 102 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1137 is 2
9999 mem: location 1138 is 65513
9999 mem: location 1139 is 3
9999 mem: location 1140 is 5
9999 mem: storing 1138 in location 1143
 102 run: break-unless t, 
9999 mem: location 1143 is 1138
9999 run: jump-unless fell through
 102 run: move-cursor-in-editor screen, editor, *t
9999 mem: location 1134 is 1009
9999 mem: location 1136 is 1000
9999 mem: location 1143 is 1138
9999 mem: location 1138 is 65513
9999 mem: location 1139 is 3
9999 mem: location 1140 is 5
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 13
9999 mem: new alloc: 1284
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1286
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1287
 103 run: t:touch-event <- next-ingredient 
9999 mem: storing 65513 in location 1288
9999 mem: storing 3 in location 1289
9999 mem: storing 5 in location 1290
 103 run: jump-if editor, 1:offset
9999 mem: location 1287 is 1000
9999 run: jumping to instruction 6
 103 run: click-column:number <- get t, column:offset
9999 mem: location 1288 is 65513
9999 mem: location 1289 is 3
9999 mem: location 1290 is 5
9999 run: address to copy is 1290
9999 run: its type is number
9999 mem: location 1290 is 5
9999 mem: storing 5 in location 1291
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1287 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1152
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1287 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1292
 103 run: too-far-left?:boolean <- lesser-than click-column, left
9999 mem: location 1291 is 5
9999 mem: location 1292 is 0
9999 mem: storing 0 in location 1293
 103 run: jump-unless too-far-left?, 1:offset
9999 mem: location 1293 is 0
9999 run: jumping to instruction 11
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1287 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1152
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1287 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1294
 103 run: too-far-right?:boolean <- greater-than click-column, right
9999 mem: location 1291 is 5
9999 mem: location 1294 is 9
9999 mem: storing 0 in location 1295
 103 run: jump-unless too-far-right?, 1:offset
9999 mem: location 1295 is 0
9999 run: jumping to instruction 15
 103 run: cursor-row:number <- get t, row:offset
9999 mem: location 1288 is 65513
9999 mem: location 1289 is 3
9999 mem: location 1290 is 5
9999 run: address to copy is 1289
9999 run: its type is number
9999 mem: location 1289 is 3
9999 mem: storing 3 in location 1296
 103 run: cursor-column:number <- get t, column:offset
9999 mem: location 1288 is 65513
9999 mem: location 1289 is 3
9999 mem: location 1290 is 5
9999 run: address to copy is 1290
9999 run: its type is number
9999 mem: location 1290 is 5
9999 mem: storing 5 in location 1297
 103 run: editor <- snap-cursor screen, editor, cursor-row, cursor-column
9999 mem: location 1286 is 1009
9999 mem: location 1287 is 1000
9999 mem: location 1296 is 3
9999 mem: location 1297 is 5
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 26
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1185
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1186
 104 run: target-row:number <- next-ingredient 
9999 mem: storing 3 in location 1187
 104 run: target-column:number <- next-ingredient 
9999 mem: storing 5 in location 1188
 104 run: jump-if editor, 1:offset
9999 mem: location 1186 is 1000
9999 run: jumping to instruction 7
 104 run: left:number <- get *editor, left:offset
9999 mem: location 1186 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1152
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1186 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1189
 104 run: right:number <- get *editor, right:offset
9999 mem: location 1186 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1152
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1186 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1190
 104 run: screen-height:number <- screen-height screen
9999 mem: location 1185 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1169
 105 run: break-unless sc, 
9999 mem: location 1169 is 1009
9999 run: jump-unless fell through
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1169 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1170
 105 run: reply height
9999 mem: location 1170 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1191
 104 run: curr:address:duplex-list <- get *editor, top-of-screen:offset
9999 mem: location 1186 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1152
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1186 is 1000
9999 run: address to copy is 1001
9999 run: its type is address
9999 mem: location 1001 is 1152
9999 mem: storing 1152 in location 1192
 104 run: prev:address:duplex-list <- copy curr
9999 mem: location 1192 is 1152
9999 mem: storing 1152 in location 1193
 104 run: curr <- next-duplex curr
9999 mem: location 1192 is 1152
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1152 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1152
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1152
9999 mem: location 1152 is 167
9999 mem: location 1153 is 1164
9999 mem: location 1154 is 0
9999 mem: location 1169 is 1152
9999 run: address to copy is 1153
9999 run: its type is address
9999 mem: location 1153 is 1164
9999 mem: storing 1164 in location 1170
 105 run: reply result
9999 mem: location 1170 is 1164
9999 run: result 0 is 1164
9999 mem: storing 1164 in location 1192
 104 run: row:number <- copy 1/top
9999 mem: storing 1 in location 1194
 104 run: column:number <- copy left
9999 mem: location 1189 is 0
9999 mem: storing 0 in location 1195
 104 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1186 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1152
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1186 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1196
 104 run: *cursor-row <- copy target-row
9999 mem: location 1187 is 3
9999 mem: location 1196 is 1006
9999 mem: location 1196 is 1006
9999 mem: storing 3 in location 1006
 104 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1186 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1152
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 3
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1186 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1197
 104 run: *cursor-column <- copy target-column
9999 mem: location 1188 is 5
9999 mem: location 1197 is 1007
9999 mem: location 1197 is 1007
9999 mem: storing 5 in location 1007
 104 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1186 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1152
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 3
9999 mem: location 1007 is 5
9999 mem: location 1008 is 1
9999 mem: location 1186 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1198
 104 run: break-unless curr, 
9999 mem: location 1192 is 1164
9999 run: jump-unless fell through
 104 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1194 is 1
9999 mem: location 1191 is 5
9999 mem: storing 0 in location 1199
 104 run: break-if off-screen?, 
9999 mem: location 1199 is 0
9999 run: jump-if fell through
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1194 is 1
9999 mem: location 1196 is 1006
9999 mem: location 1006 is 3
9999 mem: storing 0 in location 1200
 104 run: break-unless at-cursor-row?, 
9999 mem: location 1200 is 0
9999 run: jumping to instruction 31
 104 run: c:character <- get *curr, value:offset
9999 mem: location 1192 is 1164
9999 mem: location 1164 is 97
9999 mem: location 1165 is 1171
9999 mem: location 1166 is 1152
9999 mem: location 1192 is 1164
9999 run: address to copy is 1164
9999 run: its type is number
9999 mem: location 1164 is 97
9999 mem: storing 97 in location 1202
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1202 is 97
9999 mem: storing 0 in location 1203
 104 run: break-unless newline?, 
9999 mem: location 1203 is 0
9999 run: jumping to instruction 49
 104 run: at-right?:boolean <- equal column, right
9999 mem: location 1195 is 0
9999 mem: location 1190 is 9
9999 mem: storing 0 in location 1205
 104 run: break-unless at-right?, 
9999 mem: location 1205 is 0
9999 run: jumping to instruction 56
 104 run: curr <- next-duplex curr
9999 mem: location 1192 is 1164
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1164 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1164
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1164
9999 mem: location 1164 is 97
9999 mem: location 1165 is 1171
9999 mem: location 1166 is 1152
9999 mem: location 1169 is 1164
9999 run: address to copy is 1165
9999 run: its type is address
9999 mem: location 1165 is 1171
9999 mem: storing 1171 in location 1170
 105 run: reply result
9999 mem: location 1170 is 1171
9999 run: result 0 is 1171
9999 mem: storing 1171 in location 1192
 104 run: prev <- next-duplex prev
9999 mem: location 1193 is 1152
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1152 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1152
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1152
9999 mem: location 1152 is 167
9999 mem: location 1153 is 1164
9999 mem: location 1154 is 0
9999 mem: location 1169 is 1152
9999 run: address to copy is 1153
9999 run: its type is address
9999 mem: location 1153 is 1164
9999 mem: storing 1164 in location 1170
 105 run: reply result
9999 mem: location 1170 is 1164
9999 run: result 0 is 1164
9999 mem: storing 1164 in location 1193
 104 run: column <- add column, 1
9999 mem: location 1195 is 0
9999 mem: storing 1 in location 1195
 104 run: loop 
9999 run: jumping to instruction 21
 104 run: break-unless curr, 
9999 mem: location 1192 is 1171
9999 run: jump-unless fell through
 104 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1194 is 1
9999 mem: location 1191 is 5
9999 mem: storing 0 in location 1199
 104 run: break-if off-screen?, 
9999 mem: location 1199 is 0
9999 run: jump-if fell through
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1194 is 1
9999 mem: location 1196 is 1006
9999 mem: location 1006 is 3
9999 mem: storing 0 in location 1200
 104 run: break-unless at-cursor-row?, 
9999 mem: location 1200 is 0
9999 run: jumping to instruction 31
 104 run: c:character <- get *curr, value:offset
9999 mem: location 1192 is 1171
9999 mem: location 1171 is 98
9999 mem: location 1172 is 1174
9999 mem: location 1173 is 1164
9999 mem: location 1192 is 1171
9999 run: address to copy is 1171
9999 run: its type is number
9999 mem: location 1171 is 98
9999 mem: storing 98 in location 1202
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1202 is 98
9999 mem: storing 0 in location 1203
 104 run: break-unless newline?, 
9999 mem: location 1203 is 0
9999 run: jumping to instruction 49
 104 run: at-right?:boolean <- equal column, right
9999 mem: location 1195 is 1
9999 mem: location 1190 is 9
9999 mem: storing 0 in location 1205
 104 run: break-unless at-right?, 
9999 mem: location 1205 is 0
9999 run: jumping to instruction 56
 104 run: curr <- next-duplex curr
9999 mem: location 1192 is 1171
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1171 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1171
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1171
9999 mem: location 1171 is 98
9999 mem: location 1172 is 1174
9999 mem: location 1173 is 1164
9999 mem: location 1169 is 1171
9999 run: address to copy is 1172
9999 run: its type is address
9999 mem: location 1172 is 1174
9999 mem: storing 1174 in location 1170
 105 run: reply result
9999 mem: location 1170 is 1174
9999 run: result 0 is 1174
9999 mem: storing 1174 in location 1192
 104 run: prev <- next-duplex prev
9999 mem: location 1193 is 1164
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1164 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1164
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1164
9999 mem: location 1164 is 97
9999 mem: location 1165 is 1171
9999 mem: location 1166 is 1152
9999 mem: location 1169 is 1164
9999 run: address to copy is 1165
9999 run: its type is address
9999 mem: location 1165 is 1171
9999 mem: storing 1171 in location 1170
 105 run: reply result
9999 mem: location 1170 is 1171
9999 run: result 0 is 1171
9999 mem: storing 1171 in location 1193
 104 run: column <- add column, 1
9999 mem: location 1195 is 1
9999 mem: storing 2 in location 1195
 104 run: loop 
9999 run: jumping to instruction 21
 104 run: break-unless curr, 
9999 mem: location 1192 is 1174
9999 run: jump-unless fell through
 104 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1194 is 1
9999 mem: location 1191 is 5
9999 mem: storing 0 in location 1199
 104 run: break-if off-screen?, 
9999 mem: location 1199 is 0
9999 run: jump-if fell through
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1194 is 1
9999 mem: location 1196 is 1006
9999 mem: location 1006 is 3
9999 mem: storing 0 in location 1200
 104 run: break-unless at-cursor-row?, 
9999 mem: location 1200 is 0
9999 run: jumping to instruction 31
 104 run: c:character <- get *curr, value:offset
9999 mem: location 1192 is 1174
9999 mem: location 1174 is 99
9999 mem: location 1175 is 1177
9999 mem: location 1176 is 1171
9999 mem: location 1192 is 1174
9999 run: address to copy is 1174
9999 run: its type is number
9999 mem: location 1174 is 99
9999 mem: storing 99 in location 1202
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1202 is 99
9999 mem: storing 0 in location 1203
 104 run: break-unless newline?, 
9999 mem: location 1203 is 0
9999 run: jumping to instruction 49
 104 run: at-right?:boolean <- equal column, right
9999 mem: location 1195 is 2
9999 mem: location 1190 is 9
9999 mem: storing 0 in location 1205
 104 run: break-unless at-right?, 
9999 mem: location 1205 is 0
9999 run: jumping to instruction 56
 104 run: curr <- next-duplex curr
9999 mem: location 1192 is 1174
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1174 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1174
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1174
9999 mem: location 1174 is 99
9999 mem: location 1175 is 1177
9999 mem: location 1176 is 1171
9999 mem: location 1169 is 1174
9999 run: address to copy is 1175
9999 run: its type is address
9999 mem: location 1175 is 1177
9999 mem: storing 1177 in location 1170
 105 run: reply result
9999 mem: location 1170 is 1177
9999 run: result 0 is 1177
9999 mem: storing 1177 in location 1192
 104 run: prev <- next-duplex prev
9999 mem: location 1193 is 1171
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1171 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1171
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1171
9999 mem: location 1171 is 98
9999 mem: location 1172 is 1174
9999 mem: location 1173 is 1164
9999 mem: location 1169 is 1171
9999 run: address to copy is 1172
9999 run: its type is address
9999 mem: location 1172 is 1174
9999 mem: storing 1174 in location 1170
 105 run: reply result
9999 mem: location 1170 is 1174
9999 run: result 0 is 1174
9999 mem: storing 1174 in location 1193
 104 run: column <- add column, 1
9999 mem: location 1195 is 2
9999 mem: storing 3 in location 1195
 104 run: loop 
9999 run: jumping to instruction 21
 104 run: break-unless curr, 
9999 mem: location 1192 is 1177
9999 run: jump-unless fell through
 104 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1194 is 1
9999 mem: location 1191 is 5
9999 mem: storing 0 in location 1199
 104 run: break-if off-screen?, 
9999 mem: location 1199 is 0
9999 run: jump-if fell through
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1194 is 1
9999 mem: location 1196 is 1006
9999 mem: location 1006 is 3
9999 mem: storing 0 in location 1200
 104 run: break-unless at-cursor-row?, 
9999 mem: location 1200 is 0
9999 run: jumping to instruction 31
 104 run: c:character <- get *curr, value:offset
9999 mem: location 1192 is 1177
9999 mem: location 1177 is 10
9999 mem: location 1178 is 1180
9999 mem: location 1179 is 1174
9999 mem: location 1192 is 1177
9999 run: address to copy is 1177
9999 run: its type is number
9999 mem: location 1177 is 10
9999 mem: storing 10 in location 1202
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1202 is 10
9999 mem: storing 1 in location 1203
 104 run: break-unless newline?, 
9999 mem: location 1203 is 1
9999 run: jump-unless fell through
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1194 is 1
9999 mem: location 1196 is 1006
9999 mem: location 1006 is 3
9999 mem: storing 0 in location 1200
 104 run: break-unless at-cursor-row?, 
9999 mem: location 1200 is 0
9999 run: jumping to instruction 43
 104 run: row <- add row, 1
9999 mem: location 1194 is 1
9999 mem: storing 2 in location 1194
 104 run: column <- copy left
9999 mem: location 1189 is 0
9999 mem: storing 0 in location 1195
 104 run: curr <- next-duplex curr
9999 mem: location 1192 is 1177
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1177 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1177
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1177
9999 mem: location 1177 is 10
9999 mem: location 1178 is 1180
9999 mem: location 1179 is 1174
9999 mem: location 1169 is 1177
9999 run: address to copy is 1178
9999 run: its type is address
9999 mem: location 1178 is 1180
9999 mem: storing 1180 in location 1170
 105 run: reply result
9999 mem: location 1170 is 1180
9999 run: result 0 is 1180
9999 mem: storing 1180 in location 1192
 104 run: prev <- next-duplex prev
9999 mem: location 1193 is 1174
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1174 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1174
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1174
9999 mem: location 1174 is 99
9999 mem: location 1175 is 1177
9999 mem: location 1176 is 1171
9999 mem: location 1169 is 1174
9999 run: address to copy is 1175
9999 run: its type is address
9999 mem: location 1175 is 1177
9999 mem: storing 1177 in location 1170
 105 run: reply result
9999 mem: location 1170 is 1177
9999 run: result 0 is 1177
9999 mem: storing 1177 in location 1193
 104 run: loop +next-character:label
9999 run: jumping to instruction 22
 104 run: break-unless curr, 
9999 mem: location 1192 is 1180
9999 run: jump-unless fell through
 104 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1194 is 2
9999 mem: location 1191 is 5
9999 mem: storing 0 in location 1199
 104 run: break-if off-screen?, 
9999 mem: location 1199 is 0
9999 run: jump-if fell through
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1194 is 2
9999 mem: location 1196 is 1006
9999 mem: location 1006 is 3
9999 mem: storing 0 in location 1200
 104 run: break-unless at-cursor-row?, 
9999 mem: location 1200 is 0
9999 run: jumping to instruction 31
 104 run: c:character <- get *curr, value:offset
9999 mem: location 1192 is 1180
9999 mem: location 1180 is 100
9999 mem: location 1181 is 0
9999 mem: location 1182 is 1177
9999 mem: location 1192 is 1180
9999 run: address to copy is 1180
9999 run: its type is number
9999 mem: location 1180 is 100
9999 mem: storing 100 in location 1202
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1202 is 100
9999 mem: storing 0 in location 1203
 104 run: break-unless newline?, 
9999 mem: location 1203 is 0
9999 run: jumping to instruction 49
 104 run: at-right?:boolean <- equal column, right
9999 mem: location 1195 is 0
9999 mem: location 1190 is 9
9999 mem: storing 0 in location 1205
 104 run: break-unless at-right?, 
9999 mem: location 1205 is 0
9999 run: jumping to instruction 56
 104 run: curr <- next-duplex curr
9999 mem: location 1192 is 1180
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1180 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1180
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1180
9999 mem: location 1180 is 100
9999 mem: location 1181 is 0
9999 mem: location 1182 is 1177
9999 mem: location 1169 is 1180
9999 run: address to copy is 1181
9999 run: its type is address
9999 mem: location 1181 is 0
9999 mem: storing 0 in location 1170
 105 run: reply result
9999 mem: location 1170 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1192
 104 run: prev <- next-duplex prev
9999 mem: location 1193 is 1177
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1177 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1177
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1177
9999 mem: location 1177 is 10
9999 mem: location 1178 is 1180
9999 mem: location 1179 is 1174
9999 mem: location 1169 is 1177
9999 run: address to copy is 1178
9999 run: its type is address
9999 mem: location 1178 is 1180
9999 mem: storing 1180 in location 1170
 105 run: reply result
9999 mem: location 1170 is 1180
9999 run: result 0 is 1180
9999 mem: storing 1180 in location 1193
 104 run: column <- add column, 1
9999 mem: location 1195 is 0
9999 mem: storing 1 in location 1195
 104 run: loop 
9999 run: jumping to instruction 21
 104 run: break-unless curr, 
9999 mem: location 1192 is 0
9999 run: jumping to instruction 61
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1194 is 2
9999 mem: location 1196 is 1006
9999 mem: location 1006 is 3
9999 mem: storing 0 in location 1200
 104 run: cursor-outside-line?:boolean <- lesser-or-equal column, *cursor-column
9999 mem: location 1195 is 1
9999 mem: location 1197 is 1007
9999 mem: location 1007 is 5
9999 mem: storing 1 in location 1206
 104 run: before-cursor-on-same-line?:boolean <- and at-cursor-row?, cursor-outside-line?
9999 mem: location 1200 is 0
9999 mem: location 1206 is 1
9999 mem: storing 0 in location 1207
 104 run: above-cursor-row?:boolean <- lesser-than row, *cursor-row
9999 mem: location 1194 is 2
9999 mem: location 1196 is 1006
9999 mem: location 1006 is 3
9999 mem: storing 1 in location 1208
 104 run: before-cursor?:boolean <- or before-cursor-on-same-line?, above-cursor-row?
9999 mem: location 1207 is 0
9999 mem: location 1208 is 1
9999 mem: storing 1 in location 1209
 104 run: break-unless before-cursor?, 
9999 mem: location 1209 is 1
9999 run: jump-unless fell through
 104 run: *cursor-row <- copy row
9999 mem: location 1194 is 2
9999 mem: location 1196 is 1006
9999 mem: location 1196 is 1006
9999 mem: storing 2 in location 1006
 104 run: *cursor-column <- copy column
9999 mem: location 1195 is 1
9999 mem: location 1197 is 1007
9999 mem: location 1197 is 1007
9999 mem: storing 1 in location 1007
 104 run: *before-cursor <- copy prev
9999 mem: location 1193 is 1180
9999 mem: location 1198 is 1003
9999 mem: location 1198 is 1003
9999 mem: storing 1180 in location 1003
 104 run: reply editor/same-as-ingredient:1
9999 mem: location 1186 is 1000
9999 run: result 0 is 1000
9999 mem: storing 1000 in location 1287
 103 run: reply 1/true
 102 run: loop +next-event:label
9999 run: jumping to instruction 6
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1135 is 1282
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1282 in location 1258
 103 run: break-unless x, 
9999 mem: location 1258 is 1282
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1258 is 1282
9999 mem: location 1282 is 1
9999 mem: location 1283 is 1269
9999 mem: location 1258 is 1282
9999 run: address to copy is 1282
9999 mem: storing 1282 in location 1259
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1258 is 1282
9999 mem: location 1282 is 1
9999 mem: location 1283 is 1269
9999 mem: location 1258 is 1282
9999 run: address to copy is 1283
9999 run: its type is address
9999 mem: location 1283 is 1269
9999 mem: storing 1269 in location 1260
 103 run: max:number <- length *buf
9999 mem: location 1260 is 1269
9999 mem: storing 3 in location 1261
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1259 is 1282
9999 mem: location 1282 is 1
9999 mem: location 1261 is 3
9999 mem: storing 0 in location 1262
 103 run: break-unless done?, 
9999 mem: location 1262 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index *buf, *idx
9999 mem: location 1260 is 1269
9999 mem: location 1259 is 1282
9999 mem: location 1282 is 1
9999 run: address to copy is 1274
9999 run: its type is event
9999 mem: location 1274 is 0
9999 mem: location 1275 is 101
9999 mem: location 1276 is 0
9999 mem: location 1277 is 0
9999 mem: storing 0 in location 1264
9999 mem: storing 101 in location 1265
9999 mem: storing 0 in location 1266
9999 mem: storing 0 in location 1267
 103 run: *idx <- add *idx, 1
9999 mem: location 1259 is 1282
9999 mem: location 1282 is 1
9999 mem: location 1259 is 1282
9999 mem: storing 2 in location 1282
 103 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1264 is 0
9999 mem: location 1265 is 101
9999 mem: location 1266 is 0
9999 mem: location 1267 is 0
9999 mem: location 1258 is 1282
9999 run: result 0 is [0, 101, 0, 0]
9999 run: result 1 is 1282
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1137
9999 mem: storing 101 in location 1138
9999 mem: storing 0 in location 1139
9999 mem: storing 0 in location 1140
9999 mem: storing 1282 in location 1135
9999 mem: storing 1 in location 1141
9999 mem: storing 0 in location 1142
 102 run: loop-unless found?, 
9999 mem: location 1141 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1142 is 0
9999 run: jump-if fell through
 102 run: trace 10, [app], [next-event]
  10 app: next-event
 102 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1137 is 0
9999 mem: location 1138 is 101
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: storing 0 in location 1143
 102 run: break-unless t, 
9999 mem: location 1143 is 0
9999 run: jumping to instruction 15
 102 run: break-if t, 
9999 mem: location 1143 is 0
9999 run: jump-if fell through
 102 run: handle-keyboard-event screen, editor, e
9999 mem: location 1134 is 1009
9999 mem: location 1136 is 1000
9999 mem: location 1137 is 0
9999 mem: location 1138 is 101
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 56
9999 mem: new alloc: 1298
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1300
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1301
 103 run: e:event <- next-ingredient 
9999 mem: storing 0 in location 1302
9999 mem: storing 101 in location 1303
9999 mem: storing 0 in location 1304
9999 mem: storing 0 in location 1305
 103 run: jump-if editor, 1:offset
9999 mem: location 1301 is 1000
9999 run: jumping to instruction 6
 103 run: hide-screen screen
9999 mem: location 1300 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1355
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1357
schedule: hide-screen/handle-keyboard-event/editor-event-loop/run1001/scenario-editor-inserts-characters-at-cursor-5
 104 run: break-unless screen, 
9999 mem: location 1357 is 1009
9999 run: jump-unless fell through
 104 run: reply screen
9999 mem: location 1357 is 1009
 103 run: screen-height:number <- screen-height screen
9999 mem: location 1300 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1169
 104 run: break-unless sc, 
9999 mem: location 1169 is 1009
9999 run: jump-unless fell through
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1169 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1170
 104 run: reply height
9999 mem: location 1170 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1306
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1301 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1180
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1301 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1307
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1301 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1180
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1301 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1308
 103 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1301 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1180
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1301 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1309
 103 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1301 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1180
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1301 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1310
 103 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1301 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1180
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1301 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1311
 103 run: save-row:number <- copy *cursor-row
9999 mem: location 1310 is 1006
9999 mem: location 1006 is 2
9999 mem: location 1310 is 1006
9999 mem: location 1310 is 1006
9999 mem: storing 2 in location 1312
 103 run: save-column:number <- copy *cursor-column
9999 mem: location 1311 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1311 is 1007
9999 mem: location 1311 is 1007
9999 mem: storing 1 in location 1313
 103 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1302 is 0
9999 mem: location 1303 is 101
9999 mem: location 1304 is 0
9999 mem: location 1305 is 0
9999 mem: storing 1303 in location 1314
 103 run: break-unless c, 
9999 mem: location 1314 is 1303
9999 run: jump-unless fell through
 103 run: ctrl-b?:boolean <- equal *c, 2/ctrl-f
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 101
9999 mem: storing 0 in location 1315
 103 run: break-unless ctrl-b?, 
9999 mem: location 1315 is 0
9999 run: jumping to instruction 32
 103 run: ctrl-f?:boolean <- equal *c, 6/ctrl-f
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 101
9999 mem: storing 0 in location 1318
 103 run: break-unless ctrl-f?, 
9999 mem: location 1318 is 0
9999 run: jumping to instruction 46
 103 run: ctrl-k?:boolean <- equal *c, 11/ctrl-k
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 101
9999 mem: storing 0 in location 1319
 103 run: break-unless ctrl-k?, 
9999 mem: location 1319 is 0
9999 run: jumping to instruction 60
 103 run: ctrl-u?:boolean <- equal *c, 21/ctrl-u
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 101
9999 mem: storing 0 in location 1320
 103 run: break-unless ctrl-u?, 
9999 mem: location 1320 is 0
9999 run: jumping to instruction 74
 103 run: ctrl-e?:boolean <- equal *c, 5/ctrl-e
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 101
9999 mem: storing 0 in location 1321
 103 run: break-unless ctrl-e?, 
9999 mem: location 1321 is 0
9999 run: jumping to instruction 88
 103 run: ctrl-a?:boolean <- equal *c, 1/ctrl-a
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 101
9999 mem: storing 0 in location 1322
 103 run: break-unless ctrl-a?, 
9999 mem: location 1322 is 0
9999 run: jumping to instruction 102
 103 run: backspace?:boolean <- equal *c, 8/backspace
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 101
9999 mem: storing 0 in location 1323
 103 run: break-unless backspace?, 
9999 mem: location 1323 is 0
9999 run: jumping to instruction 116
 103 run: tab?:boolean <- equal *c, 9/tab
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 101
9999 mem: storing 0 in location 1324
 103 run: break-unless tab?, 
9999 mem: location 1324 is 0
9999 run: jumping to instruction 131
 103 run: regular-character?:boolean <- greater-or-equal *c, 32/space
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 101
9999 mem: storing 1 in location 1325
 103 run: newline?:boolean <- equal *c, 10/newline
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 101
9999 mem: storing 0 in location 1326
 103 run: regular-character? <- or regular-character?, newline?
9999 mem: location 1325 is 1
9999 mem: location 1326 is 0
9999 mem: storing 1 in location 1325
 103 run: break-if regular-character?, 
9999 mem: location 1325 is 1
9999 run: jumping to instruction 142
 103 run: editor, screen <- insert-at-cursor editor, *c, screen
9999 mem: location 1301 is 1000
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 101
9999 mem: location 1300 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 35
9999 mem: new alloc: 1358
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1360
 104 run: c:character <- next-ingredient 
9999 mem: storing 101 in location 1361
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1362
 104 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1360 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1180
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1360 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1363
 104 run: insert-duplex c, *before-cursor
9999 mem: location 1361 is 101
9999 mem: location 1363 is 1003
9999 mem: location 1003 is 1180
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 105 run: x:location <- next-ingredient 
9999 mem: storing 101 in location 1146
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1180 in location 1147
 105 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: storing 1355 in location 1148
 105 run: val:address:location <- get-address *new-node, value:offset
9999 mem: location 1148 is 1355
9999 mem: location 1355 is 0
9999 mem: location 1356 is 0
9999 mem: location 1357 is 0
9999 mem: location 1148 is 1355
9999 run: address to copy is 1355
9999 mem: storing 1355 in location 1149
 105 run: *val <- copy x
9999 mem: location 1146 is 101
9999 mem: location 1149 is 1355
9999 mem: location 1149 is 1355
9999 mem: storing 101 in location 1355
 105 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1147 is 1180
9999 mem: location 1180 is 100
9999 mem: location 1181 is 0
9999 mem: location 1182 is 1177
9999 mem: location 1147 is 1180
9999 run: address to copy is 1181
9999 run: its type is address
9999 mem: location 1181 is 0
9999 mem: storing 0 in location 1150
 105 run: y:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1147 is 1180
9999 mem: location 1180 is 100
9999 mem: location 1181 is 0
9999 mem: location 1182 is 1177
9999 mem: location 1147 is 1180
9999 run: address to copy is 1181
9999 mem: storing 1181 in location 1151
 105 run: *y <- copy new-node
9999 mem: location 1148 is 1355
9999 mem: location 1151 is 1181
9999 mem: location 1151 is 1181
9999 mem: storing 1355 in location 1181
 105 run: y <- get-address *new-node, prev:offset
9999 mem: location 1148 is 1355
9999 mem: location 1355 is 101
9999 mem: location 1356 is 0
9999 mem: location 1357 is 0
9999 mem: location 1148 is 1355
9999 run: address to copy is 1357
9999 mem: storing 1357 in location 1151
 105 run: *y <- copy in
9999 mem: location 1147 is 1180
9999 mem: location 1151 is 1357
9999 mem: location 1151 is 1357
9999 mem: storing 1180 in location 1357
 105 run: y <- get-address *new-node, next:offset
9999 mem: location 1148 is 1355
9999 mem: location 1355 is 101
9999 mem: location 1356 is 0
9999 mem: location 1357 is 1180
9999 mem: location 1148 is 1355
9999 run: address to copy is 1356
9999 mem: storing 1356 in location 1151
 105 run: *y <- copy next-node
9999 mem: location 1150 is 0
9999 mem: location 1151 is 1356
9999 mem: location 1151 is 1356
9999 mem: storing 0 in location 1356
 105 run: jump-if next-node, 1:offset
9999 mem: location 1150 is 0
9999 run: jump-if fell through
 105 run: reply new-node
9999 mem: location 1148 is 1355
 104 run: *before-cursor <- next-duplex *before-cursor
9999 mem: location 1363 is 1003
9999 mem: location 1003 is 1180
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1180 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1180
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1180
9999 mem: location 1180 is 100
9999 mem: location 1181 is 1355
9999 mem: location 1182 is 1177
9999 mem: location 1169 is 1180
9999 run: address to copy is 1181
9999 run: its type is address
9999 mem: location 1181 is 1355
9999 mem: storing 1355 in location 1170
 105 run: reply result
9999 mem: location 1170 is 1355
9999 run: result 0 is 1355
9999 mem: location 1363 is 1003
9999 mem: storing 1355 in location 1003
 104 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1360 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1355
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1360 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1364
 104 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1360 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1355
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1360 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1365
 104 run: left:number <- get *editor, left:offset
9999 mem: location 1360 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1355
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1360 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1366
 104 run: right:number <- get *editor, right:offset
9999 mem: location 1360 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1355
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1360 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1367
 104 run: save-row:number <- copy *cursor-row
9999 mem: location 1364 is 1006
9999 mem: location 1006 is 2
9999 mem: location 1364 is 1006
9999 mem: location 1364 is 1006
9999 mem: storing 2 in location 1368
 104 run: save-column:number <- copy *cursor-column
9999 mem: location 1365 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1365 is 1007
9999 mem: location 1365 is 1007
9999 mem: storing 1 in location 1369
 104 run: screen-width:number <- screen-width screen
9999 mem: location 1362 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1169
 105 run: break-unless sc, 
9999 mem: location 1169 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1169 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1170
 105 run: reply width
9999 mem: location 1170 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1370
 104 run: screen-height:number <- screen-height screen
9999 mem: location 1362 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1169
 105 run: break-unless sc, 
9999 mem: location 1169 is 1009
9999 run: jump-unless fell through
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1169 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1170
 105 run: reply height
9999 mem: location 1170 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1371
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1361 is 101
9999 mem: storing 0 in location 1372
 104 run: break-unless newline?, 
9999 mem: location 1372 is 0
9999 run: jumping to instruction 53
 104 run: wrap-column:number <- subtract right, 1
9999 mem: location 1367 is 9
9999 mem: storing 8 in location 1384
 104 run: at-wrap?:boolean <- greater-or-equal *cursor-column, wrap-column
9999 mem: location 1365 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1384 is 8
9999 mem: storing 0 in location 1385
 104 run: break-unless at-wrap?, 
9999 mem: location 1385 is 0
9999 run: jumping to instruction 77
 104 run: *cursor-column <- add *cursor-column, 1
9999 mem: location 1365 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1365 is 1007
9999 mem: storing 2 in location 1007
 104 run: next:address:duplex-list <- next-duplex *before-cursor
9999 mem: location 1363 is 1003
9999 mem: location 1003 is 1355
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1355 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1355
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1355
9999 mem: location 1355 is 101
9999 mem: location 1356 is 0
9999 mem: location 1357 is 1180
9999 mem: location 1169 is 1355
9999 run: address to copy is 1356
9999 run: its type is address
9999 mem: location 1356 is 0
9999 mem: storing 0 in location 1170
 105 run: reply result
9999 mem: location 1170 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1386
 104 run: at-end?:boolean <- equal next, 0/null
9999 mem: location 1386 is 0
9999 mem: storing 1 in location 1387
 104 run: break-unless at-end?, 
9999 mem: location 1387 is 1
9999 run: jump-unless fell through
 104 run: bottom:number <- subtract screen-height, 1
9999 mem: location 1371 is 5
9999 mem: storing 4 in location 1388
 104 run: at-bottom?:boolean <- equal save-row, bottom
9999 mem: location 1368 is 2
9999 mem: location 1388 is 4
9999 mem: storing 0 in location 1389
 104 run: at-right?:boolean <- equal save-column, right
9999 mem: location 1369 is 1
9999 mem: location 1367 is 9
9999 mem: storing 0 in location 1390
 104 run: overflow?:boolean <- and at-bottom?, at-right?
9999 mem: location 1389 is 0
9999 mem: location 1390 is 0
9999 mem: storing 0 in location 1391
 104 run: break-if overflow?, 
9999 mem: location 1391 is 0
9999 run: jump-if fell through
 104 run: move-cursor screen, save-row, save-column
9999 mem: location 1362 is 1009
9999 mem: location 1368 is 2
9999 mem: location 1369 is 1
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1212
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 2 in location 1213
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 1 in location 1214
 105 run: break-unless sc, 
9999 mem: location 1212 is 1009
9999 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1212 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 3
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1212 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1215
 105 run: *row <- copy new-row
9999 mem: location 1213 is 2
9999 mem: location 1215 is 1011
9999 mem: location 1215 is 1011
9999 mem: storing 2 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1212 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1212 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1216
 105 run: *column <- copy new-column
9999 mem: location 1214 is 1
9999 mem: location 1216 is 1012
9999 mem: location 1216 is 1012
9999 mem: storing 1 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1212 is 1009
 104 run: print-character screen, c
9999 mem: location 1362 is 1009
9999 mem: location 1361 is 101
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1219
 105 run: c:character <- next-ingredient 
9999 mem: storing 101 in location 1220
 105 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1221
9999 mem: storing 0 in location 1222
 105 run: break-if color-found?, 
9999 mem: location 1222 is 0
9999 run: jump-if fell through
 105 run: color <- copy 7/white
9999 mem: storing 7 in location 1221
 105 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1223
9999 mem: storing 0 in location 1224
 105 run: break-if bg-color-found?, 
9999 mem: location 1224 is 0
9999 run: jump-if fell through
 105 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1223
 105 run: trace 90, [print-character], c
9999 mem: location 1220 is 101
  90 print-character: 101 
 105 run: break-unless sc, 
9999 mem: location 1219 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1225
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1226
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1227
 105 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 2
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 22
 105 run: legal? <- lesser-than *row, height
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 2
9999 mem: location 1226 is 5
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 25
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1229
 105 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 29
 105 run: legal? <- lesser-than *column, width
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1225 is 10
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 32
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1220 is 101
9999 mem: storing 0 in location 1230
 105 run: break-unless newline?, 
9999 mem: location 1230 is 0
9999 run: jumping to instruction 43
 105 run: index:number <- multiply *row, width
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 2
9999 mem: location 1225 is 10
9999 mem: storing 20 in location 1233
 105 run: index <- add index, *column
9999 mem: location 1233 is 20
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 21 in location 1233
 105 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1234
 105 run: len:number <- length *buf
9999 mem: location 1234 is 1014
9999 mem: storing 50 in location 1235
 105 run: backspace?:boolean <- equal c, 8
9999 mem: location 1220 is 101
9999 mem: storing 0 in location 1236
 105 run: break-unless backspace?, 
9999 mem: location 1236 is 0
9999 run: jumping to instruction 63
 105 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1234 is 1014
9999 mem: location 1233 is 21
9999 mem: storing 1057 in location 1238
 105 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1238 is 1057
9999 mem: location 1057 is 0
9999 mem: location 1058 is 7
9999 mem: location 1238 is 1057
9999 run: address to copy is 1057
9999 mem: storing 1057 in location 1239
 105 run: *cursor-contents <- copy c
9999 mem: location 1220 is 101
9999 mem: location 1239 is 1057
9999 mem: location 1239 is 1057
9999 mem: storing 101 in location 1057
 105 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1238 is 1057
9999 mem: location 1057 is 101
9999 mem: location 1058 is 7
9999 mem: location 1238 is 1057
9999 run: address to copy is 1058
9999 mem: storing 1058 in location 1240
 105 run: *cursor-color <- copy color
9999 mem: location 1221 is 7
9999 mem: location 1240 is 1058
9999 mem: location 1240 is 1058
9999 mem: storing 7 in location 1058
 105 run: right:number <- subtract width, 1
9999 mem: location 1225 is 10
9999 mem: storing 9 in location 1241
 105 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1241 is 9
9999 mem: storing 0 in location 1242
 105 run: break-if at-right?, 
9999 mem: location 1242 is 0
9999 run: jump-if fell through
 105 run: *column <- add *column, 1
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1229 is 1012
9999 mem: storing 2 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1219 is 1009
 104 run: reply editor/same-as-ingredient:0, screen/same-as-ingredient:2
9999 mem: location 1360 is 1000
9999 mem: location 1362 is 1009
9999 run: result 0 is 1000
9999 run: result 1 is 1009
9999 mem: storing 1000 in location 1301
9999 mem: storing 1009 in location 1300
 103 run: screen <- move-cursor screen, *cursor-row, *cursor-column
9999 mem: location 1300 is 1009
9999 mem: location 1310 is 1006
9999 mem: location 1006 is 2
9999 mem: location 1311 is 1007
9999 mem: location 1007 is 2
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1212
 104 run: new-row:number <- next-ingredient 
9999 mem: storing 2 in location 1213
 104 run: new-column:number <- next-ingredient 
9999 mem: storing 2 in location 1214
 104 run: break-unless sc, 
9999 mem: location 1212 is 1009
9999 run: jump-unless fell through
 104 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1212 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1212 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1215
 104 run: *row <- copy new-row
9999 mem: location 1213 is 2
9999 mem: location 1215 is 1011
9999 mem: location 1215 is 1011
9999 mem: storing 2 in location 1011
 104 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1212 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1212 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1216
 104 run: *column <- copy new-column
9999 mem: location 1214 is 2
9999 mem: location 1216 is 1012
9999 mem: location 1216 is 1012
9999 mem: storing 2 in location 1012
 104 run: reply sc/same-as-ingredient:0
9999 mem: location 1212 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1300
 103 run: show-screen screen
9999 mem: location 1300 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1394
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1396
 104 run: break-unless screen, 
9999 mem: location 1396 is 1009
9999 run: jump-unless fell through
 104 run: reply screen
9999 mem: location 1396 is 1009
 103 run: reply screen/same-as-ingredient:0, editor/same-as-ingredient:1
9999 mem: location 1300 is 1009
9999 mem: location 1301 is 1000
 102 run: loop 
9999 run: jumping to instruction 5
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1135 is 1282
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1282 in location 1258
 103 run: break-unless x, 
9999 mem: location 1258 is 1282
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1258 is 1282
9999 mem: location 1282 is 2
9999 mem: location 1283 is 1269
9999 mem: location 1258 is 1282
9999 run: address to copy is 1282
9999 mem: storing 1282 in location 1259
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1258 is 1282
9999 mem: location 1282 is 2
9999 mem: location 1283 is 1269
9999 mem: location 1258 is 1282
9999 run: address to copy is 1283
9999 run: its type is address
9999 mem: location 1283 is 1269
9999 mem: storing 1269 in location 1260
 103 run: max:number <- length *buf
9999 mem: location 1260 is 1269
9999 mem: storing 3 in location 1261
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1259 is 1282
9999 mem: location 1282 is 2
9999 mem: location 1261 is 3
9999 mem: storing 0 in location 1262
 103 run: break-unless done?, 
9999 mem: location 1262 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index *buf, *idx
9999 mem: location 1260 is 1269
9999 mem: location 1259 is 1282
9999 mem: location 1282 is 2
9999 run: address to copy is 1278
9999 run: its type is event
9999 mem: location 1278 is 0
9999 mem: location 1279 is 102
9999 mem: location 1280 is 0
9999 mem: location 1281 is 0
9999 mem: storing 0 in location 1264
9999 mem: storing 102 in location 1265
9999 mem: storing 0 in location 1266
9999 mem: storing 0 in location 1267
 103 run: *idx <- add *idx, 1
9999 mem: location 1259 is 1282
9999 mem: location 1282 is 2
9999 mem: location 1259 is 1282
9999 mem: storing 3 in location 1282
 103 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1264 is 0
9999 mem: location 1265 is 102
9999 mem: location 1266 is 0
9999 mem: location 1267 is 0
9999 mem: location 1258 is 1282
9999 run: result 0 is [0, 102, 0, 0]
9999 run: result 1 is 1282
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1137
9999 mem: storing 102 in location 1138
9999 mem: storing 0 in location 1139
9999 mem: storing 0 in location 1140
9999 mem: storing 1282 in location 1135
9999 mem: storing 1 in location 1141
9999 mem: storing 0 in location 1142
 102 run: loop-unless found?, 
9999 mem: location 1141 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1142 is 0
9999 run: jump-if fell through
 102 run: trace 10, [app], [next-event]
  10 app: next-event
 102 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1137 is 0
9999 mem: location 1138 is 102
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
9999 mem: storing 0 in location 1143
 102 run: break-unless t, 
9999 mem: location 1143 is 0
9999 run: jumping to instruction 15
 102 run: break-if t, 
9999 mem: location 1143 is 0
9999 run: jump-if fell through
 102 run: handle-keyboard-event screen, editor, e
9999 mem: location 1134 is 1009
9999 mem: location 1136 is 1000
9999 mem: location 1137 is 0
9999 mem: location 1138 is 102
9999 mem: location 1139 is 0
9999 mem: location 1140 is 0
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 56
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1300
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1301
 103 run: e:event <- next-ingredient 
9999 mem: storing 0 in location 1302
9999 mem: storing 102 in location 1303
9999 mem: storing 0 in location 1304
9999 mem: storing 0 in location 1305
 103 run: jump-if editor, 1:offset
9999 mem: location 1301 is 1000
9999 run: jumping to instruction 6
 103 run: hide-screen screen
9999 mem: location 1300 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 2
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1396
 104 run: break-unless screen, 
9999 mem: location 1396 is 1009
9999 run: jump-unless fell through
 104 run: reply screen
9999 mem: location 1396 is 1009
 103 run: screen-height:number <- screen-height screen
9999 mem: location 1300 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1169
 104 run: break-unless sc, 
9999 mem: location 1169 is 1009
9999 run: jump-unless fell through
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1169 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1170
 104 run: reply height
9999 mem: location 1170 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1306
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1301 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1355
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1301 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1307
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1301 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1355
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1301 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1308
 103 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1301 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1355
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1301 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1309
 103 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1301 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1355
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1301 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1310
 103 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1301 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1355
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1301 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1311
 103 run: save-row:number <- copy *cursor-row
9999 mem: location 1310 is 1006
9999 mem: location 1006 is 2
9999 mem: location 1310 is 1006
9999 mem: location 1310 is 1006
9999 mem: storing 2 in location 1312
 103 run: save-column:number <- copy *cursor-column
9999 mem: location 1311 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1311 is 1007
9999 mem: location 1311 is 1007
9999 mem: storing 2 in location 1313
 103 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1302 is 0
9999 mem: location 1303 is 102
9999 mem: location 1304 is 0
9999 mem: location 1305 is 0
9999 mem: storing 1303 in location 1314
 103 run: break-unless c, 
9999 mem: location 1314 is 1303
9999 run: jump-unless fell through
 103 run: ctrl-b?:boolean <- equal *c, 2/ctrl-f
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 102
9999 mem: storing 0 in location 1315
 103 run: break-unless ctrl-b?, 
9999 mem: location 1315 is 0
9999 run: jumping to instruction 32
 103 run: ctrl-f?:boolean <- equal *c, 6/ctrl-f
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 102
9999 mem: storing 0 in location 1318
 103 run: break-unless ctrl-f?, 
9999 mem: location 1318 is 0
9999 run: jumping to instruction 46
 103 run: ctrl-k?:boolean <- equal *c, 11/ctrl-k
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 102
9999 mem: storing 0 in location 1319
 103 run: break-unless ctrl-k?, 
9999 mem: location 1319 is 0
9999 run: jumping to instruction 60
 103 run: ctrl-u?:boolean <- equal *c, 21/ctrl-u
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 102
9999 mem: storing 0 in location 1320
 103 run: break-unless ctrl-u?, 
9999 mem: location 1320 is 0
9999 run: jumping to instruction 74
 103 run: ctrl-e?:boolean <- equal *c, 5/ctrl-e
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 102
9999 mem: storing 0 in location 1321
 103 run: break-unless ctrl-e?, 
9999 mem: location 1321 is 0
9999 run: jumping to instruction 88
 103 run: ctrl-a?:boolean <- equal *c, 1/ctrl-a
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 102
9999 mem: storing 0 in location 1322
 103 run: break-unless ctrl-a?, 
9999 mem: location 1322 is 0
9999 run: jumping to instruction 102
 103 run: backspace?:boolean <- equal *c, 8/backspace
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 102
9999 mem: storing 0 in location 1323
 103 run: break-unless backspace?, 
9999 mem: location 1323 is 0
9999 run: jumping to instruction 116
 103 run: tab?:boolean <- equal *c, 9/tab
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 102
9999 mem: storing 0 in location 1324
 103 run: break-unless tab?, 
9999 mem: location 1324 is 0
9999 run: jumping to instruction 131
 103 run: regular-character?:boolean <- greater-or-equal *c, 32/space
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 102
9999 mem: storing 1 in location 1325
 103 run: newline?:boolean <- equal *c, 10/newline
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 102
9999 mem: storing 0 in location 1326
 103 run: regular-character? <- or regular-character?, newline?
9999 mem: location 1325 is 1
9999 mem: location 1326 is 0
9999 mem: storing 1 in location 1325
 103 run: break-if regular-character?, 
9999 mem: location 1325 is 1
9999 run: jumping to instruction 142
 103 run: editor, screen <- insert-at-cursor editor, *c, screen
9999 mem: location 1301 is 1000
9999 mem: location 1314 is 1303
9999 mem: location 1303 is 102
9999 mem: location 1300 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 35
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1360
 104 run: c:character <- next-ingredient 
9999 mem: storing 102 in location 1361
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1362
 104 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1360 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1355
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1360 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1363
 104 run: insert-duplex c, *before-cursor
9999 mem: location 1361 is 102
9999 mem: location 1363 is 1003
9999 mem: location 1003 is 1355
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 105 run: x:location <- next-ingredient 
9999 mem: storing 102 in location 1146
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1355 in location 1147
 105 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: storing 1394 in location 1148
 105 run: val:address:location <- get-address *new-node, value:offset
9999 mem: location 1148 is 1394
9999 mem: location 1394 is 0
9999 mem: location 1395 is 0
9999 mem: location 1396 is 0
9999 mem: location 1148 is 1394
9999 run: address to copy is 1394
9999 mem: storing 1394 in location 1149
 105 run: *val <- copy x
9999 mem: location 1146 is 102
9999 mem: location 1149 is 1394
9999 mem: location 1149 is 1394
9999 mem: storing 102 in location 1394
 105 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1147 is 1355
9999 mem: location 1355 is 101
9999 mem: location 1356 is 0
9999 mem: location 1357 is 1180
9999 mem: location 1147 is 1355
9999 run: address to copy is 1356
9999 run: its type is address
9999 mem: location 1356 is 0
9999 mem: storing 0 in location 1150
 105 run: y:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1147 is 1355
9999 mem: location 1355 is 101
9999 mem: location 1356 is 0
9999 mem: location 1357 is 1180
9999 mem: location 1147 is 1355
9999 run: address to copy is 1356
9999 mem: storing 1356 in location 1151
 105 run: *y <- copy new-node
9999 mem: location 1148 is 1394
9999 mem: location 1151 is 1356
9999 mem: location 1151 is 1356
9999 mem: storing 1394 in location 1356
 105 run: y <- get-address *new-node, prev:offset
9999 mem: location 1148 is 1394
9999 mem: location 1394 is 102
9999 mem: location 1395 is 0
9999 mem: location 1396 is 0
9999 mem: location 1148 is 1394
9999 run: address to copy is 1396
9999 mem: storing 1396 in location 1151
 105 run: *y <- copy in
9999 mem: location 1147 is 1355
9999 mem: location 1151 is 1396
9999 mem: location 1151 is 1396
9999 mem: storing 1355 in location 1396
 105 run: y <- get-address *new-node, next:offset
9999 mem: location 1148 is 1394
9999 mem: location 1394 is 102
9999 mem: location 1395 is 0
9999 mem: location 1396 is 1355
9999 mem: location 1148 is 1394
9999 run: address to copy is 1395
9999 mem: storing 1395 in location 1151
 105 run: *y <- copy next-node
9999 mem: location 1150 is 0
9999 mem: location 1151 is 1395
9999 mem: location 1151 is 1395
9999 mem: storing 0 in location 1395
 105 run: jump-if next-node, 1:offset
9999 mem: location 1150 is 0
9999 run: jump-if fell through
 105 run: reply new-node
9999 mem: location 1148 is 1394
 104 run: *before-cursor <- next-duplex *before-cursor
9999 mem: location 1363 is 1003
9999 mem: location 1003 is 1355
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1355 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1355
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1355
9999 mem: location 1355 is 101
9999 mem: location 1356 is 1394
9999 mem: location 1357 is 1180
9999 mem: location 1169 is 1355
9999 run: address to copy is 1356
9999 run: its type is address
9999 mem: location 1356 is 1394
9999 mem: storing 1394 in location 1170
 105 run: reply result
9999 mem: location 1170 is 1394
9999 run: result 0 is 1394
9999 mem: location 1363 is 1003
9999 mem: storing 1394 in location 1003
 104 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1360 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1394
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1360 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1364
 104 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1360 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1394
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1360 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1365
 104 run: left:number <- get *editor, left:offset
9999 mem: location 1360 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1394
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1360 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1366
 104 run: right:number <- get *editor, right:offset
9999 mem: location 1360 is 1000
9999 mem: location 1000 is 1152
9999 mem: location 1001 is 1152
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1394
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1360 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1367
 104 run: save-row:number <- copy *cursor-row
9999 mem: location 1364 is 1006
9999 mem: location 1006 is 2
9999 mem: location 1364 is 1006
9999 mem: location 1364 is 1006
9999 mem: storing 2 in location 1368
 104 run: save-column:number <- copy *cursor-column
9999 mem: location 1365 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1365 is 1007
9999 mem: location 1365 is 1007
9999 mem: storing 2 in location 1369
 104 run: screen-width:number <- screen-width screen
9999 mem: location 1362 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1169
 105 run: break-unless sc, 
9999 mem: location 1169 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1169 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1170
 105 run: reply width
9999 mem: location 1170 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1370
 104 run: screen-height:number <- screen-height screen
9999 mem: location 1362 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1169
 105 run: break-unless sc, 
9999 mem: location 1169 is 1009
9999 run: jump-unless fell through
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1169 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1169 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1170
 105 run: reply height
9999 mem: location 1170 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1371
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1361 is 102
9999 mem: storing 0 in location 1372
 104 run: break-unless newline?, 
9999 mem: location 1372 is 0
9999 run: jumping to instruction 53
 104 run: wrap-column:number <- subtract right, 1
9999 mem: location 1367 is 9
9999 mem: storing 8 in location 1384
 104 run: at-wrap?:boolean <- greater-or-equal *cursor-column, wrap-column
9999 mem: location 1365 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1384 is 8
9999 mem: storing 0 in location 1385
 104 run: break-unless at-wrap?, 
9999 mem: location 1385 is 0
9999 run: jumping to instruction 77
 104 run: *cursor-column <- add *cursor-column, 1
9999 mem: location 1365 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1365 is 1007
9999 mem: storing 3 in location 1007
 104 run: next:address:duplex-list <- next-duplex *before-cursor
9999 mem: location 1363 is 1003
9999 mem: location 1003 is 1394
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1394 in location 1169
 105 run: jump-if in, 1:offset
9999 mem: location 1169 is 1394
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1169 is 1394
9999 mem: location 1394 is 102
9999 mem: location 1395 is 0
9999 mem: location 1396 is 1355
9999 mem: location 1169 is 1394
9999 run: address to copy is 1395
9999 run: its type is address
9999 mem: location 1395 is 0
9999 mem: storing 0 in location 1170
 105 run: reply result
9999 mem: location 1170 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1386
 104 run: at-end?:boolean <- equal next, 0/null
9999 mem: location 1386 is 0
9999 mem: storing 1 in location 1387
 104 run: break-unless at-end?, 
9999 mem: location 1387 is 1
9999 run: jump-unless fell through
 104 run: bottom:number <- subtract screen-height, 1
9999 mem: location 1371 is 5
9999 mem: storing 4 in location 1388
 104 run: at-bottom?:boolean <- equal save-row, bottom
9999 mem: location 1368 is 2
9999 mem: location 1388 is 4
9999 mem: storing 0 in location 1389
 104 run: at-right?:boolean <- equal save-column, right
9999 mem: location 1369 is 2
9999 mem: location 1367 is 9
9999 mem: storing 0 in location 1390
 104 run: overflow?:boolean <- and at-bottom?, at-right?
9999 mem: location 1389 is 0
9999 mem: location 1390 is 0
9999 mem: storing 0 in location 1391
 104 run: break-if overflow?, 
9999 mem: location 1391 is 0
9999 run: jump-if fell through
 104 run: move-cursor screen, save-row, save-column
9999 mem: location 1362 is 1009
9999 mem: location 1368 is 2
9999 mem: location 1369 is 2
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1212
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 2 in location 1213
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 2 in location 1214
 105 run: break-unless sc, 
9999 mem: location 1212 is 1009
9999 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1212 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1212 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1215
 105 run: *row <- copy new-row
9999 mem: location 1213 is 2
9999 mem: location 1215 is 1011
9999 mem: location 1215 is 1011
9999 mem: storing 2 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1212 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1212 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1216
 105 run: *column <- copy new-column
9999 mem: location 1214 is 2
9999 mem: location 1216 is 1012
9999 mem: location 1216 is 1012
9999 mem: storing 2 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1212 is 1009
 104 run: print-character screen, c
9999 mem: location 1362 is 1009
9999 mem: location 1361 is 102
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1219
 105 run: c:character <- next-ingredient 
9999 mem: storing 102 in location 1220
 105 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1221
9999 mem: storing 0 in location 1222
 105 run: break-if color-found?, 
9999 mem: location 1222 is 0
9999 run: jump-if fell through
 105 run: color <- copy 7/white
9999 mem: storing 7 in location 1221
 105 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1223
9999 mem: storing 0 in location 1224
 105 run: break-if bg-color-found?, 
9999 mem: location 1224 is 0
9999 run: jump-if fell through
 105 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1223
 105 run: trace 90, [print-character], c
9999 mem: location 1220 is 102
  90 print-character: 102 
 105 run: break-unless sc, 
9999 mem: location 1219 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1225
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1226
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1227
 105 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 2
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 22
 105 run: legal? <- lesser-than *row, height
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 2
9999 mem: location 1226 is 5
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 25
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1229
 105 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 29
 105 run: legal? <- lesser-than *column, width
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1225 is 10
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 32
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1220 is 102
9999 mem: storing 0 in location 1230
 105 run: break-unless newline?, 
9999 mem: location 1230 is 0
9999 run: jumping to instruction 43
 105 run: index:number <- multiply *row, width
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 2
9999 mem: location 1225 is 10
9999 mem: storing 20 in location 1233
 105 run: index <- add index, *column
9999 mem: location 1233 is 20
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 22 in location 1233
 105 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1234
 105 run: len:number <- length *buf
9999 mem: location 1234 is 1014
9999 mem: storing 50 in location 1235
 105 run: backspace?:boolean <- equal c, 8
9999 mem: location 1220 is 102
9999 mem: storing 0 in location 1236
 105 run: break-unless backspace?, 
9999 mem: location 1236 is 0
9999 run: jumping to instruction 63
 105 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1234 is 1014
9999 mem: location 1233 is 22
9999 mem: storing 1059 in location 1238
 105 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1238 is 1059
9999 mem: location 1059 is 0
9999 mem: location 1060 is 7
9999 mem: location 1238 is 1059
9999 run: address to copy is 1059
9999 mem: storing 1059 in location 1239
 105 run: *cursor-contents <- copy c
9999 mem: location 1220 is 102
9999 mem: location 1239 is 1059
9999 mem: location 1239 is 1059
9999 mem: storing 102 in location 1059
 105 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1238 is 1059
9999 mem: location 1059 is 102
9999 mem: location 1060 is 7
9999 mem: location 1238 is 1059
9999 run: address to copy is 1060
9999 mem: storing 1060 in location 1240
 105 run: *cursor-color <- copy color
9999 mem: location 1221 is 7
9999 mem: location 1240 is 1060
9999 mem: location 1240 is 1060
9999 mem: storing 7 in location 1060
 105 run: right:number <- subtract width, 1
9999 mem: location 1225 is 10
9999 mem: storing 9 in location 1241
 105 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1241 is 9
9999 mem: storing 0 in location 1242
 105 run: break-if at-right?, 
9999 mem: location 1242 is 0
9999 run: jump-if fell through
 105 run: *column <- add *column, 1
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1229 is 1012
9999 mem: storing 3 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1219 is 1009
 104 run: reply editor/same-as-ingredient:0, screen/same-as-ingredient:2
9999 mem: location 1360 is 1000
9999 mem: location 1362 is 1009
9999 run: result 0 is 1000
9999 run: result 1 is 1009
9999 mem: storing 1000 in location 1301
9999 mem: storing 1009 in location 1300
 103 run: screen <- move-cursor screen, *cursor-row, *cursor-column
9999 mem: location 1300 is 1009
9999 mem: location 1310 is 1006
9999 mem: location 1006 is 2
9999 mem: location 1311 is 1007
9999 mem: location 1007 is 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1212
 104 run: new-row:number <- next-ingredient 
9999 mem: storing 2 in location 1213
 104 run: new-column:number <- next-ingredient 
9999 mem: storing 3 in location 1214
 104 run: break-unless sc, 
9999 mem: location 1212 is 1009
9999 run: jump-unless fell through
 104 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1212 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1212 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1215
 104 run: *row <- copy new-row
9999 mem: location 1213 is 2
9999 mem: location 1215 is 1011
9999 mem: location 1215 is 1011
9999 mem: storing 2 in location 1011
 104 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1212 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1212 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1216
 104 run: *column <- copy new-column
9999 mem: location 1214 is 3
9999 mem: location 1216 is 1012
9999 mem: location 1216 is 1012
9999 mem: storing 3 in location 1012
 104 run: reply sc/same-as-ingredient:0
9999 mem: location 1212 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1300
 103 run: show-screen screen
9999 mem: location 1300 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1397
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1399
 104 run: break-unless screen, 
9999 mem: location 1399 is 1009
9999 run: jump-unless fell through
 104 run: reply screen
9999 mem: location 1399 is 1009
 103 run: reply screen/same-as-ingredient:0, editor/same-as-ingredient:1
9999 mem: location 1300 is 1009
9999 mem: location 1301 is 1000
 102 run: loop 
9999 run: jumping to instruction 5
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1135 is 1282
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1282 in location 1258
 103 run: break-unless x, 
9999 mem: location 1258 is 1282
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1258 is 1282
9999 mem: location 1282 is 3
9999 mem: location 1283 is 1269
9999 mem: location 1258 is 1282
9999 run: address to copy is 1282
9999 mem: storing 1282 in location 1259
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1258 is 1282
9999 mem: location 1282 is 3
9999 mem: location 1283 is 1269
9999 mem: location 1258 is 1282
9999 run: address to copy is 1283
9999 run: its type is address
9999 mem: location 1283 is 1269
9999 mem: storing 1269 in location 1260
 103 run: max:number <- length *buf
9999 mem: location 1260 is 1269
9999 mem: storing 3 in location 1261
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1259 is 1282
9999 mem: location 1282 is 3
9999 mem: location 1261 is 3
9999 mem: storing 1 in location 1262
 103 run: break-unless done?, 
9999 mem: location 1262 is 1
9999 run: jump-unless fell through
 103 run: dummy:address:event <- new event:type
9999 mem: storing 1167 in location 1263
 103 run: reply *dummy, x/same-as-ingredient:0, 1/found, 1/quit
9999 mem: location 1263 is 1167
9999 mem: location 1167 is 0
9999 mem: location 1168 is 0
9999 mem: location 1169 is 0
9999 mem: location 1170 is 0
9999 mem: location 1258 is 1282
9999 run: result 0 is [0, 0, 0, 0]
9999 run: result 1 is 1282
9999 run: result 2 is 1
9999 run: result 3 is 1
9999 mem: storing 0 in location 1137
9999 mem: storing 0 in location 1138
9999 mem: storing 0 in location 1139
9999 mem: storing 0 in location 1140
9999 mem: storing 1282 in location 1135
9999 mem: storing 1 in location 1141
9999 mem: storing 1 in location 1142
 102 run: loop-unless found?, 
9999 mem: location 1141 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1142 is 1
9999 run: jumping to instruction 21
 100 run: screen-should-contain [
    .          .
    .abc       .
    .def       .
    .┈┈┈┈┈┈┈┈┈┈.
    .          .
  ]
 100 run: check-trace-count-for-label 2, [print-character]
