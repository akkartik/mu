c{0: 0 (((1 tagged-value-address)) <- ((init-tagged-value)) ((boolean literal)) ((t literal))) -- nil
c{0: 1 (((2 tagged-value-address)) <- ((init-tagged-value)) ((boolean literal)) ((nil literal))) -- nil
c{0: 2 (((3 boolean)) <- ((test1)) ((1 tagged-value-address)) ((2 tagged-value-address))) -- nil
c{0: 3 (((10 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((34 literal))) -- nil
c{0: 4 (((11 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((3 literal))) -- nil
c{0: 5 (((12 integer)) <- ((test1)) ((10 tagged-value-address)) ((11 tagged-value-address))) -- nil
c{1: 0 ✓ (((1 tagged-value-address)) <- ((init-tagged-value)) ((boolean literal)) ((t literal)))
c{1: 1 ✓ (((2 tagged-value-address)) <- ((init-tagged-value)) ((boolean literal)) ((nil literal)))
c{1: 2 ✓ (((3 boolean)) <- ((test1)) ((1 tagged-value-address)) ((2 tagged-value-address)))
c{1: 3 ✓ (((10 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((34 literal)))
c{1: 4 ✓ (((11 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((3 literal)))
c{1: 5 ✓ (((12 integer)) <- ((test1)) ((10 tagged-value-address)) ((11 tagged-value-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((20 literal))) -- nil
c{0: 1 (((first-arg-box tagged-value-address)) <- ((next-input))) -- nil
c{0: 2 (((first-arg integer)) ((match? boolean)) <- ((maybe-coerce)) ((first-arg-box tagged-value-address) (deref)) ((integer literal))) -- ((open 2))
c{0: 3 (((break-unless)) ((match? boolean))) -- ((open 2))
c{0: 4 (((second-arg-box tagged-value-address)) <- ((next-input))) -- ((open 2))
c{0: 5 (((second-arg integer)) <- ((maybe-coerce)) ((second-arg-box tagged-value-address) (deref)) ((integer literal))) -- ((open 2))
c{0: 6 (((result integer)) <- ((add)) ((first-arg integer)) ((second-arg integer))) -- ((open 2))
c{0: 7 (((reply)) ((result integer))) -- ((open 2))
c{0: 8 (((first-arg boolean)) ((match? boolean)) <- ((maybe-coerce)) ((first-arg-box tagged-value-address) (deref)) ((boolean literal))) -- ((open 8) (close 8) (open 2))
c{0: 9 (((break-unless)) ((match? boolean))) -- ((open 8) (close 8) (open 2))
c{0: 10 (((second-arg-box tagged-value-address)) <- ((next-input))) -- ((open 8) (close 8) (open 2))
c{0: 11 (((second-arg boolean)) <- ((maybe-coerce)) ((second-arg-box tagged-value-address) (deref)) ((boolean literal))) -- ((open 8) (close 8) (open 2))
c{0: 12 (((result boolean)) <- ((or)) ((first-arg boolean)) ((second-arg boolean))) -- ((open 8) (close 8) (open 2))
c{0: 13 (((reply)) ((result integer))) -- ((open 8) (close 8) (open 2))
c{0: 14 (((reply)) ((nil literal))) -- ((close 14) (open 8) (close 8) (open 2))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((20 literal)))
c{1: 1 ✓ (((first-arg-box tagged-value-address)) <- ((next-input)))
c{1: 2 ✓ (((first-arg integer)) ((match? boolean)) <- ((maybe-coerce)) ((first-arg-box tagged-value-address) (deref)) ((integer literal)))
c{1: 3 X (((break-unless)) ((match? boolean))) => (((jump-unless)) ((match? boolean)) ((4 offset)))
c{1: 4 ✓ (((second-arg-box tagged-value-address)) <- ((next-input)))
c{1: 5 ✓ (((second-arg integer)) <- ((maybe-coerce)) ((second-arg-box tagged-value-address) (deref)) ((integer literal)))
c{1: 6 ✓ (((result integer)) <- ((add)) ((first-arg integer)) ((second-arg integer)))
c{1: 7 ✓ (((reply)) ((result integer)))
c{1: 8 ✓ (((first-arg boolean)) ((match? boolean)) <- ((maybe-coerce)) ((first-arg-box tagged-value-address) (deref)) ((boolean literal)))
c{1: 9 X (((break-unless)) ((match? boolean))) => (((jump-unless)) ((match? boolean)) ((4 offset)))
c{1: 10 ✓ (((second-arg-box tagged-value-address)) <- ((next-input)))
c{1: 11 ✓ (((second-arg boolean)) <- ((maybe-coerce)) ((second-arg-box tagged-value-address) (deref)) ((boolean literal)))
c{1: 12 ✓ (((result boolean)) <- ((or)) ((first-arg boolean)) ((second-arg boolean)))
c{1: 13 ✓ (((reply)) ((result integer)))
c{1: 14 ✓ (((reply)) ((nil literal)))
cn0: convert-names in main
cn0: (((1 tagged-value-address)) <- ((init-tagged-value)) ((boolean literal)) ((t literal))) nil nil
cn0: checking arg ((boolean literal))
cn0: checking arg ((t literal))
cn0: checking oarg ((1 tagged-value-address))
maybe-add: ((1 tagged-value-address))
cn0: (((2 tagged-value-address)) <- ((init-tagged-value)) ((boolean literal)) ((nil literal))) nil nil
cn0: checking arg ((boolean literal))
cn0: checking arg ((nil literal))
cn0: checking oarg ((2 tagged-value-address))
maybe-add: ((2 tagged-value-address))
cn0: (((3 boolean)) <- ((test1)) ((1 tagged-value-address)) ((2 tagged-value-address))) nil nil
cn0: checking arg ((1 tagged-value-address))
maybe-add: ((1 tagged-value-address))
cn0: checking arg ((2 tagged-value-address))
maybe-add: ((2 tagged-value-address))
cn0: checking oarg ((3 boolean))
maybe-add: ((3 boolean))
cn0: (((10 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((34 literal))) nil nil
cn0: checking arg ((integer literal))
cn0: checking arg ((34 literal))
cn0: checking oarg ((10 tagged-value-address))
maybe-add: ((10 tagged-value-address))
cn0: (((11 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((3 literal))) nil nil
cn0: checking arg ((integer literal))
cn0: checking arg ((3 literal))
cn0: checking oarg ((11 tagged-value-address))
maybe-add: ((11 tagged-value-address))
cn0: (((12 integer)) <- ((test1)) ((10 tagged-value-address)) ((11 tagged-value-address))) nil nil
cn0: checking arg ((10 tagged-value-address))
maybe-add: ((10 tagged-value-address))
cn0: checking arg ((11 tagged-value-address))
maybe-add: ((11 tagged-value-address))
cn0: checking oarg ((12 integer))
maybe-add: ((12 integer))
cn0: convert-names in test1
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((20 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((20 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((first-arg-box tagged-value-address)) <- ((next-input))) nil nil
cn0: checking oarg ((first-arg-box tagged-value-address))
maybe-add: ((first-arg-box tagged-value-address))
cn0: location for oarg ((first-arg-box tagged-value-address)): 1
cn0: (((first-arg integer)) ((match? boolean)) <- ((maybe-coerce)) ((first-arg-box tagged-value-address) (deref)) ((integer literal))) ((first-arg-box 1)) nil
cn0: checking arg ((first-arg-box tagged-value-address) (deref))
maybe-add: ((first-arg-box tagged-value-address) (deref))
cn0: checking arg ((integer literal))
cn0: checking oarg ((first-arg integer))
maybe-add: ((first-arg integer))
cn0: location for oarg ((first-arg integer)): 2
cn0: checking oarg ((match? boolean))
maybe-add: ((match? boolean))
cn0: location for oarg ((match? boolean)): 3
cn0: (((jump-unless)) ((match? boolean)) ((4 offset))) ((first-arg 2) (first-arg-box 1) (match? 3)) nil
cn0: checking arg ((match? boolean))
maybe-add: ((match? boolean))
cn0: checking arg ((4 offset))
cn0: (((second-arg-box tagged-value-address)) <- ((next-input))) ((first-arg 2) (first-arg-box 1) (match? 3)) nil
cn0: checking oarg ((second-arg-box tagged-value-address))
maybe-add: ((second-arg-box tagged-value-address))
cn0: location for oarg ((second-arg-box tagged-value-address)): 4
cn0: (((second-arg integer)) <- ((maybe-coerce)) ((second-arg-box tagged-value-address) (deref)) ((integer literal))) ((first-arg 2) (first-arg-box 1) (match? 3) (second-arg-box 4)) nil
cn0: checking arg ((second-arg-box tagged-value-address) (deref))
maybe-add: ((second-arg-box tagged-value-address) (deref))
cn0: checking arg ((integer literal))
cn0: checking oarg ((second-arg integer))
maybe-add: ((second-arg integer))
cn0: location for oarg ((second-arg integer)): 5
cn0: (((result integer)) <- ((add)) ((first-arg integer)) ((second-arg integer))) ((first-arg 2) (first-arg-box 1) (match? 3) (second-arg 5) (second-arg-box 4)) nil
cn0: checking arg ((first-arg integer))
maybe-add: ((first-arg integer))
cn0: checking arg ((second-arg integer))
maybe-add: ((second-arg integer))
cn0: checking oarg ((result integer))
maybe-add: ((result integer))
cn0: location for oarg ((result integer)): 6
cn0: (((reply)) ((result integer))) ((first-arg 2) (first-arg-box 1) (match? 3) (result 6) (second-arg 5) (second-arg-box 4)) nil
cn0: checking arg ((result integer))
maybe-add: ((result integer))
cn0: (((first-arg boolean)) ((match? boolean)) <- ((maybe-coerce)) ((first-arg-box tagged-value-address) (deref)) ((boolean literal))) ((first-arg 2) (first-arg-box 1) (match? 3) (result 6) (second-arg 5) (second-arg-box 4)) nil
cn0: checking arg ((first-arg-box tagged-value-address) (deref))
maybe-add: ((first-arg-box tagged-value-address) (deref))
cn0: checking arg ((boolean literal))
cn0: checking oarg ((first-arg boolean))
maybe-add: ((first-arg boolean))
cn0: checking oarg ((match? boolean))
maybe-add: ((match? boolean))
cn0: (((jump-unless)) ((match? boolean)) ((4 offset))) ((first-arg 2) (first-arg-box 1) (match? 3) (result 6) (second-arg 5) (second-arg-box 4)) nil
cn0: checking arg ((match? boolean))
maybe-add: ((match? boolean))
cn0: checking arg ((4 offset))
cn0: (((second-arg-box tagged-value-address)) <- ((next-input))) ((first-arg 2) (first-arg-box 1) (match? 3) (result 6) (second-arg 5) (second-arg-box 4)) nil
cn0: checking oarg ((second-arg-box tagged-value-address))
maybe-add: ((second-arg-box tagged-value-address))
cn0: (((second-arg boolean)) <- ((maybe-coerce)) ((second-arg-box tagged-value-address) (deref)) ((boolean literal))) ((first-arg 2) (first-arg-box 1) (match? 3) (result 6) (second-arg 5) (second-arg-box 4)) nil
cn0: checking arg ((second-arg-box tagged-value-address) (deref))
maybe-add: ((second-arg-box tagged-value-address) (deref))
cn0: checking arg ((boolean literal))
cn0: checking oarg ((second-arg boolean))
maybe-add: ((second-arg boolean))
cn0: (((result boolean)) <- ((or)) ((first-arg boolean)) ((second-arg boolean))) ((first-arg 2) (first-arg-box 1) (match? 3) (result 6) (second-arg 5) (second-arg-box 4)) nil
cn0: checking arg ((first-arg boolean))
maybe-add: ((first-arg boolean))
cn0: checking arg ((second-arg boolean))
maybe-add: ((second-arg boolean))
cn0: checking oarg ((result boolean))
maybe-add: ((result boolean))
cn0: (((reply)) ((result integer))) ((first-arg 2) (first-arg-box 1) (match? 3) (result 6) (second-arg 5) (second-arg-box 4)) nil
cn0: checking arg ((result integer))
maybe-add: ((result integer))
cn0: (((reply)) ((nil literal))) ((first-arg 2) (first-arg-box 1) (match? 3) (result 6) (second-arg 5) (second-arg-box 4)) nil
cn0: checking arg ((nil literal))
cn1: (((1 tagged-value-address)) <- ((init-tagged-value)) ((boolean literal)) ((t literal)))
cn1: (((2 tagged-value-address)) <- ((init-tagged-value)) ((boolean literal)) ((nil literal)))
cn1: (((3 boolean)) <- ((test1)) ((1 tagged-value-address)) ((2 tagged-value-address)))
cn1: (((10 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((34 literal)))
cn1: (((11 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((3 literal)))
cn1: (((12 integer)) <- ((test1)) ((10 tagged-value-address)) ((11 tagged-value-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((20 literal)))
cn1: (((1 tagged-value-address)) <- ((next-input)))
cn1: (((2 integer)) ((3 boolean)) <- ((maybe-coerce)) ((1 tagged-value-address) (deref)) ((integer literal)))
cn1: (((jump-unless)) ((3 boolean)) ((4 offset)))
cn1: (((4 tagged-value-address)) <- ((next-input)))
cn1: (((5 integer)) <- ((maybe-coerce)) ((4 tagged-value-address) (deref)) ((integer literal)))
cn1: (((6 integer)) <- ((add)) ((2 integer)) ((5 integer)))
cn1: (((reply)) ((6 integer)))
cn1: (((2 boolean)) ((3 boolean)) <- ((maybe-coerce)) ((1 tagged-value-address) (deref)) ((boolean literal)))
cn1: (((jump-unless)) ((3 boolean)) ((4 offset)))
cn1: (((4 tagged-value-address)) <- ((next-input)))
cn1: (((5 boolean)) <- ((maybe-coerce)) ((4 tagged-value-address) (deref)) ((boolean literal)))
cn1: (((6 boolean)) <- ((or)) ((2 boolean)) ((5 boolean)))
cn1: (((reply)) ((6 integer)))
cn1: (((reply)) ((nil literal)))
schedule: main
run: main 0: (((1 tagged-value-address)) <- ((init-tagged-value)) ((boolean literal)) ((t literal)))
run: init-tagged-value/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-tagged-value/main 0: 1000 => ((default-space space-address))
run: init-tagged-value/main 1: (((1 type)) <- ((next-input)))
arg: nil 0 (boolean t)
run: init-tagged-value/main 1: boolean => ((1 type))
mem: ((1 type)): 1002 <= boolean
run: init-tagged-value/main 2: (((2 integer)) <- ((sizeof)) ((1 type)))
mem: ((1 type)) => boolean
run: init-tagged-value/main 2: 1 => ((2 integer))
mem: ((2 integer)): 1003 <= 1
run: init-tagged-value/main 3: (((3 boolean)) <- ((equal)) ((2 integer)) ((1 literal)))
mem: ((2 integer)) => 1
run: init-tagged-value/main 3: t => ((3 boolean))
mem: ((3 boolean)): 1004 <= t
run: init-tagged-value/main 4: (((assert)) ((3 boolean)))
mem: ((3 boolean)) => t
run: init-tagged-value/main 5: (((4 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: init-tagged-value/main 5: 1031 => ((4 tagged-value-address))
mem: ((4 tagged-value-address)): 1005 <= 1031
run: init-tagged-value/main 6: (((5 location)) <- ((get-address)) ((4 tagged-value-address) (deref)) ((0 offset)))
run: init-tagged-value/main 6: 1031 => ((5 location))
mem: ((5 location)): 1006 <= 1031
run: init-tagged-value/main 7: (((5 location) (deref)) <- ((copy)) ((1 type)))
mem: ((1 type)) => boolean
run: init-tagged-value/main 7: boolean => ((5 location) (deref))
mem: ((5 location) (deref)): 1031 <= boolean
run: init-tagged-value/main 8: (((6 location)) <- ((get-address)) ((4 tagged-value-address) (deref)) ((1 offset)))
run: init-tagged-value/main 8: 1032 => ((6 location))
mem: ((6 location)): 1007 <= 1032
run: init-tagged-value/main 9: (((6 location) (deref)) <- ((next-input)))
arg: nil 1 (boolean t)
run: init-tagged-value/main 9: t => ((6 location) (deref))
mem: ((6 location) (deref)): 1032 <= t
run: init-tagged-value/main 10: (((reply)) ((4 tagged-value-address)))
mem: ((4 tagged-value-address)) => 1031
run: main 0: 1031 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 1 <= 1031
run: main 1: (((2 tagged-value-address)) <- ((init-tagged-value)) ((boolean literal)) ((nil literal)))
run: init-tagged-value/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-tagged-value/main 0: 1033 => ((default-space space-address))
run: init-tagged-value/main 1: (((1 type)) <- ((next-input)))
arg: nil 0 (boolean nil)
run: init-tagged-value/main 1: boolean => ((1 type))
mem: ((1 type)): 1035 <= boolean
run: init-tagged-value/main 2: (((2 integer)) <- ((sizeof)) ((1 type)))
mem: ((1 type)) => boolean
run: init-tagged-value/main 2: 1 => ((2 integer))
mem: ((2 integer)): 1036 <= 1
run: init-tagged-value/main 3: (((3 boolean)) <- ((equal)) ((2 integer)) ((1 literal)))
mem: ((2 integer)) => 1
run: init-tagged-value/main 3: t => ((3 boolean))
mem: ((3 boolean)): 1037 <= t
run: init-tagged-value/main 4: (((assert)) ((3 boolean)))
mem: ((3 boolean)) => t
run: init-tagged-value/main 5: (((4 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: init-tagged-value/main 5: 1064 => ((4 tagged-value-address))
mem: ((4 tagged-value-address)): 1038 <= 1064
run: init-tagged-value/main 6: (((5 location)) <- ((get-address)) ((4 tagged-value-address) (deref)) ((0 offset)))
run: init-tagged-value/main 6: 1064 => ((5 location))
mem: ((5 location)): 1039 <= 1064
run: init-tagged-value/main 7: (((5 location) (deref)) <- ((copy)) ((1 type)))
mem: ((1 type)) => boolean
run: init-tagged-value/main 7: boolean => ((5 location) (deref))
mem: ((5 location) (deref)): 1064 <= boolean
run: init-tagged-value/main 8: (((6 location)) <- ((get-address)) ((4 tagged-value-address) (deref)) ((1 offset)))
run: init-tagged-value/main 8: 1065 => ((6 location))
mem: ((6 location)): 1040 <= 1065
run: init-tagged-value/main 9: (((6 location) (deref)) <- ((next-input)))
arg: nil 1 (boolean nil)
run: init-tagged-value/main 9: nil => ((6 location) (deref))
mem: ((6 location) (deref)): 1065 <= nil
run: init-tagged-value/main 10: (((reply)) ((4 tagged-value-address)))
mem: ((4 tagged-value-address)) => 1064
run: main 1: 1064 => ((2 tagged-value-address))
mem: ((2 tagged-value-address)): 2 <= 1064
run: main 2: (((3 boolean)) <- ((test1)) ((1 tagged-value-address)) ((2 tagged-value-address)))
mem: ((1 tagged-value-address)) => 1031
mem: ((2 tagged-value-address)) => 1064
run: test1/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((20 literal)))
run: test1/main 0: 1066 => ((default-space space-address))
run: test1/main 1: (((1 tagged-value-address)) <- ((next-input)))
arg: nil 0 (1031 1064)
run: test1/main 1: 1031 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 1068 <= 1031
run: test1/main 2: (((2 integer)) ((3 boolean)) <- ((maybe-coerce)) ((1 tagged-value-address) (deref)) ((integer literal)))
mem: ((1 tagged-value-address) (deref)) => #(tagged record (boolean t . nil))
run: maybe-coerce/test1/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/test1/main 0: 1087 => ((default-space space-address))
run: maybe-coerce/test1/main 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/test1/main 1: 1118 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 1089 <= 1118
run: maybe-coerce/test1/main 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (boolean t . nil)) integer)
run: maybe-coerce/test1/main 2: #(tagged record (boolean t . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 1118 <= boolean
mem: ((1 tagged-value-address) (deref)): 1119 <= t
run: maybe-coerce/test1/main 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (boolean t . nil)) integer)
run: maybe-coerce/test1/main 3: integer => ((2 type))
mem: ((2 type)): 1090 <= integer
run: maybe-coerce/test1/main 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((1118 type) (raw)) => boolean
run: maybe-coerce/test1/main 4: boolean => ((3 type))
mem: ((3 type)): 1091 <= boolean
run: maybe-coerce/test1/main 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => boolean
mem: ((2 type)) => integer
run: maybe-coerce/test1/main 5: nil => ((4 boolean))
mem: ((4 boolean)): 1092 <= nil
run: maybe-coerce/test1/main 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => nil
run: maybe-coerce/test1/main 7: (((reply)) ((0 literal)) ((nil literal)))
run: test1/main 2: 0 => ((2 integer))
mem: ((2 integer)): 1069 <= 0
run: test1/main 2: nil => ((3 boolean))
mem: ((3 boolean)): 1070 <= nil
run: test1/main 3: (((jump-unless)) ((3 boolean)) ((4 offset)))
mem: ((3 boolean)) => nil
run: test1/main 8: (((2 boolean)) ((3 boolean)) <- ((maybe-coerce)) ((1 tagged-value-address) (deref)) ((boolean literal)))
mem: ((1 tagged-value-address) (deref)) => #(tagged record (boolean t . nil))
run: maybe-coerce/test1/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/test1/main 0: 1120 => ((default-space space-address))
run: maybe-coerce/test1/main 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/test1/main 1: 1151 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 1122 <= 1151
run: maybe-coerce/test1/main 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (boolean t . nil)) boolean)
run: maybe-coerce/test1/main 2: #(tagged record (boolean t . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 1151 <= boolean
mem: ((1 tagged-value-address) (deref)): 1152 <= t
run: maybe-coerce/test1/main 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (boolean t . nil)) boolean)
run: maybe-coerce/test1/main 3: boolean => ((2 type))
mem: ((2 type)): 1123 <= boolean
run: maybe-coerce/test1/main 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((1151 type) (raw)) => boolean
run: maybe-coerce/test1/main 4: boolean => ((3 type))
mem: ((3 type)): 1124 <= boolean
run: maybe-coerce/test1/main 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => boolean
mem: ((2 type)) => boolean
run: maybe-coerce/test1/main 5: t => ((4 boolean))
mem: ((4 boolean)): 1125 <= t
run: maybe-coerce/test1/main 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => t
run: maybe-coerce/test1/main 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
mem: ((1152 location) (raw)) => t
run: maybe-coerce/test1/main 8: t => ((5 location))
mem: ((5 location)): 1126 <= t
run: maybe-coerce/test1/main 9: (((reply)) ((5 location)) ((4 boolean)))
mem: ((5 location)) => t
mem: ((4 boolean)) => t
run: test1/main 8: t => ((2 boolean))
mem: ((2 boolean)): 1069 <= t
run: test1/main 8: t => ((3 boolean))
mem: ((3 boolean)): 1070 <= t
run: test1/main 9: (((jump-unless)) ((3 boolean)) ((4 offset)))
mem: ((3 boolean)) => t
run: test1/main 10: (((4 tagged-value-address)) <- ((next-input)))
arg: nil 1 (1031 1064)
run: test1/main 10: 1064 => ((4 tagged-value-address))
mem: ((4 tagged-value-address)): 1071 <= 1064
run: test1/main 11: (((5 boolean)) <- ((maybe-coerce)) ((4 tagged-value-address) (deref)) ((boolean literal)))
mem: ((4 tagged-value-address) (deref)) => #(tagged record (boolean nil . nil))
run: maybe-coerce/test1/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/test1/main 0: 1153 => ((default-space space-address))
run: maybe-coerce/test1/main 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/test1/main 1: 1184 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 1155 <= 1184
run: maybe-coerce/test1/main 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (boolean nil . nil)) boolean)
run: maybe-coerce/test1/main 2: #(tagged record (boolean nil . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 1184 <= boolean
mem: ((1 tagged-value-address) (deref)): 1185 <= nil
run: maybe-coerce/test1/main 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (boolean nil . nil)) boolean)
run: maybe-coerce/test1/main 3: boolean => ((2 type))
mem: ((2 type)): 1156 <= boolean
run: maybe-coerce/test1/main 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((1184 type) (raw)) => boolean
run: maybe-coerce/test1/main 4: boolean => ((3 type))
mem: ((3 type)): 1157 <= boolean
run: maybe-coerce/test1/main 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => boolean
mem: ((2 type)) => boolean
run: maybe-coerce/test1/main 5: t => ((4 boolean))
mem: ((4 boolean)): 1158 <= t
run: maybe-coerce/test1/main 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => t
run: maybe-coerce/test1/main 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
mem: ((1185 location) (raw)) => nil
run: maybe-coerce/test1/main 8: nil => ((5 location))
mem: ((5 location)): 1159 <= nil
run: maybe-coerce/test1/main 9: (((reply)) ((5 location)) ((4 boolean)))
mem: ((5 location)) => nil
mem: ((4 boolean)) => t
run: test1/main 11: nil => ((5 boolean))
mem: ((5 boolean)): 1072 <= nil
run: test1/main 12: (((6 boolean)) <- ((or)) ((2 boolean)) ((5 boolean)))
mem: ((2 boolean)) => t
run: test1/main 12: t => ((6 boolean))
mem: ((6 boolean)): 1073 <= t
run: test1/main 13: (((reply)) ((6 integer)))
mem: ((6 integer)) => t
run: main 2: t => ((3 boolean))
mem: ((3 boolean)): 3 <= t
run: main 3: (((10 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((34 literal)))
run: init-tagged-value/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-tagged-value/main 0: 1186 => ((default-space space-address))
run: init-tagged-value/main 1: (((1 type)) <- ((next-input)))
arg: nil 0 (integer 34)
run: init-tagged-value/main 1: integer => ((1 type))
mem: ((1 type)): 1188 <= integer
run: init-tagged-value/main 2: (((2 integer)) <- ((sizeof)) ((1 type)))
mem: ((1 type)) => integer
run: init-tagged-value/main 2: 1 => ((2 integer))
mem: ((2 integer)): 1189 <= 1
run: init-tagged-value/main 3: (((3 boolean)) <- ((equal)) ((2 integer)) ((1 literal)))
mem: ((2 integer)) => 1
run: init-tagged-value/main 3: t => ((3 boolean))
mem: ((3 boolean)): 1190 <= t
run: init-tagged-value/main 4: (((assert)) ((3 boolean)))
mem: ((3 boolean)) => t
run: init-tagged-value/main 5: (((4 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: init-tagged-value/main 5: 1217 => ((4 tagged-value-address))
mem: ((4 tagged-value-address)): 1191 <= 1217
run: init-tagged-value/main 6: (((5 location)) <- ((get-address)) ((4 tagged-value-address) (deref)) ((0 offset)))
run: init-tagged-value/main 6: 1217 => ((5 location))
mem: ((5 location)): 1192 <= 1217
run: init-tagged-value/main 7: (((5 location) (deref)) <- ((copy)) ((1 type)))
mem: ((1 type)) => integer
run: init-tagged-value/main 7: integer => ((5 location) (deref))
mem: ((5 location) (deref)): 1217 <= integer
run: init-tagged-value/main 8: (((6 location)) <- ((get-address)) ((4 tagged-value-address) (deref)) ((1 offset)))
run: init-tagged-value/main 8: 1218 => ((6 location))
mem: ((6 location)): 1193 <= 1218
run: init-tagged-value/main 9: (((6 location) (deref)) <- ((next-input)))
arg: nil 1 (integer 34)
run: init-tagged-value/main 9: 34 => ((6 location) (deref))
mem: ((6 location) (deref)): 1218 <= 34
run: init-tagged-value/main 10: (((reply)) ((4 tagged-value-address)))
mem: ((4 tagged-value-address)) => 1217
run: main 3: 1217 => ((10 tagged-value-address))
mem: ((10 tagged-value-address)): 10 <= 1217
run: main 4: (((11 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((3 literal)))
run: init-tagged-value/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-tagged-value/main 0: 1219 => ((default-space space-address))
run: init-tagged-value/main 1: (((1 type)) <- ((next-input)))
arg: nil 0 (integer 3)
run: init-tagged-value/main 1: integer => ((1 type))
mem: ((1 type)): 1221 <= integer
run: init-tagged-value/main 2: (((2 integer)) <- ((sizeof)) ((1 type)))
mem: ((1 type)) => integer
run: init-tagged-value/main 2: 1 => ((2 integer))
mem: ((2 integer)): 1222 <= 1
run: init-tagged-value/main 3: (((3 boolean)) <- ((equal)) ((2 integer)) ((1 literal)))
mem: ((2 integer)) => 1
run: init-tagged-value/main 3: t => ((3 boolean))
mem: ((3 boolean)): 1223 <= t
run: init-tagged-value/main 4: (((assert)) ((3 boolean)))
mem: ((3 boolean)) => t
run: init-tagged-value/main 5: (((4 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: init-tagged-value/main 5: 1250 => ((4 tagged-value-address))
mem: ((4 tagged-value-address)): 1224 <= 1250
run: init-tagged-value/main 6: (((5 location)) <- ((get-address)) ((4 tagged-value-address) (deref)) ((0 offset)))
run: init-tagged-value/main 6: 1250 => ((5 location))
mem: ((5 location)): 1225 <= 1250
run: init-tagged-value/main 7: (((5 location) (deref)) <- ((copy)) ((1 type)))
mem: ((1 type)) => integer
run: init-tagged-value/main 7: integer => ((5 location) (deref))
mem: ((5 location) (deref)): 1250 <= integer
run: init-tagged-value/main 8: (((6 location)) <- ((get-address)) ((4 tagged-value-address) (deref)) ((1 offset)))
run: init-tagged-value/main 8: 1251 => ((6 location))
mem: ((6 location)): 1226 <= 1251
run: init-tagged-value/main 9: (((6 location) (deref)) <- ((next-input)))
arg: nil 1 (integer 3)
run: init-tagged-value/main 9: 3 => ((6 location) (deref))
mem: ((6 location) (deref)): 1251 <= 3
run: init-tagged-value/main 10: (((reply)) ((4 tagged-value-address)))
mem: ((4 tagged-value-address)) => 1250
run: main 4: 1250 => ((11 tagged-value-address))
mem: ((11 tagged-value-address)): 11 <= 1250
run: main 5: (((12 integer)) <- ((test1)) ((10 tagged-value-address)) ((11 tagged-value-address)))
mem: ((10 tagged-value-address)) => 1217
mem: ((11 tagged-value-address)) => 1250
run: test1/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((20 literal)))
run: test1/main 0: 1252 => ((default-space space-address))
run: test1/main 1: (((1 tagged-value-address)) <- ((next-input)))
arg: nil 0 (1217 1250)
run: test1/main 1: 1217 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 1254 <= 1217
run: test1/main 2: (((2 integer)) ((3 boolean)) <- ((maybe-coerce)) ((1 tagged-value-address) (deref)) ((integer literal)))
mem: ((1 tagged-value-address) (deref)) => #(tagged record (integer 34 . nil))
run: maybe-coerce/test1/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/test1/main 0: 1273 => ((default-space space-address))
run: maybe-coerce/test1/main 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/test1/main 1: 1304 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 1275 <= 1304
run: maybe-coerce/test1/main 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (integer 34 . nil)) integer)
run: maybe-coerce/test1/main 2: #(tagged record (integer 34 . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 1304 <= integer
mem: ((1 tagged-value-address) (deref)): 1305 <= 34
run: maybe-coerce/test1/main 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (integer 34 . nil)) integer)
run: maybe-coerce/test1/main 3: integer => ((2 type))
mem: ((2 type)): 1276 <= integer
run: maybe-coerce/test1/main 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((1304 type) (raw)) => integer
run: maybe-coerce/test1/main 4: integer => ((3 type))
mem: ((3 type)): 1277 <= integer
run: maybe-coerce/test1/main 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => integer
mem: ((2 type)) => integer
run: maybe-coerce/test1/main 5: t => ((4 boolean))
mem: ((4 boolean)): 1278 <= t
run: maybe-coerce/test1/main 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => t
run: maybe-coerce/test1/main 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
mem: ((1305 location) (raw)) => 34
run: maybe-coerce/test1/main 8: 34 => ((5 location))
mem: ((5 location)): 1279 <= 34
run: maybe-coerce/test1/main 9: (((reply)) ((5 location)) ((4 boolean)))
mem: ((5 location)) => 34
mem: ((4 boolean)) => t
run: test1/main 2: 34 => ((2 integer))
mem: ((2 integer)): 1255 <= 34
run: test1/main 2: t => ((3 boolean))
mem: ((3 boolean)): 1256 <= t
run: test1/main 3: (((jump-unless)) ((3 boolean)) ((4 offset)))
mem: ((3 boolean)) => t
run: test1/main 4: (((4 tagged-value-address)) <- ((next-input)))
arg: nil 1 (1217 1250)
run: test1/main 4: 1250 => ((4 tagged-value-address))
mem: ((4 tagged-value-address)): 1257 <= 1250
run: test1/main 5: (((5 integer)) <- ((maybe-coerce)) ((4 tagged-value-address) (deref)) ((integer literal)))
mem: ((4 tagged-value-address) (deref)) => #(tagged record (integer 3 . nil))
run: maybe-coerce/test1/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/test1/main 0: 1306 => ((default-space space-address))
run: maybe-coerce/test1/main 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/test1/main 1: 1337 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 1308 <= 1337
run: maybe-coerce/test1/main 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (integer 3 . nil)) integer)
run: maybe-coerce/test1/main 2: #(tagged record (integer 3 . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 1337 <= integer
mem: ((1 tagged-value-address) (deref)): 1338 <= 3
run: maybe-coerce/test1/main 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (integer 3 . nil)) integer)
run: maybe-coerce/test1/main 3: integer => ((2 type))
mem: ((2 type)): 1309 <= integer
run: maybe-coerce/test1/main 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((1337 type) (raw)) => integer
run: maybe-coerce/test1/main 4: integer => ((3 type))
mem: ((3 type)): 1310 <= integer
run: maybe-coerce/test1/main 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => integer
mem: ((2 type)) => integer
run: maybe-coerce/test1/main 5: t => ((4 boolean))
mem: ((4 boolean)): 1311 <= t
run: maybe-coerce/test1/main 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => t
run: maybe-coerce/test1/main 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
mem: ((1338 location) (raw)) => 3
run: maybe-coerce/test1/main 8: 3 => ((5 location))
mem: ((5 location)): 1312 <= 3
run: maybe-coerce/test1/main 9: (((reply)) ((5 location)) ((4 boolean)))
mem: ((5 location)) => 3
mem: ((4 boolean)) => t
run: test1/main 5: 3 => ((5 integer))
mem: ((5 integer)): 1258 <= 3
run: test1/main 6: (((6 integer)) <- ((add)) ((2 integer)) ((5 integer)))
mem: ((2 integer)) => 34
mem: ((5 integer)) => 3
run: test1/main 6: 37 => ((6 integer))
mem: ((6 integer)): 1259 <= 37
run: test1/main 7: (((reply)) ((6 integer)))
mem: ((6 integer)) => 37
run: main 5: 37 => ((12 integer))
mem: ((12 integer)): 12 <= 37
schedule: done with routine nil
