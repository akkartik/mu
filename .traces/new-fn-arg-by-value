c{0: 0 (((1 integer)) <- ((copy)) ((34 literal))) -- nil
c{0: 1 (((test1)) ((1 integer))) -- nil
c{1: 0 âœ“ (((1 integer)) <- ((copy)) ((34 literal)))
c{1: 1 âœ“ (((test1)) ((1 integer)))
c{0: 0 (((1 integer)) <- ((copy)) ((0 literal))) -- nil
c{0: 1 (((2 integer)) <- ((next-input))) -- nil
c{1: 0 âœ“ (((1 integer)) <- ((copy)) ((0 literal)))
c{1: 1 âœ“ (((2 integer)) <- ((next-input)))
cn0: convert-names in main
cn0: (((1 integer)) <- ((copy)) ((34 literal))) nil nil
cn0: checking arg ((34 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((test1)) ((1 integer))) nil nil
cn0: checking arg ((1 integer))
maybe-add: ((1 integer))
cn0: convert-names in test1
cn0: (((1 integer)) <- ((copy)) ((0 literal))) nil nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((2 integer)) <- ((next-input))) nil nil
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn1: (((1 integer)) <- ((copy)) ((34 literal)))
cn1: (((test1)) ((1 integer)))
cn1: (((1 integer)) <- ((copy)) ((0 literal)))
cn1: (((2 integer)) <- ((next-input)))
schedule: main
run: main 0: (((1 integer)) <- ((copy)) ((34 literal)))
run: main 0: 34 => ((1 integer))
mem: ((1 integer)): 1 <= 34
run: main 1: (((test1)) ((1 integer)))
mem: ((1 integer)) => 34
run: test1/main 0: (((1 integer)) <- ((copy)) ((0 literal)))
run: test1/main 0: 0 => ((1 integer))
mem: ((1 integer)): 1 <= 0
run: test1/main 1: (((2 integer)) <- ((next-input)))
arg: nil 0 (34)
run: test1/main 1: 34 => ((2 integer))
mem: ((2 integer)): 2 <= 34
schedule: done with routine nil
