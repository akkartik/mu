schedule: main
run: main 0: (((1 integer)) <- ((copy)) ((2 literal)))
run: main 0: 2 => ((1 integer))
mem: ((1 integer)): 1 <= 2
run: main 1: (((2 integer)) <- ((copy)) ((1 literal)))
run: main 1: 1 => ((2 integer))
mem: ((2 integer)): 2 <= 1
run: main 2: (((2 integer)) <- ((add)) ((2 integer)) ((2 integer)))
mem: ((2 integer)) => 1
mem: ((2 integer)) => 1
run: main 2: 2 => ((2 integer))
mem: ((2 integer)): 2 <= 2
run: main 3: (((3 boolean)) <- ((equal)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 2
mem: ((2 integer)) => 2
run: main 3: t => ((3 boolean))
mem: ((3 boolean)): 3 <= t
run: main 4: (((jump-if)) ((3 boolean)) ((-3 offset)))
mem: ((3 boolean)) => t
run: main 2: (((2 integer)) <- ((add)) ((2 integer)) ((2 integer)))
mem: ((2 integer)) => 2
mem: ((2 integer)) => 2
run: main 2: 4 => ((2 integer))
mem: ((2 integer)): 2 <= 4
run: main 3: (((3 boolean)) <- ((equal)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 2
mem: ((2 integer)) => 4
run: main 3: nil => ((3 boolean))
mem: ((3 boolean)): 3 <= nil
run: main 4: (((jump-if)) ((3 boolean)) ((-3 offset)))
mem: ((3 boolean)) => nil
run: main 5: (((4 integer)) <- ((copy)) ((3 literal)))
run: main 5: 3 => ((4 integer))
mem: ((4 integer)): 4 <= 3
run: main 6: (((reply)))
schedule: done with routine 
