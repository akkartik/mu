9991 parse: --- defining main
9993 parse: instruction: foo
9993 parse:   number of ingredients: 0
9993 parse:   product: {"1": "address"}
9992 load: after rewriting: 1:address <- foo 
9993 parse: instruction: foo
9993 parse:   number of ingredients: 0
9993 parse:   product: {"2": "address"}
9992 load: after rewriting: 2:address <- foo 
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": "address"}
9993 parse:   ingredient: {"2": "address"}
9993 parse:   product: {"3": "boolean"}
9992 load: after rewriting: 3:boolean <- equal 1:address, 2:address
9999 parse: recipe main has a header
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"x": "number"}
9992 load: after rewriting: x:number <- copy 34
9993 parse: instruction: reply
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 load: after rewriting: reply default-space:address:shared:array:location
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: x => number
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9991 transform: --- transform names for recipe foo
9993 name: assign x 1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction 3:boolean <- equal 1:address, 2:address
9992 transform: checking variant (strict) 0: recipe equal_2 {"a": <"address" : <"shared" : <"array" : <"character" : <>>>>>} {"b": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"result": "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe equal_2 {"a": <"address" : <"shared" : <"array" : <"character" : <>>>>>} {"b": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"result": "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {"a": <"address" : <"shared" : <"array" : <"character" : <>>>>>} {"b": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"result": "boolean"}
9993 transform: strict match failed: ingredient 0
9991 transform: --- resolve ambiguous calls for recipe foo
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform: foo ...
9992 transform: foo ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform: copy ...
9992 transform: reply ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: 1:address <- foo 
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1000
9999 mem: storing 2 in location 1001
 103 run: x:number <- copy 34
9999 mem: storing 34 in location 1003
 103 run: reply default-space:address:shared:array:location
9999 abandon: saving in free-list of size 4
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1000
9999 mem: storing 1000 in location 1
 102 run: 2:address <- foo 
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: allocating size 4
9999 abandon: picking up space from free-list of size 4
 103 run: x:number <- copy 34
9999 mem: storing 34 in location 1003
 103 run: reply default-space:address:shared:array:location
9999 abandon: saving in free-list of size 4
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1000
9999 mem: storing 1000 in location 2
 102 run: 3:boolean <- equal 1:address, 2:address
9999 mem: location 1 is 1000
9999 mem: location 2 is 1000
9999 mem: storing 1 in location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
