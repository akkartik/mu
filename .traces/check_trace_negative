9991 load: --- defining scenario-check_trace_negative
9993 parse: instruction: run
9993 parse:   ingredient: {"\n    1:number <- add 2, 2\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:number <- add 2, 2
  ]
9993 parse: instruction: trace-should-not-contain
9993 parse:   ingredient: {"\n    mem: storing 5 in location 1\n  ": "literal-string"}
9992 load: after rewriting: trace-should-not-contain [
    mem: storing 5 in location 1
  ]
9990 transform: === transform_all()
9991 transform: --- transform names for recipe scenario-check_trace_negative
9991 transform: --- transform braces for recipe scenario-check_trace_negative
9991 transform: run ...
9991 transform: trace-should-not-contain ...
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-check_trace_negative
 102 run: run [
    1:number <- add 2, 2
  ]
9991 load: --- defining run1001
9993 parse: instruction: add
9993 parse:   ingredient: {"2": "literal"}
9993 parse:   ingredient: {"2": "literal"}
9993 parse:   product: {"1": "number"}
9992 load: after rewriting: 1:number <- add 2, 2
9990 transform: === transform_all()
9991 transform: --- transform names for recipe run1001
9991 transform: --- transform braces for recipe run1001
9991 transform: add ...
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: run: incrementing callstack depth to 2
 103 run: 1:number <- add 2, 2
9999 mem: storing 4 in location 1
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: trace-should-not-contain [
    mem: storing 5 in location 1
  ]
9999 trace: fall-through: exiting scenario-check_trace_negative; decrementing callstack depth from 1
