schedule: expect-stdin/read-move
run: expect-stdin/read-move 2: (((2 tagged-value)) ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read/expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read/expect-stdin/read-move 0: 101816 => ((default-space space-address))
run: read/expect-stdin/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read/expect-stdin/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101818 <= 1031
run: read/expect-stdin/read-move 2: (((2 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 1 1034 . nil))
run: empty?/read/expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: empty?/read/expect-stdin/read-move 0: 101847 => ((default-space space-address))
run: empty?/read/expect-stdin/read-move 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: empty?/read/expect-stdin/read-move 1: #(tagged record (1 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 101849 <= 1
mem: ((1 channel)): 101850 <= 1
mem: ((1 channel)): 101851 <= 1034
run: empty?/read/expect-stdin/read-move 2: (((4 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((101849 integer) (raw)) => 1
run: empty?/read/expect-stdin/read-move 2: 1 => ((4 integer))
mem: ((4 integer)): 101852 <= 1
run: empty?/read/expect-stdin/read-move 3: (((5 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((101850 integer) (raw)) => 1
run: empty?/read/expect-stdin/read-move 3: 1 => ((5 integer))
mem: ((5 integer)): 101853 <= 1
run: empty?/read/expect-stdin/read-move 4: (((6 boolean)) <- ((equal)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 1
mem: ((5 integer)) => 1
run: empty?/read/expect-stdin/read-move 4: t => ((6 boolean))
mem: ((6 boolean)): 101854 <= t
run: empty?/read/expect-stdin/read-move 5: (((reply)) ((6 boolean)))
mem: ((6 boolean)) => t
run: read/expect-stdin/read-move 2: t => ((2 boolean))
mem: ((2 boolean)): 101819 <= t
run: read/expect-stdin/read-move 3: (((jump-unless)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => t
run: read/expect-stdin/read-move 4: (((3 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: read/expect-stdin/read-move 4: 1032 => ((3 integer-address))
mem: ((3 integer-address)): 101820 <= 1032
run: read/expect-stdin/read-move 5: (((sleep)) ((until-location-changes literal)) ((3 integer-address) (deref)))
mem: ((3 integer-address) (deref)) => 1
schedule: pushing read/expect-stdin/read-move to sleep queue
schedule: send-final-key
run: send-final-key 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
run: send-final-key 0: 401000 => ((default-space space-address))
run: send-final-key 1: (((1 character)) <- ((copy)) ((
 literal)))
run: send-final-key 1: #\newline => ((1 character))
mem: ((1 character)): 401002 <= #\newline
run: send-final-key 2: (((2 tagged-value)) <- ((save-type)) ((1 character)))
mem: ((1 character)) => 

run: send-final-key 2: #(tagged record (character #\newline)) => ((2 tagged-value))
mem: ((2 tagged-value)): 401003 <= character
mem: ((2 tagged-value)): 401004 <= #\newline
run: send-final-key 3: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
mem: ((1 channel-address) (raw)) => 1031
mem: ((2 tagged-value)) => #(tagged record (character 
 . nil))
run: write/send-final-key 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: write/send-final-key 0: 401031 => ((default-space space-address))
run: write/send-final-key 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 #(tagged record (character #\newline . nil)))
run: write/send-final-key 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 401033 <= 1031
run: write/send-final-key 2: (((2 tagged-value)) <- ((next-input)))
arg: nil 1 (1031 #(tagged record (character #\newline . nil)))
run: write/send-final-key 2: #(tagged record (character #\newline . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 401034 <= character
mem: ((2 tagged-value)): 401035 <= #\newline
run: write/send-final-key 3: (((4 boolean)) <- ((full?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 1 1034 . nil))
run: full?/write/send-final-key 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: full?/write/send-final-key 0: 401062 => ((default-space space-address))
run: full?/write/send-final-key 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: full?/write/send-final-key 1: #(tagged record (1 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 401064 <= 1
mem: ((1 channel)): 401065 <= 1
mem: ((1 channel)): 401066 <= 1034
run: full?/write/send-final-key 2: (((4 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((401065 integer) (raw)) => 1
run: full?/write/send-final-key 2: 1 => ((4 integer))
mem: ((4 integer)): 401067 <= 1
run: full?/write/send-final-key 3: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 1
run: full?/write/send-final-key 3: 2 => ((4 integer))
mem: ((4 integer)): 401067 <= 2
run: full?/write/send-final-key 4: (((5 integer)) <- ((capacity)) ((1 channel)))
mem: ((1 channel)) => #(tagged record (1 1 1034 . nil))
run: capacity/full?/write/send-final-key 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: capacity/full?/write/send-final-key 0: 401093 => ((default-space space-address))
run: capacity/full?/write/send-final-key 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: capacity/full?/write/send-final-key 1: #(tagged record (1 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 401095 <= 1
mem: ((1 channel)): 401096 <= 1
mem: ((1 channel)): 401097 <= 1034
run: capacity/full?/write/send-final-key 2: (((4 tagged-value-array-address)) <- ((get)) ((1 channel)) ((2 offset)))
mem: ((401097 tagged-value-array-address) (raw)) => 1034
run: capacity/full?/write/send-final-key 2: 1034 => ((4 tagged-value-array-address))
mem: ((4 tagged-value-array-address)): 401098 <= 1034
run: capacity/full?/write/send-final-key 3: (((5 integer)) <- ((length)) ((4 tagged-value-array-address) (deref)))
array-len: ((4 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: capacity/full?/write/send-final-key 3: 2 => ((5 integer))
mem: ((5 integer)): 401099 <= 2
run: capacity/full?/write/send-final-key 4: (((reply)) ((5 integer)))
mem: ((5 integer)) => 2
run: full?/write/send-final-key 4: 2 => ((5 integer))
mem: ((5 integer)): 401068 <= 2
run: full?/write/send-final-key 5: (((6 boolean)) <- ((less-than)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 2
mem: ((5 integer)) => 2
run: full?/write/send-final-key 5: nil => ((6 boolean))
mem: ((6 boolean)): 401069 <= nil
run: full?/write/send-final-key 6: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => nil
run: full?/write/send-final-key 7: (((4 integer)) <- ((copy)) ((0 literal)))
run: full?/write/send-final-key 7: 0 => ((4 integer))
mem: ((4 integer)): 401067 <= 0
run: full?/write/send-final-key 8: (((7 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((401064 integer) (raw)) => 1
run: full?/write/send-final-key 8: 1 => ((7 integer))
mem: ((7 integer)): 401070 <= 1
run: full?/write/send-final-key 9: (((8 boolean)) <- ((equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 1
mem: ((4 integer)) => 0
run: full?/write/send-final-key 9: nil => ((8 boolean))
mem: ((8 boolean)): 401071 <= nil
run: full?/write/send-final-key 10: (((reply)) ((8 boolean)))
mem: ((8 boolean)) => nil
run: write/send-final-key 3: nil => ((4 boolean))
mem: ((4 boolean)): 401036 <= nil
run: write/send-final-key 4: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => nil
run: write/send-final-key 7: (((6 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: write/send-final-key 7: 1034 => ((6 tagged-value-array-address))
mem: ((6 tagged-value-array-address)): 401038 <= 1034
run: write/send-final-key 8: (((7 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: write/send-final-key 8: 1032 => ((7 integer-address))
mem: ((7 integer-address)): 401039 <= 1032
run: write/send-final-key 9: (((8 tagged-value-address)) <- ((index-address)) ((6 tagged-value-array-address) (deref)) ((7 integer-address) (deref)))
mem: ((7 integer-address) (deref)) => 1
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
run: write/send-final-key 9: 1037 => ((8 tagged-value-address))
mem: ((8 tagged-value-address)): 401040 <= 1037
run: write/send-final-key 10: (((8 tagged-value-address) (deref)) <- ((copy)) ((2 tagged-value)))
mem: ((2 tagged-value)) => #(tagged record (character 
 . nil))
run: write/send-final-key 10: #(tagged record (character #\newline . nil)) => ((8 tagged-value-address) (deref))
mem: ((8 tagged-value-address) (deref)): 1037 <= character
mem: ((8 tagged-value-address) (deref)): 1038 <= #\newline
run: write/send-final-key 11: (((7 integer-address) (deref)) <- ((add)) ((7 integer-address) (deref)) ((1 literal)))
mem: ((7 integer-address) (deref)) => 1
run: write/send-final-key 11: 2 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 2
run: write/send-final-key 12: (((9 integer)) <- ((length)) ((6 tagged-value-array-address) (deref)))
array-len: ((6 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: write/send-final-key 12: 2 => ((9 integer))
mem: ((9 integer)): 401041 <= 2
run: write/send-final-key 13: (((10 boolean)) <- ((less-than)) ((7 integer-address) (deref)) ((9 integer)))
mem: ((7 integer-address) (deref)) => 2
mem: ((9 integer)) => 2
run: write/send-final-key 13: nil => ((10 boolean))
mem: ((10 boolean)): 401042 <= nil
run: write/send-final-key 14: (((jump-if)) ((10 boolean)) ((1 offset)))
mem: ((10 boolean)) => nil
run: write/send-final-key 15: (((7 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: write/send-final-key 15: 0 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 0
run: write/send-final-key 16: (((reply)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (1 0 1034 . nil))
run: send-final-key 3: #(tagged record (1 0 1034 . nil)) => ((1 channel-address) (raw) (deref))
mem: ((1 channel-address) (raw) (deref)): 1031 <= 1
mem: ((1 channel-address) (raw) (deref)): 1032 <= 0
mem: ((1 channel-address) (raw) (deref)): 1033 <= 1034
schedule: done with routine 
schedule: waking up read/expect-stdin/read-move
schedule: read/expect-stdin/read-move
run: read/expect-stdin/read-move 6: (((4 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: read/expect-stdin/read-move 6: 1031 => ((4 integer-address))
mem: ((4 integer-address)): 101821 <= 1031
run: read/expect-stdin/read-move 7: (((5 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: read/expect-stdin/read-move 7: 1034 => ((5 tagged-value-array-address))
mem: ((5 tagged-value-array-address)): 101822 <= 1034
run: read/expect-stdin/read-move 8: (((6 tagged-value)) <- ((index)) ((5 tagged-value-array-address) (deref)) ((4 integer-address) (deref)))
mem: ((4 integer-address) (deref)) => 1
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
mem: ((1037 tagged-value) (raw)) => #(tagged record (character 
 . nil))
run: read/expect-stdin/read-move 8: #(tagged record (character #\newline . nil)) => ((6 tagged-value))
mem: ((6 tagged-value)): 101823 <= character
mem: ((6 tagged-value)): 101824 <= #\newline
run: read/expect-stdin/read-move 9: (((4 integer-address) (deref)) <- ((add)) ((4 integer-address) (deref)) ((1 literal)))
mem: ((4 integer-address) (deref)) => 1
run: read/expect-stdin/read-move 9: 2 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1031 <= 2
run: read/expect-stdin/read-move 10: (((8 integer)) <- ((length)) ((5 tagged-value-array-address) (deref)))
array-len: ((5 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: read/expect-stdin/read-move 10: 2 => ((8 integer))
mem: ((8 integer)): 101825 <= 2
run: read/expect-stdin/read-move 11: (((9 boolean)) <- ((less-than)) ((4 integer-address) (deref)) ((8 integer)))
mem: ((4 integer-address) (deref)) => 2
mem: ((8 integer)) => 2
run: read/expect-stdin/read-move 11: nil => ((9 boolean))
mem: ((9 boolean)): 101826 <= nil
run: read/expect-stdin/read-move 12: (((jump-if)) ((9 boolean)) ((1 offset)))
mem: ((9 boolean)) => nil
run: read/expect-stdin/read-move 13: (((4 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: read/expect-stdin/read-move 13: 0 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1031 <= 0
run: read/expect-stdin/read-move 14: (((reply)) ((6 tagged-value)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((6 tagged-value)) => #(tagged record (character 
 . nil))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (0 0 1034 . nil))
run: expect-stdin/read-move 2: #(tagged record (character #\newline . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 101726 <= character
mem: ((2 tagged-value)): 101727 <= #\newline
run: expect-stdin/read-move 2: #(tagged record (0 0 1034 . nil)) => ((1 channel-address) (deref))
mem: ((1 channel-address) (deref)): 1031 <= 0
mem: ((1 channel-address) (deref)): 1032 <= 0
mem: ((1 channel-address) (deref)): 1033 <= 1034
run: expect-stdin/read-move 3: (((4 character)) <- ((maybe-coerce)) ((2 tagged-value)) ((character literal)))
mem: ((2 tagged-value)) => #(tagged record (character 
 . nil))
run: maybe-coerce/expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/expect-stdin/read-move 0: 101878 => ((default-space space-address))
run: maybe-coerce/expect-stdin/read-move 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/expect-stdin/read-move 1: 101909 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 101880 <= 101909
run: maybe-coerce/expect-stdin/read-move 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (character #\newline . nil)) character)
run: maybe-coerce/expect-stdin/read-move 2: #(tagged record (character #\newline . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 101909 <= character
mem: ((1 tagged-value-address) (deref)): 101910 <= #\newline
run: maybe-coerce/expect-stdin/read-move 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (character #\newline . nil)) character)
run: maybe-coerce/expect-stdin/read-move 3: character => ((2 type))
mem: ((2 type)): 101881 <= character
run: maybe-coerce/expect-stdin/read-move 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((101909 type) (raw)) => character
run: maybe-coerce/expect-stdin/read-move 4: character => ((3 type))
mem: ((3 type)): 101882 <= character
run: maybe-coerce/expect-stdin/read-move 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => character
mem: ((2 type)) => character
run: maybe-coerce/expect-stdin/read-move 5: t => ((4 boolean))
mem: ((4 boolean)): 101883 <= t
run: maybe-coerce/expect-stdin/read-move 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => t
run: maybe-coerce/expect-stdin/read-move 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
mem: ((101910 location) (raw)) => 

run: maybe-coerce/expect-stdin/read-move 8: #\newline => ((5 location))
mem: ((5 location)): 101884 <= #\newline
run: maybe-coerce/expect-stdin/read-move 9: (((reply)) ((5 location)) ((4 boolean)))
mem: ((5 location)) => 

mem: ((4 boolean)) => t
run: expect-stdin/read-move 3: #\newline => ((4 character))
mem: ((4 character)): 101728 <= #\newline
run: expect-stdin/read-move 4: (((5 character)) <- ((next-input)))
arg: nil 1 (1031 #\newline)
run: expect-stdin/read-move 4: #\newline => ((5 character))
mem: ((5 character)): 101729 <= #\newline
run: expect-stdin/read-move 5: (((6 boolean)) <- ((equal)) ((4 character)) ((5 character)))
mem: ((4 character)) => 

mem: ((5 character)) => 

run: expect-stdin/read-move 5: t => ((6 boolean))
mem: ((6 boolean)): 101730 <= t
run: expect-stdin/read-move 6: (((assert)) ((6 boolean)) ((expected character not found literal)))
mem: ((6 boolean)) => t
run: read-move 10: (((6 move-address)) <- ((new)) ((move literal)))
run: read-move 10: 101911 => ((6 move-address))
mem: ((6 move-address)): 101007 <= 101911
run: read-move 11: (((7 integer-integer-pair-address)) <- ((get-address)) ((6 move-address) (deref)) ((0 offset)))
run: read-move 11: 101911 => ((7 integer-integer-pair-address))
mem: ((7 integer-integer-pair-address)): 101008 <= 101911
run: read-move 12: (((8 integer-address)) <- ((get-address)) ((7 integer-integer-pair-address) (deref)) ((0 offset)))
run: read-move 12: 101911 => ((8 integer-address))
mem: ((8 integer-address)): 101009 <= 101911
run: read-move 13: (((8 integer-address) (deref)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 0
run: read-move 13: 0 => ((8 integer-address) (deref))
mem: ((8 integer-address) (deref)): 101911 <= 0
run: read-move 14: (((8 integer-address)) <- ((get-address)) ((7 integer-integer-pair-address) (deref)) ((1 offset)))
run: read-move 14: 101912 => ((8 integer-address))
mem: ((8 integer-address)): 101009 <= 101912
run: read-move 15: (((8 integer-address) (deref)) <- ((copy)) ((3 integer)))
mem: ((3 integer)) => 1
run: read-move 15: 1 => ((8 integer-address) (deref))
mem: ((8 integer-address) (deref)): 101912 <= 1
run: read-move 16: (((9 integer-integer-pair-address)) <- ((get-address)) ((6 move-address) (deref)) ((1 offset)))
run: read-move 16: 101913 => ((9 integer-integer-pair-address))
mem: ((9 integer-integer-pair-address)): 101010 <= 101913
run: read-move 17: (((8 integer-address)) <- ((get-address)) ((9 integer-integer-pair-address) (deref)) ((0 offset)))
run: read-move 17: 101913 => ((8 integer-address))
mem: ((8 integer-address)): 101009 <= 101913
run: read-move 18: (((8 integer-address) (deref)) <- ((copy)) ((4 integer)))
mem: ((4 integer)) => 0
run: read-move 18: 0 => ((8 integer-address) (deref))
mem: ((8 integer-address) (deref)): 101913 <= 0
run: read-move 19: (((8 integer-address)) <- ((get-address)) ((9 integer-integer-pair-address) (deref)) ((1 offset)))
run: read-move 19: 101914 => ((8 integer-address))
mem: ((8 integer-address)): 101009 <= 101914
run: read-move 20: (((8 integer-address) (deref)) <- ((copy)) ((5 integer)))
mem: ((5 integer)) => 3
run: read-move 20: 3 => ((8 integer-address) (deref))
mem: ((8 integer-address) (deref)): 101914 <= 3
run: read-move 21: (((reply)) ((6 move-address)))
mem: ((6 move-address)) => 101911
schedule: done with routine 
