c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((stdin channel-address)) <- ((next-input))) -- nil
c{0: 2 (((x tagged-value)) ((stdin channel-address) (deref)) <- ((read)) ((stdin channel-address))) -- nil
c{0: 3 (((c character)) <- ((maybe-coerce)) ((x tagged-value)) ((character literal))) -- nil
c{0: 4 (((expected character)) <- ((next-input))) -- nil
c{0: 5 (((match? boolean)) <- ((equal)) ((c character)) ((expected character))) -- nil
c{0: 6 (((assert)) ((match? boolean)) ((expected character not found literal))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((stdin channel-address)) <- ((next-input)))
c{1: 2 ✓ (((x tagged-value)) ((stdin channel-address) (deref)) <- ((read)) ((stdin channel-address)))
c{1: 3 ✓ (((c character)) <- ((maybe-coerce)) ((x tagged-value)) ((character literal)))
c{1: 4 ✓ (((expected character)) <- ((next-input)))
c{1: 5 ✓ (((match? boolean)) <- ((equal)) ((c character)) ((expected character)))
c{1: 6 ✓ (((assert)) ((match? boolean)) ((expected character not found literal)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((initial-position list-address)) <- ((next-input))) -- nil
c{0: 2 (((len integer)) <- ((list-length)) ((initial-position list-address))) -- nil
c{0: 3 (((correct-length? boolean)) <- ((equal)) ((len integer)) ((64 literal))) -- nil
c{0: 4 (((assert)) ((correct-length? boolean)) ((chessboard had incorrect size literal))) -- nil
c{0: 5 (((b board-address)) <- ((new)) ((board literal)) ((8 literal))) -- nil
c{0: 6 (((col integer)) <- ((copy)) ((0 literal))) -- nil
c{0: 7 (((curr list-address)) <- ((copy)) ((initial-position list-address))) -- nil
c{0: 8 (((done? boolean)) <- ((equal)) ((col integer)) ((8 literal))) -- ((open 8))
c{0: 9 (((break-if)) ((done? boolean))) -- ((open 8))
c{0: 10 (((file file-address-address)) <- ((index-address)) ((b board-address) (deref)) ((col integer))) -- ((open 8))
c{0: 11 (((file file-address-address) (deref)) ((curr list-address)) <- ((init-file)) ((curr list-address))) -- ((open 8))
c{0: 12 (((col integer)) <- ((add)) ((col integer)) ((1 literal))) -- ((open 8))
c{0: 13 (((loop))) -- ((open 8))
c{0: 14 (((reply)) ((b board-address))) -- ((close 14) (open 8))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((initial-position list-address)) <- ((next-input)))
c{1: 2 ✓ (((len integer)) <- ((list-length)) ((initial-position list-address)))
c{1: 3 ✓ (((correct-length? boolean)) <- ((equal)) ((len integer)) ((64 literal)))
c{1: 4 ✓ (((assert)) ((correct-length? boolean)) ((chessboard had incorrect size literal)))
c{1: 5 ✓ (((b board-address)) <- ((new)) ((board literal)) ((8 literal)))
c{1: 6 ✓ (((col integer)) <- ((copy)) ((0 literal)))
c{1: 7 ✓ (((curr list-address)) <- ((copy)) ((initial-position list-address)))
c{1: 8 ✓ (((done? boolean)) <- ((equal)) ((col integer)) ((8 literal)))
c{1: 9 X (((break-if)) ((done? boolean))) => (((jump-if)) ((done? boolean)) ((4 offset)))
c{1: 10 ✓ (((file file-address-address)) <- ((index-address)) ((b board-address) (deref)) ((col integer)))
c{1: 11 ✓ (((file file-address-address) (deref)) ((curr list-address)) <- ((init-file)) ((curr list-address)))
c{1: 12 ✓ (((col integer)) <- ((add)) ((col integer)) ((1 literal)))
c{1: 13 X (((loop))) => (((jump)) ((-6 offset)))
c{1: 14 ✓ (((reply)) ((b board-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((cursor list-address)) <- ((next-input))) -- nil
c{0: 2 (((result file-address)) <- ((new)) ((file literal)) ((8 literal))) -- nil
c{0: 3 (((row integer)) <- ((copy)) ((0 literal))) -- nil
c{0: 4 (((done? boolean)) <- ((equal)) ((row integer)) ((8 literal))) -- ((open 4))
c{0: 5 (((break-if)) ((done? boolean))) -- ((open 4))
c{0: 6 (((src tagged-value-address)) <- ((list-value-address)) ((cursor list-address))) -- ((open 4))
c{0: 7 (((dest square-address)) <- ((index-address)) ((result file-address) (deref)) ((row integer))) -- ((open 4))
c{0: 8 (((dest square-address) (deref)) <- ((get)) ((src tagged-value-address) (deref)) ((payload offset))) -- ((open 4))
c{0: 9 (((cursor list-address)) <- ((list-next)) ((cursor list-address))) -- ((open 4))
c{0: 10 (((row integer)) <- ((add)) ((row integer)) ((1 literal))) -- ((open 4))
c{0: 11 (((loop))) -- ((open 4))
c{0: 12 (((reply)) ((result file-address)) ((cursor list-address))) -- ((close 12) (open 4))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((cursor list-address)) <- ((next-input)))
c{1: 2 ✓ (((result file-address)) <- ((new)) ((file literal)) ((8 literal)))
c{1: 3 ✓ (((row integer)) <- ((copy)) ((0 literal)))
c{1: 4 ✓ (((done? boolean)) <- ((equal)) ((row integer)) ((8 literal)))
c{1: 5 X (((break-if)) ((done? boolean))) => (((jump-if)) ((done? boolean)) ((6 offset)))
c{1: 6 ✓ (((src tagged-value-address)) <- ((list-value-address)) ((cursor list-address)))
c{1: 7 ✓ (((dest square-address)) <- ((index-address)) ((result file-address) (deref)) ((row integer)))
c{1: 8 ✓ (((dest square-address) (deref)) <- ((get)) ((src tagged-value-address) (deref)) ((payload offset)))
c{1: 9 ✓ (((cursor list-address)) <- ((list-next)) ((cursor list-address)))
c{1: 10 ✓ (((row integer)) <- ((add)) ((row integer)) ((1 literal)))
c{1: 11 X (((loop))) => (((jump)) ((-8 offset)))
c{1: 12 ✓ (((reply)) ((result file-address)) ((cursor list-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((initial-position list-address)) <- ((init-list)) ((R literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((r literal)) ((N literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((n literal)) ((B literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((b literal)) ((Q literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((q literal)) ((K literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((k literal)) ((B literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((b literal)) ((N literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((n literal)) ((R literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((r literal))) -- nil
c{0: 2 (((b board-address)) <- ((init-board)) ((initial-position list-address))) -- nil
c{0: 3 (((cursor-mode))) -- nil
c{0: 4 (((stdin channel-address)) <- ((init-channel)) ((1 literal))) -- nil
c{0: 5 (((fork-helper)) ((send-keys-to-stdin fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((nil literal) (keyboard)) ((stdin channel-address))) -- nil
c{0: 6 (((buffered-stdin channel-address)) <- ((init-channel)) ((1 literal))) -- nil
c{0: 7 (((fork-helper)) ((buffer-lines fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((stdin channel-address)) ((buffered-stdin channel-address))) -- nil
c{0: 8 ((($print)) ((Stupid text-mode chessboard. White pieces in uppercase; black pieces in lowercase. No checking for legal moves. literal))) -- nil
c{0: 9 (((cursor-to-next-line)) ((nil literal) (terminal))) -- nil
c{0: 10 (((cursor-to-next-line)) ((nil literal) (terminal))) -- ((open 10))
c{0: 11 (((print-board)) ((nil literal) (terminal)) ((b board-address))) -- ((open 10))
c{0: 12 (((cursor-to-next-line)) ((nil literal) (terminal))) -- ((open 10))
c{0: 13 ((($print)) ((Type in your move as <from square>-<to square>. For example: 'a2-a4'. Then press <enter>. literal))) -- ((open 10))
c{0: 14 (((cursor-to-next-line)) ((nil literal) (terminal))) -- ((open 10))
c{0: 15 ((($print)) ((Hit 'q' to exit. literal))) -- ((open 10))
c{0: 16 (((cursor-to-next-line)) ((nil literal) (terminal))) -- ((open 10))
c{0: 17 ((($print)) ((move:  literal))) -- ((open 10))
c{0: 18 (((m move-address)) <- ((read-move)) ((buffered-stdin channel-address))) -- ((open 10))
c{0: 19 (((break-unless)) ((m move-address))) -- ((open 10))
c{0: 20 (((b board-address)) <- ((make-move)) ((b board-address)) ((m move-address))) -- ((open 10))
c{0: 21 (((loop))) -- ((open 10))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((initial-position list-address)) <- ((init-list)) ((R literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((r literal)) ((N literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((n literal)) ((B literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((b literal)) ((Q literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((q literal)) ((K literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((k literal)) ((B literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((b literal)) ((N literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((n literal)) ((R literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((r literal)))
c{1: 2 ✓ (((b board-address)) <- ((init-board)) ((initial-position list-address)))
c{1: 3 ✓ (((cursor-mode)))
c{1: 4 ✓ (((stdin channel-address)) <- ((init-channel)) ((1 literal)))
c{1: 5 ✓ (((fork-helper)) ((send-keys-to-stdin fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((nil literal) (keyboard)) ((stdin channel-address)))
c{1: 6 ✓ (((buffered-stdin channel-address)) <- ((init-channel)) ((1 literal)))
c{1: 7 ✓ (((fork-helper)) ((buffer-lines fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((stdin channel-address)) ((buffered-stdin channel-address)))
c{1: 8 ✓ ((($print)) ((Stupid text-mode chessboard. White pieces in uppercase; black pieces in lowercase. No checking for legal moves. literal)))
c{1: 9 ✓ (((cursor-to-next-line)) ((nil literal) (terminal)))
c{1: 10 ✓ (((cursor-to-next-line)) ((nil literal) (terminal)))
c{1: 11 ✓ (((print-board)) ((nil literal) (terminal)) ((b board-address)))
c{1: 12 ✓ (((cursor-to-next-line)) ((nil literal) (terminal)))
c{1: 13 ✓ ((($print)) ((Type in your move as <from square>-<to square>. For example: 'a2-a4'. Then press <enter>. literal)))
c{1: 14 ✓ (((cursor-to-next-line)) ((nil literal) (terminal)))
c{1: 15 ✓ ((($print)) ((Hit 'q' to exit. literal)))
c{1: 16 ✓ (((cursor-to-next-line)) ((nil literal) (terminal)))
c{1: 17 ✓ ((($print)) ((move:  literal)))
c{1: 18 ✓ (((m move-address)) <- ((read-move)) ((buffered-stdin channel-address)))
c{1: 19 X (((break-unless)) ((m move-address))) => (((jump-unless)) ((m move-address)) ((2 offset)))
c{1: 20 ✓ (((b board-address)) <- ((make-move)) ((b board-address)) ((m move-address)))
c{1: 21 X (((loop))) => (((jump)) ((-12 offset)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((b board-address)) <- ((next-input))) -- nil
c{0: 2 (((m move-address)) <- ((next-input))) -- nil
c{0: 3 (((x integer-integer-pair)) <- ((get)) ((m move-address) (deref)) ((from offset))) -- nil
c{0: 4 (((from-file integer)) <- ((get)) ((x integer-integer-pair)) ((0 offset))) -- nil
c{0: 5 (((from-rank integer)) <- ((get)) ((x integer-integer-pair)) ((1 offset))) -- nil
c{0: 6 (((f file-address)) <- ((index)) ((b board-address) (deref)) ((from-file integer))) -- nil
c{0: 7 (((src square-address)) <- ((index-address)) ((f file-address) (deref)) ((from-rank integer))) -- nil
c{0: 8 (((x integer-integer-pair)) <- ((get)) ((m move-address) (deref)) ((to offset))) -- nil
c{0: 9 (((to-file integer)) <- ((get)) ((x integer-integer-pair)) ((0 offset))) -- nil
c{0: 10 (((to-rank integer)) <- ((get)) ((x integer-integer-pair)) ((1 offset))) -- nil
c{0: 11 (((f file-address)) <- ((index)) ((b board-address) (deref)) ((to-file integer))) -- nil
c{0: 12 (((dest square-address)) <- ((index-address)) ((f file-address) (deref)) ((to-rank integer))) -- nil
c{0: 13 (((dest square-address) (deref)) <- ((copy)) ((src square-address) (deref))) -- nil
c{0: 14 (((src square-address) (deref)) <- ((copy)) ((_ literal))) -- nil
c{0: 15 (((reply)) ((b board-address))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((b board-address)) <- ((next-input)))
c{1: 2 ✓ (((m move-address)) <- ((next-input)))
c{1: 3 ✓ (((x integer-integer-pair)) <- ((get)) ((m move-address) (deref)) ((from offset)))
c{1: 4 ✓ (((from-file integer)) <- ((get)) ((x integer-integer-pair)) ((0 offset)))
c{1: 5 ✓ (((from-rank integer)) <- ((get)) ((x integer-integer-pair)) ((1 offset)))
c{1: 6 ✓ (((f file-address)) <- ((index)) ((b board-address) (deref)) ((from-file integer)))
c{1: 7 ✓ (((src square-address)) <- ((index-address)) ((f file-address) (deref)) ((from-rank integer)))
c{1: 8 ✓ (((x integer-integer-pair)) <- ((get)) ((m move-address) (deref)) ((to offset)))
c{1: 9 ✓ (((to-file integer)) <- ((get)) ((x integer-integer-pair)) ((0 offset)))
c{1: 10 ✓ (((to-rank integer)) <- ((get)) ((x integer-integer-pair)) ((1 offset)))
c{1: 11 ✓ (((f file-address)) <- ((index)) ((b board-address) (deref)) ((to-file integer)))
c{1: 12 ✓ (((dest square-address)) <- ((index-address)) ((f file-address) (deref)) ((to-rank integer)))
c{1: 13 ✓ (((dest square-address) (deref)) <- ((copy)) ((src square-address) (deref)))
c{1: 14 ✓ (((src square-address) (deref)) <- ((copy)) ((_ literal)))
c{1: 15 ✓ (((reply)) ((b board-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((screen terminal-address)) <- ((next-input))) -- nil
c{0: 2 (((b board-address)) <- ((next-input))) -- nil
c{0: 3 (((row integer)) <- ((copy)) ((7 literal))) -- nil
c{0: 4 (((done? boolean)) <- ((less-than)) ((row integer)) ((0 literal))) -- ((open 4))
c{0: 5 (((break-if)) ((done? boolean))) -- ((open 4))
c{0: 6 (((rank integer)) <- ((add)) ((row integer)) ((1 literal))) -- ((open 4))
c{0: 7 (((print-integer)) ((screen terminal-address)) ((rank integer))) -- ((open 4))
c{0: 8 (((s string-address)) <- ((new))  | ) -- ((open 4))
c{0: 9 (((print-string)) ((screen terminal-address)) ((s string-address))) -- ((open 4))
c{0: 10 (((col integer)) <- ((copy)) ((0 literal))) -- ((open 4))
c{0: 11 (((done? boolean)) <- ((equal)) ((col integer)) ((8 literal))) -- ((open 11) (open 4))
c{0: 12 (((break-if)) ((done? boolean))) -- ((open 11) (open 4))
c{0: 13 (((f file-address)) <- ((index)) ((b board-address) (deref)) ((col integer))) -- ((open 11) (open 4))
c{0: 14 (((s square)) <- ((index)) ((f file-address) (deref)) ((row integer))) -- ((open 11) (open 4))
c{0: 15 (((print-character)) ((screen terminal-address)) ((s square))) -- ((open 11) (open 4))
c{0: 16 (((print-character)) ((screen terminal-address)) ((  literal))) -- ((open 11) (open 4))
c{0: 17 (((col integer)) <- ((add)) ((col integer)) ((1 literal))) -- ((open 11) (open 4))
c{0: 18 (((loop))) -- ((open 11) (open 4))
c{0: 19 (((row integer)) <- ((subtract)) ((row integer)) ((1 literal))) -- ((close 19) (open 11) (open 4))
c{0: 20 (((cursor-to-next-line)) ((screen terminal-address))) -- ((close 19) (open 11) (open 4))
c{0: 21 (((loop))) -- ((close 19) (open 11) (open 4))
c{0: 22 (((s string-address)) <- ((new))   +----------------) -- ((close 22) (close 19) (open 11) (open 4))
c{0: 23 (((print-string)) ((screen terminal-address)) ((s string-address))) -- ((close 22) (close 19) (open 11) (open 4))
c{0: 24 (((cursor-to-next-line)) ((screen terminal-address))) -- ((close 22) (close 19) (open 11) (open 4))
c{0: 25 (((s string-address)) <- ((new))     a b c d e f g h) -- ((close 22) (close 19) (open 11) (open 4))
c{0: 26 (((print-string)) ((screen terminal-address)) ((s string-address))) -- ((close 22) (close 19) (open 11) (open 4))
c{0: 27 (((cursor-to-next-line)) ((screen terminal-address))) -- ((close 22) (close 19) (open 11) (open 4))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((screen terminal-address)) <- ((next-input)))
c{1: 2 ✓ (((b board-address)) <- ((next-input)))
c{1: 3 ✓ (((row integer)) <- ((copy)) ((7 literal)))
c{1: 4 ✓ (((done? boolean)) <- ((less-than)) ((row integer)) ((0 literal)))
c{1: 5 X (((break-if)) ((done? boolean))) => (((jump-if)) ((done? boolean)) ((16 offset)))
c{1: 6 ✓ (((rank integer)) <- ((add)) ((row integer)) ((1 literal)))
c{1: 7 ✓ (((print-integer)) ((screen terminal-address)) ((rank integer)))
c{1: 8 ✓ (((s string-address)) <- ((new))  | )
c{1: 9 ✓ (((print-string)) ((screen terminal-address)) ((s string-address)))
c{1: 10 ✓ (((col integer)) <- ((copy)) ((0 literal)))
c{1: 11 ✓ (((done? boolean)) <- ((equal)) ((col integer)) ((8 literal)))
c{1: 12 X (((break-if)) ((done? boolean))) => (((jump-if)) ((done? boolean)) ((6 offset)))
c{1: 13 ✓ (((f file-address)) <- ((index)) ((b board-address) (deref)) ((col integer)))
c{1: 14 ✓ (((s square)) <- ((index)) ((f file-address) (deref)) ((row integer)))
c{1: 15 ✓ (((print-character)) ((screen terminal-address)) ((s square)))
c{1: 16 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 17 ✓ (((col integer)) <- ((add)) ((col integer)) ((1 literal)))
c{1: 18 X (((loop))) => (((jump)) ((-8 offset)))
c{1: 19 ✓ (((row integer)) <- ((subtract)) ((row integer)) ((1 literal)))
c{1: 20 ✓ (((cursor-to-next-line)) ((screen terminal-address)))
c{1: 21 X (((loop))) => (((jump)) ((-18 offset)))
c{1: 22 ✓ (((s string-address)) <- ((new))   +----------------)
c{1: 23 ✓ (((print-string)) ((screen terminal-address)) ((s string-address)))
c{1: 24 ✓ (((cursor-to-next-line)) ((screen terminal-address)))
c{1: 25 ✓ (((s string-address)) <- ((new))     a b c d e f g h)
c{1: 26 ✓ (((print-string)) ((screen terminal-address)) ((s string-address)))
c{1: 27 ✓ (((cursor-to-next-line)) ((screen terminal-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((stdin channel-address)) <- ((next-input))) -- nil
c{0: 2 (((x tagged-value)) ((stdin channel-address) (deref)) <- ((read)) ((stdin channel-address))) -- nil
c{0: 3 (((a character)) <- ((copy)) ((a literal))) -- nil
c{0: 4 (((file-base integer)) <- ((character-to-integer)) ((a character))) -- nil
c{0: 5 (((c character)) <- ((maybe-coerce)) ((x tagged-value)) ((character literal))) -- nil
c{0: 6 (((quit boolean)) <- ((equal)) ((c character)) ((q literal))) -- ((open 6))
c{0: 7 (((break-unless)) ((quit boolean))) -- ((open 6))
c{0: 8 (((reply)) ((nil literal))) -- ((open 6))
c{0: 9 (((file integer)) <- ((character-to-integer)) ((c character))) -- ((close 9) (open 6))
c{0: 10 (((file integer)) <- ((subtract)) ((file integer)) ((file-base integer))) -- ((close 9) (open 6))
c{0: 11 (((above-min boolean)) <- ((greater-or-equal)) ((file integer)) ((0 literal))) -- ((close 9) (open 6))
c{0: 12 (((assert)) ((above-min boolean)) ((file too low literal))) -- ((close 9) (open 6))
c{0: 13 (((below-max boolean)) <- ((lesser-or-equal)) ((file integer)) ((7 literal))) -- ((close 9) (open 6))
c{0: 14 (((assert)) ((below-max boolean)) ((file too high literal))) -- ((close 9) (open 6))
c{0: 15 (((reply)) ((file integer))) -- ((close 9) (open 6))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((stdin channel-address)) <- ((next-input)))
c{1: 2 ✓ (((x tagged-value)) ((stdin channel-address) (deref)) <- ((read)) ((stdin channel-address)))
c{1: 3 ✓ (((a character)) <- ((copy)) ((a literal)))
c{1: 4 ✓ (((file-base integer)) <- ((character-to-integer)) ((a character)))
c{1: 5 ✓ (((c character)) <- ((maybe-coerce)) ((x tagged-value)) ((character literal)))
c{1: 6 ✓ (((quit boolean)) <- ((equal)) ((c character)) ((q literal)))
c{1: 7 X (((break-unless)) ((quit boolean))) => (((jump-unless)) ((quit boolean)) ((1 offset)))
c{1: 8 ✓ (((reply)) ((nil literal)))
c{1: 9 ✓ (((file integer)) <- ((character-to-integer)) ((c character)))
c{1: 10 ✓ (((file integer)) <- ((subtract)) ((file integer)) ((file-base integer)))
c{1: 11 ✓ (((above-min boolean)) <- ((greater-or-equal)) ((file integer)) ((0 literal)))
c{1: 12 ✓ (((assert)) ((above-min boolean)) ((file too low literal)))
c{1: 13 ✓ (((below-max boolean)) <- ((lesser-or-equal)) ((file integer)) ((7 literal)))
c{1: 14 ✓ (((assert)) ((below-max boolean)) ((file too high literal)))
c{1: 15 ✓ (((reply)) ((file integer)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((stdin channel-address)) <- ((next-input))) -- nil
c{0: 2 (((from-file integer)) <- ((read-file)) ((stdin channel-address))) -- nil
c{0: 3 (((break-if)) ((from-file integer))) -- ((open 3))
c{0: 4 (((reply)) ((nil literal))) -- ((open 3))
c{0: 5 (((from-rank integer)) <- ((read-rank)) ((stdin channel-address))) -- ((close 5) (open 3))
c{0: 6 (((expect-stdin)) ((stdin channel-address)) ((- literal))) -- ((close 5) (open 3))
c{0: 7 (((to-file integer)) <- ((read-file)) ((stdin channel-address))) -- ((close 5) (open 3))
c{0: 8 (((to-rank integer)) <- ((read-rank)) ((stdin channel-address))) -- ((close 5) (open 3))
c{0: 9 (((expect-stdin)) ((stdin channel-address)) ((
 literal))) -- ((close 5) (open 3))
c{0: 10 (((result move-address)) <- ((new)) ((move literal))) -- ((close 5) (open 3))
c{0: 11 (((f integer-integer-pair-address)) <- ((get-address)) ((result move-address) (deref)) ((from offset))) -- ((close 5) (open 3))
c{0: 12 (((dest integer-address)) <- ((get-address)) ((f integer-integer-pair-address) (deref)) ((0 offset))) -- ((close 5) (open 3))
c{0: 13 (((dest integer-address) (deref)) <- ((copy)) ((from-file integer))) -- ((close 5) (open 3))
c{0: 14 (((dest integer-address)) <- ((get-address)) ((f integer-integer-pair-address) (deref)) ((1 offset))) -- ((close 5) (open 3))
c{0: 15 (((dest integer-address) (deref)) <- ((copy)) ((from-rank integer))) -- ((close 5) (open 3))
c{0: 16 (((t0 integer-integer-pair-address)) <- ((get-address)) ((result move-address) (deref)) ((to offset))) -- ((close 5) (open 3))
c{0: 17 (((dest integer-address)) <- ((get-address)) ((t0 integer-integer-pair-address) (deref)) ((0 offset))) -- ((close 5) (open 3))
c{0: 18 (((dest integer-address) (deref)) <- ((copy)) ((to-file integer))) -- ((close 5) (open 3))
c{0: 19 (((dest integer-address)) <- ((get-address)) ((t0 integer-integer-pair-address) (deref)) ((1 offset))) -- ((close 5) (open 3))
c{0: 20 (((dest integer-address) (deref)) <- ((copy)) ((to-rank integer))) -- ((close 5) (open 3))
c{0: 21 (((reply)) ((result move-address))) -- ((close 5) (open 3))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((stdin channel-address)) <- ((next-input)))
c{1: 2 ✓ (((from-file integer)) <- ((read-file)) ((stdin channel-address)))
c{1: 3 X (((break-if)) ((from-file integer))) => (((jump-if)) ((from-file integer)) ((1 offset)))
c{1: 4 ✓ (((reply)) ((nil literal)))
c{1: 5 ✓ (((from-rank integer)) <- ((read-rank)) ((stdin channel-address)))
c{1: 6 ✓ (((expect-stdin)) ((stdin channel-address)) ((- literal)))
c{1: 7 ✓ (((to-file integer)) <- ((read-file)) ((stdin channel-address)))
c{1: 8 ✓ (((to-rank integer)) <- ((read-rank)) ((stdin channel-address)))
c{1: 9 ✓ (((expect-stdin)) ((stdin channel-address)) ((
 literal)))
c{1: 10 ✓ (((result move-address)) <- ((new)) ((move literal)))
c{1: 11 ✓ (((f integer-integer-pair-address)) <- ((get-address)) ((result move-address) (deref)) ((from offset)))
c{1: 12 ✓ (((dest integer-address)) <- ((get-address)) ((f integer-integer-pair-address) (deref)) ((0 offset)))
c{1: 13 ✓ (((dest integer-address) (deref)) <- ((copy)) ((from-file integer)))
c{1: 14 ✓ (((dest integer-address)) <- ((get-address)) ((f integer-integer-pair-address) (deref)) ((1 offset)))
c{1: 15 ✓ (((dest integer-address) (deref)) <- ((copy)) ((from-rank integer)))
c{1: 16 ✓ (((t0 integer-integer-pair-address)) <- ((get-address)) ((result move-address) (deref)) ((to offset)))
c{1: 17 ✓ (((dest integer-address)) <- ((get-address)) ((t0 integer-integer-pair-address) (deref)) ((0 offset)))
c{1: 18 ✓ (((dest integer-address) (deref)) <- ((copy)) ((to-file integer)))
c{1: 19 ✓ (((dest integer-address)) <- ((get-address)) ((t0 integer-integer-pair-address) (deref)) ((1 offset)))
c{1: 20 ✓ (((dest integer-address) (deref)) <- ((copy)) ((to-rank integer)))
c{1: 21 ✓ (((reply)) ((result move-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((stdin channel-address)) <- ((next-input))) -- nil
c{0: 2 (((x tagged-value)) ((stdin channel-address) (deref)) <- ((read)) ((stdin channel-address))) -- nil
c{0: 3 (((c character)) <- ((maybe-coerce)) ((x tagged-value)) ((character literal))) -- nil
c{0: 4 (((quit boolean)) <- ((equal)) ((c character)) ((q literal))) -- ((open 4))
c{0: 5 (((break-unless)) ((quit boolean))) -- ((open 4))
c{0: 6 (((reply)) ((nil literal))) -- ((open 4))
c{0: 7 (((rank integer)) <- ((character-to-integer)) ((c character))) -- ((close 7) (open 4))
c{0: 8 (((one character)) <- ((copy)) ((1 literal))) -- ((close 7) (open 4))
c{0: 9 (((rank-base integer)) <- ((character-to-integer)) ((one character))) -- ((close 7) (open 4))
c{0: 10 (((rank integer)) <- ((subtract)) ((rank integer)) ((rank-base integer))) -- ((close 7) (open 4))
c{0: 11 (((above-min boolean)) <- ((greater-or-equal)) ((rank integer)) ((0 literal))) -- ((close 7) (open 4))
c{0: 12 (((assert)) ((above-min boolean)) ((rank too low literal))) -- ((close 7) (open 4))
c{0: 13 (((below-max boolean)) <- ((lesser-or-equal)) ((rank integer)) ((7 literal))) -- ((close 7) (open 4))
c{0: 14 (((assert)) ((below-max boolean)) ((rank too high literal))) -- ((close 7) (open 4))
c{0: 15 (((reply)) ((rank integer))) -- ((close 7) (open 4))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((stdin channel-address)) <- ((next-input)))
c{1: 2 ✓ (((x tagged-value)) ((stdin channel-address) (deref)) <- ((read)) ((stdin channel-address)))
c{1: 3 ✓ (((c character)) <- ((maybe-coerce)) ((x tagged-value)) ((character literal)))
c{1: 4 ✓ (((quit boolean)) <- ((equal)) ((c character)) ((q literal)))
c{1: 5 X (((break-unless)) ((quit boolean))) => (((jump-unless)) ((quit boolean)) ((1 offset)))
c{1: 6 ✓ (((reply)) ((nil literal)))
c{1: 7 ✓ (((rank integer)) <- ((character-to-integer)) ((c character)))
c{1: 8 ✓ (((one character)) <- ((copy)) ((1 literal)))
c{1: 9 ✓ (((rank-base integer)) <- ((character-to-integer)) ((one character)))
c{1: 10 ✓ (((rank integer)) <- ((subtract)) ((rank integer)) ((rank-base integer)))
c{1: 11 ✓ (((above-min boolean)) <- ((greater-or-equal)) ((rank integer)) ((0 literal)))
c{1: 12 ✓ (((assert)) ((above-min boolean)) ((rank too low literal)))
c{1: 13 ✓ (((below-max boolean)) <- ((lesser-or-equal)) ((rank integer)) ((7 literal)))
c{1: 14 ✓ (((assert)) ((below-max boolean)) ((rank too high literal)))
c{1: 15 ✓ (((reply)) ((rank integer)))
cn0: convert-names in expect-stdin
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((stdin channel-address)) <- ((next-input))) nil nil
cn0: checking oarg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: location for oarg ((stdin channel-address)): 1
cn0: (((x tagged-value)) ((stdin channel-address) (deref)) <- ((read)) ((stdin channel-address))) ((stdin 1)) nil
cn0: checking arg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: checking oarg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: location for oarg ((x tagged-value)): 2
cn0: checking oarg ((stdin channel-address) (deref))
maybe-add: ((stdin channel-address) (deref))
cn0: (((c character)) <- ((maybe-coerce)) ((x tagged-value)) ((character literal))) ((stdin 1) (x 2)) nil
cn0: checking arg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: checking arg ((character literal))
cn0: checking oarg ((c character))
maybe-add: ((c character))
cn0: location for oarg ((c character)): 4
cn0: (((expected character)) <- ((next-input))) ((c 4) (stdin 1) (x 2)) nil
cn0: checking oarg ((expected character))
maybe-add: ((expected character))
cn0: location for oarg ((expected character)): 5
cn0: (((match? boolean)) <- ((equal)) ((c character)) ((expected character))) ((c 4) (expected 5) (stdin 1) (x 2)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking arg ((expected character))
maybe-add: ((expected character))
cn0: checking oarg ((match? boolean))
maybe-add: ((match? boolean))
cn0: location for oarg ((match? boolean)): 6
cn0: (((assert)) ((match? boolean)) ((expected character not found literal))) ((c 4) (expected 5) (match? 6) (stdin 1) (x 2)) nil
cn0: checking arg ((match? boolean))
maybe-add: ((match? boolean))
cn0: checking arg ((expected character not found literal))
cn0: convert-names in init-board
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((initial-position list-address)) <- ((next-input))) nil nil
cn0: checking oarg ((initial-position list-address))
maybe-add: ((initial-position list-address))
cn0: location for oarg ((initial-position list-address)): 1
cn0: (((len integer)) <- ((list-length)) ((initial-position list-address))) ((initial-position 1)) nil
cn0: checking arg ((initial-position list-address))
maybe-add: ((initial-position list-address))
cn0: checking oarg ((len integer))
maybe-add: ((len integer))
cn0: location for oarg ((len integer)): 2
cn0: (((correct-length? boolean)) <- ((equal)) ((len integer)) ((64 literal))) ((initial-position 1) (len 2)) nil
cn0: checking arg ((len integer))
maybe-add: ((len integer))
cn0: checking arg ((64 literal))
cn0: checking oarg ((correct-length? boolean))
maybe-add: ((correct-length? boolean))
cn0: location for oarg ((correct-length? boolean)): 3
cn0: (((assert)) ((correct-length? boolean)) ((chessboard had incorrect size literal))) ((correct-length? 3) (initial-position 1) (len 2)) nil
cn0: checking arg ((correct-length? boolean))
maybe-add: ((correct-length? boolean))
cn0: checking arg ((chessboard had incorrect size literal))
cn0: (((b board-address)) <- ((new)) ((board literal)) ((8 literal))) ((correct-length? 3) (initial-position 1) (len 2)) nil
cn0: checking arg ((board literal))
cn0: checking arg ((8 literal))
cn0: checking oarg ((b board-address))
maybe-add: ((b board-address))
cn0: location for oarg ((b board-address)): 4
cn0: (((col integer)) <- ((copy)) ((0 literal))) ((b 4) (correct-length? 3) (initial-position 1) (len 2)) nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((col integer))
maybe-add: ((col integer))
cn0: location for oarg ((col integer)): 5
cn0: (((curr list-address)) <- ((copy)) ((initial-position list-address))) ((b 4) (col 5) (correct-length? 3) (initial-position 1) (len 2)) nil
cn0: checking arg ((initial-position list-address))
maybe-add: ((initial-position list-address))
cn0: checking oarg ((curr list-address))
maybe-add: ((curr list-address))
cn0: location for oarg ((curr list-address)): 6
cn0: (((done? boolean)) <- ((equal)) ((col integer)) ((8 literal))) ((b 4) (col 5) (correct-length? 3) (curr 6) (initial-position 1) (len 2)) nil
cn0: checking arg ((col integer))
maybe-add: ((col integer))
cn0: checking arg ((8 literal))
cn0: checking oarg ((done? boolean))
maybe-add: ((done? boolean))
cn0: location for oarg ((done? boolean)): 7
cn0: (((jump-if)) ((done? boolean)) ((4 offset))) ((b 4) (col 5) (correct-length? 3) (curr 6) (done? 7) (initial-position 1) (len 2)) nil
cn0: checking arg ((done? boolean))
maybe-add: ((done? boolean))
cn0: checking arg ((4 offset))
cn0: (((file file-address-address)) <- ((index-address)) ((b board-address) (deref)) ((col integer))) ((b 4) (col 5) (correct-length? 3) (curr 6) (done? 7) (initial-position 1) (len 2)) nil
cn0: checking arg ((b board-address) (deref))
maybe-add: ((b board-address) (deref))
cn0: checking arg ((col integer))
maybe-add: ((col integer))
cn0: checking oarg ((file file-address-address))
maybe-add: ((file file-address-address))
cn0: location for oarg ((file file-address-address)): 8
cn0: (((file file-address-address) (deref)) ((curr list-address)) <- ((init-file)) ((curr list-address))) ((b 4) (col 5) (correct-length? 3) (curr 6) (done? 7) (file 8) (initial-position 1) (len 2)) nil
cn0: checking arg ((curr list-address))
maybe-add: ((curr list-address))
cn0: checking oarg ((file file-address-address) (deref))
maybe-add: ((file file-address-address) (deref))
cn0: checking oarg ((curr list-address))
maybe-add: ((curr list-address))
cn0: (((col integer)) <- ((add)) ((col integer)) ((1 literal))) ((b 4) (col 5) (correct-length? 3) (curr 6) (done? 7) (file 8) (initial-position 1) (len 2)) nil
cn0: checking arg ((col integer))
maybe-add: ((col integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((col integer))
maybe-add: ((col integer))
cn0: (((jump)) ((-6 offset))) ((b 4) (col 5) (correct-length? 3) (curr 6) (done? 7) (file 8) (initial-position 1) (len 2)) nil
cn0: checking arg ((-6 offset))
cn0: (((reply)) ((b board-address))) ((b 4) (col 5) (correct-length? 3) (curr 6) (done? 7) (file 8) (initial-position 1) (len 2)) nil
cn0: checking arg ((b board-address))
maybe-add: ((b board-address))
cn0: convert-names in init-file
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((cursor list-address)) <- ((next-input))) nil nil
cn0: checking oarg ((cursor list-address))
maybe-add: ((cursor list-address))
cn0: location for oarg ((cursor list-address)): 1
cn0: (((result file-address)) <- ((new)) ((file literal)) ((8 literal))) ((cursor 1)) nil
cn0: checking arg ((file literal))
cn0: checking arg ((8 literal))
cn0: checking oarg ((result file-address))
maybe-add: ((result file-address))
cn0: location for oarg ((result file-address)): 2
cn0: (((row integer)) <- ((copy)) ((0 literal))) ((cursor 1) (result 2)) nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((row integer))
maybe-add: ((row integer))
cn0: location for oarg ((row integer)): 3
cn0: (((done? boolean)) <- ((equal)) ((row integer)) ((8 literal))) ((cursor 1) (result 2) (row 3)) nil
cn0: checking arg ((row integer))
maybe-add: ((row integer))
cn0: checking arg ((8 literal))
cn0: checking oarg ((done? boolean))
maybe-add: ((done? boolean))
cn0: location for oarg ((done? boolean)): 4
cn0: (((jump-if)) ((done? boolean)) ((6 offset))) ((cursor 1) (done? 4) (result 2) (row 3)) nil
cn0: checking arg ((done? boolean))
maybe-add: ((done? boolean))
cn0: checking arg ((6 offset))
cn0: (((src tagged-value-address)) <- ((list-value-address)) ((cursor list-address))) ((cursor 1) (done? 4) (result 2) (row 3)) nil
cn0: checking arg ((cursor list-address))
maybe-add: ((cursor list-address))
cn0: checking oarg ((src tagged-value-address))
maybe-add: ((src tagged-value-address))
cn0: location for oarg ((src tagged-value-address)): 5
cn0: (((dest square-address)) <- ((index-address)) ((result file-address) (deref)) ((row integer))) ((cursor 1) (done? 4) (result 2) (row 3) (src 5)) nil
cn0: checking arg ((result file-address) (deref))
maybe-add: ((result file-address) (deref))
cn0: checking arg ((row integer))
maybe-add: ((row integer))
cn0: checking oarg ((dest square-address))
maybe-add: ((dest square-address))
cn0: location for oarg ((dest square-address)): 6
cn0: (((dest square-address) (deref)) <- ((get)) ((src tagged-value-address) (deref)) ((payload offset))) ((cursor 1) (dest 6) (done? 4) (result 2) (row 3) (src 5)) nil
cn0: field-access payload in srctagged-value-addressderef of type tagged-value
cn0: new field; computing location
cn0: field location 1
cn0: checking arg ((src tagged-value-address) (deref))
maybe-add: ((src tagged-value-address) (deref))
cn0: checking arg ((payload offset))
cn0: checking oarg ((dest square-address) (deref))
maybe-add: ((dest square-address) (deref))
cn0: (((cursor list-address)) <- ((list-next)) ((cursor list-address))) ((cursor 1) (dest 6) (done? 4) (payload 1) (result 2) (row 3) (src 5)) ((payload t))
cn0: checking arg ((cursor list-address))
maybe-add: ((cursor list-address))
cn0: checking oarg ((cursor list-address))
maybe-add: ((cursor list-address))
cn0: (((row integer)) <- ((add)) ((row integer)) ((1 literal))) ((cursor 1) (dest 6) (done? 4) (payload 1) (result 2) (row 3) (src 5)) ((payload t))
cn0: checking arg ((row integer))
maybe-add: ((row integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((row integer))
maybe-add: ((row integer))
cn0: (((jump)) ((-8 offset))) ((cursor 1) (dest 6) (done? 4) (payload 1) (result 2) (row 3) (src 5)) ((payload t))
cn0: checking arg ((-8 offset))
cn0: (((reply)) ((result file-address)) ((cursor list-address))) ((cursor 1) (dest 6) (done? 4) (payload 1) (result 2) (row 3) (src 5)) ((payload t))
cn0: checking arg ((result file-address))
maybe-add: ((result file-address))
cn0: checking arg ((cursor list-address))
maybe-add: ((cursor list-address))
cn0: convert-names in main
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((initial-position list-address)) <- ((init-list)) ((R literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((r literal)) ((N literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((n literal)) ((B literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((b literal)) ((Q literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((q literal)) ((K literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((k literal)) ((B literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((b literal)) ((N literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((n literal)) ((R literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((r literal))) nil nil
cn0: checking arg ((R literal))
cn0: checking arg ((P literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((p literal))
cn0: checking arg ((r literal))
cn0: checking arg ((N literal))
cn0: checking arg ((P literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((p literal))
cn0: checking arg ((n literal))
cn0: checking arg ((B literal))
cn0: checking arg ((P literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((p literal))
cn0: checking arg ((b literal))
cn0: checking arg ((Q literal))
cn0: checking arg ((P literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((p literal))
cn0: checking arg ((q literal))
cn0: checking arg ((K literal))
cn0: checking arg ((P literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((p literal))
cn0: checking arg ((k literal))
cn0: checking arg ((B literal))
cn0: checking arg ((P literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((p literal))
cn0: checking arg ((b literal))
cn0: checking arg ((N literal))
cn0: checking arg ((P literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((p literal))
cn0: checking arg ((n literal))
cn0: checking arg ((R literal))
cn0: checking arg ((P literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((_ literal))
cn0: checking arg ((p literal))
cn0: checking arg ((r literal))
cn0: checking oarg ((initial-position list-address))
maybe-add: ((initial-position list-address))
cn0: location for oarg ((initial-position list-address)): 1
cn0: (((b board-address)) <- ((init-board)) ((initial-position list-address))) ((initial-position 1)) nil
cn0: checking arg ((initial-position list-address))
maybe-add: ((initial-position list-address))
cn0: checking oarg ((b board-address))
maybe-add: ((b board-address))
cn0: location for oarg ((b board-address)): 2
cn0: (((cursor-mode))) ((b 2) (initial-position 1)) nil
cn0: (((stdin channel-address)) <- ((init-channel)) ((1 literal))) ((b 2) (initial-position 1)) nil
cn0: checking arg ((1 literal))
cn0: checking oarg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: location for oarg ((stdin channel-address)): 3
cn0: (((fork-helper)) ((send-keys-to-stdin fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((nil literal) (keyboard)) ((stdin channel-address))) ((b 2) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((send-keys-to-stdin fn))
cn0: checking arg ((nil literal) (globals))
cn0: checking arg ((nil literal) (limit))
cn0: checking arg ((nil literal) (keyboard))
cn0: checking arg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: (((buffered-stdin channel-address)) <- ((init-channel)) ((1 literal))) ((b 2) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((1 literal))
cn0: checking oarg ((buffered-stdin channel-address))
maybe-add: ((buffered-stdin channel-address))
cn0: location for oarg ((buffered-stdin channel-address)): 4
cn0: (((fork-helper)) ((buffer-lines fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((stdin channel-address)) ((buffered-stdin channel-address))) ((b 2) (buffered-stdin 4) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((buffer-lines fn))
cn0: checking arg ((nil literal) (globals))
cn0: checking arg ((nil literal) (limit))
cn0: checking arg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: checking arg ((buffered-stdin channel-address))
maybe-add: ((buffered-stdin channel-address))
cn0: ((($print)) ((Stupid text-mode chessboard. White pieces in uppercase; black pieces in lowercase. No checking for legal moves. literal))) ((b 2) (buffered-stdin 4) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((Stupid text-mode chessboard. White pieces in uppercase; black pieces in lowercase. No checking for legal moves. literal))
cn0: (((cursor-to-next-line)) ((nil literal) (terminal))) ((b 2) (buffered-stdin 4) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((nil literal) (terminal))
cn0: (((cursor-to-next-line)) ((nil literal) (terminal))) ((b 2) (buffered-stdin 4) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((nil literal) (terminal))
cn0: (((print-board)) ((nil literal) (terminal)) ((b board-address))) ((b 2) (buffered-stdin 4) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((nil literal) (terminal))
cn0: checking arg ((b board-address))
maybe-add: ((b board-address))
cn0: (((cursor-to-next-line)) ((nil literal) (terminal))) ((b 2) (buffered-stdin 4) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((nil literal) (terminal))
cn0: ((($print)) ((Type in your move as <from square>-<to square>. For example: 'a2-a4'. Then press <enter>. literal))) ((b 2) (buffered-stdin 4) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((Type in your move as <from square>-<to square>. For example: 'a2-a4'. Then press <enter>. literal))
cn0: (((cursor-to-next-line)) ((nil literal) (terminal))) ((b 2) (buffered-stdin 4) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((nil literal) (terminal))
cn0: ((($print)) ((Hit 'q' to exit. literal))) ((b 2) (buffered-stdin 4) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((Hit 'q' to exit. literal))
cn0: (((cursor-to-next-line)) ((nil literal) (terminal))) ((b 2) (buffered-stdin 4) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((nil literal) (terminal))
cn0: ((($print)) ((move:  literal))) ((b 2) (buffered-stdin 4) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((move:  literal))
cn0: (((m move-address)) <- ((read-move)) ((buffered-stdin channel-address))) ((b 2) (buffered-stdin 4) (initial-position 1) (stdin 3)) nil
cn0: checking arg ((buffered-stdin channel-address))
maybe-add: ((buffered-stdin channel-address))
cn0: checking oarg ((m move-address))
maybe-add: ((m move-address))
cn0: location for oarg ((m move-address)): 5
cn0: (((jump-unless)) ((m move-address)) ((2 offset))) ((b 2) (buffered-stdin 4) (initial-position 1) (m 5) (stdin 3)) nil
cn0: checking arg ((m move-address))
maybe-add: ((m move-address))
cn0: checking arg ((2 offset))
cn0: (((b board-address)) <- ((make-move)) ((b board-address)) ((m move-address))) ((b 2) (buffered-stdin 4) (initial-position 1) (m 5) (stdin 3)) nil
cn0: checking arg ((b board-address))
maybe-add: ((b board-address))
cn0: checking arg ((m move-address))
maybe-add: ((m move-address))
cn0: checking oarg ((b board-address))
maybe-add: ((b board-address))
cn0: (((jump)) ((-12 offset))) ((b 2) (buffered-stdin 4) (initial-position 1) (m 5) (stdin 3)) nil
cn0: checking arg ((-12 offset))
cn0: convert-names in make-move
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((b board-address)) <- ((next-input))) nil nil
cn0: checking oarg ((b board-address))
maybe-add: ((b board-address))
cn0: location for oarg ((b board-address)): 1
cn0: (((m move-address)) <- ((next-input))) ((b 1)) nil
cn0: checking oarg ((m move-address))
maybe-add: ((m move-address))
cn0: location for oarg ((m move-address)): 2
cn0: (((x integer-integer-pair)) <- ((get)) ((m move-address) (deref)) ((from offset))) ((b 1) (m 2)) nil
cn0: field-access from in mmove-addressderef of type move
cn0: new field; computing location
cn0: field location 0
cn0: checking arg ((m move-address) (deref))
maybe-add: ((m move-address) (deref))
cn0: checking arg ((from offset))
cn0: checking oarg ((x integer-integer-pair))
maybe-add: ((x integer-integer-pair))
cn0: location for oarg ((x integer-integer-pair)): 3
cn0: (((from-file integer)) <- ((get)) ((x integer-integer-pair)) ((0 offset))) ((b 1) (from 0) (m 2) (x 3)) ((from t))
cn0: field-access 0 in xinteger-integer-pair of type integer-integer-pair
cn0: checking arg ((x integer-integer-pair))
maybe-add: ((x integer-integer-pair))
cn0: checking arg ((0 offset))
cn0: checking oarg ((from-file integer))
maybe-add: ((from-file integer))
cn0: location for oarg ((from-file integer)): 5
cn0: (((from-rank integer)) <- ((get)) ((x integer-integer-pair)) ((1 offset))) ((b 1) (from 0) (from-file 5) (m 2) (x 3)) ((from t))
cn0: field-access 1 in xinteger-integer-pair of type integer-integer-pair
cn0: checking arg ((x integer-integer-pair))
maybe-add: ((x integer-integer-pair))
cn0: checking arg ((1 offset))
cn0: checking oarg ((from-rank integer))
maybe-add: ((from-rank integer))
cn0: location for oarg ((from-rank integer)): 6
cn0: (((f file-address)) <- ((index)) ((b board-address) (deref)) ((from-file integer))) ((b 1) (from 0) (from-file 5) (from-rank 6) (m 2) (x 3)) ((from t))
cn0: checking arg ((b board-address) (deref))
maybe-add: ((b board-address) (deref))
cn0: checking arg ((from-file integer))
maybe-add: ((from-file integer))
cn0: checking oarg ((f file-address))
maybe-add: ((f file-address))
cn0: location for oarg ((f file-address)): 7
cn0: (((src square-address)) <- ((index-address)) ((f file-address) (deref)) ((from-rank integer))) ((b 1) (f 7) (from 0) (from-file 5) (from-rank 6) (m 2) (x 3)) ((from t))
cn0: checking arg ((f file-address) (deref))
maybe-add: ((f file-address) (deref))
cn0: checking arg ((from-rank integer))
maybe-add: ((from-rank integer))
cn0: checking oarg ((src square-address))
maybe-add: ((src square-address))
cn0: location for oarg ((src square-address)): 8
cn0: (((x integer-integer-pair)) <- ((get)) ((m move-address) (deref)) ((to offset))) ((b 1) (f 7) (from 0) (from-file 5) (from-rank 6) (m 2) (src 8) (x 3)) ((from t))
cn0: field-access to in mmove-addressderef of type move
cn0: new field; computing location
cn0: field location 1
cn0: checking arg ((m move-address) (deref))
maybe-add: ((m move-address) (deref))
cn0: checking arg ((to offset))
cn0: checking oarg ((x integer-integer-pair))
maybe-add: ((x integer-integer-pair))
cn0: (((to-file integer)) <- ((get)) ((x integer-integer-pair)) ((0 offset))) ((b 1) (f 7) (from 0) (from-file 5) (from-rank 6) (m 2) (src 8) (to 1) (x 3)) ((from t) (to t))
cn0: field-access 0 in xinteger-integer-pair of type integer-integer-pair
cn0: checking arg ((x integer-integer-pair))
maybe-add: ((x integer-integer-pair))
cn0: checking arg ((0 offset))
cn0: checking oarg ((to-file integer))
maybe-add: ((to-file integer))
cn0: location for oarg ((to-file integer)): 9
cn0: (((to-rank integer)) <- ((get)) ((x integer-integer-pair)) ((1 offset))) ((b 1) (f 7) (from 0) (from-file 5) (from-rank 6) (m 2) (src 8) (to 1) (to-file 9) (x 3)) ((from t) (to t))
cn0: field-access 1 in xinteger-integer-pair of type integer-integer-pair
cn0: checking arg ((x integer-integer-pair))
maybe-add: ((x integer-integer-pair))
cn0: checking arg ((1 offset))
cn0: checking oarg ((to-rank integer))
maybe-add: ((to-rank integer))
cn0: location for oarg ((to-rank integer)): 10
cn0: (((f file-address)) <- ((index)) ((b board-address) (deref)) ((to-file integer))) ((b 1) (f 7) (from 0) (from-file 5) (from-rank 6) (m 2) (src 8) (to 1) (to-file 9) (to-rank 10) (x 3)) ((from t) (to t))
cn0: checking arg ((b board-address) (deref))
maybe-add: ((b board-address) (deref))
cn0: checking arg ((to-file integer))
maybe-add: ((to-file integer))
cn0: checking oarg ((f file-address))
maybe-add: ((f file-address))
cn0: (((dest square-address)) <- ((index-address)) ((f file-address) (deref)) ((to-rank integer))) ((b 1) (f 7) (from 0) (from-file 5) (from-rank 6) (m 2) (src 8) (to 1) (to-file 9) (to-rank 10) (x 3)) ((from t) (to t))
cn0: checking arg ((f file-address) (deref))
maybe-add: ((f file-address) (deref))
cn0: checking arg ((to-rank integer))
maybe-add: ((to-rank integer))
cn0: checking oarg ((dest square-address))
maybe-add: ((dest square-address))
cn0: location for oarg ((dest square-address)): 11
cn0: (((dest square-address) (deref)) <- ((copy)) ((src square-address) (deref))) ((b 1) (dest 11) (f 7) (from 0) (from-file 5) (from-rank 6) (m 2) (src 8) (to 1) (to-file 9) (to-rank 10) (x 3)) ((from t) (to t))
cn0: checking arg ((src square-address) (deref))
maybe-add: ((src square-address) (deref))
cn0: checking oarg ((dest square-address) (deref))
maybe-add: ((dest square-address) (deref))
cn0: (((src square-address) (deref)) <- ((copy)) ((_ literal))) ((b 1) (dest 11) (f 7) (from 0) (from-file 5) (from-rank 6) (m 2) (src 8) (to 1) (to-file 9) (to-rank 10) (x 3)) ((from t) (to t))
cn0: checking arg ((_ literal))
cn0: checking oarg ((src square-address) (deref))
maybe-add: ((src square-address) (deref))
cn0: (((reply)) ((b board-address))) ((b 1) (dest 11) (f 7) (from 0) (from-file 5) (from-rank 6) (m 2) (src 8) (to 1) (to-file 9) (to-rank 10) (x 3)) ((from t) (to t))
cn0: checking arg ((b board-address))
maybe-add: ((b board-address))
cn0: convert-names in print-board
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((screen terminal-address)) <- ((next-input))) nil nil
cn0: checking oarg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: location for oarg ((screen terminal-address)): 1
cn0: (((b board-address)) <- ((next-input))) ((screen 1)) nil
cn0: checking oarg ((b board-address))
maybe-add: ((b board-address))
cn0: location for oarg ((b board-address)): 2
cn0: (((row integer)) <- ((copy)) ((7 literal))) ((b 2) (screen 1)) nil
cn0: checking arg ((7 literal))
cn0: checking oarg ((row integer))
maybe-add: ((row integer))
cn0: location for oarg ((row integer)): 3
cn0: (((done? boolean)) <- ((less-than)) ((row integer)) ((0 literal))) ((b 2) (row 3) (screen 1)) nil
cn0: checking arg ((row integer))
maybe-add: ((row integer))
cn0: checking arg ((0 literal))
cn0: checking oarg ((done? boolean))
maybe-add: ((done? boolean))
cn0: location for oarg ((done? boolean)): 4
cn0: (((jump-if)) ((done? boolean)) ((16 offset))) ((b 2) (done? 4) (row 3) (screen 1)) nil
cn0: checking arg ((done? boolean))
maybe-add: ((done? boolean))
cn0: checking arg ((16 offset))
cn0: (((rank integer)) <- ((add)) ((row integer)) ((1 literal))) ((b 2) (done? 4) (row 3) (screen 1)) nil
cn0: checking arg ((row integer))
maybe-add: ((row integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((rank integer))
maybe-add: ((rank integer))
cn0: location for oarg ((rank integer)): 5
cn0: (((print-integer)) ((screen terminal-address)) ((rank integer))) ((b 2) (done? 4) (rank 5) (row 3) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((rank integer))
maybe-add: ((rank integer))
cn0: (((s string-address)) <- ((new))  | ) ((b 2) (done? 4) (rank 5) (row 3) (screen 1)) nil
cn0: checking arg  | 
cn0: checking oarg ((s string-address))
maybe-add: ((s string-address))
cn0: location for oarg ((s string-address)): 6
cn0: (((print-string)) ((screen terminal-address)) ((s string-address))) ((b 2) (done? 4) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((s string-address))
maybe-add: ((s string-address))
cn0: (((col integer)) <- ((copy)) ((0 literal))) ((b 2) (done? 4) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((col integer))
maybe-add: ((col integer))
cn0: location for oarg ((col integer)): 7
cn0: (((done? boolean)) <- ((equal)) ((col integer)) ((8 literal))) ((b 2) (col 7) (done? 4) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((col integer))
maybe-add: ((col integer))
cn0: checking arg ((8 literal))
cn0: checking oarg ((done? boolean))
maybe-add: ((done? boolean))
cn0: (((jump-if)) ((done? boolean)) ((6 offset))) ((b 2) (col 7) (done? 4) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((done? boolean))
maybe-add: ((done? boolean))
cn0: checking arg ((6 offset))
cn0: (((f file-address)) <- ((index)) ((b board-address) (deref)) ((col integer))) ((b 2) (col 7) (done? 4) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((b board-address) (deref))
maybe-add: ((b board-address) (deref))
cn0: checking arg ((col integer))
maybe-add: ((col integer))
cn0: checking oarg ((f file-address))
maybe-add: ((f file-address))
cn0: location for oarg ((f file-address)): 8
cn0: (((s square)) <- ((index)) ((f file-address) (deref)) ((row integer))) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((f file-address) (deref))
maybe-add: ((f file-address) (deref))
cn0: checking arg ((row integer))
maybe-add: ((row integer))
cn0: checking oarg ((s square))
maybe-add: ((s square))
cn0: (((print-character)) ((screen terminal-address)) ((s square))) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((s square))
maybe-add: ((s square))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((col integer)) <- ((add)) ((col integer)) ((1 literal))) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((col integer))
maybe-add: ((col integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((col integer))
maybe-add: ((col integer))
cn0: (((jump)) ((-8 offset))) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((-8 offset))
cn0: (((row integer)) <- ((subtract)) ((row integer)) ((1 literal))) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((row integer))
maybe-add: ((row integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((row integer))
maybe-add: ((row integer))
cn0: (((cursor-to-next-line)) ((screen terminal-address))) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((jump)) ((-18 offset))) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((-18 offset))
cn0: (((s string-address)) <- ((new))   +----------------) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg   +----------------
cn0: checking oarg ((s string-address))
maybe-add: ((s string-address))
cn0: (((print-string)) ((screen terminal-address)) ((s string-address))) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((s string-address))
maybe-add: ((s string-address))
cn0: (((cursor-to-next-line)) ((screen terminal-address))) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((s string-address)) <- ((new))     a b c d e f g h) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg     a b c d e f g h
cn0: checking oarg ((s string-address))
maybe-add: ((s string-address))
cn0: (((print-string)) ((screen terminal-address)) ((s string-address))) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((s string-address))
maybe-add: ((s string-address))
cn0: (((cursor-to-next-line)) ((screen terminal-address))) ((b 2) (col 7) (done? 4) (f 8) (rank 5) (row 3) (s 6) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: convert-names in read-file
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((stdin channel-address)) <- ((next-input))) nil nil
cn0: checking oarg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: location for oarg ((stdin channel-address)): 1
cn0: (((x tagged-value)) ((stdin channel-address) (deref)) <- ((read)) ((stdin channel-address))) ((stdin 1)) nil
cn0: checking arg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: checking oarg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: location for oarg ((x tagged-value)): 2
cn0: checking oarg ((stdin channel-address) (deref))
maybe-add: ((stdin channel-address) (deref))
cn0: (((a character)) <- ((copy)) ((a literal))) ((stdin 1) (x 2)) nil
cn0: checking arg ((a literal))
cn0: checking oarg ((a character))
maybe-add: ((a character))
cn0: location for oarg ((a character)): 4
cn0: (((file-base integer)) <- ((character-to-integer)) ((a character))) ((a 4) (stdin 1) (x 2)) nil
cn0: checking arg ((a character))
maybe-add: ((a character))
cn0: checking oarg ((file-base integer))
maybe-add: ((file-base integer))
cn0: location for oarg ((file-base integer)): 5
cn0: (((c character)) <- ((maybe-coerce)) ((x tagged-value)) ((character literal))) ((a 4) (file-base 5) (stdin 1) (x 2)) nil
cn0: checking arg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: checking arg ((character literal))
cn0: checking oarg ((c character))
maybe-add: ((c character))
cn0: location for oarg ((c character)): 6
cn0: (((quit boolean)) <- ((equal)) ((c character)) ((q literal))) ((a 4) (c 6) (file-base 5) (stdin 1) (x 2)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking arg ((q literal))
cn0: checking oarg ((quit boolean))
maybe-add: ((quit boolean))
cn0: location for oarg ((quit boolean)): 7
cn0: (((jump-unless)) ((quit boolean)) ((1 offset))) ((a 4) (c 6) (file-base 5) (quit 7) (stdin 1) (x 2)) nil
cn0: checking arg ((quit boolean))
maybe-add: ((quit boolean))
cn0: checking arg ((1 offset))
cn0: (((reply)) ((nil literal))) ((a 4) (c 6) (file-base 5) (quit 7) (stdin 1) (x 2)) nil
cn0: checking arg ((nil literal))
cn0: (((file integer)) <- ((character-to-integer)) ((c character))) ((a 4) (c 6) (file-base 5) (quit 7) (stdin 1) (x 2)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking oarg ((file integer))
maybe-add: ((file integer))
cn0: location for oarg ((file integer)): 8
cn0: (((file integer)) <- ((subtract)) ((file integer)) ((file-base integer))) ((a 4) (c 6) (file 8) (file-base 5) (quit 7) (stdin 1) (x 2)) nil
cn0: checking arg ((file integer))
maybe-add: ((file integer))
cn0: checking arg ((file-base integer))
maybe-add: ((file-base integer))
cn0: checking oarg ((file integer))
maybe-add: ((file integer))
cn0: (((above-min boolean)) <- ((greater-or-equal)) ((file integer)) ((0 literal))) ((a 4) (c 6) (file 8) (file-base 5) (quit 7) (stdin 1) (x 2)) nil
cn0: checking arg ((file integer))
maybe-add: ((file integer))
cn0: checking arg ((0 literal))
cn0: checking oarg ((above-min boolean))
maybe-add: ((above-min boolean))
cn0: location for oarg ((above-min boolean)): 9
cn0: (((assert)) ((above-min boolean)) ((file too low literal))) ((a 4) (above-min 9) (c 6) (file 8) (file-base 5) (quit 7) (stdin 1) (x 2)) nil
cn0: checking arg ((above-min boolean))
maybe-add: ((above-min boolean))
cn0: checking arg ((file too low literal))
cn0: (((below-max boolean)) <- ((lesser-or-equal)) ((file integer)) ((7 literal))) ((a 4) (above-min 9) (c 6) (file 8) (file-base 5) (quit 7) (stdin 1) (x 2)) nil
cn0: checking arg ((file integer))
maybe-add: ((file integer))
cn0: checking arg ((7 literal))
cn0: checking oarg ((below-max boolean))
maybe-add: ((below-max boolean))
cn0: location for oarg ((below-max boolean)): 10
cn0: (((assert)) ((below-max boolean)) ((file too high literal))) ((a 4) (above-min 9) (below-max 10) (c 6) (file 8) (file-base 5) (quit 7) (stdin 1) (x 2)) nil
cn0: checking arg ((below-max boolean))
maybe-add: ((below-max boolean))
cn0: checking arg ((file too high literal))
cn0: (((reply)) ((file integer))) ((a 4) (above-min 9) (below-max 10) (c 6) (file 8) (file-base 5) (quit 7) (stdin 1) (x 2)) nil
cn0: checking arg ((file integer))
maybe-add: ((file integer))
cn0: convert-names in read-move
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((stdin channel-address)) <- ((next-input))) nil nil
cn0: checking oarg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: location for oarg ((stdin channel-address)): 1
cn0: (((from-file integer)) <- ((read-file)) ((stdin channel-address))) ((stdin 1)) nil
cn0: checking arg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: checking oarg ((from-file integer))
maybe-add: ((from-file integer))
cn0: location for oarg ((from-file integer)): 2
cn0: (((jump-if)) ((from-file integer)) ((1 offset))) ((from-file 2) (stdin 1)) nil
cn0: checking arg ((from-file integer))
maybe-add: ((from-file integer))
cn0: checking arg ((1 offset))
cn0: (((reply)) ((nil literal))) ((from-file 2) (stdin 1)) nil
cn0: checking arg ((nil literal))
cn0: (((from-rank integer)) <- ((read-rank)) ((stdin channel-address))) ((from-file 2) (stdin 1)) nil
cn0: checking arg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: checking oarg ((from-rank integer))
maybe-add: ((from-rank integer))
cn0: location for oarg ((from-rank integer)): 3
cn0: (((expect-stdin)) ((stdin channel-address)) ((- literal))) ((from-file 2) (from-rank 3) (stdin 1)) nil
cn0: checking arg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: checking arg ((- literal))
cn0: (((to-file integer)) <- ((read-file)) ((stdin channel-address))) ((from-file 2) (from-rank 3) (stdin 1)) nil
cn0: checking arg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: checking oarg ((to-file integer))
maybe-add: ((to-file integer))
cn0: location for oarg ((to-file integer)): 4
cn0: (((to-rank integer)) <- ((read-rank)) ((stdin channel-address))) ((from-file 2) (from-rank 3) (stdin 1) (to-file 4)) nil
cn0: checking arg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: checking oarg ((to-rank integer))
maybe-add: ((to-rank integer))
cn0: location for oarg ((to-rank integer)): 5
cn0: (((expect-stdin)) ((stdin channel-address)) ((
 literal))) ((from-file 2) (from-rank 3) (stdin 1) (to-file 4) (to-rank 5)) nil
cn0: checking arg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: checking arg ((
 literal))
cn0: (((result move-address)) <- ((new)) ((move literal))) ((from-file 2) (from-rank 3) (stdin 1) (to-file 4) (to-rank 5)) nil
cn0: checking arg ((move literal))
cn0: checking oarg ((result move-address))
maybe-add: ((result move-address))
cn0: location for oarg ((result move-address)): 6
cn0: (((f integer-integer-pair-address)) <- ((get-address)) ((result move-address) (deref)) ((from offset))) ((from-file 2) (from-rank 3) (result 6) (stdin 1) (to-file 4) (to-rank 5)) nil
cn0: field-access from in resultmove-addressderef of type move
cn0: new field; computing location
cn0: field location 0
cn0: checking arg ((result move-address) (deref))
maybe-add: ((result move-address) (deref))
cn0: checking arg ((from offset))
cn0: checking oarg ((f integer-integer-pair-address))
maybe-add: ((f integer-integer-pair-address))
cn0: location for oarg ((f integer-integer-pair-address)): 7
cn0: (((dest integer-address)) <- ((get-address)) ((f integer-integer-pair-address) (deref)) ((0 offset))) ((f 7) (from 0) (from-file 2) (from-rank 3) (result 6) (stdin 1) (to-file 4) (to-rank 5)) ((from t))
cn0: field-access 0 in finteger-integer-pair-addressderef of type integer-integer-pair
cn0: checking arg ((f integer-integer-pair-address) (deref))
maybe-add: ((f integer-integer-pair-address) (deref))
cn0: checking arg ((0 offset))
cn0: checking oarg ((dest integer-address))
maybe-add: ((dest integer-address))
cn0: location for oarg ((dest integer-address)): 8
cn0: (((dest integer-address) (deref)) <- ((copy)) ((from-file integer))) ((dest 8) (f 7) (from 0) (from-file 2) (from-rank 3) (result 6) (stdin 1) (to-file 4) (to-rank 5)) ((from t))
cn0: checking arg ((from-file integer))
maybe-add: ((from-file integer))
cn0: checking oarg ((dest integer-address) (deref))
maybe-add: ((dest integer-address) (deref))
cn0: (((dest integer-address)) <- ((get-address)) ((f integer-integer-pair-address) (deref)) ((1 offset))) ((dest 8) (f 7) (from 0) (from-file 2) (from-rank 3) (result 6) (stdin 1) (to-file 4) (to-rank 5)) ((from t))
cn0: field-access 1 in finteger-integer-pair-addressderef of type integer-integer-pair
cn0: checking arg ((f integer-integer-pair-address) (deref))
maybe-add: ((f integer-integer-pair-address) (deref))
cn0: checking arg ((1 offset))
cn0: checking oarg ((dest integer-address))
maybe-add: ((dest integer-address))
cn0: (((dest integer-address) (deref)) <- ((copy)) ((from-rank integer))) ((dest 8) (f 7) (from 0) (from-file 2) (from-rank 3) (result 6) (stdin 1) (to-file 4) (to-rank 5)) ((from t))
cn0: checking arg ((from-rank integer))
maybe-add: ((from-rank integer))
cn0: checking oarg ((dest integer-address) (deref))
maybe-add: ((dest integer-address) (deref))
cn0: (((t0 integer-integer-pair-address)) <- ((get-address)) ((result move-address) (deref)) ((to offset))) ((dest 8) (f 7) (from 0) (from-file 2) (from-rank 3) (result 6) (stdin 1) (to-file 4) (to-rank 5)) ((from t))
cn0: field-access to in resultmove-addressderef of type move
cn0: new field; computing location
cn0: field location 1
cn0: checking arg ((result move-address) (deref))
maybe-add: ((result move-address) (deref))
cn0: checking arg ((to offset))
cn0: checking oarg ((t0 integer-integer-pair-address))
maybe-add: ((t0 integer-integer-pair-address))
cn0: location for oarg ((t0 integer-integer-pair-address)): 9
cn0: (((dest integer-address)) <- ((get-address)) ((t0 integer-integer-pair-address) (deref)) ((0 offset))) ((dest 8) (f 7) (from 0) (from-file 2) (from-rank 3) (result 6) (stdin 1) (t0 9) (to 1) (to-file 4) (to-rank 5)) ((from t) (to t))
cn0: field-access 0 in t0integer-integer-pair-addressderef of type integer-integer-pair
cn0: checking arg ((t0 integer-integer-pair-address) (deref))
maybe-add: ((t0 integer-integer-pair-address) (deref))
cn0: checking arg ((0 offset))
cn0: checking oarg ((dest integer-address))
maybe-add: ((dest integer-address))
cn0: (((dest integer-address) (deref)) <- ((copy)) ((to-file integer))) ((dest 8) (f 7) (from 0) (from-file 2) (from-rank 3) (result 6) (stdin 1) (t0 9) (to 1) (to-file 4) (to-rank 5)) ((from t) (to t))
cn0: checking arg ((to-file integer))
maybe-add: ((to-file integer))
cn0: checking oarg ((dest integer-address) (deref))
maybe-add: ((dest integer-address) (deref))
cn0: (((dest integer-address)) <- ((get-address)) ((t0 integer-integer-pair-address) (deref)) ((1 offset))) ((dest 8) (f 7) (from 0) (from-file 2) (from-rank 3) (result 6) (stdin 1) (t0 9) (to 1) (to-file 4) (to-rank 5)) ((from t) (to t))
cn0: field-access 1 in t0integer-integer-pair-addressderef of type integer-integer-pair
cn0: checking arg ((t0 integer-integer-pair-address) (deref))
maybe-add: ((t0 integer-integer-pair-address) (deref))
cn0: checking arg ((1 offset))
cn0: checking oarg ((dest integer-address))
maybe-add: ((dest integer-address))
cn0: (((dest integer-address) (deref)) <- ((copy)) ((to-rank integer))) ((dest 8) (f 7) (from 0) (from-file 2) (from-rank 3) (result 6) (stdin 1) (t0 9) (to 1) (to-file 4) (to-rank 5)) ((from t) (to t))
cn0: checking arg ((to-rank integer))
maybe-add: ((to-rank integer))
cn0: checking oarg ((dest integer-address) (deref))
maybe-add: ((dest integer-address) (deref))
cn0: (((reply)) ((result move-address))) ((dest 8) (f 7) (from 0) (from-file 2) (from-rank 3) (result 6) (stdin 1) (t0 9) (to 1) (to-file 4) (to-rank 5)) ((from t) (to t))
cn0: checking arg ((result move-address))
maybe-add: ((result move-address))
cn0: convert-names in read-rank
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((stdin channel-address)) <- ((next-input))) nil nil
cn0: checking oarg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: location for oarg ((stdin channel-address)): 1
cn0: (((x tagged-value)) ((stdin channel-address) (deref)) <- ((read)) ((stdin channel-address))) ((stdin 1)) nil
cn0: checking arg ((stdin channel-address))
maybe-add: ((stdin channel-address))
cn0: checking oarg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: location for oarg ((x tagged-value)): 2
cn0: checking oarg ((stdin channel-address) (deref))
maybe-add: ((stdin channel-address) (deref))
cn0: (((c character)) <- ((maybe-coerce)) ((x tagged-value)) ((character literal))) ((stdin 1) (x 2)) nil
cn0: checking arg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: checking arg ((character literal))
cn0: checking oarg ((c character))
maybe-add: ((c character))
cn0: location for oarg ((c character)): 4
cn0: (((quit boolean)) <- ((equal)) ((c character)) ((q literal))) ((c 4) (stdin 1) (x 2)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking arg ((q literal))
cn0: checking oarg ((quit boolean))
maybe-add: ((quit boolean))
cn0: location for oarg ((quit boolean)): 5
cn0: (((jump-unless)) ((quit boolean)) ((1 offset))) ((c 4) (quit 5) (stdin 1) (x 2)) nil
cn0: checking arg ((quit boolean))
maybe-add: ((quit boolean))
cn0: checking arg ((1 offset))
cn0: (((reply)) ((nil literal))) ((c 4) (quit 5) (stdin 1) (x 2)) nil
cn0: checking arg ((nil literal))
cn0: (((rank integer)) <- ((character-to-integer)) ((c character))) ((c 4) (quit 5) (stdin 1) (x 2)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking oarg ((rank integer))
maybe-add: ((rank integer))
cn0: location for oarg ((rank integer)): 6
cn0: (((one character)) <- ((copy)) ((1 literal))) ((c 4) (quit 5) (rank 6) (stdin 1) (x 2)) nil
cn0: checking arg ((1 literal))
cn0: checking oarg ((one character))
maybe-add: ((one character))
cn0: location for oarg ((one character)): 7
cn0: (((rank-base integer)) <- ((character-to-integer)) ((one character))) ((c 4) (one 7) (quit 5) (rank 6) (stdin 1) (x 2)) nil
cn0: checking arg ((one character))
maybe-add: ((one character))
cn0: checking oarg ((rank-base integer))
maybe-add: ((rank-base integer))
cn0: location for oarg ((rank-base integer)): 8
cn0: (((rank integer)) <- ((subtract)) ((rank integer)) ((rank-base integer))) ((c 4) (one 7) (quit 5) (rank 6) (rank-base 8) (stdin 1) (x 2)) nil
cn0: checking arg ((rank integer))
maybe-add: ((rank integer))
cn0: checking arg ((rank-base integer))
maybe-add: ((rank-base integer))
cn0: checking oarg ((rank integer))
maybe-add: ((rank integer))
cn0: (((above-min boolean)) <- ((greater-or-equal)) ((rank integer)) ((0 literal))) ((c 4) (one 7) (quit 5) (rank 6) (rank-base 8) (stdin 1) (x 2)) nil
cn0: checking arg ((rank integer))
maybe-add: ((rank integer))
cn0: checking arg ((0 literal))
cn0: checking oarg ((above-min boolean))
maybe-add: ((above-min boolean))
cn0: location for oarg ((above-min boolean)): 9
cn0: (((assert)) ((above-min boolean)) ((rank too low literal))) ((above-min 9) (c 4) (one 7) (quit 5) (rank 6) (rank-base 8) (stdin 1) (x 2)) nil
cn0: checking arg ((above-min boolean))
maybe-add: ((above-min boolean))
cn0: checking arg ((rank too low literal))
cn0: (((below-max boolean)) <- ((lesser-or-equal)) ((rank integer)) ((7 literal))) ((above-min 9) (c 4) (one 7) (quit 5) (rank 6) (rank-base 8) (stdin 1) (x 2)) nil
cn0: checking arg ((rank integer))
maybe-add: ((rank integer))
cn0: checking arg ((7 literal))
cn0: checking oarg ((below-max boolean))
maybe-add: ((below-max boolean))
cn0: location for oarg ((below-max boolean)): 10
cn0: (((assert)) ((below-max boolean)) ((rank too high literal))) ((above-min 9) (below-max 10) (c 4) (one 7) (quit 5) (rank 6) (rank-base 8) (stdin 1) (x 2)) nil
cn0: checking arg ((below-max boolean))
maybe-add: ((below-max boolean))
cn0: checking arg ((rank too high literal))
cn0: (((reply)) ((rank integer))) ((above-min 9) (below-max 10) (c 4) (one 7) (quit 5) (rank 6) (rank-base 8) (stdin 1) (x 2)) nil
cn0: checking arg ((rank integer))
maybe-add: ((rank integer))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 channel-address)) <- ((next-input)))
cn1: (((2 tagged-value)) ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
cn1: (((4 character)) <- ((maybe-coerce)) ((2 tagged-value)) ((character literal)))
cn1: (((5 character)) <- ((next-input)))
cn1: (((6 boolean)) <- ((equal)) ((4 character)) ((5 character)))
cn1: (((assert)) ((6 boolean)) ((expected character not found literal)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 list-address)) <- ((next-input)))
cn1: (((2 integer)) <- ((list-length)) ((1 list-address)))
cn1: (((3 boolean)) <- ((equal)) ((2 integer)) ((64 literal)))
cn1: (((assert)) ((3 boolean)) ((chessboard had incorrect size literal)))
cn1: (((4 board-address)) <- ((new)) ((board literal)) ((8 literal)))
cn1: (((5 integer)) <- ((copy)) ((0 literal)))
cn1: (((6 list-address)) <- ((copy)) ((1 list-address)))
cn1: (((7 boolean)) <- ((equal)) ((5 integer)) ((8 literal)))
cn1: (((jump-if)) ((7 boolean)) ((4 offset)))
cn1: (((8 file-address-address)) <- ((index-address)) ((4 board-address) (deref)) ((5 integer)))
cn1: (((8 file-address-address) (deref)) ((6 list-address)) <- ((init-file)) ((6 list-address)))
cn1: (((5 integer)) <- ((add)) ((5 integer)) ((1 literal)))
cn1: (((jump)) ((-6 offset)))
cn1: (((reply)) ((4 board-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 list-address)) <- ((next-input)))
cn1: (((2 file-address)) <- ((new)) ((file literal)) ((8 literal)))
cn1: (((3 integer)) <- ((copy)) ((0 literal)))
cn1: (((4 boolean)) <- ((equal)) ((3 integer)) ((8 literal)))
cn1: (((jump-if)) ((4 boolean)) ((6 offset)))
cn1: (((5 tagged-value-address)) <- ((list-value-address)) ((1 list-address)))
cn1: (((6 square-address)) <- ((index-address)) ((2 file-address) (deref)) ((3 integer)))
cn1: (((6 square-address) (deref)) <- ((get)) ((5 tagged-value-address) (deref)) ((1 offset)))
cn1: (((1 list-address)) <- ((list-next)) ((1 list-address)))
cn1: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
cn1: (((jump)) ((-8 offset)))
cn1: (((reply)) ((2 file-address)) ((1 list-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 list-address)) <- ((init-list)) ((R literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((r literal)) ((N literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((n literal)) ((B literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((b literal)) ((Q literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((q literal)) ((K literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((k literal)) ((B literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((b literal)) ((N literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((n literal)) ((R literal)) ((P literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((_ literal)) ((p literal)) ((r literal)))
cn1: (((2 board-address)) <- ((init-board)) ((1 list-address)))
cn1: (((cursor-mode)))
cn1: (((3 channel-address)) <- ((init-channel)) ((1 literal)))
cn1: (((fork-helper)) ((send-keys-to-stdin fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((nil literal) (keyboard)) ((3 channel-address)))
cn1: (((4 channel-address)) <- ((init-channel)) ((1 literal)))
cn1: (((fork-helper)) ((buffer-lines fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((3 channel-address)) ((4 channel-address)))
cn1: ((($print)) ((Stupid text-mode chessboard. White pieces in uppercase; black pieces in lowercase. No checking for legal moves. literal)))
cn1: (((cursor-to-next-line)) ((nil literal) (terminal)))
cn1: (((cursor-to-next-line)) ((nil literal) (terminal)))
cn1: (((print-board)) ((nil literal) (terminal)) ((2 board-address)))
cn1: (((cursor-to-next-line)) ((nil literal) (terminal)))
cn1: ((($print)) ((Type in your move as <from square>-<to square>. For example: 'a2-a4'. Then press <enter>. literal)))
cn1: (((cursor-to-next-line)) ((nil literal) (terminal)))
cn1: ((($print)) ((Hit 'q' to exit. literal)))
cn1: (((cursor-to-next-line)) ((nil literal) (terminal)))
cn1: ((($print)) ((move:  literal)))
cn1: (((5 move-address)) <- ((read-move)) ((4 channel-address)))
cn1: (((jump-unless)) ((5 move-address)) ((2 offset)))
cn1: (((2 board-address)) <- ((make-move)) ((2 board-address)) ((5 move-address)))
cn1: (((jump)) ((-12 offset)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 board-address)) <- ((next-input)))
cn1: (((2 move-address)) <- ((next-input)))
cn1: (((3 integer-integer-pair)) <- ((get)) ((2 move-address) (deref)) ((0 offset)))
cn1: (((5 integer)) <- ((get)) ((3 integer-integer-pair)) ((0 offset)))
cn1: (((6 integer)) <- ((get)) ((3 integer-integer-pair)) ((1 offset)))
cn1: (((7 file-address)) <- ((index)) ((1 board-address) (deref)) ((5 integer)))
cn1: (((8 square-address)) <- ((index-address)) ((7 file-address) (deref)) ((6 integer)))
cn1: (((3 integer-integer-pair)) <- ((get)) ((2 move-address) (deref)) ((1 offset)))
cn1: (((9 integer)) <- ((get)) ((3 integer-integer-pair)) ((0 offset)))
cn1: (((10 integer)) <- ((get)) ((3 integer-integer-pair)) ((1 offset)))
cn1: (((7 file-address)) <- ((index)) ((1 board-address) (deref)) ((9 integer)))
cn1: (((11 square-address)) <- ((index-address)) ((7 file-address) (deref)) ((10 integer)))
cn1: (((11 square-address) (deref)) <- ((copy)) ((8 square-address) (deref)))
cn1: (((8 square-address) (deref)) <- ((copy)) ((_ literal)))
cn1: (((reply)) ((1 board-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 terminal-address)) <- ((next-input)))
cn1: (((2 board-address)) <- ((next-input)))
cn1: (((3 integer)) <- ((copy)) ((7 literal)))
cn1: (((4 boolean)) <- ((less-than)) ((3 integer)) ((0 literal)))
cn1: (((jump-if)) ((4 boolean)) ((16 offset)))
cn1: (((5 integer)) <- ((add)) ((3 integer)) ((1 literal)))
cn1: (((print-integer)) ((1 terminal-address)) ((5 integer)))
cn1: (((6 string-address)) <- ((new))  | )
cn1: (((print-string)) ((1 terminal-address)) ((6 string-address)))
cn1: (((7 integer)) <- ((copy)) ((0 literal)))
cn1: (((4 boolean)) <- ((equal)) ((7 integer)) ((8 literal)))
cn1: (((jump-if)) ((4 boolean)) ((6 offset)))
cn1: (((8 file-address)) <- ((index)) ((2 board-address) (deref)) ((7 integer)))
cn1: (((6 square)) <- ((index)) ((8 file-address) (deref)) ((3 integer)))
cn1: (((print-character)) ((1 terminal-address)) ((6 square)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
cn1: (((jump)) ((-8 offset)))
cn1: (((3 integer)) <- ((subtract)) ((3 integer)) ((1 literal)))
cn1: (((cursor-to-next-line)) ((1 terminal-address)))
cn1: (((jump)) ((-18 offset)))
cn1: (((6 string-address)) <- ((new))   +----------------)
cn1: (((print-string)) ((1 terminal-address)) ((6 string-address)))
cn1: (((cursor-to-next-line)) ((1 terminal-address)))
cn1: (((6 string-address)) <- ((new))     a b c d e f g h)
cn1: (((print-string)) ((1 terminal-address)) ((6 string-address)))
cn1: (((cursor-to-next-line)) ((1 terminal-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 channel-address)) <- ((next-input)))
cn1: (((2 tagged-value)) ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
cn1: (((4 character)) <- ((copy)) ((a literal)))
cn1: (((5 integer)) <- ((character-to-integer)) ((4 character)))
cn1: (((6 character)) <- ((maybe-coerce)) ((2 tagged-value)) ((character literal)))
cn1: (((7 boolean)) <- ((equal)) ((6 character)) ((q literal)))
cn1: (((jump-unless)) ((7 boolean)) ((1 offset)))
cn1: (((reply)) ((nil literal)))
cn1: (((8 integer)) <- ((character-to-integer)) ((6 character)))
cn1: (((8 integer)) <- ((subtract)) ((8 integer)) ((5 integer)))
cn1: (((9 boolean)) <- ((greater-or-equal)) ((8 integer)) ((0 literal)))
cn1: (((assert)) ((9 boolean)) ((file too low literal)))
cn1: (((10 boolean)) <- ((lesser-or-equal)) ((8 integer)) ((7 literal)))
cn1: (((assert)) ((10 boolean)) ((file too high literal)))
cn1: (((reply)) ((8 integer)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 channel-address)) <- ((next-input)))
cn1: (((2 integer)) <- ((read-file)) ((1 channel-address)))
cn1: (((jump-if)) ((2 integer)) ((1 offset)))
cn1: (((reply)) ((nil literal)))
cn1: (((3 integer)) <- ((read-rank)) ((1 channel-address)))
cn1: (((expect-stdin)) ((1 channel-address)) ((- literal)))
cn1: (((4 integer)) <- ((read-file)) ((1 channel-address)))
cn1: (((5 integer)) <- ((read-rank)) ((1 channel-address)))
cn1: (((expect-stdin)) ((1 channel-address)) ((
 literal)))
cn1: (((6 move-address)) <- ((new)) ((move literal)))
cn1: (((7 integer-integer-pair-address)) <- ((get-address)) ((6 move-address) (deref)) ((0 offset)))
cn1: (((8 integer-address)) <- ((get-address)) ((7 integer-integer-pair-address) (deref)) ((0 offset)))
cn1: (((8 integer-address) (deref)) <- ((copy)) ((2 integer)))
cn1: (((8 integer-address)) <- ((get-address)) ((7 integer-integer-pair-address) (deref)) ((1 offset)))
cn1: (((8 integer-address) (deref)) <- ((copy)) ((3 integer)))
cn1: (((9 integer-integer-pair-address)) <- ((get-address)) ((6 move-address) (deref)) ((1 offset)))
cn1: (((8 integer-address)) <- ((get-address)) ((9 integer-integer-pair-address) (deref)) ((0 offset)))
cn1: (((8 integer-address) (deref)) <- ((copy)) ((4 integer)))
cn1: (((8 integer-address)) <- ((get-address)) ((9 integer-integer-pair-address) (deref)) ((1 offset)))
cn1: (((8 integer-address) (deref)) <- ((copy)) ((5 integer)))
cn1: (((reply)) ((6 move-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 channel-address)) <- ((next-input)))
cn1: (((2 tagged-value)) ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
cn1: (((4 character)) <- ((maybe-coerce)) ((2 tagged-value)) ((character literal)))
cn1: (((5 boolean)) <- ((equal)) ((4 character)) ((q literal)))
cn1: (((jump-unless)) ((5 boolean)) ((1 offset)))
cn1: (((reply)) ((nil literal)))
cn1: (((6 integer)) <- ((character-to-integer)) ((4 character)))
cn1: (((7 character)) <- ((copy)) ((1 literal)))
cn1: (((8 integer)) <- ((character-to-integer)) ((7 character)))
cn1: (((6 integer)) <- ((subtract)) ((6 integer)) ((8 integer)))
cn1: (((9 boolean)) <- ((greater-or-equal)) ((6 integer)) ((0 literal)))
cn1: (((assert)) ((9 boolean)) ((rank too low literal)))
cn1: (((10 boolean)) <- ((lesser-or-equal)) ((6 integer)) ((7 literal)))
cn1: (((assert)) ((10 boolean)) ((rank too high literal)))
cn1: (((reply)) ((6 integer)))
c{0: 0 (((1 channel-address) (raw)) <- ((init-channel)) ((1 literal))) -- nil
c{0: 1 (((2 terminal-address) (raw)) <- ((init-fake-terminal)) ((20 literal)) ((10 literal))) -- nil
c{0: 2 (((3 string-address) (raw)) <- ((get)) ((2 terminal-address) (raw) (deref)) ((data offset))) -- nil
c{1: 0 ✓ (((1 channel-address) (raw)) <- ((init-channel)) ((1 literal)))
c{1: 1 ✓ (((2 terminal-address) (raw)) <- ((init-fake-terminal)) ((20 literal)) ((10 literal)))
c{1: 2 ✓ (((3 string-address) (raw)) <- ((get)) ((2 terminal-address) (raw) (deref)) ((data offset)))
cn0: convert-names in test-init
cn0: (((1 channel-address) (raw)) <- ((init-channel)) ((1 literal))) nil nil
cn0: checking arg ((1 literal))
cn0: checking oarg ((1 channel-address) (raw))
maybe-add: ((1 channel-address) (raw))
cn0: (((2 terminal-address) (raw)) <- ((init-fake-terminal)) ((20 literal)) ((10 literal))) nil nil
cn0: checking arg ((20 literal))
cn0: checking arg ((10 literal))
cn0: checking oarg ((2 terminal-address) (raw))
maybe-add: ((2 terminal-address) (raw))
cn0: (((3 string-address) (raw)) <- ((get)) ((2 terminal-address) (raw) (deref)) ((data offset))) nil nil
cn0: field-access data in 2terminal-addressrawderef of type terminal
cn0: new field; computing location
cn0: field location 4
cn0: checking arg ((2 terminal-address) (raw) (deref))
maybe-add: ((2 terminal-address) (raw) (deref))
cn0: checking arg ((data offset))
cn0: checking oarg ((3 string-address) (raw))
maybe-add: ((3 string-address) (raw))
cn1: (((1 channel-address) (raw)) <- ((init-channel)) ((1 literal)))
cn1: (((2 terminal-address) (raw)) <- ((init-fake-terminal)) ((20 literal)) ((10 literal)))
cn1: (((3 string-address) (raw)) <- ((get)) ((2 terminal-address) (raw) (deref)) ((4 offset)))
schedule: test-init
run: test-init 0: (((1 channel-address) (raw)) <- ((init-channel)) ((1 literal)))
run: init-channel/test-init 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-channel/test-init 0: 1000 => ((default-space space-address))
run: init-channel/test-init 1: (((1 channel-address)) <- ((new)) ((channel literal)))
run: init-channel/test-init 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 1002 <= 1031
run: init-channel/test-init 2: (((2 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: init-channel/test-init 2: 1031 => ((2 integer-address))
mem: ((2 integer-address)): 1003 <= 1031
run: init-channel/test-init 3: (((2 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: init-channel/test-init 3: 0 => ((2 integer-address) (deref))
mem: ((2 integer-address) (deref)): 1031 <= 0
run: init-channel/test-init 4: (((3 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: init-channel/test-init 4: 1032 => ((3 integer-address))
mem: ((3 integer-address)): 1004 <= 1032
run: init-channel/test-init 5: (((3 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: init-channel/test-init 5: 0 => ((3 integer-address) (deref))
mem: ((3 integer-address) (deref)): 1032 <= 0
run: init-channel/test-init 6: (((4 integer)) <- ((next-input)))
arg: nil 0 (1)
run: init-channel/test-init 6: 1 => ((4 integer))
mem: ((4 integer)): 1005 <= 1
run: init-channel/test-init 7: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 1
run: init-channel/test-init 7: 2 => ((4 integer))
mem: ((4 integer)): 1005 <= 2
run: init-channel/test-init 8: (((5 tagged-value-array-address-address)) <- ((get-address)) ((1 channel-address) (deref)) ((2 offset)))
run: init-channel/test-init 8: 1033 => ((5 tagged-value-array-address-address))
mem: ((5 tagged-value-array-address-address)): 1006 <= 1033
run: init-channel/test-init 9: (((5 tagged-value-array-address-address) (deref)) <- ((new)) ((tagged-value-array literal)) ((4 integer)))
mem: ((4 integer)) => 2
run: init-channel/test-init 9: 1034 => ((5 tagged-value-array-address-address) (deref))
mem: ((5 tagged-value-array-address-address) (deref)): 1033 <= 1034
run: init-channel/test-init 10: (((reply)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: test-init 0: 1031 => ((1 channel-address) (raw))
mem: ((1 channel-address) (raw)): 1 <= 1031
run: test-init 1: (((2 terminal-address) (raw)) <- ((init-fake-terminal)) ((20 literal)) ((10 literal)))
run: init-fake-terminal/test-init 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
run: init-fake-terminal/test-init 0: 1039 => ((default-space space-address))
run: init-fake-terminal/test-init 1: (((1 terminal-address)) <- ((new)) ((terminal literal)))
run: init-fake-terminal/test-init 1: 1070 => ((1 terminal-address))
mem: ((1 terminal-address)): 1041 <= 1070
run: init-fake-terminal/test-init 2: (((2 integer-address)) <- ((get-address)) ((1 terminal-address) (deref)) ((1 offset)))
run: init-fake-terminal/test-init 2: 1071 => ((2 integer-address))
mem: ((2 integer-address)): 1042 <= 1071
run: init-fake-terminal/test-init 3: (((2 integer-address) (deref)) <- ((next-input)))
arg: nil 0 (20 10)
run: init-fake-terminal/test-init 3: 20 => ((2 integer-address) (deref))
mem: ((2 integer-address) (deref)): 1071 <= 20
run: init-fake-terminal/test-init 4: (((3 integer-address)) <- ((get-address)) ((1 terminal-address) (deref)) ((0 offset)))
run: init-fake-terminal/test-init 4: 1070 => ((3 integer-address))
mem: ((3 integer-address)): 1043 <= 1070
run: init-fake-terminal/test-init 5: (((3 integer-address) (deref)) <- ((next-input)))
arg: nil 1 (20 10)
run: init-fake-terminal/test-init 5: 10 => ((3 integer-address) (deref))
mem: ((3 integer-address) (deref)): 1070 <= 10
run: init-fake-terminal/test-init 6: (((4 integer-address)) <- ((get-address)) ((1 terminal-address) (deref)) ((2 offset)))
run: init-fake-terminal/test-init 6: 1072 => ((4 integer-address))
mem: ((4 integer-address)): 1044 <= 1072
run: init-fake-terminal/test-init 7: (((4 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: init-fake-terminal/test-init 7: 0 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1072 <= 0
run: init-fake-terminal/test-init 8: (((5 integer-address)) <- ((get-address)) ((1 terminal-address) (deref)) ((3 offset)))
run: init-fake-terminal/test-init 8: 1073 => ((5 integer-address))
mem: ((5 integer-address)): 1045 <= 1073
run: init-fake-terminal/test-init 9: (((5 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: init-fake-terminal/test-init 9: 0 => ((5 integer-address) (deref))
mem: ((5 integer-address) (deref)): 1073 <= 0
run: init-fake-terminal/test-init 10: (((6 integer)) <- ((multiply)) ((2 integer-address) (deref)) ((3 integer-address) (deref)))
mem: ((2 integer-address) (deref)) => 20
mem: ((3 integer-address) (deref)) => 10
run: init-fake-terminal/test-init 10: 200 => ((6 integer))
mem: ((6 integer)): 1046 <= 200
run: init-fake-terminal/test-init 11: (((7 string-address-address)) <- ((get-address)) ((1 terminal-address) (deref)) ((4 offset)))
run: init-fake-terminal/test-init 11: 1074 => ((7 string-address-address))
mem: ((7 string-address-address)): 1047 <= 1074
run: init-fake-terminal/test-init 12: (((7 string-address-address) (deref)) <- ((new)) ((string literal)) ((6 integer)))
mem: ((6 integer)) => 200
run: init-fake-terminal/test-init 12: 1075 => ((7 string-address-address) (deref))
mem: ((7 string-address-address) (deref)): 1074 <= 1075
run: init-fake-terminal/test-init 13: (((clear-screen)) ((1 terminal-address)))
mem: ((1 terminal-address)) => 1070
run: clear-screen/init-fake-terminal/test-init 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: clear-screen/init-fake-terminal/test-init 0: 1276 => ((default-space space-address))
run: clear-screen/init-fake-terminal/test-init 1: (((1 terminal-address)) <- ((next-input)))
arg: nil 0 (1070)
run: clear-screen/init-fake-terminal/test-init 1: 1070 => ((1 terminal-address))
mem: ((1 terminal-address)): 1278 <= 1070
run: clear-screen/init-fake-terminal/test-init 2: (((jump-unless)) ((1 terminal-address)) ((10 offset)))
mem: ((1 terminal-address)) => 1070
run: clear-screen/init-fake-terminal/test-init 3: (((2 string-address)) <- ((get)) ((1 terminal-address) (deref)) ((4 offset)))
mem: ((1074 string-address) (raw)) => 1075
run: clear-screen/init-fake-terminal/test-init 3: 1075 => ((2 string-address))
mem: ((2 string-address)): 1279 <= 1075
run: clear-screen/init-fake-terminal/test-init 4: (((3 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 4: 200 => ((3 integer))
mem: ((3 integer)): 1280 <= 200
run: clear-screen/init-fake-terminal/test-init 5: (((4 integer)) <- ((copy)) ((0 literal)))
run: clear-screen/init-fake-terminal/test-init 5: 0 => ((4 integer))
mem: ((4 integer)): 1281 <= 0
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 0
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 0
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1076 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1076
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1076 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 0
run: clear-screen/init-fake-terminal/test-init 10: 1 => ((4 integer))
mem: ((4 integer)): 1281 <= 1
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 1
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 1
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1077 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1077
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1077 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 1
run: clear-screen/init-fake-terminal/test-init 10: 2 => ((4 integer))
mem: ((4 integer)): 1281 <= 2
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 2
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 2
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1078 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1078
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1078 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 2
run: clear-screen/init-fake-terminal/test-init 10: 3 => ((4 integer))
mem: ((4 integer)): 1281 <= 3
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 3
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 3
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1079 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1079
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1079 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 3
run: clear-screen/init-fake-terminal/test-init 10: 4 => ((4 integer))
mem: ((4 integer)): 1281 <= 4
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 4
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 4
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1080 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1080
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1080 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 4
run: clear-screen/init-fake-terminal/test-init 10: 5 => ((4 integer))
mem: ((4 integer)): 1281 <= 5
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 5
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 5
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1081 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1081
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1081 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 5
run: clear-screen/init-fake-terminal/test-init 10: 6 => ((4 integer))
mem: ((4 integer)): 1281 <= 6
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 6
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 6
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1082 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1082
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1082 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 6
run: clear-screen/init-fake-terminal/test-init 10: 7 => ((4 integer))
mem: ((4 integer)): 1281 <= 7
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 7
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 7
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1083 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1083
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1083 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 7
run: clear-screen/init-fake-terminal/test-init 10: 8 => ((4 integer))
mem: ((4 integer)): 1281 <= 8
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 8
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 8
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1084 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1084
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1084 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 8
run: clear-screen/init-fake-terminal/test-init 10: 9 => ((4 integer))
mem: ((4 integer)): 1281 <= 9
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 9
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 9
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1085 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1085
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1085 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 9
run: clear-screen/init-fake-terminal/test-init 10: 10 => ((4 integer))
mem: ((4 integer)): 1281 <= 10
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 10
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 10
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1086 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1086
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1086 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 10
run: clear-screen/init-fake-terminal/test-init 10: 11 => ((4 integer))
mem: ((4 integer)): 1281 <= 11
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 11
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 11
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1087 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1087
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1087 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 11
run: clear-screen/init-fake-terminal/test-init 10: 12 => ((4 integer))
mem: ((4 integer)): 1281 <= 12
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 12
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 12
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1088 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1088
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1088 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 12
run: clear-screen/init-fake-terminal/test-init 10: 13 => ((4 integer))
mem: ((4 integer)): 1281 <= 13
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 13
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 13
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1089 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1089
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1089 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 13
run: clear-screen/init-fake-terminal/test-init 10: 14 => ((4 integer))
mem: ((4 integer)): 1281 <= 14
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 14
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 14
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1090 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1090
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1090 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 14
run: clear-screen/init-fake-terminal/test-init 10: 15 => ((4 integer))
mem: ((4 integer)): 1281 <= 15
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 15
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 15
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1091 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1091
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1091 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 15
run: clear-screen/init-fake-terminal/test-init 10: 16 => ((4 integer))
mem: ((4 integer)): 1281 <= 16
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 16
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 16
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1092 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1092
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1092 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 16
run: clear-screen/init-fake-terminal/test-init 10: 17 => ((4 integer))
mem: ((4 integer)): 1281 <= 17
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 17
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 17
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1093 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1093
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1093 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 17
run: clear-screen/init-fake-terminal/test-init 10: 18 => ((4 integer))
mem: ((4 integer)): 1281 <= 18
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 18
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 18
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1094 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1094
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1094 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 18
run: clear-screen/init-fake-terminal/test-init 10: 19 => ((4 integer))
mem: ((4 integer)): 1281 <= 19
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 19
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 19
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1095 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1095
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1095 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 19
run: clear-screen/init-fake-terminal/test-init 10: 20 => ((4 integer))
mem: ((4 integer)): 1281 <= 20
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 20
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 20
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1096 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1096
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1096 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 20
run: clear-screen/init-fake-terminal/test-init 10: 21 => ((4 integer))
mem: ((4 integer)): 1281 <= 21
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 21
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 21
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1097 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1097
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1097 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 21
run: clear-screen/init-fake-terminal/test-init 10: 22 => ((4 integer))
mem: ((4 integer)): 1281 <= 22
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 22
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 22
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1098 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1098
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1098 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 22
run: clear-screen/init-fake-terminal/test-init 10: 23 => ((4 integer))
mem: ((4 integer)): 1281 <= 23
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 23
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 23
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1099 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1099
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1099 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 23
run: clear-screen/init-fake-terminal/test-init 10: 24 => ((4 integer))
mem: ((4 integer)): 1281 <= 24
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 24
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 24
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1100 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1100
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1100 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 24
run: clear-screen/init-fake-terminal/test-init 10: 25 => ((4 integer))
mem: ((4 integer)): 1281 <= 25
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 25
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 25
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1101 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1101
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1101 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 25
run: clear-screen/init-fake-terminal/test-init 10: 26 => ((4 integer))
mem: ((4 integer)): 1281 <= 26
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 26
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 26
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1102 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1102
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1102 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 26
run: clear-screen/init-fake-terminal/test-init 10: 27 => ((4 integer))
mem: ((4 integer)): 1281 <= 27
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 27
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 27
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1103 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1103
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1103 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 27
run: clear-screen/init-fake-terminal/test-init 10: 28 => ((4 integer))
mem: ((4 integer)): 1281 <= 28
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 28
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 28
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1104 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1104
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1104 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 28
run: clear-screen/init-fake-terminal/test-init 10: 29 => ((4 integer))
mem: ((4 integer)): 1281 <= 29
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 29
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 29
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1105 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1105
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1105 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 29
run: clear-screen/init-fake-terminal/test-init 10: 30 => ((4 integer))
mem: ((4 integer)): 1281 <= 30
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 30
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 30
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1106 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1106
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1106 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 30
run: clear-screen/init-fake-terminal/test-init 10: 31 => ((4 integer))
mem: ((4 integer)): 1281 <= 31
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 31
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 31
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1107 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1107
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1107 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 31
run: clear-screen/init-fake-terminal/test-init 10: 32 => ((4 integer))
mem: ((4 integer)): 1281 <= 32
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 32
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 32
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1108 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1108
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1108 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 32
run: clear-screen/init-fake-terminal/test-init 10: 33 => ((4 integer))
mem: ((4 integer)): 1281 <= 33
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 33
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 33
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1109 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1109
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1109 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 33
run: clear-screen/init-fake-terminal/test-init 10: 34 => ((4 integer))
mem: ((4 integer)): 1281 <= 34
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 34
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 34
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1110 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1110
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1110 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 34
run: clear-screen/init-fake-terminal/test-init 10: 35 => ((4 integer))
mem: ((4 integer)): 1281 <= 35
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 35
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 35
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1111 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1111
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1111 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 35
run: clear-screen/init-fake-terminal/test-init 10: 36 => ((4 integer))
mem: ((4 integer)): 1281 <= 36
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 36
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 36
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1112 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1112
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1112 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 36
run: clear-screen/init-fake-terminal/test-init 10: 37 => ((4 integer))
mem: ((4 integer)): 1281 <= 37
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 37
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 37
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1113 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1113
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1113 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 37
run: clear-screen/init-fake-terminal/test-init 10: 38 => ((4 integer))
mem: ((4 integer)): 1281 <= 38
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 38
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 38
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1114 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1114
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1114 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 38
run: clear-screen/init-fake-terminal/test-init 10: 39 => ((4 integer))
mem: ((4 integer)): 1281 <= 39
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 39
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 39
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1115 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1115
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1115 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 39
run: clear-screen/init-fake-terminal/test-init 10: 40 => ((4 integer))
mem: ((4 integer)): 1281 <= 40
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 40
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 40
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1116 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1116
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1116 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 40
run: clear-screen/init-fake-terminal/test-init 10: 41 => ((4 integer))
mem: ((4 integer)): 1281 <= 41
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 41
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 41
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1117 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1117
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1117 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 41
run: clear-screen/init-fake-terminal/test-init 10: 42 => ((4 integer))
mem: ((4 integer)): 1281 <= 42
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 42
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 42
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1118 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1118
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1118 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 42
run: clear-screen/init-fake-terminal/test-init 10: 43 => ((4 integer))
mem: ((4 integer)): 1281 <= 43
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 43
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 43
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1119 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1119
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1119 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 43
run: clear-screen/init-fake-terminal/test-init 10: 44 => ((4 integer))
mem: ((4 integer)): 1281 <= 44
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 44
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 44
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1120 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1120
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1120 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 44
run: clear-screen/init-fake-terminal/test-init 10: 45 => ((4 integer))
mem: ((4 integer)): 1281 <= 45
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 45
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 45
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1121 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1121
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1121 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 45
run: clear-screen/init-fake-terminal/test-init 10: 46 => ((4 integer))
mem: ((4 integer)): 1281 <= 46
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 46
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 46
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1122 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1122
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1122 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 46
run: clear-screen/init-fake-terminal/test-init 10: 47 => ((4 integer))
mem: ((4 integer)): 1281 <= 47
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 47
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 47
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1123 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1123
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1123 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 47
run: clear-screen/init-fake-terminal/test-init 10: 48 => ((4 integer))
mem: ((4 integer)): 1281 <= 48
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 48
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 48
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1124 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1124
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1124 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 48
run: clear-screen/init-fake-terminal/test-init 10: 49 => ((4 integer))
mem: ((4 integer)): 1281 <= 49
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 49
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 49
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1125 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1125
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1125 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 49
run: clear-screen/init-fake-terminal/test-init 10: 50 => ((4 integer))
mem: ((4 integer)): 1281 <= 50
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 50
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 50
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1126 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1126
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1126 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 50
run: clear-screen/init-fake-terminal/test-init 10: 51 => ((4 integer))
mem: ((4 integer)): 1281 <= 51
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 51
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 51
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1127 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1127
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1127 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 51
run: clear-screen/init-fake-terminal/test-init 10: 52 => ((4 integer))
mem: ((4 integer)): 1281 <= 52
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 52
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 52
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1128 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1128
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1128 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 52
run: clear-screen/init-fake-terminal/test-init 10: 53 => ((4 integer))
mem: ((4 integer)): 1281 <= 53
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 53
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 53
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1129 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1129
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1129 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 53
run: clear-screen/init-fake-terminal/test-init 10: 54 => ((4 integer))
mem: ((4 integer)): 1281 <= 54
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 54
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 54
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1130 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1130
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1130 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 54
run: clear-screen/init-fake-terminal/test-init 10: 55 => ((4 integer))
mem: ((4 integer)): 1281 <= 55
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 55
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 55
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1131 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1131
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1131 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 55
run: clear-screen/init-fake-terminal/test-init 10: 56 => ((4 integer))
mem: ((4 integer)): 1281 <= 56
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 56
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 56
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1132 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1132
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1132 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 56
run: clear-screen/init-fake-terminal/test-init 10: 57 => ((4 integer))
mem: ((4 integer)): 1281 <= 57
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 57
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 57
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1133 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1133
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1133 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 57
run: clear-screen/init-fake-terminal/test-init 10: 58 => ((4 integer))
mem: ((4 integer)): 1281 <= 58
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 58
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 58
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1134 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1134
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1134 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 58
run: clear-screen/init-fake-terminal/test-init 10: 59 => ((4 integer))
mem: ((4 integer)): 1281 <= 59
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 59
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 59
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1135 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1135
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1135 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 59
run: clear-screen/init-fake-terminal/test-init 10: 60 => ((4 integer))
mem: ((4 integer)): 1281 <= 60
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 60
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 60
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1136 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1136
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1136 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 60
run: clear-screen/init-fake-terminal/test-init 10: 61 => ((4 integer))
mem: ((4 integer)): 1281 <= 61
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 61
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 61
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1137 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1137
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1137 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 61
run: clear-screen/init-fake-terminal/test-init 10: 62 => ((4 integer))
mem: ((4 integer)): 1281 <= 62
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 62
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 62
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1138 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1138
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1138 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 62
run: clear-screen/init-fake-terminal/test-init 10: 63 => ((4 integer))
mem: ((4 integer)): 1281 <= 63
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 63
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 63
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1139 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1139
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1139 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 63
run: clear-screen/init-fake-terminal/test-init 10: 64 => ((4 integer))
mem: ((4 integer)): 1281 <= 64
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 64
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 64
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1140 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1140
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1140 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 64
run: clear-screen/init-fake-terminal/test-init 10: 65 => ((4 integer))
mem: ((4 integer)): 1281 <= 65
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 65
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 65
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1141 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1141
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1141 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 65
run: clear-screen/init-fake-terminal/test-init 10: 66 => ((4 integer))
mem: ((4 integer)): 1281 <= 66
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 66
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 66
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1142 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1142
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1142 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 66
run: clear-screen/init-fake-terminal/test-init 10: 67 => ((4 integer))
mem: ((4 integer)): 1281 <= 67
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 67
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 67
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1143 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1143
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1143 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 67
run: clear-screen/init-fake-terminal/test-init 10: 68 => ((4 integer))
mem: ((4 integer)): 1281 <= 68
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 68
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 68
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1144 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1144
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1144 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 68
run: clear-screen/init-fake-terminal/test-init 10: 69 => ((4 integer))
mem: ((4 integer)): 1281 <= 69
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 69
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 69
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1145 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1145
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1145 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 69
run: clear-screen/init-fake-terminal/test-init 10: 70 => ((4 integer))
mem: ((4 integer)): 1281 <= 70
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 70
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 70
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1146 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1146
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1146 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 70
run: clear-screen/init-fake-terminal/test-init 10: 71 => ((4 integer))
mem: ((4 integer)): 1281 <= 71
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 71
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 71
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1147 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1147
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1147 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 71
run: clear-screen/init-fake-terminal/test-init 10: 72 => ((4 integer))
mem: ((4 integer)): 1281 <= 72
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 72
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 72
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1148 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1148
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1148 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 72
run: clear-screen/init-fake-terminal/test-init 10: 73 => ((4 integer))
mem: ((4 integer)): 1281 <= 73
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 73
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 73
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1149 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1149
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1149 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 73
run: clear-screen/init-fake-terminal/test-init 10: 74 => ((4 integer))
mem: ((4 integer)): 1281 <= 74
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 74
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 74
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1150 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1150
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1150 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 74
run: clear-screen/init-fake-terminal/test-init 10: 75 => ((4 integer))
mem: ((4 integer)): 1281 <= 75
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 75
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 75
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1151 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1151
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1151 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 75
run: clear-screen/init-fake-terminal/test-init 10: 76 => ((4 integer))
mem: ((4 integer)): 1281 <= 76
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 76
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 76
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1152 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1152
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1152 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 76
run: clear-screen/init-fake-terminal/test-init 10: 77 => ((4 integer))
mem: ((4 integer)): 1281 <= 77
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 77
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 77
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1153 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1153
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1153 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 77
run: clear-screen/init-fake-terminal/test-init 10: 78 => ((4 integer))
mem: ((4 integer)): 1281 <= 78
schedule: scheduling clear-screen/init-fake-terminal/test-init for further processing
schedule: clear-screen/init-fake-terminal/test-init
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 78
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 78
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1154 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1154
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1154 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 78
run: clear-screen/init-fake-terminal/test-init 10: 79 => ((4 integer))
mem: ((4 integer)): 1281 <= 79
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 79
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 79
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1155 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1155
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1155 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 79
run: clear-screen/init-fake-terminal/test-init 10: 80 => ((4 integer))
mem: ((4 integer)): 1281 <= 80
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 80
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 80
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1156 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1156
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1156 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 80
run: clear-screen/init-fake-terminal/test-init 10: 81 => ((4 integer))
mem: ((4 integer)): 1281 <= 81
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 81
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 81
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1157 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1157
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1157 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 81
run: clear-screen/init-fake-terminal/test-init 10: 82 => ((4 integer))
mem: ((4 integer)): 1281 <= 82
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 82
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 82
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1158 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1158
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1158 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 82
run: clear-screen/init-fake-terminal/test-init 10: 83 => ((4 integer))
mem: ((4 integer)): 1281 <= 83
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 83
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 83
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1159 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1159
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1159 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 83
run: clear-screen/init-fake-terminal/test-init 10: 84 => ((4 integer))
mem: ((4 integer)): 1281 <= 84
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 84
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 84
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1160 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1160
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1160 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 84
run: clear-screen/init-fake-terminal/test-init 10: 85 => ((4 integer))
mem: ((4 integer)): 1281 <= 85
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 85
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 85
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1161 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1161
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1161 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 85
run: clear-screen/init-fake-terminal/test-init 10: 86 => ((4 integer))
mem: ((4 integer)): 1281 <= 86
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 86
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 86
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1162 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1162
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1162 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 86
run: clear-screen/init-fake-terminal/test-init 10: 87 => ((4 integer))
mem: ((4 integer)): 1281 <= 87
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 87
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 87
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1163 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1163
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1163 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 87
run: clear-screen/init-fake-terminal/test-init 10: 88 => ((4 integer))
mem: ((4 integer)): 1281 <= 88
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 88
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 88
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1164 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1164
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1164 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 88
run: clear-screen/init-fake-terminal/test-init 10: 89 => ((4 integer))
mem: ((4 integer)): 1281 <= 89
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 89
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 89
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1165 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1165
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1165 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 89
run: clear-screen/init-fake-terminal/test-init 10: 90 => ((4 integer))
mem: ((4 integer)): 1281 <= 90
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 90
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 90
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1166 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1166
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1166 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 90
run: clear-screen/init-fake-terminal/test-init 10: 91 => ((4 integer))
mem: ((4 integer)): 1281 <= 91
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 91
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 91
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1167 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1167
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1167 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 91
run: clear-screen/init-fake-terminal/test-init 10: 92 => ((4 integer))
mem: ((4 integer)): 1281 <= 92
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 92
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 92
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1168 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1168
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1168 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 92
run: clear-screen/init-fake-terminal/test-init 10: 93 => ((4 integer))
mem: ((4 integer)): 1281 <= 93
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 93
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 93
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1169 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1169
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1169 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 93
run: clear-screen/init-fake-terminal/test-init 10: 94 => ((4 integer))
mem: ((4 integer)): 1281 <= 94
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 94
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 94
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1170 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1170
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1170 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 94
run: clear-screen/init-fake-terminal/test-init 10: 95 => ((4 integer))
mem: ((4 integer)): 1281 <= 95
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 95
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 95
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1171 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1171
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1171 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 95
run: clear-screen/init-fake-terminal/test-init 10: 96 => ((4 integer))
mem: ((4 integer)): 1281 <= 96
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 96
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 96
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1172 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1172
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1172 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 96
run: clear-screen/init-fake-terminal/test-init 10: 97 => ((4 integer))
mem: ((4 integer)): 1281 <= 97
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 97
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 97
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1173 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1173
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1173 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 97
run: clear-screen/init-fake-terminal/test-init 10: 98 => ((4 integer))
mem: ((4 integer)): 1281 <= 98
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 98
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 98
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1174 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1174
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1174 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 98
run: clear-screen/init-fake-terminal/test-init 10: 99 => ((4 integer))
mem: ((4 integer)): 1281 <= 99
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 99
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 99
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1175 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1175
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1175 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 99
run: clear-screen/init-fake-terminal/test-init 10: 100 => ((4 integer))
mem: ((4 integer)): 1281 <= 100
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 100
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 100
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1176 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1176
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1176 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 100
run: clear-screen/init-fake-terminal/test-init 10: 101 => ((4 integer))
mem: ((4 integer)): 1281 <= 101
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 101
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 101
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1177 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1177
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1177 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 101
run: clear-screen/init-fake-terminal/test-init 10: 102 => ((4 integer))
mem: ((4 integer)): 1281 <= 102
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 102
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 102
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1178 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1178
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1178 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 102
run: clear-screen/init-fake-terminal/test-init 10: 103 => ((4 integer))
mem: ((4 integer)): 1281 <= 103
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 103
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 103
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1179 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1179
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1179 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 103
run: clear-screen/init-fake-terminal/test-init 10: 104 => ((4 integer))
mem: ((4 integer)): 1281 <= 104
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 104
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 104
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1180 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1180
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1180 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 104
run: clear-screen/init-fake-terminal/test-init 10: 105 => ((4 integer))
mem: ((4 integer)): 1281 <= 105
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 105
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 105
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1181 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1181
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1181 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 105
run: clear-screen/init-fake-terminal/test-init 10: 106 => ((4 integer))
mem: ((4 integer)): 1281 <= 106
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 106
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 106
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1182 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1182
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1182 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 106
run: clear-screen/init-fake-terminal/test-init 10: 107 => ((4 integer))
mem: ((4 integer)): 1281 <= 107
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 107
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 107
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1183 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1183
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1183 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 107
run: clear-screen/init-fake-terminal/test-init 10: 108 => ((4 integer))
mem: ((4 integer)): 1281 <= 108
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 108
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 108
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1184 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1184
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1184 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 108
run: clear-screen/init-fake-terminal/test-init 10: 109 => ((4 integer))
mem: ((4 integer)): 1281 <= 109
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 109
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 109
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1185 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1185
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1185 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 109
run: clear-screen/init-fake-terminal/test-init 10: 110 => ((4 integer))
mem: ((4 integer)): 1281 <= 110
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 110
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 110
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1186 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1186
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1186 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 110
run: clear-screen/init-fake-terminal/test-init 10: 111 => ((4 integer))
mem: ((4 integer)): 1281 <= 111
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 111
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 111
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1187 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1187
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1187 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 111
run: clear-screen/init-fake-terminal/test-init 10: 112 => ((4 integer))
mem: ((4 integer)): 1281 <= 112
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 112
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 112
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1188 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1188
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1188 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 112
run: clear-screen/init-fake-terminal/test-init 10: 113 => ((4 integer))
mem: ((4 integer)): 1281 <= 113
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 113
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 113
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1189 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1189
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1189 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 113
run: clear-screen/init-fake-terminal/test-init 10: 114 => ((4 integer))
mem: ((4 integer)): 1281 <= 114
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 114
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 114
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1190 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1190
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1190 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 114
run: clear-screen/init-fake-terminal/test-init 10: 115 => ((4 integer))
mem: ((4 integer)): 1281 <= 115
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 115
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 115
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1191 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1191
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1191 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 115
run: clear-screen/init-fake-terminal/test-init 10: 116 => ((4 integer))
mem: ((4 integer)): 1281 <= 116
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 116
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 116
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1192 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1192
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1192 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 116
run: clear-screen/init-fake-terminal/test-init 10: 117 => ((4 integer))
mem: ((4 integer)): 1281 <= 117
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 117
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 117
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1193 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1193
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1193 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 117
run: clear-screen/init-fake-terminal/test-init 10: 118 => ((4 integer))
mem: ((4 integer)): 1281 <= 118
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 118
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 118
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1194 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1194
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1194 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 118
run: clear-screen/init-fake-terminal/test-init 10: 119 => ((4 integer))
mem: ((4 integer)): 1281 <= 119
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 119
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 119
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1195 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1195
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1195 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 119
run: clear-screen/init-fake-terminal/test-init 10: 120 => ((4 integer))
mem: ((4 integer)): 1281 <= 120
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 120
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 120
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1196 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1196
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1196 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 120
run: clear-screen/init-fake-terminal/test-init 10: 121 => ((4 integer))
mem: ((4 integer)): 1281 <= 121
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 121
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 121
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1197 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1197
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1197 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 121
run: clear-screen/init-fake-terminal/test-init 10: 122 => ((4 integer))
mem: ((4 integer)): 1281 <= 122
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 122
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 122
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1198 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1198
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1198 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 122
run: clear-screen/init-fake-terminal/test-init 10: 123 => ((4 integer))
mem: ((4 integer)): 1281 <= 123
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 123
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 123
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1199 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1199
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1199 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 123
run: clear-screen/init-fake-terminal/test-init 10: 124 => ((4 integer))
mem: ((4 integer)): 1281 <= 124
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 124
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 124
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1200 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1200
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1200 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 124
run: clear-screen/init-fake-terminal/test-init 10: 125 => ((4 integer))
mem: ((4 integer)): 1281 <= 125
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 125
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 125
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1201 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1201
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1201 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 125
run: clear-screen/init-fake-terminal/test-init 10: 126 => ((4 integer))
mem: ((4 integer)): 1281 <= 126
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 126
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 126
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1202 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1202
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1202 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 126
run: clear-screen/init-fake-terminal/test-init 10: 127 => ((4 integer))
mem: ((4 integer)): 1281 <= 127
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 127
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 127
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1203 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1203
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1203 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 127
run: clear-screen/init-fake-terminal/test-init 10: 128 => ((4 integer))
mem: ((4 integer)): 1281 <= 128
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 128
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 128
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1204 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1204
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1204 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 128
run: clear-screen/init-fake-terminal/test-init 10: 129 => ((4 integer))
mem: ((4 integer)): 1281 <= 129
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 129
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 129
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1205 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1205
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1205 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 129
run: clear-screen/init-fake-terminal/test-init 10: 130 => ((4 integer))
mem: ((4 integer)): 1281 <= 130
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 130
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 130
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1206 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1206
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1206 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 130
run: clear-screen/init-fake-terminal/test-init 10: 131 => ((4 integer))
mem: ((4 integer)): 1281 <= 131
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 131
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 131
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1207 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1207
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1207 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 131
run: clear-screen/init-fake-terminal/test-init 10: 132 => ((4 integer))
mem: ((4 integer)): 1281 <= 132
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 132
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 132
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1208 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1208
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1208 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 132
run: clear-screen/init-fake-terminal/test-init 10: 133 => ((4 integer))
mem: ((4 integer)): 1281 <= 133
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 133
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 133
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1209 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1209
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1209 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 133
run: clear-screen/init-fake-terminal/test-init 10: 134 => ((4 integer))
mem: ((4 integer)): 1281 <= 134
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 134
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 134
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1210 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1210
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1210 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 134
run: clear-screen/init-fake-terminal/test-init 10: 135 => ((4 integer))
mem: ((4 integer)): 1281 <= 135
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 135
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 135
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1211 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1211
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1211 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 135
run: clear-screen/init-fake-terminal/test-init 10: 136 => ((4 integer))
mem: ((4 integer)): 1281 <= 136
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 136
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 136
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1212 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1212
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1212 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 136
run: clear-screen/init-fake-terminal/test-init 10: 137 => ((4 integer))
mem: ((4 integer)): 1281 <= 137
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 137
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 137
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1213 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1213
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1213 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 137
run: clear-screen/init-fake-terminal/test-init 10: 138 => ((4 integer))
mem: ((4 integer)): 1281 <= 138
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 138
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 138
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1214 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1214
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1214 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 138
run: clear-screen/init-fake-terminal/test-init 10: 139 => ((4 integer))
mem: ((4 integer)): 1281 <= 139
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 139
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 139
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1215 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1215
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1215 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 139
run: clear-screen/init-fake-terminal/test-init 10: 140 => ((4 integer))
mem: ((4 integer)): 1281 <= 140
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 140
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 140
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1216 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1216
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1216 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 140
run: clear-screen/init-fake-terminal/test-init 10: 141 => ((4 integer))
mem: ((4 integer)): 1281 <= 141
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 141
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 141
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1217 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1217
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1217 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 141
run: clear-screen/init-fake-terminal/test-init 10: 142 => ((4 integer))
mem: ((4 integer)): 1281 <= 142
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 142
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 142
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1218 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1218
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1218 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 142
run: clear-screen/init-fake-terminal/test-init 10: 143 => ((4 integer))
mem: ((4 integer)): 1281 <= 143
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 143
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 143
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1219 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1219
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1219 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 143
run: clear-screen/init-fake-terminal/test-init 10: 144 => ((4 integer))
mem: ((4 integer)): 1281 <= 144
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 144
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 144
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1220 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1220
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1220 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 144
run: clear-screen/init-fake-terminal/test-init 10: 145 => ((4 integer))
mem: ((4 integer)): 1281 <= 145
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 145
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 145
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1221 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1221
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1221 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 145
run: clear-screen/init-fake-terminal/test-init 10: 146 => ((4 integer))
mem: ((4 integer)): 1281 <= 146
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 146
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 146
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1222 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1222
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1222 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 146
run: clear-screen/init-fake-terminal/test-init 10: 147 => ((4 integer))
mem: ((4 integer)): 1281 <= 147
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 147
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 147
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1223 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1223
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1223 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 147
run: clear-screen/init-fake-terminal/test-init 10: 148 => ((4 integer))
mem: ((4 integer)): 1281 <= 148
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 148
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 148
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1224 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1224
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1224 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 148
run: clear-screen/init-fake-terminal/test-init 10: 149 => ((4 integer))
mem: ((4 integer)): 1281 <= 149
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 149
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 149
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1225 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1225
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1225 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 149
run: clear-screen/init-fake-terminal/test-init 10: 150 => ((4 integer))
mem: ((4 integer)): 1281 <= 150
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 150
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 150
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1226 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1226
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1226 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 150
run: clear-screen/init-fake-terminal/test-init 10: 151 => ((4 integer))
mem: ((4 integer)): 1281 <= 151
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 151
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 151
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1227 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1227
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1227 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 151
run: clear-screen/init-fake-terminal/test-init 10: 152 => ((4 integer))
mem: ((4 integer)): 1281 <= 152
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 152
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 152
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1228 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1228
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1228 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 152
run: clear-screen/init-fake-terminal/test-init 10: 153 => ((4 integer))
mem: ((4 integer)): 1281 <= 153
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 153
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 153
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1229 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1229
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1229 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 153
run: clear-screen/init-fake-terminal/test-init 10: 154 => ((4 integer))
mem: ((4 integer)): 1281 <= 154
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 154
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 154
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1230 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1230
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1230 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 154
run: clear-screen/init-fake-terminal/test-init 10: 155 => ((4 integer))
mem: ((4 integer)): 1281 <= 155
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 155
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 155
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1231 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1231
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1231 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 155
run: clear-screen/init-fake-terminal/test-init 10: 156 => ((4 integer))
mem: ((4 integer)): 1281 <= 156
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 156
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 156
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1232 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1232
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1232 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 156
run: clear-screen/init-fake-terminal/test-init 10: 157 => ((4 integer))
mem: ((4 integer)): 1281 <= 157
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 157
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 157
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1233 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1233
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1233 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 157
run: clear-screen/init-fake-terminal/test-init 10: 158 => ((4 integer))
mem: ((4 integer)): 1281 <= 158
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 158
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 158
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1234 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1234
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1234 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 158
run: clear-screen/init-fake-terminal/test-init 10: 159 => ((4 integer))
mem: ((4 integer)): 1281 <= 159
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 159
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 159
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1235 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1235
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1235 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 159
run: clear-screen/init-fake-terminal/test-init 10: 160 => ((4 integer))
mem: ((4 integer)): 1281 <= 160
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 160
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 160
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1236 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1236
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1236 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 160
run: clear-screen/init-fake-terminal/test-init 10: 161 => ((4 integer))
mem: ((4 integer)): 1281 <= 161
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 161
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
schedule: scheduling clear-screen/init-fake-terminal/test-init for further processing
schedule: clear-screen/init-fake-terminal/test-init
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 161
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1237 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1237
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1237 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 161
run: clear-screen/init-fake-terminal/test-init 10: 162 => ((4 integer))
mem: ((4 integer)): 1281 <= 162
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 162
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 162
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1238 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1238
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1238 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 162
run: clear-screen/init-fake-terminal/test-init 10: 163 => ((4 integer))
mem: ((4 integer)): 1281 <= 163
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 163
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 163
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1239 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1239
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1239 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 163
run: clear-screen/init-fake-terminal/test-init 10: 164 => ((4 integer))
mem: ((4 integer)): 1281 <= 164
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 164
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 164
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1240 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1240
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1240 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 164
run: clear-screen/init-fake-terminal/test-init 10: 165 => ((4 integer))
mem: ((4 integer)): 1281 <= 165
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 165
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 165
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1241 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1241
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1241 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 165
run: clear-screen/init-fake-terminal/test-init 10: 166 => ((4 integer))
mem: ((4 integer)): 1281 <= 166
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 166
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 166
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1242 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1242
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1242 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 166
run: clear-screen/init-fake-terminal/test-init 10: 167 => ((4 integer))
mem: ((4 integer)): 1281 <= 167
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 167
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 167
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1243 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1243
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1243 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 167
run: clear-screen/init-fake-terminal/test-init 10: 168 => ((4 integer))
mem: ((4 integer)): 1281 <= 168
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 168
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 168
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1244 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1244
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1244 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 168
run: clear-screen/init-fake-terminal/test-init 10: 169 => ((4 integer))
mem: ((4 integer)): 1281 <= 169
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 169
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 169
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1245 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1245
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1245 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 169
run: clear-screen/init-fake-terminal/test-init 10: 170 => ((4 integer))
mem: ((4 integer)): 1281 <= 170
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 170
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 170
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1246 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1246
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1246 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 170
run: clear-screen/init-fake-terminal/test-init 10: 171 => ((4 integer))
mem: ((4 integer)): 1281 <= 171
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 171
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 171
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1247 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1247
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1247 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 171
run: clear-screen/init-fake-terminal/test-init 10: 172 => ((4 integer))
mem: ((4 integer)): 1281 <= 172
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 172
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 172
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1248 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1248
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1248 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 172
run: clear-screen/init-fake-terminal/test-init 10: 173 => ((4 integer))
mem: ((4 integer)): 1281 <= 173
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 173
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 173
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1249 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1249
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1249 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 173
run: clear-screen/init-fake-terminal/test-init 10: 174 => ((4 integer))
mem: ((4 integer)): 1281 <= 174
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 174
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 174
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1250 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1250
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1250 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 174
run: clear-screen/init-fake-terminal/test-init 10: 175 => ((4 integer))
mem: ((4 integer)): 1281 <= 175
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 175
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 175
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1251 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1251
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1251 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 175
run: clear-screen/init-fake-terminal/test-init 10: 176 => ((4 integer))
mem: ((4 integer)): 1281 <= 176
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 176
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 176
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1252 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1252
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1252 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 176
run: clear-screen/init-fake-terminal/test-init 10: 177 => ((4 integer))
mem: ((4 integer)): 1281 <= 177
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 177
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 177
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1253 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1253
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1253 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 177
run: clear-screen/init-fake-terminal/test-init 10: 178 => ((4 integer))
mem: ((4 integer)): 1281 <= 178
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 178
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 178
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1254 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1254
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1254 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 178
run: clear-screen/init-fake-terminal/test-init 10: 179 => ((4 integer))
mem: ((4 integer)): 1281 <= 179
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 179
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 179
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1255 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1255
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1255 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 179
run: clear-screen/init-fake-terminal/test-init 10: 180 => ((4 integer))
mem: ((4 integer)): 1281 <= 180
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 180
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 180
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1256 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1256
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1256 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 180
run: clear-screen/init-fake-terminal/test-init 10: 181 => ((4 integer))
mem: ((4 integer)): 1281 <= 181
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 181
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 181
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1257 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1257
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1257 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 181
run: clear-screen/init-fake-terminal/test-init 10: 182 => ((4 integer))
mem: ((4 integer)): 1281 <= 182
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 182
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 182
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1258 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1258
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1258 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 182
run: clear-screen/init-fake-terminal/test-init 10: 183 => ((4 integer))
mem: ((4 integer)): 1281 <= 183
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 183
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 183
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1259 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1259
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1259 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 183
run: clear-screen/init-fake-terminal/test-init 10: 184 => ((4 integer))
mem: ((4 integer)): 1281 <= 184
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 184
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 184
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1260 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1260
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1260 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 184
run: clear-screen/init-fake-terminal/test-init 10: 185 => ((4 integer))
mem: ((4 integer)): 1281 <= 185
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 185
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 185
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1261 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1261
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1261 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 185
run: clear-screen/init-fake-terminal/test-init 10: 186 => ((4 integer))
mem: ((4 integer)): 1281 <= 186
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 186
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 186
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1262 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1262
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1262 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 186
run: clear-screen/init-fake-terminal/test-init 10: 187 => ((4 integer))
mem: ((4 integer)): 1281 <= 187
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 187
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 187
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1263 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1263
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1263 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 187
run: clear-screen/init-fake-terminal/test-init 10: 188 => ((4 integer))
mem: ((4 integer)): 1281 <= 188
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 188
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 188
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1264 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1264
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1264 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 188
run: clear-screen/init-fake-terminal/test-init 10: 189 => ((4 integer))
mem: ((4 integer)): 1281 <= 189
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 189
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 189
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1265 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1265
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1265 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 189
run: clear-screen/init-fake-terminal/test-init 10: 190 => ((4 integer))
mem: ((4 integer)): 1281 <= 190
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 190
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 190
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1266 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1266
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1266 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 190
run: clear-screen/init-fake-terminal/test-init 10: 191 => ((4 integer))
mem: ((4 integer)): 1281 <= 191
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 191
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 191
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1267 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1267
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1267 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 191
run: clear-screen/init-fake-terminal/test-init 10: 192 => ((4 integer))
mem: ((4 integer)): 1281 <= 192
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 192
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 192
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1268 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1268
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1268 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 192
run: clear-screen/init-fake-terminal/test-init 10: 193 => ((4 integer))
mem: ((4 integer)): 1281 <= 193
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 193
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 193
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1269 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1269
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1269 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 193
run: clear-screen/init-fake-terminal/test-init 10: 194 => ((4 integer))
mem: ((4 integer)): 1281 <= 194
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 194
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 194
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1270 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1270
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1270 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 194
run: clear-screen/init-fake-terminal/test-init 10: 195 => ((4 integer))
mem: ((4 integer)): 1281 <= 195
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 195
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 195
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1271 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1271
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1271 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 195
run: clear-screen/init-fake-terminal/test-init 10: 196 => ((4 integer))
mem: ((4 integer)): 1281 <= 196
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 196
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 196
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1272 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1272
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1272 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 196
run: clear-screen/init-fake-terminal/test-init 10: 197 => ((4 integer))
mem: ((4 integer)): 1281 <= 197
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 197
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 197
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1273 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1273
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1273 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 197
run: clear-screen/init-fake-terminal/test-init 10: 198 => ((4 integer))
mem: ((4 integer)): 1281 <= 198
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 198
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 198
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1274 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1274
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1274 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 198
run: clear-screen/init-fake-terminal/test-init 10: 199 => ((4 integer))
mem: ((4 integer)): 1281 <= 199
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 199
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: nil => ((5 boolean))
mem: ((5 boolean)): 1282 <= nil
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: clear-screen/init-fake-terminal/test-init 8: (((1 byte-address)) <- ((index-address)) ((2 string-address) (deref)) ((4 integer)))
mem: ((4 integer)) => 199
array-len: ((1075 string) (raw))
mem: ((1075 integer) (raw)) => 200
run: clear-screen/init-fake-terminal/test-init 8: 1275 => ((1 byte-address))
mem: ((1 byte-address)): 1278 <= 1275
run: clear-screen/init-fake-terminal/test-init 9: (((1 byte-address) (deref)) <- ((copy)) ((  literal)))
run: clear-screen/init-fake-terminal/test-init 9: #\space => ((1 byte-address) (deref))
mem: ((1 byte-address) (deref)): 1275 <= #\space
run: clear-screen/init-fake-terminal/test-init 10: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 199
run: clear-screen/init-fake-terminal/test-init 10: 200 => ((4 integer))
mem: ((4 integer)): 1281 <= 200
run: clear-screen/init-fake-terminal/test-init 11: (((jump)) ((-6 offset)))
run: clear-screen/init-fake-terminal/test-init 6: (((5 boolean)) <- ((greater-or-equal)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 200
mem: ((3 integer)) => 200
run: clear-screen/init-fake-terminal/test-init 6: t => ((5 boolean))
mem: ((5 boolean)): 1282 <= t
run: clear-screen/init-fake-terminal/test-init 7: (((jump-if)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => t
run: clear-screen/init-fake-terminal/test-init 12: (((reply)))
run: init-fake-terminal/test-init 14: (((reply)) ((1 terminal-address)))
mem: ((1 terminal-address)) => 1070
run: test-init 1: 1070 => ((2 terminal-address) (raw))
mem: ((2 terminal-address) (raw)): 2 <= 1070
run: test-init 2: (((3 string-address) (raw)) <- ((get)) ((2 terminal-address) (raw) (deref)) ((4 offset)))
mem: ((1074 string-address) (raw)) => 1075
run: test-init 2: 1075 => ((3 string-address) (raw))
mem: ((3 string-address) (raw)): 3 <= 1075
schedule: done with routine 
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((c character)) <- ((copy)) ((a literal))) -- nil
c{0: 2 (((x tagged-value)) <- ((save-type)) ((c character))) -- nil
c{0: 3 (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((c character)) <- ((copy)) ((a literal)))
c{1: 2 ✓ (((x tagged-value)) <- ((save-type)) ((c character)))
c{1: 3 ✓ (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value)))
cn0: convert-names in send-first-key
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((c character)) <- ((copy)) ((a literal))) nil nil
cn0: checking arg ((a literal))
cn0: checking oarg ((c character))
maybe-add: ((c character))
cn0: location for oarg ((c character)): 1
cn0: (((x tagged-value)) <- ((save-type)) ((c character))) ((c 1)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking oarg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: location for oarg ((x tagged-value)): 2
cn0: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value))) ((c 1) (x 2)) nil
cn0: checking arg ((1 channel-address) (raw))
maybe-add: ((1 channel-address) (raw))
cn0: checking arg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: checking oarg ((1 channel-address) (raw) (deref))
maybe-add: ((1 channel-address) (raw) (deref))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((1 character)) <- ((copy)) ((a literal)))
cn1: (((2 tagged-value)) <- ((save-type)) ((1 character)))
cn1: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
schedule: send-first-key
run: send-first-key 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
run: send-first-key 0: 201000 => ((default-space space-address))
run: send-first-key 1: (((1 character)) <- ((copy)) ((a literal)))
run: send-first-key 1: #\a => ((1 character))
mem: ((1 character)): 201002 <= #\a
run: send-first-key 2: (((2 tagged-value)) <- ((save-type)) ((1 character)))
mem: ((1 character)) => a
run: send-first-key 2: #(tagged record (character #\a)) => ((2 tagged-value))
mem: ((2 tagged-value)): 201003 <= character
mem: ((2 tagged-value)): 201004 <= #\a
run: send-first-key 3: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
mem: ((1 channel-address) (raw)) => 1031
mem: ((2 tagged-value)) => #(tagged record (character a . nil))
run: write/send-first-key 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: write/send-first-key 0: 201031 => ((default-space space-address))
run: write/send-first-key 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 #(tagged record (character #\a . nil)))
run: write/send-first-key 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 201033 <= 1031
run: write/send-first-key 2: (((2 tagged-value)) <- ((next-input)))
arg: nil 1 (1031 #(tagged record (character #\a . nil)))
run: write/send-first-key 2: #(tagged record (character #\a . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 201034 <= character
mem: ((2 tagged-value)): 201035 <= #\a
run: write/send-first-key 3: (((4 boolean)) <- ((full?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (0 0 1034 . nil))
run: full?/write/send-first-key 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: full?/write/send-first-key 0: 201062 => ((default-space space-address))
run: full?/write/send-first-key 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 0 1034 . nil)))
run: full?/write/send-first-key 1: #(tagged record (0 0 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 201064 <= 0
mem: ((1 channel)): 201065 <= 0
mem: ((1 channel)): 201066 <= 1034
run: full?/write/send-first-key 2: (((4 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((201065 integer) (raw)) => 0
run: full?/write/send-first-key 2: 0 => ((4 integer))
mem: ((4 integer)): 201067 <= 0
run: full?/write/send-first-key 3: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 0
run: full?/write/send-first-key 3: 1 => ((4 integer))
mem: ((4 integer)): 201067 <= 1
run: full?/write/send-first-key 4: (((5 integer)) <- ((capacity)) ((1 channel)))
mem: ((1 channel)) => #(tagged record (0 0 1034 . nil))
run: capacity/full?/write/send-first-key 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: capacity/full?/write/send-first-key 0: 201093 => ((default-space space-address))
run: capacity/full?/write/send-first-key 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 0 1034 . nil)))
run: capacity/full?/write/send-first-key 1: #(tagged record (0 0 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 201095 <= 0
mem: ((1 channel)): 201096 <= 0
mem: ((1 channel)): 201097 <= 1034
run: capacity/full?/write/send-first-key 2: (((4 tagged-value-array-address)) <- ((get)) ((1 channel)) ((2 offset)))
mem: ((201097 tagged-value-array-address) (raw)) => 1034
run: capacity/full?/write/send-first-key 2: 1034 => ((4 tagged-value-array-address))
mem: ((4 tagged-value-array-address)): 201098 <= 1034
run: capacity/full?/write/send-first-key 3: (((5 integer)) <- ((length)) ((4 tagged-value-array-address) (deref)))
array-len: ((4 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: capacity/full?/write/send-first-key 3: 2 => ((5 integer))
mem: ((5 integer)): 201099 <= 2
run: capacity/full?/write/send-first-key 4: (((reply)) ((5 integer)))
mem: ((5 integer)) => 2
run: full?/write/send-first-key 4: 2 => ((5 integer))
mem: ((5 integer)): 201068 <= 2
run: full?/write/send-first-key 5: (((6 boolean)) <- ((less-than)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 1
mem: ((5 integer)) => 2
run: full?/write/send-first-key 5: t => ((6 boolean))
mem: ((6 boolean)): 201069 <= t
run: full?/write/send-first-key 6: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: full?/write/send-first-key 8: (((7 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((201064 integer) (raw)) => 0
run: full?/write/send-first-key 8: 0 => ((7 integer))
mem: ((7 integer)): 201070 <= 0
run: full?/write/send-first-key 9: (((8 boolean)) <- ((equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 1
run: full?/write/send-first-key 9: nil => ((8 boolean))
mem: ((8 boolean)): 201071 <= nil
run: full?/write/send-first-key 10: (((reply)) ((8 boolean)))
mem: ((8 boolean)) => nil
run: write/send-first-key 3: nil => ((4 boolean))
mem: ((4 boolean)): 201036 <= nil
run: write/send-first-key 4: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => nil
run: write/send-first-key 7: (((6 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: write/send-first-key 7: 1034 => ((6 tagged-value-array-address))
mem: ((6 tagged-value-array-address)): 201038 <= 1034
run: write/send-first-key 8: (((7 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: write/send-first-key 8: 1032 => ((7 integer-address))
mem: ((7 integer-address)): 201039 <= 1032
run: write/send-first-key 9: (((8 tagged-value-address)) <- ((index-address)) ((6 tagged-value-array-address) (deref)) ((7 integer-address) (deref)))
mem: ((7 integer-address) (deref)) => 0
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
run: write/send-first-key 9: 1035 => ((8 tagged-value-address))
mem: ((8 tagged-value-address)): 201040 <= 1035
run: write/send-first-key 10: (((8 tagged-value-address) (deref)) <- ((copy)) ((2 tagged-value)))
mem: ((2 tagged-value)) => #(tagged record (character a . nil))
run: write/send-first-key 10: #(tagged record (character #\a . nil)) => ((8 tagged-value-address) (deref))
mem: ((8 tagged-value-address) (deref)): 1035 <= character
mem: ((8 tagged-value-address) (deref)): 1036 <= #\a
run: write/send-first-key 11: (((7 integer-address) (deref)) <- ((add)) ((7 integer-address) (deref)) ((1 literal)))
mem: ((7 integer-address) (deref)) => 0
run: write/send-first-key 11: 1 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 1
run: write/send-first-key 12: (((9 integer)) <- ((length)) ((6 tagged-value-array-address) (deref)))
array-len: ((6 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: write/send-first-key 12: 2 => ((9 integer))
mem: ((9 integer)): 201041 <= 2
run: write/send-first-key 13: (((10 boolean)) <- ((less-than)) ((7 integer-address) (deref)) ((9 integer)))
mem: ((7 integer-address) (deref)) => 1
mem: ((9 integer)) => 2
run: write/send-first-key 13: t => ((10 boolean))
mem: ((10 boolean)): 201042 <= t
run: write/send-first-key 14: (((jump-if)) ((10 boolean)) ((1 offset)))
mem: ((10 boolean)) => t
run: write/send-first-key 16: (((reply)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (0 1 1034 . nil))
run: send-first-key 3: #(tagged record (0 1 1034 . nil)) => ((1 channel-address) (raw) (deref))
mem: ((1 channel-address) (raw) (deref)): 1031 <= 0
mem: ((1 channel-address) (raw) (deref)): 1032 <= 1
mem: ((1 channel-address) (raw) (deref)): 1033 <= 1034
schedule: done with routine 
schedule: read-move
run: read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read-move 0: 101000 => ((default-space space-address))
run: read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 1070)
run: read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101002 <= 1031
run: read-move 2: (((2 integer)) <- ((read-file)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read-file/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read-file/read-move 0: 101031 => ((default-space space-address))
run: read-file/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read-file/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101033 <= 1031
run: read-file/read-move 2: (((2 tagged-value)) ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read/read-file/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read/read-file/read-move 0: 101062 => ((default-space space-address))
run: read/read-file/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read/read-file/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101064 <= 1031
run: read/read-file/read-move 2: (((2 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (0 1 1034 . nil))
run: empty?/read/read-file/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: empty?/read/read-file/read-move 0: 101093 => ((default-space space-address))
run: empty?/read/read-file/read-move 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 1 1034 . nil)))
run: empty?/read/read-file/read-move 1: #(tagged record (0 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 101095 <= 0
mem: ((1 channel)): 101096 <= 1
mem: ((1 channel)): 101097 <= 1034
run: empty?/read/read-file/read-move 2: (((4 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((101095 integer) (raw)) => 0
run: empty?/read/read-file/read-move 2: 0 => ((4 integer))
mem: ((4 integer)): 101098 <= 0
run: empty?/read/read-file/read-move 3: (((5 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((101096 integer) (raw)) => 1
run: empty?/read/read-file/read-move 3: 1 => ((5 integer))
mem: ((5 integer)): 101099 <= 1
run: empty?/read/read-file/read-move 4: (((6 boolean)) <- ((equal)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 0
mem: ((5 integer)) => 1
run: empty?/read/read-file/read-move 4: nil => ((6 boolean))
mem: ((6 boolean)): 101100 <= nil
run: empty?/read/read-file/read-move 5: (((reply)) ((6 boolean)))
mem: ((6 boolean)) => nil
run: read/read-file/read-move 2: nil => ((2 boolean))
mem: ((2 boolean)): 101065 <= nil
run: read/read-file/read-move 3: (((jump-unless)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => nil
run: read/read-file/read-move 6: (((4 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: read/read-file/read-move 6: 1031 => ((4 integer-address))
mem: ((4 integer-address)): 101067 <= 1031
run: read/read-file/read-move 7: (((5 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: read/read-file/read-move 7: 1034 => ((5 tagged-value-array-address))
mem: ((5 tagged-value-array-address)): 101068 <= 1034
run: read/read-file/read-move 8: (((6 tagged-value)) <- ((index)) ((5 tagged-value-array-address) (deref)) ((4 integer-address) (deref)))
mem: ((4 integer-address) (deref)) => 0
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
mem: ((1035 tagged-value) (raw)) => #(tagged record (character a . nil))
run: read/read-file/read-move 8: #(tagged record (character #\a . nil)) => ((6 tagged-value))
mem: ((6 tagged-value)): 101069 <= character
mem: ((6 tagged-value)): 101070 <= #\a
run: read/read-file/read-move 9: (((4 integer-address) (deref)) <- ((add)) ((4 integer-address) (deref)) ((1 literal)))
mem: ((4 integer-address) (deref)) => 0
run: read/read-file/read-move 9: 1 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1031 <= 1
run: read/read-file/read-move 10: (((8 integer)) <- ((length)) ((5 tagged-value-array-address) (deref)))
array-len: ((5 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: read/read-file/read-move 10: 2 => ((8 integer))
mem: ((8 integer)): 101071 <= 2
run: read/read-file/read-move 11: (((9 boolean)) <- ((less-than)) ((4 integer-address) (deref)) ((8 integer)))
mem: ((4 integer-address) (deref)) => 1
mem: ((8 integer)) => 2
run: read/read-file/read-move 11: t => ((9 boolean))
mem: ((9 boolean)): 101072 <= t
run: read/read-file/read-move 12: (((jump-if)) ((9 boolean)) ((1 offset)))
mem: ((9 boolean)) => t
run: read/read-file/read-move 14: (((reply)) ((6 tagged-value)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((6 tagged-value)) => #(tagged record (character a . nil))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (1 1 1034 . nil))
run: read-file/read-move 2: #(tagged record (character #\a . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 101034 <= character
mem: ((2 tagged-value)): 101035 <= #\a
run: read-file/read-move 2: #(tagged record (1 1 1034 . nil)) => ((1 channel-address) (deref))
mem: ((1 channel-address) (deref)): 1031 <= 1
mem: ((1 channel-address) (deref)): 1032 <= 1
mem: ((1 channel-address) (deref)): 1033 <= 1034
run: read-file/read-move 3: (((4 character)) <- ((copy)) ((a literal)))
run: read-file/read-move 3: #\a => ((4 character))
mem: ((4 character)): 101036 <= #\a
run: read-file/read-move 4: (((5 integer)) <- ((character-to-integer)) ((4 character)))
mem: ((4 character)) => a
run: read-file/read-move 4: 97 => ((5 integer))
mem: ((5 integer)): 101037 <= 97
run: read-file/read-move 5: (((6 character)) <- ((maybe-coerce)) ((2 tagged-value)) ((character literal)))
mem: ((2 tagged-value)) => #(tagged record (character a . nil))
run: maybe-coerce/read-file/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/read-file/read-move 0: 101124 => ((default-space space-address))
run: maybe-coerce/read-file/read-move 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/read-file/read-move 1: 101155 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 101126 <= 101155
run: maybe-coerce/read-file/read-move 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (character #\a . nil)) character)
run: maybe-coerce/read-file/read-move 2: #(tagged record (character #\a . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 101155 <= character
mem: ((1 tagged-value-address) (deref)): 101156 <= #\a
run: maybe-coerce/read-file/read-move 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (character #\a . nil)) character)
run: maybe-coerce/read-file/read-move 3: character => ((2 type))
mem: ((2 type)): 101127 <= character
run: maybe-coerce/read-file/read-move 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((101155 type) (raw)) => character
run: maybe-coerce/read-file/read-move 4: character => ((3 type))
mem: ((3 type)): 101128 <= character
run: maybe-coerce/read-file/read-move 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => character
mem: ((2 type)) => character
run: maybe-coerce/read-file/read-move 5: t => ((4 boolean))
mem: ((4 boolean)): 101129 <= t
run: maybe-coerce/read-file/read-move 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => t
run: maybe-coerce/read-file/read-move 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
mem: ((101156 location) (raw)) => a
run: maybe-coerce/read-file/read-move 8: #\a => ((5 location))
mem: ((5 location)): 101130 <= #\a
run: maybe-coerce/read-file/read-move 9: (((reply)) ((5 location)) ((4 boolean)))
mem: ((5 location)) => a
mem: ((4 boolean)) => t
run: read-file/read-move 5: #\a => ((6 character))
mem: ((6 character)): 101038 <= #\a
run: read-file/read-move 6: (((7 boolean)) <- ((equal)) ((6 character)) ((q literal)))
mem: ((6 character)) => a
run: read-file/read-move 6: nil => ((7 boolean))
mem: ((7 boolean)): 101039 <= nil
run: read-file/read-move 7: (((jump-unless)) ((7 boolean)) ((1 offset)))
mem: ((7 boolean)) => nil
run: read-file/read-move 9: (((8 integer)) <- ((character-to-integer)) ((6 character)))
mem: ((6 character)) => a
run: read-file/read-move 9: 97 => ((8 integer))
mem: ((8 integer)): 101040 <= 97
run: read-file/read-move 10: (((8 integer)) <- ((subtract)) ((8 integer)) ((5 integer)))
mem: ((8 integer)) => 97
mem: ((5 integer)) => 97
run: read-file/read-move 10: 0 => ((8 integer))
mem: ((8 integer)): 101040 <= 0
run: read-file/read-move 11: (((9 boolean)) <- ((greater-or-equal)) ((8 integer)) ((0 literal)))
mem: ((8 integer)) => 0
run: read-file/read-move 11: t => ((9 boolean))
mem: ((9 boolean)): 101041 <= t
run: read-file/read-move 12: (((assert)) ((9 boolean)) ((file too low literal)))
mem: ((9 boolean)) => t
run: read-file/read-move 13: (((10 boolean)) <- ((lesser-or-equal)) ((8 integer)) ((7 literal)))
mem: ((8 integer)) => 0
run: read-file/read-move 13: t => ((10 boolean))
mem: ((10 boolean)): 101042 <= t
run: read-file/read-move 14: (((assert)) ((10 boolean)) ((file too high literal)))
mem: ((10 boolean)) => t
run: read-file/read-move 15: (((reply)) ((8 integer)))
mem: ((8 integer)) => 0
run: read-move 2: 0 => ((2 integer))
mem: ((2 integer)): 101003 <= 0
run: read-move 3: (((jump-if)) ((2 integer)) ((1 offset)))
mem: ((2 integer)) => 0
run: read-move 5: (((3 integer)) <- ((read-rank)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read-rank/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read-rank/read-move 0: 101157 => ((default-space space-address))
run: read-rank/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read-rank/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101159 <= 1031
run: read-rank/read-move 2: (((2 tagged-value)) ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read/read-rank/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read/read-rank/read-move 0: 101188 => ((default-space space-address))
run: read/read-rank/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read/read-rank/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101190 <= 1031
run: read/read-rank/read-move 2: (((2 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 1 1034 . nil))
run: empty?/read/read-rank/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: empty?/read/read-rank/read-move 0: 101219 => ((default-space space-address))
run: empty?/read/read-rank/read-move 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: empty?/read/read-rank/read-move 1: #(tagged record (1 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 101221 <= 1
mem: ((1 channel)): 101222 <= 1
mem: ((1 channel)): 101223 <= 1034
run: empty?/read/read-rank/read-move 2: (((4 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((101221 integer) (raw)) => 1
run: empty?/read/read-rank/read-move 2: 1 => ((4 integer))
mem: ((4 integer)): 101224 <= 1
run: empty?/read/read-rank/read-move 3: (((5 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((101222 integer) (raw)) => 1
run: empty?/read/read-rank/read-move 3: 1 => ((5 integer))
mem: ((5 integer)): 101225 <= 1
run: empty?/read/read-rank/read-move 4: (((6 boolean)) <- ((equal)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 1
mem: ((5 integer)) => 1
run: empty?/read/read-rank/read-move 4: t => ((6 boolean))
mem: ((6 boolean)): 101226 <= t
run: empty?/read/read-rank/read-move 5: (((reply)) ((6 boolean)))
mem: ((6 boolean)) => t
run: read/read-rank/read-move 2: t => ((2 boolean))
mem: ((2 boolean)): 101191 <= t
run: read/read-rank/read-move 3: (((jump-unless)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => t
run: read/read-rank/read-move 4: (((3 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: read/read-rank/read-move 4: 1032 => ((3 integer-address))
mem: ((3 integer-address)): 101192 <= 1032
run: read/read-rank/read-move 5: (((sleep)) ((until-location-changes literal)) ((3 integer-address) (deref)))
mem: ((3 integer-address) (deref)) => 1
schedule: pushing read/read-rank/read-move to sleep queue
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((c character)) <- ((copy)) ((2 literal))) -- nil
c{0: 2 (((x tagged-value)) <- ((save-type)) ((c character))) -- nil
c{0: 3 (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value))) -- nil
c{0: 4 (((c character)) <- ((copy)) ((- literal))) -- nil
c{0: 5 (((x tagged-value)) <- ((save-type)) ((c character))) -- nil
c{0: 6 (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value))) -- nil
c{0: 7 (((c character)) <- ((copy)) ((a literal))) -- nil
c{0: 8 (((x tagged-value)) <- ((save-type)) ((c character))) -- nil
c{0: 9 (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value))) -- nil
c{0: 10 (((c character)) <- ((copy)) ((4 literal))) -- nil
c{0: 11 (((x tagged-value)) <- ((save-type)) ((c character))) -- nil
c{0: 12 (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((c character)) <- ((copy)) ((2 literal)))
c{1: 2 ✓ (((x tagged-value)) <- ((save-type)) ((c character)))
c{1: 3 ✓ (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value)))
c{1: 4 ✓ (((c character)) <- ((copy)) ((- literal)))
c{1: 5 ✓ (((x tagged-value)) <- ((save-type)) ((c character)))
c{1: 6 ✓ (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value)))
c{1: 7 ✓ (((c character)) <- ((copy)) ((a literal)))
c{1: 8 ✓ (((x tagged-value)) <- ((save-type)) ((c character)))
c{1: 9 ✓ (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value)))
c{1: 10 ✓ (((c character)) <- ((copy)) ((4 literal)))
c{1: 11 ✓ (((x tagged-value)) <- ((save-type)) ((c character)))
c{1: 12 ✓ (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value)))
cn0: convert-names in send-more-keys
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((c character)) <- ((copy)) ((2 literal))) nil nil
cn0: checking arg ((2 literal))
cn0: checking oarg ((c character))
maybe-add: ((c character))
cn0: location for oarg ((c character)): 1
cn0: (((x tagged-value)) <- ((save-type)) ((c character))) ((c 1)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking oarg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: location for oarg ((x tagged-value)): 2
cn0: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value))) ((c 1) (x 2)) nil
cn0: checking arg ((1 channel-address) (raw))
maybe-add: ((1 channel-address) (raw))
cn0: checking arg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: checking oarg ((1 channel-address) (raw) (deref))
maybe-add: ((1 channel-address) (raw) (deref))
cn0: (((c character)) <- ((copy)) ((- literal))) ((c 1) (x 2)) nil
cn0: checking arg ((- literal))
cn0: checking oarg ((c character))
maybe-add: ((c character))
cn0: (((x tagged-value)) <- ((save-type)) ((c character))) ((c 1) (x 2)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking oarg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value))) ((c 1) (x 2)) nil
cn0: checking arg ((1 channel-address) (raw))
maybe-add: ((1 channel-address) (raw))
cn0: checking arg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: checking oarg ((1 channel-address) (raw) (deref))
maybe-add: ((1 channel-address) (raw) (deref))
cn0: (((c character)) <- ((copy)) ((a literal))) ((c 1) (x 2)) nil
cn0: checking arg ((a literal))
cn0: checking oarg ((c character))
maybe-add: ((c character))
cn0: (((x tagged-value)) <- ((save-type)) ((c character))) ((c 1) (x 2)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking oarg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value))) ((c 1) (x 2)) nil
cn0: checking arg ((1 channel-address) (raw))
maybe-add: ((1 channel-address) (raw))
cn0: checking arg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: checking oarg ((1 channel-address) (raw) (deref))
maybe-add: ((1 channel-address) (raw) (deref))
cn0: (((c character)) <- ((copy)) ((4 literal))) ((c 1) (x 2)) nil
cn0: checking arg ((4 literal))
cn0: checking oarg ((c character))
maybe-add: ((c character))
cn0: (((x tagged-value)) <- ((save-type)) ((c character))) ((c 1) (x 2)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking oarg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value))) ((c 1) (x 2)) nil
cn0: checking arg ((1 channel-address) (raw))
maybe-add: ((1 channel-address) (raw))
cn0: checking arg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: checking oarg ((1 channel-address) (raw) (deref))
maybe-add: ((1 channel-address) (raw) (deref))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((1 character)) <- ((copy)) ((2 literal)))
cn1: (((2 tagged-value)) <- ((save-type)) ((1 character)))
cn1: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
cn1: (((1 character)) <- ((copy)) ((- literal)))
cn1: (((2 tagged-value)) <- ((save-type)) ((1 character)))
cn1: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
cn1: (((1 character)) <- ((copy)) ((a literal)))
cn1: (((2 tagged-value)) <- ((save-type)) ((1 character)))
cn1: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
cn1: (((1 character)) <- ((copy)) ((4 literal)))
cn1: (((2 tagged-value)) <- ((save-type)) ((1 character)))
cn1: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
schedule: read-rank/read-move
run: read-rank/read-move 2: (((2 tagged-value)) ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read/read-rank/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read/read-rank/read-move 0: 101250 => ((default-space space-address))
run: read/read-rank/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read/read-rank/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101252 <= 1031
run: read/read-rank/read-move 2: (((2 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 1 1034 . nil))
run: empty?/read/read-rank/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: empty?/read/read-rank/read-move 0: 101281 => ((default-space space-address))
run: empty?/read/read-rank/read-move 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: empty?/read/read-rank/read-move 1: #(tagged record (1 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 101283 <= 1
mem: ((1 channel)): 101284 <= 1
mem: ((1 channel)): 101285 <= 1034
run: empty?/read/read-rank/read-move 2: (((4 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((101283 integer) (raw)) => 1
run: empty?/read/read-rank/read-move 2: 1 => ((4 integer))
mem: ((4 integer)): 101286 <= 1
run: empty?/read/read-rank/read-move 3: (((5 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((101284 integer) (raw)) => 1
run: empty?/read/read-rank/read-move 3: 1 => ((5 integer))
mem: ((5 integer)): 101287 <= 1
run: empty?/read/read-rank/read-move 4: (((6 boolean)) <- ((equal)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 1
mem: ((5 integer)) => 1
run: empty?/read/read-rank/read-move 4: t => ((6 boolean))
mem: ((6 boolean)): 101288 <= t
run: empty?/read/read-rank/read-move 5: (((reply)) ((6 boolean)))
mem: ((6 boolean)) => t
run: read/read-rank/read-move 2: t => ((2 boolean))
mem: ((2 boolean)): 101253 <= t
run: read/read-rank/read-move 3: (((jump-unless)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => t
run: read/read-rank/read-move 4: (((3 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: read/read-rank/read-move 4: 1032 => ((3 integer-address))
mem: ((3 integer-address)): 101254 <= 1032
run: read/read-rank/read-move 5: (((sleep)) ((until-location-changes literal)) ((3 integer-address) (deref)))
mem: ((3 integer-address) (deref)) => 1
schedule: pushing read/read-rank/read-move to sleep queue
schedule: send-more-keys
run: send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
run: send-more-keys 0: 301000 => ((default-space space-address))
run: send-more-keys 1: (((1 character)) <- ((copy)) ((2 literal)))
run: send-more-keys 1: #\2 => ((1 character))
mem: ((1 character)): 301002 <= #\2
run: send-more-keys 2: (((2 tagged-value)) <- ((save-type)) ((1 character)))
mem: ((1 character)) => 2
run: send-more-keys 2: #(tagged record (character #\2)) => ((2 tagged-value))
mem: ((2 tagged-value)): 301003 <= character
mem: ((2 tagged-value)): 301004 <= #\2
run: send-more-keys 3: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
mem: ((1 channel-address) (raw)) => 1031
mem: ((2 tagged-value)) => #(tagged record (character 2 . nil))
run: write/send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: write/send-more-keys 0: 301031 => ((default-space space-address))
run: write/send-more-keys 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 #(tagged record (character #\2 . nil)))
run: write/send-more-keys 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 301033 <= 1031
run: write/send-more-keys 2: (((2 tagged-value)) <- ((next-input)))
arg: nil 1 (1031 #(tagged record (character #\2 . nil)))
run: write/send-more-keys 2: #(tagged record (character #\2 . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 301034 <= character
mem: ((2 tagged-value)): 301035 <= #\2
run: write/send-more-keys 3: (((4 boolean)) <- ((full?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 1 1034 . nil))
run: full?/write/send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: full?/write/send-more-keys 0: 301062 => ((default-space space-address))
run: full?/write/send-more-keys 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: full?/write/send-more-keys 1: #(tagged record (1 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 301064 <= 1
mem: ((1 channel)): 301065 <= 1
mem: ((1 channel)): 301066 <= 1034
run: full?/write/send-more-keys 2: (((4 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((301065 integer) (raw)) => 1
run: full?/write/send-more-keys 2: 1 => ((4 integer))
mem: ((4 integer)): 301067 <= 1
run: full?/write/send-more-keys 3: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 1
run: full?/write/send-more-keys 3: 2 => ((4 integer))
mem: ((4 integer)): 301067 <= 2
run: full?/write/send-more-keys 4: (((5 integer)) <- ((capacity)) ((1 channel)))
mem: ((1 channel)) => #(tagged record (1 1 1034 . nil))
run: capacity/full?/write/send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: capacity/full?/write/send-more-keys 0: 301093 => ((default-space space-address))
run: capacity/full?/write/send-more-keys 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: capacity/full?/write/send-more-keys 1: #(tagged record (1 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 301095 <= 1
mem: ((1 channel)): 301096 <= 1
mem: ((1 channel)): 301097 <= 1034
run: capacity/full?/write/send-more-keys 2: (((4 tagged-value-array-address)) <- ((get)) ((1 channel)) ((2 offset)))
mem: ((301097 tagged-value-array-address) (raw)) => 1034
run: capacity/full?/write/send-more-keys 2: 1034 => ((4 tagged-value-array-address))
mem: ((4 tagged-value-array-address)): 301098 <= 1034
run: capacity/full?/write/send-more-keys 3: (((5 integer)) <- ((length)) ((4 tagged-value-array-address) (deref)))
array-len: ((4 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: capacity/full?/write/send-more-keys 3: 2 => ((5 integer))
mem: ((5 integer)): 301099 <= 2
run: capacity/full?/write/send-more-keys 4: (((reply)) ((5 integer)))
mem: ((5 integer)) => 2
run: full?/write/send-more-keys 4: 2 => ((5 integer))
mem: ((5 integer)): 301068 <= 2
run: full?/write/send-more-keys 5: (((6 boolean)) <- ((less-than)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 2
mem: ((5 integer)) => 2
run: full?/write/send-more-keys 5: nil => ((6 boolean))
mem: ((6 boolean)): 301069 <= nil
run: full?/write/send-more-keys 6: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => nil
run: full?/write/send-more-keys 7: (((4 integer)) <- ((copy)) ((0 literal)))
run: full?/write/send-more-keys 7: 0 => ((4 integer))
mem: ((4 integer)): 301067 <= 0
run: full?/write/send-more-keys 8: (((7 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((301064 integer) (raw)) => 1
run: full?/write/send-more-keys 8: 1 => ((7 integer))
mem: ((7 integer)): 301070 <= 1
run: full?/write/send-more-keys 9: (((8 boolean)) <- ((equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 1
mem: ((4 integer)) => 0
run: full?/write/send-more-keys 9: nil => ((8 boolean))
mem: ((8 boolean)): 301071 <= nil
run: full?/write/send-more-keys 10: (((reply)) ((8 boolean)))
mem: ((8 boolean)) => nil
run: write/send-more-keys 3: nil => ((4 boolean))
mem: ((4 boolean)): 301036 <= nil
run: write/send-more-keys 4: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => nil
run: write/send-more-keys 7: (((6 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: write/send-more-keys 7: 1034 => ((6 tagged-value-array-address))
mem: ((6 tagged-value-array-address)): 301038 <= 1034
run: write/send-more-keys 8: (((7 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: write/send-more-keys 8: 1032 => ((7 integer-address))
mem: ((7 integer-address)): 301039 <= 1032
run: write/send-more-keys 9: (((8 tagged-value-address)) <- ((index-address)) ((6 tagged-value-array-address) (deref)) ((7 integer-address) (deref)))
mem: ((7 integer-address) (deref)) => 1
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
run: write/send-more-keys 9: 1037 => ((8 tagged-value-address))
mem: ((8 tagged-value-address)): 301040 <= 1037
run: write/send-more-keys 10: (((8 tagged-value-address) (deref)) <- ((copy)) ((2 tagged-value)))
mem: ((2 tagged-value)) => #(tagged record (character 2 . nil))
run: write/send-more-keys 10: #(tagged record (character #\2 . nil)) => ((8 tagged-value-address) (deref))
mem: ((8 tagged-value-address) (deref)): 1037 <= character
mem: ((8 tagged-value-address) (deref)): 1038 <= #\2
run: write/send-more-keys 11: (((7 integer-address) (deref)) <- ((add)) ((7 integer-address) (deref)) ((1 literal)))
mem: ((7 integer-address) (deref)) => 1
run: write/send-more-keys 11: 2 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 2
run: write/send-more-keys 12: (((9 integer)) <- ((length)) ((6 tagged-value-array-address) (deref)))
array-len: ((6 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: write/send-more-keys 12: 2 => ((9 integer))
mem: ((9 integer)): 301041 <= 2
run: write/send-more-keys 13: (((10 boolean)) <- ((less-than)) ((7 integer-address) (deref)) ((9 integer)))
mem: ((7 integer-address) (deref)) => 2
mem: ((9 integer)) => 2
run: write/send-more-keys 13: nil => ((10 boolean))
mem: ((10 boolean)): 301042 <= nil
run: write/send-more-keys 14: (((jump-if)) ((10 boolean)) ((1 offset)))
mem: ((10 boolean)) => nil
run: write/send-more-keys 15: (((7 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: write/send-more-keys 15: 0 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 0
run: write/send-more-keys 16: (((reply)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (1 0 1034 . nil))
run: send-more-keys 3: #(tagged record (1 0 1034 . nil)) => ((1 channel-address) (raw) (deref))
mem: ((1 channel-address) (raw) (deref)): 1031 <= 1
mem: ((1 channel-address) (raw) (deref)): 1032 <= 0
mem: ((1 channel-address) (raw) (deref)): 1033 <= 1034
run: send-more-keys 4: (((1 character)) <- ((copy)) ((- literal)))
run: send-more-keys 4: #\- => ((1 character))
mem: ((1 character)): 301002 <= #\-
run: send-more-keys 5: (((2 tagged-value)) <- ((save-type)) ((1 character)))
mem: ((1 character)) => -
run: send-more-keys 5: #(tagged record (character #\-)) => ((2 tagged-value))
mem: ((2 tagged-value)): 301003 <= character
mem: ((2 tagged-value)): 301004 <= #\-
run: send-more-keys 6: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
mem: ((1 channel-address) (raw)) => 1031
mem: ((2 tagged-value)) => #(tagged record (character - . nil))
run: write/send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: write/send-more-keys 0: 301124 => ((default-space space-address))
run: write/send-more-keys 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 #(tagged record (character #\- . nil)))
run: write/send-more-keys 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 301126 <= 1031
run: write/send-more-keys 2: (((2 tagged-value)) <- ((next-input)))
arg: nil 1 (1031 #(tagged record (character #\- . nil)))
run: write/send-more-keys 2: #(tagged record (character #\- . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 301127 <= character
mem: ((2 tagged-value)): 301128 <= #\-
run: write/send-more-keys 3: (((4 boolean)) <- ((full?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 0 1034 . nil))
run: full?/write/send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: full?/write/send-more-keys 0: 301155 => ((default-space space-address))
run: full?/write/send-more-keys 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 0 1034 . nil)))
run: full?/write/send-more-keys 1: #(tagged record (1 0 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 301157 <= 1
mem: ((1 channel)): 301158 <= 0
mem: ((1 channel)): 301159 <= 1034
run: full?/write/send-more-keys 2: (((4 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((301158 integer) (raw)) => 0
run: full?/write/send-more-keys 2: 0 => ((4 integer))
mem: ((4 integer)): 301160 <= 0
run: full?/write/send-more-keys 3: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 0
run: full?/write/send-more-keys 3: 1 => ((4 integer))
mem: ((4 integer)): 301160 <= 1
run: full?/write/send-more-keys 4: (((5 integer)) <- ((capacity)) ((1 channel)))
mem: ((1 channel)) => #(tagged record (1 0 1034 . nil))
run: capacity/full?/write/send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: capacity/full?/write/send-more-keys 0: 301186 => ((default-space space-address))
run: capacity/full?/write/send-more-keys 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 0 1034 . nil)))
run: capacity/full?/write/send-more-keys 1: #(tagged record (1 0 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 301188 <= 1
mem: ((1 channel)): 301189 <= 0
mem: ((1 channel)): 301190 <= 1034
run: capacity/full?/write/send-more-keys 2: (((4 tagged-value-array-address)) <- ((get)) ((1 channel)) ((2 offset)))
mem: ((301190 tagged-value-array-address) (raw)) => 1034
run: capacity/full?/write/send-more-keys 2: 1034 => ((4 tagged-value-array-address))
mem: ((4 tagged-value-array-address)): 301191 <= 1034
run: capacity/full?/write/send-more-keys 3: (((5 integer)) <- ((length)) ((4 tagged-value-array-address) (deref)))
array-len: ((4 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: capacity/full?/write/send-more-keys 3: 2 => ((5 integer))
mem: ((5 integer)): 301192 <= 2
run: capacity/full?/write/send-more-keys 4: (((reply)) ((5 integer)))
mem: ((5 integer)) => 2
run: full?/write/send-more-keys 4: 2 => ((5 integer))
mem: ((5 integer)): 301161 <= 2
run: full?/write/send-more-keys 5: (((6 boolean)) <- ((less-than)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 1
mem: ((5 integer)) => 2
run: full?/write/send-more-keys 5: t => ((6 boolean))
mem: ((6 boolean)): 301162 <= t
run: full?/write/send-more-keys 6: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: full?/write/send-more-keys 8: (((7 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((301157 integer) (raw)) => 1
run: full?/write/send-more-keys 8: 1 => ((7 integer))
mem: ((7 integer)): 301163 <= 1
run: full?/write/send-more-keys 9: (((8 boolean)) <- ((equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 1
mem: ((4 integer)) => 1
run: full?/write/send-more-keys 9: t => ((8 boolean))
mem: ((8 boolean)): 301164 <= t
run: full?/write/send-more-keys 10: (((reply)) ((8 boolean)))
mem: ((8 boolean)) => t
run: write/send-more-keys 3: t => ((4 boolean))
mem: ((4 boolean)): 301129 <= t
run: write/send-more-keys 4: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => t
run: write/send-more-keys 5: (((5 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: write/send-more-keys 5: 1031 => ((5 integer-address))
mem: ((5 integer-address)): 301130 <= 1031
run: write/send-more-keys 6: (((sleep)) ((until-location-changes literal)) ((5 integer-address) (deref)))
mem: ((5 integer-address) (deref)) => 1
schedule: pushing write/send-more-keys to sleep queue
schedule: waking up read/read-rank/read-move
schedule: read/read-rank/read-move
run: read/read-rank/read-move 6: (((4 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: read/read-rank/read-move 6: 1031 => ((4 integer-address))
mem: ((4 integer-address)): 101255 <= 1031
run: read/read-rank/read-move 7: (((5 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: read/read-rank/read-move 7: 1034 => ((5 tagged-value-array-address))
mem: ((5 tagged-value-array-address)): 101256 <= 1034
run: read/read-rank/read-move 8: (((6 tagged-value)) <- ((index)) ((5 tagged-value-array-address) (deref)) ((4 integer-address) (deref)))
mem: ((4 integer-address) (deref)) => 1
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
mem: ((1037 tagged-value) (raw)) => #(tagged record (character 2 . nil))
run: read/read-rank/read-move 8: #(tagged record (character #\2 . nil)) => ((6 tagged-value))
mem: ((6 tagged-value)): 101257 <= character
mem: ((6 tagged-value)): 101258 <= #\2
run: read/read-rank/read-move 9: (((4 integer-address) (deref)) <- ((add)) ((4 integer-address) (deref)) ((1 literal)))
mem: ((4 integer-address) (deref)) => 1
run: read/read-rank/read-move 9: 2 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1031 <= 2
run: read/read-rank/read-move 10: (((8 integer)) <- ((length)) ((5 tagged-value-array-address) (deref)))
array-len: ((5 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: read/read-rank/read-move 10: 2 => ((8 integer))
mem: ((8 integer)): 101259 <= 2
run: read/read-rank/read-move 11: (((9 boolean)) <- ((less-than)) ((4 integer-address) (deref)) ((8 integer)))
mem: ((4 integer-address) (deref)) => 2
mem: ((8 integer)) => 2
run: read/read-rank/read-move 11: nil => ((9 boolean))
mem: ((9 boolean)): 101260 <= nil
run: read/read-rank/read-move 12: (((jump-if)) ((9 boolean)) ((1 offset)))
mem: ((9 boolean)) => nil
run: read/read-rank/read-move 13: (((4 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: read/read-rank/read-move 13: 0 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1031 <= 0
run: read/read-rank/read-move 14: (((reply)) ((6 tagged-value)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((6 tagged-value)) => #(tagged record (character 2 . nil))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (0 0 1034 . nil))
run: read-rank/read-move 2: #(tagged record (character #\2 . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 101160 <= character
mem: ((2 tagged-value)): 101161 <= #\2
run: read-rank/read-move 2: #(tagged record (0 0 1034 . nil)) => ((1 channel-address) (deref))
mem: ((1 channel-address) (deref)): 1031 <= 0
mem: ((1 channel-address) (deref)): 1032 <= 0
mem: ((1 channel-address) (deref)): 1033 <= 1034
run: read-rank/read-move 3: (((4 character)) <- ((maybe-coerce)) ((2 tagged-value)) ((character literal)))
mem: ((2 tagged-value)) => #(tagged record (character 2 . nil))
run: maybe-coerce/read-rank/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/read-rank/read-move 0: 101312 => ((default-space space-address))
run: maybe-coerce/read-rank/read-move 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/read-rank/read-move 1: 101343 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 101314 <= 101343
run: maybe-coerce/read-rank/read-move 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (character #\2 . nil)) character)
run: maybe-coerce/read-rank/read-move 2: #(tagged record (character #\2 . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 101343 <= character
mem: ((1 tagged-value-address) (deref)): 101344 <= #\2
run: maybe-coerce/read-rank/read-move 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (character #\2 . nil)) character)
run: maybe-coerce/read-rank/read-move 3: character => ((2 type))
mem: ((2 type)): 101315 <= character
run: maybe-coerce/read-rank/read-move 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((101343 type) (raw)) => character
run: maybe-coerce/read-rank/read-move 4: character => ((3 type))
mem: ((3 type)): 101316 <= character
run: maybe-coerce/read-rank/read-move 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => character
mem: ((2 type)) => character
run: maybe-coerce/read-rank/read-move 5: t => ((4 boolean))
mem: ((4 boolean)): 101317 <= t
run: maybe-coerce/read-rank/read-move 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => t
run: maybe-coerce/read-rank/read-move 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
mem: ((101344 location) (raw)) => 2
run: maybe-coerce/read-rank/read-move 8: #\2 => ((5 location))
mem: ((5 location)): 101318 <= #\2
run: maybe-coerce/read-rank/read-move 9: (((reply)) ((5 location)) ((4 boolean)))
mem: ((5 location)) => 2
mem: ((4 boolean)) => t
run: read-rank/read-move 3: #\2 => ((4 character))
mem: ((4 character)): 101162 <= #\2
run: read-rank/read-move 4: (((5 boolean)) <- ((equal)) ((4 character)) ((q literal)))
mem: ((4 character)) => 2
run: read-rank/read-move 4: nil => ((5 boolean))
mem: ((5 boolean)): 101163 <= nil
run: read-rank/read-move 5: (((jump-unless)) ((5 boolean)) ((1 offset)))
mem: ((5 boolean)) => nil
run: read-rank/read-move 7: (((6 integer)) <- ((character-to-integer)) ((4 character)))
mem: ((4 character)) => 2
run: read-rank/read-move 7: 50 => ((6 integer))
mem: ((6 integer)): 101164 <= 50
run: read-rank/read-move 8: (((7 character)) <- ((copy)) ((1 literal)))
run: read-rank/read-move 8: #\1 => ((7 character))
mem: ((7 character)): 101165 <= #\1
run: read-rank/read-move 9: (((8 integer)) <- ((character-to-integer)) ((7 character)))
mem: ((7 character)) => 1
run: read-rank/read-move 9: 49 => ((8 integer))
mem: ((8 integer)): 101166 <= 49
run: read-rank/read-move 10: (((6 integer)) <- ((subtract)) ((6 integer)) ((8 integer)))
mem: ((6 integer)) => 50
mem: ((8 integer)) => 49
run: read-rank/read-move 10: 1 => ((6 integer))
mem: ((6 integer)): 101164 <= 1
run: read-rank/read-move 11: (((9 boolean)) <- ((greater-or-equal)) ((6 integer)) ((0 literal)))
mem: ((6 integer)) => 1
run: read-rank/read-move 11: t => ((9 boolean))
mem: ((9 boolean)): 101167 <= t
run: read-rank/read-move 12: (((assert)) ((9 boolean)) ((rank too low literal)))
mem: ((9 boolean)) => t
run: read-rank/read-move 13: (((10 boolean)) <- ((lesser-or-equal)) ((6 integer)) ((7 literal)))
mem: ((6 integer)) => 1
run: read-rank/read-move 13: t => ((10 boolean))
mem: ((10 boolean)): 101168 <= t
run: read-rank/read-move 14: (((assert)) ((10 boolean)) ((rank too high literal)))
mem: ((10 boolean)) => t
run: read-rank/read-move 15: (((reply)) ((6 integer)))
mem: ((6 integer)) => 1
run: read-move 5: 1 => ((3 integer))
mem: ((3 integer)): 101004 <= 1
run: read-move 6: (((expect-stdin)) ((1 channel-address)) ((- literal)))
mem: ((1 channel-address)) => 1031
run: expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: expect-stdin/read-move 0: 101345 => ((default-space space-address))
run: expect-stdin/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 #\-)
run: expect-stdin/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101347 <= 1031
run: expect-stdin/read-move 2: (((2 tagged-value)) ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read/expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read/expect-stdin/read-move 0: 101376 => ((default-space space-address))
run: read/expect-stdin/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read/expect-stdin/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101378 <= 1031
run: read/expect-stdin/read-move 2: (((2 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (0 0 1034 . nil))
run: empty?/read/expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: empty?/read/expect-stdin/read-move 0: 101407 => ((default-space space-address))
run: empty?/read/expect-stdin/read-move 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 0 1034 . nil)))
run: empty?/read/expect-stdin/read-move 1: #(tagged record (0 0 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 101409 <= 0
mem: ((1 channel)): 101410 <= 0
mem: ((1 channel)): 101411 <= 1034
run: empty?/read/expect-stdin/read-move 2: (((4 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((101409 integer) (raw)) => 0
run: empty?/read/expect-stdin/read-move 2: 0 => ((4 integer))
mem: ((4 integer)): 101412 <= 0
run: empty?/read/expect-stdin/read-move 3: (((5 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((101410 integer) (raw)) => 0
run: empty?/read/expect-stdin/read-move 3: 0 => ((5 integer))
mem: ((5 integer)): 101413 <= 0
run: empty?/read/expect-stdin/read-move 4: (((6 boolean)) <- ((equal)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 0
mem: ((5 integer)) => 0
run: empty?/read/expect-stdin/read-move 4: t => ((6 boolean))
mem: ((6 boolean)): 101414 <= t
run: empty?/read/expect-stdin/read-move 5: (((reply)) ((6 boolean)))
mem: ((6 boolean)) => t
run: read/expect-stdin/read-move 2: t => ((2 boolean))
mem: ((2 boolean)): 101379 <= t
run: read/expect-stdin/read-move 3: (((jump-unless)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => t
run: read/expect-stdin/read-move 4: (((3 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: read/expect-stdin/read-move 4: 1032 => ((3 integer-address))
mem: ((3 integer-address)): 101380 <= 1032
run: read/expect-stdin/read-move 5: (((sleep)) ((until-location-changes literal)) ((3 integer-address) (deref)))
mem: ((3 integer-address) (deref)) => 0
schedule: pushing read/expect-stdin/read-move to sleep queue
schedule: waking up write/send-more-keys
schedule: write/send-more-keys
run: write/send-more-keys 7: (((6 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: write/send-more-keys 7: 1034 => ((6 tagged-value-array-address))
mem: ((6 tagged-value-array-address)): 301131 <= 1034
run: write/send-more-keys 8: (((7 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: write/send-more-keys 8: 1032 => ((7 integer-address))
mem: ((7 integer-address)): 301132 <= 1032
run: write/send-more-keys 9: (((8 tagged-value-address)) <- ((index-address)) ((6 tagged-value-array-address) (deref)) ((7 integer-address) (deref)))
mem: ((7 integer-address) (deref)) => 0
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
run: write/send-more-keys 9: 1035 => ((8 tagged-value-address))
mem: ((8 tagged-value-address)): 301133 <= 1035
run: write/send-more-keys 10: (((8 tagged-value-address) (deref)) <- ((copy)) ((2 tagged-value)))
mem: ((2 tagged-value)) => #(tagged record (character - . nil))
run: write/send-more-keys 10: #(tagged record (character #\- . nil)) => ((8 tagged-value-address) (deref))
mem: ((8 tagged-value-address) (deref)): 1035 <= character
mem: ((8 tagged-value-address) (deref)): 1036 <= #\-
run: write/send-more-keys 11: (((7 integer-address) (deref)) <- ((add)) ((7 integer-address) (deref)) ((1 literal)))
mem: ((7 integer-address) (deref)) => 0
run: write/send-more-keys 11: 1 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 1
run: write/send-more-keys 12: (((9 integer)) <- ((length)) ((6 tagged-value-array-address) (deref)))
array-len: ((6 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: write/send-more-keys 12: 2 => ((9 integer))
mem: ((9 integer)): 301134 <= 2
run: write/send-more-keys 13: (((10 boolean)) <- ((less-than)) ((7 integer-address) (deref)) ((9 integer)))
mem: ((7 integer-address) (deref)) => 1
mem: ((9 integer)) => 2
run: write/send-more-keys 13: t => ((10 boolean))
mem: ((10 boolean)): 301135 <= t
run: write/send-more-keys 14: (((jump-if)) ((10 boolean)) ((1 offset)))
mem: ((10 boolean)) => t
run: write/send-more-keys 16: (((reply)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (0 1 1034 . nil))
run: send-more-keys 6: #(tagged record (0 1 1034 . nil)) => ((1 channel-address) (raw) (deref))
mem: ((1 channel-address) (raw) (deref)): 1031 <= 0
mem: ((1 channel-address) (raw) (deref)): 1032 <= 1
mem: ((1 channel-address) (raw) (deref)): 1033 <= 1034
run: send-more-keys 7: (((1 character)) <- ((copy)) ((a literal)))
run: send-more-keys 7: #\a => ((1 character))
mem: ((1 character)): 301002 <= #\a
run: send-more-keys 8: (((2 tagged-value)) <- ((save-type)) ((1 character)))
mem: ((1 character)) => a
run: send-more-keys 8: #(tagged record (character #\a)) => ((2 tagged-value))
mem: ((2 tagged-value)): 301003 <= character
mem: ((2 tagged-value)): 301004 <= #\a
run: send-more-keys 9: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
mem: ((1 channel-address) (raw)) => 1031
mem: ((2 tagged-value)) => #(tagged record (character a . nil))
run: write/send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: write/send-more-keys 0: 301217 => ((default-space space-address))
run: write/send-more-keys 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 #(tagged record (character #\a . nil)))
run: write/send-more-keys 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 301219 <= 1031
run: write/send-more-keys 2: (((2 tagged-value)) <- ((next-input)))
arg: nil 1 (1031 #(tagged record (character #\a . nil)))
run: write/send-more-keys 2: #(tagged record (character #\a . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 301220 <= character
mem: ((2 tagged-value)): 301221 <= #\a
run: write/send-more-keys 3: (((4 boolean)) <- ((full?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (0 1 1034 . nil))
run: full?/write/send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: full?/write/send-more-keys 0: 301248 => ((default-space space-address))
run: full?/write/send-more-keys 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 1 1034 . nil)))
run: full?/write/send-more-keys 1: #(tagged record (0 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 301250 <= 0
mem: ((1 channel)): 301251 <= 1
mem: ((1 channel)): 301252 <= 1034
run: full?/write/send-more-keys 2: (((4 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((301251 integer) (raw)) => 1
run: full?/write/send-more-keys 2: 1 => ((4 integer))
mem: ((4 integer)): 301253 <= 1
run: full?/write/send-more-keys 3: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 1
run: full?/write/send-more-keys 3: 2 => ((4 integer))
mem: ((4 integer)): 301253 <= 2
run: full?/write/send-more-keys 4: (((5 integer)) <- ((capacity)) ((1 channel)))
mem: ((1 channel)) => #(tagged record (0 1 1034 . nil))
run: capacity/full?/write/send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: capacity/full?/write/send-more-keys 0: 301279 => ((default-space space-address))
run: capacity/full?/write/send-more-keys 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 1 1034 . nil)))
run: capacity/full?/write/send-more-keys 1: #(tagged record (0 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 301281 <= 0
mem: ((1 channel)): 301282 <= 1
mem: ((1 channel)): 301283 <= 1034
run: capacity/full?/write/send-more-keys 2: (((4 tagged-value-array-address)) <- ((get)) ((1 channel)) ((2 offset)))
mem: ((301283 tagged-value-array-address) (raw)) => 1034
run: capacity/full?/write/send-more-keys 2: 1034 => ((4 tagged-value-array-address))
mem: ((4 tagged-value-array-address)): 301284 <= 1034
run: capacity/full?/write/send-more-keys 3: (((5 integer)) <- ((length)) ((4 tagged-value-array-address) (deref)))
array-len: ((4 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: capacity/full?/write/send-more-keys 3: 2 => ((5 integer))
mem: ((5 integer)): 301285 <= 2
run: capacity/full?/write/send-more-keys 4: (((reply)) ((5 integer)))
mem: ((5 integer)) => 2
run: full?/write/send-more-keys 4: 2 => ((5 integer))
mem: ((5 integer)): 301254 <= 2
run: full?/write/send-more-keys 5: (((6 boolean)) <- ((less-than)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 2
mem: ((5 integer)) => 2
run: full?/write/send-more-keys 5: nil => ((6 boolean))
mem: ((6 boolean)): 301255 <= nil
run: full?/write/send-more-keys 6: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => nil
run: full?/write/send-more-keys 7: (((4 integer)) <- ((copy)) ((0 literal)))
run: full?/write/send-more-keys 7: 0 => ((4 integer))
mem: ((4 integer)): 301253 <= 0
run: full?/write/send-more-keys 8: (((7 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((301250 integer) (raw)) => 0
run: full?/write/send-more-keys 8: 0 => ((7 integer))
mem: ((7 integer)): 301256 <= 0
run: full?/write/send-more-keys 9: (((8 boolean)) <- ((equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 0
run: full?/write/send-more-keys 9: t => ((8 boolean))
mem: ((8 boolean)): 301257 <= t
run: full?/write/send-more-keys 10: (((reply)) ((8 boolean)))
mem: ((8 boolean)) => t
run: write/send-more-keys 3: t => ((4 boolean))
mem: ((4 boolean)): 301222 <= t
run: write/send-more-keys 4: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => t
run: write/send-more-keys 5: (((5 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: write/send-more-keys 5: 1031 => ((5 integer-address))
mem: ((5 integer-address)): 301223 <= 1031
run: write/send-more-keys 6: (((sleep)) ((until-location-changes literal)) ((5 integer-address) (deref)))
mem: ((5 integer-address) (deref)) => 0
schedule: pushing write/send-more-keys to sleep queue
schedule: waking up read/expect-stdin/read-move
schedule: read/expect-stdin/read-move
run: read/expect-stdin/read-move 6: (((4 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: read/expect-stdin/read-move 6: 1031 => ((4 integer-address))
mem: ((4 integer-address)): 101381 <= 1031
run: read/expect-stdin/read-move 7: (((5 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: read/expect-stdin/read-move 7: 1034 => ((5 tagged-value-array-address))
mem: ((5 tagged-value-array-address)): 101382 <= 1034
run: read/expect-stdin/read-move 8: (((6 tagged-value)) <- ((index)) ((5 tagged-value-array-address) (deref)) ((4 integer-address) (deref)))
mem: ((4 integer-address) (deref)) => 0
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
mem: ((1035 tagged-value) (raw)) => #(tagged record (character - . nil))
run: read/expect-stdin/read-move 8: #(tagged record (character #\- . nil)) => ((6 tagged-value))
mem: ((6 tagged-value)): 101383 <= character
mem: ((6 tagged-value)): 101384 <= #\-
run: read/expect-stdin/read-move 9: (((4 integer-address) (deref)) <- ((add)) ((4 integer-address) (deref)) ((1 literal)))
mem: ((4 integer-address) (deref)) => 0
run: read/expect-stdin/read-move 9: 1 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1031 <= 1
run: read/expect-stdin/read-move 10: (((8 integer)) <- ((length)) ((5 tagged-value-array-address) (deref)))
array-len: ((5 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: read/expect-stdin/read-move 10: 2 => ((8 integer))
mem: ((8 integer)): 101385 <= 2
run: read/expect-stdin/read-move 11: (((9 boolean)) <- ((less-than)) ((4 integer-address) (deref)) ((8 integer)))
mem: ((4 integer-address) (deref)) => 1
mem: ((8 integer)) => 2
run: read/expect-stdin/read-move 11: t => ((9 boolean))
mem: ((9 boolean)): 101386 <= t
run: read/expect-stdin/read-move 12: (((jump-if)) ((9 boolean)) ((1 offset)))
mem: ((9 boolean)) => t
run: read/expect-stdin/read-move 14: (((reply)) ((6 tagged-value)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((6 tagged-value)) => #(tagged record (character - . nil))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (1 1 1034 . nil))
run: expect-stdin/read-move 2: #(tagged record (character #\- . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 101348 <= character
mem: ((2 tagged-value)): 101349 <= #\-
run: expect-stdin/read-move 2: #(tagged record (1 1 1034 . nil)) => ((1 channel-address) (deref))
mem: ((1 channel-address) (deref)): 1031 <= 1
mem: ((1 channel-address) (deref)): 1032 <= 1
mem: ((1 channel-address) (deref)): 1033 <= 1034
run: expect-stdin/read-move 3: (((4 character)) <- ((maybe-coerce)) ((2 tagged-value)) ((character literal)))
mem: ((2 tagged-value)) => #(tagged record (character - . nil))
run: maybe-coerce/expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/expect-stdin/read-move 0: 101438 => ((default-space space-address))
run: maybe-coerce/expect-stdin/read-move 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/expect-stdin/read-move 1: 101469 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 101440 <= 101469
run: maybe-coerce/expect-stdin/read-move 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (character #\- . nil)) character)
run: maybe-coerce/expect-stdin/read-move 2: #(tagged record (character #\- . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 101469 <= character
mem: ((1 tagged-value-address) (deref)): 101470 <= #\-
run: maybe-coerce/expect-stdin/read-move 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (character #\- . nil)) character)
run: maybe-coerce/expect-stdin/read-move 3: character => ((2 type))
mem: ((2 type)): 101441 <= character
run: maybe-coerce/expect-stdin/read-move 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((101469 type) (raw)) => character
run: maybe-coerce/expect-stdin/read-move 4: character => ((3 type))
mem: ((3 type)): 101442 <= character
run: maybe-coerce/expect-stdin/read-move 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => character
mem: ((2 type)) => character
run: maybe-coerce/expect-stdin/read-move 5: t => ((4 boolean))
mem: ((4 boolean)): 101443 <= t
run: maybe-coerce/expect-stdin/read-move 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => t
run: maybe-coerce/expect-stdin/read-move 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
mem: ((101470 location) (raw)) => -
run: maybe-coerce/expect-stdin/read-move 8: #\- => ((5 location))
mem: ((5 location)): 101444 <= #\-
run: maybe-coerce/expect-stdin/read-move 9: (((reply)) ((5 location)) ((4 boolean)))
mem: ((5 location)) => -
mem: ((4 boolean)) => t
run: expect-stdin/read-move 3: #\- => ((4 character))
mem: ((4 character)): 101350 <= #\-
run: expect-stdin/read-move 4: (((5 character)) <- ((next-input)))
arg: nil 1 (1031 #\-)
run: expect-stdin/read-move 4: #\- => ((5 character))
mem: ((5 character)): 101351 <= #\-
run: expect-stdin/read-move 5: (((6 boolean)) <- ((equal)) ((4 character)) ((5 character)))
mem: ((4 character)) => -
mem: ((5 character)) => -
run: expect-stdin/read-move 5: t => ((6 boolean))
mem: ((6 boolean)): 101352 <= t
run: expect-stdin/read-move 6: (((assert)) ((6 boolean)) ((expected character not found literal)))
mem: ((6 boolean)) => t
run: read-move 7: (((4 integer)) <- ((read-file)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read-file/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read-file/read-move 0: 101471 => ((default-space space-address))
run: read-file/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read-file/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101473 <= 1031
run: read-file/read-move 2: (((2 tagged-value)) ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read/read-file/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read/read-file/read-move 0: 101502 => ((default-space space-address))
run: read/read-file/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read/read-file/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101504 <= 1031
run: read/read-file/read-move 2: (((2 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 1 1034 . nil))
run: empty?/read/read-file/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: empty?/read/read-file/read-move 0: 101533 => ((default-space space-address))
run: empty?/read/read-file/read-move 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: empty?/read/read-file/read-move 1: #(tagged record (1 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 101535 <= 1
mem: ((1 channel)): 101536 <= 1
mem: ((1 channel)): 101537 <= 1034
run: empty?/read/read-file/read-move 2: (((4 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((101535 integer) (raw)) => 1
run: empty?/read/read-file/read-move 2: 1 => ((4 integer))
mem: ((4 integer)): 101538 <= 1
run: empty?/read/read-file/read-move 3: (((5 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((101536 integer) (raw)) => 1
run: empty?/read/read-file/read-move 3: 1 => ((5 integer))
mem: ((5 integer)): 101539 <= 1
run: empty?/read/read-file/read-move 4: (((6 boolean)) <- ((equal)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 1
mem: ((5 integer)) => 1
run: empty?/read/read-file/read-move 4: t => ((6 boolean))
mem: ((6 boolean)): 101540 <= t
run: empty?/read/read-file/read-move 5: (((reply)) ((6 boolean)))
mem: ((6 boolean)) => t
run: read/read-file/read-move 2: t => ((2 boolean))
mem: ((2 boolean)): 101505 <= t
run: read/read-file/read-move 3: (((jump-unless)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => t
run: read/read-file/read-move 4: (((3 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: read/read-file/read-move 4: 1032 => ((3 integer-address))
mem: ((3 integer-address)): 101506 <= 1032
run: read/read-file/read-move 5: (((sleep)) ((until-location-changes literal)) ((3 integer-address) (deref)))
mem: ((3 integer-address) (deref)) => 1
schedule: pushing read/read-file/read-move to sleep queue
schedule: waking up write/send-more-keys
schedule: write/send-more-keys
run: write/send-more-keys 7: (((6 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: write/send-more-keys 7: 1034 => ((6 tagged-value-array-address))
mem: ((6 tagged-value-array-address)): 301224 <= 1034
run: write/send-more-keys 8: (((7 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: write/send-more-keys 8: 1032 => ((7 integer-address))
mem: ((7 integer-address)): 301225 <= 1032
run: write/send-more-keys 9: (((8 tagged-value-address)) <- ((index-address)) ((6 tagged-value-array-address) (deref)) ((7 integer-address) (deref)))
mem: ((7 integer-address) (deref)) => 1
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
run: write/send-more-keys 9: 1037 => ((8 tagged-value-address))
mem: ((8 tagged-value-address)): 301226 <= 1037
run: write/send-more-keys 10: (((8 tagged-value-address) (deref)) <- ((copy)) ((2 tagged-value)))
mem: ((2 tagged-value)) => #(tagged record (character a . nil))
run: write/send-more-keys 10: #(tagged record (character #\a . nil)) => ((8 tagged-value-address) (deref))
mem: ((8 tagged-value-address) (deref)): 1037 <= character
mem: ((8 tagged-value-address) (deref)): 1038 <= #\a
run: write/send-more-keys 11: (((7 integer-address) (deref)) <- ((add)) ((7 integer-address) (deref)) ((1 literal)))
mem: ((7 integer-address) (deref)) => 1
run: write/send-more-keys 11: 2 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 2
run: write/send-more-keys 12: (((9 integer)) <- ((length)) ((6 tagged-value-array-address) (deref)))
array-len: ((6 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: write/send-more-keys 12: 2 => ((9 integer))
mem: ((9 integer)): 301227 <= 2
run: write/send-more-keys 13: (((10 boolean)) <- ((less-than)) ((7 integer-address) (deref)) ((9 integer)))
mem: ((7 integer-address) (deref)) => 2
mem: ((9 integer)) => 2
run: write/send-more-keys 13: nil => ((10 boolean))
mem: ((10 boolean)): 301228 <= nil
run: write/send-more-keys 14: (((jump-if)) ((10 boolean)) ((1 offset)))
mem: ((10 boolean)) => nil
run: write/send-more-keys 15: (((7 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: write/send-more-keys 15: 0 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 0
run: write/send-more-keys 16: (((reply)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (1 0 1034 . nil))
run: send-more-keys 9: #(tagged record (1 0 1034 . nil)) => ((1 channel-address) (raw) (deref))
mem: ((1 channel-address) (raw) (deref)): 1031 <= 1
mem: ((1 channel-address) (raw) (deref)): 1032 <= 0
mem: ((1 channel-address) (raw) (deref)): 1033 <= 1034
run: send-more-keys 10: (((1 character)) <- ((copy)) ((4 literal)))
run: send-more-keys 10: #\4 => ((1 character))
mem: ((1 character)): 301002 <= #\4
run: send-more-keys 11: (((2 tagged-value)) <- ((save-type)) ((1 character)))
mem: ((1 character)) => 4
run: send-more-keys 11: #(tagged record (character #\4)) => ((2 tagged-value))
mem: ((2 tagged-value)): 301003 <= character
mem: ((2 tagged-value)): 301004 <= #\4
run: send-more-keys 12: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
mem: ((1 channel-address) (raw)) => 1031
mem: ((2 tagged-value)) => #(tagged record (character 4 . nil))
run: write/send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: write/send-more-keys 0: 301310 => ((default-space space-address))
run: write/send-more-keys 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 #(tagged record (character #\4 . nil)))
run: write/send-more-keys 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 301312 <= 1031
run: write/send-more-keys 2: (((2 tagged-value)) <- ((next-input)))
arg: nil 1 (1031 #(tagged record (character #\4 . nil)))
run: write/send-more-keys 2: #(tagged record (character #\4 . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 301313 <= character
mem: ((2 tagged-value)): 301314 <= #\4
run: write/send-more-keys 3: (((4 boolean)) <- ((full?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 0 1034 . nil))
run: full?/write/send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: full?/write/send-more-keys 0: 301341 => ((default-space space-address))
run: full?/write/send-more-keys 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 0 1034 . nil)))
run: full?/write/send-more-keys 1: #(tagged record (1 0 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 301343 <= 1
mem: ((1 channel)): 301344 <= 0
mem: ((1 channel)): 301345 <= 1034
run: full?/write/send-more-keys 2: (((4 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((301344 integer) (raw)) => 0
run: full?/write/send-more-keys 2: 0 => ((4 integer))
mem: ((4 integer)): 301346 <= 0
run: full?/write/send-more-keys 3: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 0
run: full?/write/send-more-keys 3: 1 => ((4 integer))
mem: ((4 integer)): 301346 <= 1
run: full?/write/send-more-keys 4: (((5 integer)) <- ((capacity)) ((1 channel)))
mem: ((1 channel)) => #(tagged record (1 0 1034 . nil))
run: capacity/full?/write/send-more-keys 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: capacity/full?/write/send-more-keys 0: 301372 => ((default-space space-address))
run: capacity/full?/write/send-more-keys 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 0 1034 . nil)))
run: capacity/full?/write/send-more-keys 1: #(tagged record (1 0 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 301374 <= 1
mem: ((1 channel)): 301375 <= 0
mem: ((1 channel)): 301376 <= 1034
run: capacity/full?/write/send-more-keys 2: (((4 tagged-value-array-address)) <- ((get)) ((1 channel)) ((2 offset)))
mem: ((301376 tagged-value-array-address) (raw)) => 1034
run: capacity/full?/write/send-more-keys 2: 1034 => ((4 tagged-value-array-address))
mem: ((4 tagged-value-array-address)): 301377 <= 1034
run: capacity/full?/write/send-more-keys 3: (((5 integer)) <- ((length)) ((4 tagged-value-array-address) (deref)))
array-len: ((4 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: capacity/full?/write/send-more-keys 3: 2 => ((5 integer))
mem: ((5 integer)): 301378 <= 2
run: capacity/full?/write/send-more-keys 4: (((reply)) ((5 integer)))
mem: ((5 integer)) => 2
run: full?/write/send-more-keys 4: 2 => ((5 integer))
mem: ((5 integer)): 301347 <= 2
run: full?/write/send-more-keys 5: (((6 boolean)) <- ((less-than)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 1
mem: ((5 integer)) => 2
run: full?/write/send-more-keys 5: t => ((6 boolean))
mem: ((6 boolean)): 301348 <= t
run: full?/write/send-more-keys 6: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: full?/write/send-more-keys 8: (((7 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((301343 integer) (raw)) => 1
run: full?/write/send-more-keys 8: 1 => ((7 integer))
mem: ((7 integer)): 301349 <= 1
run: full?/write/send-more-keys 9: (((8 boolean)) <- ((equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 1
mem: ((4 integer)) => 1
run: full?/write/send-more-keys 9: t => ((8 boolean))
mem: ((8 boolean)): 301350 <= t
run: full?/write/send-more-keys 10: (((reply)) ((8 boolean)))
mem: ((8 boolean)) => t
run: write/send-more-keys 3: t => ((4 boolean))
mem: ((4 boolean)): 301315 <= t
run: write/send-more-keys 4: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => t
run: write/send-more-keys 5: (((5 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: write/send-more-keys 5: 1031 => ((5 integer-address))
mem: ((5 integer-address)): 301316 <= 1031
run: write/send-more-keys 6: (((sleep)) ((until-location-changes literal)) ((5 integer-address) (deref)))
mem: ((5 integer-address) (deref)) => 1
schedule: pushing write/send-more-keys to sleep queue
schedule: waking up read/read-file/read-move
schedule: read/read-file/read-move
run: read/read-file/read-move 6: (((4 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: read/read-file/read-move 6: 1031 => ((4 integer-address))
mem: ((4 integer-address)): 101507 <= 1031
run: read/read-file/read-move 7: (((5 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: read/read-file/read-move 7: 1034 => ((5 tagged-value-array-address))
mem: ((5 tagged-value-array-address)): 101508 <= 1034
run: read/read-file/read-move 8: (((6 tagged-value)) <- ((index)) ((5 tagged-value-array-address) (deref)) ((4 integer-address) (deref)))
mem: ((4 integer-address) (deref)) => 1
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
mem: ((1037 tagged-value) (raw)) => #(tagged record (character a . nil))
run: read/read-file/read-move 8: #(tagged record (character #\a . nil)) => ((6 tagged-value))
mem: ((6 tagged-value)): 101509 <= character
mem: ((6 tagged-value)): 101510 <= #\a
run: read/read-file/read-move 9: (((4 integer-address) (deref)) <- ((add)) ((4 integer-address) (deref)) ((1 literal)))
mem: ((4 integer-address) (deref)) => 1
run: read/read-file/read-move 9: 2 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1031 <= 2
run: read/read-file/read-move 10: (((8 integer)) <- ((length)) ((5 tagged-value-array-address) (deref)))
array-len: ((5 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: read/read-file/read-move 10: 2 => ((8 integer))
mem: ((8 integer)): 101511 <= 2
run: read/read-file/read-move 11: (((9 boolean)) <- ((less-than)) ((4 integer-address) (deref)) ((8 integer)))
mem: ((4 integer-address) (deref)) => 2
mem: ((8 integer)) => 2
run: read/read-file/read-move 11: nil => ((9 boolean))
mem: ((9 boolean)): 101512 <= nil
run: read/read-file/read-move 12: (((jump-if)) ((9 boolean)) ((1 offset)))
mem: ((9 boolean)) => nil
run: read/read-file/read-move 13: (((4 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: read/read-file/read-move 13: 0 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1031 <= 0
run: read/read-file/read-move 14: (((reply)) ((6 tagged-value)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((6 tagged-value)) => #(tagged record (character a . nil))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (0 0 1034 . nil))
run: read-file/read-move 2: #(tagged record (character #\a . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 101474 <= character
mem: ((2 tagged-value)): 101475 <= #\a
run: read-file/read-move 2: #(tagged record (0 0 1034 . nil)) => ((1 channel-address) (deref))
mem: ((1 channel-address) (deref)): 1031 <= 0
mem: ((1 channel-address) (deref)): 1032 <= 0
mem: ((1 channel-address) (deref)): 1033 <= 1034
run: read-file/read-move 3: (((4 character)) <- ((copy)) ((a literal)))
run: read-file/read-move 3: #\a => ((4 character))
mem: ((4 character)): 101476 <= #\a
run: read-file/read-move 4: (((5 integer)) <- ((character-to-integer)) ((4 character)))
mem: ((4 character)) => a
run: read-file/read-move 4: 97 => ((5 integer))
mem: ((5 integer)): 101477 <= 97
run: read-file/read-move 5: (((6 character)) <- ((maybe-coerce)) ((2 tagged-value)) ((character literal)))
mem: ((2 tagged-value)) => #(tagged record (character a . nil))
run: maybe-coerce/read-file/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/read-file/read-move 0: 101564 => ((default-space space-address))
run: maybe-coerce/read-file/read-move 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/read-file/read-move 1: 101595 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 101566 <= 101595
run: maybe-coerce/read-file/read-move 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (character #\a . nil)) character)
run: maybe-coerce/read-file/read-move 2: #(tagged record (character #\a . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 101595 <= character
mem: ((1 tagged-value-address) (deref)): 101596 <= #\a
run: maybe-coerce/read-file/read-move 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (character #\a . nil)) character)
run: maybe-coerce/read-file/read-move 3: character => ((2 type))
mem: ((2 type)): 101567 <= character
run: maybe-coerce/read-file/read-move 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((101595 type) (raw)) => character
run: maybe-coerce/read-file/read-move 4: character => ((3 type))
mem: ((3 type)): 101568 <= character
run: maybe-coerce/read-file/read-move 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => character
mem: ((2 type)) => character
run: maybe-coerce/read-file/read-move 5: t => ((4 boolean))
mem: ((4 boolean)): 101569 <= t
run: maybe-coerce/read-file/read-move 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => t
run: maybe-coerce/read-file/read-move 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
mem: ((101596 location) (raw)) => a
run: maybe-coerce/read-file/read-move 8: #\a => ((5 location))
mem: ((5 location)): 101570 <= #\a
run: maybe-coerce/read-file/read-move 9: (((reply)) ((5 location)) ((4 boolean)))
mem: ((5 location)) => a
mem: ((4 boolean)) => t
run: read-file/read-move 5: #\a => ((6 character))
mem: ((6 character)): 101478 <= #\a
run: read-file/read-move 6: (((7 boolean)) <- ((equal)) ((6 character)) ((q literal)))
mem: ((6 character)) => a
run: read-file/read-move 6: nil => ((7 boolean))
mem: ((7 boolean)): 101479 <= nil
run: read-file/read-move 7: (((jump-unless)) ((7 boolean)) ((1 offset)))
mem: ((7 boolean)) => nil
run: read-file/read-move 9: (((8 integer)) <- ((character-to-integer)) ((6 character)))
mem: ((6 character)) => a
run: read-file/read-move 9: 97 => ((8 integer))
mem: ((8 integer)): 101480 <= 97
run: read-file/read-move 10: (((8 integer)) <- ((subtract)) ((8 integer)) ((5 integer)))
mem: ((8 integer)) => 97
mem: ((5 integer)) => 97
run: read-file/read-move 10: 0 => ((8 integer))
mem: ((8 integer)): 101480 <= 0
run: read-file/read-move 11: (((9 boolean)) <- ((greater-or-equal)) ((8 integer)) ((0 literal)))
mem: ((8 integer)) => 0
run: read-file/read-move 11: t => ((9 boolean))
mem: ((9 boolean)): 101481 <= t
run: read-file/read-move 12: (((assert)) ((9 boolean)) ((file too low literal)))
mem: ((9 boolean)) => t
run: read-file/read-move 13: (((10 boolean)) <- ((lesser-or-equal)) ((8 integer)) ((7 literal)))
mem: ((8 integer)) => 0
run: read-file/read-move 13: t => ((10 boolean))
mem: ((10 boolean)): 101482 <= t
run: read-file/read-move 14: (((assert)) ((10 boolean)) ((file too high literal)))
mem: ((10 boolean)) => t
run: read-file/read-move 15: (((reply)) ((8 integer)))
mem: ((8 integer)) => 0
run: read-move 7: 0 => ((4 integer))
mem: ((4 integer)): 101005 <= 0
run: read-move 8: (((5 integer)) <- ((read-rank)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read-rank/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read-rank/read-move 0: 101597 => ((default-space space-address))
run: read-rank/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read-rank/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101599 <= 1031
run: read-rank/read-move 2: (((2 tagged-value)) ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read/read-rank/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read/read-rank/read-move 0: 101628 => ((default-space space-address))
run: read/read-rank/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read/read-rank/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101630 <= 1031
run: read/read-rank/read-move 2: (((2 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (0 0 1034 . nil))
run: empty?/read/read-rank/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: empty?/read/read-rank/read-move 0: 101659 => ((default-space space-address))
run: empty?/read/read-rank/read-move 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 0 1034 . nil)))
run: empty?/read/read-rank/read-move 1: #(tagged record (0 0 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 101661 <= 0
mem: ((1 channel)): 101662 <= 0
mem: ((1 channel)): 101663 <= 1034
run: empty?/read/read-rank/read-move 2: (((4 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((101661 integer) (raw)) => 0
run: empty?/read/read-rank/read-move 2: 0 => ((4 integer))
mem: ((4 integer)): 101664 <= 0
run: empty?/read/read-rank/read-move 3: (((5 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((101662 integer) (raw)) => 0
run: empty?/read/read-rank/read-move 3: 0 => ((5 integer))
mem: ((5 integer)): 101665 <= 0
run: empty?/read/read-rank/read-move 4: (((6 boolean)) <- ((equal)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 0
mem: ((5 integer)) => 0
run: empty?/read/read-rank/read-move 4: t => ((6 boolean))
mem: ((6 boolean)): 101666 <= t
run: empty?/read/read-rank/read-move 5: (((reply)) ((6 boolean)))
mem: ((6 boolean)) => t
run: read/read-rank/read-move 2: t => ((2 boolean))
mem: ((2 boolean)): 101631 <= t
run: read/read-rank/read-move 3: (((jump-unless)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => t
run: read/read-rank/read-move 4: (((3 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: read/read-rank/read-move 4: 1032 => ((3 integer-address))
mem: ((3 integer-address)): 101632 <= 1032
run: read/read-rank/read-move 5: (((sleep)) ((until-location-changes literal)) ((3 integer-address) (deref)))
mem: ((3 integer-address) (deref)) => 0
schedule: pushing read/read-rank/read-move to sleep queue
schedule: waking up write/send-more-keys
schedule: write/send-more-keys
run: write/send-more-keys 7: (((6 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: write/send-more-keys 7: 1034 => ((6 tagged-value-array-address))
mem: ((6 tagged-value-array-address)): 301317 <= 1034
run: write/send-more-keys 8: (((7 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: write/send-more-keys 8: 1032 => ((7 integer-address))
mem: ((7 integer-address)): 301318 <= 1032
run: write/send-more-keys 9: (((8 tagged-value-address)) <- ((index-address)) ((6 tagged-value-array-address) (deref)) ((7 integer-address) (deref)))
mem: ((7 integer-address) (deref)) => 0
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
run: write/send-more-keys 9: 1035 => ((8 tagged-value-address))
mem: ((8 tagged-value-address)): 301319 <= 1035
run: write/send-more-keys 10: (((8 tagged-value-address) (deref)) <- ((copy)) ((2 tagged-value)))
mem: ((2 tagged-value)) => #(tagged record (character 4 . nil))
run: write/send-more-keys 10: #(tagged record (character #\4 . nil)) => ((8 tagged-value-address) (deref))
mem: ((8 tagged-value-address) (deref)): 1035 <= character
mem: ((8 tagged-value-address) (deref)): 1036 <= #\4
run: write/send-more-keys 11: (((7 integer-address) (deref)) <- ((add)) ((7 integer-address) (deref)) ((1 literal)))
mem: ((7 integer-address) (deref)) => 0
run: write/send-more-keys 11: 1 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 1
run: write/send-more-keys 12: (((9 integer)) <- ((length)) ((6 tagged-value-array-address) (deref)))
array-len: ((6 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: write/send-more-keys 12: 2 => ((9 integer))
mem: ((9 integer)): 301320 <= 2
run: write/send-more-keys 13: (((10 boolean)) <- ((less-than)) ((7 integer-address) (deref)) ((9 integer)))
mem: ((7 integer-address) (deref)) => 1
mem: ((9 integer)) => 2
run: write/send-more-keys 13: t => ((10 boolean))
mem: ((10 boolean)): 301321 <= t
run: write/send-more-keys 14: (((jump-if)) ((10 boolean)) ((1 offset)))
mem: ((10 boolean)) => t
run: write/send-more-keys 16: (((reply)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (0 1 1034 . nil))
run: send-more-keys 12: #(tagged record (0 1 1034 . nil)) => ((1 channel-address) (raw) (deref))
mem: ((1 channel-address) (raw) (deref)): 1031 <= 0
mem: ((1 channel-address) (raw) (deref)): 1032 <= 1
mem: ((1 channel-address) (raw) (deref)): 1033 <= 1034
schedule: done with routine 
schedule: waking up read/read-rank/read-move
schedule: read/read-rank/read-move
run: read/read-rank/read-move 6: (((4 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: read/read-rank/read-move 6: 1031 => ((4 integer-address))
mem: ((4 integer-address)): 101633 <= 1031
run: read/read-rank/read-move 7: (((5 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: read/read-rank/read-move 7: 1034 => ((5 tagged-value-array-address))
mem: ((5 tagged-value-array-address)): 101634 <= 1034
run: read/read-rank/read-move 8: (((6 tagged-value)) <- ((index)) ((5 tagged-value-array-address) (deref)) ((4 integer-address) (deref)))
mem: ((4 integer-address) (deref)) => 0
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
mem: ((1035 tagged-value) (raw)) => #(tagged record (character 4 . nil))
run: read/read-rank/read-move 8: #(tagged record (character #\4 . nil)) => ((6 tagged-value))
mem: ((6 tagged-value)): 101635 <= character
mem: ((6 tagged-value)): 101636 <= #\4
run: read/read-rank/read-move 9: (((4 integer-address) (deref)) <- ((add)) ((4 integer-address) (deref)) ((1 literal)))
mem: ((4 integer-address) (deref)) => 0
run: read/read-rank/read-move 9: 1 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1031 <= 1
run: read/read-rank/read-move 10: (((8 integer)) <- ((length)) ((5 tagged-value-array-address) (deref)))
array-len: ((5 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: read/read-rank/read-move 10: 2 => ((8 integer))
mem: ((8 integer)): 101637 <= 2
run: read/read-rank/read-move 11: (((9 boolean)) <- ((less-than)) ((4 integer-address) (deref)) ((8 integer)))
mem: ((4 integer-address) (deref)) => 1
mem: ((8 integer)) => 2
run: read/read-rank/read-move 11: t => ((9 boolean))
mem: ((9 boolean)): 101638 <= t
run: read/read-rank/read-move 12: (((jump-if)) ((9 boolean)) ((1 offset)))
mem: ((9 boolean)) => t
run: read/read-rank/read-move 14: (((reply)) ((6 tagged-value)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((6 tagged-value)) => #(tagged record (character 4 . nil))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (1 1 1034 . nil))
run: read-rank/read-move 2: #(tagged record (character #\4 . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 101600 <= character
mem: ((2 tagged-value)): 101601 <= #\4
run: read-rank/read-move 2: #(tagged record (1 1 1034 . nil)) => ((1 channel-address) (deref))
mem: ((1 channel-address) (deref)): 1031 <= 1
mem: ((1 channel-address) (deref)): 1032 <= 1
mem: ((1 channel-address) (deref)): 1033 <= 1034
run: read-rank/read-move 3: (((4 character)) <- ((maybe-coerce)) ((2 tagged-value)) ((character literal)))
mem: ((2 tagged-value)) => #(tagged record (character 4 . nil))
run: maybe-coerce/read-rank/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/read-rank/read-move 0: 101690 => ((default-space space-address))
run: maybe-coerce/read-rank/read-move 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/read-rank/read-move 1: 101721 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 101692 <= 101721
run: maybe-coerce/read-rank/read-move 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (character #\4 . nil)) character)
run: maybe-coerce/read-rank/read-move 2: #(tagged record (character #\4 . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 101721 <= character
mem: ((1 tagged-value-address) (deref)): 101722 <= #\4
run: maybe-coerce/read-rank/read-move 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (character #\4 . nil)) character)
run: maybe-coerce/read-rank/read-move 3: character => ((2 type))
mem: ((2 type)): 101693 <= character
run: maybe-coerce/read-rank/read-move 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((101721 type) (raw)) => character
run: maybe-coerce/read-rank/read-move 4: character => ((3 type))
mem: ((3 type)): 101694 <= character
run: maybe-coerce/read-rank/read-move 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => character
mem: ((2 type)) => character
run: maybe-coerce/read-rank/read-move 5: t => ((4 boolean))
mem: ((4 boolean)): 101695 <= t
run: maybe-coerce/read-rank/read-move 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => t
run: maybe-coerce/read-rank/read-move 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
mem: ((101722 location) (raw)) => 4
run: maybe-coerce/read-rank/read-move 8: #\4 => ((5 location))
mem: ((5 location)): 101696 <= #\4
run: maybe-coerce/read-rank/read-move 9: (((reply)) ((5 location)) ((4 boolean)))
mem: ((5 location)) => 4
mem: ((4 boolean)) => t
run: read-rank/read-move 3: #\4 => ((4 character))
mem: ((4 character)): 101602 <= #\4
run: read-rank/read-move 4: (((5 boolean)) <- ((equal)) ((4 character)) ((q literal)))
mem: ((4 character)) => 4
run: read-rank/read-move 4: nil => ((5 boolean))
mem: ((5 boolean)): 101603 <= nil
run: read-rank/read-move 5: (((jump-unless)) ((5 boolean)) ((1 offset)))
mem: ((5 boolean)) => nil
run: read-rank/read-move 7: (((6 integer)) <- ((character-to-integer)) ((4 character)))
mem: ((4 character)) => 4
run: read-rank/read-move 7: 52 => ((6 integer))
mem: ((6 integer)): 101604 <= 52
run: read-rank/read-move 8: (((7 character)) <- ((copy)) ((1 literal)))
run: read-rank/read-move 8: #\1 => ((7 character))
mem: ((7 character)): 101605 <= #\1
run: read-rank/read-move 9: (((8 integer)) <- ((character-to-integer)) ((7 character)))
mem: ((7 character)) => 1
run: read-rank/read-move 9: 49 => ((8 integer))
mem: ((8 integer)): 101606 <= 49
run: read-rank/read-move 10: (((6 integer)) <- ((subtract)) ((6 integer)) ((8 integer)))
mem: ((6 integer)) => 52
mem: ((8 integer)) => 49
run: read-rank/read-move 10: 3 => ((6 integer))
mem: ((6 integer)): 101604 <= 3
run: read-rank/read-move 11: (((9 boolean)) <- ((greater-or-equal)) ((6 integer)) ((0 literal)))
mem: ((6 integer)) => 3
run: read-rank/read-move 11: t => ((9 boolean))
mem: ((9 boolean)): 101607 <= t
run: read-rank/read-move 12: (((assert)) ((9 boolean)) ((rank too low literal)))
mem: ((9 boolean)) => t
run: read-rank/read-move 13: (((10 boolean)) <- ((lesser-or-equal)) ((6 integer)) ((7 literal)))
mem: ((6 integer)) => 3
run: read-rank/read-move 13: t => ((10 boolean))
mem: ((10 boolean)): 101608 <= t
run: read-rank/read-move 14: (((assert)) ((10 boolean)) ((rank too high literal)))
mem: ((10 boolean)) => t
run: read-rank/read-move 15: (((reply)) ((6 integer)))
mem: ((6 integer)) => 3
run: read-move 8: 3 => ((5 integer))
mem: ((5 integer)): 101006 <= 3
run: read-move 9: (((expect-stdin)) ((1 channel-address)) ((
 literal)))
mem: ((1 channel-address)) => 1031
run: expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: expect-stdin/read-move 0: 101723 => ((default-space space-address))
run: expect-stdin/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 #\newline)
run: expect-stdin/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101725 <= 1031
run: expect-stdin/read-move 2: (((2 tagged-value)) ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read/expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read/expect-stdin/read-move 0: 101754 => ((default-space space-address))
run: read/expect-stdin/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read/expect-stdin/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101756 <= 1031
run: read/expect-stdin/read-move 2: (((2 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 1 1034 . nil))
run: empty?/read/expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: empty?/read/expect-stdin/read-move 0: 101785 => ((default-space space-address))
run: empty?/read/expect-stdin/read-move 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: empty?/read/expect-stdin/read-move 1: #(tagged record (1 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 101787 <= 1
mem: ((1 channel)): 101788 <= 1
mem: ((1 channel)): 101789 <= 1034
run: empty?/read/expect-stdin/read-move 2: (((4 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((101787 integer) (raw)) => 1
run: empty?/read/expect-stdin/read-move 2: 1 => ((4 integer))
mem: ((4 integer)): 101790 <= 1
run: empty?/read/expect-stdin/read-move 3: (((5 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((101788 integer) (raw)) => 1
run: empty?/read/expect-stdin/read-move 3: 1 => ((5 integer))
mem: ((5 integer)): 101791 <= 1
run: empty?/read/expect-stdin/read-move 4: (((6 boolean)) <- ((equal)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 1
mem: ((5 integer)) => 1
run: empty?/read/expect-stdin/read-move 4: t => ((6 boolean))
mem: ((6 boolean)): 101792 <= t
run: empty?/read/expect-stdin/read-move 5: (((reply)) ((6 boolean)))
mem: ((6 boolean)) => t
run: read/expect-stdin/read-move 2: t => ((2 boolean))
mem: ((2 boolean)): 101757 <= t
run: read/expect-stdin/read-move 3: (((jump-unless)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => t
run: read/expect-stdin/read-move 4: (((3 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: read/expect-stdin/read-move 4: 1032 => ((3 integer-address))
mem: ((3 integer-address)): 101758 <= 1032
run: read/expect-stdin/read-move 5: (((sleep)) ((until-location-changes literal)) ((3 integer-address) (deref)))
mem: ((3 integer-address) (deref)) => 1
schedule: pushing read/expect-stdin/read-move to sleep queue
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((c character)) <- ((copy)) ((
 literal))) -- nil
c{0: 2 (((x tagged-value)) <- ((save-type)) ((c character))) -- nil
c{0: 3 (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((c character)) <- ((copy)) ((
 literal)))
c{1: 2 ✓ (((x tagged-value)) <- ((save-type)) ((c character)))
c{1: 3 ✓ (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value)))
cn0: convert-names in send-final-key
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((c character)) <- ((copy)) ((
 literal))) nil nil
cn0: checking arg ((
 literal))
cn0: checking oarg ((c character))
maybe-add: ((c character))
cn0: location for oarg ((c character)): 1
cn0: (((x tagged-value)) <- ((save-type)) ((c character))) ((c 1)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking oarg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: location for oarg ((x tagged-value)): 2
cn0: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((x tagged-value))) ((c 1) (x 2)) nil
cn0: checking arg ((1 channel-address) (raw))
maybe-add: ((1 channel-address) (raw))
cn0: checking arg ((x tagged-value))
maybe-add: ((x tagged-value))
cn0: checking oarg ((1 channel-address) (raw) (deref))
maybe-add: ((1 channel-address) (raw) (deref))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((1 character)) <- ((copy)) ((
 literal)))
cn1: (((2 tagged-value)) <- ((save-type)) ((1 character)))
cn1: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
schedule: expect-stdin/read-move
run: expect-stdin/read-move 2: (((2 tagged-value)) ((1 channel-address) (deref)) <- ((read)) ((1 channel-address)))
mem: ((1 channel-address)) => 1031
run: read/expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read/expect-stdin/read-move 0: 101816 => ((default-space space-address))
run: read/expect-stdin/read-move 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031)
run: read/expect-stdin/read-move 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 101818 <= 1031
run: read/expect-stdin/read-move 2: (((2 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 1 1034 . nil))
run: empty?/read/expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: empty?/read/expect-stdin/read-move 0: 101847 => ((default-space space-address))
run: empty?/read/expect-stdin/read-move 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: empty?/read/expect-stdin/read-move 1: #(tagged record (1 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 101849 <= 1
mem: ((1 channel)): 101850 <= 1
mem: ((1 channel)): 101851 <= 1034
run: empty?/read/expect-stdin/read-move 2: (((4 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((101849 integer) (raw)) => 1
run: empty?/read/expect-stdin/read-move 2: 1 => ((4 integer))
mem: ((4 integer)): 101852 <= 1
run: empty?/read/expect-stdin/read-move 3: (((5 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((101850 integer) (raw)) => 1
run: empty?/read/expect-stdin/read-move 3: 1 => ((5 integer))
mem: ((5 integer)): 101853 <= 1
run: empty?/read/expect-stdin/read-move 4: (((6 boolean)) <- ((equal)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 1
mem: ((5 integer)) => 1
run: empty?/read/expect-stdin/read-move 4: t => ((6 boolean))
mem: ((6 boolean)): 101854 <= t
run: empty?/read/expect-stdin/read-move 5: (((reply)) ((6 boolean)))
mem: ((6 boolean)) => t
run: read/expect-stdin/read-move 2: t => ((2 boolean))
mem: ((2 boolean)): 101819 <= t
run: read/expect-stdin/read-move 3: (((jump-unless)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => t
run: read/expect-stdin/read-move 4: (((3 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: read/expect-stdin/read-move 4: 1032 => ((3 integer-address))
mem: ((3 integer-address)): 101820 <= 1032
run: read/expect-stdin/read-move 5: (((sleep)) ((until-location-changes literal)) ((3 integer-address) (deref)))
mem: ((3 integer-address) (deref)) => 1
schedule: pushing read/expect-stdin/read-move to sleep queue
schedule: send-final-key
run: send-final-key 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
run: send-final-key 0: 401000 => ((default-space space-address))
run: send-final-key 1: (((1 character)) <- ((copy)) ((
 literal)))
run: send-final-key 1: #\newline => ((1 character))
mem: ((1 character)): 401002 <= #\newline
run: send-final-key 2: (((2 tagged-value)) <- ((save-type)) ((1 character)))
mem: ((1 character)) => 

run: send-final-key 2: #(tagged record (character #\newline)) => ((2 tagged-value))
mem: ((2 tagged-value)): 401003 <= character
mem: ((2 tagged-value)): 401004 <= #\newline
run: send-final-key 3: (((1 channel-address) (raw) (deref)) <- ((write)) ((1 channel-address) (raw)) ((2 tagged-value)))
mem: ((1 channel-address) (raw)) => 1031
mem: ((2 tagged-value)) => #(tagged record (character 
 . nil))
run: write/send-final-key 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: write/send-final-key 0: 401031 => ((default-space space-address))
run: write/send-final-key 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 #(tagged record (character #\newline . nil)))
run: write/send-final-key 1: 1031 => ((1 channel-address))
mem: ((1 channel-address)): 401033 <= 1031
run: write/send-final-key 2: (((2 tagged-value)) <- ((next-input)))
arg: nil 1 (1031 #(tagged record (character #\newline . nil)))
run: write/send-final-key 2: #(tagged record (character #\newline . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 401034 <= character
mem: ((2 tagged-value)): 401035 <= #\newline
run: write/send-final-key 3: (((4 boolean)) <- ((full?)) ((1 channel-address) (deref)))
mem: ((1 channel-address) (deref)) => #(tagged record (1 1 1034 . nil))
run: full?/write/send-final-key 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: full?/write/send-final-key 0: 401062 => ((default-space space-address))
run: full?/write/send-final-key 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: full?/write/send-final-key 1: #(tagged record (1 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 401064 <= 1
mem: ((1 channel)): 401065 <= 1
mem: ((1 channel)): 401066 <= 1034
run: full?/write/send-final-key 2: (((4 integer)) <- ((get)) ((1 channel)) ((1 offset)))
mem: ((401065 integer) (raw)) => 1
run: full?/write/send-final-key 2: 1 => ((4 integer))
mem: ((4 integer)): 401067 <= 1
run: full?/write/send-final-key 3: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 1
run: full?/write/send-final-key 3: 2 => ((4 integer))
mem: ((4 integer)): 401067 <= 2
run: full?/write/send-final-key 4: (((5 integer)) <- ((capacity)) ((1 channel)))
mem: ((1 channel)) => #(tagged record (1 1 1034 . nil))
run: capacity/full?/write/send-final-key 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: capacity/full?/write/send-final-key 0: 401093 => ((default-space space-address))
run: capacity/full?/write/send-final-key 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: capacity/full?/write/send-final-key 1: #(tagged record (1 1 1034 . nil)) => ((1 channel))
mem: ((1 channel)): 401095 <= 1
mem: ((1 channel)): 401096 <= 1
mem: ((1 channel)): 401097 <= 1034
run: capacity/full?/write/send-final-key 2: (((4 tagged-value-array-address)) <- ((get)) ((1 channel)) ((2 offset)))
mem: ((401097 tagged-value-array-address) (raw)) => 1034
run: capacity/full?/write/send-final-key 2: 1034 => ((4 tagged-value-array-address))
mem: ((4 tagged-value-array-address)): 401098 <= 1034
run: capacity/full?/write/send-final-key 3: (((5 integer)) <- ((length)) ((4 tagged-value-array-address) (deref)))
array-len: ((4 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: capacity/full?/write/send-final-key 3: 2 => ((5 integer))
mem: ((5 integer)): 401099 <= 2
run: capacity/full?/write/send-final-key 4: (((reply)) ((5 integer)))
mem: ((5 integer)) => 2
run: full?/write/send-final-key 4: 2 => ((5 integer))
mem: ((5 integer)): 401068 <= 2
run: full?/write/send-final-key 5: (((6 boolean)) <- ((less-than)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 2
mem: ((5 integer)) => 2
run: full?/write/send-final-key 5: nil => ((6 boolean))
mem: ((6 boolean)): 401069 <= nil
run: full?/write/send-final-key 6: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => nil
run: full?/write/send-final-key 7: (((4 integer)) <- ((copy)) ((0 literal)))
run: full?/write/send-final-key 7: 0 => ((4 integer))
mem: ((4 integer)): 401067 <= 0
run: full?/write/send-final-key 8: (((7 integer)) <- ((get)) ((1 channel)) ((0 offset)))
mem: ((401064 integer) (raw)) => 1
run: full?/write/send-final-key 8: 1 => ((7 integer))
mem: ((7 integer)): 401070 <= 1
run: full?/write/send-final-key 9: (((8 boolean)) <- ((equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 1
mem: ((4 integer)) => 0
run: full?/write/send-final-key 9: nil => ((8 boolean))
mem: ((8 boolean)): 401071 <= nil
run: full?/write/send-final-key 10: (((reply)) ((8 boolean)))
mem: ((8 boolean)) => nil
run: write/send-final-key 3: nil => ((4 boolean))
mem: ((4 boolean)): 401036 <= nil
run: write/send-final-key 4: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => nil
run: write/send-final-key 7: (((6 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: write/send-final-key 7: 1034 => ((6 tagged-value-array-address))
mem: ((6 tagged-value-array-address)): 401038 <= 1034
run: write/send-final-key 8: (((7 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
run: write/send-final-key 8: 1032 => ((7 integer-address))
mem: ((7 integer-address)): 401039 <= 1032
run: write/send-final-key 9: (((8 tagged-value-address)) <- ((index-address)) ((6 tagged-value-array-address) (deref)) ((7 integer-address) (deref)))
mem: ((7 integer-address) (deref)) => 1
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
run: write/send-final-key 9: 1037 => ((8 tagged-value-address))
mem: ((8 tagged-value-address)): 401040 <= 1037
run: write/send-final-key 10: (((8 tagged-value-address) (deref)) <- ((copy)) ((2 tagged-value)))
mem: ((2 tagged-value)) => #(tagged record (character 
 . nil))
run: write/send-final-key 10: #(tagged record (character #\newline . nil)) => ((8 tagged-value-address) (deref))
mem: ((8 tagged-value-address) (deref)): 1037 <= character
mem: ((8 tagged-value-address) (deref)): 1038 <= #\newline
run: write/send-final-key 11: (((7 integer-address) (deref)) <- ((add)) ((7 integer-address) (deref)) ((1 literal)))
mem: ((7 integer-address) (deref)) => 1
run: write/send-final-key 11: 2 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 2
run: write/send-final-key 12: (((9 integer)) <- ((length)) ((6 tagged-value-array-address) (deref)))
array-len: ((6 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: write/send-final-key 12: 2 => ((9 integer))
mem: ((9 integer)): 401041 <= 2
run: write/send-final-key 13: (((10 boolean)) <- ((less-than)) ((7 integer-address) (deref)) ((9 integer)))
mem: ((7 integer-address) (deref)) => 2
mem: ((9 integer)) => 2
run: write/send-final-key 13: nil => ((10 boolean))
mem: ((10 boolean)): 401042 <= nil
run: write/send-final-key 14: (((jump-if)) ((10 boolean)) ((1 offset)))
mem: ((10 boolean)) => nil
run: write/send-final-key 15: (((7 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: write/send-final-key 15: 0 => ((7 integer-address) (deref))
mem: ((7 integer-address) (deref)): 1032 <= 0
run: write/send-final-key 16: (((reply)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (1 0 1034 . nil))
run: send-final-key 3: #(tagged record (1 0 1034 . nil)) => ((1 channel-address) (raw) (deref))
mem: ((1 channel-address) (raw) (deref)): 1031 <= 1
mem: ((1 channel-address) (raw) (deref)): 1032 <= 0
mem: ((1 channel-address) (raw) (deref)): 1033 <= 1034
schedule: done with routine 
schedule: waking up read/expect-stdin/read-move
schedule: read/expect-stdin/read-move
run: read/expect-stdin/read-move 6: (((4 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: read/expect-stdin/read-move 6: 1031 => ((4 integer-address))
mem: ((4 integer-address)): 101821 <= 1031
run: read/expect-stdin/read-move 7: (((5 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
mem: ((1033 tagged-value-array-address) (raw)) => 1034
run: read/expect-stdin/read-move 7: 1034 => ((5 tagged-value-array-address))
mem: ((5 tagged-value-array-address)): 101822 <= 1034
run: read/expect-stdin/read-move 8: (((6 tagged-value)) <- ((index)) ((5 tagged-value-array-address) (deref)) ((4 integer-address) (deref)))
mem: ((4 integer-address) (deref)) => 1
array-len: ((1034 tagged-value-array) (raw))
mem: ((1034 integer) (raw)) => 2
mem: ((1037 tagged-value) (raw)) => #(tagged record (character 
 . nil))
run: read/expect-stdin/read-move 8: #(tagged record (character #\newline . nil)) => ((6 tagged-value))
mem: ((6 tagged-value)): 101823 <= character
mem: ((6 tagged-value)): 101824 <= #\newline
run: read/expect-stdin/read-move 9: (((4 integer-address) (deref)) <- ((add)) ((4 integer-address) (deref)) ((1 literal)))
mem: ((4 integer-address) (deref)) => 1
run: read/expect-stdin/read-move 9: 2 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1031 <= 2
run: read/expect-stdin/read-move 10: (((8 integer)) <- ((length)) ((5 tagged-value-array-address) (deref)))
array-len: ((5 tagged-value-array-address) (deref))
mem: ((1034 integer) (raw)) => 2
run: read/expect-stdin/read-move 10: 2 => ((8 integer))
mem: ((8 integer)): 101825 <= 2
run: read/expect-stdin/read-move 11: (((9 boolean)) <- ((less-than)) ((4 integer-address) (deref)) ((8 integer)))
mem: ((4 integer-address) (deref)) => 2
mem: ((8 integer)) => 2
run: read/expect-stdin/read-move 11: nil => ((9 boolean))
mem: ((9 boolean)): 101826 <= nil
run: read/expect-stdin/read-move 12: (((jump-if)) ((9 boolean)) ((1 offset)))
mem: ((9 boolean)) => nil
run: read/expect-stdin/read-move 13: (((4 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: read/expect-stdin/read-move 13: 0 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1031 <= 0
run: read/expect-stdin/read-move 14: (((reply)) ((6 tagged-value)) ((1 channel-address) (deref) (same-as-arg 0)))
mem: ((6 tagged-value)) => #(tagged record (character 
 . nil))
mem: ((1 channel-address) (deref) (same-as-arg 0)) => #(tagged record (0 0 1034 . nil))
run: expect-stdin/read-move 2: #(tagged record (character #\newline . nil)) => ((2 tagged-value))
mem: ((2 tagged-value)): 101726 <= character
mem: ((2 tagged-value)): 101727 <= #\newline
run: expect-stdin/read-move 2: #(tagged record (0 0 1034 . nil)) => ((1 channel-address) (deref))
mem: ((1 channel-address) (deref)): 1031 <= 0
mem: ((1 channel-address) (deref)): 1032 <= 0
mem: ((1 channel-address) (deref)): 1033 <= 1034
run: expect-stdin/read-move 3: (((4 character)) <- ((maybe-coerce)) ((2 tagged-value)) ((character literal)))
mem: ((2 tagged-value)) => #(tagged record (character 
 . nil))
run: maybe-coerce/expect-stdin/read-move 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/expect-stdin/read-move 0: 101878 => ((default-space space-address))
run: maybe-coerce/expect-stdin/read-move 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/expect-stdin/read-move 1: 101909 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 101880 <= 101909
run: maybe-coerce/expect-stdin/read-move 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (character #\newline . nil)) character)
run: maybe-coerce/expect-stdin/read-move 2: #(tagged record (character #\newline . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 101909 <= character
mem: ((1 tagged-value-address) (deref)): 101910 <= #\newline
run: maybe-coerce/expect-stdin/read-move 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (character #\newline . nil)) character)
run: maybe-coerce/expect-stdin/read-move 3: character => ((2 type))
mem: ((2 type)): 101881 <= character
run: maybe-coerce/expect-stdin/read-move 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((101909 type) (raw)) => character
run: maybe-coerce/expect-stdin/read-move 4: character => ((3 type))
mem: ((3 type)): 101882 <= character
run: maybe-coerce/expect-stdin/read-move 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => character
mem: ((2 type)) => character
run: maybe-coerce/expect-stdin/read-move 5: t => ((4 boolean))
mem: ((4 boolean)): 101883 <= t
run: maybe-coerce/expect-stdin/read-move 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => t
run: maybe-coerce/expect-stdin/read-move 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
mem: ((101910 location) (raw)) => 

run: maybe-coerce/expect-stdin/read-move 8: #\newline => ((5 location))
mem: ((5 location)): 101884 <= #\newline
run: maybe-coerce/expect-stdin/read-move 9: (((reply)) ((5 location)) ((4 boolean)))
mem: ((5 location)) => 

mem: ((4 boolean)) => t
run: expect-stdin/read-move 3: #\newline => ((4 character))
mem: ((4 character)): 101728 <= #\newline
run: expect-stdin/read-move 4: (((5 character)) <- ((next-input)))
arg: nil 1 (1031 #\newline)
run: expect-stdin/read-move 4: #\newline => ((5 character))
mem: ((5 character)): 101729 <= #\newline
run: expect-stdin/read-move 5: (((6 boolean)) <- ((equal)) ((4 character)) ((5 character)))
mem: ((4 character)) => 

mem: ((5 character)) => 

run: expect-stdin/read-move 5: t => ((6 boolean))
mem: ((6 boolean)): 101730 <= t
run: expect-stdin/read-move 6: (((assert)) ((6 boolean)) ((expected character not found literal)))
mem: ((6 boolean)) => t
run: read-move 10: (((6 move-address)) <- ((new)) ((move literal)))
run: read-move 10: 101911 => ((6 move-address))
mem: ((6 move-address)): 101007 <= 101911
run: read-move 11: (((7 integer-integer-pair-address)) <- ((get-address)) ((6 move-address) (deref)) ((0 offset)))
run: read-move 11: 101911 => ((7 integer-integer-pair-address))
mem: ((7 integer-integer-pair-address)): 101008 <= 101911
run: read-move 12: (((8 integer-address)) <- ((get-address)) ((7 integer-integer-pair-address) (deref)) ((0 offset)))
run: read-move 12: 101911 => ((8 integer-address))
mem: ((8 integer-address)): 101009 <= 101911
run: read-move 13: (((8 integer-address) (deref)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 0
run: read-move 13: 0 => ((8 integer-address) (deref))
mem: ((8 integer-address) (deref)): 101911 <= 0
run: read-move 14: (((8 integer-address)) <- ((get-address)) ((7 integer-integer-pair-address) (deref)) ((1 offset)))
run: read-move 14: 101912 => ((8 integer-address))
mem: ((8 integer-address)): 101009 <= 101912
run: read-move 15: (((8 integer-address) (deref)) <- ((copy)) ((3 integer)))
mem: ((3 integer)) => 1
run: read-move 15: 1 => ((8 integer-address) (deref))
mem: ((8 integer-address) (deref)): 101912 <= 1
run: read-move 16: (((9 integer-integer-pair-address)) <- ((get-address)) ((6 move-address) (deref)) ((1 offset)))
run: read-move 16: 101913 => ((9 integer-integer-pair-address))
mem: ((9 integer-integer-pair-address)): 101010 <= 101913
run: read-move 17: (((8 integer-address)) <- ((get-address)) ((9 integer-integer-pair-address) (deref)) ((0 offset)))
run: read-move 17: 101913 => ((8 integer-address))
mem: ((8 integer-address)): 101009 <= 101913
run: read-move 18: (((8 integer-address) (deref)) <- ((copy)) ((4 integer)))
mem: ((4 integer)) => 0
run: read-move 18: 0 => ((8 integer-address) (deref))
mem: ((8 integer-address) (deref)): 101913 <= 0
run: read-move 19: (((8 integer-address)) <- ((get-address)) ((9 integer-integer-pair-address) (deref)) ((1 offset)))
run: read-move 19: 101914 => ((8 integer-address))
mem: ((8 integer-address)): 101009 <= 101914
run: read-move 20: (((8 integer-address) (deref)) <- ((copy)) ((5 integer)))
mem: ((5 integer)) => 3
run: read-move 20: 3 => ((8 integer-address) (deref))
mem: ((8 integer-address) (deref)): 101914 <= 3
run: read-move 21: (((reply)) ((6 move-address)))
mem: ((6 move-address)) => 101911
schedule: done with routine 
