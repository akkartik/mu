 101 run: assume-console [
    type [abc]
  ]
parse: instruction: type
parse:   ingredient: {name: "abc", properties: [_: "literal-string"]}
 101 run: run [
    editor-event-loop screen:address, console:address, 2:address:editor-data
  ]
parse: instruction: editor-event-loop
parse:   ingredient: {name: "screen", properties: ["screen": "address"]}
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   ingredient: {name: "2", properties: ["2": "address":"editor-data"]}
after-brace: recipe run1001
after-brace: editor-event-loop ...
 101 run: editor-event-loop screen:address, console:address, 2:address:editor-data
9999 mem: location 900 is 1009
9999 mem: location 901 is 1256
9999 mem: location 2 is 1000
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
 102 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1129
 102 run: console:address <- next-ingredient 
9999 mem: storing 1256 in location 1130
 102 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1131
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1130 is 1256
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1256 in location 1206
 103 run: break-unless x, 
9999 mem: location 1206 is 1256
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1206 is 1256
9999 mem: location 1256 is 0
9999 mem: location 1257 is 1243
9999 mem: location 1206 is 1256
9999 run: address to copy is 1256
9999 mem: storing 1256 in location 1207
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1206 is 1256
9999 mem: location 1256 is 0
9999 mem: location 1257 is 1243
9999 mem: location 1206 is 1256
9999 run: address to copy is 1257
9999 run: its type is address
9999 mem: location 1257 is 1243
9999 mem: storing 1243 in location 1208
 103 run: max:number <- length *buf
9999 mem: location 1208 is 1243
9999 mem: storing 3 in location 1209
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1207 is 1256
9999 mem: location 1256 is 0
9999 mem: location 1209 is 3
9999 mem: storing 0 in location 1210
 103 run: break-unless done?, 
9999 mem: location 1210 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index *buf, *idx
9999 mem: location 1208 is 1243
9999 mem: location 1207 is 1256
9999 mem: location 1256 is 0
9999 run: address to copy is 1244
9999 run: its type is event
9999 mem: location 1244 is 0
9999 mem: location 1245 is 97
9999 mem: location 1246 is 0
9999 mem: location 1247 is 0
9999 mem: storing 0 in location 1212
9999 mem: storing 97 in location 1213
9999 mem: storing 0 in location 1214
9999 mem: storing 0 in location 1215
 103 run: *idx <- add *idx, 1
9999 mem: location 1207 is 1256
9999 mem: location 1256 is 0
9999 mem: location 1207 is 1256
9999 mem: storing 1 in location 1256
 103 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1212 is 0
9999 mem: location 1213 is 97
9999 mem: location 1214 is 0
9999 mem: location 1215 is 0
9999 mem: location 1206 is 1256
9999 run: result 0 is [0, 97, 0, 0]
9999 run: result 1 is 1256
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1132
9999 mem: storing 97 in location 1133
9999 mem: storing 0 in location 1134
9999 mem: storing 0 in location 1135
9999 mem: storing 1256 in location 1130
9999 mem: storing 1 in location 1136
9999 mem: storing 0 in location 1137
 102 run: loop-unless found?, 
9999 mem: location 1136 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1137 is 0
9999 run: jump-if fell through
 102 run: trace 10, [app], [next-event]
  10 app: next-event
 102 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1132 is 0
9999 mem: location 1133 is 97
9999 mem: location 1134 is 0
9999 mem: location 1135 is 0
9999 mem: storing 0 in location 1138
 102 run: break-unless t, 
9999 mem: location 1138 is 0
9999 run: jumping to instruction 15
 102 run: break-if t, 
9999 mem: location 1138 is 0
9999 run: jump-if fell through
 102 run: handle-keyboard-event screen, editor, e
9999 mem: location 1129 is 1009
9999 mem: location 1131 is 1000
9999 mem: location 1132 is 0
9999 mem: location 1133 is 97
9999 mem: location 1134 is 0
9999 mem: location 1135 is 0
schedule: handle-keyboard-event/editor-event-loop/run1001/scenario-editor-inserts-characters-into-empty-editor
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 56
9999 mem: new alloc: 1258
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1260
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1261
 103 run: e:event <- next-ingredient 
9999 mem: storing 0 in location 1262
9999 mem: storing 97 in location 1263
9999 mem: storing 0 in location 1264
9999 mem: storing 0 in location 1265
 103 run: jump-if editor, 1:offset
9999 mem: location 1261 is 1000
9999 run: jumping to instruction 6
 103 run: hide-screen screen
9999 mem: location 1260 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1315
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1317
 104 run: break-unless screen, 
9999 mem: location 1317 is 1009
9999 run: jump-unless fell through
 104 run: reply screen
9999 mem: location 1317 is 1009
 103 run: screen-height:number <- screen-height screen
9999 mem: location 1260 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1188
 104 run: break-unless sc, 
9999 mem: location 1188 is 1009
9999 run: jump-unless fell through
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1188 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1188 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1189
 104 run: reply height
9999 mem: location 1189 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1266
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1267
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 4
9999 mem: storing 4 in location 1268
 103 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1269
 103 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1270
 103 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1271
 103 run: save-row:number <- copy *cursor-row
9999 mem: location 1270 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1270 is 1006
9999 mem: location 1270 is 1006
9999 mem: storing 1 in location 1272
 103 run: save-column:number <- copy *cursor-column
9999 mem: location 1271 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1271 is 1007
9999 mem: location 1271 is 1007
9999 mem: storing 0 in location 1273
 103 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1262 is 0
9999 mem: location 1263 is 97
9999 mem: location 1264 is 0
9999 mem: location 1265 is 0
9999 mem: storing 1263 in location 1274
 103 run: break-unless c, 
9999 mem: location 1274 is 1263
9999 run: jump-unless fell through
 103 run: ctrl-b?:boolean <- equal *c, 2/ctrl-f
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 97
9999 mem: storing 0 in location 1275
 103 run: break-unless ctrl-b?, 
9999 mem: location 1275 is 0
9999 run: jumping to instruction 32
 103 run: ctrl-f?:boolean <- equal *c, 6/ctrl-f
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 97
9999 mem: storing 0 in location 1278
 103 run: break-unless ctrl-f?, 
9999 mem: location 1278 is 0
9999 run: jumping to instruction 46
 103 run: ctrl-k?:boolean <- equal *c, 11/ctrl-k
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 97
9999 mem: storing 0 in location 1279
 103 run: break-unless ctrl-k?, 
9999 mem: location 1279 is 0
9999 run: jumping to instruction 60
 103 run: ctrl-u?:boolean <- equal *c, 21/ctrl-u
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 97
9999 mem: storing 0 in location 1280
 103 run: break-unless ctrl-u?, 
9999 mem: location 1280 is 0
9999 run: jumping to instruction 74
 103 run: ctrl-e?:boolean <- equal *c, 5/ctrl-e
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 97
9999 mem: storing 0 in location 1281
 103 run: break-unless ctrl-e?, 
9999 mem: location 1281 is 0
9999 run: jumping to instruction 88
 103 run: ctrl-a?:boolean <- equal *c, 1/ctrl-a
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 97
9999 mem: storing 0 in location 1282
 103 run: break-unless ctrl-a?, 
9999 mem: location 1282 is 0
9999 run: jumping to instruction 102
 103 run: backspace?:boolean <- equal *c, 8/backspace
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 97
9999 mem: storing 0 in location 1283
 103 run: break-unless backspace?, 
9999 mem: location 1283 is 0
9999 run: jumping to instruction 116
 103 run: tab?:boolean <- equal *c, 9/tab
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 97
9999 mem: storing 0 in location 1284
 103 run: break-unless tab?, 
9999 mem: location 1284 is 0
9999 run: jumping to instruction 131
 103 run: regular-character?:boolean <- greater-or-equal *c, 32/space
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 97
9999 mem: storing 1 in location 1285
 103 run: newline?:boolean <- equal *c, 10/newline
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 97
9999 mem: storing 0 in location 1286
 103 run: regular-character? <- or regular-character?, newline?
9999 mem: location 1285 is 1
9999 mem: location 1286 is 0
9999 mem: storing 1 in location 1285
 103 run: break-if regular-character?, 
9999 mem: location 1285 is 1
9999 run: jumping to instruction 142
 103 run: editor, screen <- insert-at-cursor editor, *c, screen
9999 mem: location 1261 is 1000
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 97
9999 mem: location 1260 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 35
9999 mem: new alloc: 1318
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1320
 104 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1321
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1322
 104 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1323
 104 run: insert-duplex c, *before-cursor
9999 mem: location 1321 is 97
9999 mem: location 1323 is 1003
9999 mem: location 1003 is 1147
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 105 run: x:location <- next-ingredient 
9999 mem: storing 97 in location 1141
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1147 in location 1142
 105 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: storing 1315 in location 1143
 105 run: val:address:location <- get-address *new-node, value:offset
9999 mem: location 1143 is 1315
9999 mem: location 1315 is 0
9999 mem: location 1316 is 0
9999 mem: location 1317 is 0
9999 mem: location 1143 is 1315
9999 run: address to copy is 1315
9999 mem: storing 1315 in location 1144
 105 run: *val <- copy x
9999 mem: location 1141 is 97
9999 mem: location 1144 is 1315
9999 mem: location 1144 is 1315
9999 mem: storing 97 in location 1315
 105 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1142 is 1147
9999 mem: location 1147 is 167
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1142 is 1147
9999 run: address to copy is 1148
9999 run: its type is address
9999 mem: location 1148 is 0
9999 mem: storing 0 in location 1145
 105 run: y:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1142 is 1147
9999 mem: location 1147 is 167
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1142 is 1147
9999 run: address to copy is 1148
9999 mem: storing 1148 in location 1146
 105 run: *y <- copy new-node
9999 mem: location 1143 is 1315
9999 mem: location 1146 is 1148
9999 mem: location 1146 is 1148
9999 mem: storing 1315 in location 1148
 105 run: y <- get-address *new-node, prev:offset
9999 mem: location 1143 is 1315
9999 mem: location 1315 is 97
9999 mem: location 1316 is 0
9999 mem: location 1317 is 0
9999 mem: location 1143 is 1315
9999 run: address to copy is 1317
9999 mem: storing 1317 in location 1146
 105 run: *y <- copy in
9999 mem: location 1142 is 1147
9999 mem: location 1146 is 1317
9999 mem: location 1146 is 1317
9999 mem: storing 1147 in location 1317
 105 run: y <- get-address *new-node, next:offset
9999 mem: location 1143 is 1315
9999 mem: location 1315 is 97
9999 mem: location 1316 is 0
9999 mem: location 1317 is 1147
9999 mem: location 1143 is 1315
9999 run: address to copy is 1316
9999 mem: storing 1316 in location 1146
 105 run: *y <- copy next-node
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1316
9999 mem: location 1146 is 1316
9999 mem: storing 0 in location 1316
 105 run: jump-if next-node, 1:offset
9999 mem: location 1145 is 0
9999 run: jump-if fell through
 105 run: reply new-node
9999 mem: location 1143 is 1315
 104 run: *before-cursor <- next-duplex *before-cursor
9999 mem: location 1323 is 1003
9999 mem: location 1003 is 1147
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1147 in location 1188
 105 run: jump-if in, 1:offset
9999 mem: location 1188 is 1147
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1188 is 1147
9999 mem: location 1147 is 167
9999 mem: location 1148 is 1315
9999 mem: location 1149 is 0
9999 mem: location 1188 is 1147
9999 run: address to copy is 1148
9999 run: its type is address
9999 mem: location 1148 is 1315
9999 mem: storing 1315 in location 1189
 105 run: reply result
9999 mem: location 1189 is 1315
9999 run: result 0 is 1315
9999 mem: location 1323 is 1003
9999 mem: storing 1315 in location 1003
 104 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1315
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1324
 104 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1315
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1325
 104 run: left:number <- get *editor, left:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1315
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1326
 104 run: right:number <- get *editor, right:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1315
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 4
9999 mem: storing 4 in location 1327
 104 run: save-row:number <- copy *cursor-row
9999 mem: location 1324 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1324 is 1006
9999 mem: location 1324 is 1006
9999 mem: storing 1 in location 1328
 104 run: save-column:number <- copy *cursor-column
9999 mem: location 1325 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1325 is 1007
9999 mem: location 1325 is 1007
9999 mem: storing 0 in location 1329
 104 run: screen-width:number <- screen-width screen
9999 mem: location 1322 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1188
 105 run: break-unless sc, 
9999 mem: location 1188 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1188 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1188 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1189
 105 run: reply width
9999 mem: location 1189 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1330
 104 run: screen-height:number <- screen-height screen
9999 mem: location 1322 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1188
 105 run: break-unless sc, 
9999 mem: location 1188 is 1009
9999 run: jump-unless fell through
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1188 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1188 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1189
 105 run: reply height
9999 mem: location 1189 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1331
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1321 is 97
9999 mem: storing 0 in location 1332
 104 run: break-unless newline?, 
9999 mem: location 1332 is 0
9999 run: jumping to instruction 53
 104 run: wrap-column:number <- subtract right, 1
9999 mem: location 1327 is 4
9999 mem: storing 3 in location 1344
 104 run: at-wrap?:boolean <- greater-or-equal *cursor-column, wrap-column
9999 mem: location 1325 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1344 is 3
9999 mem: storing 0 in location 1345
 104 run: break-unless at-wrap?, 
9999 mem: location 1345 is 0
9999 run: jumping to instruction 77
 104 run: *cursor-column <- add *cursor-column, 1
9999 mem: location 1325 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1325 is 1007
9999 mem: storing 1 in location 1007
 104 run: next:address:duplex-list <- next-duplex *before-cursor
9999 mem: location 1323 is 1003
9999 mem: location 1003 is 1315
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1315 in location 1188
 105 run: jump-if in, 1:offset
9999 mem: location 1188 is 1315
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1188 is 1315
9999 mem: location 1315 is 97
9999 mem: location 1316 is 0
9999 mem: location 1317 is 1147
9999 mem: location 1188 is 1315
9999 run: address to copy is 1316
9999 run: its type is address
9999 mem: location 1316 is 0
9999 mem: storing 0 in location 1189
 105 run: reply result
9999 mem: location 1189 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1346
 104 run: at-end?:boolean <- equal next, 0/null
9999 mem: location 1346 is 0
9999 mem: storing 1 in location 1347
 104 run: break-unless at-end?, 
9999 mem: location 1347 is 1
9999 run: jump-unless fell through
 104 run: bottom:number <- subtract screen-height, 1
9999 mem: location 1331 is 5
9999 mem: storing 4 in location 1348
 104 run: at-bottom?:boolean <- equal save-row, bottom
9999 mem: location 1328 is 1
9999 mem: location 1348 is 4
9999 mem: storing 0 in location 1349
 104 run: at-right?:boolean <- equal save-column, right
9999 mem: location 1329 is 0
9999 mem: location 1327 is 4
9999 mem: storing 0 in location 1350
 104 run: overflow?:boolean <- and at-bottom?, at-right?
9999 mem: location 1349 is 0
9999 mem: location 1350 is 0
9999 mem: storing 0 in location 1351
 104 run: break-if overflow?, 
9999 mem: location 1351 is 0
9999 run: jump-if fell through
 104 run: move-cursor screen, save-row, save-column
9999 mem: location 1322 is 1009
9999 mem: location 1328 is 1
9999 mem: location 1329 is 0
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1192
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1193
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 0 in location 1194
 105 run: break-unless sc, 
9999 mem: location 1192 is 1009
9999 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1192 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 2
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1192 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1195
 105 run: *row <- copy new-row
9999 mem: location 1193 is 1
9999 mem: location 1195 is 1011
9999 mem: location 1195 is 1011
9999 mem: storing 1 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1192 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1192 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1196
 105 run: *column <- copy new-column
9999 mem: location 1194 is 0
9999 mem: location 1196 is 1012
9999 mem: location 1196 is 1012
9999 mem: storing 0 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1192 is 1009
 104 run: print-character screen, c
9999 mem: location 1322 is 1009
9999 mem: location 1321 is 97
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1219
 105 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1220
 105 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1221
9999 mem: storing 0 in location 1222
 105 run: break-if color-found?, 
9999 mem: location 1222 is 0
9999 run: jump-if fell through
 105 run: color <- copy 7/white
9999 mem: storing 7 in location 1221
 105 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1223
9999 mem: storing 0 in location 1224
 105 run: break-if bg-color-found?, 
9999 mem: location 1224 is 0
9999 run: jump-if fell through
 105 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1223
 105 run: trace 90, [print-character], c
9999 mem: location 1220 is 97
  90 print-character: 97 
 105 run: break-unless sc, 
9999 mem: location 1219 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1225
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1226
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1227
 105 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 22
 105 run: legal? <- lesser-than *row, height
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1226 is 5
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 25
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1229
 105 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 29
 105 run: legal? <- lesser-than *column, width
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1225 is 10
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 32
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1220 is 97
9999 mem: storing 0 in location 1230
 105 run: break-unless newline?, 
9999 mem: location 1230 is 0
9999 run: jumping to instruction 43
 105 run: index:number <- multiply *row, width
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1225 is 10
9999 mem: storing 10 in location 1233
 105 run: index <- add index, *column
9999 mem: location 1233 is 10
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 10 in location 1233
 105 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1234
 105 run: len:number <- length *buf
9999 mem: location 1234 is 1014
9999 mem: storing 50 in location 1235
 105 run: backspace?:boolean <- equal c, 8
9999 mem: location 1220 is 97
9999 mem: storing 0 in location 1236
 105 run: break-unless backspace?, 
9999 mem: location 1236 is 0
9999 run: jumping to instruction 63
 105 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1234 is 1014
9999 mem: location 1233 is 10
9999 mem: storing 1035 in location 1238
 105 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1238 is 1035
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1238 is 1035
9999 run: address to copy is 1035
9999 mem: storing 1035 in location 1239
 105 run: *cursor-contents <- copy c
9999 mem: location 1220 is 97
9999 mem: location 1239 is 1035
9999 mem: location 1239 is 1035
9999 mem: storing 97 in location 1035
 105 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1238 is 1035
9999 mem: location 1035 is 97
9999 mem: location 1036 is 7
9999 mem: location 1238 is 1035
9999 run: address to copy is 1036
9999 mem: storing 1036 in location 1240
 105 run: *cursor-color <- copy color
9999 mem: location 1221 is 7
9999 mem: location 1240 is 1036
9999 mem: location 1240 is 1036
9999 mem: storing 7 in location 1036
 105 run: right:number <- subtract width, 1
9999 mem: location 1225 is 10
9999 mem: storing 9 in location 1241
 105 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1241 is 9
9999 mem: storing 0 in location 1242
 105 run: break-if at-right?, 
9999 mem: location 1242 is 0
9999 run: jump-if fell through
 105 run: *column <- add *column, 1
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1229 is 1012
9999 mem: storing 1 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1219 is 1009
 104 run: reply editor/same-as-ingredient:0, screen/same-as-ingredient:2
9999 mem: location 1320 is 1000
9999 mem: location 1322 is 1009
9999 run: result 0 is 1000
9999 run: result 1 is 1009
9999 mem: storing 1000 in location 1261
9999 mem: storing 1009 in location 1260
 103 run: screen <- move-cursor screen, *cursor-row, *cursor-column
9999 mem: location 1260 is 1009
9999 mem: location 1270 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1271 is 1007
9999 mem: location 1007 is 1
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1192
 104 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1193
 104 run: new-column:number <- next-ingredient 
9999 mem: storing 1 in location 1194
 104 run: break-unless sc, 
9999 mem: location 1192 is 1009
9999 run: jump-unless fell through
 104 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1192 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1192 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1195
 104 run: *row <- copy new-row
9999 mem: location 1193 is 1
9999 mem: location 1195 is 1011
9999 mem: location 1195 is 1011
9999 mem: storing 1 in location 1011
 104 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1192 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1192 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1196
 104 run: *column <- copy new-column
9999 mem: location 1194 is 1
9999 mem: location 1196 is 1012
9999 mem: location 1196 is 1012
9999 mem: storing 1 in location 1012
 104 run: reply sc/same-as-ingredient:0
9999 mem: location 1192 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1260
 103 run: show-screen screen
9999 mem: location 1260 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1354
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1356
 104 run: break-unless screen, 
9999 mem: location 1356 is 1009
9999 run: jump-unless fell through
 104 run: reply screen
9999 mem: location 1356 is 1009
 103 run: reply 
 102 run: loop 
9999 run: jumping to instruction 5
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1130 is 1256
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1256 in location 1206
 103 run: break-unless x, 
9999 mem: location 1206 is 1256
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1206 is 1256
9999 mem: location 1256 is 1
9999 mem: location 1257 is 1243
9999 mem: location 1206 is 1256
9999 run: address to copy is 1256
9999 mem: storing 1256 in location 1207
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1206 is 1256
9999 mem: location 1256 is 1
9999 mem: location 1257 is 1243
9999 mem: location 1206 is 1256
9999 run: address to copy is 1257
9999 run: its type is address
9999 mem: location 1257 is 1243
9999 mem: storing 1243 in location 1208
 103 run: max:number <- length *buf
9999 mem: location 1208 is 1243
9999 mem: storing 3 in location 1209
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1207 is 1256
9999 mem: location 1256 is 1
9999 mem: location 1209 is 3
9999 mem: storing 0 in location 1210
 103 run: break-unless done?, 
9999 mem: location 1210 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index *buf, *idx
9999 mem: location 1208 is 1243
9999 mem: location 1207 is 1256
9999 mem: location 1256 is 1
9999 run: address to copy is 1248
9999 run: its type is event
9999 mem: location 1248 is 0
9999 mem: location 1249 is 98
9999 mem: location 1250 is 0
9999 mem: location 1251 is 0
9999 mem: storing 0 in location 1212
9999 mem: storing 98 in location 1213
9999 mem: storing 0 in location 1214
9999 mem: storing 0 in location 1215
 103 run: *idx <- add *idx, 1
9999 mem: location 1207 is 1256
9999 mem: location 1256 is 1
9999 mem: location 1207 is 1256
9999 mem: storing 2 in location 1256
 103 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1212 is 0
9999 mem: location 1213 is 98
9999 mem: location 1214 is 0
9999 mem: location 1215 is 0
9999 mem: location 1206 is 1256
9999 run: result 0 is [0, 98, 0, 0]
9999 run: result 1 is 1256
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1132
9999 mem: storing 98 in location 1133
9999 mem: storing 0 in location 1134
9999 mem: storing 0 in location 1135
9999 mem: storing 1256 in location 1130
9999 mem: storing 1 in location 1136
9999 mem: storing 0 in location 1137
 102 run: loop-unless found?, 
9999 mem: location 1136 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1137 is 0
9999 run: jump-if fell through
 102 run: trace 10, [app], [next-event]
  10 app: next-event
 102 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1132 is 0
9999 mem: location 1133 is 98
9999 mem: location 1134 is 0
9999 mem: location 1135 is 0
9999 mem: storing 0 in location 1138
 102 run: break-unless t, 
9999 mem: location 1138 is 0
9999 run: jumping to instruction 15
 102 run: break-if t, 
9999 mem: location 1138 is 0
9999 run: jump-if fell through
 102 run: handle-keyboard-event screen, editor, e
9999 mem: location 1129 is 1009
9999 mem: location 1131 is 1000
9999 mem: location 1132 is 0
9999 mem: location 1133 is 98
9999 mem: location 1134 is 0
9999 mem: location 1135 is 0
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 56
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1260
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1261
 103 run: e:event <- next-ingredient 
9999 mem: storing 0 in location 1262
9999 mem: storing 98 in location 1263
9999 mem: storing 0 in location 1264
9999 mem: storing 0 in location 1265
 103 run: jump-if editor, 1:offset
9999 mem: location 1261 is 1000
9999 run: jumping to instruction 6
 103 run: hide-screen screen
9999 mem: location 1260 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 2
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1356
 104 run: break-unless screen, 
9999 mem: location 1356 is 1009
9999 run: jump-unless fell through
 104 run: reply screen
9999 mem: location 1356 is 1009
 103 run: screen-height:number <- screen-height screen
9999 mem: location 1260 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1188
 104 run: break-unless sc, 
9999 mem: location 1188 is 1009
9999 run: jump-unless fell through
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1188 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1188 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1189
 104 run: reply height
9999 mem: location 1189 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1266
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1315
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1267
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1315
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 4
9999 mem: storing 4 in location 1268
 103 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1315
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1269
 103 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1315
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1270
 103 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1315
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1271
 103 run: save-row:number <- copy *cursor-row
9999 mem: location 1270 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1270 is 1006
9999 mem: location 1270 is 1006
9999 mem: storing 1 in location 1272
 103 run: save-column:number <- copy *cursor-column
9999 mem: location 1271 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1271 is 1007
9999 mem: location 1271 is 1007
9999 mem: storing 1 in location 1273
 103 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1262 is 0
9999 mem: location 1263 is 98
9999 mem: location 1264 is 0
9999 mem: location 1265 is 0
9999 mem: storing 1263 in location 1274
 103 run: break-unless c, 
9999 mem: location 1274 is 1263
9999 run: jump-unless fell through
 103 run: ctrl-b?:boolean <- equal *c, 2/ctrl-f
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 98
9999 mem: storing 0 in location 1275
 103 run: break-unless ctrl-b?, 
9999 mem: location 1275 is 0
9999 run: jumping to instruction 32
 103 run: ctrl-f?:boolean <- equal *c, 6/ctrl-f
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 98
9999 mem: storing 0 in location 1278
 103 run: break-unless ctrl-f?, 
9999 mem: location 1278 is 0
9999 run: jumping to instruction 46
 103 run: ctrl-k?:boolean <- equal *c, 11/ctrl-k
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 98
9999 mem: storing 0 in location 1279
 103 run: break-unless ctrl-k?, 
9999 mem: location 1279 is 0
9999 run: jumping to instruction 60
 103 run: ctrl-u?:boolean <- equal *c, 21/ctrl-u
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 98
9999 mem: storing 0 in location 1280
 103 run: break-unless ctrl-u?, 
9999 mem: location 1280 is 0
9999 run: jumping to instruction 74
 103 run: ctrl-e?:boolean <- equal *c, 5/ctrl-e
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 98
9999 mem: storing 0 in location 1281
 103 run: break-unless ctrl-e?, 
9999 mem: location 1281 is 0
9999 run: jumping to instruction 88
 103 run: ctrl-a?:boolean <- equal *c, 1/ctrl-a
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 98
9999 mem: storing 0 in location 1282
 103 run: break-unless ctrl-a?, 
9999 mem: location 1282 is 0
9999 run: jumping to instruction 102
 103 run: backspace?:boolean <- equal *c, 8/backspace
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 98
9999 mem: storing 0 in location 1283
 103 run: break-unless backspace?, 
9999 mem: location 1283 is 0
9999 run: jumping to instruction 116
 103 run: tab?:boolean <- equal *c, 9/tab
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 98
9999 mem: storing 0 in location 1284
 103 run: break-unless tab?, 
9999 mem: location 1284 is 0
9999 run: jumping to instruction 131
 103 run: regular-character?:boolean <- greater-or-equal *c, 32/space
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 98
9999 mem: storing 1 in location 1285
 103 run: newline?:boolean <- equal *c, 10/newline
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 98
9999 mem: storing 0 in location 1286
 103 run: regular-character? <- or regular-character?, newline?
9999 mem: location 1285 is 1
9999 mem: location 1286 is 0
9999 mem: storing 1 in location 1285
 103 run: break-if regular-character?, 
9999 mem: location 1285 is 1
9999 run: jumping to instruction 142
 103 run: editor, screen <- insert-at-cursor editor, *c, screen
9999 mem: location 1261 is 1000
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 98
9999 mem: location 1260 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 35
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1320
 104 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 1321
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1322
 104 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1315
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1323
 104 run: insert-duplex c, *before-cursor
9999 mem: location 1321 is 98
9999 mem: location 1323 is 1003
9999 mem: location 1003 is 1315
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 105 run: x:location <- next-ingredient 
9999 mem: storing 98 in location 1141
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1315 in location 1142
 105 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: storing 1354 in location 1143
 105 run: val:address:location <- get-address *new-node, value:offset
9999 mem: location 1143 is 1354
9999 mem: location 1354 is 0
9999 mem: location 1355 is 0
9999 mem: location 1356 is 0
9999 mem: location 1143 is 1354
9999 run: address to copy is 1354
9999 mem: storing 1354 in location 1144
 105 run: *val <- copy x
9999 mem: location 1141 is 98
9999 mem: location 1144 is 1354
9999 mem: location 1144 is 1354
9999 mem: storing 98 in location 1354
 105 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1142 is 1315
9999 mem: location 1315 is 97
9999 mem: location 1316 is 0
9999 mem: location 1317 is 1147
9999 mem: location 1142 is 1315
9999 run: address to copy is 1316
9999 run: its type is address
9999 mem: location 1316 is 0
9999 mem: storing 0 in location 1145
 105 run: y:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1142 is 1315
9999 mem: location 1315 is 97
9999 mem: location 1316 is 0
9999 mem: location 1317 is 1147
9999 mem: location 1142 is 1315
9999 run: address to copy is 1316
9999 mem: storing 1316 in location 1146
 105 run: *y <- copy new-node
9999 mem: location 1143 is 1354
9999 mem: location 1146 is 1316
9999 mem: location 1146 is 1316
9999 mem: storing 1354 in location 1316
 105 run: y <- get-address *new-node, prev:offset
9999 mem: location 1143 is 1354
9999 mem: location 1354 is 98
9999 mem: location 1355 is 0
9999 mem: location 1356 is 0
9999 mem: location 1143 is 1354
9999 run: address to copy is 1356
9999 mem: storing 1356 in location 1146
 105 run: *y <- copy in
9999 mem: location 1142 is 1315
9999 mem: location 1146 is 1356
9999 mem: location 1146 is 1356
9999 mem: storing 1315 in location 1356
 105 run: y <- get-address *new-node, next:offset
9999 mem: location 1143 is 1354
9999 mem: location 1354 is 98
9999 mem: location 1355 is 0
9999 mem: location 1356 is 1315
9999 mem: location 1143 is 1354
9999 run: address to copy is 1355
9999 mem: storing 1355 in location 1146
 105 run: *y <- copy next-node
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1355
9999 mem: location 1146 is 1355
9999 mem: storing 0 in location 1355
 105 run: jump-if next-node, 1:offset
9999 mem: location 1145 is 0
9999 run: jump-if fell through
 105 run: reply new-node
9999 mem: location 1143 is 1354
 104 run: *before-cursor <- next-duplex *before-cursor
9999 mem: location 1323 is 1003
9999 mem: location 1003 is 1315
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1315 in location 1188
 105 run: jump-if in, 1:offset
9999 mem: location 1188 is 1315
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1188 is 1315
9999 mem: location 1315 is 97
9999 mem: location 1316 is 1354
9999 mem: location 1317 is 1147
9999 mem: location 1188 is 1315
9999 run: address to copy is 1316
9999 run: its type is address
9999 mem: location 1316 is 1354
9999 mem: storing 1354 in location 1189
 105 run: reply result
9999 mem: location 1189 is 1354
9999 run: result 0 is 1354
9999 mem: location 1323 is 1003
9999 mem: storing 1354 in location 1003
 104 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1354
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1324
 104 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1354
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1325
 104 run: left:number <- get *editor, left:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1354
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1326
 104 run: right:number <- get *editor, right:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1354
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 4
9999 mem: storing 4 in location 1327
 104 run: save-row:number <- copy *cursor-row
9999 mem: location 1324 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1324 is 1006
9999 mem: location 1324 is 1006
9999 mem: storing 1 in location 1328
 104 run: save-column:number <- copy *cursor-column
9999 mem: location 1325 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1325 is 1007
9999 mem: location 1325 is 1007
9999 mem: storing 1 in location 1329
 104 run: screen-width:number <- screen-width screen
9999 mem: location 1322 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1188
 105 run: break-unless sc, 
9999 mem: location 1188 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1188 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1188 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1189
 105 run: reply width
9999 mem: location 1189 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1330
 104 run: screen-height:number <- screen-height screen
9999 mem: location 1322 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1188
 105 run: break-unless sc, 
9999 mem: location 1188 is 1009
9999 run: jump-unless fell through
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1188 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1188 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1189
 105 run: reply height
9999 mem: location 1189 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1331
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1321 is 98
9999 mem: storing 0 in location 1332
 104 run: break-unless newline?, 
9999 mem: location 1332 is 0
9999 run: jumping to instruction 53
 104 run: wrap-column:number <- subtract right, 1
9999 mem: location 1327 is 4
9999 mem: storing 3 in location 1344
 104 run: at-wrap?:boolean <- greater-or-equal *cursor-column, wrap-column
9999 mem: location 1325 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1344 is 3
9999 mem: storing 0 in location 1345
 104 run: break-unless at-wrap?, 
9999 mem: location 1345 is 0
9999 run: jumping to instruction 77
 104 run: *cursor-column <- add *cursor-column, 1
9999 mem: location 1325 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1325 is 1007
9999 mem: storing 2 in location 1007
 104 run: next:address:duplex-list <- next-duplex *before-cursor
9999 mem: location 1323 is 1003
9999 mem: location 1003 is 1354
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1354 in location 1188
 105 run: jump-if in, 1:offset
9999 mem: location 1188 is 1354
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1188 is 1354
9999 mem: location 1354 is 98
9999 mem: location 1355 is 0
9999 mem: location 1356 is 1315
9999 mem: location 1188 is 1354
9999 run: address to copy is 1355
9999 run: its type is address
9999 mem: location 1355 is 0
9999 mem: storing 0 in location 1189
 105 run: reply result
9999 mem: location 1189 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1346
 104 run: at-end?:boolean <- equal next, 0/null
9999 mem: location 1346 is 0
9999 mem: storing 1 in location 1347
 104 run: break-unless at-end?, 
9999 mem: location 1347 is 1
9999 run: jump-unless fell through
 104 run: bottom:number <- subtract screen-height, 1
9999 mem: location 1331 is 5
9999 mem: storing 4 in location 1348
 104 run: at-bottom?:boolean <- equal save-row, bottom
9999 mem: location 1328 is 1
9999 mem: location 1348 is 4
9999 mem: storing 0 in location 1349
 104 run: at-right?:boolean <- equal save-column, right
9999 mem: location 1329 is 1
9999 mem: location 1327 is 4
9999 mem: storing 0 in location 1350
 104 run: overflow?:boolean <- and at-bottom?, at-right?
9999 mem: location 1349 is 0
9999 mem: location 1350 is 0
9999 mem: storing 0 in location 1351
 104 run: break-if overflow?, 
9999 mem: location 1351 is 0
9999 run: jump-if fell through
 104 run: move-cursor screen, save-row, save-column
9999 mem: location 1322 is 1009
9999 mem: location 1328 is 1
9999 mem: location 1329 is 1
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1192
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1193
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 1 in location 1194
 105 run: break-unless sc, 
9999 mem: location 1192 is 1009
9999 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1192 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1192 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1195
 105 run: *row <- copy new-row
9999 mem: location 1193 is 1
9999 mem: location 1195 is 1011
9999 mem: location 1195 is 1011
9999 mem: storing 1 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1192 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1192 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1196
 105 run: *column <- copy new-column
9999 mem: location 1194 is 1
9999 mem: location 1196 is 1012
9999 mem: location 1196 is 1012
9999 mem: storing 1 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1192 is 1009
 104 run: print-character screen, c
9999 mem: location 1322 is 1009
9999 mem: location 1321 is 98
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1219
 105 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 1220
 105 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1221
9999 mem: storing 0 in location 1222
 105 run: break-if color-found?, 
9999 mem: location 1222 is 0
9999 run: jump-if fell through
 105 run: color <- copy 7/white
9999 mem: storing 7 in location 1221
 105 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1223
9999 mem: storing 0 in location 1224
 105 run: break-if bg-color-found?, 
9999 mem: location 1224 is 0
9999 run: jump-if fell through
 105 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1223
 105 run: trace 90, [print-character], c
9999 mem: location 1220 is 98
  90 print-character: 98 
 105 run: break-unless sc, 
9999 mem: location 1219 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1225
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1226
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1227
 105 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 22
 105 run: legal? <- lesser-than *row, height
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1226 is 5
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 25
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1229
 105 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 29
 105 run: legal? <- lesser-than *column, width
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1225 is 10
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 32
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1220 is 98
9999 mem: storing 0 in location 1230
 105 run: break-unless newline?, 
9999 mem: location 1230 is 0
9999 run: jumping to instruction 43
 105 run: index:number <- multiply *row, width
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1225 is 10
9999 mem: storing 10 in location 1233
 105 run: index <- add index, *column
9999 mem: location 1233 is 10
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 11 in location 1233
 105 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1234
 105 run: len:number <- length *buf
9999 mem: location 1234 is 1014
9999 mem: storing 50 in location 1235
 105 run: backspace?:boolean <- equal c, 8
9999 mem: location 1220 is 98
9999 mem: storing 0 in location 1236
 105 run: break-unless backspace?, 
9999 mem: location 1236 is 0
9999 run: jumping to instruction 63
 105 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1234 is 1014
9999 mem: location 1233 is 11
9999 mem: storing 1037 in location 1238
 105 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1238 is 1037
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1238 is 1037
9999 run: address to copy is 1037
9999 mem: storing 1037 in location 1239
 105 run: *cursor-contents <- copy c
9999 mem: location 1220 is 98
9999 mem: location 1239 is 1037
9999 mem: location 1239 is 1037
9999 mem: storing 98 in location 1037
 105 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1238 is 1037
9999 mem: location 1037 is 98
9999 mem: location 1038 is 7
9999 mem: location 1238 is 1037
9999 run: address to copy is 1038
9999 mem: storing 1038 in location 1240
 105 run: *cursor-color <- copy color
9999 mem: location 1221 is 7
9999 mem: location 1240 is 1038
9999 mem: location 1240 is 1038
9999 mem: storing 7 in location 1038
 105 run: right:number <- subtract width, 1
9999 mem: location 1225 is 10
9999 mem: storing 9 in location 1241
 105 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1241 is 9
9999 mem: storing 0 in location 1242
 105 run: break-if at-right?, 
9999 mem: location 1242 is 0
9999 run: jump-if fell through
 105 run: *column <- add *column, 1
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1229 is 1012
9999 mem: storing 2 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1219 is 1009
 104 run: reply editor/same-as-ingredient:0, screen/same-as-ingredient:2
9999 mem: location 1320 is 1000
9999 mem: location 1322 is 1009
9999 run: result 0 is 1000
9999 run: result 1 is 1009
9999 mem: storing 1000 in location 1261
9999 mem: storing 1009 in location 1260
 103 run: screen <- move-cursor screen, *cursor-row, *cursor-column
9999 mem: location 1260 is 1009
9999 mem: location 1270 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1271 is 1007
9999 mem: location 1007 is 2
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1192
 104 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1193
 104 run: new-column:number <- next-ingredient 
9999 mem: storing 2 in location 1194
 104 run: break-unless sc, 
9999 mem: location 1192 is 1009
9999 run: jump-unless fell through
 104 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1192 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1192 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1195
 104 run: *row <- copy new-row
9999 mem: location 1193 is 1
9999 mem: location 1195 is 1011
9999 mem: location 1195 is 1011
9999 mem: storing 1 in location 1011
 104 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1192 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1192 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1196
 104 run: *column <- copy new-column
9999 mem: location 1194 is 2
9999 mem: location 1196 is 1012
9999 mem: location 1196 is 1012
9999 mem: storing 2 in location 1012
 104 run: reply sc/same-as-ingredient:0
9999 mem: location 1192 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1260
 103 run: show-screen screen
9999 mem: location 1260 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1357
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1359
 104 run: break-unless screen, 
9999 mem: location 1359 is 1009
9999 run: jump-unless fell through
 104 run: reply screen
9999 mem: location 1359 is 1009
 103 run: reply 
 102 run: loop 
9999 run: jumping to instruction 5
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1130 is 1256
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1256 in location 1206
 103 run: break-unless x, 
9999 mem: location 1206 is 1256
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1206 is 1256
9999 mem: location 1256 is 2
9999 mem: location 1257 is 1243
9999 mem: location 1206 is 1256
9999 run: address to copy is 1256
9999 mem: storing 1256 in location 1207
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1206 is 1256
9999 mem: location 1256 is 2
9999 mem: location 1257 is 1243
9999 mem: location 1206 is 1256
9999 run: address to copy is 1257
9999 run: its type is address
9999 mem: location 1257 is 1243
9999 mem: storing 1243 in location 1208
 103 run: max:number <- length *buf
9999 mem: location 1208 is 1243
9999 mem: storing 3 in location 1209
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1207 is 1256
9999 mem: location 1256 is 2
9999 mem: location 1209 is 3
9999 mem: storing 0 in location 1210
 103 run: break-unless done?, 
9999 mem: location 1210 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index *buf, *idx
9999 mem: location 1208 is 1243
9999 mem: location 1207 is 1256
9999 mem: location 1256 is 2
9999 run: address to copy is 1252
9999 run: its type is event
9999 mem: location 1252 is 0
9999 mem: location 1253 is 99
9999 mem: location 1254 is 0
9999 mem: location 1255 is 0
9999 mem: storing 0 in location 1212
9999 mem: storing 99 in location 1213
9999 mem: storing 0 in location 1214
9999 mem: storing 0 in location 1215
 103 run: *idx <- add *idx, 1
9999 mem: location 1207 is 1256
9999 mem: location 1256 is 2
9999 mem: location 1207 is 1256
9999 mem: storing 3 in location 1256
 103 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1212 is 0
9999 mem: location 1213 is 99
9999 mem: location 1214 is 0
9999 mem: location 1215 is 0
9999 mem: location 1206 is 1256
9999 run: result 0 is [0, 99, 0, 0]
9999 run: result 1 is 1256
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1132
9999 mem: storing 99 in location 1133
9999 mem: storing 0 in location 1134
9999 mem: storing 0 in location 1135
9999 mem: storing 1256 in location 1130
9999 mem: storing 1 in location 1136
9999 mem: storing 0 in location 1137
 102 run: loop-unless found?, 
9999 mem: location 1136 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1137 is 0
9999 run: jump-if fell through
 102 run: trace 10, [app], [next-event]
  10 app: next-event
 102 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1132 is 0
9999 mem: location 1133 is 99
9999 mem: location 1134 is 0
9999 mem: location 1135 is 0
9999 mem: storing 0 in location 1138
schedule: editor-event-loop/run1001/scenario-editor-inserts-characters-into-empty-editor
 102 run: break-unless t, 
9999 mem: location 1138 is 0
9999 run: jumping to instruction 15
 102 run: break-if t, 
9999 mem: location 1138 is 0
9999 run: jump-if fell through
 102 run: handle-keyboard-event screen, editor, e
9999 mem: location 1129 is 1009
9999 mem: location 1131 is 1000
9999 mem: location 1132 is 0
9999 mem: location 1133 is 99
9999 mem: location 1134 is 0
9999 mem: location 1135 is 0
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 56
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1260
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1261
 103 run: e:event <- next-ingredient 
9999 mem: storing 0 in location 1262
9999 mem: storing 99 in location 1263
9999 mem: storing 0 in location 1264
9999 mem: storing 0 in location 1265
 103 run: jump-if editor, 1:offset
9999 mem: location 1261 is 1000
9999 run: jumping to instruction 6
 103 run: hide-screen screen
9999 mem: location 1260 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 2
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1359
 104 run: break-unless screen, 
9999 mem: location 1359 is 1009
9999 run: jump-unless fell through
 104 run: reply screen
9999 mem: location 1359 is 1009
 103 run: screen-height:number <- screen-height screen
9999 mem: location 1260 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1188
 104 run: break-unless sc, 
9999 mem: location 1188 is 1009
9999 run: jump-unless fell through
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1188 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1188 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1189
 104 run: reply height
9999 mem: location 1189 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1266
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1354
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1267
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1354
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 4
9999 mem: storing 4 in location 1268
 103 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1354
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1269
 103 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1354
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1270
 103 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1261 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1354
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1261 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1271
 103 run: save-row:number <- copy *cursor-row
9999 mem: location 1270 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1270 is 1006
9999 mem: location 1270 is 1006
9999 mem: storing 1 in location 1272
 103 run: save-column:number <- copy *cursor-column
9999 mem: location 1271 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1271 is 1007
9999 mem: location 1271 is 1007
9999 mem: storing 2 in location 1273
 103 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1262 is 0
9999 mem: location 1263 is 99
9999 mem: location 1264 is 0
9999 mem: location 1265 is 0
9999 mem: storing 1263 in location 1274
 103 run: break-unless c, 
9999 mem: location 1274 is 1263
9999 run: jump-unless fell through
 103 run: ctrl-b?:boolean <- equal *c, 2/ctrl-f
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 99
9999 mem: storing 0 in location 1275
 103 run: break-unless ctrl-b?, 
9999 mem: location 1275 is 0
9999 run: jumping to instruction 32
 103 run: ctrl-f?:boolean <- equal *c, 6/ctrl-f
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 99
9999 mem: storing 0 in location 1278
 103 run: break-unless ctrl-f?, 
9999 mem: location 1278 is 0
9999 run: jumping to instruction 46
 103 run: ctrl-k?:boolean <- equal *c, 11/ctrl-k
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 99
9999 mem: storing 0 in location 1279
 103 run: break-unless ctrl-k?, 
9999 mem: location 1279 is 0
9999 run: jumping to instruction 60
 103 run: ctrl-u?:boolean <- equal *c, 21/ctrl-u
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 99
9999 mem: storing 0 in location 1280
 103 run: break-unless ctrl-u?, 
9999 mem: location 1280 is 0
9999 run: jumping to instruction 74
 103 run: ctrl-e?:boolean <- equal *c, 5/ctrl-e
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 99
9999 mem: storing 0 in location 1281
 103 run: break-unless ctrl-e?, 
9999 mem: location 1281 is 0
9999 run: jumping to instruction 88
 103 run: ctrl-a?:boolean <- equal *c, 1/ctrl-a
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 99
9999 mem: storing 0 in location 1282
 103 run: break-unless ctrl-a?, 
9999 mem: location 1282 is 0
9999 run: jumping to instruction 102
 103 run: backspace?:boolean <- equal *c, 8/backspace
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 99
9999 mem: storing 0 in location 1283
 103 run: break-unless backspace?, 
9999 mem: location 1283 is 0
9999 run: jumping to instruction 116
 103 run: tab?:boolean <- equal *c, 9/tab
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 99
9999 mem: storing 0 in location 1284
 103 run: break-unless tab?, 
9999 mem: location 1284 is 0
9999 run: jumping to instruction 131
 103 run: regular-character?:boolean <- greater-or-equal *c, 32/space
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 99
9999 mem: storing 1 in location 1285
 103 run: newline?:boolean <- equal *c, 10/newline
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 99
9999 mem: storing 0 in location 1286
 103 run: regular-character? <- or regular-character?, newline?
9999 mem: location 1285 is 1
9999 mem: location 1286 is 0
9999 mem: storing 1 in location 1285
 103 run: break-if regular-character?, 
9999 mem: location 1285 is 1
9999 run: jumping to instruction 142
 103 run: editor, screen <- insert-at-cursor editor, *c, screen
9999 mem: location 1261 is 1000
9999 mem: location 1274 is 1263
9999 mem: location 1263 is 99
9999 mem: location 1260 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 35
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1320
 104 run: c:character <- next-ingredient 
9999 mem: storing 99 in location 1321
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1322
 104 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1354
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1323
 104 run: insert-duplex c, *before-cursor
9999 mem: location 1321 is 99
9999 mem: location 1323 is 1003
9999 mem: location 1003 is 1354
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 105 run: x:location <- next-ingredient 
9999 mem: storing 99 in location 1141
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1354 in location 1142
 105 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: storing 1357 in location 1143
 105 run: val:address:location <- get-address *new-node, value:offset
9999 mem: location 1143 is 1357
9999 mem: location 1357 is 0
9999 mem: location 1358 is 0
9999 mem: location 1359 is 0
9999 mem: location 1143 is 1357
9999 run: address to copy is 1357
9999 mem: storing 1357 in location 1144
 105 run: *val <- copy x
9999 mem: location 1141 is 99
9999 mem: location 1144 is 1357
9999 mem: location 1144 is 1357
9999 mem: storing 99 in location 1357
 105 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1142 is 1354
9999 mem: location 1354 is 98
9999 mem: location 1355 is 0
9999 mem: location 1356 is 1315
9999 mem: location 1142 is 1354
9999 run: address to copy is 1355
9999 run: its type is address
9999 mem: location 1355 is 0
9999 mem: storing 0 in location 1145
 105 run: y:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1142 is 1354
9999 mem: location 1354 is 98
9999 mem: location 1355 is 0
9999 mem: location 1356 is 1315
9999 mem: location 1142 is 1354
9999 run: address to copy is 1355
9999 mem: storing 1355 in location 1146
 105 run: *y <- copy new-node
9999 mem: location 1143 is 1357
9999 mem: location 1146 is 1355
9999 mem: location 1146 is 1355
9999 mem: storing 1357 in location 1355
 105 run: y <- get-address *new-node, prev:offset
9999 mem: location 1143 is 1357
9999 mem: location 1357 is 99
9999 mem: location 1358 is 0
9999 mem: location 1359 is 0
9999 mem: location 1143 is 1357
9999 run: address to copy is 1359
9999 mem: storing 1359 in location 1146
 105 run: *y <- copy in
9999 mem: location 1142 is 1354
9999 mem: location 1146 is 1359
9999 mem: location 1146 is 1359
9999 mem: storing 1354 in location 1359
 105 run: y <- get-address *new-node, next:offset
9999 mem: location 1143 is 1357
9999 mem: location 1357 is 99
9999 mem: location 1358 is 0
9999 mem: location 1359 is 1354
9999 mem: location 1143 is 1357
9999 run: address to copy is 1358
9999 mem: storing 1358 in location 1146
 105 run: *y <- copy next-node
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1358
9999 mem: location 1146 is 1358
9999 mem: storing 0 in location 1358
 105 run: jump-if next-node, 1:offset
9999 mem: location 1145 is 0
9999 run: jump-if fell through
 105 run: reply new-node
9999 mem: location 1143 is 1357
 104 run: *before-cursor <- next-duplex *before-cursor
9999 mem: location 1323 is 1003
9999 mem: location 1003 is 1354
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1354 in location 1188
 105 run: jump-if in, 1:offset
9999 mem: location 1188 is 1354
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1188 is 1354
9999 mem: location 1354 is 98
9999 mem: location 1355 is 1357
9999 mem: location 1356 is 1315
9999 mem: location 1188 is 1354
9999 run: address to copy is 1355
9999 run: its type is address
9999 mem: location 1355 is 1357
9999 mem: storing 1357 in location 1189
 105 run: reply result
9999 mem: location 1189 is 1357
9999 run: result 0 is 1357
9999 mem: location 1323 is 1003
9999 mem: storing 1357 in location 1003
 104 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1357
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1324
 104 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1357
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1325
 104 run: left:number <- get *editor, left:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1357
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1326
 104 run: right:number <- get *editor, right:offset
9999 mem: location 1320 is 1000
9999 mem: location 1000 is 1147
9999 mem: location 1001 is 1147
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1357
9999 mem: location 1004 is 0
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1320 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 4
9999 mem: storing 4 in location 1327
 104 run: save-row:number <- copy *cursor-row
9999 mem: location 1324 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1324 is 1006
9999 mem: location 1324 is 1006
9999 mem: storing 1 in location 1328
 104 run: save-column:number <- copy *cursor-column
9999 mem: location 1325 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1325 is 1007
9999 mem: location 1325 is 1007
9999 mem: storing 2 in location 1329
 104 run: screen-width:number <- screen-width screen
9999 mem: location 1322 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1188
 105 run: break-unless sc, 
9999 mem: location 1188 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1188 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1188 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1189
 105 run: reply width
9999 mem: location 1189 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1330
 104 run: screen-height:number <- screen-height screen
9999 mem: location 1322 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1188
 105 run: break-unless sc, 
9999 mem: location 1188 is 1009
9999 run: jump-unless fell through
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1188 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1188 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1189
 105 run: reply height
9999 mem: location 1189 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1331
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1321 is 99
9999 mem: storing 0 in location 1332
 104 run: break-unless newline?, 
9999 mem: location 1332 is 0
9999 run: jumping to instruction 53
 104 run: wrap-column:number <- subtract right, 1
9999 mem: location 1327 is 4
9999 mem: storing 3 in location 1344
 104 run: at-wrap?:boolean <- greater-or-equal *cursor-column, wrap-column
9999 mem: location 1325 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1344 is 3
9999 mem: storing 0 in location 1345
 104 run: break-unless at-wrap?, 
9999 mem: location 1345 is 0
9999 run: jumping to instruction 77
 104 run: *cursor-column <- add *cursor-column, 1
9999 mem: location 1325 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1325 is 1007
9999 mem: storing 3 in location 1007
 104 run: next:address:duplex-list <- next-duplex *before-cursor
9999 mem: location 1323 is 1003
9999 mem: location 1003 is 1357
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1357 in location 1188
 105 run: jump-if in, 1:offset
9999 mem: location 1188 is 1357
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1188 is 1357
9999 mem: location 1357 is 99
9999 mem: location 1358 is 0
9999 mem: location 1359 is 1354
9999 mem: location 1188 is 1357
9999 run: address to copy is 1358
9999 run: its type is address
9999 mem: location 1358 is 0
9999 mem: storing 0 in location 1189
 105 run: reply result
9999 mem: location 1189 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1346
 104 run: at-end?:boolean <- equal next, 0/null
9999 mem: location 1346 is 0
9999 mem: storing 1 in location 1347
 104 run: break-unless at-end?, 
9999 mem: location 1347 is 1
9999 run: jump-unless fell through
 104 run: bottom:number <- subtract screen-height, 1
9999 mem: location 1331 is 5
9999 mem: storing 4 in location 1348
 104 run: at-bottom?:boolean <- equal save-row, bottom
9999 mem: location 1328 is 1
9999 mem: location 1348 is 4
9999 mem: storing 0 in location 1349
 104 run: at-right?:boolean <- equal save-column, right
9999 mem: location 1329 is 2
9999 mem: location 1327 is 4
9999 mem: storing 0 in location 1350
 104 run: overflow?:boolean <- and at-bottom?, at-right?
9999 mem: location 1349 is 0
9999 mem: location 1350 is 0
9999 mem: storing 0 in location 1351
 104 run: break-if overflow?, 
9999 mem: location 1351 is 0
9999 run: jump-if fell through
 104 run: move-cursor screen, save-row, save-column
9999 mem: location 1322 is 1009
9999 mem: location 1328 is 1
9999 mem: location 1329 is 2
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1192
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1193
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 2 in location 1194
 105 run: break-unless sc, 
9999 mem: location 1192 is 1009
9999 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1192 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1192 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1195
 105 run: *row <- copy new-row
9999 mem: location 1193 is 1
9999 mem: location 1195 is 1011
9999 mem: location 1195 is 1011
9999 mem: storing 1 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1192 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1192 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1196
 105 run: *column <- copy new-column
9999 mem: location 1194 is 2
9999 mem: location 1196 is 1012
9999 mem: location 1196 is 1012
9999 mem: storing 2 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1192 is 1009
 104 run: print-character screen, c
9999 mem: location 1322 is 1009
9999 mem: location 1321 is 99
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1219
 105 run: c:character <- next-ingredient 
9999 mem: storing 99 in location 1220
 105 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1221
9999 mem: storing 0 in location 1222
 105 run: break-if color-found?, 
9999 mem: location 1222 is 0
9999 run: jump-if fell through
 105 run: color <- copy 7/white
9999 mem: storing 7 in location 1221
 105 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1223
9999 mem: storing 0 in location 1224
 105 run: break-if bg-color-found?, 
9999 mem: location 1224 is 0
9999 run: jump-if fell through
 105 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1223
 105 run: trace 90, [print-character], c
9999 mem: location 1220 is 99
  90 print-character: 99 
 105 run: break-unless sc, 
9999 mem: location 1219 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1225
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1226
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1227
 105 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 22
 105 run: legal? <- lesser-than *row, height
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1226 is 5
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 25
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1229
 105 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 29
 105 run: legal? <- lesser-than *column, width
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1225 is 10
9999 mem: storing 1 in location 1228
 105 run: jump-if legal?, 1:offset
9999 mem: location 1228 is 1
9999 run: jumping to instruction 32
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1220 is 99
9999 mem: storing 0 in location 1230
 105 run: break-unless newline?, 
9999 mem: location 1230 is 0
9999 run: jumping to instruction 43
 105 run: index:number <- multiply *row, width
9999 mem: location 1227 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1225 is 10
9999 mem: storing 10 in location 1233
 105 run: index <- add index, *column
9999 mem: location 1233 is 10
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 12 in location 1233
 105 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1219 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1219 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1234
 105 run: len:number <- length *buf
9999 mem: location 1234 is 1014
9999 mem: storing 50 in location 1235
 105 run: backspace?:boolean <- equal c, 8
9999 mem: location 1220 is 99
9999 mem: storing 0 in location 1236
 105 run: break-unless backspace?, 
9999 mem: location 1236 is 0
9999 run: jumping to instruction 63
 105 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1234 is 1014
9999 mem: location 1233 is 12
9999 mem: storing 1039 in location 1238
 105 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1238 is 1039
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1238 is 1039
9999 run: address to copy is 1039
9999 mem: storing 1039 in location 1239
 105 run: *cursor-contents <- copy c
9999 mem: location 1220 is 99
9999 mem: location 1239 is 1039
9999 mem: location 1239 is 1039
9999 mem: storing 99 in location 1039
 105 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1238 is 1039
9999 mem: location 1039 is 99
9999 mem: location 1040 is 7
9999 mem: location 1238 is 1039
9999 run: address to copy is 1040
9999 mem: storing 1040 in location 1240
 105 run: *cursor-color <- copy color
9999 mem: location 1221 is 7
9999 mem: location 1240 is 1040
9999 mem: location 1240 is 1040
9999 mem: storing 7 in location 1040
 105 run: right:number <- subtract width, 1
9999 mem: location 1225 is 10
9999 mem: storing 9 in location 1241
 105 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1241 is 9
9999 mem: storing 0 in location 1242
 105 run: break-if at-right?, 
9999 mem: location 1242 is 0
9999 run: jump-if fell through
 105 run: *column <- add *column, 1
9999 mem: location 1229 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1229 is 1012
9999 mem: storing 3 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1219 is 1009
 104 run: reply editor/same-as-ingredient:0, screen/same-as-ingredient:2
9999 mem: location 1320 is 1000
9999 mem: location 1322 is 1009
9999 run: result 0 is 1000
9999 run: result 1 is 1009
9999 mem: storing 1000 in location 1261
9999 mem: storing 1009 in location 1260
 103 run: screen <- move-cursor screen, *cursor-row, *cursor-column
9999 mem: location 1260 is 1009
9999 mem: location 1270 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1271 is 1007
9999 mem: location 1007 is 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1192
 104 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1193
 104 run: new-column:number <- next-ingredient 
9999 mem: storing 3 in location 1194
 104 run: break-unless sc, 
9999 mem: location 1192 is 1009
9999 run: jump-unless fell through
 104 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1192 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1192 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1195
 104 run: *row <- copy new-row
9999 mem: location 1193 is 1
9999 mem: location 1195 is 1011
9999 mem: location 1195 is 1011
9999 mem: storing 1 in location 1011
 104 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1192 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1192 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1196
 104 run: *column <- copy new-column
9999 mem: location 1194 is 3
9999 mem: location 1196 is 1012
9999 mem: location 1196 is 1012
9999 mem: storing 3 in location 1012
 104 run: reply sc/same-as-ingredient:0
9999 mem: location 1192 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1260
 103 run: show-screen screen
9999 mem: location 1260 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1360
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1362
 104 run: break-unless screen, 
9999 mem: location 1362 is 1009
9999 run: jump-unless fell through
 104 run: reply screen
9999 mem: location 1362 is 1009
 103 run: reply 
 102 run: loop 
9999 run: jumping to instruction 5
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1130 is 1256
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1256 in location 1206
 103 run: break-unless x, 
9999 mem: location 1206 is 1256
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1206 is 1256
9999 mem: location 1256 is 3
9999 mem: location 1257 is 1243
9999 mem: location 1206 is 1256
9999 run: address to copy is 1256
9999 mem: storing 1256 in location 1207
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1206 is 1256
9999 mem: location 1256 is 3
9999 mem: location 1257 is 1243
9999 mem: location 1206 is 1256
9999 run: address to copy is 1257
9999 run: its type is address
9999 mem: location 1257 is 1243
9999 mem: storing 1243 in location 1208
 103 run: max:number <- length *buf
9999 mem: location 1208 is 1243
9999 mem: storing 3 in location 1209
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1207 is 1256
9999 mem: location 1256 is 3
9999 mem: location 1209 is 3
9999 mem: storing 1 in location 1210
 103 run: break-unless done?, 
9999 mem: location 1210 is 1
9999 run: jump-unless fell through
 103 run: dummy:address:event <- new event:type
9999 mem: storing 1186 in location 1211
 103 run: reply *dummy, x/same-as-ingredient:0, 1/found, 1/quit
9999 mem: location 1211 is 1186
9999 mem: location 1186 is 0
9999 mem: location 1187 is 0
9999 mem: location 1188 is 0
9999 mem: location 1189 is 0
9999 mem: location 1206 is 1256
9999 run: result 0 is [0, 0, 0, 0]
9999 run: result 1 is 1256
9999 run: result 2 is 1
9999 run: result 3 is 1
9999 mem: storing 0 in location 1132
9999 mem: storing 0 in location 1133
9999 mem: storing 0 in location 1134
9999 mem: storing 0 in location 1135
9999 mem: storing 1256 in location 1130
9999 mem: storing 1 in location 1136
9999 mem: storing 1 in location 1137
 102 run: loop-unless found?, 
9999 mem: location 1136 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1137 is 1
9999 run: jumping to instruction 21
 100 run: screen-should-contain [
    .          .
    .abc       .
    .┈┈┈┈┈     .
    .          .
  ]
 100 run: check-trace-count-for-label 3, [print-character]
