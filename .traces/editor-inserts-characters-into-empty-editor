 102 run: assume-console [
    type [abc]
  ]
9993 parse: instruction: type
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abc": "literal-string"}
9992 load: after rewriting: type [abc]
 102 run: run [
    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data
  ]
9991 parse: --- defining run1001
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"screen": <"address" : <"screen" : <>>>}
9993 parse:   ingredient: {"console": <"address" : <"console" : <>>>}
9993 parse:   ingredient: {"2": <"address" : <"editor-data" : <>>>}
9992 load: after rewriting: editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: editor-event-loop ...
9991 transform: --- deduce types for recipe run1001
9992 transform: screen => <address : <screen : <>>>
9992 transform: console => <address : <console : <>>>
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction editor-event-loop
9992 transform: checking variant 0: 100
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9991 transform: --- checking type and type_name pointers for recipe string-equal
9991 transform: --- checking type and type_name pointers for recipe new-buffer
9991 transform: --- checking type and type_name pointers for recipe grow-buffer
9991 transform: --- checking type and type_name pointers for recipe buffer-full?
9991 transform: --- checking type and type_name pointers for recipe buffer-append
9991 transform: --- checking type and type_name pointers for recipe integer-to-decimal-string
9991 transform: --- checking type and type_name pointers for recipe buffer-to-array
9991 transform: --- checking type and type_name pointers for recipe string-append
9991 transform: --- checking type and type_name pointers for recipe string-replace
9991 transform: --- checking type and type_name pointers for recipe interpolate
9991 transform: --- checking type and type_name pointers for recipe space?
9991 transform: --- checking type and type_name pointers for recipe trim
9991 transform: --- checking type and type_name pointers for recipe find-next
9991 transform: --- checking type and type_name pointers for recipe find-substring
9991 transform: --- checking type and type_name pointers for recipe match-at
9991 transform: --- checking type and type_name pointers for recipe split
9991 transform: --- checking type and type_name pointers for recipe split-first
9991 transform: --- checking type and type_name pointers for recipe string-copy
9991 transform: --- checking type and type_name pointers for recipe min
9991 transform: --- checking type and type_name pointers for recipe max
9991 transform: --- checking type and type_name pointers for recipe new-channel
9991 transform: --- checking type and type_name pointers for recipe write
9991 transform: --- checking type and type_name pointers for recipe read
9991 transform: --- checking type and type_name pointers for recipe clear-channel
9991 transform: --- checking type and type_name pointers for recipe channel-empty?
9991 transform: --- checking type and type_name pointers for recipe channel-full?
9991 transform: --- checking type and type_name pointers for recipe channel-capacity
9991 transform: --- checking type and type_name pointers for recipe buffer-lines
9991 transform: --- checking type and type_name pointers for recipe new-array
9991 transform: --- checking type and type_name pointers for recipe force-specialization-list-number
9991 transform: --- checking type and type_name pointers for recipe force-specialization-duplex-list-character
9991 transform: --- checking type and type_name pointers for recipe new-stream
9991 transform: --- checking type and type_name pointers for recipe rewind-stream
9991 transform: --- checking type and type_name pointers for recipe read-line
9991 transform: --- checking type and type_name pointers for recipe end-of-stream?
9991 transform: --- checking type and type_name pointers for recipe new-fake-screen
9991 transform: --- checking type and type_name pointers for recipe clear-screen
9991 transform: --- checking type and type_name pointers for recipe sync-screen
9991 transform: --- checking type and type_name pointers for recipe fake-screen-is-empty?
9991 transform: --- checking type and type_name pointers for recipe print-character
9991 transform: --- checking type and type_name pointers for recipe clear-line
9991 transform: --- checking type and type_name pointers for recipe cursor-position
9991 transform: --- checking type and type_name pointers for recipe move-cursor
9991 transform: --- checking type and type_name pointers for recipe cursor-down
9991 transform: --- checking type and type_name pointers for recipe cursor-up
9991 transform: --- checking type and type_name pointers for recipe cursor-right
9991 transform: --- checking type and type_name pointers for recipe cursor-left
9991 transform: --- checking type and type_name pointers for recipe cursor-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe cursor-to-next-line
9991 transform: --- checking type and type_name pointers for recipe screen-width
9991 transform: --- checking type and type_name pointers for recipe screen-height
9991 transform: --- checking type and type_name pointers for recipe hide-cursor
9991 transform: --- checking type and type_name pointers for recipe show-cursor
9991 transform: --- checking type and type_name pointers for recipe hide-screen
9991 transform: --- checking type and type_name pointers for recipe show-screen
9991 transform: --- checking type and type_name pointers for recipe print-string
9991 transform: --- checking type and type_name pointers for recipe print-integer
9991 transform: --- checking type and type_name pointers for recipe new-fake-console
9991 transform: --- checking type and type_name pointers for recipe read-event
9991 transform: --- checking type and type_name pointers for recipe read-key
9991 transform: --- checking type and type_name pointers for recipe send-keys-to-channel
9991 transform: --- checking type and type_name pointers for recipe wait-for-event
9991 transform: --- checking type and type_name pointers for recipe has-more-events?
9991 transform: --- checking type and type_name pointers for recipe push_2
9991 transform: --- checking type and type_name pointers for recipe first_2
9991 transform: --- checking type and type_name pointers for recipe rest_2
9991 transform: --- checking type and type_name pointers for recipe push-duplex_2
9991 transform: --- checking type and type_name pointers for recipe first-duplex_2
9991 transform: --- checking type and type_name pointers for recipe next-duplex_2
9991 transform: --- checking type and type_name pointers for recipe prev-duplex_2
9991 transform: --- checking type and type_name pointers for recipe insert-duplex_2
9991 transform: --- checking type and type_name pointers for recipe remove-duplex_2
9991 transform: --- checking type and type_name pointers for recipe remove-duplex-between_2
9991 transform: --- checking type and type_name pointers for recipe insert-duplex-range_2
9991 transform: --- checking type and type_name pointers for recipe append-duplex_2
9991 transform: --- checking type and type_name pointers for recipe last-duplex_2
9991 transform: --- checking type and type_name pointers for recipe sandbox
9991 transform: --- checking type and type_name pointers for recipe factorial
9991 transform: --- checking type and type_name pointers for recipe chessboard
9991 transform: --- checking type and type_name pointers for recipe new-board
9991 transform: --- checking type and type_name pointers for recipe new-file
9991 transform: --- checking type and type_name pointers for recipe print-board
9991 transform: --- checking type and type_name pointers for recipe initial-position
9991 transform: --- checking type and type_name pointers for recipe read-move
9991 transform: --- checking type and type_name pointers for recipe read-file
9991 transform: --- checking type and type_name pointers for recipe read-rank
9991 transform: --- checking type and type_name pointers for recipe expect-from-channel
9991 transform: --- checking type and type_name pointers for recipe make-move
9991 transform: --- checking type and type_name pointers for recipe main_2
9991 transform: --- checking type and type_name pointers for recipe new-editor
9991 transform: --- checking type and type_name pointers for recipe insert-text
9991 transform: --- checking type and type_name pointers for recipe render
9991 transform: --- checking type and type_name pointers for recipe clear-line-delimited
9991 transform: --- checking type and type_name pointers for recipe clear-screen-from
9991 transform: --- checking type and type_name pointers for recipe clear-rest-of-screen
9991 transform: --- checking type and type_name pointers for recipe get-color
9991 transform: --- checking type and type_name pointers for recipe editor-event-loop
9991 transform: --- checking type and type_name pointers for recipe move-cursor-in-editor
9991 transform: --- checking type and type_name pointers for recipe snap-cursor
9991 transform: --- checking type and type_name pointers for recipe handle-keyboard-event
9991 transform: --- checking type and type_name pointers for recipe insert-at-cursor
9991 transform: --- checking type and type_name pointers for recipe editor-render
9991 transform: --- checking type and type_name pointers for recipe insert-new-line-and-indent
9991 transform: --- checking type and type_name pointers for recipe line-indent
9991 transform: --- checking type and type_name pointers for recipe draw-horizontal
9991 transform: --- checking type and type_name pointers for recipe delete-before-cursor
9991 transform: --- checking type and type_name pointers for recipe move-cursor-coordinates-left
9991 transform: --- checking type and type_name pointers for recipe previous-line-length
9991 transform: --- checking type and type_name pointers for recipe delete-at-cursor
9991 transform: --- checking type and type_name pointers for recipe move-cursor-coordinates-right
9991 transform: --- checking type and type_name pointers for recipe move-to-previous-line
9991 transform: --- checking type and type_name pointers for recipe move-to-next-line
9991 transform: --- checking type and type_name pointers for recipe move-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe move-to-end-of-line
9991 transform: --- checking type and type_name pointers for recipe delete-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe delete-to-end-of-line
9991 transform: --- checking type and type_name pointers for recipe before-start-of-next-line
9991 transform: --- checking type and type_name pointers for recipe before-previous-line
9991 transform: --- checking type and type_name pointers for recipe page-down
9991 transform: --- checking type and type_name pointers for recipe page-up
9991 transform: --- checking type and type_name pointers for recipe new-programming-environment
9991 transform: --- checking type and type_name pointers for recipe event-loop
9991 transform: --- checking type and type_name pointers for recipe resize
9991 transform: --- checking type and type_name pointers for recipe render-all
9991 transform: --- checking type and type_name pointers for recipe render-recipes
9991 transform: --- checking type and type_name pointers for recipe render-sandbox-side
9991 transform: --- checking type and type_name pointers for recipe update-cursor
9991 transform: --- checking type and type_name pointers for recipe render-string
9991 transform: --- checking type and type_name pointers for recipe render-code-string
9991 transform: --- checking type and type_name pointers for recipe maximize
9991 transform: --- checking type and type_name pointers for recipe draw-vertical
9991 transform: --- checking type and type_name pointers for recipe run-sandboxes
9991 transform: --- checking type and type_name pointers for recipe update-recipes
9991 transform: --- checking type and type_name pointers for recipe update-sandbox
9991 transform: --- checking type and type_name pointers for recipe update-status
9991 transform: --- checking type and type_name pointers for recipe save-sandboxes
9991 transform: --- checking type and type_name pointers for recipe render-sandboxes
9991 transform: --- checking type and type_name pointers for recipe restore-sandboxes
9991 transform: --- checking type and type_name pointers for recipe render-screen
9991 transform: --- checking type and type_name pointers for recipe editor-contents
9991 transform: --- checking type and type_name pointers for recipe empty-editor?
9991 transform: --- checking type and type_name pointers for recipe extract-sandbox
9991 transform: --- checking type and type_name pointers for recipe delete-sandbox
9991 transform: --- checking type and type_name pointers for recipe find-click-in-sandbox-output
9991 transform: --- checking type and type_name pointers for recipe toggle-expected-response
9991 transform: --- checking type and type_name pointers for recipe find-click-in-sandbox-code
9991 transform: --- checking type and type_name pointers for recipe add-operation
9991 transform: --- checking type and type_name pointers for recipe first_3
9991 transform: --- checking type and type_name pointers for recipe rest_3
9991 transform: --- checking type and type_name pointers for recipe push_3
9991 transform: --- checking type and type_name pointers for recipe scenario-editor-inserts-characters-into-empty-editor
9991 transform: --- checking type and type_name pointers for recipe run1001
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data
9999 mem: location 900 is 1009
9999 mem: location 901 is 1261
9999 mem: location 2 is 1115
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 14
9999 mem: new alloc: 1263
 104 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1265
 104 run: console:address:console <- next-ingredient 
9999 mem: storing 1261 in location 1266
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1267
 104 run: cursor-row:number <- get *editor, cursor-row:offset
9999 mem: location 1267 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1267 is 1115
9998 run: address to copy is 1121
9998 run: its type is number
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1268
 104 run: cursor-column:number <- get *editor, cursor-column:offset
9999 mem: location 1267 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1267 is 1115
9998 run: address to copy is 1122
9998 run: its type is number
9999 mem: location 1122 is 0
9999 mem: storing 0 in location 1269
 104 run: screen <- move-cursor screen, cursor-row, cursor-column
9999 mem: location 1265 is 1009
9999 mem: location 1268 is 1
9999 mem: location 1269 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1183
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1184
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 0 in location 1185
 105 run: jump-unless sc, 
9999 mem: location 1183 is 1009
9998 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1186
 105 run: *row <- copy new-row
9999 mem: location 1184 is 1
9999 mem: location 1186 is 1011
9999 mem: storing 1 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1187
 105 run: *column <- copy new-column
9999 mem: location 1185 is 0
9999 mem: location 1187 is 1012
9999 mem: storing 0 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1183 is 1009
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1265
 104 run: e:event, console:address:console, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1266 is 1261
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 12
 105 run: x:address:console <- next-ingredient 
9999 mem: storing 1261 in location 1222
 105 run: jump-unless x, 
9999 mem: location 1222 is 1261
9998 run: jump-unless fell through
 105 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 0
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9998 run: address to copy is 1261
9999 mem: storing 1261 in location 1223
 105 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 0
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9998 run: address to copy is 1262
9998 run: its type is <address : <array : <event : <>>>>
9999 mem: location 1262 is 1248
9999 mem: storing 1248 in location 1224
 105 run: max:number <- length *buf
9999 mem: location 1224 is 1248
9999 mem: storing 3 in location 1225
 105 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 0
9999 mem: location 1225 is 3
9999 mem: storing 0 in location 1226
 105 run: jump-unless done?, 
9999 mem: location 1226 is 0
9998 run: jumping to instruction 12
 105 run: result:event <- index *buf, *idx
9999 mem: location 1224 is 1248
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 0
9998 run: address to copy is 1249
9998 run: its type is event
9999 mem: location 1249 is 0
9999 mem: location 1250 is 97
9999 mem: location 1251 is 0
9999 mem: location 1252 is 0
9999 mem: storing 0 in location 1228
9999 mem: storing 97 in location 1229
9999 mem: storing 0 in location 1230
9999 mem: storing 0 in location 1231
 105 run: *idx <- add *idx, 1
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 0
9999 mem: location 1223 is 1261
9999 mem: storing 1 in location 1261
 105 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1228 is 0
9999 mem: location 1229 is 97
9999 mem: location 1230 is 0
9999 mem: location 1231 is 0
9999 mem: location 1222 is 1261
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 97, 0, 0]
9998 run: result 1 is 1261
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1270
9999 mem: storing 97 in location 1271
9999 mem: storing 0 in location 1272
9999 mem: storing 0 in location 1273
9999 mem: storing 1261 in location 1266
9999 mem: storing 1 in location 1274
9999 mem: storing 0 in location 1275
 104 run: jump-unless found?, 
9999 mem: location 1274 is 1
9998 run: jump-unless fell through
 104 run: jump-if quit?, 
9999 mem: location 1275 is 0
9998 run: jump-if fell through
 104 run: trace 10, [app], [next-event]
  10 app: next-event 
 104 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1270 is 0
9999 mem: location 1271 is 97
9999 mem: location 1272 is 0
9999 mem: location 1273 is 0
9999 mem: storing 0 in location 1276
 104 run: jump-unless t, 
9999 mem: location 1276 is 0
9998 run: jumping to instruction 18
 104 run: jump-if t, 
9999 mem: location 1276 is 0
9998 run: jump-if fell through
 104 run: screen, editor, go-render?:boolean <- handle-keyboard-event screen, editor, e
9999 mem: location 1265 is 1009
9999 mem: location 1267 is 1115
9999 mem: location 1270 is 0
9999 mem: location 1271 is 97
9999 mem: location 1272 is 0
9999 mem: location 1273 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 85
9999 mem: new alloc: 1278
 105 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1280
 105 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1281
 105 run: e:event <- next-ingredient 
9999 mem: storing 0 in location 1282
9999 mem: storing 97 in location 1283
9999 mem: storing 0 in location 1284
9999 mem: storing 0 in location 1285
 105 run: go-render? <- copy 0/false
9999 mem: storing 0 in location 1286
 105 run: jump-if editor, 1:offset
9999 mem: location 1281 is 1115
9998 run: jumping to instruction 7
 105 run: screen-width:number <- screen-width screen
9999 mem: location 1280 is 1009
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 106 run: jump-unless sc, 
9999 mem: location 1179 is 1009
9998 run: jump-unless fell through
 106 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 106 run: reply width
9999 mem: location 1180 is 10
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1287
 105 run: screen-height:number <- screen-height screen
9999 mem: location 1280 is 1009
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 106 run: jump-unless sc, 
9999 mem: location 1179 is 1009
9998 run: jump-unless fell through
 106 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 106 run: reply height
9999 mem: location 1180 is 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1288
 105 run: left:number <- get *editor, left:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1119
9998 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1289
 105 run: right:number <- get *editor, right:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1120
9998 run: its type is number
9999 mem: location 1120 is 4
9999 mem: storing 4 in location 1290
 105 run: before-cursor:address:address:duplex-list:character <- get-address *editor, before-cursor:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1118
9999 mem: storing 1118 in location 1291
 105 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1121
9999 mem: storing 1121 in location 1292
 105 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1122
9999 mem: storing 1122 in location 1293
 105 run: save-row:number <- copy *cursor-row
9999 mem: location 1292 is 1121
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1294
 105 run: save-column:number <- copy *cursor-column
9999 mem: location 1293 is 1122
9999 mem: location 1122 is 0
9999 mem: storing 0 in location 1295
 105 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1282 is 0
9999 mem: location 1283 is 97
9999 mem: location 1284 is 0
9999 mem: location 1285 is 0
9999 mem: storing 1283 in location 1296
 105 run: jump-unless c, 
9999 mem: location 1296 is 1283
9998 run: jump-unless fell through
 105 run: trace 10, [app], [handle-keyboard-event: special character]
  10 app: handle-keyboard-event: special character 
 105 run: redo?:boolean <- equal *c, 25/ctrl-y
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: storing 0 in location 1297
9990 schedule: handle-keyboard-event/editor-event-loop/run1001/scenario-editor-inserts-characters-into-empty-editor
 105 run: jump-unless redo?, 
9999 mem: location 1297 is 0
9998 run: jumping to instruction 61
 105 run: undo?:boolean <- equal *c, 26/ctrl-z
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: storing 0 in location 1308
 105 run: jump-unless undo?, 
9999 mem: location 1308 is 0
9998 run: jumping to instruction 108
 105 run: page-up?:boolean <- equal *c, 2/ctrl-b
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: storing 0 in location 1313
 105 run: jump-unless page-up?, 
9999 mem: location 1313 is 0
9998 run: jumping to instruction 149
 105 run: page-down?:boolean <- equal *c, 6/ctrl-f
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: storing 0 in location 1329
 105 run: jump-unless page-down?, 
9999 mem: location 1329 is 0
9998 run: jumping to instruction 190
 105 run: delete-to-end-of-line?:boolean <- equal *c, 11/ctrl-k
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: storing 0 in location 1330
 105 run: jump-unless delete-to-end-of-line?, 
9999 mem: location 1330 is 0
9998 run: jumping to instruction 210
 105 run: delete-to-start-of-line?:boolean <- equal *c, 21/ctrl-u
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: storing 0 in location 1335
 105 run: jump-unless delete-to-start-of-line?, 
9999 mem: location 1335 is 0
9998 run: jumping to instruction 230
 105 run: move-to-end-of-line?:boolean <- equal *c, 5/ctrl-e
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: storing 0 in location 1336
 105 run: jump-unless move-to-end-of-line?, 
9999 mem: location 1336 is 0
9998 run: jumping to instruction 268
 105 run: move-to-start-of-line?:boolean <- equal *c, 1/ctrl-a
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: storing 0 in location 1337
 105 run: jump-unless move-to-start-of-line?, 
9999 mem: location 1337 is 0
9998 run: jumping to instruction 306
 105 run: delete-previous-character?:boolean <- equal *c, 8/backspace
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: storing 0 in location 1338
 105 run: jump-unless delete-previous-character?, 
9999 mem: location 1338 is 0
9998 run: jumping to instruction 346
 105 run: tab?:boolean <- equal *c, 9/tab
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: storing 0 in location 1342
 105 run: jump-unless tab?, 
9999 mem: location 1342 is 0
9998 run: jumping to instruction 383
 105 run: newline?:boolean <- equal *c, 10/newline
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: storing 0 in location 1346
 105 run: jump-unless newline?, 
9999 mem: location 1346 is 0
9998 run: jumping to instruction 402
 105 run: regular-character?:boolean <- greater-or-equal *c, 32/space
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: storing 1 in location 1349
 105 run: go-render? <- copy 0/false
9999 mem: storing 0 in location 1286
 105 run: jump-if regular-character?, 1:offset
9999 mem: location 1349 is 1
9998 run: jumping to instruction 407
 105 run: top-before:address:duplex-list:character <- get *editor, top-of-screen:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1116
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1116 is 1147
9999 mem: storing 1147 in location 1331
 105 run: cursor-before:address:duplex-list:character <- copy *before-cursor
9999 mem: location 1291 is 1118
9999 mem: location 1118 is 1147
9999 mem: storing 1147 in location 1343
 105 run: editor, screen, go-render?:boolean <- insert-at-cursor editor, *c, screen
9999 mem: location 1281 is 1115
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 97
9999 mem: location 1280 is 1009
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 31
9999 mem: new alloc: 1364
 106 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1366
 106 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1367
 106 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1368
 106 run: before-cursor:address:address:duplex-list:character <- get-address *editor, before-cursor:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1118
9999 mem: storing 1118 in location 1369
 106 run: insert-duplex_2 c, *before-cursor
9999 mem: location 1367 is 97
9999 mem: location 1369 is 1118
9999 mem: location 1118 is 1147
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 107 run: x:_elem <- next-ingredient 
9999 mem: storing 97 in location 1141
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1147 in location 1142
 107 run: new-node <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1396
9999 mem: storing 1396 in location 1143
 107 run: val:address:_elem <- get-address *new-node, value:offset
9999 mem: location 1143 is 1396
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1396 is 0
9999 mem: location 1397 is 0
9999 mem: location 1398 is 0
9999 mem: location 1143 is 1396
9998 run: address to copy is 1396
9999 mem: storing 1396 in location 1144
 107 run: *val <- copy x
9999 mem: location 1141 is 97
9999 mem: location 1144 is 1396
9999 mem: storing 97 in location 1396
 107 run: next-node:address:duplex-list:_elem <- get *in, next:offset
9999 mem: location 1142 is 1147
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1147 is 167
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1142 is 1147
9999 type: type deduced to be character$
9998 run: address to copy is 1148
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1148 is 0
9999 mem: storing 0 in location 1145
 107 run: y:address:address:duplex-list:_elem <- get-address *in, next:offset
9999 mem: location 1142 is 1147
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1147 is 167
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1142 is 1147
9999 type: type deduced to be character$
9998 run: address to copy is 1148
9999 mem: storing 1148 in location 1146
 107 run: *y <- copy new-node
9999 mem: location 1143 is 1396
9999 mem: location 1146 is 1148
9999 mem: storing 1396 in location 1148
 107 run: y <- get-address *new-node, prev:offset
9999 mem: location 1143 is 1396
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1396 is 97
9999 mem: location 1397 is 0
9999 mem: location 1398 is 0
9999 mem: location 1143 is 1396
9999 type: type deduced to be character$
9998 run: address to copy is 1398
9999 mem: storing 1398 in location 1146
 107 run: *y <- copy in
9999 mem: location 1142 is 1147
9999 mem: location 1146 is 1398
9999 mem: storing 1147 in location 1398
 107 run: y <- get-address *new-node, next:offset
9999 mem: location 1143 is 1396
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1396 is 97
9999 mem: location 1397 is 0
9999 mem: location 1398 is 1147
9999 mem: location 1143 is 1396
9999 type: type deduced to be character$
9998 run: address to copy is 1397
9999 mem: storing 1397 in location 1146
 107 run: *y <- copy next-node
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1397
9999 mem: storing 0 in location 1397
 107 run: jump-if next-node, 1:offset
9999 mem: location 1145 is 0
9998 run: jump-if fell through
 107 run: reply new-node
9999 mem: location 1143 is 1396
9999 trace: reply: decrementing callstack depth from 6
 106 run: *before-cursor <- next-duplex_2 *before-cursor
9999 mem: location 1369 is 1118
9999 mem: location 1118 is 1147
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1147 in location 1179
 107 run: jump-if in, 1:offset
9999 mem: location 1179 is 1147
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1179 is 1147
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1147 is 167
9999 mem: location 1148 is 1396
9999 mem: location 1149 is 0
9999 mem: location 1179 is 1147
9999 type: type deduced to be character$
9998 run: address to copy is 1148
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1148 is 1396
9999 mem: storing 1396 in location 1180
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1180 is 1396
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1396
9999 mem: location 1369 is 1118
9999 mem: storing 1396 in location 1118
 106 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1121
9999 mem: storing 1121 in location 1370
 106 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1122
9999 mem: storing 1122 in location 1371
 106 run: left:number <- get *editor, left:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1119
9998 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1372
 106 run: right:number <- get *editor, right:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1120
9998 run: its type is number
9999 mem: location 1120 is 4
9999 mem: storing 4 in location 1373
 106 run: save-row:number <- copy *cursor-row
9999 mem: location 1370 is 1121
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1374
 106 run: save-column:number <- copy *cursor-column
9999 mem: location 1371 is 1122
9999 mem: location 1122 is 0
9999 mem: storing 0 in location 1375
 106 run: screen-width:number <- screen-width screen
9999 mem: location 1368 is 1009
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 107 run: jump-unless sc, 
9999 mem: location 1179 is 1009
9998 run: jump-unless fell through
 107 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 107 run: reply width
9999 mem: location 1180 is 10
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 10
9999 mem: storing 10 in location 1376
 106 run: screen-height:number <- screen-height screen
9999 mem: location 1368 is 1009
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 107 run: jump-unless sc, 
9999 mem: location 1179 is 1009
9998 run: jump-unless fell through
 107 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 107 run: reply height
9999 mem: location 1180 is 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1377
 106 run: wrap-column:number <- subtract right, 1
9999 mem: location 1373 is 4
9999 mem: storing 3 in location 1378
 106 run: at-wrap?:boolean <- greater-or-equal *cursor-column, wrap-column
9999 mem: location 1371 is 1122
9999 mem: location 1122 is 0
9999 mem: location 1378 is 3
9999 mem: storing 0 in location 1379
 106 run: jump-unless at-wrap?, 
9999 mem: location 1379 is 0
9998 run: jumping to instruction 41
 106 run: *cursor-column <- add *cursor-column, 1
9999 mem: location 1371 is 1122
9999 mem: location 1122 is 0
9999 mem: location 1371 is 1122
9999 mem: storing 1 in location 1122
 106 run: next:address:duplex-list:character <- next-duplex_2 *before-cursor
9999 mem: location 1369 is 1118
9999 mem: location 1118 is 1396
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1396 in location 1179
 107 run: jump-if in, 1:offset
9999 mem: location 1179 is 1396
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1179 is 1396
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1396 is 97
9999 mem: location 1397 is 0
9999 mem: location 1398 is 1147
9999 mem: location 1179 is 1396
9999 type: type deduced to be character$
9998 run: address to copy is 1397
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1397 is 0
9999 mem: storing 0 in location 1180
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1180 is 0
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1386
 106 run: at-end?:boolean <- equal next, 0/null
9999 mem: location 1386 is 0
9999 mem: storing 1 in location 1387
 106 run: jump-unless at-end?, 
9999 mem: location 1387 is 1
9998 run: jump-unless fell through
 106 run: bottom:number <- subtract screen-height, 1
9999 mem: location 1377 is 5
9999 mem: storing 4 in location 1388
 106 run: at-bottom?:boolean <- equal save-row, bottom
9999 mem: location 1374 is 1
9999 mem: location 1388 is 4
9999 mem: storing 0 in location 1389
 106 run: at-right?:boolean <- equal save-column, right
9999 mem: location 1375 is 0
9999 mem: location 1373 is 4
9999 mem: storing 0 in location 1390
 106 run: overflow?:boolean <- and at-bottom?, at-right?
9999 mem: location 1389 is 0
9999 mem: location 1390 is 0
9999 mem: storing 0 in location 1391
 106 run: jump-if overflow?, 
9999 mem: location 1391 is 0
9998 run: jump-if fell through
 106 run: move-cursor screen, save-row, save-column
9999 mem: location 1368 is 1009
9999 mem: location 1374 is 1
9999 mem: location 1375 is 0
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1183
 107 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1184
 107 run: new-column:number <- next-ingredient 
9999 mem: storing 0 in location 1185
 107 run: jump-unless sc, 
9999 mem: location 1183 is 1009
9998 run: jump-unless fell through
 107 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1186
 107 run: *row <- copy new-row
9999 mem: location 1184 is 1
9999 mem: location 1186 is 1011
9999 mem: storing 1 in location 1011
 107 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1187
 107 run: *column <- copy new-column
9999 mem: location 1185 is 0
9999 mem: location 1187 is 1012
9999 mem: storing 0 in location 1012
 107 run: reply sc/same-as-ingredient:0
9999 mem: location 1183 is 1009
9999 trace: reply: decrementing callstack depth from 6
 106 run: print-character screen, c
9999 mem: location 1368 is 1009
9999 mem: location 1367 is 97
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 25
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1196
 107 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1197
 107 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1198
9999 mem: storing 0 in location 1199
 107 run: jump-if color-found?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 107 run: color <- copy 7/white
9999 mem: storing 7 in location 1198
 107 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1200
9999 mem: storing 0 in location 1201
 107 run: jump-if bg-color-found?, 
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1200
 107 run: trace 90, [print-character], c
9999 mem: location 1197 is 97
  90 print-character: 97 
 107 run: jump-unless sc, 
9999 mem: location 1196 is 1009
9998 run: jump-unless fell through
 107 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1202
 107 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1203
 107 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1204
 107 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1205
 107 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9998 run: jumping to instruction 22
 107 run: legal? <- lesser-than *row, height
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1203 is 5
9999 mem: storing 1 in location 1205
 107 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9998 run: jumping to instruction 25
 107 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1206
 107 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 1 in location 1205
 107 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9998 run: jumping to instruction 29
 107 run: legal? <- lesser-than *column, width
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1202 is 10
9999 mem: storing 1 in location 1205
 107 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9998 run: jumping to instruction 32
 107 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1197 is 97
9999 mem: storing 0 in location 1207
 107 run: jump-unless newline?, 
9999 mem: location 1207 is 0
9998 run: jumping to instruction 43
 107 run: index:number <- multiply *row, width
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1202 is 10
9999 mem: storing 10 in location 1210
 107 run: index <- add index, *column
9999 mem: location 1210 is 10
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 10 in location 1210
 107 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <screen-cell : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1211
 107 run: len:number <- length *buf
9999 mem: location 1211 is 1014
9999 mem: storing 50 in location 1212
 107 run: backspace?:boolean <- equal c, 8
9999 mem: location 1197 is 97
9999 mem: storing 0 in location 1213
 107 run: jump-unless backspace?, 
9999 mem: location 1213 is 0
9998 run: jumping to instruction 63
 107 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1211 is 1014
9999 mem: location 1210 is 10
9999 mem: storing 1035 in location 1215
 107 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1215 is 1035
9999 mem: location 1035 is 32
9999 mem: location 1036 is 7
9999 mem: location 1215 is 1035
9998 run: address to copy is 1035
9999 mem: storing 1035 in location 1216
 107 run: *cursor-contents <- copy c
9999 mem: location 1197 is 97
9999 mem: location 1216 is 1035
9999 mem: storing 97 in location 1035
 107 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1215 is 1035
9999 mem: location 1035 is 97
9999 mem: location 1036 is 7
9999 mem: location 1215 is 1035
9998 run: address to copy is 1036
9999 mem: storing 1036 in location 1217
 107 run: *cursor-color <- copy color
9999 mem: location 1198 is 7
9999 mem: location 1217 is 1036
9999 mem: storing 7 in location 1036
 107 run: right:number <- subtract width, 1
9999 mem: location 1202 is 10
9999 mem: storing 9 in location 1218
 107 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1218 is 9
9999 mem: storing 0 in location 1219
 107 run: jump-if at-right?, 
9999 mem: location 1219 is 0
9998 run: jump-if fell through
 107 run: *column <- add *column, 1
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1206 is 1012
9999 mem: storing 1 in location 1012
 107 run: reply sc/same-as-ingredient:0
9999 mem: location 1196 is 1009
9999 trace: reply: decrementing callstack depth from 6
 106 run: go-render? <- copy 0/false
9999 mem: storing 0 in location 1385
 106 run: reply editor:address:editor-data, screen:address:screen, go-render?:boolean
9999 mem: location 1366 is 1115
9999 mem: location 1368 is 1009
9999 mem: location 1385 is 0
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1115
9998 run: result 1 is 1009
9998 run: result 2 is 0
9999 mem: storing 1115 in location 1281
9999 mem: storing 1009 in location 1280
9999 mem: storing 0 in location 1286
 105 run: top-after:address:duplex-list:character <- get *editor, top-of-screen:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1116
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1116 is 1147
9999 mem: storing 1147 in location 1333
 105 run: undo:address:address:list:address:operation <- get-address *editor, undo:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1124
9999 mem: storing 1124 in location 1300
 105 run: jump-unless *undo, 
9999 mem: location 1300 is 1124
9999 mem: location 1124 is 0
9998 run: jumping to instruction 429
 105 run: insert-from:address:duplex-list:character <- next-duplex_2 cursor-before
9999 mem: location 1343 is 1147
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1147 in location 1179
 106 run: jump-if in, 1:offset
9999 mem: location 1179 is 1147
9998 run: jumping to instruction 4
 106 run: result <- get *in, next:offset
9999 mem: location 1179 is 1147
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1147 is 167
9999 mem: location 1148 is 1396
9999 mem: location 1149 is 0
9999 mem: location 1179 is 1147
9999 type: type deduced to be character$
9998 run: address to copy is 1148
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1148 is 1396
9999 mem: storing 1396 in location 1180
 106 run: reply result:address:duplex-list:_elem
9999 mem: location 1180 is 1396
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1396
9999 mem: storing 1396 in location 1307
 105 run: insert-to:address:duplex-list:character <- next-duplex_2 insert-from
9999 mem: location 1307 is 1396
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1396 in location 1179
 106 run: jump-if in, 1:offset
9999 mem: location 1179 is 1396
9998 run: jumping to instruction 4
 106 run: result <- get *in, next:offset
9999 mem: location 1179 is 1396
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1396 is 97
9999 mem: location 1397 is 0
9999 mem: location 1398 is 1147
9999 mem: location 1179 is 1396
9999 type: type deduced to be character$
9998 run: address to copy is 1397
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1397 is 0
9999 mem: storing 0 in location 1180
 106 run: reply result:address:duplex-list:_elem
9999 mem: location 1180 is 0
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1345
 105 run: op:address:operation <- new operation:type
9999 mem: new alloc: 1399
9999 mem: storing 1399 in location 1299
 105 run: *op <- merge 0/insert-operation, save-row/before, save-column/before, top-before, *cursor-row/after, *cursor-column/after, top-after, insert-from, insert-to, 1/coalesce
9999 mem: location 1294 is 1
9999 mem: location 1295 is 0
9999 mem: location 1331 is 1147
9999 mem: location 1292 is 1121
9999 mem: location 1121 is 1
9999 mem: location 1293 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1333 is 1147
9999 mem: location 1307 is 1396
9999 mem: location 1345 is 0
9999 mem: location 1299 is 1399
9999 mem: location 1299 is 1399
9999 mem: storing 0 in location 1399
9999 mem: storing 1 in location 1400
9999 mem: storing 0 in location 1401
9999 mem: storing 1147 in location 1402
9999 mem: storing 1 in location 1403
9999 mem: storing 1 in location 1404
9999 mem: storing 1147 in location 1405
9999 mem: storing 1396 in location 1406
9999 mem: storing 0 in location 1407
9999 mem: storing 1 in location 1408
 105 run: editor <- add-operation editor, op
9999 mem: location 1281 is 1115
9999 mem: location 1299 is 1399
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 106 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1190
 106 run: op:address:operation <- next-ingredient 
9999 mem: storing 1399 in location 1191
 106 run: undo:address:address:list:address:operation <- get-address *editor, undo:offset
9999 mem: location 1190 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1190 is 1115
9998 run: address to copy is 1124
9999 mem: storing 1124 in location 1192
 106 run: *undo <- push_3 op, *undo
9999 mem: location 1191 is 1399
9999 mem: location 1192 is 1124
9999 mem: location 1124 is 0
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 107 run: x:_elem <- next-ingredient 
9999 mem: storing 1399 in location 1183
 107 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 0 in location 1184
 107 run: result <- new {(list _elem): type}
9999 mem: new alloc: 1410
9999 mem: storing 1410 in location 1185
 107 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1185 is 1410
9999 type: checking size of type ingredient

9999 type: type deduced to be address$
9999 mem: location 1410 is 0
9999 mem: location 1411 is 0
9999 mem: location 1185 is 1410
9998 run: address to copy is 1410
9999 mem: storing 1410 in location 1186
 107 run: *val <- copy x
9999 mem: location 1183 is 1399
9999 mem: location 1186 is 1410
9999 mem: storing 1399 in location 1410
 107 run: next:address:address:list:_elem <- get-address *result, next:offset
9999 mem: location 1185 is 1410
9999 type: checking size of type ingredient

9999 type: type deduced to be address$
9999 mem: location 1410 is 1399
9999 mem: location 1411 is 0
9999 mem: location 1185 is 1410
9999 type: type deduced to be address$
9998 run: address to copy is 1411
9999 mem: storing 1411 in location 1187
 107 run: *next <- copy in
9999 mem: location 1184 is 0
9999 mem: location 1187 is 1411
9999 mem: storing 0 in location 1411
 107 run: reply result
9999 mem: location 1185 is 1410
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1410
9999 mem: location 1192 is 1124
9999 mem: storing 1410 in location 1124
 106 run: redo:address:address:list:address:operation <- get-address *editor, redo:offset
9999 mem: location 1190 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1190 is 1115
9998 run: address to copy is 1125
9999 mem: storing 1125 in location 1193
 106 run: *redo <- copy 0
9999 mem: location 1193 is 1125
9999 mem: storing 0 in location 1125
 106 run: reply editor/same-as-ingredient:0
9999 mem: location 1190 is 1115
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1115
9999 mem: storing 1115 in location 1281
 105 run: reply screen:address:screen, editor:address:editor-data, go-render?:boolean
9999 mem: location 1280 is 1009
9999 mem: location 1281 is 1115
9999 mem: location 1286 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1009
9998 run: result 1 is 1115
9998 run: result 2 is 0
9999 mem: storing 1009 in location 1265
9999 mem: storing 1115 in location 1267
9999 mem: storing 0 in location 1277
 104 run: jump-unless go-render?, 
9999 mem: location 1277 is 0
9998 run: jumping to instruction 25
 104 run: jump 
9998 run: jumping to instruction 5
 104 run: cursor-row:number <- get *editor, cursor-row:offset
9999 mem: location 1267 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1267 is 1115
9998 run: address to copy is 1121
9998 run: its type is number
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1268
 104 run: cursor-column:number <- get *editor, cursor-column:offset
9999 mem: location 1267 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1267 is 1115
9998 run: address to copy is 1122
9998 run: its type is number
9999 mem: location 1122 is 1
9999 mem: storing 1 in location 1269
 104 run: screen <- move-cursor screen, cursor-row, cursor-column
9999 mem: location 1265 is 1009
9999 mem: location 1268 is 1
9999 mem: location 1269 is 1
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1183
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1184
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 1 in location 1185
 105 run: jump-unless sc, 
9999 mem: location 1183 is 1009
9998 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1186
 105 run: *row <- copy new-row
9999 mem: location 1184 is 1
9999 mem: location 1186 is 1011
9999 mem: storing 1 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1187
 105 run: *column <- copy new-column
9999 mem: location 1185 is 1
9999 mem: location 1187 is 1012
9999 mem: storing 1 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1183 is 1009
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1265
 104 run: e:event, console:address:console, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1266 is 1261
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 12
 105 run: x:address:console <- next-ingredient 
9999 mem: storing 1261 in location 1222
 105 run: jump-unless x, 
9999 mem: location 1222 is 1261
9998 run: jump-unless fell through
 105 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 1
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9998 run: address to copy is 1261
9999 mem: storing 1261 in location 1223
 105 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 1
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9998 run: address to copy is 1262
9998 run: its type is <address : <array : <event : <>>>>
9999 mem: location 1262 is 1248
9999 mem: storing 1248 in location 1224
 105 run: max:number <- length *buf
9999 mem: location 1224 is 1248
9999 mem: storing 3 in location 1225
 105 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 1
9999 mem: location 1225 is 3
9999 mem: storing 0 in location 1226
 105 run: jump-unless done?, 
9999 mem: location 1226 is 0
9998 run: jumping to instruction 12
 105 run: result:event <- index *buf, *idx
9999 mem: location 1224 is 1248
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 1
9998 run: address to copy is 1253
9998 run: its type is event
9999 mem: location 1253 is 0
9999 mem: location 1254 is 98
9999 mem: location 1255 is 0
9999 mem: location 1256 is 0
9999 mem: storing 0 in location 1228
9999 mem: storing 98 in location 1229
9999 mem: storing 0 in location 1230
9999 mem: storing 0 in location 1231
 105 run: *idx <- add *idx, 1
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 1
9999 mem: location 1223 is 1261
9999 mem: storing 2 in location 1261
 105 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1228 is 0
9999 mem: location 1229 is 98
9999 mem: location 1230 is 0
9999 mem: location 1231 is 0
9999 mem: location 1222 is 1261
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 98, 0, 0]
9998 run: result 1 is 1261
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1270
9999 mem: storing 98 in location 1271
9999 mem: storing 0 in location 1272
9999 mem: storing 0 in location 1273
9999 mem: storing 1261 in location 1266
9999 mem: storing 1 in location 1274
9999 mem: storing 0 in location 1275
 104 run: jump-unless found?, 
9999 mem: location 1274 is 1
9998 run: jump-unless fell through
 104 run: jump-if quit?, 
9999 mem: location 1275 is 0
9998 run: jump-if fell through
 104 run: trace 10, [app], [next-event]
  10 app: next-event 
 104 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1270 is 0
9999 mem: location 1271 is 98
9999 mem: location 1272 is 0
9999 mem: location 1273 is 0
9999 mem: storing 0 in location 1276
 104 run: jump-unless t, 
9999 mem: location 1276 is 0
9998 run: jumping to instruction 18
 104 run: jump-if t, 
9999 mem: location 1276 is 0
9998 run: jump-if fell through
 104 run: screen, editor, go-render?:boolean <- handle-keyboard-event screen, editor, e
9999 mem: location 1265 is 1009
9999 mem: location 1267 is 1115
9999 mem: location 1270 is 0
9999 mem: location 1271 is 98
9999 mem: location 1272 is 0
9999 mem: location 1273 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 85
 105 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1280
 105 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1281
 105 run: e:event <- next-ingredient 
9999 mem: storing 0 in location 1282
9999 mem: storing 98 in location 1283
9999 mem: storing 0 in location 1284
9999 mem: storing 0 in location 1285
 105 run: go-render? <- copy 0/false
9999 mem: storing 0 in location 1286
 105 run: jump-if editor, 1:offset
9999 mem: location 1281 is 1115
9998 run: jumping to instruction 7
 105 run: screen-width:number <- screen-width screen
9999 mem: location 1280 is 1009
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 106 run: jump-unless sc, 
9999 mem: location 1179 is 1009
9998 run: jump-unless fell through
 106 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 106 run: reply width
9999 mem: location 1180 is 10
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1287
 105 run: screen-height:number <- screen-height screen
9999 mem: location 1280 is 1009
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 106 run: jump-unless sc, 
9999 mem: location 1179 is 1009
9998 run: jump-unless fell through
 106 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 106 run: reply height
9999 mem: location 1180 is 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1288
 105 run: left:number <- get *editor, left:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1119
9998 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1289
 105 run: right:number <- get *editor, right:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1120
9998 run: its type is number
9999 mem: location 1120 is 4
9999 mem: storing 4 in location 1290
 105 run: before-cursor:address:address:duplex-list:character <- get-address *editor, before-cursor:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1118
9999 mem: storing 1118 in location 1291
 105 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1121
9999 mem: storing 1121 in location 1292
 105 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1122
9999 mem: storing 1122 in location 1293
 105 run: save-row:number <- copy *cursor-row
9999 mem: location 1292 is 1121
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1294
 105 run: save-column:number <- copy *cursor-column
9999 mem: location 1293 is 1122
9999 mem: location 1122 is 1
9999 mem: storing 1 in location 1295
 105 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1282 is 0
9999 mem: location 1283 is 98
9999 mem: location 1284 is 0
9999 mem: location 1285 is 0
9999 mem: storing 1283 in location 1296
 105 run: jump-unless c, 
9999 mem: location 1296 is 1283
9998 run: jump-unless fell through
 105 run: trace 10, [app], [handle-keyboard-event: special character]
  10 app: handle-keyboard-event: special character 
 105 run: redo?:boolean <- equal *c, 25/ctrl-y
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: storing 0 in location 1297
 105 run: jump-unless redo?, 
9999 mem: location 1297 is 0
9998 run: jumping to instruction 61
 105 run: undo?:boolean <- equal *c, 26/ctrl-z
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: storing 0 in location 1308
 105 run: jump-unless undo?, 
9999 mem: location 1308 is 0
9998 run: jumping to instruction 108
 105 run: page-up?:boolean <- equal *c, 2/ctrl-b
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: storing 0 in location 1313
 105 run: jump-unless page-up?, 
9999 mem: location 1313 is 0
9998 run: jumping to instruction 149
 105 run: page-down?:boolean <- equal *c, 6/ctrl-f
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: storing 0 in location 1329
 105 run: jump-unless page-down?, 
9999 mem: location 1329 is 0
9998 run: jumping to instruction 190
 105 run: delete-to-end-of-line?:boolean <- equal *c, 11/ctrl-k
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: storing 0 in location 1330
 105 run: jump-unless delete-to-end-of-line?, 
9999 mem: location 1330 is 0
9998 run: jumping to instruction 210
 105 run: delete-to-start-of-line?:boolean <- equal *c, 21/ctrl-u
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: storing 0 in location 1335
 105 run: jump-unless delete-to-start-of-line?, 
9999 mem: location 1335 is 0
9998 run: jumping to instruction 230
 105 run: move-to-end-of-line?:boolean <- equal *c, 5/ctrl-e
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: storing 0 in location 1336
 105 run: jump-unless move-to-end-of-line?, 
9999 mem: location 1336 is 0
9998 run: jumping to instruction 268
 105 run: move-to-start-of-line?:boolean <- equal *c, 1/ctrl-a
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: storing 0 in location 1337
 105 run: jump-unless move-to-start-of-line?, 
9999 mem: location 1337 is 0
9998 run: jumping to instruction 306
 105 run: delete-previous-character?:boolean <- equal *c, 8/backspace
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: storing 0 in location 1338
 105 run: jump-unless delete-previous-character?, 
9999 mem: location 1338 is 0
9998 run: jumping to instruction 346
 105 run: tab?:boolean <- equal *c, 9/tab
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: storing 0 in location 1342
 105 run: jump-unless tab?, 
9999 mem: location 1342 is 0
9998 run: jumping to instruction 383
 105 run: newline?:boolean <- equal *c, 10/newline
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: storing 0 in location 1346
 105 run: jump-unless newline?, 
9999 mem: location 1346 is 0
9998 run: jumping to instruction 402
 105 run: regular-character?:boolean <- greater-or-equal *c, 32/space
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: storing 1 in location 1349
 105 run: go-render? <- copy 0/false
9999 mem: storing 0 in location 1286
 105 run: jump-if regular-character?, 1:offset
9999 mem: location 1349 is 1
9998 run: jumping to instruction 407
 105 run: top-before:address:duplex-list:character <- get *editor, top-of-screen:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1116
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1116 is 1147
9999 mem: storing 1147 in location 1331
 105 run: cursor-before:address:duplex-list:character <- copy *before-cursor
9999 mem: location 1291 is 1118
9999 mem: location 1118 is 1396
9999 mem: storing 1396 in location 1343
 105 run: editor, screen, go-render?:boolean <- insert-at-cursor editor, *c, screen
9999 mem: location 1281 is 1115
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 98
9999 mem: location 1280 is 1009
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 31
 106 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1366
 106 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 1367
 106 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1368
 106 run: before-cursor:address:address:duplex-list:character <- get-address *editor, before-cursor:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1396
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1118
9999 mem: storing 1118 in location 1369
 106 run: insert-duplex_2 c, *before-cursor
9999 mem: location 1367 is 98
9999 mem: location 1369 is 1118
9999 mem: location 1118 is 1396
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 107 run: x:_elem <- next-ingredient 
9999 mem: storing 98 in location 1141
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1396 in location 1142
 107 run: new-node <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1412
9999 mem: storing 1412 in location 1143
 107 run: val:address:_elem <- get-address *new-node, value:offset
9999 mem: location 1143 is 1412
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1412 is 0
9999 mem: location 1413 is 0
9999 mem: location 1414 is 0
9999 mem: location 1143 is 1412
9998 run: address to copy is 1412
9999 mem: storing 1412 in location 1144
 107 run: *val <- copy x
9999 mem: location 1141 is 98
9999 mem: location 1144 is 1412
9999 mem: storing 98 in location 1412
 107 run: next-node:address:duplex-list:_elem <- get *in, next:offset
9999 mem: location 1142 is 1396
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1396 is 97
9999 mem: location 1397 is 0
9999 mem: location 1398 is 1147
9999 mem: location 1142 is 1396
9999 type: type deduced to be character$
9998 run: address to copy is 1397
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1397 is 0
9999 mem: storing 0 in location 1145
 107 run: y:address:address:duplex-list:_elem <- get-address *in, next:offset
9999 mem: location 1142 is 1396
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1396 is 97
9999 mem: location 1397 is 0
9999 mem: location 1398 is 1147
9999 mem: location 1142 is 1396
9999 type: type deduced to be character$
9998 run: address to copy is 1397
9999 mem: storing 1397 in location 1146
 107 run: *y <- copy new-node
9999 mem: location 1143 is 1412
9999 mem: location 1146 is 1397
9999 mem: storing 1412 in location 1397
 107 run: y <- get-address *new-node, prev:offset
9999 mem: location 1143 is 1412
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1412 is 98
9999 mem: location 1413 is 0
9999 mem: location 1414 is 0
9999 mem: location 1143 is 1412
9999 type: type deduced to be character$
9998 run: address to copy is 1414
9999 mem: storing 1414 in location 1146
 107 run: *y <- copy in
9999 mem: location 1142 is 1396
9999 mem: location 1146 is 1414
9999 mem: storing 1396 in location 1414
 107 run: y <- get-address *new-node, next:offset
9999 mem: location 1143 is 1412
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1412 is 98
9999 mem: location 1413 is 0
9999 mem: location 1414 is 1396
9999 mem: location 1143 is 1412
9999 type: type deduced to be character$
9998 run: address to copy is 1413
9999 mem: storing 1413 in location 1146
 107 run: *y <- copy next-node
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1413
9999 mem: storing 0 in location 1413
 107 run: jump-if next-node, 1:offset
9999 mem: location 1145 is 0
9998 run: jump-if fell through
 107 run: reply new-node
9999 mem: location 1143 is 1412
9999 trace: reply: decrementing callstack depth from 6
 106 run: *before-cursor <- next-duplex_2 *before-cursor
9999 mem: location 1369 is 1118
9999 mem: location 1118 is 1396
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1396 in location 1179
 107 run: jump-if in, 1:offset
9999 mem: location 1179 is 1396
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1179 is 1396
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1396 is 97
9999 mem: location 1397 is 1412
9999 mem: location 1398 is 1147
9999 mem: location 1179 is 1396
9999 type: type deduced to be character$
9998 run: address to copy is 1397
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1397 is 1412
9999 mem: storing 1412 in location 1180
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1180 is 1412
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1412
9999 mem: location 1369 is 1118
9999 mem: storing 1412 in location 1118
 106 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1121
9999 mem: storing 1121 in location 1370
 106 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1122
9999 mem: storing 1122 in location 1371
 106 run: left:number <- get *editor, left:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1119
9998 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1372
 106 run: right:number <- get *editor, right:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1120
9998 run: its type is number
9999 mem: location 1120 is 4
9999 mem: storing 4 in location 1373
 106 run: save-row:number <- copy *cursor-row
9999 mem: location 1370 is 1121
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1374
 106 run: save-column:number <- copy *cursor-column
9999 mem: location 1371 is 1122
9999 mem: location 1122 is 1
9999 mem: storing 1 in location 1375
 106 run: screen-width:number <- screen-width screen
9999 mem: location 1368 is 1009
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 107 run: jump-unless sc, 
9999 mem: location 1179 is 1009
9998 run: jump-unless fell through
 107 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 107 run: reply width
9999 mem: location 1180 is 10
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 10
9999 mem: storing 10 in location 1376
 106 run: screen-height:number <- screen-height screen
9999 mem: location 1368 is 1009
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 107 run: jump-unless sc, 
9999 mem: location 1179 is 1009
9998 run: jump-unless fell through
 107 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 107 run: reply height
9999 mem: location 1180 is 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1377
 106 run: wrap-column:number <- subtract right, 1
9999 mem: location 1373 is 4
9999 mem: storing 3 in location 1378
 106 run: at-wrap?:boolean <- greater-or-equal *cursor-column, wrap-column
9999 mem: location 1371 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1378 is 3
9999 mem: storing 0 in location 1379
 106 run: jump-unless at-wrap?, 
9999 mem: location 1379 is 0
9998 run: jumping to instruction 41
 106 run: *cursor-column <- add *cursor-column, 1
9999 mem: location 1371 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1371 is 1122
9999 mem: storing 2 in location 1122
 106 run: next:address:duplex-list:character <- next-duplex_2 *before-cursor
9999 mem: location 1369 is 1118
9999 mem: location 1118 is 1412
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1412 in location 1179
 107 run: jump-if in, 1:offset
9999 mem: location 1179 is 1412
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1179 is 1412
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1412 is 98
9999 mem: location 1413 is 0
9999 mem: location 1414 is 1396
9999 mem: location 1179 is 1412
9999 type: type deduced to be character$
9998 run: address to copy is 1413
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1413 is 0
9999 mem: storing 0 in location 1180
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1180 is 0
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1386
 106 run: at-end?:boolean <- equal next, 0/null
9999 mem: location 1386 is 0
9999 mem: storing 1 in location 1387
 106 run: jump-unless at-end?, 
9999 mem: location 1387 is 1
9998 run: jump-unless fell through
 106 run: bottom:number <- subtract screen-height, 1
9999 mem: location 1377 is 5
9999 mem: storing 4 in location 1388
 106 run: at-bottom?:boolean <- equal save-row, bottom
9999 mem: location 1374 is 1
9999 mem: location 1388 is 4
9999 mem: storing 0 in location 1389
 106 run: at-right?:boolean <- equal save-column, right
9999 mem: location 1375 is 1
9999 mem: location 1373 is 4
9999 mem: storing 0 in location 1390
 106 run: overflow?:boolean <- and at-bottom?, at-right?
9999 mem: location 1389 is 0
9999 mem: location 1390 is 0
9999 mem: storing 0 in location 1391
 106 run: jump-if overflow?, 
9999 mem: location 1391 is 0
9998 run: jump-if fell through
 106 run: move-cursor screen, save-row, save-column
9999 mem: location 1368 is 1009
9999 mem: location 1374 is 1
9999 mem: location 1375 is 1
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1183
 107 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1184
 107 run: new-column:number <- next-ingredient 
9999 mem: storing 1 in location 1185
 107 run: jump-unless sc, 
9999 mem: location 1183 is 1009
9998 run: jump-unless fell through
 107 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1186
 107 run: *row <- copy new-row
9999 mem: location 1184 is 1
9999 mem: location 1186 is 1011
9999 mem: storing 1 in location 1011
 107 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1187
 107 run: *column <- copy new-column
9999 mem: location 1185 is 1
9999 mem: location 1187 is 1012
9999 mem: storing 1 in location 1012
 107 run: reply sc/same-as-ingredient:0
9999 mem: location 1183 is 1009
9999 trace: reply: decrementing callstack depth from 6
 106 run: print-character screen, c
9999 mem: location 1368 is 1009
9999 mem: location 1367 is 98
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 25
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1196
 107 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 1197
 107 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1198
9999 mem: storing 0 in location 1199
 107 run: jump-if color-found?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 107 run: color <- copy 7/white
9999 mem: storing 7 in location 1198
 107 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1200
9999 mem: storing 0 in location 1201
 107 run: jump-if bg-color-found?, 
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1200
 107 run: trace 90, [print-character], c
9999 mem: location 1197 is 98
  90 print-character: 98 
 107 run: jump-unless sc, 
9999 mem: location 1196 is 1009
9998 run: jump-unless fell through
 107 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1202
 107 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1203
 107 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1204
 107 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1205
 107 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9998 run: jumping to instruction 22
 107 run: legal? <- lesser-than *row, height
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1203 is 5
9999 mem: storing 1 in location 1205
 107 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9998 run: jumping to instruction 25
 107 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1206
 107 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1205
 107 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9998 run: jumping to instruction 29
 107 run: legal? <- lesser-than *column, width
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1202 is 10
9999 mem: storing 1 in location 1205
 107 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9998 run: jumping to instruction 32
 107 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1197 is 98
9999 mem: storing 0 in location 1207
 107 run: jump-unless newline?, 
9999 mem: location 1207 is 0
9998 run: jumping to instruction 43
 107 run: index:number <- multiply *row, width
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1202 is 10
9999 mem: storing 10 in location 1210
 107 run: index <- add index, *column
9999 mem: location 1210 is 10
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 11 in location 1210
 107 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <screen-cell : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1211
 107 run: len:number <- length *buf
9999 mem: location 1211 is 1014
9999 mem: storing 50 in location 1212
 107 run: backspace?:boolean <- equal c, 8
9999 mem: location 1197 is 98
9999 mem: storing 0 in location 1213
 107 run: jump-unless backspace?, 
9999 mem: location 1213 is 0
9998 run: jumping to instruction 63
 107 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1211 is 1014
9999 mem: location 1210 is 11
9999 mem: storing 1037 in location 1215
 107 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1215 is 1037
9999 mem: location 1037 is 32
9999 mem: location 1038 is 7
9999 mem: location 1215 is 1037
9998 run: address to copy is 1037
9999 mem: storing 1037 in location 1216
 107 run: *cursor-contents <- copy c
9999 mem: location 1197 is 98
9999 mem: location 1216 is 1037
9999 mem: storing 98 in location 1037
 107 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1215 is 1037
9999 mem: location 1037 is 98
9999 mem: location 1038 is 7
9999 mem: location 1215 is 1037
9998 run: address to copy is 1038
9999 mem: storing 1038 in location 1217
 107 run: *cursor-color <- copy color
9999 mem: location 1198 is 7
9999 mem: location 1217 is 1038
9999 mem: storing 7 in location 1038
 107 run: right:number <- subtract width, 1
9999 mem: location 1202 is 10
9999 mem: storing 9 in location 1218
 107 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1218 is 9
9999 mem: storing 0 in location 1219
 107 run: jump-if at-right?, 
9999 mem: location 1219 is 0
9998 run: jump-if fell through
 107 run: *column <- add *column, 1
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1206 is 1012
9999 mem: storing 2 in location 1012
 107 run: reply sc/same-as-ingredient:0
9999 mem: location 1196 is 1009
9999 trace: reply: decrementing callstack depth from 6
 106 run: go-render? <- copy 0/false
9999 mem: storing 0 in location 1385
 106 run: reply editor:address:editor-data, screen:address:screen, go-render?:boolean
9999 mem: location 1366 is 1115
9999 mem: location 1368 is 1009
9999 mem: location 1385 is 0
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1115
9998 run: result 1 is 1009
9998 run: result 2 is 0
9999 mem: storing 1115 in location 1281
9999 mem: storing 1009 in location 1280
9999 mem: storing 0 in location 1286
 105 run: top-after:address:duplex-list:character <- get *editor, top-of-screen:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1116
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1116 is 1147
9999 mem: storing 1147 in location 1333
 105 run: undo:address:address:list:address:operation <- get-address *editor, undo:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1124
9999 mem: storing 1124 in location 1300
 105 run: jump-unless *undo, 
9999 mem: location 1300 is 1124
9999 mem: location 1124 is 1410
9998 run: jump-unless fell through
 105 run: op:address:operation <- first_3 *undo
9999 mem: location 1300 is 1124
9999 mem: location 1124 is 1410
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1410 in location 1179
 106 run: result <- get *in, value:offset
9999 mem: location 1179 is 1410
9999 type: checking size of type ingredient

9999 type: type deduced to be address$
9999 mem: location 1410 is 1399
9999 mem: location 1411 is 0
9999 mem: location 1179 is 1410
9998 run: address to copy is 1410
9999 transform:  === before replace: ?2000
9999 transform:  === after replace: <address : <operation : <>>>
9998 run: its type is <address : <operation : <>>>
9999 mem: location 1410 is 1399
9999 mem: storing 1399 in location 1180
 106 run: reply result:_elem
9999 mem: location 1180 is 1399
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1399
9999 mem: storing 1399 in location 1299
 105 run: typing:address:insert-operation <- maybe-convert *op, typing:variant
9999 mem: location 1299 is 1399
9999 mem: location 1399 is 0
9999 mem: location 1400 is 1
9999 mem: location 1401 is 0
9999 mem: location 1402 is 1147
9999 mem: location 1403 is 1
9999 mem: location 1404 is 1
9999 mem: location 1405 is 1147
9999 mem: location 1406 is 1396
9999 mem: location 1407 is 0
9999 mem: location 1408 is 1
9999 mem: location 1409 is 0
9999 mem: location 1299 is 1399
9999 mem: storing 1400 in location 1306
 105 run: jump-unless typing, 
9999 mem: location 1306 is 1400
9998 run: jump-unless fell through
 105 run: previous-coalesce-tag:number <- get *typing, tag:offset
9999 mem: location 1306 is 1400
9999 mem: location 1400 is 1
9999 mem: location 1401 is 0
9999 mem: location 1402 is 1147
9999 mem: location 1403 is 1
9999 mem: location 1404 is 1
9999 mem: location 1405 is 1147
9999 mem: location 1406 is 1396
9999 mem: location 1407 is 0
9999 mem: location 1408 is 1
9999 mem: location 1306 is 1400
9998 run: address to copy is 1408
9998 run: its type is number
9999 mem: location 1408 is 1
9999 mem: storing 1 in location 1323
 105 run: jump-unless previous-coalesce-tag, 
9999 mem: location 1323 is 1
9998 run: jump-unless fell through
9990 schedule: handle-keyboard-event/editor-event-loop/run1001/scenario-editor-inserts-characters-into-empty-editor
 105 run: insert-until:address:address:duplex-list:character <- get-address *typing, insert-until:offset
9999 mem: location 1306 is 1400
9999 mem: location 1400 is 1
9999 mem: location 1401 is 0
9999 mem: location 1402 is 1147
9999 mem: location 1403 is 1
9999 mem: location 1404 is 1
9999 mem: location 1405 is 1147
9999 mem: location 1406 is 1396
9999 mem: location 1407 is 0
9999 mem: location 1408 is 1
9999 mem: location 1306 is 1400
9998 run: address to copy is 1407
9999 mem: storing 1407 in location 1344
 105 run: *insert-until <- next-duplex_2 *before-cursor
9999 mem: location 1291 is 1118
9999 mem: location 1118 is 1412
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1412 in location 1179
 106 run: jump-if in, 1:offset
9999 mem: location 1179 is 1412
9998 run: jumping to instruction 4
 106 run: result <- get *in, next:offset
9999 mem: location 1179 is 1412
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1412 is 98
9999 mem: location 1413 is 0
9999 mem: location 1414 is 1396
9999 mem: location 1179 is 1412
9999 type: type deduced to be character$
9998 run: address to copy is 1413
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1413 is 0
9999 mem: storing 0 in location 1180
 106 run: reply result:address:duplex-list:_elem
9999 mem: location 1180 is 0
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: location 1344 is 1407
9999 mem: storing 0 in location 1407
 105 run: after-row:address:number <- get-address *typing, after-row:offset
9999 mem: location 1306 is 1400
9999 mem: location 1400 is 1
9999 mem: location 1401 is 0
9999 mem: location 1402 is 1147
9999 mem: location 1403 is 1
9999 mem: location 1404 is 1
9999 mem: location 1405 is 1147
9999 mem: location 1406 is 1396
9999 mem: location 1407 is 0
9999 mem: location 1408 is 1
9999 mem: location 1306 is 1400
9998 run: address to copy is 1403
9999 mem: storing 1403 in location 1325
 105 run: *after-row <- copy *cursor-row
9999 mem: location 1292 is 1121
9999 mem: location 1121 is 1
9999 mem: location 1325 is 1403
9999 mem: storing 1 in location 1403
 105 run: after-column:address:number <- get-address *typing, after-column:offset
9999 mem: location 1306 is 1400
9999 mem: location 1400 is 1
9999 mem: location 1401 is 0
9999 mem: location 1402 is 1147
9999 mem: location 1403 is 1
9999 mem: location 1404 is 1
9999 mem: location 1405 is 1147
9999 mem: location 1406 is 1396
9999 mem: location 1407 is 0
9999 mem: location 1408 is 1
9999 mem: location 1306 is 1400
9998 run: address to copy is 1404
9999 mem: storing 1404 in location 1326
 105 run: *after-column <- copy *cursor-column
9999 mem: location 1293 is 1122
9999 mem: location 1122 is 2
9999 mem: location 1326 is 1404
9999 mem: storing 2 in location 1404
 105 run: after-top:address:address:duplex-list:character <- get-address *typing, after-top-of-screen:offset
9999 mem: location 1306 is 1400
9999 mem: location 1400 is 1
9999 mem: location 1401 is 0
9999 mem: location 1402 is 1147
9999 mem: location 1403 is 1
9999 mem: location 1404 is 2
9999 mem: location 1405 is 1147
9999 mem: location 1406 is 1396
9999 mem: location 1407 is 0
9999 mem: location 1408 is 1
9999 mem: location 1306 is 1400
9998 run: address to copy is 1405
9999 mem: storing 1405 in location 1327
 105 run: *after-top <- get *editor, top-of-screen:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1116
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1116 is 1147
9999 mem: location 1327 is 1405
9999 mem: storing 1147 in location 1405
 105 run: jump +done-adding-insert-operation:label
9998 run: jumping to instruction 436
 105 run: reply screen:address:screen, editor:address:editor-data, go-render?:boolean
9999 mem: location 1280 is 1009
9999 mem: location 1281 is 1115
9999 mem: location 1286 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1009
9998 run: result 1 is 1115
9998 run: result 2 is 0
9999 mem: storing 1009 in location 1265
9999 mem: storing 1115 in location 1267
9999 mem: storing 0 in location 1277
 104 run: jump-unless go-render?, 
9999 mem: location 1277 is 0
9998 run: jumping to instruction 25
 104 run: jump 
9998 run: jumping to instruction 5
 104 run: cursor-row:number <- get *editor, cursor-row:offset
9999 mem: location 1267 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1267 is 1115
9998 run: address to copy is 1121
9998 run: its type is number
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1268
 104 run: cursor-column:number <- get *editor, cursor-column:offset
9999 mem: location 1267 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1267 is 1115
9998 run: address to copy is 1122
9998 run: its type is number
9999 mem: location 1122 is 2
9999 mem: storing 2 in location 1269
 104 run: screen <- move-cursor screen, cursor-row, cursor-column
9999 mem: location 1265 is 1009
9999 mem: location 1268 is 1
9999 mem: location 1269 is 2
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1183
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1184
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 2 in location 1185
 105 run: jump-unless sc, 
9999 mem: location 1183 is 1009
9998 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1186
 105 run: *row <- copy new-row
9999 mem: location 1184 is 1
9999 mem: location 1186 is 1011
9999 mem: storing 1 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1187
 105 run: *column <- copy new-column
9999 mem: location 1185 is 2
9999 mem: location 1187 is 1012
9999 mem: storing 2 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1183 is 1009
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1265
 104 run: e:event, console:address:console, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1266 is 1261
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 12
 105 run: x:address:console <- next-ingredient 
9999 mem: storing 1261 in location 1222
 105 run: jump-unless x, 
9999 mem: location 1222 is 1261
9998 run: jump-unless fell through
 105 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 2
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9998 run: address to copy is 1261
9999 mem: storing 1261 in location 1223
 105 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 2
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9998 run: address to copy is 1262
9998 run: its type is <address : <array : <event : <>>>>
9999 mem: location 1262 is 1248
9999 mem: storing 1248 in location 1224
 105 run: max:number <- length *buf
9999 mem: location 1224 is 1248
9999 mem: storing 3 in location 1225
 105 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 2
9999 mem: location 1225 is 3
9999 mem: storing 0 in location 1226
 105 run: jump-unless done?, 
9999 mem: location 1226 is 0
9998 run: jumping to instruction 12
 105 run: result:event <- index *buf, *idx
9999 mem: location 1224 is 1248
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 2
9998 run: address to copy is 1257
9998 run: its type is event
9999 mem: location 1257 is 0
9999 mem: location 1258 is 99
9999 mem: location 1259 is 0
9999 mem: location 1260 is 0
9999 mem: storing 0 in location 1228
9999 mem: storing 99 in location 1229
9999 mem: storing 0 in location 1230
9999 mem: storing 0 in location 1231
 105 run: *idx <- add *idx, 1
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 2
9999 mem: location 1223 is 1261
9999 mem: storing 3 in location 1261
 105 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1228 is 0
9999 mem: location 1229 is 99
9999 mem: location 1230 is 0
9999 mem: location 1231 is 0
9999 mem: location 1222 is 1261
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 99, 0, 0]
9998 run: result 1 is 1261
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 0 in location 1270
9999 mem: storing 99 in location 1271
9999 mem: storing 0 in location 1272
9999 mem: storing 0 in location 1273
9999 mem: storing 1261 in location 1266
9999 mem: storing 1 in location 1274
9999 mem: storing 0 in location 1275
 104 run: jump-unless found?, 
9999 mem: location 1274 is 1
9998 run: jump-unless fell through
 104 run: jump-if quit?, 
9999 mem: location 1275 is 0
9998 run: jump-if fell through
 104 run: trace 10, [app], [next-event]
  10 app: next-event 
 104 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1270 is 0
9999 mem: location 1271 is 99
9999 mem: location 1272 is 0
9999 mem: location 1273 is 0
9999 mem: storing 0 in location 1276
 104 run: jump-unless t, 
9999 mem: location 1276 is 0
9998 run: jumping to instruction 18
 104 run: jump-if t, 
9999 mem: location 1276 is 0
9998 run: jump-if fell through
 104 run: screen, editor, go-render?:boolean <- handle-keyboard-event screen, editor, e
9999 mem: location 1265 is 1009
9999 mem: location 1267 is 1115
9999 mem: location 1270 is 0
9999 mem: location 1271 is 99
9999 mem: location 1272 is 0
9999 mem: location 1273 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 85
 105 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1280
 105 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1281
 105 run: e:event <- next-ingredient 
9999 mem: storing 0 in location 1282
9999 mem: storing 99 in location 1283
9999 mem: storing 0 in location 1284
9999 mem: storing 0 in location 1285
 105 run: go-render? <- copy 0/false
9999 mem: storing 0 in location 1286
 105 run: jump-if editor, 1:offset
9999 mem: location 1281 is 1115
9998 run: jumping to instruction 7
 105 run: screen-width:number <- screen-width screen
9999 mem: location 1280 is 1009
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 106 run: jump-unless sc, 
9999 mem: location 1179 is 1009
9998 run: jump-unless fell through
 106 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 106 run: reply width
9999 mem: location 1180 is 10
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9999 mem: storing 10 in location 1287
 105 run: screen-height:number <- screen-height screen
9999 mem: location 1280 is 1009
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 106 run: jump-unless sc, 
9999 mem: location 1179 is 1009
9998 run: jump-unless fell through
 106 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 106 run: reply height
9999 mem: location 1180 is 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1288
 105 run: left:number <- get *editor, left:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1119
9998 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1289
 105 run: right:number <- get *editor, right:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1120
9998 run: its type is number
9999 mem: location 1120 is 4
9999 mem: storing 4 in location 1290
 105 run: before-cursor:address:address:duplex-list:character <- get-address *editor, before-cursor:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1118
9999 mem: storing 1118 in location 1291
 105 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1121
9999 mem: storing 1121 in location 1292
 105 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1122
9999 mem: storing 1122 in location 1293
 105 run: save-row:number <- copy *cursor-row
9999 mem: location 1292 is 1121
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1294
 105 run: save-column:number <- copy *cursor-column
9999 mem: location 1293 is 1122
9999 mem: location 1122 is 2
9999 mem: storing 2 in location 1295
 105 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1282 is 0
9999 mem: location 1283 is 99
9999 mem: location 1284 is 0
9999 mem: location 1285 is 0
9999 mem: storing 1283 in location 1296
 105 run: jump-unless c, 
9999 mem: location 1296 is 1283
9998 run: jump-unless fell through
 105 run: trace 10, [app], [handle-keyboard-event: special character]
  10 app: handle-keyboard-event: special character 
 105 run: redo?:boolean <- equal *c, 25/ctrl-y
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: storing 0 in location 1297
 105 run: jump-unless redo?, 
9999 mem: location 1297 is 0
9998 run: jumping to instruction 61
 105 run: undo?:boolean <- equal *c, 26/ctrl-z
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: storing 0 in location 1308
 105 run: jump-unless undo?, 
9999 mem: location 1308 is 0
9998 run: jumping to instruction 108
 105 run: page-up?:boolean <- equal *c, 2/ctrl-b
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: storing 0 in location 1313
 105 run: jump-unless page-up?, 
9999 mem: location 1313 is 0
9998 run: jumping to instruction 149
 105 run: page-down?:boolean <- equal *c, 6/ctrl-f
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: storing 0 in location 1329
 105 run: jump-unless page-down?, 
9999 mem: location 1329 is 0
9998 run: jumping to instruction 190
 105 run: delete-to-end-of-line?:boolean <- equal *c, 11/ctrl-k
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: storing 0 in location 1330
 105 run: jump-unless delete-to-end-of-line?, 
9999 mem: location 1330 is 0
9998 run: jumping to instruction 210
 105 run: delete-to-start-of-line?:boolean <- equal *c, 21/ctrl-u
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: storing 0 in location 1335
 105 run: jump-unless delete-to-start-of-line?, 
9999 mem: location 1335 is 0
9998 run: jumping to instruction 230
 105 run: move-to-end-of-line?:boolean <- equal *c, 5/ctrl-e
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: storing 0 in location 1336
 105 run: jump-unless move-to-end-of-line?, 
9999 mem: location 1336 is 0
9998 run: jumping to instruction 268
 105 run: move-to-start-of-line?:boolean <- equal *c, 1/ctrl-a
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: storing 0 in location 1337
 105 run: jump-unless move-to-start-of-line?, 
9999 mem: location 1337 is 0
9998 run: jumping to instruction 306
 105 run: delete-previous-character?:boolean <- equal *c, 8/backspace
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: storing 0 in location 1338
 105 run: jump-unless delete-previous-character?, 
9999 mem: location 1338 is 0
9998 run: jumping to instruction 346
 105 run: tab?:boolean <- equal *c, 9/tab
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: storing 0 in location 1342
 105 run: jump-unless tab?, 
9999 mem: location 1342 is 0
9998 run: jumping to instruction 383
 105 run: newline?:boolean <- equal *c, 10/newline
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: storing 0 in location 1346
 105 run: jump-unless newline?, 
9999 mem: location 1346 is 0
9998 run: jumping to instruction 402
 105 run: regular-character?:boolean <- greater-or-equal *c, 32/space
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: storing 1 in location 1349
 105 run: go-render? <- copy 0/false
9999 mem: storing 0 in location 1286
 105 run: jump-if regular-character?, 1:offset
9999 mem: location 1349 is 1
9998 run: jumping to instruction 407
 105 run: top-before:address:duplex-list:character <- get *editor, top-of-screen:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1116
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1116 is 1147
9999 mem: storing 1147 in location 1331
 105 run: cursor-before:address:duplex-list:character <- copy *before-cursor
9999 mem: location 1291 is 1118
9999 mem: location 1118 is 1412
9999 mem: storing 1412 in location 1343
 105 run: editor, screen, go-render?:boolean <- insert-at-cursor editor, *c, screen
9999 mem: location 1281 is 1115
9999 mem: location 1296 is 1283
9999 mem: location 1283 is 99
9999 mem: location 1280 is 1009
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 31
 106 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1366
 106 run: c:character <- next-ingredient 
9999 mem: storing 99 in location 1367
 106 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1368
 106 run: before-cursor:address:address:duplex-list:character <- get-address *editor, before-cursor:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1412
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1118
9999 mem: storing 1118 in location 1369
 106 run: insert-duplex_2 c, *before-cursor
9999 mem: location 1367 is 99
9999 mem: location 1369 is 1118
9999 mem: location 1118 is 1412
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 107 run: x:_elem <- next-ingredient 
9999 mem: storing 99 in location 1141
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1412 in location 1142
 107 run: new-node <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1415
9999 mem: storing 1415 in location 1143
 107 run: val:address:_elem <- get-address *new-node, value:offset
9999 mem: location 1143 is 1415
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1415 is 0
9999 mem: location 1416 is 0
9999 mem: location 1417 is 0
9999 mem: location 1143 is 1415
9998 run: address to copy is 1415
9999 mem: storing 1415 in location 1144
 107 run: *val <- copy x
9999 mem: location 1141 is 99
9999 mem: location 1144 is 1415
9999 mem: storing 99 in location 1415
 107 run: next-node:address:duplex-list:_elem <- get *in, next:offset
9999 mem: location 1142 is 1412
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1412 is 98
9999 mem: location 1413 is 0
9999 mem: location 1414 is 1396
9999 mem: location 1142 is 1412
9999 type: type deduced to be character$
9998 run: address to copy is 1413
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1413 is 0
9999 mem: storing 0 in location 1145
 107 run: y:address:address:duplex-list:_elem <- get-address *in, next:offset
9999 mem: location 1142 is 1412
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1412 is 98
9999 mem: location 1413 is 0
9999 mem: location 1414 is 1396
9999 mem: location 1142 is 1412
9999 type: type deduced to be character$
9998 run: address to copy is 1413
9999 mem: storing 1413 in location 1146
 107 run: *y <- copy new-node
9999 mem: location 1143 is 1415
9999 mem: location 1146 is 1413
9999 mem: storing 1415 in location 1413
 107 run: y <- get-address *new-node, prev:offset
9999 mem: location 1143 is 1415
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1415 is 99
9999 mem: location 1416 is 0
9999 mem: location 1417 is 0
9999 mem: location 1143 is 1415
9999 type: type deduced to be character$
9998 run: address to copy is 1417
9999 mem: storing 1417 in location 1146
 107 run: *y <- copy in
9999 mem: location 1142 is 1412
9999 mem: location 1146 is 1417
9999 mem: storing 1412 in location 1417
 107 run: y <- get-address *new-node, next:offset
9999 mem: location 1143 is 1415
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1415 is 99
9999 mem: location 1416 is 0
9999 mem: location 1417 is 1412
9999 mem: location 1143 is 1415
9999 type: type deduced to be character$
9998 run: address to copy is 1416
9999 mem: storing 1416 in location 1146
 107 run: *y <- copy next-node
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1416
9999 mem: storing 0 in location 1416
 107 run: jump-if next-node, 1:offset
9999 mem: location 1145 is 0
9998 run: jump-if fell through
 107 run: reply new-node
9999 mem: location 1143 is 1415
9999 trace: reply: decrementing callstack depth from 6
 106 run: *before-cursor <- next-duplex_2 *before-cursor
9999 mem: location 1369 is 1118
9999 mem: location 1118 is 1412
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1412 in location 1179
 107 run: jump-if in, 1:offset
9999 mem: location 1179 is 1412
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1179 is 1412
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1412 is 98
9999 mem: location 1413 is 1415
9999 mem: location 1414 is 1396
9999 mem: location 1179 is 1412
9999 type: type deduced to be character$
9998 run: address to copy is 1413
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1413 is 1415
9999 mem: storing 1415 in location 1180
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1180 is 1415
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1415
9999 mem: location 1369 is 1118
9999 mem: storing 1415 in location 1118
 106 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1415
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1121
9999 mem: storing 1121 in location 1370
 106 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1415
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1122
9999 mem: storing 1122 in location 1371
 106 run: left:number <- get *editor, left:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1415
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1119
9998 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1372
 106 run: right:number <- get *editor, right:offset
9999 mem: location 1366 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1415
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1366 is 1115
9998 run: address to copy is 1120
9998 run: its type is number
9999 mem: location 1120 is 4
9999 mem: storing 4 in location 1373
 106 run: save-row:number <- copy *cursor-row
9999 mem: location 1370 is 1121
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1374
 106 run: save-column:number <- copy *cursor-column
9999 mem: location 1371 is 1122
9999 mem: location 1122 is 2
9999 mem: storing 2 in location 1375
 106 run: screen-width:number <- screen-width screen
9999 mem: location 1368 is 1009
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 107 run: jump-unless sc, 
9999 mem: location 1179 is 1009
9998 run: jump-unless fell through
 107 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 107 run: reply width
9999 mem: location 1180 is 10
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 10
9999 mem: storing 10 in location 1376
 106 run: screen-height:number <- screen-height screen
9999 mem: location 1368 is 1009
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 107 run: jump-unless sc, 
9999 mem: location 1179 is 1009
9998 run: jump-unless fell through
 107 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 107 run: reply height
9999 mem: location 1180 is 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1377
 106 run: wrap-column:number <- subtract right, 1
9999 mem: location 1373 is 4
9999 mem: storing 3 in location 1378
 106 run: at-wrap?:boolean <- greater-or-equal *cursor-column, wrap-column
9999 mem: location 1371 is 1122
9999 mem: location 1122 is 2
9999 mem: location 1378 is 3
9999 mem: storing 0 in location 1379
 106 run: jump-unless at-wrap?, 
9999 mem: location 1379 is 0
9998 run: jumping to instruction 41
 106 run: *cursor-column <- add *cursor-column, 1
9999 mem: location 1371 is 1122
9999 mem: location 1122 is 2
9999 mem: location 1371 is 1122
9999 mem: storing 3 in location 1122
 106 run: next:address:duplex-list:character <- next-duplex_2 *before-cursor
9999 mem: location 1369 is 1118
9999 mem: location 1118 is 1415
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1415 in location 1179
 107 run: jump-if in, 1:offset
9999 mem: location 1179 is 1415
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1179 is 1415
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1415 is 99
9999 mem: location 1416 is 0
9999 mem: location 1417 is 1412
9999 mem: location 1179 is 1415
9999 type: type deduced to be character$
9998 run: address to copy is 1416
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1416 is 0
9999 mem: storing 0 in location 1180
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1180 is 0
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1386
 106 run: at-end?:boolean <- equal next, 0/null
9999 mem: location 1386 is 0
9999 mem: storing 1 in location 1387
 106 run: jump-unless at-end?, 
9999 mem: location 1387 is 1
9998 run: jump-unless fell through
 106 run: bottom:number <- subtract screen-height, 1
9999 mem: location 1377 is 5
9999 mem: storing 4 in location 1388
 106 run: at-bottom?:boolean <- equal save-row, bottom
9999 mem: location 1374 is 1
9999 mem: location 1388 is 4
9999 mem: storing 0 in location 1389
 106 run: at-right?:boolean <- equal save-column, right
9999 mem: location 1375 is 2
9999 mem: location 1373 is 4
9999 mem: storing 0 in location 1390
 106 run: overflow?:boolean <- and at-bottom?, at-right?
9999 mem: location 1389 is 0
9999 mem: location 1390 is 0
9999 mem: storing 0 in location 1391
 106 run: jump-if overflow?, 
9999 mem: location 1391 is 0
9998 run: jump-if fell through
 106 run: move-cursor screen, save-row, save-column
9999 mem: location 1368 is 1009
9999 mem: location 1374 is 1
9999 mem: location 1375 is 2
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1183
 107 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1184
 107 run: new-column:number <- next-ingredient 
9999 mem: storing 2 in location 1185
 107 run: jump-unless sc, 
9999 mem: location 1183 is 1009
9998 run: jump-unless fell through
 107 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1186
 107 run: *row <- copy new-row
9999 mem: location 1184 is 1
9999 mem: location 1186 is 1011
9999 mem: storing 1 in location 1011
 107 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1187
 107 run: *column <- copy new-column
9999 mem: location 1185 is 2
9999 mem: location 1187 is 1012
9999 mem: storing 2 in location 1012
 107 run: reply sc/same-as-ingredient:0
9999 mem: location 1183 is 1009
9999 trace: reply: decrementing callstack depth from 6
 106 run: print-character screen, c
9999 mem: location 1368 is 1009
9999 mem: location 1367 is 99
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 25
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1196
 107 run: c:character <- next-ingredient 
9999 mem: storing 99 in location 1197
 107 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1198
9999 mem: storing 0 in location 1199
 107 run: jump-if color-found?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 107 run: color <- copy 7/white
9999 mem: storing 7 in location 1198
 107 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1200
9999 mem: storing 0 in location 1201
 107 run: jump-if bg-color-found?, 
9999 mem: location 1201 is 0
9998 run: jump-if fell through
 107 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1200
 107 run: trace 90, [print-character], c
9999 mem: location 1197 is 99
  90 print-character: 99 
 107 run: jump-unless sc, 
9999 mem: location 1196 is 1009
9998 run: jump-unless fell through
 107 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1202
 107 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1203
 107 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1204
 107 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1205
 107 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9998 run: jumping to instruction 22
 107 run: legal? <- lesser-than *row, height
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1203 is 5
9999 mem: storing 1 in location 1205
 107 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9998 run: jumping to instruction 25
 107 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1206
 107 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 1 in location 1205
 107 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9998 run: jumping to instruction 29
 107 run: legal? <- lesser-than *column, width
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1202 is 10
9999 mem: storing 1 in location 1205
 107 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9998 run: jumping to instruction 32
 107 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1197 is 99
9999 mem: storing 0 in location 1207
 107 run: jump-unless newline?, 
9999 mem: location 1207 is 0
9998 run: jumping to instruction 43
 107 run: index:number <- multiply *row, width
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1202 is 10
9999 mem: storing 10 in location 1210
 107 run: index <- add index, *column
9999 mem: location 1210 is 10
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 12 in location 1210
 107 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <screen-cell : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1211
 107 run: len:number <- length *buf
9999 mem: location 1211 is 1014
9999 mem: storing 50 in location 1212
 107 run: backspace?:boolean <- equal c, 8
9999 mem: location 1197 is 99
9999 mem: storing 0 in location 1213
 107 run: jump-unless backspace?, 
9999 mem: location 1213 is 0
9998 run: jumping to instruction 63
 107 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1211 is 1014
9999 mem: location 1210 is 12
9999 mem: storing 1039 in location 1215
 107 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1215 is 1039
9999 mem: location 1039 is 32
9999 mem: location 1040 is 7
9999 mem: location 1215 is 1039
9998 run: address to copy is 1039
9999 mem: storing 1039 in location 1216
 107 run: *cursor-contents <- copy c
9999 mem: location 1197 is 99
9999 mem: location 1216 is 1039
9999 mem: storing 99 in location 1039
 107 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1215 is 1039
9999 mem: location 1039 is 99
9999 mem: location 1040 is 7
9999 mem: location 1215 is 1039
9998 run: address to copy is 1040
9999 mem: storing 1040 in location 1217
 107 run: *cursor-color <- copy color
9999 mem: location 1198 is 7
9999 mem: location 1217 is 1040
9999 mem: storing 7 in location 1040
 107 run: right:number <- subtract width, 1
9999 mem: location 1202 is 10
9999 mem: storing 9 in location 1218
 107 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1218 is 9
9999 mem: storing 0 in location 1219
 107 run: jump-if at-right?, 
9999 mem: location 1219 is 0
9998 run: jump-if fell through
 107 run: *column <- add *column, 1
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1206 is 1012
9999 mem: storing 3 in location 1012
 107 run: reply sc/same-as-ingredient:0
9999 mem: location 1196 is 1009
9999 trace: reply: decrementing callstack depth from 6
 106 run: go-render? <- copy 0/false
9999 mem: storing 0 in location 1385
 106 run: reply editor:address:editor-data, screen:address:screen, go-render?:boolean
9999 mem: location 1366 is 1115
9999 mem: location 1368 is 1009
9999 mem: location 1385 is 0
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1115
9998 run: result 1 is 1009
9998 run: result 2 is 0
9999 mem: storing 1115 in location 1281
9999 mem: storing 1009 in location 1280
9999 mem: storing 0 in location 1286
 105 run: top-after:address:duplex-list:character <- get *editor, top-of-screen:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1415
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 3
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1116
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1116 is 1147
9999 mem: storing 1147 in location 1333
 105 run: undo:address:address:list:address:operation <- get-address *editor, undo:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1415
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 3
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1124
9999 mem: storing 1124 in location 1300
 105 run: jump-unless *undo, 
9999 mem: location 1300 is 1124
9999 mem: location 1124 is 1410
9998 run: jump-unless fell through
 105 run: op:address:operation <- first_3 *undo
9999 mem: location 1300 is 1124
9999 mem: location 1124 is 1410
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1410 in location 1179
 106 run: result <- get *in, value:offset
9999 mem: location 1179 is 1410
9999 type: checking size of type ingredient

9999 type: type deduced to be address$
9999 mem: location 1410 is 1399
9999 mem: location 1411 is 0
9999 mem: location 1179 is 1410
9998 run: address to copy is 1410
9999 transform:  === before replace: ?2000
9999 transform:  === after replace: <address : <operation : <>>>
9998 run: its type is <address : <operation : <>>>
9999 mem: location 1410 is 1399
9999 mem: storing 1399 in location 1180
 106 run: reply result:_elem
9999 mem: location 1180 is 1399
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1399
9999 mem: storing 1399 in location 1299
 105 run: typing:address:insert-operation <- maybe-convert *op, typing:variant
9999 mem: location 1299 is 1399
9999 mem: location 1399 is 0
9999 mem: location 1400 is 1
9999 mem: location 1401 is 0
9999 mem: location 1402 is 1147
9999 mem: location 1403 is 1
9999 mem: location 1404 is 2
9999 mem: location 1405 is 1147
9999 mem: location 1406 is 1396
9999 mem: location 1407 is 0
9999 mem: location 1408 is 1
9999 mem: location 1409 is 0
9999 mem: location 1299 is 1399
9999 mem: storing 1400 in location 1306
 105 run: jump-unless typing, 
9999 mem: location 1306 is 1400
9998 run: jump-unless fell through
 105 run: previous-coalesce-tag:number <- get *typing, tag:offset
9999 mem: location 1306 is 1400
9999 mem: location 1400 is 1
9999 mem: location 1401 is 0
9999 mem: location 1402 is 1147
9999 mem: location 1403 is 1
9999 mem: location 1404 is 2
9999 mem: location 1405 is 1147
9999 mem: location 1406 is 1396
9999 mem: location 1407 is 0
9999 mem: location 1408 is 1
9999 mem: location 1306 is 1400
9998 run: address to copy is 1408
9998 run: its type is number
9999 mem: location 1408 is 1
9999 mem: storing 1 in location 1323
 105 run: jump-unless previous-coalesce-tag, 
9999 mem: location 1323 is 1
9998 run: jump-unless fell through
 105 run: insert-until:address:address:duplex-list:character <- get-address *typing, insert-until:offset
9999 mem: location 1306 is 1400
9999 mem: location 1400 is 1
9999 mem: location 1401 is 0
9999 mem: location 1402 is 1147
9999 mem: location 1403 is 1
9999 mem: location 1404 is 2
9999 mem: location 1405 is 1147
9999 mem: location 1406 is 1396
9999 mem: location 1407 is 0
9999 mem: location 1408 is 1
9999 mem: location 1306 is 1400
9998 run: address to copy is 1407
9999 mem: storing 1407 in location 1344
 105 run: *insert-until <- next-duplex_2 *before-cursor
9999 mem: location 1291 is 1118
9999 mem: location 1118 is 1415
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1415 in location 1179
 106 run: jump-if in, 1:offset
9999 mem: location 1179 is 1415
9998 run: jumping to instruction 4
 106 run: result <- get *in, next:offset
9999 mem: location 1179 is 1415
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1415 is 99
9999 mem: location 1416 is 0
9999 mem: location 1417 is 1412
9999 mem: location 1179 is 1415
9999 type: type deduced to be character$
9998 run: address to copy is 1416
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1416 is 0
9999 mem: storing 0 in location 1180
 106 run: reply result:address:duplex-list:_elem
9999 mem: location 1180 is 0
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: location 1344 is 1407
9999 mem: storing 0 in location 1407
 105 run: after-row:address:number <- get-address *typing, after-row:offset
9999 mem: location 1306 is 1400
9999 mem: location 1400 is 1
9999 mem: location 1401 is 0
9999 mem: location 1402 is 1147
9999 mem: location 1403 is 1
9999 mem: location 1404 is 2
9999 mem: location 1405 is 1147
9999 mem: location 1406 is 1396
9999 mem: location 1407 is 0
9999 mem: location 1408 is 1
9999 mem: location 1306 is 1400
9998 run: address to copy is 1403
9999 mem: storing 1403 in location 1325
 105 run: *after-row <- copy *cursor-row
9999 mem: location 1292 is 1121
9999 mem: location 1121 is 1
9999 mem: location 1325 is 1403
9999 mem: storing 1 in location 1403
 105 run: after-column:address:number <- get-address *typing, after-column:offset
9999 mem: location 1306 is 1400
9999 mem: location 1400 is 1
9999 mem: location 1401 is 0
9999 mem: location 1402 is 1147
9999 mem: location 1403 is 1
9999 mem: location 1404 is 2
9999 mem: location 1405 is 1147
9999 mem: location 1406 is 1396
9999 mem: location 1407 is 0
9999 mem: location 1408 is 1
9999 mem: location 1306 is 1400
9998 run: address to copy is 1404
9999 mem: storing 1404 in location 1326
 105 run: *after-column <- copy *cursor-column
9999 mem: location 1293 is 1122
9999 mem: location 1122 is 3
9999 mem: location 1326 is 1404
9999 mem: storing 3 in location 1404
 105 run: after-top:address:address:duplex-list:character <- get-address *typing, after-top-of-screen:offset
9999 mem: location 1306 is 1400
9999 mem: location 1400 is 1
9999 mem: location 1401 is 0
9999 mem: location 1402 is 1147
9999 mem: location 1403 is 1
9999 mem: location 1404 is 3
9999 mem: location 1405 is 1147
9999 mem: location 1406 is 1396
9999 mem: location 1407 is 0
9999 mem: location 1408 is 1
9999 mem: location 1306 is 1400
9998 run: address to copy is 1405
9999 mem: storing 1405 in location 1327
 105 run: *after-top <- get *editor, top-of-screen:offset
9999 mem: location 1281 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1415
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 3
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1281 is 1115
9998 run: address to copy is 1116
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1116 is 1147
9999 mem: location 1327 is 1405
9999 mem: storing 1147 in location 1405
 105 run: jump +done-adding-insert-operation:label
9998 run: jumping to instruction 436
 105 run: reply screen:address:screen, editor:address:editor-data, go-render?:boolean
9999 mem: location 1280 is 1009
9999 mem: location 1281 is 1115
9999 mem: location 1286 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1009
9998 run: result 1 is 1115
9998 run: result 2 is 0
9999 mem: storing 1009 in location 1265
9999 mem: storing 1115 in location 1267
9999 mem: storing 0 in location 1277
 104 run: jump-unless go-render?, 
9999 mem: location 1277 is 0
9998 run: jumping to instruction 25
 104 run: jump 
9998 run: jumping to instruction 5
 104 run: cursor-row:number <- get *editor, cursor-row:offset
9999 mem: location 1267 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1415
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 3
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1267 is 1115
9998 run: address to copy is 1121
9998 run: its type is number
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1268
 104 run: cursor-column:number <- get *editor, cursor-column:offset
9999 mem: location 1267 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1415
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 3
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1410
9999 mem: location 1125 is 0
9999 mem: location 1267 is 1115
9998 run: address to copy is 1122
9998 run: its type is number
9999 mem: location 1122 is 3
9999 mem: storing 3 in location 1269
 104 run: screen <- move-cursor screen, cursor-row, cursor-column
9999 mem: location 1265 is 1009
9999 mem: location 1268 is 1
9999 mem: location 1269 is 3
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1183
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1184
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 3 in location 1185
 105 run: jump-unless sc, 
9999 mem: location 1183 is 1009
9998 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1186
 105 run: *row <- copy new-row
9999 mem: location 1184 is 1
9999 mem: location 1186 is 1011
9999 mem: storing 1 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1187
 105 run: *column <- copy new-column
9999 mem: location 1185 is 3
9999 mem: location 1187 is 1012
9999 mem: storing 3 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1183 is 1009
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1265
 104 run: e:event, console:address:console, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1266 is 1261
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 12
 105 run: x:address:console <- next-ingredient 
9999 mem: storing 1261 in location 1222
 105 run: jump-unless x, 
9999 mem: location 1222 is 1261
9998 run: jump-unless fell through
 105 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 3
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9998 run: address to copy is 1261
9999 mem: storing 1261 in location 1223
 105 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 3
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9998 run: address to copy is 1262
9998 run: its type is <address : <array : <event : <>>>>
9999 mem: location 1262 is 1248
9999 mem: storing 1248 in location 1224
 105 run: max:number <- length *buf
9999 mem: location 1224 is 1248
9999 mem: storing 3 in location 1225
 105 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 3
9999 mem: location 1225 is 3
9999 mem: storing 1 in location 1226
 105 run: jump-unless done?, 
9999 mem: location 1226 is 1
9998 run: jump-unless fell through
 105 run: dummy:address:event <- new event:type
9999 mem: storing 1177 in location 1227
 105 run: reply *dummy, x/same-as-ingredient:0, 1/found, 1/quit
9999 mem: location 1227 is 1177
9999 mem: location 1177 is 0
9999 mem: location 1178 is 0
9999 mem: location 1179 is 0
9999 mem: location 1180 is 0
9999 mem: location 1222 is 1261
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1261
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1270
9999 mem: storing 0 in location 1271
9999 mem: storing 0 in location 1272
9999 mem: storing 0 in location 1273
9999 mem: storing 1261 in location 1266
9999 mem: storing 1 in location 1274
9999 mem: storing 1 in location 1275
 104 run: jump-unless found?, 
9999 mem: location 1274 is 1
9998 run: jump-unless fell through
 104 run: jump-if quit?, 
9999 mem: location 1275 is 1
9998 run: jumping to instruction 28
9999 trace: fall-through: exiting editor-event-loop; decrementing callstack depth from 3
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: screen-should-contain [
    .          .
    .abc       .
    .┈┈┈┈┈     .
    .          .
  ]
 102 run: check-trace-count-for-label 3, [print-character]
9999 trace: fall-through: exiting scenario-editor-inserts-characters-into-empty-editor; decrementing callstack depth from 1
