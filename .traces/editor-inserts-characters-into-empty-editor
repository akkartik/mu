 101 run: assume-console [
    type [abc]
  ]
parse: instruction: type
parse:   ingredient: {name: "abc", properties: [_: "literal-string"]}
 101 run: run [
    editor-event-loop screen:address, console:address, 2:address:editor-data
  ]
parse: instruction: editor-event-loop
parse:   ingredient: {name: "screen", properties: ["screen": "address"]}
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   ingredient: {name: "2", properties: ["2": "address":"editor-data"]}
after-brace: recipe run1001
after-brace: editor-event-loop ...
 101 run: editor-event-loop screen:address, console:address, 2:address:editor-data
9999 mem: location 900 is 1009
9999 mem: location 901 is 1261
9999 mem: location 2 is 1115
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 19
9999 mem: new alloc: 1263
 102 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1265
 102 run: console:address <- next-ingredient 
9999 mem: storing 1261 in location 1266
 102 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1267
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1266 is 1261
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1261 in location 1222
 103 run: break-unless x, 
9999 mem: location 1222 is 1261
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 0
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9999 run: address to copy is 1261
9999 mem: storing 1261 in location 1223
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 0
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9999 run: address to copy is 1262
9999 run: its type is address
9999 mem: location 1262 is 1248
9999 mem: storing 1248 in location 1224
 103 run: max:number <- length *buf
9999 mem: location 1224 is 1248
9999 mem: storing 3 in location 1225
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 0
9999 mem: location 1225 is 3
9999 mem: storing 0 in location 1226
 103 run: break-unless done?, 
9999 mem: location 1226 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index *buf, *idx
9999 mem: location 1224 is 1248
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 0
9999 run: address to copy is 1249
9999 run: its type is event
9999 mem: location 1249 is 0
9999 mem: location 1250 is 97
9999 mem: location 1251 is 0
9999 mem: location 1252 is 0
9999 mem: storing 0 in location 1228
9999 mem: storing 97 in location 1229
9999 mem: storing 0 in location 1230
9999 mem: storing 0 in location 1231
 103 run: *idx <- add *idx, 1
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 0
9999 mem: location 1223 is 1261
9999 mem: storing 1 in location 1261
 103 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1228 is 0
9999 mem: location 1229 is 97
9999 mem: location 1230 is 0
9999 mem: location 1231 is 0
9999 mem: location 1222 is 1261
9999 run: result 0 is [0, 97, 0, 0]
9999 run: result 1 is 1261
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1268
9999 mem: storing 97 in location 1269
9999 mem: storing 0 in location 1270
9999 mem: storing 0 in location 1271
9999 mem: storing 1261 in location 1266
9999 mem: storing 1 in location 1272
9999 mem: storing 0 in location 1273
 102 run: loop-unless found?, 
9999 mem: location 1272 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1273 is 0
9999 run: jump-if fell through
 102 run: trace 10, [app], [next-event]
  10 app: next-event 
 102 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1268 is 0
9999 mem: location 1269 is 97
9999 mem: location 1270 is 0
9999 mem: location 1271 is 0
9999 mem: storing 0 in location 1274
 102 run: break-unless t, 
9999 mem: location 1274 is 0
9999 run: jumping to instruction 26
 102 run: break-if t, 
9999 mem: location 1274 is 0
9999 run: jump-if fell through
 102 run: screen, editor, go-render?:boolean <- handle-keyboard-event screen, editor, e
9999 mem: location 1265 is 1009
9999 mem: location 1267 is 1115
9999 mem: location 1268 is 0
9999 mem: location 1269 is 97
9999 mem: location 1270 is 0
9999 mem: location 1271 is 0
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 69
9999 mem: new alloc: 1283
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1285
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1286
 103 run: e:event <- next-ingredient 
9999 mem: storing 0 in location 1287
9999 mem: storing 97 in location 1288
9999 mem: storing 0 in location 1289
9999 mem: storing 0 in location 1290
 103 run: jump-if editor, 1:offset
9999 mem: location 1286 is 1115
9999 run: jumping to instruction 6
 103 run: screen-width:number <- screen-width screen
9999 mem: location 1285 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 104 run: break-unless sc, 
9999 mem: location 1179 is 1009
9999 run: jump-unless fell through
 104 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 104 run: reply width
9999 mem: location 1180 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1291
 103 run: screen-height:number <- screen-height screen
9999 mem: location 1285 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 104 run: break-unless sc, 
9999 mem: location 1179 is 1009
9999 run: jump-unless fell through
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 104 run: reply height
9999 mem: location 1180 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1292
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1119
9999 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1293
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1120
9999 run: its type is number
9999 mem: location 1120 is 4
9999 mem: storing 4 in location 1294
 103 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1118
9999 mem: storing 1118 in location 1295
 103 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1121
9999 mem: storing 1121 in location 1296
 103 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1122
9999 mem: storing 1122 in location 1297
 103 run: save-row:number <- copy *cursor-row
9999 mem: location 1296 is 1121
9999 mem: location 1121 is 1
9999 mem: location 1296 is 1121
9999 mem: location 1296 is 1121
9999 mem: storing 1 in location 1298
 103 run: save-column:number <- copy *cursor-column
9999 mem: location 1297 is 1122
9999 mem: location 1122 is 0
9999 mem: location 1297 is 1122
9999 mem: location 1297 is 1122
9999 mem: storing 0 in location 1299
 103 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1287 is 0
9999 mem: location 1288 is 97
9999 mem: location 1289 is 0
9999 mem: location 1290 is 0
9999 mem: storing 1288 in location 1300
 103 run: break-unless c, 
9999 mem: location 1300 is 1288
9999 run: jump-unless fell through
 103 run: trace 10, [app], [handle-keyboard-event: special character]
  10 app: handle-keyboard-event: special character 
 103 run: redo?:boolean <- equal *c, 25/ctrl-y
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: storing 0 in location 1301
 103 run: break-unless redo?, 
9999 mem: location 1301 is 0
9999 run: jumping to instruction 49
 103 run: undo?:boolean <- equal *c, 26/ctrl-z
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: storing 0 in location 1309
 103 run: break-unless undo?, 
9999 mem: location 1309 is 0
9999 run: jumping to instruction 81
 103 run: page-up?:boolean <- equal *c, 2/ctrl-b
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: storing 0 in location 1312
 103 run: break-unless page-up?, 
9999 mem: location 1312 is 0
9999 run: jumping to instruction 98
 103 run: page-down?:boolean <- equal *c, 6/ctrl-f
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: storing 0 in location 1319
 103 run: break-unless page-down?, 
9999 mem: location 1319 is 0
9999 run: jumping to instruction 115
schedule: handle-keyboard-event/editor-event-loop/run1001/scenario-editor-inserts-characters-into-empty-editor
 103 run: delete-to-end-of-line?:boolean <- equal *c, 11/ctrl-k
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: storing 0 in location 1320
 103 run: break-unless delete-to-end-of-line?, 
9999 mem: location 1320 is 0
9999 run: jumping to instruction 121
 103 run: delete-to-start-of-line?:boolean <- equal *c, 21/ctrl-u
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: storing 0 in location 1321
 103 run: break-unless delete-to-start-of-line?, 
9999 mem: location 1321 is 0
9999 run: jumping to instruction 127
 103 run: move-to-end-of-line?:boolean <- equal *c, 5/ctrl-e
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: storing 0 in location 1322
 103 run: break-unless move-to-end-of-line?, 
9999 mem: location 1322 is 0
9999 run: jumping to instruction 144
 103 run: move-to-start-of-line?:boolean <- equal *c, 1/ctrl-a
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: storing 0 in location 1323
 103 run: break-unless move-to-start-of-line?, 
9999 mem: location 1323 is 0
9999 run: jumping to instruction 161
 103 run: delete-previous-character?:boolean <- equal *c, 8/backspace
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: storing 0 in location 1324
 103 run: break-unless delete-previous-character?, 
9999 mem: location 1324 is 0
9999 run: jumping to instruction 167
 103 run: tab?:boolean <- equal *c, 9/tab
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: storing 0 in location 1326
 103 run: break-unless tab?, 
9999 mem: location 1326 is 0
9999 run: jumping to instruction 174
 103 run: regular-character?:boolean <- greater-or-equal *c, 32/space
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: storing 1 in location 1327
 103 run: newline?:boolean <- equal *c, 10/newline
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: storing 0 in location 1328
 103 run: regular-character? <- or regular-character?, newline?
9999 mem: location 1327 is 1
9999 mem: location 1328 is 0
9999 mem: storing 1 in location 1327
 103 run: jump-if regular-character?, 1:offset
9999 mem: location 1327 is 1
9999 run: jumping to instruction 180
 103 run: top-before:address:duplex-list <- get *editor, top-of-screen:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1116
9999 run: its type is address
9999 mem: location 1116 is 1147
9999 mem: storing 1147 in location 1329
 103 run: editor, screen, go-render?:boolean <- insert-at-cursor editor, *c, screen
9999 mem: location 1286 is 1115
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 97
9999 mem: location 1285 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 35
9999 mem: new alloc: 1353
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1355
 104 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1356
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1357
 104 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1147
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1118
9999 mem: storing 1118 in location 1358
 104 run: insert-duplex c, *before-cursor
9999 mem: location 1356 is 97
9999 mem: location 1358 is 1118
9999 mem: location 1118 is 1147
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 105 run: x:location <- next-ingredient 
9999 mem: storing 97 in location 1141
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1147 in location 1142
 105 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1389
9999 mem: storing 1389 in location 1143
 105 run: val:address:location <- get-address *new-node, value:offset
9999 mem: location 1143 is 1389
9999 mem: location 1389 is 0
9999 mem: location 1390 is 0
9999 mem: location 1391 is 0
9999 mem: location 1143 is 1389
9999 run: address to copy is 1389
9999 mem: storing 1389 in location 1144
 105 run: *val <- copy x
9999 mem: location 1141 is 97
9999 mem: location 1144 is 1389
9999 mem: location 1144 is 1389
9999 mem: storing 97 in location 1389
 105 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1142 is 1147
9999 mem: location 1147 is 167
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1142 is 1147
9999 run: address to copy is 1148
9999 run: its type is address
9999 mem: location 1148 is 0
9999 mem: storing 0 in location 1145
 105 run: y:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1142 is 1147
9999 mem: location 1147 is 167
9999 mem: location 1148 is 0
9999 mem: location 1149 is 0
9999 mem: location 1142 is 1147
9999 run: address to copy is 1148
9999 mem: storing 1148 in location 1146
 105 run: *y <- copy new-node
9999 mem: location 1143 is 1389
9999 mem: location 1146 is 1148
9999 mem: location 1146 is 1148
9999 mem: storing 1389 in location 1148
 105 run: y <- get-address *new-node, prev:offset
9999 mem: location 1143 is 1389
9999 mem: location 1389 is 97
9999 mem: location 1390 is 0
9999 mem: location 1391 is 0
9999 mem: location 1143 is 1389
9999 run: address to copy is 1391
9999 mem: storing 1391 in location 1146
 105 run: *y <- copy in
9999 mem: location 1142 is 1147
9999 mem: location 1146 is 1391
9999 mem: location 1146 is 1391
9999 mem: storing 1147 in location 1391
 105 run: y <- get-address *new-node, next:offset
9999 mem: location 1143 is 1389
9999 mem: location 1389 is 97
9999 mem: location 1390 is 0
9999 mem: location 1391 is 1147
9999 mem: location 1143 is 1389
9999 run: address to copy is 1390
9999 mem: storing 1390 in location 1146
 105 run: *y <- copy next-node
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1390
9999 mem: location 1146 is 1390
9999 mem: storing 0 in location 1390
 105 run: jump-if next-node, 1:offset
9999 mem: location 1145 is 0
9999 run: jump-if fell through
 105 run: reply new-node
9999 mem: location 1143 is 1389
 104 run: *before-cursor <- next-duplex *before-cursor
9999 mem: location 1358 is 1118
9999 mem: location 1118 is 1147
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1147 in location 1179
 105 run: jump-if in, 1:offset
9999 mem: location 1179 is 1147
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1179 is 1147
9999 mem: location 1147 is 167
9999 mem: location 1148 is 1389
9999 mem: location 1149 is 0
9999 mem: location 1179 is 1147
9999 run: address to copy is 1148
9999 run: its type is address
9999 mem: location 1148 is 1389
9999 mem: storing 1389 in location 1180
 105 run: reply result
9999 mem: location 1180 is 1389
9999 run: result 0 is 1389
9999 mem: location 1358 is 1118
9999 mem: storing 1389 in location 1118
 104 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1121
9999 mem: storing 1121 in location 1359
 104 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1122
9999 mem: storing 1122 in location 1360
 104 run: left:number <- get *editor, left:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1119
9999 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1361
 104 run: right:number <- get *editor, right:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1120
9999 run: its type is number
9999 mem: location 1120 is 4
9999 mem: storing 4 in location 1362
 104 run: save-row:number <- copy *cursor-row
9999 mem: location 1359 is 1121
9999 mem: location 1121 is 1
9999 mem: location 1359 is 1121
9999 mem: location 1359 is 1121
9999 mem: storing 1 in location 1363
 104 run: save-column:number <- copy *cursor-column
9999 mem: location 1360 is 1122
9999 mem: location 1122 is 0
9999 mem: location 1360 is 1122
9999 mem: location 1360 is 1122
9999 mem: storing 0 in location 1364
 104 run: screen-width:number <- screen-width screen
9999 mem: location 1357 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 105 run: break-unless sc, 
9999 mem: location 1179 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 105 run: reply width
9999 mem: location 1180 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1365
 104 run: screen-height:number <- screen-height screen
9999 mem: location 1357 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 105 run: break-unless sc, 
9999 mem: location 1179 is 1009
9999 run: jump-unless fell through
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 105 run: reply height
9999 mem: location 1180 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1366
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1356 is 97
9999 mem: storing 0 in location 1367
 104 run: break-unless newline?, 
9999 mem: location 1367 is 0
9999 run: jumping to instruction 48
 104 run: wrap-column:number <- subtract right, 1
9999 mem: location 1362 is 4
9999 mem: storing 3 in location 1377
 104 run: at-wrap?:boolean <- greater-or-equal *cursor-column, wrap-column
9999 mem: location 1360 is 1122
9999 mem: location 1122 is 0
9999 mem: location 1377 is 3
9999 mem: storing 0 in location 1378
 104 run: break-unless at-wrap?, 
9999 mem: location 1378 is 0
9999 run: jumping to instruction 67
 104 run: *cursor-column <- add *cursor-column, 1
9999 mem: location 1360 is 1122
9999 mem: location 1122 is 0
9999 mem: location 1360 is 1122
9999 mem: storing 1 in location 1122
 104 run: next:address:duplex-list <- next-duplex *before-cursor
9999 mem: location 1358 is 1118
9999 mem: location 1118 is 1389
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1389 in location 1179
 105 run: jump-if in, 1:offset
9999 mem: location 1179 is 1389
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1179 is 1389
9999 mem: location 1389 is 97
9999 mem: location 1390 is 0
9999 mem: location 1391 is 1147
9999 mem: location 1179 is 1389
9999 run: address to copy is 1390
9999 run: its type is address
9999 mem: location 1390 is 0
9999 mem: storing 0 in location 1180
 105 run: reply result
9999 mem: location 1180 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1379
 104 run: at-end?:boolean <- equal next, 0/null
9999 mem: location 1379 is 0
9999 mem: storing 1 in location 1380
 104 run: break-unless at-end?, 
9999 mem: location 1380 is 1
9999 run: jump-unless fell through
 104 run: bottom:number <- subtract screen-height, 1
9999 mem: location 1366 is 5
9999 mem: storing 4 in location 1381
 104 run: at-bottom?:boolean <- equal save-row, bottom
9999 mem: location 1363 is 1
9999 mem: location 1381 is 4
9999 mem: storing 0 in location 1382
 104 run: at-right?:boolean <- equal save-column, right
9999 mem: location 1364 is 0
9999 mem: location 1362 is 4
9999 mem: storing 0 in location 1383
 104 run: overflow?:boolean <- and at-bottom?, at-right?
9999 mem: location 1382 is 0
9999 mem: location 1383 is 0
9999 mem: storing 0 in location 1384
 104 run: break-if overflow?, 
9999 mem: location 1384 is 0
9999 run: jump-if fell through
 104 run: move-cursor screen, save-row, save-column
9999 mem: location 1357 is 1009
9999 mem: location 1363 is 1
9999 mem: location 1364 is 0
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1183
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1184
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 0 in location 1185
 105 run: break-unless sc, 
9999 mem: location 1183 is 1009
9999 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1186
 105 run: *row <- copy new-row
9999 mem: location 1184 is 1
9999 mem: location 1186 is 1011
9999 mem: location 1186 is 1011
9999 mem: storing 1 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1187
 105 run: *column <- copy new-column
9999 mem: location 1185 is 0
9999 mem: location 1187 is 1012
9999 mem: location 1187 is 1012
9999 mem: storing 0 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1183 is 1009
 104 run: print-character screen, c
9999 mem: location 1357 is 1009
9999 mem: location 1356 is 97
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1196
 105 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1197
 105 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1198
9999 mem: storing 0 in location 1199
 105 run: break-if color-found?, 
9999 mem: location 1199 is 0
9999 run: jump-if fell through
 105 run: color <- copy 7/white
9999 mem: storing 7 in location 1198
 105 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1200
9999 mem: storing 0 in location 1201
 105 run: break-if bg-color-found?, 
9999 mem: location 1201 is 0
9999 run: jump-if fell through
 105 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1200
 105 run: trace 90, [print-character], c
9999 mem: location 1197 is 97
  90 print-character: 97 
 105 run: break-unless sc, 
9999 mem: location 1196 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1202
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1203
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1204
 105 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1205
 105 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9999 run: jumping to instruction 22
 105 run: legal? <- lesser-than *row, height
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1203 is 5
9999 mem: storing 1 in location 1205
 105 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9999 run: jumping to instruction 25
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1206
 105 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 1 in location 1205
 105 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9999 run: jumping to instruction 29
 105 run: legal? <- lesser-than *column, width
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1202 is 10
9999 mem: storing 1 in location 1205
 105 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9999 run: jumping to instruction 32
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1197 is 97
9999 mem: storing 0 in location 1207
 105 run: break-unless newline?, 
9999 mem: location 1207 is 0
9999 run: jumping to instruction 43
 105 run: index:number <- multiply *row, width
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1202 is 10
9999 mem: storing 10 in location 1210
 105 run: index <- add index, *column
9999 mem: location 1210 is 10
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 10 in location 1210
 105 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1211
 105 run: len:number <- length *buf
9999 mem: location 1211 is 1014
9999 mem: storing 50 in location 1212
 105 run: backspace?:boolean <- equal c, 8
9999 mem: location 1197 is 97
9999 mem: storing 0 in location 1213
 105 run: break-unless backspace?, 
9999 mem: location 1213 is 0
9999 run: jumping to instruction 63
 105 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1211 is 1014
9999 mem: location 1210 is 10
9999 mem: storing 1035 in location 1215
 105 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1215 is 1035
9999 mem: location 1035 is 32
9999 mem: location 1036 is 7
9999 mem: location 1215 is 1035
9999 run: address to copy is 1035
9999 mem: storing 1035 in location 1216
 105 run: *cursor-contents <- copy c
9999 mem: location 1197 is 97
9999 mem: location 1216 is 1035
9999 mem: location 1216 is 1035
9999 mem: storing 97 in location 1035
 105 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1215 is 1035
9999 mem: location 1035 is 97
9999 mem: location 1036 is 7
9999 mem: location 1215 is 1035
9999 run: address to copy is 1036
9999 mem: storing 1036 in location 1217
 105 run: *cursor-color <- copy color
9999 mem: location 1198 is 7
9999 mem: location 1217 is 1036
9999 mem: location 1217 is 1036
9999 mem: storing 7 in location 1036
 105 run: right:number <- subtract width, 1
9999 mem: location 1202 is 10
9999 mem: storing 9 in location 1218
 105 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1218 is 9
9999 mem: storing 0 in location 1219
 105 run: break-if at-right?, 
9999 mem: location 1219 is 0
9999 run: jump-if fell through
 105 run: *column <- add *column, 1
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1206 is 1012
9999 mem: storing 1 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1196 is 1009
 104 run: reply editor/same-as-ingredient:0, screen/same-as-ingredient:2, 0/no-more-render
9999 mem: location 1355 is 1115
9999 mem: location 1357 is 1009
9999 run: result 0 is 1115
9999 run: result 1 is 1009
9999 run: result 2 is 0
9999 mem: storing 1115 in location 1286
9999 mem: storing 1009 in location 1285
9999 mem: storing 0 in location 1325
 103 run: top-after:address:duplex-list <- get *editor, top-of-screen:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1116
9999 run: its type is address
9999 mem: location 1116 is 1147
9999 mem: storing 1147 in location 1330
 103 run: undo:address:address:list <- get-address *editor, undo:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1124
9999 mem: storing 1124 in location 1304
 103 run: break-unless *undo, 
9999 mem: location 1304 is 1124
9999 mem: location 1124 is 0
9999 run: jumping to instruction 199
 103 run: insert-from:address:duplex-list <- copy *before-cursor
9999 mem: location 1295 is 1118
9999 mem: location 1118 is 1389
9999 mem: location 1295 is 1118
9999 mem: location 1295 is 1118
9999 mem: storing 1389 in location 1308
 103 run: insert-to:address:duplex-list <- next-duplex insert-from
9999 mem: location 1308 is 1389
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1389 in location 1179
 104 run: jump-if in, 1:offset
9999 mem: location 1179 is 1389
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1179 is 1389
9999 mem: location 1389 is 97
9999 mem: location 1390 is 0
9999 mem: location 1391 is 1147
9999 mem: location 1179 is 1389
9999 run: address to copy is 1390
9999 run: its type is address
9999 mem: location 1390 is 0
9999 mem: storing 0 in location 1180
 104 run: reply result
9999 mem: location 1180 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1335
 103 run: op:address:operation <- new operation:type
9999 mem: storing 1000 in location 1303
 103 run: *op <- merge 0/insert-operation, save-row/before, save-column/before, top-before, *cursor-row/after, *cursor-column/after, top-after, insert-from, insert-to
9999 mem: location 1298 is 1
9999 mem: location 1299 is 0
9999 mem: location 1329 is 1147
9999 mem: location 1296 is 1121
9999 mem: location 1121 is 1
9999 mem: location 1297 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1330 is 1147
9999 mem: location 1308 is 1389
9999 mem: location 1335 is 0
9999 mem: location 1303 is 1000
9999 mem: storing 0 in location 1000
9999 mem: storing 1 in location 1001
9999 mem: storing 0 in location 1002
9999 mem: storing 1147 in location 1003
9999 mem: storing 1 in location 1004
9999 mem: storing 1 in location 1005
9999 mem: storing 1147 in location 1006
9999 mem: storing 1389 in location 1007
9999 mem: storing 0 in location 1008
 103 run: editor <- add-operation editor, op
9999 mem: location 1286 is 1115
9999 mem: location 1303 is 1000
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1190
 104 run: op:address:operation <- next-ingredient 
9999 mem: storing 1000 in location 1191
 104 run: undo:address:address:list:address:operation <- get-address *editor, undo:offset
9999 mem: location 1190 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1190 is 1115
9999 run: address to copy is 1124
9999 mem: storing 1124 in location 1192
 104 run: *undo <- push op, *undo
9999 mem: location 1191 is 1000
9999 mem: location 1192 is 1124
9999 mem: location 1124 is 0
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: x:location <- next-ingredient 
9999 mem: storing 1000 in location 1183
 105 run: in:address:list <- next-ingredient 
9999 mem: storing 0 in location 1184
 105 run: result:address:list <- new list:type
9999 mem: new alloc: 1392
9999 mem: storing 1392 in location 1185
 105 run: val:address:location <- get-address *result, value:offset
9999 mem: location 1185 is 1392
9999 mem: location 1392 is 0
9999 mem: location 1393 is 0
9999 mem: location 1185 is 1392
9999 run: address to copy is 1392
9999 mem: storing 1392 in location 1186
 105 run: *val <- copy x
9999 mem: location 1183 is 1000
9999 mem: location 1186 is 1392
9999 mem: location 1186 is 1392
9999 mem: storing 1000 in location 1392
 105 run: next:address:address:list <- get-address *result, next:offset
9999 mem: location 1185 is 1392
9999 mem: location 1392 is 1000
9999 mem: location 1393 is 0
9999 mem: location 1185 is 1392
9999 run: address to copy is 1393
9999 mem: storing 1393 in location 1187
 105 run: *next <- copy in
9999 mem: location 1184 is 0
9999 mem: location 1187 is 1393
9999 mem: location 1187 is 1393
9999 mem: storing 0 in location 1393
 105 run: reply result
9999 mem: location 1185 is 1392
9999 run: result 0 is 1392
9999 mem: location 1192 is 1124
9999 mem: storing 1392 in location 1124
 104 run: redo:address:address:list:address:operation <- get-address *editor, redo:offset
9999 mem: location 1190 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1190 is 1115
9999 run: address to copy is 1125
9999 mem: storing 1125 in location 1193
 104 run: *redo <- copy 0
9999 mem: location 1193 is 1125
9999 mem: location 1193 is 1125
9999 mem: storing 0 in location 1125
 104 run: reply editor/same-as-ingredient:0
9999 mem: location 1190 is 1115
9999 run: result 0 is 1115
9999 mem: storing 1115 in location 1286
 103 run: reply screen/same-as-ingredient:0, editor/same-as-ingredient:1, go-render?
9999 mem: location 1285 is 1009
9999 mem: location 1286 is 1115
9999 mem: location 1325 is 0
9999 run: result 0 is 1009
9999 run: result 1 is 1115
9999 run: result 2 is 0
9999 mem: storing 1009 in location 1265
9999 mem: storing 1115 in location 1267
9999 mem: storing 0 in location 1282
 102 run: break-unless go-render?, 
9999 mem: location 1282 is 0
9999 run: jumping to instruction 33
 102 run: loop 
9999 run: jumping to instruction 5
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1266 is 1261
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1261 in location 1222
 103 run: break-unless x, 
9999 mem: location 1222 is 1261
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 1
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9999 run: address to copy is 1261
9999 mem: storing 1261 in location 1223
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 1
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9999 run: address to copy is 1262
9999 run: its type is address
9999 mem: location 1262 is 1248
9999 mem: storing 1248 in location 1224
 103 run: max:number <- length *buf
9999 mem: location 1224 is 1248
9999 mem: storing 3 in location 1225
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 1
9999 mem: location 1225 is 3
9999 mem: storing 0 in location 1226
 103 run: break-unless done?, 
9999 mem: location 1226 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index *buf, *idx
9999 mem: location 1224 is 1248
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 1
9999 run: address to copy is 1253
9999 run: its type is event
9999 mem: location 1253 is 0
9999 mem: location 1254 is 98
9999 mem: location 1255 is 0
9999 mem: location 1256 is 0
9999 mem: storing 0 in location 1228
9999 mem: storing 98 in location 1229
9999 mem: storing 0 in location 1230
9999 mem: storing 0 in location 1231
 103 run: *idx <- add *idx, 1
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 1
9999 mem: location 1223 is 1261
9999 mem: storing 2 in location 1261
 103 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1228 is 0
9999 mem: location 1229 is 98
9999 mem: location 1230 is 0
9999 mem: location 1231 is 0
9999 mem: location 1222 is 1261
9999 run: result 0 is [0, 98, 0, 0]
9999 run: result 1 is 1261
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1268
9999 mem: storing 98 in location 1269
9999 mem: storing 0 in location 1270
9999 mem: storing 0 in location 1271
9999 mem: storing 1261 in location 1266
9999 mem: storing 1 in location 1272
9999 mem: storing 0 in location 1273
 102 run: loop-unless found?, 
9999 mem: location 1272 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1273 is 0
9999 run: jump-if fell through
 102 run: trace 10, [app], [next-event]
  10 app: next-event 
 102 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1268 is 0
9999 mem: location 1269 is 98
9999 mem: location 1270 is 0
9999 mem: location 1271 is 0
9999 mem: storing 0 in location 1274
 102 run: break-unless t, 
9999 mem: location 1274 is 0
9999 run: jumping to instruction 26
 102 run: break-if t, 
9999 mem: location 1274 is 0
9999 run: jump-if fell through
 102 run: screen, editor, go-render?:boolean <- handle-keyboard-event screen, editor, e
9999 mem: location 1265 is 1009
9999 mem: location 1267 is 1115
9999 mem: location 1268 is 0
9999 mem: location 1269 is 98
9999 mem: location 1270 is 0
9999 mem: location 1271 is 0
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 69
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1285
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1286
 103 run: e:event <- next-ingredient 
9999 mem: storing 0 in location 1287
9999 mem: storing 98 in location 1288
9999 mem: storing 0 in location 1289
9999 mem: storing 0 in location 1290
 103 run: jump-if editor, 1:offset
9999 mem: location 1286 is 1115
9999 run: jumping to instruction 6
 103 run: screen-width:number <- screen-width screen
9999 mem: location 1285 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 104 run: break-unless sc, 
9999 mem: location 1179 is 1009
9999 run: jump-unless fell through
 104 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 104 run: reply width
9999 mem: location 1180 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1291
 103 run: screen-height:number <- screen-height screen
9999 mem: location 1285 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 104 run: break-unless sc, 
9999 mem: location 1179 is 1009
9999 run: jump-unless fell through
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 104 run: reply height
9999 mem: location 1180 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1292
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1119
9999 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1293
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1120
9999 run: its type is number
9999 mem: location 1120 is 4
9999 mem: storing 4 in location 1294
 103 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1118
9999 mem: storing 1118 in location 1295
 103 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1121
9999 mem: storing 1121 in location 1296
 103 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1122
9999 mem: storing 1122 in location 1297
 103 run: save-row:number <- copy *cursor-row
9999 mem: location 1296 is 1121
9999 mem: location 1121 is 1
9999 mem: location 1296 is 1121
9999 mem: location 1296 is 1121
9999 mem: storing 1 in location 1298
 103 run: save-column:number <- copy *cursor-column
9999 mem: location 1297 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1297 is 1122
9999 mem: location 1297 is 1122
9999 mem: storing 1 in location 1299
 103 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1287 is 0
9999 mem: location 1288 is 98
9999 mem: location 1289 is 0
9999 mem: location 1290 is 0
9999 mem: storing 1288 in location 1300
 103 run: break-unless c, 
9999 mem: location 1300 is 1288
9999 run: jump-unless fell through
 103 run: trace 10, [app], [handle-keyboard-event: special character]
  10 app: handle-keyboard-event: special character 
 103 run: redo?:boolean <- equal *c, 25/ctrl-y
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: storing 0 in location 1301
 103 run: break-unless redo?, 
9999 mem: location 1301 is 0
9999 run: jumping to instruction 49
 103 run: undo?:boolean <- equal *c, 26/ctrl-z
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: storing 0 in location 1309
 103 run: break-unless undo?, 
9999 mem: location 1309 is 0
9999 run: jumping to instruction 81
 103 run: page-up?:boolean <- equal *c, 2/ctrl-b
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: storing 0 in location 1312
 103 run: break-unless page-up?, 
9999 mem: location 1312 is 0
9999 run: jumping to instruction 98
 103 run: page-down?:boolean <- equal *c, 6/ctrl-f
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: storing 0 in location 1319
 103 run: break-unless page-down?, 
9999 mem: location 1319 is 0
9999 run: jumping to instruction 115
 103 run: delete-to-end-of-line?:boolean <- equal *c, 11/ctrl-k
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: storing 0 in location 1320
 103 run: break-unless delete-to-end-of-line?, 
9999 mem: location 1320 is 0
9999 run: jumping to instruction 121
 103 run: delete-to-start-of-line?:boolean <- equal *c, 21/ctrl-u
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: storing 0 in location 1321
 103 run: break-unless delete-to-start-of-line?, 
9999 mem: location 1321 is 0
9999 run: jumping to instruction 127
 103 run: move-to-end-of-line?:boolean <- equal *c, 5/ctrl-e
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: storing 0 in location 1322
 103 run: break-unless move-to-end-of-line?, 
9999 mem: location 1322 is 0
9999 run: jumping to instruction 144
 103 run: move-to-start-of-line?:boolean <- equal *c, 1/ctrl-a
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: storing 0 in location 1323
 103 run: break-unless move-to-start-of-line?, 
9999 mem: location 1323 is 0
9999 run: jumping to instruction 161
 103 run: delete-previous-character?:boolean <- equal *c, 8/backspace
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: storing 0 in location 1324
 103 run: break-unless delete-previous-character?, 
9999 mem: location 1324 is 0
9999 run: jumping to instruction 167
 103 run: tab?:boolean <- equal *c, 9/tab
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: storing 0 in location 1326
 103 run: break-unless tab?, 
9999 mem: location 1326 is 0
9999 run: jumping to instruction 174
 103 run: regular-character?:boolean <- greater-or-equal *c, 32/space
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: storing 1 in location 1327
 103 run: newline?:boolean <- equal *c, 10/newline
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: storing 0 in location 1328
 103 run: regular-character? <- or regular-character?, newline?
9999 mem: location 1327 is 1
9999 mem: location 1328 is 0
9999 mem: storing 1 in location 1327
 103 run: jump-if regular-character?, 1:offset
9999 mem: location 1327 is 1
9999 run: jumping to instruction 180
 103 run: top-before:address:duplex-list <- get *editor, top-of-screen:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1116
9999 run: its type is address
9999 mem: location 1116 is 1147
9999 mem: storing 1147 in location 1329
 103 run: editor, screen, go-render?:boolean <- insert-at-cursor editor, *c, screen
9999 mem: location 1286 is 1115
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 98
9999 mem: location 1285 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 35
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1355
 104 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 1356
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1357
 104 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1389
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1118
9999 mem: storing 1118 in location 1358
 104 run: insert-duplex c, *before-cursor
9999 mem: location 1356 is 98
9999 mem: location 1358 is 1118
9999 mem: location 1118 is 1389
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 105 run: x:location <- next-ingredient 
9999 mem: storing 98 in location 1141
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1389 in location 1142
 105 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1394
9999 mem: storing 1394 in location 1143
 105 run: val:address:location <- get-address *new-node, value:offset
9999 mem: location 1143 is 1394
9999 mem: location 1394 is 0
9999 mem: location 1395 is 0
9999 mem: location 1396 is 0
9999 mem: location 1143 is 1394
9999 run: address to copy is 1394
9999 mem: storing 1394 in location 1144
 105 run: *val <- copy x
9999 mem: location 1141 is 98
9999 mem: location 1144 is 1394
9999 mem: location 1144 is 1394
9999 mem: storing 98 in location 1394
 105 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1142 is 1389
9999 mem: location 1389 is 97
9999 mem: location 1390 is 0
9999 mem: location 1391 is 1147
9999 mem: location 1142 is 1389
9999 run: address to copy is 1390
9999 run: its type is address
9999 mem: location 1390 is 0
9999 mem: storing 0 in location 1145
 105 run: y:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1142 is 1389
9999 mem: location 1389 is 97
9999 mem: location 1390 is 0
9999 mem: location 1391 is 1147
9999 mem: location 1142 is 1389
9999 run: address to copy is 1390
9999 mem: storing 1390 in location 1146
 105 run: *y <- copy new-node
9999 mem: location 1143 is 1394
9999 mem: location 1146 is 1390
9999 mem: location 1146 is 1390
9999 mem: storing 1394 in location 1390
 105 run: y <- get-address *new-node, prev:offset
9999 mem: location 1143 is 1394
9999 mem: location 1394 is 98
9999 mem: location 1395 is 0
9999 mem: location 1396 is 0
9999 mem: location 1143 is 1394
9999 run: address to copy is 1396
9999 mem: storing 1396 in location 1146
 105 run: *y <- copy in
9999 mem: location 1142 is 1389
9999 mem: location 1146 is 1396
9999 mem: location 1146 is 1396
9999 mem: storing 1389 in location 1396
 105 run: y <- get-address *new-node, next:offset
9999 mem: location 1143 is 1394
9999 mem: location 1394 is 98
9999 mem: location 1395 is 0
9999 mem: location 1396 is 1389
9999 mem: location 1143 is 1394
9999 run: address to copy is 1395
9999 mem: storing 1395 in location 1146
 105 run: *y <- copy next-node
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1395
9999 mem: location 1146 is 1395
9999 mem: storing 0 in location 1395
 105 run: jump-if next-node, 1:offset
9999 mem: location 1145 is 0
9999 run: jump-if fell through
 105 run: reply new-node
9999 mem: location 1143 is 1394
 104 run: *before-cursor <- next-duplex *before-cursor
9999 mem: location 1358 is 1118
9999 mem: location 1118 is 1389
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1389 in location 1179
 105 run: jump-if in, 1:offset
9999 mem: location 1179 is 1389
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1179 is 1389
9999 mem: location 1389 is 97
9999 mem: location 1390 is 1394
9999 mem: location 1391 is 1147
9999 mem: location 1179 is 1389
9999 run: address to copy is 1390
9999 run: its type is address
9999 mem: location 1390 is 1394
9999 mem: storing 1394 in location 1180
 105 run: reply result
9999 mem: location 1180 is 1394
9999 run: result 0 is 1394
9999 mem: location 1358 is 1118
9999 mem: storing 1394 in location 1118
 104 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1121
9999 mem: storing 1121 in location 1359
 104 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1122
9999 mem: storing 1122 in location 1360
 104 run: left:number <- get *editor, left:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1119
9999 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1361
 104 run: right:number <- get *editor, right:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1120
9999 run: its type is number
9999 mem: location 1120 is 4
9999 mem: storing 4 in location 1362
 104 run: save-row:number <- copy *cursor-row
9999 mem: location 1359 is 1121
9999 mem: location 1121 is 1
9999 mem: location 1359 is 1121
9999 mem: location 1359 is 1121
9999 mem: storing 1 in location 1363
 104 run: save-column:number <- copy *cursor-column
9999 mem: location 1360 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1360 is 1122
9999 mem: location 1360 is 1122
9999 mem: storing 1 in location 1364
 104 run: screen-width:number <- screen-width screen
9999 mem: location 1357 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 105 run: break-unless sc, 
9999 mem: location 1179 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 105 run: reply width
9999 mem: location 1180 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1365
 104 run: screen-height:number <- screen-height screen
9999 mem: location 1357 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 105 run: break-unless sc, 
9999 mem: location 1179 is 1009
9999 run: jump-unless fell through
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 105 run: reply height
9999 mem: location 1180 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1366
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1356 is 98
9999 mem: storing 0 in location 1367
 104 run: break-unless newline?, 
9999 mem: location 1367 is 0
9999 run: jumping to instruction 48
 104 run: wrap-column:number <- subtract right, 1
9999 mem: location 1362 is 4
9999 mem: storing 3 in location 1377
 104 run: at-wrap?:boolean <- greater-or-equal *cursor-column, wrap-column
9999 mem: location 1360 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1377 is 3
9999 mem: storing 0 in location 1378
 104 run: break-unless at-wrap?, 
9999 mem: location 1378 is 0
9999 run: jumping to instruction 67
 104 run: *cursor-column <- add *cursor-column, 1
9999 mem: location 1360 is 1122
9999 mem: location 1122 is 1
9999 mem: location 1360 is 1122
9999 mem: storing 2 in location 1122
 104 run: next:address:duplex-list <- next-duplex *before-cursor
9999 mem: location 1358 is 1118
9999 mem: location 1118 is 1394
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1394 in location 1179
 105 run: jump-if in, 1:offset
9999 mem: location 1179 is 1394
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1179 is 1394
9999 mem: location 1394 is 98
9999 mem: location 1395 is 0
9999 mem: location 1396 is 1389
9999 mem: location 1179 is 1394
9999 run: address to copy is 1395
9999 run: its type is address
9999 mem: location 1395 is 0
9999 mem: storing 0 in location 1180
 105 run: reply result
9999 mem: location 1180 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1379
 104 run: at-end?:boolean <- equal next, 0/null
9999 mem: location 1379 is 0
9999 mem: storing 1 in location 1380
 104 run: break-unless at-end?, 
9999 mem: location 1380 is 1
9999 run: jump-unless fell through
 104 run: bottom:number <- subtract screen-height, 1
9999 mem: location 1366 is 5
9999 mem: storing 4 in location 1381
 104 run: at-bottom?:boolean <- equal save-row, bottom
9999 mem: location 1363 is 1
9999 mem: location 1381 is 4
9999 mem: storing 0 in location 1382
 104 run: at-right?:boolean <- equal save-column, right
9999 mem: location 1364 is 1
9999 mem: location 1362 is 4
9999 mem: storing 0 in location 1383
 104 run: overflow?:boolean <- and at-bottom?, at-right?
9999 mem: location 1382 is 0
9999 mem: location 1383 is 0
9999 mem: storing 0 in location 1384
 104 run: break-if overflow?, 
9999 mem: location 1384 is 0
9999 run: jump-if fell through
 104 run: move-cursor screen, save-row, save-column
9999 mem: location 1357 is 1009
9999 mem: location 1363 is 1
9999 mem: location 1364 is 1
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1183
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1184
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 1 in location 1185
 105 run: break-unless sc, 
9999 mem: location 1183 is 1009
9999 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1186
 105 run: *row <- copy new-row
9999 mem: location 1184 is 1
9999 mem: location 1186 is 1011
9999 mem: location 1186 is 1011
9999 mem: storing 1 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1187
 105 run: *column <- copy new-column
9999 mem: location 1185 is 1
9999 mem: location 1187 is 1012
9999 mem: location 1187 is 1012
9999 mem: storing 1 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1183 is 1009
 104 run: print-character screen, c
9999 mem: location 1357 is 1009
9999 mem: location 1356 is 98
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1196
 105 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 1197
 105 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1198
9999 mem: storing 0 in location 1199
 105 run: break-if color-found?, 
9999 mem: location 1199 is 0
9999 run: jump-if fell through
 105 run: color <- copy 7/white
9999 mem: storing 7 in location 1198
 105 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1200
9999 mem: storing 0 in location 1201
 105 run: break-if bg-color-found?, 
9999 mem: location 1201 is 0
9999 run: jump-if fell through
 105 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1200
 105 run: trace 90, [print-character], c
9999 mem: location 1197 is 98
  90 print-character: 98 
 105 run: break-unless sc, 
9999 mem: location 1196 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1202
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1203
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1204
 105 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1205
 105 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9999 run: jumping to instruction 22
 105 run: legal? <- lesser-than *row, height
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1203 is 5
9999 mem: storing 1 in location 1205
 105 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9999 run: jumping to instruction 25
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1206
 105 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1205
 105 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9999 run: jumping to instruction 29
 105 run: legal? <- lesser-than *column, width
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1202 is 10
9999 mem: storing 1 in location 1205
 105 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9999 run: jumping to instruction 32
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1197 is 98
9999 mem: storing 0 in location 1207
 105 run: break-unless newline?, 
9999 mem: location 1207 is 0
9999 run: jumping to instruction 43
 105 run: index:number <- multiply *row, width
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1202 is 10
9999 mem: storing 10 in location 1210
 105 run: index <- add index, *column
9999 mem: location 1210 is 10
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 11 in location 1210
 105 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1211
 105 run: len:number <- length *buf
9999 mem: location 1211 is 1014
9999 mem: storing 50 in location 1212
 105 run: backspace?:boolean <- equal c, 8
9999 mem: location 1197 is 98
9999 mem: storing 0 in location 1213
 105 run: break-unless backspace?, 
9999 mem: location 1213 is 0
9999 run: jumping to instruction 63
 105 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1211 is 1014
9999 mem: location 1210 is 11
9999 mem: storing 1037 in location 1215
 105 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1215 is 1037
9999 mem: location 1037 is 32
9999 mem: location 1038 is 7
9999 mem: location 1215 is 1037
9999 run: address to copy is 1037
9999 mem: storing 1037 in location 1216
 105 run: *cursor-contents <- copy c
9999 mem: location 1197 is 98
9999 mem: location 1216 is 1037
9999 mem: location 1216 is 1037
9999 mem: storing 98 in location 1037
 105 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1215 is 1037
9999 mem: location 1037 is 98
9999 mem: location 1038 is 7
9999 mem: location 1215 is 1037
9999 run: address to copy is 1038
9999 mem: storing 1038 in location 1217
 105 run: *cursor-color <- copy color
9999 mem: location 1198 is 7
9999 mem: location 1217 is 1038
9999 mem: location 1217 is 1038
9999 mem: storing 7 in location 1038
 105 run: right:number <- subtract width, 1
9999 mem: location 1202 is 10
9999 mem: storing 9 in location 1218
 105 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1218 is 9
9999 mem: storing 0 in location 1219
 105 run: break-if at-right?, 
9999 mem: location 1219 is 0
9999 run: jump-if fell through
 105 run: *column <- add *column, 1
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1206 is 1012
9999 mem: storing 2 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1196 is 1009
 104 run: reply editor/same-as-ingredient:0, screen/same-as-ingredient:2, 0/no-more-render
9999 mem: location 1355 is 1115
9999 mem: location 1357 is 1009
9999 run: result 0 is 1115
9999 run: result 1 is 1009
9999 run: result 2 is 0
9999 mem: storing 1115 in location 1286
9999 mem: storing 1009 in location 1285
9999 mem: storing 0 in location 1325
 103 run: top-after:address:duplex-list <- get *editor, top-of-screen:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1116
9999 run: its type is address
9999 mem: location 1116 is 1147
9999 mem: storing 1147 in location 1330
 103 run: undo:address:address:list <- get-address *editor, undo:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1124
9999 mem: storing 1124 in location 1304
 103 run: break-unless *undo, 
9999 mem: location 1304 is 1124
9999 mem: location 1124 is 1392
9999 run: jump-unless fell through
 103 run: op:address:operation <- first *undo
9999 mem: location 1304 is 1124
9999 mem: location 1124 is 1392
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:list <- next-ingredient 
9999 mem: storing 1392 in location 1179
 104 run: result:location <- get *in, value:offset
9999 mem: location 1179 is 1392
9999 mem: location 1392 is 1000
9999 mem: location 1393 is 0
9999 mem: location 1179 is 1392
9999 run: address to copy is 1392
9999 run: its type is number
9999 mem: location 1392 is 1000
9999 mem: storing 1000 in location 1180
 104 run: reply result
9999 mem: location 1180 is 1000
9999 run: result 0 is 1000
9999 mem: storing 1000 in location 1303
 103 run: typing:address:insert-operation <- maybe-convert *op, typing:variant
9999 mem: location 1303 is 1000
9999 mem: location 1000 is 0
9999 mem: location 1001 is 1
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 1
9999 mem: location 1005 is 1
9999 mem: location 1006 is 1147
9999 mem: location 1007 is 1389
9999 mem: location 1008 is 0
9999 mem: location 1303 is 1000
9999 mem: storing 1001 in location 1307
 103 run: break-unless typing, 
9999 mem: location 1307 is 1001
9999 run: jump-unless fell through
 103 run: insert-until:address:address:duplex-list <- get-address *typing, insert-until:offset
9999 mem: location 1307 is 1001
9999 mem: location 1001 is 1
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 1
9999 mem: location 1005 is 1
9999 mem: location 1006 is 1147
9999 mem: location 1007 is 1389
9999 mem: location 1008 is 0
9999 mem: location 1307 is 1001
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1331
 103 run: *insert-until <- next-duplex *before-cursor
9999 mem: location 1295 is 1118
9999 mem: location 1118 is 1394
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1394 in location 1179
 104 run: jump-if in, 1:offset
9999 mem: location 1179 is 1394
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1179 is 1394
9999 mem: location 1394 is 98
9999 mem: location 1395 is 0
9999 mem: location 1396 is 1389
9999 mem: location 1179 is 1394
9999 run: address to copy is 1395
9999 run: its type is address
9999 mem: location 1395 is 0
9999 mem: storing 0 in location 1180
 104 run: reply result
9999 mem: location 1180 is 0
9999 run: result 0 is 0
9999 mem: location 1331 is 1008
9999 mem: storing 0 in location 1008
 103 run: after-row:address:number <- get-address *typing, after-row:offset
9999 mem: location 1307 is 1001
9999 mem: location 1001 is 1
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 1
9999 mem: location 1005 is 1
9999 mem: location 1006 is 1147
9999 mem: location 1007 is 1389
9999 mem: location 1008 is 0
9999 mem: location 1307 is 1001
9999 run: address to copy is 1004
9999 mem: storing 1004 in location 1332
 103 run: *after-row <- copy *cursor-row
9999 mem: location 1296 is 1121
9999 mem: location 1121 is 1
9999 mem: location 1296 is 1121
9999 mem: location 1332 is 1004
9999 mem: location 1296 is 1121
9999 mem: location 1332 is 1004
9999 mem: storing 1 in location 1004
 103 run: after-column:address:number <- get-address *typing, after-column:offset
9999 mem: location 1307 is 1001
9999 mem: location 1001 is 1
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 1
9999 mem: location 1005 is 1
9999 mem: location 1006 is 1147
9999 mem: location 1007 is 1389
9999 mem: location 1008 is 0
9999 mem: location 1307 is 1001
9999 run: address to copy is 1005
9999 mem: storing 1005 in location 1333
 103 run: *after-column <- copy *cursor-column
9999 mem: location 1297 is 1122
9999 mem: location 1122 is 2
9999 mem: location 1297 is 1122
9999 mem: location 1333 is 1005
9999 mem: location 1297 is 1122
9999 mem: location 1333 is 1005
9999 mem: storing 2 in location 1005
 103 run: after-top:address:number <- get-address *typing, after-top-of-screen:offset
9999 mem: location 1307 is 1001
9999 mem: location 1001 is 1
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 1
9999 mem: location 1005 is 2
9999 mem: location 1006 is 1147
9999 mem: location 1007 is 1389
9999 mem: location 1008 is 0
9999 mem: location 1307 is 1001
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1334
 103 run: *after-top <- get *editor, top-of-screen:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1116
9999 run: its type is address
9999 mem: location 1116 is 1147
9999 mem: location 1334 is 1006
9999 mem: storing 1147 in location 1006
 103 run: jump +done-inserting-character:label
9999 run: jumping to instruction 206
 103 run: reply screen/same-as-ingredient:0, editor/same-as-ingredient:1, go-render?
9999 mem: location 1285 is 1009
9999 mem: location 1286 is 1115
9999 mem: location 1325 is 0
9999 run: result 0 is 1009
9999 run: result 1 is 1115
9999 run: result 2 is 0
9999 mem: storing 1009 in location 1265
9999 mem: storing 1115 in location 1267
9999 mem: storing 0 in location 1282
 102 run: break-unless go-render?, 
9999 mem: location 1282 is 0
9999 run: jumping to instruction 33
 102 run: loop 
9999 run: jumping to instruction 5
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1266 is 1261
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1261 in location 1222
 103 run: break-unless x, 
9999 mem: location 1222 is 1261
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 2
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9999 run: address to copy is 1261
9999 mem: storing 1261 in location 1223
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 2
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9999 run: address to copy is 1262
9999 run: its type is address
9999 mem: location 1262 is 1248
9999 mem: storing 1248 in location 1224
 103 run: max:number <- length *buf
9999 mem: location 1224 is 1248
9999 mem: storing 3 in location 1225
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 2
9999 mem: location 1225 is 3
9999 mem: storing 0 in location 1226
 103 run: break-unless done?, 
9999 mem: location 1226 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index *buf, *idx
9999 mem: location 1224 is 1248
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 2
9999 run: address to copy is 1257
9999 run: its type is event
9999 mem: location 1257 is 0
9999 mem: location 1258 is 99
9999 mem: location 1259 is 0
9999 mem: location 1260 is 0
9999 mem: storing 0 in location 1228
9999 mem: storing 99 in location 1229
9999 mem: storing 0 in location 1230
9999 mem: storing 0 in location 1231
 103 run: *idx <- add *idx, 1
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 2
9999 mem: location 1223 is 1261
9999 mem: storing 3 in location 1261
 103 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1228 is 0
9999 mem: location 1229 is 99
9999 mem: location 1230 is 0
9999 mem: location 1231 is 0
9999 mem: location 1222 is 1261
9999 run: result 0 is [0, 99, 0, 0]
9999 run: result 1 is 1261
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1268
9999 mem: storing 99 in location 1269
9999 mem: storing 0 in location 1270
9999 mem: storing 0 in location 1271
9999 mem: storing 1261 in location 1266
9999 mem: storing 1 in location 1272
9999 mem: storing 0 in location 1273
 102 run: loop-unless found?, 
9999 mem: location 1272 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1273 is 0
9999 run: jump-if fell through
schedule: editor-event-loop/run1001/scenario-editor-inserts-characters-into-empty-editor
 102 run: trace 10, [app], [next-event]
  10 app: next-event 
 102 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1268 is 0
9999 mem: location 1269 is 99
9999 mem: location 1270 is 0
9999 mem: location 1271 is 0
9999 mem: storing 0 in location 1274
 102 run: break-unless t, 
9999 mem: location 1274 is 0
9999 run: jumping to instruction 26
 102 run: break-if t, 
9999 mem: location 1274 is 0
9999 run: jump-if fell through
 102 run: screen, editor, go-render?:boolean <- handle-keyboard-event screen, editor, e
9999 mem: location 1265 is 1009
9999 mem: location 1267 is 1115
9999 mem: location 1268 is 0
9999 mem: location 1269 is 99
9999 mem: location 1270 is 0
9999 mem: location 1271 is 0
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 69
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1285
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1286
 103 run: e:event <- next-ingredient 
9999 mem: storing 0 in location 1287
9999 mem: storing 99 in location 1288
9999 mem: storing 0 in location 1289
9999 mem: storing 0 in location 1290
 103 run: jump-if editor, 1:offset
9999 mem: location 1286 is 1115
9999 run: jumping to instruction 6
 103 run: screen-width:number <- screen-width screen
9999 mem: location 1285 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 104 run: break-unless sc, 
9999 mem: location 1179 is 1009
9999 run: jump-unless fell through
 104 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 104 run: reply width
9999 mem: location 1180 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1291
 103 run: screen-height:number <- screen-height screen
9999 mem: location 1285 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 104 run: break-unless sc, 
9999 mem: location 1179 is 1009
9999 run: jump-unless fell through
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 104 run: reply height
9999 mem: location 1180 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1292
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1119
9999 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1293
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1120
9999 run: its type is number
9999 mem: location 1120 is 4
9999 mem: storing 4 in location 1294
 103 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1118
9999 mem: storing 1118 in location 1295
 103 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1121
9999 mem: storing 1121 in location 1296
 103 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1122
9999 mem: storing 1122 in location 1297
 103 run: save-row:number <- copy *cursor-row
9999 mem: location 1296 is 1121
9999 mem: location 1121 is 1
9999 mem: location 1296 is 1121
9999 mem: location 1296 is 1121
9999 mem: storing 1 in location 1298
 103 run: save-column:number <- copy *cursor-column
9999 mem: location 1297 is 1122
9999 mem: location 1122 is 2
9999 mem: location 1297 is 1122
9999 mem: location 1297 is 1122
9999 mem: storing 2 in location 1299
 103 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1287 is 0
9999 mem: location 1288 is 99
9999 mem: location 1289 is 0
9999 mem: location 1290 is 0
9999 mem: storing 1288 in location 1300
 103 run: break-unless c, 
9999 mem: location 1300 is 1288
9999 run: jump-unless fell through
 103 run: trace 10, [app], [handle-keyboard-event: special character]
  10 app: handle-keyboard-event: special character 
 103 run: redo?:boolean <- equal *c, 25/ctrl-y
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: storing 0 in location 1301
 103 run: break-unless redo?, 
9999 mem: location 1301 is 0
9999 run: jumping to instruction 49
 103 run: undo?:boolean <- equal *c, 26/ctrl-z
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: storing 0 in location 1309
 103 run: break-unless undo?, 
9999 mem: location 1309 is 0
9999 run: jumping to instruction 81
 103 run: page-up?:boolean <- equal *c, 2/ctrl-b
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: storing 0 in location 1312
 103 run: break-unless page-up?, 
9999 mem: location 1312 is 0
9999 run: jumping to instruction 98
 103 run: page-down?:boolean <- equal *c, 6/ctrl-f
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: storing 0 in location 1319
 103 run: break-unless page-down?, 
9999 mem: location 1319 is 0
9999 run: jumping to instruction 115
 103 run: delete-to-end-of-line?:boolean <- equal *c, 11/ctrl-k
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: storing 0 in location 1320
 103 run: break-unless delete-to-end-of-line?, 
9999 mem: location 1320 is 0
9999 run: jumping to instruction 121
 103 run: delete-to-start-of-line?:boolean <- equal *c, 21/ctrl-u
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: storing 0 in location 1321
 103 run: break-unless delete-to-start-of-line?, 
9999 mem: location 1321 is 0
9999 run: jumping to instruction 127
 103 run: move-to-end-of-line?:boolean <- equal *c, 5/ctrl-e
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: storing 0 in location 1322
 103 run: break-unless move-to-end-of-line?, 
9999 mem: location 1322 is 0
9999 run: jumping to instruction 144
 103 run: move-to-start-of-line?:boolean <- equal *c, 1/ctrl-a
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: storing 0 in location 1323
 103 run: break-unless move-to-start-of-line?, 
9999 mem: location 1323 is 0
9999 run: jumping to instruction 161
 103 run: delete-previous-character?:boolean <- equal *c, 8/backspace
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: storing 0 in location 1324
 103 run: break-unless delete-previous-character?, 
9999 mem: location 1324 is 0
9999 run: jumping to instruction 167
 103 run: tab?:boolean <- equal *c, 9/tab
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: storing 0 in location 1326
 103 run: break-unless tab?, 
9999 mem: location 1326 is 0
9999 run: jumping to instruction 174
 103 run: regular-character?:boolean <- greater-or-equal *c, 32/space
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: storing 1 in location 1327
 103 run: newline?:boolean <- equal *c, 10/newline
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: storing 0 in location 1328
 103 run: regular-character? <- or regular-character?, newline?
9999 mem: location 1327 is 1
9999 mem: location 1328 is 0
9999 mem: storing 1 in location 1327
 103 run: jump-if regular-character?, 1:offset
9999 mem: location 1327 is 1
9999 run: jumping to instruction 180
 103 run: top-before:address:duplex-list <- get *editor, top-of-screen:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1116
9999 run: its type is address
9999 mem: location 1116 is 1147
9999 mem: storing 1147 in location 1329
 103 run: editor, screen, go-render?:boolean <- insert-at-cursor editor, *c, screen
9999 mem: location 1286 is 1115
9999 mem: location 1300 is 1288
9999 mem: location 1288 is 99
9999 mem: location 1285 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 35
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1355
 104 run: c:character <- next-ingredient 
9999 mem: storing 99 in location 1356
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1357
 104 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1394
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1118
9999 mem: storing 1118 in location 1358
 104 run: insert-duplex c, *before-cursor
9999 mem: location 1356 is 99
9999 mem: location 1358 is 1118
9999 mem: location 1118 is 1394
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 105 run: x:location <- next-ingredient 
9999 mem: storing 99 in location 1141
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1394 in location 1142
 105 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1397
9999 mem: storing 1397 in location 1143
 105 run: val:address:location <- get-address *new-node, value:offset
9999 mem: location 1143 is 1397
9999 mem: location 1397 is 0
9999 mem: location 1398 is 0
9999 mem: location 1399 is 0
9999 mem: location 1143 is 1397
9999 run: address to copy is 1397
9999 mem: storing 1397 in location 1144
 105 run: *val <- copy x
9999 mem: location 1141 is 99
9999 mem: location 1144 is 1397
9999 mem: location 1144 is 1397
9999 mem: storing 99 in location 1397
 105 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1142 is 1394
9999 mem: location 1394 is 98
9999 mem: location 1395 is 0
9999 mem: location 1396 is 1389
9999 mem: location 1142 is 1394
9999 run: address to copy is 1395
9999 run: its type is address
9999 mem: location 1395 is 0
9999 mem: storing 0 in location 1145
 105 run: y:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1142 is 1394
9999 mem: location 1394 is 98
9999 mem: location 1395 is 0
9999 mem: location 1396 is 1389
9999 mem: location 1142 is 1394
9999 run: address to copy is 1395
9999 mem: storing 1395 in location 1146
 105 run: *y <- copy new-node
9999 mem: location 1143 is 1397
9999 mem: location 1146 is 1395
9999 mem: location 1146 is 1395
9999 mem: storing 1397 in location 1395
 105 run: y <- get-address *new-node, prev:offset
9999 mem: location 1143 is 1397
9999 mem: location 1397 is 99
9999 mem: location 1398 is 0
9999 mem: location 1399 is 0
9999 mem: location 1143 is 1397
9999 run: address to copy is 1399
9999 mem: storing 1399 in location 1146
 105 run: *y <- copy in
9999 mem: location 1142 is 1394
9999 mem: location 1146 is 1399
9999 mem: location 1146 is 1399
9999 mem: storing 1394 in location 1399
 105 run: y <- get-address *new-node, next:offset
9999 mem: location 1143 is 1397
9999 mem: location 1397 is 99
9999 mem: location 1398 is 0
9999 mem: location 1399 is 1394
9999 mem: location 1143 is 1397
9999 run: address to copy is 1398
9999 mem: storing 1398 in location 1146
 105 run: *y <- copy next-node
9999 mem: location 1145 is 0
9999 mem: location 1146 is 1398
9999 mem: location 1146 is 1398
9999 mem: storing 0 in location 1398
 105 run: jump-if next-node, 1:offset
9999 mem: location 1145 is 0
9999 run: jump-if fell through
 105 run: reply new-node
9999 mem: location 1143 is 1397
 104 run: *before-cursor <- next-duplex *before-cursor
9999 mem: location 1358 is 1118
9999 mem: location 1118 is 1394
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1394 in location 1179
 105 run: jump-if in, 1:offset
9999 mem: location 1179 is 1394
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1179 is 1394
9999 mem: location 1394 is 98
9999 mem: location 1395 is 1397
9999 mem: location 1396 is 1389
9999 mem: location 1179 is 1394
9999 run: address to copy is 1395
9999 run: its type is address
9999 mem: location 1395 is 1397
9999 mem: storing 1397 in location 1180
 105 run: reply result
9999 mem: location 1180 is 1397
9999 run: result 0 is 1397
9999 mem: location 1358 is 1118
9999 mem: storing 1397 in location 1118
 104 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1397
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1121
9999 mem: storing 1121 in location 1359
 104 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1397
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1122
9999 mem: storing 1122 in location 1360
 104 run: left:number <- get *editor, left:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1397
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1119
9999 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1361
 104 run: right:number <- get *editor, right:offset
9999 mem: location 1355 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1397
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 2
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1355 is 1115
9999 run: address to copy is 1120
9999 run: its type is number
9999 mem: location 1120 is 4
9999 mem: storing 4 in location 1362
 104 run: save-row:number <- copy *cursor-row
9999 mem: location 1359 is 1121
9999 mem: location 1121 is 1
9999 mem: location 1359 is 1121
9999 mem: location 1359 is 1121
9999 mem: storing 1 in location 1363
 104 run: save-column:number <- copy *cursor-column
9999 mem: location 1360 is 1122
9999 mem: location 1122 is 2
9999 mem: location 1360 is 1122
9999 mem: location 1360 is 1122
9999 mem: storing 2 in location 1364
 104 run: screen-width:number <- screen-width screen
9999 mem: location 1357 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 105 run: break-unless sc, 
9999 mem: location 1179 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1180
 105 run: reply width
9999 mem: location 1180 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1365
 104 run: screen-height:number <- screen-height screen
9999 mem: location 1357 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1179
 105 run: break-unless sc, 
9999 mem: location 1179 is 1009
9999 run: jump-unless fell through
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1179 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1179 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1180
 105 run: reply height
9999 mem: location 1180 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1366
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1356 is 99
9999 mem: storing 0 in location 1367
 104 run: break-unless newline?, 
9999 mem: location 1367 is 0
9999 run: jumping to instruction 48
 104 run: wrap-column:number <- subtract right, 1
9999 mem: location 1362 is 4
9999 mem: storing 3 in location 1377
 104 run: at-wrap?:boolean <- greater-or-equal *cursor-column, wrap-column
9999 mem: location 1360 is 1122
9999 mem: location 1122 is 2
9999 mem: location 1377 is 3
9999 mem: storing 0 in location 1378
 104 run: break-unless at-wrap?, 
9999 mem: location 1378 is 0
9999 run: jumping to instruction 67
 104 run: *cursor-column <- add *cursor-column, 1
9999 mem: location 1360 is 1122
9999 mem: location 1122 is 2
9999 mem: location 1360 is 1122
9999 mem: storing 3 in location 1122
 104 run: next:address:duplex-list <- next-duplex *before-cursor
9999 mem: location 1358 is 1118
9999 mem: location 1118 is 1397
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1397 in location 1179
 105 run: jump-if in, 1:offset
9999 mem: location 1179 is 1397
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1179 is 1397
9999 mem: location 1397 is 99
9999 mem: location 1398 is 0
9999 mem: location 1399 is 1394
9999 mem: location 1179 is 1397
9999 run: address to copy is 1398
9999 run: its type is address
9999 mem: location 1398 is 0
9999 mem: storing 0 in location 1180
 105 run: reply result
9999 mem: location 1180 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1379
 104 run: at-end?:boolean <- equal next, 0/null
9999 mem: location 1379 is 0
9999 mem: storing 1 in location 1380
 104 run: break-unless at-end?, 
9999 mem: location 1380 is 1
9999 run: jump-unless fell through
 104 run: bottom:number <- subtract screen-height, 1
9999 mem: location 1366 is 5
9999 mem: storing 4 in location 1381
 104 run: at-bottom?:boolean <- equal save-row, bottom
9999 mem: location 1363 is 1
9999 mem: location 1381 is 4
9999 mem: storing 0 in location 1382
 104 run: at-right?:boolean <- equal save-column, right
9999 mem: location 1364 is 2
9999 mem: location 1362 is 4
9999 mem: storing 0 in location 1383
 104 run: overflow?:boolean <- and at-bottom?, at-right?
9999 mem: location 1382 is 0
9999 mem: location 1383 is 0
9999 mem: storing 0 in location 1384
 104 run: break-if overflow?, 
9999 mem: location 1384 is 0
9999 run: jump-if fell through
 104 run: move-cursor screen, save-row, save-column
9999 mem: location 1357 is 1009
9999 mem: location 1363 is 1
9999 mem: location 1364 is 2
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1183
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1184
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 2 in location 1185
 105 run: break-unless sc, 
9999 mem: location 1183 is 1009
9999 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1186
 105 run: *row <- copy new-row
9999 mem: location 1184 is 1
9999 mem: location 1186 is 1011
9999 mem: location 1186 is 1011
9999 mem: storing 1 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1183 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1183 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1187
 105 run: *column <- copy new-column
9999 mem: location 1185 is 2
9999 mem: location 1187 is 1012
9999 mem: location 1187 is 1012
9999 mem: storing 2 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1183 is 1009
 104 run: print-character screen, c
9999 mem: location 1357 is 1009
9999 mem: location 1356 is 99
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1196
 105 run: c:character <- next-ingredient 
9999 mem: storing 99 in location 1197
 105 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1198
9999 mem: storing 0 in location 1199
 105 run: break-if color-found?, 
9999 mem: location 1199 is 0
9999 run: jump-if fell through
 105 run: color <- copy 7/white
9999 mem: storing 7 in location 1198
 105 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1200
9999 mem: storing 0 in location 1201
 105 run: break-if bg-color-found?, 
9999 mem: location 1201 is 0
9999 run: jump-if fell through
 105 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1200
 105 run: trace 90, [print-character], c
9999 mem: location 1197 is 99
  90 print-character: 99 
 105 run: break-unless sc, 
9999 mem: location 1196 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1202
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1203
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1204
 105 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1205
 105 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9999 run: jumping to instruction 22
 105 run: legal? <- lesser-than *row, height
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1203 is 5
9999 mem: storing 1 in location 1205
 105 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9999 run: jumping to instruction 25
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1206
 105 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 1 in location 1205
 105 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9999 run: jumping to instruction 29
 105 run: legal? <- lesser-than *column, width
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1202 is 10
9999 mem: storing 1 in location 1205
 105 run: jump-if legal?, 1:offset
9999 mem: location 1205 is 1
9999 run: jumping to instruction 32
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1197 is 99
9999 mem: storing 0 in location 1207
 105 run: break-unless newline?, 
9999 mem: location 1207 is 0
9999 run: jumping to instruction 43
 105 run: index:number <- multiply *row, width
9999 mem: location 1204 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1202 is 10
9999 mem: storing 10 in location 1210
 105 run: index <- add index, *column
9999 mem: location 1210 is 10
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 12 in location 1210
 105 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1196 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1196 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1211
 105 run: len:number <- length *buf
9999 mem: location 1211 is 1014
9999 mem: storing 50 in location 1212
 105 run: backspace?:boolean <- equal c, 8
9999 mem: location 1197 is 99
9999 mem: storing 0 in location 1213
 105 run: break-unless backspace?, 
9999 mem: location 1213 is 0
9999 run: jumping to instruction 63
 105 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1211 is 1014
9999 mem: location 1210 is 12
9999 mem: storing 1039 in location 1215
 105 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1215 is 1039
9999 mem: location 1039 is 32
9999 mem: location 1040 is 7
9999 mem: location 1215 is 1039
9999 run: address to copy is 1039
9999 mem: storing 1039 in location 1216
 105 run: *cursor-contents <- copy c
9999 mem: location 1197 is 99
9999 mem: location 1216 is 1039
9999 mem: location 1216 is 1039
9999 mem: storing 99 in location 1039
 105 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1215 is 1039
9999 mem: location 1039 is 99
9999 mem: location 1040 is 7
9999 mem: location 1215 is 1039
9999 run: address to copy is 1040
9999 mem: storing 1040 in location 1217
 105 run: *cursor-color <- copy color
9999 mem: location 1198 is 7
9999 mem: location 1217 is 1040
9999 mem: location 1217 is 1040
9999 mem: storing 7 in location 1040
 105 run: right:number <- subtract width, 1
9999 mem: location 1202 is 10
9999 mem: storing 9 in location 1218
 105 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1218 is 9
9999 mem: storing 0 in location 1219
 105 run: break-if at-right?, 
9999 mem: location 1219 is 0
9999 run: jump-if fell through
 105 run: *column <- add *column, 1
9999 mem: location 1206 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1206 is 1012
9999 mem: storing 3 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1196 is 1009
 104 run: reply editor/same-as-ingredient:0, screen/same-as-ingredient:2, 0/no-more-render
9999 mem: location 1355 is 1115
9999 mem: location 1357 is 1009
9999 run: result 0 is 1115
9999 run: result 1 is 1009
9999 run: result 2 is 0
9999 mem: storing 1115 in location 1286
9999 mem: storing 1009 in location 1285
9999 mem: storing 0 in location 1325
 103 run: top-after:address:duplex-list <- get *editor, top-of-screen:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1397
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 3
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1116
9999 run: its type is address
9999 mem: location 1116 is 1147
9999 mem: storing 1147 in location 1330
 103 run: undo:address:address:list <- get-address *editor, undo:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1397
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 3
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1124
9999 mem: storing 1124 in location 1304
 103 run: break-unless *undo, 
9999 mem: location 1304 is 1124
9999 mem: location 1124 is 1392
9999 run: jump-unless fell through
 103 run: op:address:operation <- first *undo
9999 mem: location 1304 is 1124
9999 mem: location 1124 is 1392
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:list <- next-ingredient 
9999 mem: storing 1392 in location 1179
 104 run: result:location <- get *in, value:offset
9999 mem: location 1179 is 1392
9999 mem: location 1392 is 1000
9999 mem: location 1393 is 0
9999 mem: location 1179 is 1392
9999 run: address to copy is 1392
9999 run: its type is number
9999 mem: location 1392 is 1000
9999 mem: storing 1000 in location 1180
 104 run: reply result
9999 mem: location 1180 is 1000
9999 run: result 0 is 1000
9999 mem: storing 1000 in location 1303
 103 run: typing:address:insert-operation <- maybe-convert *op, typing:variant
9999 mem: location 1303 is 1000
9999 mem: location 1000 is 0
9999 mem: location 1001 is 1
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 1
9999 mem: location 1005 is 2
9999 mem: location 1006 is 1147
9999 mem: location 1007 is 1389
9999 mem: location 1008 is 0
9999 mem: location 1303 is 1000
9999 mem: storing 1001 in location 1307
 103 run: break-unless typing, 
9999 mem: location 1307 is 1001
9999 run: jump-unless fell through
 103 run: insert-until:address:address:duplex-list <- get-address *typing, insert-until:offset
9999 mem: location 1307 is 1001
9999 mem: location 1001 is 1
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 1
9999 mem: location 1005 is 2
9999 mem: location 1006 is 1147
9999 mem: location 1007 is 1389
9999 mem: location 1008 is 0
9999 mem: location 1307 is 1001
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1331
 103 run: *insert-until <- next-duplex *before-cursor
9999 mem: location 1295 is 1118
9999 mem: location 1118 is 1397
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1397 in location 1179
 104 run: jump-if in, 1:offset
9999 mem: location 1179 is 1397
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1179 is 1397
9999 mem: location 1397 is 99
9999 mem: location 1398 is 0
9999 mem: location 1399 is 1394
9999 mem: location 1179 is 1397
9999 run: address to copy is 1398
9999 run: its type is address
9999 mem: location 1398 is 0
9999 mem: storing 0 in location 1180
 104 run: reply result
9999 mem: location 1180 is 0
9999 run: result 0 is 0
9999 mem: location 1331 is 1008
9999 mem: storing 0 in location 1008
 103 run: after-row:address:number <- get-address *typing, after-row:offset
9999 mem: location 1307 is 1001
9999 mem: location 1001 is 1
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 1
9999 mem: location 1005 is 2
9999 mem: location 1006 is 1147
9999 mem: location 1007 is 1389
9999 mem: location 1008 is 0
9999 mem: location 1307 is 1001
9999 run: address to copy is 1004
9999 mem: storing 1004 in location 1332
 103 run: *after-row <- copy *cursor-row
9999 mem: location 1296 is 1121
9999 mem: location 1121 is 1
9999 mem: location 1296 is 1121
9999 mem: location 1332 is 1004
9999 mem: location 1296 is 1121
9999 mem: location 1332 is 1004
9999 mem: storing 1 in location 1004
 103 run: after-column:address:number <- get-address *typing, after-column:offset
9999 mem: location 1307 is 1001
9999 mem: location 1001 is 1
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 1
9999 mem: location 1005 is 2
9999 mem: location 1006 is 1147
9999 mem: location 1007 is 1389
9999 mem: location 1008 is 0
9999 mem: location 1307 is 1001
9999 run: address to copy is 1005
9999 mem: storing 1005 in location 1333
 103 run: *after-column <- copy *cursor-column
9999 mem: location 1297 is 1122
9999 mem: location 1122 is 3
9999 mem: location 1297 is 1122
9999 mem: location 1333 is 1005
9999 mem: location 1297 is 1122
9999 mem: location 1333 is 1005
9999 mem: storing 3 in location 1005
 103 run: after-top:address:number <- get-address *typing, after-top-of-screen:offset
9999 mem: location 1307 is 1001
9999 mem: location 1001 is 1
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1147
9999 mem: location 1004 is 1
9999 mem: location 1005 is 3
9999 mem: location 1006 is 1147
9999 mem: location 1007 is 1389
9999 mem: location 1008 is 0
9999 mem: location 1307 is 1001
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1334
 103 run: *after-top <- get *editor, top-of-screen:offset
9999 mem: location 1286 is 1115
9999 mem: location 1115 is 1147
9999 mem: location 1116 is 1147
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1397
9999 mem: location 1119 is 0
9999 mem: location 1120 is 4
9999 mem: location 1121 is 1
9999 mem: location 1122 is 3
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1392
9999 mem: location 1125 is 0
9999 mem: location 1286 is 1115
9999 run: address to copy is 1116
9999 run: its type is address
9999 mem: location 1116 is 1147
9999 mem: location 1334 is 1006
9999 mem: storing 1147 in location 1006
 103 run: jump +done-inserting-character:label
9999 run: jumping to instruction 206
 103 run: reply screen/same-as-ingredient:0, editor/same-as-ingredient:1, go-render?
9999 mem: location 1285 is 1009
9999 mem: location 1286 is 1115
9999 mem: location 1325 is 0
9999 run: result 0 is 1009
9999 run: result 1 is 1115
9999 run: result 2 is 0
9999 mem: storing 1009 in location 1265
9999 mem: storing 1115 in location 1267
9999 mem: storing 0 in location 1282
 102 run: break-unless go-render?, 
9999 mem: location 1282 is 0
9999 run: jumping to instruction 33
 102 run: loop 
9999 run: jumping to instruction 5
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1266 is 1261
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1261 in location 1222
 103 run: break-unless x, 
9999 mem: location 1222 is 1261
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 3
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9999 run: address to copy is 1261
9999 mem: storing 1261 in location 1223
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1222 is 1261
9999 mem: location 1261 is 3
9999 mem: location 1262 is 1248
9999 mem: location 1222 is 1261
9999 run: address to copy is 1262
9999 run: its type is address
9999 mem: location 1262 is 1248
9999 mem: storing 1248 in location 1224
 103 run: max:number <- length *buf
9999 mem: location 1224 is 1248
9999 mem: storing 3 in location 1225
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1223 is 1261
9999 mem: location 1261 is 3
9999 mem: location 1225 is 3
9999 mem: storing 1 in location 1226
 103 run: break-unless done?, 
9999 mem: location 1226 is 1
9999 run: jump-unless fell through
 103 run: dummy:address:event <- new event:type
9999 mem: storing 1177 in location 1227
 103 run: reply *dummy, x/same-as-ingredient:0, 1/found, 1/quit
9999 mem: location 1227 is 1177
9999 mem: location 1177 is 0
9999 mem: location 1178 is 0
9999 mem: location 1179 is 0
9999 mem: location 1180 is 0
9999 mem: location 1222 is 1261
9999 run: result 0 is [0, 0, 0, 0]
9999 run: result 1 is 1261
9999 run: result 2 is 1
9999 run: result 3 is 1
9999 mem: storing 0 in location 1268
9999 mem: storing 0 in location 1269
9999 mem: storing 0 in location 1270
9999 mem: storing 0 in location 1271
9999 mem: storing 1261 in location 1266
9999 mem: storing 1 in location 1272
9999 mem: storing 1 in location 1273
 102 run: loop-unless found?, 
9999 mem: location 1272 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1273 is 1
9999 run: jumping to instruction 36
 100 run: screen-should-contain [
    .          .
    .abc       .
    .┈┈┈┈┈     .
    .          .
  ]
 100 run: check-trace-count-for-label 3, [print-character]
