9991 parse: --- defining scenario_screen-in-scenario-unicode-color
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"5": "literal", "width": <>}
9993 parse:   ingredient: {"3": "literal", "height": <>}
9992 load: after rewriting: screen:address:shared:screen <- new-fake-screen 5/width, 3/height
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:character <- copy 955/greek-small-lambda\n    screen:address:shared:screen <- print screen:address:shared:screen, 1:character/lambda, 1/red\n    2:character <- copy 97/a\n    screen:address:shared:screen <- print screen:address:shared:screen, 2:character/a\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:character <- copy 955/greek-small-lambda
    screen:address:shared:screen <- print screen:address:shared:screen, 1:character/lambda, 1/red
    2:character <- copy 97/a
    screen:address:shared:screen <- print screen:address:shared:screen, 2:character/a
  ]
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n  #  01234\n    .λa   .\n    .     .\n    .     .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain [
  #  01234
    .λa   .
    .     .
    .     .
  ]
9999 parse: recipe scenario_screen-in-scenario-unicode-color has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_screen-in-scenario-unicode-color
9991 transform: --- deduce types for recipe scenario_screen-in-scenario-unicode-color
9992 transform: screen => <address : <shared : <screen : <>>>>
9991 transform: --- collect surrounding spaces for recipe scenario_screen-in-scenario-unicode-color
9991 transform: --- transform names for recipe scenario_screen-in-scenario-unicode-color
9991 transform: --- resolve ambiguous calls for recipe scenario_screen-in-scenario-unicode-color
9992 transform: instruction screen:address:shared:screen <- new-fake-screen 5/width, 3/height
9992 transform: checking variant (strict) 0: recipe new-fake-screen {"w": "number"} {"h": "number"} -> {"result": <"address" : <"shared" : <"screen" : <>>>>}
9991 transform: --- compute instruction operations for recipe scenario_screen-in-scenario-unicode-color
9991 transform: --- transform braces for recipe scenario_screen-in-scenario-unicode-color
9992 transform: assume-screen ...
9992 transform: run ...
9992 transform: screen-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_screen-in-scenario-unicode-color
9991 transform: --- type-check 'call' instructions inside recipe scenario_screen-in-scenario-unicode-color
9991 transform: --- type-check calls inside recipe scenario_screen-in-scenario-unicode-color
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_screen-in-scenario-unicode-color
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_screen-in-scenario-unicode-color
 102 run: screen:address:shared:screen <- new-fake-screen 5/width, 3/height
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1000
9999 mem: storing 10 in location 1001
 103 run: w:number <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 103 run: h:number <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1004
 103 run: result <- new screen:type
9999 mem: allocating size 6
9999 mem: new alloc: 1012
9999 mem: storing 1012 in location 1005
9999 mem: incrementing refcount of 1012: 0 -> 1
 103 run: width:address:number <- get-address *result, num-columns:offset
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1006
 103 run: *width <- copy w
9999 mem: location 1003 is 5
9999 mem: location 1006 is 1014
9999 mem: storing 5 in location 1014
 103 run: height:address:number <- get-address *result, num-rows:offset
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 0
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1007
 103 run: *height <- copy h
9999 mem: location 1004 is 3
9999 mem: location 1007 is 1013
9999 mem: storing 3 in location 1013
 103 run: row:address:number <- get-address *result, cursor-row:offset
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1008
 103 run: *row <- copy 0
9999 mem: location 1008 is 1015
9999 mem: storing 0 in location 1015
 103 run: column:address:number <- get-address *result, cursor-column:offset
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1009
 103 run: *column <- copy 0
9999 mem: location 1009 is 1016
9999 mem: storing 0 in location 1016
 103 run: bufsize:number <- multiply *width, *height
9999 mem: location 1006 is 1014
9999 mem: location 1014 is 5
9999 mem: location 1007 is 1013
9999 mem: location 1013 is 3
9999 mem: storing 15 in location 1010
 103 run: buf:address:address:shared:array:screen-cell <- get-address *result, data:offset
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9999 mem: storing 1017 in location 1011
 103 run: *buf <- new screen-cell:type, bufsize
9999 mem: location 1010 is 15
9999 mem: array size is 15
9999 mem: allocating size 32
9999 mem: new alloc: 1018
9999 mem: storing 15 in location 1019
9999 mem: location 1011 is 1017
9999 mem: storing 1018 in location 1017
9999 mem: incrementing refcount of 1018: 0 -> 1
 103 run: result <- clear-screen result
9999 mem: location 1005 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1050
9999 mem: storing 10 in location 1051
 104 run: screen:address:shared:screen <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1053
9999 mem: incrementing refcount of 1012: 1 -> 2
 104 run: jump-unless screen, 
9999 mem: location 1053 is 1012
9998 run: jump-unless fell through
 104 run: buf:address:shared:array:screen-cell <- get *screen, data:offset
9999 mem: location 1053 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1053 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is <address : <shared : <array : <screen-cell : <>>>>>
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1054
9999 mem: incrementing refcount of 1018: 1 -> 2
 104 run: max:number <- length *buf
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 15 in location 1055
 104 run: i:number <- copy 0
9999 mem: storing 0 in location 1056
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 0
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 0
9999 mem: storing 1020 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1058 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1020
9999 mem: storing 0 in location 1020
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1058 is 1020
9998 run: address to copy is 1021
9999 mem: storing 1021 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1021
9999 mem: storing 7 in location 1021
 104 run: i <- add i, 1
9999 mem: location 1056 is 0
9999 mem: storing 1 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 1
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 1
9999 mem: storing 1022 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1058 is 1022
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1022
9999 mem: storing 0 in location 1022
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1058 is 1022
9998 run: address to copy is 1023
9999 mem: storing 1023 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1023
9999 mem: storing 7 in location 1023
 104 run: i <- add i, 1
9999 mem: location 1056 is 1
9999 mem: storing 2 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 2
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 2
9999 mem: storing 1024 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1058 is 1024
9998 run: address to copy is 1024
9999 mem: storing 1024 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1024
9999 mem: storing 0 in location 1024
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1058 is 1024
9998 run: address to copy is 1025
9999 mem: storing 1025 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1025
9999 mem: storing 7 in location 1025
 104 run: i <- add i, 1
9999 mem: location 1056 is 2
9999 mem: storing 3 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 3
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 3
9999 mem: storing 1026 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1026
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1058 is 1026
9998 run: address to copy is 1026
9999 mem: storing 1026 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1026
9999 mem: storing 0 in location 1026
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1026
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1058 is 1026
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1027
9999 mem: storing 7 in location 1027
 104 run: i <- add i, 1
9999 mem: location 1056 is 3
9999 mem: storing 4 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 4
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 4
9999 mem: storing 1028 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1028
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1058 is 1028
9998 run: address to copy is 1028
9999 mem: storing 1028 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1028
9999 mem: storing 0 in location 1028
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1028
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1058 is 1028
9998 run: address to copy is 1029
9999 mem: storing 1029 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1029
9999 mem: storing 7 in location 1029
 104 run: i <- add i, 1
9999 mem: location 1056 is 4
9999 mem: storing 5 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 5
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 5
9999 mem: storing 1030 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1030
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1058 is 1030
9998 run: address to copy is 1030
9999 mem: storing 1030 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1030
9999 mem: storing 0 in location 1030
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1030
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1058 is 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1031
9999 mem: storing 7 in location 1031
 104 run: i <- add i, 1
9999 mem: location 1056 is 5
9999 mem: storing 6 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 6
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 6
9999 mem: storing 1032 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1032
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1058 is 1032
9998 run: address to copy is 1032
9999 mem: storing 1032 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1032
9999 mem: storing 0 in location 1032
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1032
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1058 is 1032
9998 run: address to copy is 1033
9999 mem: storing 1033 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1033
9999 mem: storing 7 in location 1033
 104 run: i <- add i, 1
9999 mem: location 1056 is 6
9999 mem: storing 7 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 7
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 7
9999 mem: storing 1034 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1058 is 1034
9998 run: address to copy is 1034
9999 mem: storing 1034 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1034
9999 mem: storing 0 in location 1034
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1058 is 1034
9998 run: address to copy is 1035
9999 mem: storing 1035 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1035
9999 mem: storing 7 in location 1035
 104 run: i <- add i, 1
9999 mem: location 1056 is 7
9999 mem: storing 8 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 8
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 8
9999 mem: storing 1036 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1036
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1058 is 1036
9998 run: address to copy is 1036
9999 mem: storing 1036 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1036
9999 mem: storing 0 in location 1036
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1036
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1058 is 1036
9998 run: address to copy is 1037
9999 mem: storing 1037 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1037
9999 mem: storing 7 in location 1037
 104 run: i <- add i, 1
9999 mem: location 1056 is 8
9999 mem: storing 9 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 9
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 9
9999 mem: storing 1038 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1038
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1058 is 1038
9998 run: address to copy is 1038
9999 mem: storing 1038 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1038
9999 mem: storing 0 in location 1038
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1038
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1058 is 1038
9998 run: address to copy is 1039
9999 mem: storing 1039 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1039
9999 mem: storing 7 in location 1039
 104 run: i <- add i, 1
9999 mem: location 1056 is 9
9999 mem: storing 10 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 10
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 10
9999 mem: storing 1040 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1040
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1058 is 1040
9998 run: address to copy is 1040
9999 mem: storing 1040 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1040
9999 mem: storing 0 in location 1040
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1040
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1058 is 1040
9998 run: address to copy is 1041
9999 mem: storing 1041 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1041
9999 mem: storing 7 in location 1041
 104 run: i <- add i, 1
9999 mem: location 1056 is 10
9999 mem: storing 11 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 11
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 11
9999 mem: storing 1042 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1042
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1058 is 1042
9998 run: address to copy is 1042
9999 mem: storing 1042 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1042
9999 mem: storing 0 in location 1042
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1042
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1058 is 1042
9998 run: address to copy is 1043
9999 mem: storing 1043 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1043
9999 mem: storing 7 in location 1043
 104 run: i <- add i, 1
9999 mem: location 1056 is 11
9999 mem: storing 12 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 12
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 12
9999 mem: storing 1044 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1044
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1058 is 1044
9998 run: address to copy is 1044
9999 mem: storing 1044 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1044
9999 mem: storing 0 in location 1044
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1044
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1058 is 1044
9998 run: address to copy is 1045
9999 mem: storing 1045 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1045
9999 mem: storing 7 in location 1045
 104 run: i <- add i, 1
9999 mem: location 1056 is 12
9999 mem: storing 13 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 13
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 13
9999 mem: storing 1046 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1046
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: location 1058 is 1046
9998 run: address to copy is 1046
9999 mem: storing 1046 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1046
9999 mem: storing 0 in location 1046
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1046
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: location 1058 is 1046
9998 run: address to copy is 1047
9999 mem: storing 1047 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1047
9999 mem: storing 7 in location 1047
 104 run: i <- add i, 1
9999 mem: location 1056 is 13
9999 mem: storing 14 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 14
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 14
9999 mem: storing 1048 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1048
9999 mem: location 1048 is 0
9999 mem: location 1049 is 0
9999 mem: location 1058 is 1048
9998 run: address to copy is 1048
9999 mem: storing 1048 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1048
9999 mem: storing 0 in location 1048
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1048
9999 mem: location 1048 is 0
9999 mem: location 1049 is 0
9999 mem: location 1058 is 1048
9998 run: address to copy is 1049
9999 mem: storing 1049 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1049
9999 mem: storing 7 in location 1049
 104 run: i <- add i, 1
9999 mem: location 1056 is 14
9999 mem: storing 15 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 15
9999 mem: location 1055 is 15
9999 mem: storing 1 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 1
9998 run: jumping to instruction 17
 104 run: x:address:number <- get-address *screen, cursor-row:offset
9999 mem: location 1053 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1053 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1061
 104 run: *x <- copy 0
9999 mem: location 1061 is 1015
9999 mem: storing 0 in location 1015
 104 run: x <- get-address *screen, cursor-column:offset
9999 mem: location 1053 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1053 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1061
 104 run: *x <- copy 0
9999 mem: location 1061 is 1016
9999 mem: storing 0 in location 1016
 104 run: reply screen:address:shared:screen
9999 mem: location 1053 is 1012
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 2 -> 1
9999 mem: storing 1012 in location 1005
9999 mem: incrementing refcount of 1012: 1 -> 2
 103 run: reply result:address:shared:screen
9999 mem: location 1005 is 1012
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1012
9999 mem: storing 1012 in location 900
9999 mem: incrementing refcount of 1012: 2 -> 3
 102 run: run [
    1:character <- copy 955/greek-small-lambda
    screen:address:shared:screen <- print screen:address:shared:screen, 1:character/lambda, 1/red
    2:character <- copy 97/a
    screen:address:shared:screen <- print screen:address:shared:screen, 2:character/a
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"955": "literal", "greek-small-lambda": <>}
9993 parse:   product: {"1": "character"}
9992 load: after rewriting: 1:character <- copy 955/greek-small-lambda
9993 parse: instruction: print
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9993 parse:   ingredient: {"1": "character", "lambda": <>}
9993 parse:   ingredient: {"1": "literal", "red": <>}
9993 parse:   product: {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9992 load: after rewriting: screen:address:shared:screen <- print screen:address:shared:screen, 1:character/lambda, 1/red
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"97": "literal", "a": <>}
9993 parse:   product: {"2": "character"}
9992 load: after rewriting: 2:character <- copy 97/a
9993 parse: instruction: print
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9993 parse:   ingredient: {"2": "character", "a": <>}
9993 parse:   product: {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9992 load: after rewriting: screen:address:shared:screen <- print screen:address:shared:screen, 2:character/a
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => <address : <shared : <screen : <>>>>
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction screen:address:shared:screen <- print screen:address:shared:screen, 1:character/lambda, 1/red
9992 transform: checking variant (strict) 0: recipe print {"screen": <"address" : <"shared" : <"screen" : <>>>>} {"c": "character"} -> {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9992 transform: checking variant (strict) 1: recipe print_2 {"screen": <"address" : <"shared" : <"screen" : <>>>>} {"s": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 2: recipe print_3 {"screen": <"address" : <"shared" : <"screen" : <>>>>} {"n": "number"} -> {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 3: recipe print_4 {"screen": <"address" : <"shared" : <"screen" : <>>>>} {"n": <"address" : <"_elem" : <>>>} -> {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9993 transform: strict match failed: ingredient 1
9992 transform: instruction screen:address:shared:screen <- print screen:address:shared:screen, 2:character/a
9992 transform: checking variant (strict) 0: recipe print {"screen": <"address" : <"shared" : <"screen" : <>>>>} {"c": "character"} -> {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9992 transform: checking variant (strict) 1: recipe print_2 {"screen": <"address" : <"shared" : <"screen" : <>>>>} {"s": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 2: recipe print_3 {"screen": <"address" : <"shared" : <"screen" : <>>>>} {"n": "number"} -> {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict) 3: recipe print_4 {"screen": <"address" : <"shared" : <"screen" : <>>>>} {"n": <"address" : <"_elem" : <>>>} -> {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9993 transform: strict match failed: ingredient 1
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: copy ...
9992 transform: print ...
9992 transform: copy ...
9992 transform: print ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:character <- copy 955/greek-small-lambda
9999 mem: storing 955 in location 1
 103 run: screen:address:shared:screen <- print screen:address:shared:screen, 1:character/lambda, 1/red
9999 mem: location 900 is 1012
9999 mem: location 1 is 955
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 25
9999 mem: allocating size 27
9999 mem: new alloc: 1062
9999 mem: storing 25 in location 1063
 104 run: screen:address:shared:screen <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1065
9999 mem: incrementing refcount of 1012: 3 -> 4
 104 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 955 in location 1066
 104 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 1 in location 1067
9999 mem: storing 1 in location 1068
 104 run: jump-if color-found?, 
9999 mem: location 1068 is 1
9998 run: jumping to instruction 7
 104 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1069
9999 mem: storing 0 in location 1070
 104 run: jump-if bg-color-found?, 
9999 mem: location 1070 is 0
9998 run: jump-if fell through
 104 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1069
 104 run: trace 90, [print-character], c
9999 mem: location 1066 is 955
  90 print-character: 955 
 104 run: jump-unless screen, 
9999 mem: location 1065 is 1012
9998 run: jump-unless fell through
 104 run: width:number <- get *screen, num-columns:offset
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is number
9999 mem: location 1014 is 5
9999 mem: storing 5 in location 1071
 104 run: height:number <- get *screen, num-rows:offset
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is number
9999 mem: location 1013 is 3
9999 mem: storing 3 in location 1072
 104 run: row:address:number <- get-address *screen, cursor-row:offset
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1073
 104 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1073 is 1015
9999 mem: location 1015 is 0
9999 mem: storing 1 in location 1074
 104 run: jump-if legal?, 1:offset
9999 mem: location 1074 is 1
9998 run: jumping to instruction 22
 104 run: legal? <- lesser-than *row, height
9999 mem: location 1073 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1072 is 3
9999 mem: storing 1 in location 1074
 104 run: jump-if legal?, 1:offset
9999 mem: location 1074 is 1
9998 run: jumping to instruction 25
 104 run: column:address:number <- get-address *screen, cursor-column:offset
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1075
 104 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1075 is 1016
9999 mem: location 1016 is 0
9999 mem: storing 1 in location 1074
 104 run: jump-if legal?, 1:offset
9999 mem: location 1074 is 1
9998 run: jumping to instruction 29
 104 run: legal? <- lesser-than *column, width
9999 mem: location 1075 is 1016
9999 mem: location 1016 is 0
9999 mem: location 1071 is 5
9999 mem: storing 1 in location 1074
 104 run: jump-if legal?, 1:offset
9999 mem: location 1074 is 1
9998 run: jumping to instruction 32
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1066 is 955
9999 mem: storing 0 in location 1076
 104 run: jump-unless newline?, 
9999 mem: location 1076 is 0
9998 run: jumping to instruction 43
 104 run: index:number <- multiply *row, width
9999 mem: location 1073 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1071 is 5
9999 mem: storing 0 in location 1079
 104 run: index <- add index, *column
9999 mem: location 1079 is 0
9999 mem: location 1075 is 1016
9999 mem: location 1016 is 0
9999 mem: storing 0 in location 1079
 104 run: buf:address:shared:array:screen-cell <- get *screen, data:offset
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is <address : <shared : <array : <screen-cell : <>>>>>
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1080
9999 mem: incrementing refcount of 1018: 2 -> 3
 104 run: len:number <- length *buf
9999 mem: location 1080 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 15 in location 1081
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 1066 is 955
9999 mem: storing 0 in location 1082
 104 run: jump-unless backspace?, 
9999 mem: location 1082 is 0
9998 run: jumping to instruction 63
 104 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1080 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1079 is 0
9999 mem: storing 1020 in location 1084
 104 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1084 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 7
9999 mem: location 1084 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1085
 104 run: *cursor-contents <- copy c
9999 mem: location 1066 is 955
9999 mem: location 1085 is 1020
9999 mem: storing 955 in location 1020
 104 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1084 is 1020
9999 mem: location 1020 is 955
9999 mem: location 1021 is 7
9999 mem: location 1084 is 1020
9998 run: address to copy is 1021
9999 mem: storing 1021 in location 1086
 104 run: *cursor-color <- copy color
9999 mem: location 1067 is 1
9999 mem: location 1086 is 1021
9999 mem: storing 1 in location 1021
 104 run: right:number <- subtract width, 1
9999 mem: location 1071 is 5
9999 mem: storing 4 in location 1087
 104 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1075 is 1016
9999 mem: location 1016 is 0
9999 mem: location 1087 is 4
9999 mem: storing 0 in location 1088
 104 run: jump-if at-right?, 
9999 mem: location 1088 is 0
9998 run: jump-if fell through
 104 run: *column <- add *column, 1
9999 mem: location 1075 is 1016
9999 mem: location 1016 is 0
9999 mem: location 1075 is 1016
9999 mem: storing 1 in location 1016
 104 run: reply screen:address:shared:screen
9999 mem: location 1065 is 1012
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 4 -> 3
9999 mem: storing 1012 in location 900
9999 mem: incrementing refcount of 1012: 3 -> 4
 103 run: 2:character <- copy 97/a
9999 mem: storing 97 in location 2
 103 run: screen:address:shared:screen <- print screen:address:shared:screen, 2:character/a
9999 mem: location 900 is 1012
9999 mem: location 2 is 97
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 25
9999 mem: allocating size 27
9999 abandon: picking up space from free-list of size 27
 104 run: screen:address:shared:screen <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1065
9999 mem: incrementing refcount of 1012: 4 -> 5
 104 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1066
 104 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1067
9999 mem: storing 0 in location 1068
 104 run: jump-if color-found?, 
9999 mem: location 1068 is 0
9998 run: jump-if fell through
 104 run: color <- copy 7/white
9999 mem: storing 7 in location 1067
 104 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1069
9999 mem: storing 0 in location 1070
 104 run: jump-if bg-color-found?, 
9999 mem: location 1070 is 0
9998 run: jump-if fell through
 104 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1069
 104 run: trace 90, [print-character], c
9999 mem: location 1066 is 97
  90 print-character: 97 
 104 run: jump-unless screen, 
9999 mem: location 1065 is 1012
9998 run: jump-unless fell through
 104 run: width:number <- get *screen, num-columns:offset
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1018
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is number
9999 mem: location 1014 is 5
9999 mem: storing 5 in location 1071
 104 run: height:number <- get *screen, num-rows:offset
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1018
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is number
9999 mem: location 1013 is 3
9999 mem: storing 3 in location 1072
 104 run: row:address:number <- get-address *screen, cursor-row:offset
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1018
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1073
 104 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1073 is 1015
9999 mem: location 1015 is 0
9999 mem: storing 1 in location 1074
 104 run: jump-if legal?, 1:offset
9999 mem: location 1074 is 1
9998 run: jumping to instruction 22
 104 run: legal? <- lesser-than *row, height
9999 mem: location 1073 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1072 is 3
9999 mem: storing 1 in location 1074
 104 run: jump-if legal?, 1:offset
9999 mem: location 1074 is 1
9998 run: jumping to instruction 25
 104 run: column:address:number <- get-address *screen, cursor-column:offset
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1018
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1075
 104 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1075 is 1016
9999 mem: location 1016 is 1
9999 mem: storing 1 in location 1074
 104 run: jump-if legal?, 1:offset
9999 mem: location 1074 is 1
9998 run: jumping to instruction 29
 104 run: legal? <- lesser-than *column, width
9999 mem: location 1075 is 1016
9999 mem: location 1016 is 1
9999 mem: location 1071 is 5
9999 mem: storing 1 in location 1074
 104 run: jump-if legal?, 1:offset
9999 mem: location 1074 is 1
9998 run: jumping to instruction 32
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1066 is 97
9999 mem: storing 0 in location 1076
 104 run: jump-unless newline?, 
9999 mem: location 1076 is 0
9998 run: jumping to instruction 43
 104 run: index:number <- multiply *row, width
9999 mem: location 1073 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1071 is 5
9999 mem: storing 0 in location 1079
 104 run: index <- add index, *column
9999 mem: location 1079 is 0
9999 mem: location 1075 is 1016
9999 mem: location 1016 is 1
9999 mem: storing 1 in location 1079
 104 run: buf:address:shared:array:screen-cell <- get *screen, data:offset
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1018
9999 mem: location 1065 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is <address : <shared : <array : <screen-cell : <>>>>>
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1080
9999 mem: incrementing refcount of 1018: 3 -> 4
 104 run: len:number <- length *buf
9999 mem: location 1080 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 15 in location 1081
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 1066 is 97
9999 mem: storing 0 in location 1082
 104 run: jump-unless backspace?, 
9999 mem: location 1082 is 0
9998 run: jumping to instruction 63
 104 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1080 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1079 is 1
9999 mem: storing 1022 in location 1084
 104 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1084 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 7
9999 mem: location 1084 is 1022
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1085
 104 run: *cursor-contents <- copy c
9999 mem: location 1066 is 97
9999 mem: location 1085 is 1022
9999 mem: storing 97 in location 1022
 104 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1084 is 1022
9999 mem: location 1022 is 97
9999 mem: location 1023 is 7
9999 mem: location 1084 is 1022
9998 run: address to copy is 1023
9999 mem: storing 1023 in location 1086
 104 run: *cursor-color <- copy color
9999 mem: location 1067 is 7
9999 mem: location 1086 is 1023
9999 mem: storing 7 in location 1023
 104 run: right:number <- subtract width, 1
9999 mem: location 1071 is 5
9999 mem: storing 4 in location 1087
 104 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1075 is 1016
9999 mem: location 1016 is 1
9999 mem: location 1087 is 4
9999 mem: storing 0 in location 1088
 104 run: jump-if at-right?, 
9999 mem: location 1088 is 0
9998 run: jump-if fell through
 104 run: *column <- add *column, 1
9999 mem: location 1075 is 1016
9999 mem: location 1016 is 1
9999 mem: location 1075 is 1016
9999 mem: storing 2 in location 1016
 104 run: reply screen:address:shared:screen
9999 mem: location 1065 is 1012
9999 abandon: saving in free-list of size 27
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 5 -> 4
9999 mem: storing 1012 in location 900
9999 mem: incrementing refcount of 1012: 4 -> 5
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: screen-should-contain [
  #  01234
    .λa   .
    .     .
    .     .
  ]
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
