c{0: 0 (((test1)) ((34 literal))) -- nil
c{1: 0 ✓ (((test1)) ((34 literal)))
c{0: 0 (((4 integer)) <- ((next-input))) -- nil
c{0: 1 (((5 integer)) ((6 boolean)) <- ((next-input))) -- nil
c{0: 2 (((break-if)) ((6 boolean))) -- ((open 2))
c{0: 3 (((5 integer)) <- ((copy)) ((1 literal))) -- ((open 2))
c{0: 4 (((7 integer)) <- ((add)) ((4 integer)) ((5 integer))) -- ((close 4) (open 2))
c{1: 0 ✓ (((4 integer)) <- ((next-input)))
c{1: 1 ✓ (((5 integer)) ((6 boolean)) <- ((next-input)))
c{1: 2 X (((break-if)) ((6 boolean))) => (((jump-if)) ((6 boolean)) ((1 offset)))
c{1: 3 ✓ (((5 integer)) <- ((copy)) ((1 literal)))
c{1: 4 ✓ (((7 integer)) <- ((add)) ((4 integer)) ((5 integer)))
cn0: convert-names in main
cn0: (((test1)) ((34 literal))) nil nil
cn0: checking arg ((34 literal))
cn0: convert-names in test1
cn0: (((4 integer)) <- ((next-input))) nil nil
cn0: checking oarg ((4 integer))
maybe-add: ((4 integer))
cn0: (((5 integer)) ((6 boolean)) <- ((next-input))) nil nil
cn0: checking oarg ((5 integer))
maybe-add: ((5 integer))
cn0: checking oarg ((6 boolean))
maybe-add: ((6 boolean))
cn0: (((jump-if)) ((6 boolean)) ((1 offset))) nil nil
cn0: checking arg ((6 boolean))
maybe-add: ((6 boolean))
cn0: checking arg ((1 offset))
cn0: (((5 integer)) <- ((copy)) ((1 literal))) nil nil
cn0: checking arg ((1 literal))
cn0: checking oarg ((5 integer))
maybe-add: ((5 integer))
cn0: (((7 integer)) <- ((add)) ((4 integer)) ((5 integer))) nil nil
cn0: checking arg ((4 integer))
maybe-add: ((4 integer))
cn0: checking arg ((5 integer))
maybe-add: ((5 integer))
cn0: checking oarg ((7 integer))
maybe-add: ((7 integer))
cn1: (((test1)) ((34 literal)))
cn1: (((4 integer)) <- ((next-input)))
cn1: (((5 integer)) ((6 boolean)) <- ((next-input)))
cn1: (((jump-if)) ((6 boolean)) ((1 offset)))
cn1: (((5 integer)) <- ((copy)) ((1 literal)))
cn1: (((7 integer)) <- ((add)) ((4 integer)) ((5 integer)))
schedule: main
run: main 0: (((test1)) ((34 literal)))
run: test1/main 0: (((4 integer)) <- ((next-input)))
arg: nil 0 (34)
run: test1/main 0: 34 => ((4 integer))
mem: ((4 integer)): 4 <= 34
run: test1/main 1: (((5 integer)) ((6 boolean)) <- ((next-input)))
arg: nil 1 (34)
run: test1/main 1: nil => ((5 integer))
mem: ((5 integer)): 5 <= nil
run: test1/main 1: nil => ((6 boolean))
mem: ((6 boolean)): 6 <= nil
run: test1/main 2: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => nil
run: test1/main 3: (((5 integer)) <- ((copy)) ((1 literal)))
run: test1/main 3: 1 => ((5 integer))
mem: ((5 integer)): 5 <= 1
run: test1/main 4: (((7 integer)) <- ((add)) ((4 integer)) ((5 integer)))
mem: ((4 integer)) => 34
mem: ((5 integer)) => 1
run: test1/main 4: 35 => ((7 integer))
mem: ((7 integer)): 7 <= 35
schedule: done with routine nil
