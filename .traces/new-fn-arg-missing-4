schedule: main
run: -- nil
run: 1 main 0: (test1 (34 literal))
run: -- nil
run: 2 test1 0: ((4 integer) <- arg)
arg: nil 0 (34)
run: 34 => (4 integer)
setm: (4 integer) <= 34
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
setm: size of (4 integer) is 1
setm: (4 integer): setting 4 to 34
run: -- ((4 34))
run: 3 test1 1: ((5 integer) (6 boolean) <- arg)
arg: nil 1 (34)
run: nil => (5 integer)
setm: (5 integer) <= nil
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
setm: size of (5 integer) is 1
setm: (5 integer): setting 5 to nil
run: nil => (6 boolean)
setm: (6 boolean) <= nil
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
setm: size of (6 boolean) is 1
setm: (6 boolean): setting 6 to nil
run: -- ((4 34))
run: 4 test1 2: (jump-if (6 boolean) (1 offset))
m: (6 boolean)
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
jump: checking that nil is t
run: -- ((4 34))
run: 5 test1 3: ((5 integer) <- copy (1 literal))
run: 1 => (5 integer)
setm: (5 integer) <= 1
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
setm: size of (5 integer) is 1
setm: (5 integer): setting 5 to 1
run: -- ((4 34) (5 1))
run: 6 test1 4: ((7 integer) <- add (4 integer) (5 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
add: 34 1
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
run: 35 => (7 integer)
setm: (7 integer) <= 35
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
setm: size of (7 integer) is 1
setm: (7 integer): setting 7 to 35
schedule: done with routine
