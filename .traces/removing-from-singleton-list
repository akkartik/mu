9991 parse: --- defining scenario-removing-from-singleton-list
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:duplex-list:character <- push 3, 0\n    1:address:duplex-list:character <- remove 1:address:duplex-list:character, 1:address:duplex-list:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:duplex-list:character <- push 3, 0
    1:address:duplex-list:character <- remove 1:address:duplex-list:character, 1:address:duplex-list:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1 <- 0  # back to an empty list\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    1 <- 0  # back to an empty list
  ]
9999 parse: recipe scenario-removing-from-singleton-list has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-removing-from-singleton-list
9991 transform: --- deduce types for recipe scenario-removing-from-singleton-list
9991 transform: --- collect surrounding spaces for recipe scenario-removing-from-singleton-list
9991 transform: --- transform names for recipe scenario-removing-from-singleton-list
9991 transform: --- resolve ambiguous calls for recipe scenario-removing-from-singleton-list
9991 transform: --- compute instruction operations for recipe scenario-removing-from-singleton-list
9991 transform: --- transform braces for recipe scenario-removing-from-singleton-list
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario-removing-from-singleton-list
9991 transform: --- type-check 'call' instructions inside recipe scenario-removing-from-singleton-list
9991 transform: --- type-check calls inside recipe scenario-removing-from-singleton-list
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-removing-from-singleton-list
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-removing-from-singleton-list
 102 run: run [
    1:address:duplex-list:character <- push 3, 0
    1:address:duplex-list:character <- remove 1:address:duplex-list:character, 1:address:duplex-list:character
  ]
9991 parse: --- defining run1001
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:duplex-list:character <- push 3, 0
9993 parse: instruction: remove
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:duplex-list:character <- remove 1:address:duplex-list:character, 1:address:duplex-list:character
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- deduce types for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: non-strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 2: 980
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9992 transform: instruction remove
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: push ...
9992 transform: remove ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run1001
9991 transform: --- type-check 'call' instructions inside recipe run1001
9991 transform: --- type-check calls inside recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:duplex-list:character <- push_3 3, 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1000
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1002
 104 run: in:address:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1003
 104 run: result:address:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 3
9999 mem: location 1005 is 1008
9999 mem: storing 3 in location 1008
 104 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1009
9999 mem: storing 0 in location 1009
 104 run: jump-unless in, 
9999 mem: location 1003 is 0
9998 run: jumping to instruction 12
 104 run: reply result
9999 mem: location 1004 is 1008
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1
 103 run: 1:address:duplex-list:character <- remove_2 1:address:duplex-list:character, 1:address:duplex-list:character
9999 mem: location 1 is 1008
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1011
 104 run: x:address:duplex-list:_elem/contained-in:in <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1013
 104 run: in:address:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1014
 104 run: jump-if x, 1:offset
9999 mem: location 1013 is 1008
9998 run: jumping to instruction 5
 104 run: next-node:address:duplex-list:_elem <- get *x, next:offset
9999 mem: location 1013 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1013 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1009
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1015
 104 run: prev-node:address:duplex-list:_elem <- get *x, prev:offset
9999 mem: location 1013 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1013 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1010
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1010 is 0
9999 mem: storing 0 in location 1016
 104 run: tmp:address:address:duplex-list:_elem <- get-address *x, next:offset
9999 mem: location 1013 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1013 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1017
 104 run: *tmp <- copy 0
9999 mem: location 1017 is 1009
9999 mem: storing 0 in location 1009
 104 run: tmp <- get-address *x, prev:offset
9999 mem: location 1013 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1013 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1017
 104 run: *tmp <- copy 0
9999 mem: location 1017 is 1010
9999 mem: storing 0 in location 1010
 104 run: jump-unless next-node, 
9999 mem: location 1015 is 0
9998 run: jumping to instruction 15
 104 run: jump-unless prev-node, 
9999 mem: location 1016 is 0
9998 run: jumping to instruction 21
 104 run: reply next-node
9999 mem: location 1015 is 0
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 1
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    1 <- 0  # back to an empty list
  ]
9999 run: checking location 1
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
