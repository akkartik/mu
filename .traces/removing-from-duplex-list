parse: instruction: run
parse:   ingredient: {name: "\n    1:address:duplex-list <- copy 0:literal  # 1 points to head of list\n    1:address:duplex-list <- push-duplex 3:literal, 1:address:duplex-list\n    1:address:duplex-list <- push-duplex 4:literal, 1:address:duplex-list\n    1:address:duplex-list <- push-duplex 5:literal, 1:address:duplex-list\n    2:address:duplex-list <- next-duplex 1:address:duplex-list  # 2 points at second element\n    2:address:duplex-list <- remove-duplex 2:address:duplex-list\n    3:boolean <- equal 2:address:duplex-list, 0:literal\n    # check structure like before\n    2:address:duplex-list <- copy 1:address:duplex-list\n    4:number <- first 2:address:duplex-list\n    2:address:duplex-list <- next-duplex 2:address:duplex-list\n    5:number <- first 2:address:duplex-list\n    6:address:duplex-list <- next-duplex 2:address:duplex-list\n    2:address:duplex-list <- prev-duplex 2:address:duplex-list\n    7:number <- first 2:address:duplex-list\n    8:boolean <- equal 1:address:duplex-list, 2:address:duplex-list\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    3 <- 0  # remove returned non-null\n    4 <- 5  # scanning next, skipping deleted element\n    5 <- 3\n    6 <- 0  # no more elements\n    7 <- 5  # prev of final element\n    8 <- 1  # list back at start\n  ", properties: [_: "literal-string"]}
after-brace: recipe removing-from-duplex-list
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: removing-from-duplex-list
 101 run: run [
    1:address:duplex-list <- copy 0:literal  # 1 points to head of list
    1:address:duplex-list <- push-duplex 3:literal, 1:address:duplex-list
    1:address:duplex-list <- push-duplex 4:literal, 1:address:duplex-list
    1:address:duplex-list <- push-duplex 5:literal, 1:address:duplex-list
    2:address:duplex-list <- next-duplex 1:address:duplex-list  # 2 points at second element
    2:address:duplex-list <- remove-duplex 2:address:duplex-list
    3:boolean <- equal 2:address:duplex-list, 0:literal
    # check structure like before
    2:address:duplex-list <- copy 1:address:duplex-list
    4:number <- first 2:address:duplex-list
    2:address:duplex-list <- next-duplex 2:address:duplex-list
    5:number <- first 2:address:duplex-list
    6:address:duplex-list <- next-duplex 2:address:duplex-list
    2:address:duplex-list <- prev-duplex 2:address:duplex-list
    7:number <- first 2:address:duplex-list
    8:boolean <- equal 1:address:duplex-list, 2:address:duplex-list
  ]
parse: instruction: copy
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"duplex-list"]}
parse: instruction: push-duplex
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"duplex-list"]}
parse:   product: {name: "1", properties: ["1": "address":"duplex-list"]}
parse: instruction: push-duplex
parse:   ingredient: {name: "4", properties: ["4": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"duplex-list"]}
parse:   product: {name: "1", properties: ["1": "address":"duplex-list"]}
parse: instruction: push-duplex
parse:   ingredient: {name: "5", properties: ["5": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"duplex-list"]}
parse:   product: {name: "1", properties: ["1": "address":"duplex-list"]}
parse: instruction: next-duplex
parse:   ingredient: {name: "1", properties: ["1": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: remove-duplex
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: equal
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   product: {name: "3", properties: ["3": "boolean"]}
parse: instruction: copy
parse:   ingredient: {name: "1", properties: ["1": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "4", properties: ["4": "number"]}
parse: instruction: next-duplex
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "5", properties: ["5": "number"]}
parse: instruction: next-duplex
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "6", properties: ["6": "address":"duplex-list"]}
parse: instruction: prev-duplex
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "7", properties: ["7": "number"]}
parse: instruction: equal
parse:   ingredient: {name: "1", properties: ["1": "address":"duplex-list"]}
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "8", properties: ["8": "boolean"]}
after-brace: recipe run1001
after-brace: copy ...
after-brace: push-duplex ...
after-brace: push-duplex ...
after-brace: push-duplex ...
after-brace: next-duplex ...
after-brace: remove-duplex ...
after-brace: equal ...
after-brace: copy ...
after-brace: first ...
after-brace: next-duplex ...
after-brace: first ...
after-brace: next-duplex ...
after-brace: prev-duplex ...
after-brace: first ...
after-brace: equal ...
 101 run: 1:address:duplex-list <- copy 0:literal
9999 mem: storing 0 in location 1
 101 run: 1:address:duplex-list <- push-duplex 3:literal, 1:address:duplex-list
9999 mem: location 1 is 0
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1000
 102 run: x:location <- next-ingredient 
9999 mem: storing 3 in location 1002
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 0 in location 1003
 102 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
 102 run: val:address:location <- get-address result:address:duplex-list/deref, value:offset
9999 mem: location 1004 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1005
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1002 is 3
9999 mem: location 1005 is 1008
9999 mem: storing 3 in location 1008
 102 run: next:address:address:duplex-list <- get-address result:address:duplex-list/deref, next:offset
9999 mem: location 1004 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 102 run: next:address:address:duplex-list/deref <- copy in:address:duplex-list
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1009
9999 mem: storing 0 in location 1009
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1003 is 0
9999 run: jump-if fell through
 102 run: reply result:address:duplex-list
9999 mem: location 1004 is 1008
9999 run: result 0 is 1008
9999 mem: storing 1008 in location 1
 101 run: 1:address:duplex-list <- push-duplex 4:literal, 1:address:duplex-list
9999 mem: location 1 is 1008
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1011
 102 run: x:location <- next-ingredient 
9999 mem: storing 4 in location 1013
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1008 in location 1014
 102 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1019
9999 mem: storing 1019 in location 1015
 102 run: val:address:location <- get-address result:address:duplex-list/deref, value:offset
9999 mem: location 1015 is 1019
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1015 is 1019
9999 run: address to copy is 1019
9999 mem: storing 1019 in location 1016
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1013 is 4
9999 mem: location 1016 is 1019
9999 mem: storing 4 in location 1019
 102 run: next:address:address:duplex-list <- get-address result:address:duplex-list/deref, next:offset
9999 mem: location 1015 is 1019
9999 mem: location 1019 is 4
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1015 is 1019
9999 run: address to copy is 1020
9999 mem: storing 1020 in location 1017
 102 run: next:address:address:duplex-list/deref <- copy in:address:duplex-list
9999 mem: location 1014 is 1008
9999 mem: location 1017 is 1020
9999 mem: storing 1008 in location 1020
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1014 is 1008
9999 run: jumping to instruction 10
 102 run: prev:address:address:duplex-list <- get-address in:address:duplex-list/deref, prev:offset
9999 mem: location 1014 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1014 is 1008
9999 run: address to copy is 1010
9999 mem: storing 1010 in location 1018
 102 run: prev:address:address:duplex-list/deref <- copy result:address:duplex-list
9999 mem: location 1015 is 1019
9999 mem: location 1018 is 1010
9999 mem: storing 1019 in location 1010
 102 run: reply result:address:duplex-list
9999 mem: location 1015 is 1019
9999 run: result 0 is 1019
9999 mem: storing 1019 in location 1
 101 run: 1:address:duplex-list <- push-duplex 5:literal, 1:address:duplex-list
9999 mem: location 1 is 1019
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1022
 102 run: x:location <- next-ingredient 
9999 mem: storing 5 in location 1024
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1019 in location 1025
 102 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1030
9999 mem: storing 1030 in location 1026
 102 run: val:address:location <- get-address result:address:duplex-list/deref, value:offset
9999 mem: location 1026 is 1030
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1026 is 1030
9999 run: address to copy is 1030
9999 mem: storing 1030 in location 1027
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1024 is 5
9999 mem: location 1027 is 1030
9999 mem: storing 5 in location 1030
 102 run: next:address:address:duplex-list <- get-address result:address:duplex-list/deref, next:offset
9999 mem: location 1026 is 1030
9999 mem: location 1030 is 5
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1026 is 1030
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1028
 102 run: next:address:address:duplex-list/deref <- copy in:address:duplex-list
9999 mem: location 1025 is 1019
9999 mem: location 1028 is 1031
9999 mem: storing 1019 in location 1031
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1025 is 1019
9999 run: jumping to instruction 10
 102 run: prev:address:address:duplex-list <- get-address in:address:duplex-list/deref, prev:offset
9999 mem: location 1025 is 1019
9999 mem: location 1019 is 4
9999 mem: location 1020 is 1008
9999 mem: location 1021 is 0
9999 mem: location 1025 is 1019
9999 run: address to copy is 1021
9999 mem: storing 1021 in location 1029
 102 run: prev:address:address:duplex-list/deref <- copy result:address:duplex-list
9999 mem: location 1026 is 1030
9999 mem: location 1029 is 1021
9999 mem: storing 1030 in location 1021
 102 run: reply result:address:duplex-list
9999 mem: location 1026 is 1030
9999 run: result 0 is 1030
9999 mem: storing 1030 in location 1
 101 run: 2:address:duplex-list <- next-duplex 1:address:duplex-list
9999 mem: location 1 is 1030
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1033
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1030 in location 1035
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1035 is 1030
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, next:offset
9999 mem: location 1035 is 1030
9999 mem: location 1030 is 5
9999 mem: location 1031 is 1019
9999 mem: location 1032 is 0
9999 mem: location 1035 is 1030
9999 run: address to copy is 1031
9999 run: its type is address
9999 mem: location 1031 is 1019
9999 mem: storing 1019 in location 1036
 102 run: reply result:address:duplex-list
9999 mem: location 1036 is 1019
9999 run: result 0 is 1019
9999 mem: storing 1019 in location 2
 101 run: 2:address:duplex-list <- remove-duplex 2:address:duplex-list
9999 mem: location 2 is 1019
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1037
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1019 in location 1039
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1039 is 1019
9999 run: jumping to instruction 4
 102 run: next-node:address:duplex-list <- get in:address:duplex-list/deref, next:offset
9999 mem: location 1039 is 1019
9999 mem: location 1019 is 4
9999 mem: location 1020 is 1008
9999 mem: location 1021 is 1030
9999 mem: location 1039 is 1019
9999 run: address to copy is 1020
9999 run: its type is address
9999 mem: location 1020 is 1008
9999 mem: storing 1008 in location 1040
 102 run: prev-node:address:duplex-list <- get in:address:duplex-list/deref, prev:offset
9999 mem: location 1039 is 1019
9999 mem: location 1019 is 4
9999 mem: location 1020 is 1008
9999 mem: location 1021 is 1030
9999 mem: location 1039 is 1019
9999 run: address to copy is 1021
9999 run: its type is address
9999 mem: location 1021 is 1030
9999 mem: storing 1030 in location 1041
 102 run: x:address:address:duplex-list <- get-address in:address:duplex-list/deref, next:offset
9999 mem: location 1039 is 1019
9999 mem: location 1019 is 4
9999 mem: location 1020 is 1008
9999 mem: location 1021 is 1030
9999 mem: location 1039 is 1019
9999 run: address to copy is 1020
9999 mem: storing 1020 in location 1042
 102 run: x:address:address:duplex-list/deref <- copy 0:literal
9999 mem: location 1042 is 1020
9999 mem: storing 0 in location 1020
 102 run: x:address:address:duplex-list <- get-address in:address:duplex-list/deref, prev:offset
9999 mem: location 1039 is 1019
9999 mem: location 1019 is 4
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1030
9999 mem: location 1039 is 1019
9999 run: address to copy is 1021
9999 mem: storing 1021 in location 1042
 102 run: x:address:address:duplex-list/deref <- copy 0:literal
9999 mem: location 1042 is 1021
9999 mem: storing 0 in location 1021
 102 run: break-unless next-node:address:duplex-list, 
9999 mem: location 1040 is 1008
9999 run: jump-unless fell through
 102 run: x:address:address:duplex-list <- get-address next-node:address:duplex-list/deref, prev:offset
9999 mem: location 1040 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1019
9999 mem: location 1040 is 1008
9999 run: address to copy is 1010
9999 mem: storing 1010 in location 1042
 102 run: x:address:address:duplex-list/deref <- copy prev-node:address:duplex-list
9999 mem: location 1041 is 1030
9999 mem: location 1042 is 1010
9999 mem: storing 1030 in location 1010
 102 run: break-unless prev-node:address:duplex-list, 
9999 mem: location 1041 is 1030
9999 run: jump-unless fell through
 102 run: x:address:address:duplex-list <- get-address prev-node:address:duplex-list/deref, next:offset
9999 mem: location 1041 is 1030
9999 mem: location 1030 is 5
9999 mem: location 1031 is 1019
9999 mem: location 1032 is 0
9999 mem: location 1041 is 1030
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1042
 102 run: x:address:address:duplex-list/deref <- copy next-node:address:duplex-list
9999 mem: location 1040 is 1008
9999 mem: location 1042 is 1031
9999 mem: storing 1008 in location 1031
 102 run: reply prev-node:address:duplex-list
9999 mem: location 1041 is 1030
9999 run: result 0 is 1030
9999 mem: storing 1030 in location 2
 101 run: 3:boolean <- equal 2:address:duplex-list, 0:literal
9999 mem: location 2 is 1030
9999 mem: storing 0 in location 3
 101 run: 2:address:duplex-list <- copy 1:address:duplex-list
9999 mem: location 1 is 1030
9999 mem: storing 1030 in location 2
 101 run: 4:number <- first 2:address:duplex-list
9999 mem: location 2 is 1030
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1043
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1030 in location 1045
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1045 is 1030
9999 mem: location 1030 is 5
9999 mem: location 1031 is 1008
9999 mem: location 1045 is 1030
9999 run: address to copy is 1030
9999 run: its type is number
9999 mem: location 1030 is 5
9999 mem: storing 5 in location 1046
 102 run: reply result:location
9999 mem: location 1046 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 4
 101 run: 2:address:duplex-list <- next-duplex 2:address:duplex-list
9999 mem: location 2 is 1030
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1047
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1030 in location 1049
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1049 is 1030
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, next:offset
9999 mem: location 1049 is 1030
9999 mem: location 1030 is 5
9999 mem: location 1031 is 1008
9999 mem: location 1032 is 0
9999 mem: location 1049 is 1030
9999 run: address to copy is 1031
9999 run: its type is address
9999 mem: location 1031 is 1008
9999 mem: storing 1008 in location 1050
 102 run: reply result:address:duplex-list
9999 mem: location 1050 is 1008
9999 run: result 0 is 1008
9999 mem: storing 1008 in location 2
 101 run: 5:number <- first 2:address:duplex-list
9999 mem: location 2 is 1008
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1051
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1008 in location 1053
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1053 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1053 is 1008
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 3
9999 mem: storing 3 in location 1054
 102 run: reply result:location
9999 mem: location 1054 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 5
 101 run: 6:address:duplex-list <- next-duplex 2:address:duplex-list
9999 mem: location 2 is 1008
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1055
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1008 in location 1057
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1057 is 1008
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, next:offset
9999 mem: location 1057 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1030
9999 mem: location 1057 is 1008
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1058
 102 run: reply result:address:duplex-list
9999 mem: location 1058 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 6
 101 run: 2:address:duplex-list <- prev-duplex 2:address:duplex-list
9999 mem: location 2 is 1008
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1059
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1008 in location 1061
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1061 is 1008
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, prev:offset
9999 mem: location 1061 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1030
9999 mem: location 1061 is 1008
9999 run: address to copy is 1010
9999 run: its type is address
9999 mem: location 1010 is 1030
9999 mem: storing 1030 in location 1062
 102 run: reply result:address:duplex-list
9999 mem: location 1062 is 1030
9999 run: result 0 is 1030
9999 mem: storing 1030 in location 2
 101 run: 7:number <- first 2:address:duplex-list
9999 mem: location 2 is 1030
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1063
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1030 in location 1065
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1065 is 1030
9999 mem: location 1030 is 5
9999 mem: location 1031 is 1008
9999 mem: location 1065 is 1030
9999 run: address to copy is 1030
9999 run: its type is number
9999 mem: location 1030 is 5
9999 mem: storing 5 in location 1066
 102 run: reply result:location
9999 mem: location 1066 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 7
 101 run: 8:boolean <- equal 1:address:duplex-list, 2:address:duplex-list
9999 mem: location 1 is 1030
9999 mem: location 2 is 1030
9999 mem: storing 1 in location 8
 100 run: memory-should-contain [
    3 <- 0  # remove returned non-null
    4 <- 5  # scanning next, skipping deleted element
    5 <- 3
    6 <- 0  # no more elements
    7 <- 5  # prev of final element
    8 <- 1  # list back at start
  ]
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
