c{0: 0 (((1 string-address)) <- ((new)) a//b) -- nil
c{0: 1 (((2 string-address)) <- ((new)) //) -- nil
c{0: 2 (((3 string-address)) ((4 string-address)) <- ((split-first-at-substring)) ((1 string-address)) ((2 string-address))) -- nil
c{1: 0 ✓ (((1 string-address)) <- ((new)) a//b)
c{1: 1 ✓ (((2 string-address)) <- ((new)) //)
c{1: 2 ✓ (((3 string-address)) ((4 string-address)) <- ((split-first-at-substring)) ((1 string-address)) ((2 string-address)))
cn0: convert-names in main
cn0: (((1 string-address)) <- ((new)) a//b) nil nil
cn0: checking arg a//b
cn0: checking oarg ((1 string-address))
maybe-add: ((1 string-address))
cn0: (((2 string-address)) <- ((new)) //) nil nil
cn0: checking arg //
cn0: checking oarg ((2 string-address))
maybe-add: ((2 string-address))
cn0: (((3 string-address)) ((4 string-address)) <- ((split-first-at-substring)) ((1 string-address)) ((2 string-address))) nil nil
cn0: checking arg ((1 string-address))
maybe-add: ((1 string-address))
cn0: checking arg ((2 string-address))
maybe-add: ((2 string-address))
cn0: checking oarg ((3 string-address))
maybe-add: ((3 string-address))
cn0: checking oarg ((4 string-address))
maybe-add: ((4 string-address))
cn1: (((1 string-address)) <- ((new)) a//b)
cn1: (((2 string-address)) <- ((new)) //)
cn1: (((3 string-address)) ((4 string-address)) <- ((split-first-at-substring)) ((1 string-address)) ((2 string-address)))
schedule: main
run: main 0: (((1 string-address)) <- ((new)) a//b)
run: main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: main 1: (((2 string-address)) <- ((new)) //)
run: main 1: 1005 => ((2 string-address))
mem: ((2 string-address)): 2 <= 1005
run: main 2: (((3 string-address)) ((4 string-address)) <- ((split-first-at-substring)) ((1 string-address)) ((2 string-address)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1005
run: split-first-at-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: split-first-at-substring/main 0: 1008 => ((default-space space-address))
run: split-first-at-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1005)
run: split-first-at-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1010 <= 1000
run: split-first-at-substring/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1000 1005)
run: split-first-at-substring/main 2: 1005 => ((2 string-address))
mem: ((2 string-address)): 1011 <= 1005
run: split-first-at-substring/main 3: (((3 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 4
run: split-first-at-substring/main 3: 4 => ((3 integer))
mem: ((3 integer)): 1012 <= 4
run: split-first-at-substring/main 4: (((4 boolean)) <- ((equal)) ((3 integer)) ((0 literal)))
mem: ((3 integer)) => 4
run: split-first-at-substring/main 4: nil => ((4 boolean))
mem: ((4 boolean)): 1013 <= nil
run: split-first-at-substring/main 5: (((jump-unless)) ((4 boolean)) ((3 offset)))
mem: ((4 boolean)) => nil
run: split-first-at-substring/main 9: (((7 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1005
run: find-substring/split-first-at-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-substring/split-first-at-substring/main 0: 1039 => ((default-space space-address))
run: find-substring/split-first-at-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1005 0)
run: find-substring/split-first-at-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1041 <= 1000
run: find-substring/split-first-at-substring/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1000 1005 0)
run: find-substring/split-first-at-substring/main 2: 1005 => ((2 string-address))
mem: ((2 string-address)): 1042 <= 1005
run: find-substring/split-first-at-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 1005 0)
run: find-substring/split-first-at-substring/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1043 <= 0
run: find-substring/split-first-at-substring/main 4: (((4 character)) <- ((index)) ((2 string-address) (deref)) ((0 literal)))
array-len: ((1005 string) (raw))
mem: ((1005 integer) (raw)) => 2
mem: ((1006 byte) (raw)) => /
run: find-substring/split-first-at-substring/main 4: #\/ => ((4 character))
mem: ((4 character)): 1044 <= #\/
run: find-substring/split-first-at-substring/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 4
run: find-substring/split-first-at-substring/main 5: 4 => ((5 integer))
mem: ((5 integer)): 1045 <= 4
run: find-substring/split-first-at-substring/main 6: (((6 boolean)) <- ((greater-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 0
mem: ((5 integer)) => 4
run: find-substring/split-first-at-substring/main 6: nil => ((6 boolean))
mem: ((6 boolean)): 1046 <= nil
run: find-substring/split-first-at-substring/main 7: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => nil
run: find-substring/split-first-at-substring/main 8: (((7 boolean)) <- ((match-at)) ((1 string-address)) ((2 string-address)) ((3 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1005
mem: ((3 integer)) => 0
run: match-at/find-substring/split-first-at-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: match-at/find-substring/split-first-at-substring/main 0: 1070 => ((default-space space-address))
run: match-at/find-substring/split-first-at-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1005 0)
run: match-at/find-substring/split-first-at-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1072 <= 1000
run: match-at/find-substring/split-first-at-substring/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1000 1005 0)
run: match-at/find-substring/split-first-at-substring/main 2: 1005 => ((2 string-address))
mem: ((2 string-address)): 1073 <= 1005
run: match-at/find-substring/split-first-at-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 1005 0)
run: match-at/find-substring/split-first-at-substring/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1074 <= 0
run: match-at/find-substring/split-first-at-substring/main 4: (((4 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((1005 integer) (raw)) => 2
run: match-at/find-substring/split-first-at-substring/main 4: 2 => ((4 integer))
mem: ((4 integer)): 1075 <= 2
run: match-at/find-substring/split-first-at-substring/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 4
run: match-at/find-substring/split-first-at-substring/main 5: 4 => ((5 integer))
mem: ((5 integer)): 1076 <= 4
run: match-at/find-substring/split-first-at-substring/main 6: (((5 integer)) <- ((subtract)) ((5 integer)) ((4 integer)))
mem: ((5 integer)) => 4
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/main 6: 2 => ((5 integer))
mem: ((5 integer)): 1076 <= 2
run: match-at/find-substring/split-first-at-substring/main 7: (((6 boolean)) <- ((lesser-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 0
mem: ((5 integer)) => 2
run: match-at/find-substring/split-first-at-substring/main 7: t => ((6 boolean))
mem: ((6 boolean)): 1077 <= t
run: match-at/find-substring/split-first-at-substring/main 8: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: match-at/find-substring/split-first-at-substring/main 10: (((7 integer)) <- ((copy)) ((0 literal)))
run: match-at/find-substring/split-first-at-substring/main 10: 0 => ((7 integer))
mem: ((7 integer)): 1078 <= 0
run: match-at/find-substring/split-first-at-substring/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1079 <= nil
run: match-at/find-substring/split-first-at-substring/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/split-first-at-substring/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 4
mem: ((1001 byte) (raw)) => a
run: match-at/find-substring/split-first-at-substring/main 13: #\a => ((9 character))
mem: ((9 character)): 1080 <= #\a
run: match-at/find-substring/split-first-at-substring/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1005 string) (raw))
mem: ((1005 integer) (raw)) => 2
mem: ((1006 byte) (raw)) => /
run: match-at/find-substring/split-first-at-substring/main 14: #\/ => ((10 character))
mem: ((10 character)): 1081 <= #\/
run: match-at/find-substring/split-first-at-substring/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) => a
mem: ((10 character)) => /
run: match-at/find-substring/split-first-at-substring/main 15: nil => ((11 boolean))
mem: ((11 boolean)): 1082 <= nil
run: match-at/find-substring/split-first-at-substring/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => nil
run: match-at/find-substring/split-first-at-substring/main 17: (((reply)) ((nil literal)))
run: find-substring/split-first-at-substring/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1047 <= nil
run: find-substring/split-first-at-substring/main 9: (((jump-if)) ((7 boolean)) ((3 offset)))
mem: ((7 boolean)) => nil
run: find-substring/split-first-at-substring/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-substring/split-first-at-substring/main 10: 1 => ((3 integer))
mem: ((3 integer)): 1043 <= 1
run: find-substring/split-first-at-substring/main 11: (((3 integer)) <- ((find-next)) ((1 string-address)) ((4 character)) ((3 integer)))
mem: ((1 string-address)) => 1000
mem: ((4 character)) => /
mem: ((3 integer)) => 1
run: find-next/find-substring/split-first-at-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/find-substring/split-first-at-substring/main 0: 1101 => ((default-space space-address))
run: find-next/find-substring/split-first-at-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 1)
run: find-next/find-substring/split-first-at-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1103 <= 1000
run: find-next/find-substring/split-first-at-substring/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 1)
run: find-next/find-substring/split-first-at-substring/main 2: #\/ => ((2 character))
mem: ((2 character)): 1104 <= #\/
run: find-next/find-substring/split-first-at-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 1)
run: find-next/find-substring/split-first-at-substring/main 3: 1 => ((3 integer))
mem: ((3 integer)): 1105 <= 1
run: find-next/find-substring/split-first-at-substring/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 4
run: find-next/find-substring/split-first-at-substring/main 4: 4 => ((4 integer))
mem: ((4 integer)): 1106 <= 4
run: find-next/find-substring/split-first-at-substring/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 4
run: find-next/find-substring/split-first-at-substring/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1107 <= nil
run: find-next/find-substring/split-first-at-substring/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/find-substring/split-first-at-substring/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 4
mem: ((1002 byte) (raw)) => /
run: find-next/find-substring/split-first-at-substring/main 7: #\/ => ((6 byte))
mem: ((6 byte)): 1108 <= #\/
run: find-next/find-substring/split-first-at-substring/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/find-substring/split-first-at-substring/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1109 <= t
run: find-next/find-substring/split-first-at-substring/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/find-substring/split-first-at-substring/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 1
run: find-substring/split-first-at-substring/main 11: 1 => ((3 integer))
mem: ((3 integer)): 1043 <= 1
run: find-substring/split-first-at-substring/main 12: (((jump)) ((-7 offset)))
run: find-substring/split-first-at-substring/main 6: (((6 boolean)) <- ((greater-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 1
mem: ((5 integer)) => 4
run: find-substring/split-first-at-substring/main 6: nil => ((6 boolean))
mem: ((6 boolean)): 1046 <= nil
run: find-substring/split-first-at-substring/main 7: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => nil
run: find-substring/split-first-at-substring/main 8: (((7 boolean)) <- ((match-at)) ((1 string-address)) ((2 string-address)) ((3 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1005
mem: ((3 integer)) => 1
run: match-at/find-substring/split-first-at-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: match-at/find-substring/split-first-at-substring/main 0: 1132 => ((default-space space-address))
run: match-at/find-substring/split-first-at-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1005 1)
run: match-at/find-substring/split-first-at-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1134 <= 1000
run: match-at/find-substring/split-first-at-substring/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1000 1005 1)
run: match-at/find-substring/split-first-at-substring/main 2: 1005 => ((2 string-address))
mem: ((2 string-address)): 1135 <= 1005
run: match-at/find-substring/split-first-at-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 1005 1)
run: match-at/find-substring/split-first-at-substring/main 3: 1 => ((3 integer))
mem: ((3 integer)): 1136 <= 1
run: match-at/find-substring/split-first-at-substring/main 4: (((4 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((1005 integer) (raw)) => 2
run: match-at/find-substring/split-first-at-substring/main 4: 2 => ((4 integer))
mem: ((4 integer)): 1137 <= 2
run: match-at/find-substring/split-first-at-substring/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 4
run: match-at/find-substring/split-first-at-substring/main 5: 4 => ((5 integer))
mem: ((5 integer)): 1138 <= 4
run: match-at/find-substring/split-first-at-substring/main 6: (((5 integer)) <- ((subtract)) ((5 integer)) ((4 integer)))
mem: ((5 integer)) => 4
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/main 6: 2 => ((5 integer))
mem: ((5 integer)): 1138 <= 2
run: match-at/find-substring/split-first-at-substring/main 7: (((6 boolean)) <- ((lesser-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 1
mem: ((5 integer)) => 2
run: match-at/find-substring/split-first-at-substring/main 7: t => ((6 boolean))
mem: ((6 boolean)): 1139 <= t
run: match-at/find-substring/split-first-at-substring/main 8: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: match-at/find-substring/split-first-at-substring/main 10: (((7 integer)) <- ((copy)) ((0 literal)))
run: match-at/find-substring/split-first-at-substring/main 10: 0 => ((7 integer))
mem: ((7 integer)): 1140 <= 0
run: match-at/find-substring/split-first-at-substring/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1141 <= nil
run: match-at/find-substring/split-first-at-substring/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/split-first-at-substring/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 4
mem: ((1002 byte) (raw)) => /
run: match-at/find-substring/split-first-at-substring/main 13: #\/ => ((9 character))
mem: ((9 character)): 1142 <= #\/
run: match-at/find-substring/split-first-at-substring/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1005 string) (raw))
mem: ((1005 integer) (raw)) => 2
mem: ((1006 byte) (raw)) => /
run: match-at/find-substring/split-first-at-substring/main 14: #\/ => ((10 character))
mem: ((10 character)): 1143 <= #\/
run: match-at/find-substring/split-first-at-substring/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) => /
mem: ((10 character)) => /
run: match-at/find-substring/split-first-at-substring/main 15: t => ((11 boolean))
mem: ((11 boolean)): 1144 <= t
run: match-at/find-substring/split-first-at-substring/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => t
run: match-at/find-substring/split-first-at-substring/main 18: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 1
run: match-at/find-substring/split-first-at-substring/main 18: 2 => ((3 integer))
mem: ((3 integer)): 1136 <= 2
run: match-at/find-substring/split-first-at-substring/main 19: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: match-at/find-substring/split-first-at-substring/main 19: 1 => ((7 integer))
mem: ((7 integer)): 1140 <= 1
run: match-at/find-substring/split-first-at-substring/main 20: (((jump)) ((-10 offset)))
run: match-at/find-substring/split-first-at-substring/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 1
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1141 <= nil
run: match-at/find-substring/split-first-at-substring/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/split-first-at-substring/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 4
mem: ((1003 byte) (raw)) => /
run: match-at/find-substring/split-first-at-substring/main 13: #\/ => ((9 character))
mem: ((9 character)): 1142 <= #\/
run: match-at/find-substring/split-first-at-substring/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 1
array-len: ((1005 string) (raw))
mem: ((1005 integer) (raw)) => 2
mem: ((1007 byte) (raw)) => /
run: match-at/find-substring/split-first-at-substring/main 14: #\/ => ((10 character))
mem: ((10 character)): 1143 <= #\/
run: match-at/find-substring/split-first-at-substring/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) => /
mem: ((10 character)) => /
run: match-at/find-substring/split-first-at-substring/main 15: t => ((11 boolean))
mem: ((11 boolean)): 1144 <= t
run: match-at/find-substring/split-first-at-substring/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => t
run: match-at/find-substring/split-first-at-substring/main 18: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: match-at/find-substring/split-first-at-substring/main 18: 3 => ((3 integer))
mem: ((3 integer)): 1136 <= 3
run: match-at/find-substring/split-first-at-substring/main 19: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: match-at/find-substring/split-first-at-substring/main 19: 2 => ((7 integer))
mem: ((7 integer)): 1140 <= 2
run: match-at/find-substring/split-first-at-substring/main 20: (((jump)) ((-10 offset)))
run: match-at/find-substring/split-first-at-substring/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 2
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/main 11: t => ((8 boolean))
mem: ((8 boolean)): 1141 <= t
run: match-at/find-substring/split-first-at-substring/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => t
run: match-at/find-substring/split-first-at-substring/main 21: (((reply)) ((t literal)))
run: find-substring/split-first-at-substring/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1047 <= t
run: find-substring/split-first-at-substring/main 9: (((jump-if)) ((7 boolean)) ((3 offset)))
mem: ((7 boolean)) => t
run: find-substring/split-first-at-substring/main 13: (((reply)) ((3 integer)))
mem: ((3 integer)) => 1
run: split-first-at-substring/main 9: 1 => ((7 integer))
mem: ((7 integer)): 1016 <= 1
run: split-first-at-substring/main 10: (((5 string-address)) <- ((string-copy)) ((1 string-address)) ((0 literal)) ((7 integer)))
mem: ((1 string-address)) => 1000
mem: ((7 integer)) => 1
run: string-copy/split-first-at-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split-first-at-substring/main 0: 1163 => ((default-space space-address))
run: string-copy/split-first-at-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 0 1)
run: string-copy/split-first-at-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1165 <= 1000
run: string-copy/split-first-at-substring/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1000 0 1)
run: string-copy/split-first-at-substring/main 2: 0 => ((2 integer))
mem: ((2 integer)): 1166 <= 0
run: string-copy/split-first-at-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 0 1)
run: string-copy/split-first-at-substring/main 3: 1 => ((3 integer))
mem: ((3 integer)): 1167 <= 1
run: string-copy/split-first-at-substring/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 4
run: string-copy/split-first-at-substring/main 4: 4 => ((4 integer))
mem: ((4 integer)): 1168 <= 4
run: string-copy/split-first-at-substring/main 5: (((3 integer)) <- ((min)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 4
mem: ((3 integer)) => 1
run: min/string-copy/split-first-at-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: min/string-copy/split-first-at-substring/main 0: 1194 => ((default-space space-address))
run: min/string-copy/split-first-at-substring/main 1: (((1 integer)) <- ((next-input)))
arg: nil 0 (4 1)
run: min/string-copy/split-first-at-substring/main 1: 4 => ((1 integer))
mem: ((1 integer)): 1196 <= 4
run: min/string-copy/split-first-at-substring/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (4 1)
run: min/string-copy/split-first-at-substring/main 2: 1 => ((2 integer))
mem: ((2 integer)): 1197 <= 1
run: min/string-copy/split-first-at-substring/main 3: (((3 boolean)) <- ((less-than)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 4
mem: ((2 integer)) => 1
run: min/string-copy/split-first-at-substring/main 3: nil => ((3 boolean))
mem: ((3 boolean)): 1198 <= nil
run: min/string-copy/split-first-at-substring/main 4: (((jump-if)) ((3 boolean)) ((1 offset)))
mem: ((3 boolean)) => nil
run: min/string-copy/split-first-at-substring/main 5: (((reply)) ((2 integer)))
mem: ((2 integer)) => 1
run: string-copy/split-first-at-substring/main 5: 1 => ((3 integer))
mem: ((3 integer)): 1167 <= 1
run: string-copy/split-first-at-substring/main 6: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 1
mem: ((2 integer)) => 0
run: string-copy/split-first-at-substring/main 6: 1 => ((4 integer))
mem: ((4 integer)): 1168 <= 1
run: string-copy/split-first-at-substring/main 7: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 1
run: string-copy/split-first-at-substring/main 7: 1225 => ((5 string-address))
mem: ((5 string-address)): 1169 <= 1225
run: string-copy/split-first-at-substring/main 8: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 0
run: string-copy/split-first-at-substring/main 8: 0 => ((6 integer))
mem: ((6 integer)): 1170 <= 0
run: string-copy/split-first-at-substring/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split-first-at-substring/main 9: 0 => ((7 integer))
mem: ((7 integer)): 1171 <= 0
run: string-copy/split-first-at-substring/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 0
mem: ((3 integer)) => 1
run: string-copy/split-first-at-substring/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1172 <= nil
run: string-copy/split-first-at-substring/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 0
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 4
mem: ((1001 byte) (raw)) => a
run: string-copy/split-first-at-substring/main 12: #\a => ((9 character))
mem: ((9 character)): 1173 <= #\a
run: string-copy/split-first-at-substring/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1225 string) (raw))
mem: ((1225 integer) (raw)) => 1
run: string-copy/split-first-at-substring/main 13: 1226 => ((10 character-address))
mem: ((10 character-address)): 1174 <= 1226
run: string-copy/split-first-at-substring/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => a
run: string-copy/split-first-at-substring/main 14: #\a => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1226 <= #\a
run: string-copy/split-first-at-substring/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 0
run: string-copy/split-first-at-substring/main 15: 1 => ((6 integer))
mem: ((6 integer)): 1170 <= 1
run: string-copy/split-first-at-substring/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split-first-at-substring/main 16: 1 => ((7 integer))
mem: ((7 integer)): 1171 <= 1
run: string-copy/split-first-at-substring/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 1
mem: ((3 integer)) => 1
run: string-copy/split-first-at-substring/main 10: t => ((8 boolean))
mem: ((8 boolean)): 1172 <= t
run: string-copy/split-first-at-substring/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split-first-at-substring/main 18: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1225
run: split-first-at-substring/main 10: 1225 => ((5 string-address))
mem: ((5 string-address)): 1014 <= 1225
run: split-first-at-substring/main 11: (((8 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((1005 integer) (raw)) => 2
run: split-first-at-substring/main 11: 2 => ((8 integer))
mem: ((8 integer)): 1017 <= 2
run: split-first-at-substring/main 12: (((7 integer)) <- ((add)) ((7 integer)) ((8 integer)))
mem: ((7 integer)) => 1
mem: ((8 integer)) => 2
run: split-first-at-substring/main 12: 3 => ((7 integer))
mem: ((7 integer)): 1016 <= 3
run: split-first-at-substring/main 13: (((6 string-address)) <- ((string-copy)) ((1 string-address)) ((7 integer)) ((3 integer)))
mem: ((1 string-address)) => 1000
mem: ((7 integer)) => 3
mem: ((3 integer)) => 4
run: string-copy/split-first-at-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split-first-at-substring/main 0: 1227 => ((default-space space-address))
run: string-copy/split-first-at-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 3 4)
run: string-copy/split-first-at-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1229 <= 1000
run: string-copy/split-first-at-substring/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1000 3 4)
run: string-copy/split-first-at-substring/main 2: 3 => ((2 integer))
mem: ((2 integer)): 1230 <= 3
run: string-copy/split-first-at-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 3 4)
run: string-copy/split-first-at-substring/main 3: 4 => ((3 integer))
mem: ((3 integer)): 1231 <= 4
run: string-copy/split-first-at-substring/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 4
run: string-copy/split-first-at-substring/main 4: 4 => ((4 integer))
mem: ((4 integer)): 1232 <= 4
run: string-copy/split-first-at-substring/main 5: (((3 integer)) <- ((min)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 4
mem: ((3 integer)) => 4
run: min/string-copy/split-first-at-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: min/string-copy/split-first-at-substring/main 0: 1258 => ((default-space space-address))
run: min/string-copy/split-first-at-substring/main 1: (((1 integer)) <- ((next-input)))
arg: nil 0 (4 4)
run: min/string-copy/split-first-at-substring/main 1: 4 => ((1 integer))
mem: ((1 integer)): 1260 <= 4
run: min/string-copy/split-first-at-substring/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (4 4)
run: min/string-copy/split-first-at-substring/main 2: 4 => ((2 integer))
mem: ((2 integer)): 1261 <= 4
run: min/string-copy/split-first-at-substring/main 3: (((3 boolean)) <- ((less-than)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 4
mem: ((2 integer)) => 4
run: min/string-copy/split-first-at-substring/main 3: nil => ((3 boolean))
mem: ((3 boolean)): 1262 <= nil
run: min/string-copy/split-first-at-substring/main 4: (((jump-if)) ((3 boolean)) ((1 offset)))
mem: ((3 boolean)) => nil
run: min/string-copy/split-first-at-substring/main 5: (((reply)) ((2 integer)))
mem: ((2 integer)) => 4
run: string-copy/split-first-at-substring/main 5: 4 => ((3 integer))
mem: ((3 integer)): 1231 <= 4
run: string-copy/split-first-at-substring/main 6: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 4
mem: ((2 integer)) => 3
run: string-copy/split-first-at-substring/main 6: 1 => ((4 integer))
mem: ((4 integer)): 1232 <= 1
run: string-copy/split-first-at-substring/main 7: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 1
run: string-copy/split-first-at-substring/main 7: 1289 => ((5 string-address))
mem: ((5 string-address)): 1233 <= 1289
run: string-copy/split-first-at-substring/main 8: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 3
run: string-copy/split-first-at-substring/main 8: 3 => ((6 integer))
mem: ((6 integer)): 1234 <= 3
run: string-copy/split-first-at-substring/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split-first-at-substring/main 9: 0 => ((7 integer))
mem: ((7 integer)): 1235 <= 0
run: string-copy/split-first-at-substring/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 3
mem: ((3 integer)) => 4
run: string-copy/split-first-at-substring/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1236 <= nil
run: string-copy/split-first-at-substring/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 3
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 4
mem: ((1004 byte) (raw)) => b
run: string-copy/split-first-at-substring/main 12: #\b => ((9 character))
mem: ((9 character)): 1237 <= #\b
run: string-copy/split-first-at-substring/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1289 string) (raw))
mem: ((1289 integer) (raw)) => 1
run: string-copy/split-first-at-substring/main 13: 1290 => ((10 character-address))
mem: ((10 character-address)): 1238 <= 1290
run: string-copy/split-first-at-substring/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => b
run: string-copy/split-first-at-substring/main 14: #\b => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1290 <= #\b
run: string-copy/split-first-at-substring/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 3
run: string-copy/split-first-at-substring/main 15: 4 => ((6 integer))
mem: ((6 integer)): 1234 <= 4
run: string-copy/split-first-at-substring/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split-first-at-substring/main 16: 1 => ((7 integer))
mem: ((7 integer)): 1235 <= 1
run: string-copy/split-first-at-substring/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 4
mem: ((3 integer)) => 4
run: string-copy/split-first-at-substring/main 10: t => ((8 boolean))
mem: ((8 boolean)): 1236 <= t
run: string-copy/split-first-at-substring/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split-first-at-substring/main 18: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1289
run: split-first-at-substring/main 13: 1289 => ((6 string-address))
mem: ((6 string-address)): 1015 <= 1289
run: split-first-at-substring/main 14: (((reply)) ((5 string-address)) ((6 string-address)))
mem: ((5 string-address)) => 1225
mem: ((6 string-address)) => 1289
run: main 2: 1225 => ((3 string-address))
mem: ((3 string-address)): 3 <= 1225
run: main 2: 1289 => ((4 string-address))
mem: ((4 string-address)): 4 <= 1289
schedule: done with routine nil
