schedule: main
run: main 0: (((1 integer)) <- ((test1)) ((1 literal)) ((3 literal)))
run: test1/main 0: (((4 type)) <- ((otype)) ((0 offset)))
run: test1/main 0: integer => ((4 type))
mem: ((4 type)): 4 <= integer
run: test1/main 1: (((5 boolean)) <- ((equal)) ((4 type)) ((integer literal)))
mem: ((4 type)) => integer
run: test1/main 1: t => ((5 boolean))
mem: ((5 boolean)): 5 <= t
run: test1/main 2: (((jump-unless)) ((5 boolean)) ((3 offset)))
mem: ((5 boolean)) => t
run: test1/main 3: (((6 integer)) <- ((next-input)))
arg: nil 0 (1 3)
run: test1/main 3: 1 => ((6 integer))
mem: ((6 integer)): 6 <= 1
run: test1/main 4: (((7 integer)) <- ((next-input)))
arg: nil 1 (1 3)
run: test1/main 4: 3 => ((7 integer))
mem: ((7 integer)): 7 <= 3
run: test1/main 5: (((8 integer)) <- ((add)) ((6 integer)) ((7 integer)))
mem: ((6 integer)) => 1
mem: ((7 integer)) => 3
run: test1/main 5: 4 => ((8 integer))
mem: ((8 integer)): 8 <= 4
run: test1/main 6: (((reply)) ((8 integer)))
mem: ((8 integer)) => 4
run: main 0: 4 => ((1 integer))
mem: ((1 integer)): 1 <= 4
schedule: done with routine 
