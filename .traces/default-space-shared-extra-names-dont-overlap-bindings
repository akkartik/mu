schedule: main
run: main 0: (((1 space-address)) <- ((f)))
run: f/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: f/main 0: 1000 => ((default-space space-address))
run: f/main 1: (((1 integer)) <- ((copy)) ((3 literal)))
run: f/main 1: 3 => ((1 integer))
mem: ((1 integer)): 1002 <= 3
run: f/main 2: (((2 integer)) <- ((copy)) ((4 literal)))
run: f/main 2: 4 => ((2 integer))
mem: ((2 integer)): 1003 <= 4
run: f/main 3: (((reply)) ((default-space space-address)))
run: main 0: 1000 => ((1 space-address))
mem: ((1 space-address)): 1 <= 1000
run: main 1: (((2 integer)) ((3 integer)) <- ((g)) ((1 space-address)))
mem: ((1 space-address)) => 1000
run: g/main 0: (((default-space space-address) (names f)) <- ((next-input)))
arg: nil 0 (1000)
run: g/main 0: 1000 => ((default-space space-address) (names f))
run: g/main 1: (((2 integer)) <- ((add)) ((2 integer)) ((1 literal)))
mem: ((2 integer)) => 4
run: g/main 1: 5 => ((2 integer))
mem: ((2 integer)): 1003 <= 5
run: g/main 2: (((1 integer)) <- ((add)) ((1 integer)) ((2 literal)))
mem: ((1 integer)) => 3
run: g/main 2: 5 => ((1 integer))
mem: ((1 integer)): 1002 <= 5
run: g/main 3: (((3 integer)) <- ((copy)) ((2 literal)))
run: g/main 3: 2 => ((3 integer))
mem: ((3 integer)): 1004 <= 2
run: g/main 4: (((reply)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 5
mem: ((2 integer)) => 5
run: main 1: 5 => ((2 integer))
mem: ((2 integer)): 2 <= 5
run: main 1: 5 => ((3 integer))
mem: ((3 integer)): 3 <= 5
schedule: done with routine 
