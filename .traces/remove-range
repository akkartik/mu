9991 parse: --- defining scenario_remove-range
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"18": "literal"}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 1:address:shared:duplex-list:character <- push 18, 0
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"17": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 1:address:shared:duplex-list:character <- push 17, 1:address:shared:duplex-list:character
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"16": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 1:address:shared:duplex-list:character <- push 16, 1:address:shared:duplex-list:character
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"15": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 1:address:shared:duplex-list:character <- push 15, 1:address:shared:duplex-list:character
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"14": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 1:address:shared:duplex-list:character <- push 14, 1:address:shared:duplex-list:character
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"13": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 1:address:shared:duplex-list:character <- push 13, 1:address:shared:duplex-list:character
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    # delete 16 onwards\n    # first pointer: to the third element\n    2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character\n    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character\n    2:address:shared:duplex-list:character <- remove-between 2:address:shared:duplex-list:character, 0\n    # now check the list\n    4:character <- get *1:address:shared:duplex-list:character, value:offset\n    5:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character\n    6:character <- get *5:address:shared:duplex-list:character, value:offset\n    7:address:shared:duplex-list:character <- next 5:address:shared:duplex-list:character\n    8:character <- get *7:address:shared:duplex-list:character, value:offset\n    9:address:shared:duplex-list:character <- next 7:address:shared:duplex-list:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    # delete 16 onwards
    # first pointer: to the third element
    2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- remove-between 2:address:shared:duplex-list:character, 0
    # now check the list
    4:character <- get *1:address:shared:duplex-list:character, value:offset
    5:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character
    6:character <- get *5:address:shared:duplex-list:character, value:offset
    7:address:shared:duplex-list:character <- next 5:address:shared:duplex-list:character
    8:character <- get *7:address:shared:duplex-list:character, value:offset
    9:address:shared:duplex-list:character <- next 7:address:shared:duplex-list:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    4 <- 13\n    6 <- 14\n    8 <- 15\n    9 <- 0\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    4 <- 13
    6 <- 14
    8 <- 15
    9 <- 0
  ]
9999 parse: recipe scenario_remove-range has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_remove-range
9991 transform: --- deduce types for recipe scenario_remove-range
9991 transform: --- collect surrounding spaces for recipe scenario_remove-range
9991 transform: --- transform names for recipe scenario_remove-range
9991 transform: --- resolve ambiguous calls for recipe scenario_remove-range
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: non-strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 2: 980
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: non-strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 2: 990
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: non-strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 2: 990
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: non-strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 2: 990
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: non-strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 2: 990
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: non-strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 2: 990
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9991 transform: --- compute instruction operations for recipe scenario_remove-range
9991 transform: --- transform braces for recipe scenario_remove-range
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_remove-range
9991 transform: --- type-check 'call' instructions inside recipe scenario_remove-range
9991 transform: --- type-check calls inside recipe scenario_remove-range
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_remove-range
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_remove-range
 102 run: 1:address:shared:duplex-list:character <- push_3 18, 0
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1000
9999 mem: storing 7 in location 1001
 103 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 18 in location 1003
 103 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1004
 103 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1005
9999 mem: incrementing refcount of 1009: 0 -> 1
 103 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1006
 103 run: *val <- copy x
9999 mem: location 1003 is 18
9999 mem: location 1006 is 1010
9999 mem: storing 18 in location 1010
 103 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1010 is 18
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9999 type: type deduced to be character$
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1007
 103 run: *next <- copy in
9999 mem: location 1004 is 0
9999 mem: location 1007 is 1011
9999 mem: storing 0 in location 1011
 103 run: jump-unless in, 
9999 mem: location 1004 is 0
9998 run: jumping to instruction 12
 103 run: reply result
9999 mem: location 1005 is 1009
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1
9999 mem: incrementing refcount of 1009: 1 -> 2
 102 run: 1:address:shared:duplex-list:character <- push_3 17, 1:address:shared:duplex-list:character
9999 mem: location 1 is 1009
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 103 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 17 in location 1003
 103 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1009 in location 1004
9999 mem: incrementing refcount of 1009: 2 -> 3
 103 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1013
9999 mem: storing 1013 in location 1005
9999 mem: incrementing refcount of 1013: 0 -> 1
 103 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1006
 103 run: *val <- copy x
9999 mem: location 1003 is 17
9999 mem: location 1006 is 1014
9999 mem: storing 17 in location 1014
 103 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 17
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1007
 103 run: *next <- copy in
9999 mem: location 1004 is 1009
9999 mem: location 1007 is 1015
9999 mem: storing 1009 in location 1015
9999 mem: incrementing refcount of 1009: 3 -> 4
 103 run: jump-unless in, 
9999 mem: location 1004 is 1009
9998 run: jump-unless fell through
 103 run: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1004 is 1009
9999 mem: skipping refcount at 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1010 is 18
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1004 is 1009
9999 mem: skipping refcount at 1009
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1008
 103 run: *prev <- copy result
9999 mem: location 1005 is 1013
9999 mem: location 1008 is 1012
9999 mem: storing 1013 in location 1012
9999 mem: incrementing refcount of 1013: 1 -> 2
 103 run: reply result
9999 mem: location 1005 is 1013
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1013
9999 mem: decrementing refcount of 1009: 4 -> 3
9999 mem: storing 1013 in location 1
9999 mem: incrementing refcount of 1013: 2 -> 3
 102 run: 1:address:shared:duplex-list:character <- push_3 16, 1:address:shared:duplex-list:character
9999 mem: location 1 is 1013
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 103 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 16 in location 1003
 103 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1013 in location 1004
9999 mem: incrementing refcount of 1013: 3 -> 4
 103 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1017
9999 mem: storing 1017 in location 1005
9999 mem: incrementing refcount of 1017: 0 -> 1
 103 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1017
9999 mem: skipping refcount at 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1005 is 1017
9999 mem: skipping refcount at 1017
9998 run: address to copy is 1018
9999 mem: storing 1018 in location 1006
 103 run: *val <- copy x
9999 mem: location 1003 is 16
9999 mem: location 1006 is 1018
9999 mem: storing 16 in location 1018
 103 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1017
9999 mem: skipping refcount at 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1018 is 16
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1005 is 1017
9999 mem: skipping refcount at 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1019
9999 mem: storing 1019 in location 1007
 103 run: *next <- copy in
9999 mem: location 1004 is 1013
9999 mem: location 1007 is 1019
9999 mem: storing 1013 in location 1019
9999 mem: incrementing refcount of 1013: 4 -> 5
 103 run: jump-unless in, 
9999 mem: location 1004 is 1013
9998 run: jump-unless fell through
 103 run: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 17
9999 mem: location 1015 is 1009
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1008
 103 run: *prev <- copy result
9999 mem: location 1005 is 1017
9999 mem: location 1008 is 1016
9999 mem: storing 1017 in location 1016
9999 mem: incrementing refcount of 1017: 1 -> 2
 103 run: reply result
9999 mem: location 1005 is 1017
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1017
9999 mem: decrementing refcount of 1013: 5 -> 4
9999 mem: storing 1017 in location 1
9999 mem: incrementing refcount of 1017: 2 -> 3
 102 run: 1:address:shared:duplex-list:character <- push_3 15, 1:address:shared:duplex-list:character
9999 mem: location 1 is 1017
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 103 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 15 in location 1003
 103 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1017 in location 1004
9999 mem: incrementing refcount of 1017: 3 -> 4
 103 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1021
9999 mem: storing 1021 in location 1005
9999 mem: incrementing refcount of 1021: 0 -> 1
 103 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1021
9999 mem: skipping refcount at 1021
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1005 is 1021
9999 mem: skipping refcount at 1021
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1006
 103 run: *val <- copy x
9999 mem: location 1003 is 15
9999 mem: location 1006 is 1022
9999 mem: storing 15 in location 1022
 103 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1021
9999 mem: skipping refcount at 1021
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1022 is 15
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1005 is 1021
9999 mem: skipping refcount at 1021
9999 type: type deduced to be character$
9998 run: address to copy is 1023
9999 mem: storing 1023 in location 1007
 103 run: *next <- copy in
9999 mem: location 1004 is 1017
9999 mem: location 1007 is 1023
9999 mem: storing 1017 in location 1023
9999 mem: incrementing refcount of 1017: 4 -> 5
 103 run: jump-unless in, 
9999 mem: location 1004 is 1017
9998 run: jump-unless fell through
 103 run: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1004 is 1017
9999 mem: skipping refcount at 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1018 is 16
9999 mem: location 1019 is 1013
9999 mem: location 1020 is 0
9999 mem: location 1004 is 1017
9999 mem: skipping refcount at 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1008
 103 run: *prev <- copy result
9999 mem: location 1005 is 1021
9999 mem: location 1008 is 1020
9999 mem: storing 1021 in location 1020
9999 mem: incrementing refcount of 1021: 1 -> 2
 103 run: reply result
9999 mem: location 1005 is 1021
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1021
9999 mem: decrementing refcount of 1017: 5 -> 4
9999 mem: storing 1021 in location 1
9999 mem: incrementing refcount of 1021: 2 -> 3
 102 run: 1:address:shared:duplex-list:character <- push_3 14, 1:address:shared:duplex-list:character
9999 mem: location 1 is 1021
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 103 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 14 in location 1003
 103 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1021 in location 1004
9999 mem: incrementing refcount of 1021: 3 -> 4
 103 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1025
9999 mem: storing 1025 in location 1005
9999 mem: incrementing refcount of 1025: 0 -> 1
 103 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1025
9999 mem: skipping refcount at 1025
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1005 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1026
9999 mem: storing 1026 in location 1006
 103 run: *val <- copy x
9999 mem: location 1003 is 14
9999 mem: location 1006 is 1026
9999 mem: storing 14 in location 1026
 103 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1025
9999 mem: skipping refcount at 1025
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1026 is 14
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1005 is 1025
9999 mem: skipping refcount at 1025
9999 type: type deduced to be character$
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1007
 103 run: *next <- copy in
9999 mem: location 1004 is 1021
9999 mem: location 1007 is 1027
9999 mem: storing 1021 in location 1027
9999 mem: incrementing refcount of 1021: 4 -> 5
 103 run: jump-unless in, 
9999 mem: location 1004 is 1021
9998 run: jump-unless fell through
 103 run: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1004 is 1021
9999 mem: skipping refcount at 1021
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1022 is 15
9999 mem: location 1023 is 1017
9999 mem: location 1024 is 0
9999 mem: location 1004 is 1021
9999 mem: skipping refcount at 1021
9999 type: type deduced to be character$
9998 run: address to copy is 1024
9999 mem: storing 1024 in location 1008
 103 run: *prev <- copy result
9999 mem: location 1005 is 1025
9999 mem: location 1008 is 1024
9999 mem: storing 1025 in location 1024
9999 mem: incrementing refcount of 1025: 1 -> 2
 103 run: reply result
9999 mem: location 1005 is 1025
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1025
9999 mem: decrementing refcount of 1021: 5 -> 4
9999 mem: storing 1025 in location 1
9999 mem: incrementing refcount of 1025: 2 -> 3
 102 run: 1:address:shared:duplex-list:character <- push_3 13, 1:address:shared:duplex-list:character
9999 mem: location 1 is 1025
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 103 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 13 in location 1003
 103 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1004
9999 mem: incrementing refcount of 1025: 3 -> 4
 103 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1029
9999 mem: storing 1029 in location 1005
9999 mem: incrementing refcount of 1029: 0 -> 1
 103 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1029
9999 mem: skipping refcount at 1029
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1005 is 1029
9999 mem: skipping refcount at 1029
9998 run: address to copy is 1030
9999 mem: storing 1030 in location 1006
 103 run: *val <- copy x
9999 mem: location 1003 is 13
9999 mem: location 1006 is 1030
9999 mem: storing 13 in location 1030
 103 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1029
9999 mem: skipping refcount at 1029
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1030 is 13
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1005 is 1029
9999 mem: skipping refcount at 1029
9999 type: type deduced to be character$
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1007
 103 run: *next <- copy in
9999 mem: location 1004 is 1025
9999 mem: location 1007 is 1031
9999 mem: storing 1025 in location 1031
9999 mem: incrementing refcount of 1025: 4 -> 5
 103 run: jump-unless in, 
9999 mem: location 1004 is 1025
9998 run: jump-unless fell through
 103 run: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1004 is 1025
9999 mem: skipping refcount at 1025
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1026 is 14
9999 mem: location 1027 is 1021
9999 mem: location 1028 is 0
9999 mem: location 1004 is 1025
9999 mem: skipping refcount at 1025
9999 type: type deduced to be character$
9998 run: address to copy is 1028
9999 mem: storing 1028 in location 1008
 103 run: *prev <- copy result
9999 mem: location 1005 is 1029
9999 mem: location 1008 is 1028
9999 mem: storing 1029 in location 1028
9999 mem: incrementing refcount of 1029: 1 -> 2
 103 run: reply result
9999 mem: location 1005 is 1029
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1029
9999 mem: decrementing refcount of 1025: 5 -> 4
9999 mem: storing 1029 in location 1
9999 mem: incrementing refcount of 1029: 2 -> 3
 102 run: run [
    # delete 16 onwards
    # first pointer: to the third element
    2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- remove-between 2:address:shared:duplex-list:character, 0
    # now check the list
    4:character <- get *1:address:shared:duplex-list:character, value:offset
    5:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character
    6:character <- get *5:address:shared:duplex-list:character, value:offset
    7:address:shared:duplex-list:character <- next 5:address:shared:duplex-list:character
    8:character <- get *7:address:shared:duplex-list:character, value:offset
    9:address:shared:duplex-list:character <- next 7:address:shared:duplex-list:character
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9993 parse: instruction: remove-between
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 2:address:shared:duplex-list:character <- remove-between 2:address:shared:duplex-list:character, 0
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>, "lookup": <>}
9993 parse:   ingredient: {"value": "offset"}
9993 parse:   product: {"4": "character"}
9992 load: after rewriting: 4:character <- get *1:address:shared:duplex-list:character, value:offset
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"5": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 5:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"5": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>, "lookup": <>}
9993 parse:   ingredient: {"value": "offset"}
9993 parse:   product: {"6": "character"}
9992 load: after rewriting: 6:character <- get *5:address:shared:duplex-list:character, value:offset
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"5": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"7": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 7:address:shared:duplex-list:character <- next 5:address:shared:duplex-list:character
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"7": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>, "lookup": <>}
9993 parse:   ingredient: {"value": "offset"}
9993 parse:   product: {"8": "character"}
9992 load: after rewriting: 8:character <- get *7:address:shared:duplex-list:character, value:offset
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"7": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"9": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 9:address:shared:duplex-list:character <- next 7:address:shared:duplex-list:character
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: element value of type duplex-list is at offset 0
9993 name: element value of type duplex-list is at offset 0
9993 name: element value of type duplex-list is at offset 0
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9992 transform: instruction remove-between
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 990
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: next ...
9992 transform: next ...
9992 transform: remove-between ...
9992 transform: get ...
9992 transform: next ...
9992 transform: get ...
9992 transform: next ...
9992 transform: get ...
9992 transform: next ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 2:address:shared:duplex-list:character <- next_2 1:address:shared:duplex-list:character
9999 mem: location 1 is 1029
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1033
9999 mem: storing 3 in location 1034
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1029 in location 1036
9999 mem: incrementing refcount of 1029: 3 -> 4
 104 run: jump-if in, 1:offset
9999 mem: location 1036 is 1029
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1036 is 1029
9999 mem: skipping refcount at 1029
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1030 is 13
9999 mem: location 1031 is 1025
9999 mem: location 1032 is 0
9999 mem: location 1036 is 1029
9999 mem: skipping refcount at 1029
9999 type: type deduced to be character$
9998 run: address to copy is 1031
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1031 is 1025
9999 mem: storing 1025 in location 1037
9999 mem: incrementing refcount of 1025: 4 -> 5
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1037 is 1025
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1025
9999 mem: storing 1025 in location 2
9999 mem: incrementing refcount of 1025: 5 -> 6
 103 run: 2:address:shared:duplex-list:character <- next_2 2:address:shared:duplex-list:character
9999 mem: location 2 is 1025
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1036
9999 mem: incrementing refcount of 1025: 6 -> 7
 104 run: jump-if in, 1:offset
9999 mem: location 1036 is 1025
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1036 is 1025
9999 mem: skipping refcount at 1025
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1026 is 14
9999 mem: location 1027 is 1021
9999 mem: location 1028 is 1029
9999 mem: location 1036 is 1025
9999 mem: skipping refcount at 1025
9999 type: type deduced to be character$
9998 run: address to copy is 1027
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1027 is 1021
9999 mem: storing 1021 in location 1037
9999 mem: incrementing refcount of 1021: 4 -> 5
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1037 is 1021
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1021
9999 mem: decrementing refcount of 1025: 7 -> 6
9999 mem: storing 1021 in location 2
9999 mem: incrementing refcount of 1021: 5 -> 6
 103 run: 2:address:shared:duplex-list:character <- remove-between_2 2:address:shared:duplex-list:character, 0
9999 mem: location 2 is 1021
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1038
9999 mem: storing 6 in location 1039
 104 run: start:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1021 in location 1041
9999 mem: incrementing refcount of 1021: 6 -> 7
 104 run: end:address:shared:duplex-list:_elem/contained-in:start <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1042
 104 run: jump-if start, 1:offset
9999 mem: location 1041 is 1021
9998 run: jumping to instruction 5
 104 run: next:address:address:shared:duplex-list:_elem <- get-address *start, next:offset
9999 mem: location 1041 is 1021
9999 mem: skipping refcount at 1021
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1022 is 15
9999 mem: location 1023 is 1017
9999 mem: location 1024 is 1025
9999 mem: location 1041 is 1021
9999 mem: skipping refcount at 1021
9999 type: type deduced to be character$
9998 run: address to copy is 1023
9999 mem: storing 1023 in location 1043
 104 run: nothing-to-delete?:boolean <- equal *next, end
9999 mem: location 1043 is 1023
9999 mem: location 1023 is 1017
9999 mem: location 1042 is 0
9999 mem: storing 0 in location 1044
 104 run: jump-unless nothing-to-delete?, 1:offset
9999 mem: location 1044 is 0
9998 run: jumping to instruction 9
 104 run: prev:address:address:shared:duplex-list:_elem <- get-address **next, prev:offset
9999 mem: location 1043 is 1023
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1018 is 16
9999 mem: location 1019 is 1013
9999 mem: location 1020 is 1021
9999 mem: location 1043 is 1023
9999 mem: location 1023 is 1017
9999 mem: skipping refcount at 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1045
 104 run: *prev <- copy 0
9999 mem: location 1045 is 1020
9999 mem: decrementing refcount of 1021: 7 -> 6
9999 mem: storing 0 in location 1020
 104 run: *next <- copy end
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1023
9999 mem: decrementing refcount of 1017: 4 -> 3
9999 mem: storing 0 in location 1023
 104 run: jump-if end, 1:offset
9999 mem: location 1042 is 0
9998 run: jump-if fell through
 104 run: reply start:address:shared:duplex-list:_elem
9999 mem: location 1041 is 1021
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1021
9999 mem: decrementing refcount of 1021: 6 -> 5
9999 mem: storing 1021 in location 2
9999 mem: incrementing refcount of 1021: 5 -> 6
 103 run: 4:character <- get *1:address:shared:duplex-list:character, value:offset
9999 mem: location 1 is 1029
9999 mem: skipping refcount at 1029
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1030 is 13
9999 mem: location 1031 is 1025
9999 mem: location 1032 is 0
9999 mem: location 1 is 1029
9999 mem: skipping refcount at 1029
9998 run: address to copy is 1030
9998 run: its type is character
9999 mem: location 1030 is 13
9999 mem: storing 13 in location 4
 103 run: 5:address:shared:duplex-list:character <- next_2 1:address:shared:duplex-list:character
9999 mem: location 1 is 1029
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1029 in location 1036
9999 mem: incrementing refcount of 1029: 4 -> 5
 104 run: jump-if in, 1:offset
9999 mem: location 1036 is 1029
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1036 is 1029
9999 mem: skipping refcount at 1029
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1030 is 13
9999 mem: location 1031 is 1025
9999 mem: location 1032 is 0
9999 mem: location 1036 is 1029
9999 mem: skipping refcount at 1029
9999 type: type deduced to be character$
9998 run: address to copy is 1031
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1031 is 1025
9999 mem: storing 1025 in location 1037
9999 mem: incrementing refcount of 1025: 6 -> 7
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1037 is 1025
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1025
9999 mem: storing 1025 in location 5
9999 mem: incrementing refcount of 1025: 7 -> 8
 103 run: 6:character <- get *5:address:shared:duplex-list:character, value:offset
9999 mem: location 5 is 1025
9999 mem: skipping refcount at 1025
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1026 is 14
9999 mem: location 1027 is 1021
9999 mem: location 1028 is 1029
9999 mem: location 5 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1026
9998 run: its type is character
9999 mem: location 1026 is 14
9999 mem: storing 14 in location 6
 103 run: 7:address:shared:duplex-list:character <- next_2 5:address:shared:duplex-list:character
9999 mem: location 5 is 1025
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1036
9999 mem: incrementing refcount of 1025: 8 -> 9
 104 run: jump-if in, 1:offset
9999 mem: location 1036 is 1025
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1036 is 1025
9999 mem: skipping refcount at 1025
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1026 is 14
9999 mem: location 1027 is 1021
9999 mem: location 1028 is 1029
9999 mem: location 1036 is 1025
9999 mem: skipping refcount at 1025
9999 type: type deduced to be character$
9998 run: address to copy is 1027
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1027 is 1021
9999 mem: storing 1021 in location 1037
9999 mem: incrementing refcount of 1021: 6 -> 7
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1037 is 1021
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1021
9999 mem: storing 1021 in location 7
9999 mem: incrementing refcount of 1021: 7 -> 8
 103 run: 8:character <- get *7:address:shared:duplex-list:character, value:offset
9999 mem: location 7 is 1021
9999 mem: skipping refcount at 1021
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1022 is 15
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 7 is 1021
9999 mem: skipping refcount at 1021
9998 run: address to copy is 1022
9998 run: its type is character
9999 mem: location 1022 is 15
9999 mem: storing 15 in location 8
 103 run: 9:address:shared:duplex-list:character <- next_2 7:address:shared:duplex-list:character
9999 mem: location 7 is 1021
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1021 in location 1036
9999 mem: incrementing refcount of 1021: 8 -> 9
 104 run: jump-if in, 1:offset
9999 mem: location 1036 is 1021
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1036 is 1021
9999 mem: skipping refcount at 1021
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1022 is 15
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1036 is 1021
9999 mem: skipping refcount at 1021
9999 type: type deduced to be character$
9998 run: address to copy is 1023
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1023 is 0
9999 mem: storing 0 in location 1037
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1037 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 9
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    4 <- 13
    6 <- 14
    8 <- 15
    9 <- 0
  ]
9999 run: checking location 4
9999 run: checking location 6
9999 run: checking location 8
9999 run: checking location 9
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
