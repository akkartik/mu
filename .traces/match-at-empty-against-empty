c{0: 0 (((1 string-address)) <- ((new)) ) -- nil
c{0: 1 (((3 boolean)) <- ((match-at)) ((1 string-address)) ((1 string-address)) ((0 literal))) -- nil
c{1: 0 âœ“ (((1 string-address)) <- ((new)) )
c{1: 1 âœ“ (((3 boolean)) <- ((match-at)) ((1 string-address)) ((1 string-address)) ((0 literal)))
cn0: convert-names in main
cn0: (((1 string-address)) <- ((new)) ) nil nil
cn0: checking arg 
cn0: checking oarg ((1 string-address))
maybe-add: ((1 string-address))
cn0: (((3 boolean)) <- ((match-at)) ((1 string-address)) ((1 string-address)) ((0 literal))) nil nil
cn0: checking arg ((1 string-address))
maybe-add: ((1 string-address))
cn0: checking arg ((1 string-address))
maybe-add: ((1 string-address))
cn0: checking arg ((0 literal))
cn0: checking oarg ((3 boolean))
maybe-add: ((3 boolean))
cn1: (((1 string-address)) <- ((new)) )
cn1: (((3 boolean)) <- ((match-at)) ((1 string-address)) ((1 string-address)) ((0 literal)))
schedule: main
run: main 0: (((1 string-address)) <- ((new)) )
run: main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: main 1: (((3 boolean)) <- ((match-at)) ((1 string-address)) ((1 string-address)) ((0 literal)))
mem: ((1 string-address)) => 1000
mem: ((1 string-address)) => 1000
run: match-at/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: match-at/main 0: 1001 => ((default-space space-address))
run: match-at/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1000 0)
run: match-at/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1003 <= 1000
run: match-at/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1000 1000 0)
run: match-at/main 2: 1000 => ((2 string-address))
mem: ((2 string-address)): 1004 <= 1000
run: match-at/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 1000 0)
run: match-at/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1005 <= 0
run: match-at/main 4: (((4 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((1000 integer) (raw)) => 0
run: match-at/main 4: 0 => ((4 integer))
mem: ((4 integer)): 1006 <= 0
run: match-at/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 0
run: match-at/main 5: 0 => ((5 integer))
mem: ((5 integer)): 1007 <= 0
run: match-at/main 6: (((5 integer)) <- ((subtract)) ((5 integer)) ((4 integer)))
mem: ((5 integer)) => 0
mem: ((4 integer)) => 0
run: match-at/main 6: 0 => ((5 integer))
mem: ((5 integer)): 1007 <= 0
run: match-at/main 7: (((6 boolean)) <- ((lesser-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 0
mem: ((5 integer)) => 0
run: match-at/main 7: t => ((6 boolean))
mem: ((6 boolean)): 1008 <= t
run: match-at/main 8: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: match-at/main 10: (((7 integer)) <- ((copy)) ((0 literal)))
run: match-at/main 10: 0 => ((7 integer))
mem: ((7 integer)): 1009 <= 0
run: match-at/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 0
run: match-at/main 11: t => ((8 boolean))
mem: ((8 boolean)): 1010 <= t
run: match-at/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => t
run: match-at/main 21: (((reply)) ((t literal)))
run: main 1: t => ((3 boolean))
mem: ((3 boolean)): 3 <= t
schedule: done with routine nil
