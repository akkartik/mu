9991 parse: --- defining scenario-match-at-empty-against-empty
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:array:character <- new []\n    3:boolean <- match-at 1:address:array:character, 1:address:array:character, 0\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:array:character <- new []
    3:boolean <- match-at 1:address:array:character, 1:address:array:character, 0
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3 <- 1  # matches because pattern is also empty\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    3 <- 1  # matches because pattern is also empty
  ]
9999 parse: recipe scenario-match-at-empty-against-empty has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe scenario-match-at-empty-against-empty
9991 transform: --- deduce types for recipe scenario-match-at-empty-against-empty
9991 transform: --- collect surrounding spaces for recipe scenario-match-at-empty-against-empty
9991 transform: --- transform names for recipe scenario-match-at-empty-against-empty
9991 transform: --- transform braces for recipe scenario-match-at-empty-against-empty
9992 transform: run ...
9992 transform: memory-should-contain ...
9991 transform: --- compute instruction operations for recipe scenario-match-at-empty-against-empty
9991 transform: --- perform checks for recipe scenario-match-at-empty-against-empty
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-match-at-empty-against-empty
 102 run: run [
    1:address:array:character <- new []
    3:boolean <- match-at 1:address:array:character, 1:address:array:character, 0
  ]
9991 parse: --- defining run1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"": "literal-string"}
9993 parse:   product: {"1": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:array:character <- new []
9993 parse: instruction: match-at
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"1": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   ingredient: {"1": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"3": "boolean"}
9992 load: after rewriting: 3:boolean <- match-at 1:address:array:character, 1:address:array:character, 0
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe run1001
9991 transform: --- deduce types for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: new ...
9992 transform: match-at ...
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:array:character <- new []
9999 mem: storing 1000 in location 1
 103 run: 3:boolean <- match-at 1:address:array:character, 1:address:array:character, 0
9999 mem: location 1 is 1000
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 12
9999 mem: new alloc: 1001
 104 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1003
 104 run: pattern:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1004
 104 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1005
 104 run: pattern-len:number <- length *pattern
9999 mem: location 1004 is 1000
9999 mem: storing 0 in location 1006
 104 run: x:number <- length *text
9999 mem: location 1003 is 1000
9999 mem: storing 0 in location 1007
 104 run: x <- subtract x, pattern-len
9999 mem: location 1007 is 0
9999 mem: location 1006 is 0
9999 mem: storing 0 in location 1007
 104 run: enough-room?:boolean <- lesser-or-equal idx, x
9999 mem: location 1005 is 0
9999 mem: location 1007 is 0
9999 mem: storing 1 in location 1008
 104 run: jump-if enough-room?, 
9999 mem: location 1008 is 1
9998 run: jumping to instruction 11
 104 run: pattern-idx:number <- copy 0
9999 mem: storing 0 in location 1009
 104 run: done?:boolean <- greater-or-equal pattern-idx, pattern-len
9999 mem: location 1009 is 0
9999 mem: location 1006 is 0
9999 mem: storing 1 in location 1010
 104 run: jump-if done?, 
9999 mem: location 1010 is 1
9998 run: jumping to instruction 26
 104 run: reply 1/found
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1
9999 mem: storing 1 in location 3
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    3 <- 1  # matches because pattern is also empty
  ]
9999 run: checking location 3
9999 trace: fall-through: exiting scenario-match-at-empty-against-empty; decrementing callstack depth from 1
