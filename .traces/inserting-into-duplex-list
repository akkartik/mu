parse: instruction: run
parse:   ingredient: {name: "\n    1:address:duplex-list <- copy 0:literal  # 1 points to head of list\n    1:address:duplex-list <- push-duplex 3:literal, 1:address:duplex-list\n    1:address:duplex-list <- push-duplex 4:literal, 1:address:duplex-list\n    1:address:duplex-list <- push-duplex 5:literal, 1:address:duplex-list\n    2:address:duplex-list <- next-duplex 1:address:duplex-list  # 2 points inside list\n    2:address:duplex-list <- insert-duplex 6:literal, 2:address:duplex-list\n    # check structure like before\n    2:address:duplex-list <- copy 1:address:duplex-list\n    3:number <- first 2:address:duplex-list\n    2:address:duplex-list <- next-duplex 2:address:duplex-list\n    4:number <- first 2:address:duplex-list\n    2:address:duplex-list <- next-duplex 2:address:duplex-list\n    5:number <- first 2:address:duplex-list\n    2:address:duplex-list <- next-duplex 2:address:duplex-list\n    6:number <- first 2:address:duplex-list\n    2:address:duplex-list <- prev-duplex 2:address:duplex-list\n    7:number <- first 2:address:duplex-list\n    2:address:duplex-list <- prev-duplex 2:address:duplex-list\n    8:number <- first 2:address:duplex-list\n    2:address:duplex-list <- prev-duplex 2:address:duplex-list\n    9:number <- first 2:address:duplex-list\n    10:boolean <- equal 1:address:duplex-list, 2:address:duplex-list\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    3 <- 5  # scanning next\n    4 <- 4\n    5 <- 6  # inserted element\n    6 <- 3\n    7 <- 6  # then prev\n    8 <- 4\n    9 <- 5\n    10 <- 1  # list back at start\n  ", properties: [_: "literal-string"]}
after-brace: recipe scenario-inserting-into-duplex-list
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: scenario-inserting-into-duplex-list
 101 run: run [
    1:address:duplex-list <- copy 0:literal  # 1 points to head of list
    1:address:duplex-list <- push-duplex 3:literal, 1:address:duplex-list
    1:address:duplex-list <- push-duplex 4:literal, 1:address:duplex-list
    1:address:duplex-list <- push-duplex 5:literal, 1:address:duplex-list
    2:address:duplex-list <- next-duplex 1:address:duplex-list  # 2 points inside list
    2:address:duplex-list <- insert-duplex 6:literal, 2:address:duplex-list
    # check structure like before
    2:address:duplex-list <- copy 1:address:duplex-list
    3:number <- first 2:address:duplex-list
    2:address:duplex-list <- next-duplex 2:address:duplex-list
    4:number <- first 2:address:duplex-list
    2:address:duplex-list <- next-duplex 2:address:duplex-list
    5:number <- first 2:address:duplex-list
    2:address:duplex-list <- next-duplex 2:address:duplex-list
    6:number <- first 2:address:duplex-list
    2:address:duplex-list <- prev-duplex 2:address:duplex-list
    7:number <- first 2:address:duplex-list
    2:address:duplex-list <- prev-duplex 2:address:duplex-list
    8:number <- first 2:address:duplex-list
    2:address:duplex-list <- prev-duplex 2:address:duplex-list
    9:number <- first 2:address:duplex-list
    10:boolean <- equal 1:address:duplex-list, 2:address:duplex-list
  ]
parse: instruction: copy
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"duplex-list"]}
parse: instruction: push-duplex
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"duplex-list"]}
parse:   product: {name: "1", properties: ["1": "address":"duplex-list"]}
parse: instruction: push-duplex
parse:   ingredient: {name: "4", properties: ["4": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"duplex-list"]}
parse:   product: {name: "1", properties: ["1": "address":"duplex-list"]}
parse: instruction: push-duplex
parse:   ingredient: {name: "5", properties: ["5": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"duplex-list"]}
parse:   product: {name: "1", properties: ["1": "address":"duplex-list"]}
parse: instruction: next-duplex
parse:   ingredient: {name: "1", properties: ["1": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: insert-duplex
parse:   ingredient: {name: "6", properties: ["6": "literal"]}
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: copy
parse:   ingredient: {name: "1", properties: ["1": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: next-duplex
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "4", properties: ["4": "number"]}
parse: instruction: next-duplex
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "5", properties: ["5": "number"]}
parse: instruction: next-duplex
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "6", properties: ["6": "number"]}
parse: instruction: prev-duplex
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "7", properties: ["7": "number"]}
parse: instruction: prev-duplex
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "8", properties: ["8": "number"]}
parse: instruction: prev-duplex
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "2", properties: ["2": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "9", properties: ["9": "number"]}
parse: instruction: equal
parse:   ingredient: {name: "1", properties: ["1": "address":"duplex-list"]}
parse:   ingredient: {name: "2", properties: ["2": "address":"duplex-list"]}
parse:   product: {name: "10", properties: ["10": "boolean"]}
after-brace: recipe run1001
after-brace: copy ...
after-brace: push-duplex ...
after-brace: push-duplex ...
after-brace: push-duplex ...
after-brace: next-duplex ...
after-brace: insert-duplex ...
after-brace: copy ...
after-brace: first ...
after-brace: next-duplex ...
after-brace: first ...
after-brace: next-duplex ...
after-brace: first ...
after-brace: next-duplex ...
after-brace: first ...
after-brace: prev-duplex ...
after-brace: first ...
after-brace: prev-duplex ...
after-brace: first ...
after-brace: prev-duplex ...
after-brace: first ...
after-brace: equal ...
 101 run: 1:address:duplex-list <- copy 0:literal
9999 mem: storing 0 in location 1
 101 run: 1:address:duplex-list <- push-duplex 3:literal, 1:address:duplex-list
9999 mem: location 1 is 0
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1000
 102 run: x:location <- next-ingredient 
9999 mem: storing 3 in location 1002
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 0 in location 1003
 102 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
 102 run: val:address:location <- get-address result:address:duplex-list/deref, value:offset
9999 mem: location 1004 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1005
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1002 is 3
9999 mem: location 1005 is 1008
9999 mem: storing 3 in location 1008
 102 run: next:address:address:duplex-list <- get-address result:address:duplex-list/deref, next:offset
9999 mem: location 1004 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 102 run: next:address:address:duplex-list/deref <- copy in:address:duplex-list
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1009
9999 mem: storing 0 in location 1009
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1003 is 0
9999 run: jump-if fell through
 102 run: reply result:address:duplex-list
9999 mem: location 1004 is 1008
9999 run: result 0 is 1008
9999 mem: storing 1008 in location 1
 101 run: 1:address:duplex-list <- push-duplex 4:literal, 1:address:duplex-list
9999 mem: location 1 is 1008
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 102 run: x:location <- next-ingredient 
9999 mem: storing 4 in location 1002
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1008 in location 1003
 102 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1011
9999 mem: storing 1011 in location 1004
 102 run: val:address:location <- get-address result:address:duplex-list/deref, value:offset
9999 mem: location 1004 is 1011
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1004 is 1011
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1002 is 4
9999 mem: location 1005 is 1011
9999 mem: storing 4 in location 1011
 102 run: next:address:address:duplex-list <- get-address result:address:duplex-list/deref, next:offset
9999 mem: location 1004 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1004 is 1011
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 102 run: next:address:address:duplex-list/deref <- copy in:address:duplex-list
9999 mem: location 1003 is 1008
9999 mem: location 1006 is 1012
9999 mem: storing 1008 in location 1012
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1003 is 1008
9999 run: jumping to instruction 10
 102 run: prev:address:address:duplex-list <- get-address in:address:duplex-list/deref, prev:offset
9999 mem: location 1003 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1003 is 1008
9999 run: address to copy is 1010
9999 mem: storing 1010 in location 1007
 102 run: prev:address:address:duplex-list/deref <- copy result:address:duplex-list
9999 mem: location 1004 is 1011
9999 mem: location 1007 is 1010
9999 mem: storing 1011 in location 1010
 102 run: reply result:address:duplex-list
9999 mem: location 1004 is 1011
9999 run: result 0 is 1011
9999 mem: storing 1011 in location 1
 101 run: 1:address:duplex-list <- push-duplex 5:literal, 1:address:duplex-list
9999 mem: location 1 is 1011
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 102 run: x:location <- next-ingredient 
9999 mem: storing 5 in location 1002
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1011 in location 1003
 102 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1014
9999 mem: storing 1014 in location 1004
 102 run: val:address:location <- get-address result:address:duplex-list/deref, value:offset
9999 mem: location 1004 is 1014
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1014
9999 run: address to copy is 1014
9999 mem: storing 1014 in location 1005
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1002 is 5
9999 mem: location 1005 is 1014
9999 mem: storing 5 in location 1014
 102 run: next:address:address:duplex-list <- get-address result:address:duplex-list/deref, next:offset
9999 mem: location 1004 is 1014
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1014
9999 run: address to copy is 1015
9999 mem: storing 1015 in location 1006
 102 run: next:address:address:duplex-list/deref <- copy in:address:duplex-list
9999 mem: location 1003 is 1011
9999 mem: location 1006 is 1015
9999 mem: storing 1011 in location 1015
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1003 is 1011
9999 run: jumping to instruction 10
 102 run: prev:address:address:duplex-list <- get-address in:address:duplex-list/deref, prev:offset
9999 mem: location 1003 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 0
9999 mem: location 1003 is 1011
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1007
 102 run: prev:address:address:duplex-list/deref <- copy result:address:duplex-list
9999 mem: location 1004 is 1014
9999 mem: location 1007 is 1013
9999 mem: storing 1014 in location 1013
 102 run: reply result:address:duplex-list
9999 mem: location 1004 is 1014
9999 run: result 0 is 1014
9999 mem: storing 1014 in location 1
 101 run: 2:address:duplex-list <- next-duplex 1:address:duplex-list
9999 mem: location 1 is 1014
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1017
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1014 in location 1019
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1019 is 1014
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, next:offset
9999 mem: location 1019 is 1014
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1011
9999 mem: location 1016 is 0
9999 mem: location 1019 is 1014
9999 run: address to copy is 1015
9999 run: its type is address
9999 mem: location 1015 is 1011
9999 mem: storing 1011 in location 1020
 102 run: reply result:address:duplex-list
9999 mem: location 1020 is 1011
9999 run: result 0 is 1011
9999 mem: storing 1011 in location 2
 101 run: 2:address:duplex-list <- insert-duplex 6:literal, 2:address:duplex-list
9999 mem: location 2 is 1011
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 102 run: x:location <- next-ingredient 
9999 mem: storing 6 in location 1002
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1011 in location 1003
 102 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1021
9999 mem: storing 1021 in location 1004
 102 run: val:address:location <- get-address new-node:address:duplex-list/deref, value:offset
9999 mem: location 1004 is 1021
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1004 is 1021
9999 run: address to copy is 1021
9999 mem: storing 1021 in location 1005
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1002 is 6
9999 mem: location 1005 is 1021
9999 mem: storing 6 in location 1021
 102 run: next-node:address:duplex-list <- get in:address:duplex-list/deref, next:offset
9999 mem: location 1003 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1003 is 1011
9999 run: address to copy is 1012
9999 run: its type is address
9999 mem: location 1012 is 1008
9999 mem: storing 1008 in location 1006
 102 run: y:address:address:duplex-list <- get-address in:address:duplex-list/deref, next:offset
9999 mem: location 1003 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1003 is 1011
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1007
 102 run: y:address:address:duplex-list/deref <- copy new-node:address:duplex-list
9999 mem: location 1004 is 1021
9999 mem: location 1007 is 1012
9999 mem: storing 1021 in location 1012
 102 run: y:address:address:duplex-list <- get-address new-node:address:duplex-list/deref, prev:offset
9999 mem: location 1004 is 1021
9999 mem: location 1021 is 6
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1004 is 1021
9999 run: address to copy is 1023
9999 mem: storing 1023 in location 1007
 102 run: y:address:address:duplex-list/deref <- copy in:address:duplex-list
9999 mem: location 1003 is 1011
9999 mem: location 1007 is 1023
9999 mem: storing 1011 in location 1023
 102 run: y:address:address:duplex-list <- get-address new-node:address:duplex-list/deref, next:offset
9999 mem: location 1004 is 1021
9999 mem: location 1021 is 6
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1011
9999 mem: location 1004 is 1021
9999 run: address to copy is 1022
9999 mem: storing 1022 in location 1007
 102 run: y:address:address:duplex-list/deref <- copy next-node:address:duplex-list
9999 mem: location 1006 is 1008
9999 mem: location 1007 is 1022
9999 mem: storing 1008 in location 1022
 102 run: jump-if next-node:address:duplex-list, 1:offset
9999 mem: location 1006 is 1008
9999 run: jumping to instruction 15
 102 run: y:address:address:duplex-list <- get-address next-node:address:duplex-list/deref, prev:offset
9999 mem: location 1006 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: location 1006 is 1008
9999 run: address to copy is 1010
9999 mem: storing 1010 in location 1007
 102 run: y:address:address:duplex-list/deref <- copy new-node:address:duplex-list
9999 mem: location 1004 is 1021
9999 mem: location 1007 is 1010
9999 mem: storing 1021 in location 1010
 102 run: reply new-node:address:duplex-list
9999 mem: location 1004 is 1021
9999 run: result 0 is 1021
9999 mem: storing 1021 in location 2
 101 run: 2:address:duplex-list <- copy 1:address:duplex-list
9999 mem: location 1 is 1014
9999 mem: storing 1014 in location 2
 101 run: 3:number <- first 2:address:duplex-list
9999 mem: location 2 is 1014
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1014 in location 1019
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1019 is 1014
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1011
9999 mem: location 1019 is 1014
9999 run: address to copy is 1014
9999 run: its type is number
9999 mem: location 1014 is 5
9999 mem: storing 5 in location 1020
 102 run: reply result:location
9999 mem: location 1020 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 3
 101 run: 2:address:duplex-list <- next-duplex 2:address:duplex-list
9999 mem: location 2 is 1014
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1014 in location 1019
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1019 is 1014
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, next:offset
9999 mem: location 1019 is 1014
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1011
9999 mem: location 1016 is 0
9999 mem: location 1019 is 1014
9999 run: address to copy is 1015
9999 run: its type is address
9999 mem: location 1015 is 1011
9999 mem: storing 1011 in location 1020
 102 run: reply result:address:duplex-list
9999 mem: location 1020 is 1011
9999 run: result 0 is 1011
9999 mem: storing 1011 in location 2
 101 run: 4:number <- first 2:address:duplex-list
9999 mem: location 2 is 1011
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1011 in location 1019
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1019 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1021
9999 mem: location 1019 is 1011
9999 run: address to copy is 1011
9999 run: its type is number
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1020
 102 run: reply result:location
9999 mem: location 1020 is 4
9999 run: result 0 is 4
9999 mem: storing 4 in location 4
 101 run: 2:address:duplex-list <- next-duplex 2:address:duplex-list
9999 mem: location 2 is 1011
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1011 in location 1019
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1019 is 1011
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, next:offset
9999 mem: location 1019 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1021
9999 mem: location 1013 is 1014
9999 mem: location 1019 is 1011
9999 run: address to copy is 1012
9999 run: its type is address
9999 mem: location 1012 is 1021
9999 mem: storing 1021 in location 1020
 102 run: reply result:address:duplex-list
9999 mem: location 1020 is 1021
9999 run: result 0 is 1021
9999 mem: storing 1021 in location 2
 101 run: 5:number <- first 2:address:duplex-list
9999 mem: location 2 is 1021
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1021 in location 1019
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1019 is 1021
9999 mem: location 1021 is 6
9999 mem: location 1022 is 1008
9999 mem: location 1019 is 1021
9999 run: address to copy is 1021
9999 run: its type is number
9999 mem: location 1021 is 6
9999 mem: storing 6 in location 1020
 102 run: reply result:location
9999 mem: location 1020 is 6
9999 run: result 0 is 6
9999 mem: storing 6 in location 5
 101 run: 2:address:duplex-list <- next-duplex 2:address:duplex-list
9999 mem: location 2 is 1021
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1021 in location 1019
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1019 is 1021
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, next:offset
9999 mem: location 1019 is 1021
9999 mem: location 1021 is 6
9999 mem: location 1022 is 1008
9999 mem: location 1023 is 1011
9999 mem: location 1019 is 1021
9999 run: address to copy is 1022
9999 run: its type is address
9999 mem: location 1022 is 1008
9999 mem: storing 1008 in location 1020
 102 run: reply result:address:duplex-list
9999 mem: location 1020 is 1008
9999 run: result 0 is 1008
9999 mem: storing 1008 in location 2
 101 run: 6:number <- first 2:address:duplex-list
9999 mem: location 2 is 1008
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1008 in location 1019
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1019 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1019 is 1008
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 3
9999 mem: storing 3 in location 1020
 102 run: reply result:location
9999 mem: location 1020 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 6
 101 run: 2:address:duplex-list <- prev-duplex 2:address:duplex-list
9999 mem: location 2 is 1008
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1008 in location 1019
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1019 is 1008
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, prev:offset
9999 mem: location 1019 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1021
9999 mem: location 1019 is 1008
9999 run: address to copy is 1010
9999 run: its type is address
9999 mem: location 1010 is 1021
9999 mem: storing 1021 in location 1020
 102 run: reply result:address:duplex-list
9999 mem: location 1020 is 1021
9999 run: result 0 is 1021
9999 mem: storing 1021 in location 2
 101 run: 7:number <- first 2:address:duplex-list
9999 mem: location 2 is 1021
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1021 in location 1019
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1019 is 1021
9999 mem: location 1021 is 6
9999 mem: location 1022 is 1008
9999 mem: location 1019 is 1021
9999 run: address to copy is 1021
9999 run: its type is number
9999 mem: location 1021 is 6
9999 mem: storing 6 in location 1020
 102 run: reply result:location
9999 mem: location 1020 is 6
9999 run: result 0 is 6
9999 mem: storing 6 in location 7
 101 run: 2:address:duplex-list <- prev-duplex 2:address:duplex-list
9999 mem: location 2 is 1021
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1021 in location 1019
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1019 is 1021
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, prev:offset
9999 mem: location 1019 is 1021
9999 mem: location 1021 is 6
9999 mem: location 1022 is 1008
9999 mem: location 1023 is 1011
9999 mem: location 1019 is 1021
9999 run: address to copy is 1023
9999 run: its type is address
9999 mem: location 1023 is 1011
9999 mem: storing 1011 in location 1020
 102 run: reply result:address:duplex-list
9999 mem: location 1020 is 1011
9999 run: result 0 is 1011
9999 mem: storing 1011 in location 2
 101 run: 8:number <- first 2:address:duplex-list
9999 mem: location 2 is 1011
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1011 in location 1019
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1019 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1021
9999 mem: location 1019 is 1011
9999 run: address to copy is 1011
9999 run: its type is number
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1020
 102 run: reply result:location
9999 mem: location 1020 is 4
9999 run: result 0 is 4
9999 mem: storing 4 in location 8
 101 run: 2:address:duplex-list <- prev-duplex 2:address:duplex-list
9999 mem: location 2 is 1011
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1011 in location 1019
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1019 is 1011
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, prev:offset
9999 mem: location 1019 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1021
9999 mem: location 1013 is 1014
9999 mem: location 1019 is 1011
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1020
 102 run: reply result:address:duplex-list
9999 mem: location 1020 is 1014
9999 run: result 0 is 1014
9999 mem: storing 1014 in location 2
 101 run: 9:number <- first 2:address:duplex-list
9999 mem: location 2 is 1014
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1014 in location 1019
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1019 is 1014
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1011
9999 mem: location 1019 is 1014
9999 run: address to copy is 1014
9999 run: its type is number
9999 mem: location 1014 is 5
9999 mem: storing 5 in location 1020
 102 run: reply result:location
9999 mem: location 1020 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 9
 101 run: 10:boolean <- equal 1:address:duplex-list, 2:address:duplex-list
9999 mem: location 1 is 1014
9999 mem: location 2 is 1014
9999 mem: storing 1 in location 10
 100 run: memory-should-contain [
    3 <- 5  # scanning next
    4 <- 4
    5 <- 6  # inserted element
    6 <- 3
    7 <- 6  # then prev
    8 <- 4
    9 <- 5
    10 <- 1  # list back at start
  ]
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
