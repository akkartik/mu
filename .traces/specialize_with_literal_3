9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"1": <"address" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 1:address:character/raw <- foo 0
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:address:_elem
9999 parse: header product: y:address:_elem
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"x": <>}
9993 parse:   product: {"y": <>}
9992 load: after rewriting: y <- copy x
9999 parse: recipe foo has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- deduce types for recipe main
9992 transform: default-space => <address : <array : <number : <>>>>
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9992 transform: checking variant 9: -1
9992 transform: checking variant 10: -1
9992 transform: checking variant 11: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 12: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 12
9992 transform: final score: 100
9992 transform: matches
9992 transform: found variant to specialize: 1000 foo
9993 transform: switching foo to foo_3
9993 transform: compute type names: foo
9994 transform:     checking {"x": <"address" : <"_elem" : <>>>}: <"address" : <"_elem" : <>>>
9993 transform: type of x is <"address" : <"_elem" : <>>>
9994 transform:     checking {"y": <"address" : <"_elem" : <>>>}: <"address" : <"_elem" : <>>>
9993 transform: type of y is <"address" : <"_elem" : <>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: x:address:_elem <- next-ingredient 
9994 transform:     checking {"x": <"address" : <"_elem" : <>>>}: <"address" : <"_elem" : <>>>
9993 transform:   instruction: y <- copy x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to <"address" : <"_elem" : <>>>
9994 transform:     checking {"y": <>}: <>
9994 transform:     deducing type to <"address" : <"_elem" : <>>>
9993 transform: adding mapping from _elem to "character"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:address:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient y:address:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'x:address:_elem <- next-ingredient '
9993 transform: replacing in ingredient x:address:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9993 transform: replacing in instruction 'y <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9993 transform: replacing in ingredient y
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9991 transform: --- checking reply instructions against header for foo_3
9991 transform: --- fill in reply ingredients from header for recipe foo_3
9991 transform: --- transform braces for recipe foo_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- deduce types for recipe foo_3
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: x => <address : <character : <>>>
9992 transform: y => <address : <character : <>>>
9991 transform: --- deduce types from header for foo_3
9993 transform: type of x is <address : <character : <>>>
9993 transform: type of y is <address : <character : <>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: x:address:_elem <- next-ingredient 
9993 transform:   product: x: <address : <character : <>>> -- {"x": <"address" : <"character" : <>>>}
9992 transform: instruction: y <- copy x
9993 transform:   product: y: <address : <character : <>>> -- {"y": <"address" : <"character" : <>>>}
9992 transform: instruction: reply y:address:_elem
9991 transform: --- resolve ambiguous calls for recipe foo_3
9991 transform: --- checking reply instructions against header for foo_3
9991 transform: --- collect surrounding spaces for recipe foo_3
9991 transform: --- transform names for recipe foo_3
9993 name: assign x 1
9993 name: assign y 2
9991 transform: --- compute instruction operations for recipe foo_3
9991 transform: --- perform checks for recipe foo_3
9991 transform: --- convert 'new' to 'allocate' for recipe foo_3
9992 new: size of "location" is 1
9992 transform: new specialization: foo_3
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 1
9999 mem: new alloc: 1000
 102 run: 1:address:character/raw <- foo_3 0
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1002
 103 run: x:address:_elem <- next-ingredient 
9999 mem: storing 0 in location 1004
 103 run: y <- copy x
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1005
 103 run: reply y:address:_elem
9999 mem: location 1005 is 0
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 0
9999 mem: storing 0 in location 1
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
