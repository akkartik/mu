9991 parse: --- defining main
9993 parse: instruction: bar
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   product: {"1": <"address" : <"shared" : <"foo" : <"point" : <>>>>>}
9992 load: after rewriting: 1:address:shared:foo:point <- bar 3
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"foo" : <"point" : <>>>>>, "lookup": <>}
9993 parse:   product: {"11": <"foo" : <"point" : <>>>}
9992 load: after rewriting: 11:foo:point <- copy *1:address:shared:foo:point
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:number
9999 parse: header product: result:address:shared:foo:_t
9991 parse: --- defining bar
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"(foo _t)": "type"}
9993 parse:   product: {"result": <>}
9992 load: after rewriting: result <- new {(foo _t) : type}
9999 parse: recipe bar has a header
9999 parse: container has type ingredients; parsing
9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element name: x
9993 parse:   type: 2000
9993 parse:   element name: y
9993 parse:   type: 2000
9993 parse:   type: 1
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction 1:address:shared:foo:point <- bar 3
9992 transform: checking variant (strict) 6: recipe bar {"x": "number"} -> {"result": <"address" : <"shared" : <"foo" : <"_t" : <>>>>>}
9993 transform: strict match failed: product 0
9992 transform: found variant to specialize: 1001 bar
9993 transform: switching bar to specialized recipe bar_2 {"x": "number"} -> {"result": <"address" : <"shared" : <"foo" : <"_t" : <>>>>>}
9993 transform: compute type names: bar_2
9994 transform:     checking {"x": "number"}: "number"
9993 transform: type of x is "number"
9994 transform:     checking {"result": <"address" : <"shared" : <"foo" : <"_t" : <>>>>>}: <"address" : <"shared" : <"foo" : <"_t" : <>>>>>
9993 transform: type of result is <"address" : <"shared" : <"foo" : <"_t" : <>>>>>
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: x:number <- next-ingredient-without-typechecking 
9994 transform:     checking {"x": "number"}: "number"
9993 transform:   instruction: result <- new {(foo _t) : type}
9994 transform:     checking {"(foo _t)": "type"}: "type"
9993 transform: type of (foo _t) is "type"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"foo" : <"_t" : <>>>>>
9993 transform: adding mapping from _t to "point"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:number
9993 transform:   after: number
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:shared:foo:_t
9993 transform: _t => "point"
9993 transform:   after: <address : <shared : <foo : <point : <>>>>>
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'x:number <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:number
9993 transform:   after: number
9993 transform: replacing in instruction 'result <- new {(foo _t) : type}'
9993 transform: replacing in ingredient {(foo _t) : type}
9993 transform:   after: ?0
9993 transform: replacing in ingredient result
9993 transform: _t => "point"
9993 transform:   after: <address : <shared : <foo : <point : <>>>>>
9993 transform: _t => "point"
9992 transform: transforming new specialization: bar_2
9991 transform: --- checking reply instructions against header for bar_2
9991 transform: --- fill in reply ingredients from header for recipe bar_2
9991 transform: --- deduce types for recipe bar_2
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: x => number
9992 transform: result => <address : <shared : <foo : <point : <>>>>>
9991 transform: --- deduce types from header for bar_2
9993 transform: type of x is number
9993 transform: type of result is <address : <shared : <foo : <point : <>>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: x:number <- next-ingredient-without-typechecking 
9993 transform:   product: x: number -- {"x": "number"}
9992 transform: instruction: result <- new {(foo _t) : type}
9993 transform:   product: result: <address : <shared : <foo : <point : <>>>>> -- {"result": <"address" : <"shared" : <"foo" : <"point" : <>>>>>}
9992 transform: instruction: reply result:address:shared:foo:_t
9991 transform: --- collect surrounding spaces for recipe bar_2
9991 transform: --- transform names for recipe bar_2
9993 name: assign x 1
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe bar_2
9991 transform: --- compute instruction operations for recipe bar_2
9991 transform: --- transform braces for recipe bar_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: new ...
9992 transform:  ...
9991 transform: --- perform checks for recipe bar_2
9991 transform: --- type-check 'call' instructions inside recipe bar_2
9991 transform: --- type-check calls inside recipe bar_2
9991 transform: --- convert 'new' to 'allocate' for recipe bar_2
9992 new: size of "location" is 1
9999 type: checking size of type ingredient

9999 type: type deduced to be point$
9992 new: size of <"foo" : <"point" : <>>> is 3
9991 transform: --- checking reply instructions against header for bar_2
9992 transform: new specialization: bar_2
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: bar ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: 1:address:shared:foo:point <- bar_2 3
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1000
9999 mem: storing 3 in location 1001
 103 run: x:number <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1003
 103 run: result <- new {(foo _t) : type}
9999 mem: allocating size 4
9999 mem: new alloc: 1005
9999 mem: storing 1005 in location 1004
9999 mem: incrementing refcount of 1005: 0 -> 1
 103 run: reply result:address:shared:foo:_t
9999 mem: location 1004 is 1005
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1005
9999 mem: storing 1005 in location 1
9999 mem: incrementing refcount of 1005: 1 -> 2
 102 run: 11:foo:point <- copy *1:address:shared:foo:point
9999 mem: location 1 is 1005
9999 mem: skipping refcount at 1005
9999 type: checking size of type ingredient

9999 type: type deduced to be point$
9999 mem: location 1006 is 0
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 type: checking size of type ingredient

9999 type: type deduced to be point$
9999 mem: storing 0 in location 11
9999 mem: storing 0 in location 12
9999 mem: storing 0 in location 13
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
