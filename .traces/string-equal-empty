c{0: 0 (((1 string-address)) <- ((new)) ) -- nil
c{0: 1 (((2 string-address)) <- ((new)) ) -- nil
c{0: 2 (((3 boolean)) <- ((string-equal)) ((1 string-address)) ((2 string-address))) -- nil
c{1: 0 ✓ (((1 string-address)) <- ((new)) )
c{1: 1 ✓ (((2 string-address)) <- ((new)) )
c{1: 2 ✓ (((3 boolean)) <- ((string-equal)) ((1 string-address)) ((2 string-address)))
cn0: convert-names in main
cn0: (((1 string-address)) <- ((new)) ) nil nil
cn0: checking arg 
cn0: checking oarg ((1 string-address))
maybe-add: ((1 string-address))
cn0: (((2 string-address)) <- ((new)) ) nil nil
cn0: checking arg 
cn0: checking oarg ((2 string-address))
maybe-add: ((2 string-address))
cn0: (((3 boolean)) <- ((string-equal)) ((1 string-address)) ((2 string-address))) nil nil
cn0: checking arg ((1 string-address))
maybe-add: ((1 string-address))
cn0: checking arg ((2 string-address))
maybe-add: ((2 string-address))
cn0: checking oarg ((3 boolean))
maybe-add: ((3 boolean))
cn1: (((1 string-address)) <- ((new)) )
cn1: (((2 string-address)) <- ((new)) )
cn1: (((3 boolean)) <- ((string-equal)) ((1 string-address)) ((2 string-address)))
schedule: main
run: main 0: (((1 string-address)) <- ((new)) )
run: main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: main 1: (((2 string-address)) <- ((new)) )
run: main 1: 1001 => ((2 string-address))
mem: ((2 string-address)): 2 <= 1001
run: main 2: (((3 boolean)) <- ((string-equal)) ((1 string-address)) ((2 string-address)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1001
run: string-equal/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-equal/main 0: 1002 => ((default-space space-address))
run: string-equal/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1001)
run: string-equal/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1004 <= 1000
run: string-equal/main 2: (((2 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 0
run: string-equal/main 2: 0 => ((2 integer))
mem: ((2 integer)): 1005 <= 0
run: string-equal/main 3: (((3 string-address)) <- ((next-input)))
arg: nil 1 (1000 1001)
run: string-equal/main 3: 1001 => ((3 string-address))
mem: ((3 string-address)): 1006 <= 1001
run: string-equal/main 4: (((4 integer)) <- ((length)) ((3 string-address) (deref)))
array-len: ((3 string-address) (deref))
mem: ((1001 integer) (raw)) => 0
run: string-equal/main 4: 0 => ((4 integer))
mem: ((4 integer)): 1007 <= 0
run: string-equal/main 5: (((5 boolean)) <- ((equal)) ((2 integer)) ((4 integer)))
mem: ((2 integer)) => 0
mem: ((4 integer)) => 0
run: string-equal/main 5: t => ((5 boolean))
mem: ((5 boolean)): 1008 <= t
run: string-equal/main 6: (((jump-if)) ((5 boolean)) ((1 offset)))
mem: ((5 boolean)) => t
run: string-equal/main 8: (((6 integer)) <- ((copy)) ((0 literal)))
run: string-equal/main 8: 0 => ((6 integer))
mem: ((6 integer)): 1009 <= 0
run: string-equal/main 9: (((7 boolean)) <- ((greater-or-equal)) ((6 integer)) ((2 integer)))
mem: ((6 integer)) => 0
mem: ((2 integer)) => 0
run: string-equal/main 9: t => ((7 boolean))
mem: ((7 boolean)): 1010 <= t
run: string-equal/main 10: (((jump-if)) ((7 boolean)) ((7 offset)))
mem: ((7 boolean)) => t
run: string-equal/main 18: (((reply)) ((t literal)))
run: main 2: t => ((3 boolean))
mem: ((3 boolean)): 3 <= t
schedule: done with routine nil
