c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((0 space-address) (names screen-state)) <- ((next-input))) -- nil
c{0: 2 (((screen terminal-address)) <- ((next-input))) -- nil
c{0: 3 (((at-bottom? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((printed-height integer) (space 1))) -- ((open 3))
c{0: 4 (((break-unless)) ((at-bottom? boolean))) -- ((open 3))
c{0: 5 (((screen-full? boolean)) <- ((greater-or-equal)) ((app-height integer) (space 1)) ((screen-height integer) (space 1))) -- ((open 5) (open 3))
c{0: 6 (((break-unless)) ((screen-full? boolean))) -- ((open 5) (open 3))
c{0: 7 (((cursor-to-next-line)) ((screen terminal-address))) -- ((open 5) (open 3))
c{0: 8 (((cursor-up)) ((screen terminal-address))) -- ((open 5) (open 3))
c{0: 9 (((reply))) -- ((open 5) (open 3))
c{0: 10 (((printed-height integer) (space 1)) <- ((add)) ((printed-height integer) (space 1)) ((1 literal))) -- ((close 10) (open 5) (open 3))
c{0: 11 (((grow-max? boolean)) <- ((greater-than)) ((printed-height integer) (space 1)) ((app-height integer) (space 1))) -- ((open 11) (close 10) (open 5) (open 3))
c{0: 12 (((break-unless)) ((grow-max? boolean))) -- ((open 11) (close 10) (open 5) (open 3))
c{0: 13 (((app-height integer) (space 1)) <- ((copy)) ((printed-height integer) (space 1))) -- ((open 11) (close 10) (open 5) (open 3))
c{0: 14 (((cursor-row integer) (space 1)) <- ((add)) ((cursor-row integer) (space 1)) ((1 literal))) -- ((close 14) (close 14) (open 11) (close 10) (open 5) (open 3))
c{0: 15 (((cursor-to-next-line)) ((screen terminal-address))) -- ((close 14) (close 14) (open 11) (close 10) (open 5) (open 3))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((0 space-address) (names screen-state)) <- ((next-input)))
c{1: 2 ✓ (((screen terminal-address)) <- ((next-input)))
c{1: 3 ✓ (((at-bottom? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((printed-height integer) (space 1)))
c{1: 4 X (((break-unless)) ((at-bottom? boolean))) => (((jump-unless)) ((at-bottom? boolean)) ((9 offset)))
c{1: 5 ✓ (((screen-full? boolean)) <- ((greater-or-equal)) ((app-height integer) (space 1)) ((screen-height integer) (space 1)))
c{1: 6 X (((break-unless)) ((screen-full? boolean))) => (((jump-unless)) ((screen-full? boolean)) ((3 offset)))
c{1: 7 ✓ (((cursor-to-next-line)) ((screen terminal-address)))
c{1: 8 ✓ (((cursor-up)) ((screen terminal-address)))
c{1: 9 ✓ (((reply)))
c{1: 10 ✓ (((printed-height integer) (space 1)) <- ((add)) ((printed-height integer) (space 1)) ((1 literal)))
c{1: 11 ✓ (((grow-max? boolean)) <- ((greater-than)) ((printed-height integer) (space 1)) ((app-height integer) (space 1)))
c{1: 12 X (((break-unless)) ((grow-max? boolean))) => (((jump-unless)) ((grow-max? boolean)) ((1 offset)))
c{1: 13 ✓ (((app-height integer) (space 1)) <- ((copy)) ((printed-height integer) (space 1)))
c{1: 14 ✓ (((cursor-row integer) (space 1)) <- ((add)) ((cursor-row integer) (space 1)) ((1 literal)))
c{1: 15 ✓ (((cursor-to-next-line)) ((screen terminal-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((0 space-address) (names screen-state)) <- ((next-input))) -- nil
c{0: 2 (((screen terminal-address)) <- ((next-input))) -- nil
c{0: 3 (((target-row integer)) <- ((next-input))) -- nil
c{0: 4 (((below-target? boolean)) <- ((greater-than)) ((cursor-row integer) (space 1)) ((target-row integer))) -- ((open 4))
c{0: 5 (((break-unless)) ((below-target? boolean))) -- ((open 4))
c{0: 6 (((up)) ((0 space-address)) ((screen terminal-address))) -- ((open 4))
c{0: 7 (((loop))) -- ((open 4))
c{0: 8 (((above-target? boolean)) <- ((less-than)) ((cursor-row integer) (space 1)) ((target-row integer))) -- ((open 8) (close 8) (open 4))
c{0: 9 (((break-unless)) ((above-target? boolean))) -- ((open 8) (close 8) (open 4))
c{0: 10 (((down)) ((0 space-address)) ((screen terminal-address))) -- ((open 8) (close 8) (open 4))
c{0: 11 (((loop))) -- ((open 8) (close 8) (open 4))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((0 space-address) (names screen-state)) <- ((next-input)))
c{1: 2 ✓ (((screen terminal-address)) <- ((next-input)))
c{1: 3 ✓ (((target-row integer)) <- ((next-input)))
c{1: 4 ✓ (((below-target? boolean)) <- ((greater-than)) ((cursor-row integer) (space 1)) ((target-row integer)))
c{1: 5 X (((break-unless)) ((below-target? boolean))) => (((jump-unless)) ((below-target? boolean)) ((2 offset)))
c{1: 6 ✓ (((up)) ((0 space-address)) ((screen terminal-address)))
c{1: 7 X (((loop))) => (((jump)) ((-4 offset)))
c{1: 8 ✓ (((above-target? boolean)) <- ((less-than)) ((cursor-row integer) (space 1)) ((target-row integer)))
c{1: 9 X (((break-unless)) ((above-target? boolean))) => (((jump-unless)) ((above-target? boolean)) ((2 offset)))
c{1: 10 ✓ (((down)) ((0 space-address)) ((screen terminal-address)))
c{1: 11 X (((loop))) => (((jump)) ((-4 offset)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((x string-address)) <- ((next-input))) -- nil
c{0: 2 (((screen-height integer)) <- ((next-input))) -- nil
c{0: 3 (((s stream-address)) <- ((init-stream)) ((x string-address))) -- nil
c{0: 4 (((traces instruction-trace-address-array-address)) <- ((parse-traces)) ((s stream-address))) -- nil
c{0: 5 (((0 space-address) (names screen-state)) <- ((screen-state)) ((traces instruction-trace-address-array-address)) ((screen-height integer))) -- nil
c{0: 6 (((cursor-mode))) -- nil
c{0: 7 (((print-traces-collapsed)) ((0 space-address) (screen-state)) ((nil literal) (terminal))) -- nil
c{0: 8 (((quit? boolean)) <- ((process-key)) ((0 space-address) (screen-state)) ((nil literal) (keyboard)) ((nil literal) (terminal))) -- ((open 8))
c{0: 9 (((break-if)) ((quit? boolean))) -- ((open 8))
c{0: 10 (((loop))) -- ((open 8))
c{0: 11 (((to-bottom)) ((0 space-address) (screen-state)) ((nil literal) (terminal))) -- ((close 11) (open 8))
c{0: 12 (((retro-mode))) -- ((close 11) (open 8))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((x string-address)) <- ((next-input)))
c{1: 2 ✓ (((screen-height integer)) <- ((next-input)))
c{1: 3 ✓ (((s stream-address)) <- ((init-stream)) ((x string-address)))
c{1: 4 ✓ (((traces instruction-trace-address-array-address)) <- ((parse-traces)) ((s stream-address)))
c{1: 5 ✓ (((0 space-address) (names screen-state)) <- ((screen-state)) ((traces instruction-trace-address-array-address)) ((screen-height integer)))
c{1: 6 ✓ (((cursor-mode)))
c{1: 7 ✓ (((print-traces-collapsed)) ((0 space-address) (screen-state)) ((nil literal) (terminal)))
c{1: 8 ✓ (((quit? boolean)) <- ((process-key)) ((0 space-address) (screen-state)) ((nil literal) (keyboard)) ((nil literal) (terminal)))
c{1: 9 X (((break-if)) ((quit? boolean))) => (((jump-if)) ((quit? boolean)) ((1 offset)))
c{1: 10 X (((loop))) => (((jump)) ((-3 offset)))
c{1: 11 ✓ (((to-bottom)) ((0 space-address) (screen-state)) ((nil literal) (terminal)))
c{1: 12 ✓ (((retro-mode)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((0 space-address) (names screen-state)) <- ((next-input))) -- nil
c{0: 2 (((n integer) (screen)) <- ((next-input))) -- nil
c{0: 3 (((has-expanded? boolean)) <- ((greater-or-equal)) ((expanded-index integer) (space 1)) ((0 literal))) -- ((open 3))
c{0: 4 (((break-if)) ((has-expanded? boolean))) -- ((open 3))
c{0: 5 (((reply)) ((n integer) (index))) -- ((open 3))
c{0: 6 (((above-expanded? boolean)) <- ((lesser-or-equal)) ((cursor-row integer) (space 1) (screen)) ((expanded-index integer) (space 1))) -- ((open 6) (close 6) (open 3))
c{0: 7 (((break-unless)) ((above-expanded? boolean))) -- ((open 6) (close 6) (open 3))
c{0: 8 (((reply)) ((n integer) (index))) -- ((open 6) (close 6) (open 3))
c{0: 9 (((k integer) (index)) <- ((instruction-trace-num-children)) ((traces instruction-trace-address-array-address) (space 1)) ((expanded-index integer) (space 1))) -- ((close 9) (open 6) (close 6) (open 3))
c{0: 10 (((result integer) (index)) <- ((subtract)) ((n integer) (screen)) ((k integer) (index))) -- ((close 9) (open 6) (close 6) (open 3))
c{0: 11 (((reply)) ((result integer) (index))) -- ((close 9) (open 6) (close 6) (open 3))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((0 space-address) (names screen-state)) <- ((next-input)))
c{1: 2 ✓ (((n integer) (screen)) <- ((next-input)))
c{1: 3 ✓ (((has-expanded? boolean)) <- ((greater-or-equal)) ((expanded-index integer) (space 1)) ((0 literal)))
c{1: 4 X (((break-if)) ((has-expanded? boolean))) => (((jump-if)) ((has-expanded? boolean)) ((1 offset)))
c{1: 5 ✓ (((reply)) ((n integer) (index)))
c{1: 6 ✓ (((above-expanded? boolean)) <- ((lesser-or-equal)) ((cursor-row integer) (space 1) (screen)) ((expanded-index integer) (space 1)))
c{1: 7 X (((break-unless)) ((above-expanded? boolean))) => (((jump-unless)) ((above-expanded? boolean)) ((1 offset)))
c{1: 8 ✓ (((reply)) ((n integer) (index)))
c{1: 9 ✓ (((k integer) (index)) <- ((instruction-trace-num-children)) ((traces instruction-trace-address-array-address) (space 1)) ((expanded-index integer) (space 1)))
c{1: 10 ✓ (((result integer) (index)) <- ((subtract)) ((n integer) (screen)) ((k integer) (index)))
c{1: 11 ✓ (((reply)) ((result integer) (index)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((0 space-address) (names screen-state)) <- ((next-input))) -- nil
c{0: 2 (((screen terminal-address)) <- ((next-input))) -- nil
c{0: 3 (((no-expanded? boolean)) <- ((less-than)) ((expanded-index integer) (space 1)) ((0 literal))) -- ((open 3))
c{0: 4 (((break-if)) ((no-expanded? boolean))) -- ((open 3))
c{0: 5 (((at-expanded? boolean)) <- ((equal)) ((cursor-row integer) (space 1)) ((expanded-index integer) (space 1))) -- ((open 3))
c{0: 6 (((break-unless)) ((at-expanded? boolean))) -- ((open 3))
c{0: 7 (((n integer)) <- ((instruction-trace-num-children)) ((traces instruction-trace-address-array-address) (space 1)) ((expanded-index integer) (space 1))) -- ((open 3))
c{0: 8 (((n integer)) <- ((add)) ((n integer)) ((1 literal))) -- ((open 3))
c{0: 9 (((i integer)) <- ((copy)) ((0 literal))) -- ((open 3))
c{0: 10 (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((n integer))) -- ((open 10) (open 3))
c{0: 11 (((break-if)) ((done? boolean))) -- ((open 10) (open 3))
c{0: 12 (((cursor-row integer) (space 1)) <- ((add)) ((cursor-row integer) (space 1)) ((1 literal))) -- ((open 10) (open 3))
c{0: 13 (((cursor-down)) ((screen terminal-address))) -- ((open 10) (open 3))
c{0: 14 (((i integer)) <- ((add)) ((i integer)) ((1 literal))) -- ((open 10) (open 3))
c{0: 15 (((loop))) -- ((open 10) (open 3))
c{0: 16 (((reply))) -- ((close 16) (open 10) (open 3))
c{0: 17 (((at-bottom? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((printed-height integer) (space 1))) -- ((open 17) (close 17) (close 16) (open 10) (open 3))
c{0: 18 (((break-if)) ((at-bottom? boolean))) -- ((open 17) (close 17) (close 16) (open 10) (open 3))
c{0: 19 (((cursor-row integer) (space 1)) <- ((add)) ((cursor-row integer) (space 1)) ((1 literal))) -- ((open 17) (close 17) (close 16) (open 10) (open 3))
c{0: 20 (((cursor-down)) ((screen terminal-address))) -- ((open 17) (close 17) (close 16) (open 10) (open 3))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((0 space-address) (names screen-state)) <- ((next-input)))
c{1: 2 ✓ (((screen terminal-address)) <- ((next-input)))
c{1: 3 ✓ (((no-expanded? boolean)) <- ((less-than)) ((expanded-index integer) (space 1)) ((0 literal)))
c{1: 4 X (((break-if)) ((no-expanded? boolean))) => (((jump-if)) ((no-expanded? boolean)) ((12 offset)))
c{1: 5 ✓ (((at-expanded? boolean)) <- ((equal)) ((cursor-row integer) (space 1)) ((expanded-index integer) (space 1)))
c{1: 6 X (((break-unless)) ((at-expanded? boolean))) => (((jump-unless)) ((at-expanded? boolean)) ((10 offset)))
c{1: 7 ✓ (((n integer)) <- ((instruction-trace-num-children)) ((traces instruction-trace-address-array-address) (space 1)) ((expanded-index integer) (space 1)))
c{1: 8 ✓ (((n integer)) <- ((add)) ((n integer)) ((1 literal)))
c{1: 9 ✓ (((i integer)) <- ((copy)) ((0 literal)))
c{1: 10 ✓ (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((n integer)))
c{1: 11 X (((break-if)) ((done? boolean))) => (((jump-if)) ((done? boolean)) ((4 offset)))
c{1: 12 ✓ (((cursor-row integer) (space 1)) <- ((add)) ((cursor-row integer) (space 1)) ((1 literal)))
c{1: 13 ✓ (((cursor-down)) ((screen terminal-address)))
c{1: 14 ✓ (((i integer)) <- ((add)) ((i integer)) ((1 literal)))
c{1: 15 X (((loop))) => (((jump)) ((-6 offset)))
c{1: 16 ✓ (((reply)))
c{1: 17 ✓ (((at-bottom? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((printed-height integer) (space 1)))
c{1: 18 X (((break-if)) ((at-bottom? boolean))) => (((jump-if)) ((at-bottom? boolean)) ((2 offset)))
c{1: 19 ✓ (((cursor-row integer) (space 1)) <- ((add)) ((cursor-row integer) (space 1)) ((1 literal)))
c{1: 20 ✓ (((cursor-down)) ((screen terminal-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((traces instruction-trace-address-array-address)) <- ((next-input))) -- nil
c{0: 2 (((index integer)) <- ((next-input))) -- nil
c{0: 3 (((tr instruction-trace-address)) <- ((index)) ((traces instruction-trace-address-array-address) (deref)) ((index integer))) -- nil
c{0: 4 (((tr-children trace-address-array-address)) <- ((get)) ((tr instruction-trace-address) (deref)) ((children offset))) -- nil
c{0: 5 (((n integer)) <- ((length)) ((tr-children instruction-trace-address-array-address) (deref))) -- nil
c{0: 6 (((reply)) ((n integer))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((traces instruction-trace-address-array-address)) <- ((next-input)))
c{1: 2 ✓ (((index integer)) <- ((next-input)))
c{1: 3 ✓ (((tr instruction-trace-address)) <- ((index)) ((traces instruction-trace-address-array-address) (deref)) ((index integer)))
c{1: 4 ✓ (((tr-children trace-address-array-address)) <- ((get)) ((tr instruction-trace-address) (deref)) ((children offset)))
c{1: 5 ✓ (((n integer)) <- ((length)) ((tr-children instruction-trace-address-array-address) (deref)))
c{1: 6 ✓ (((reply)) ((n integer)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((x string-address)) <- ((new)) run: main 0: (((1 integer)) <- ((copy)) ((1 literal)))) -- nil
c{0: 2 (((n integer)) <- ((length)) ((x string-address) (deref))) -- nil
c{0: 3 ((($print)) ((p2  literal))) -- nil
c{0: 4 ((($print)) ((n integer))) -- nil
c{0: 5 ((($print)) ((
 literal))) -- nil
c{0: 6 (((s stream-address)) <- ((init-stream)) ((x string-address))) -- nil
c{0: 7 (((traces instruction-trace-address-array-address)) <- ((parse-traces)) ((s stream-address))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((x string-address)) <- ((new)) run: main 0: (((1 integer)) <- ((copy)) ((1 literal))))
c{1: 2 ✓ (((n integer)) <- ((length)) ((x string-address) (deref)))
c{1: 3 ✓ ((($print)) ((p2  literal)))
c{1: 4 ✓ ((($print)) ((n integer)))
c{1: 5 ✓ ((($print)) ((
 literal)))
c{1: 6 ✓ (((s stream-address)) <- ((init-stream)) ((x string-address)))
c{1: 7 ✓ (((traces instruction-trace-address-array-address)) <- ((parse-traces)) ((s stream-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((in trace-address)) <- ((next-input))) -- nil
c{0: 2 (((buf string-address)) <- ((get)) ((in trace-address) (deref)) ((contents offset))) -- nil
c{0: 3 (((result instruction-trace-address)) <- ((new)) ((instruction-trace literal))) -- nil
c{0: 4 (((f1 string-address)) ((rest string-address)) <- ((split-first)) ((buf string-address)) ((  literal))) -- nil
c{0: 5 (((cs string-address-array-address-address)) <- ((get-address)) ((result instruction-trace-address) (deref)) ((call-stack offset))) -- nil
c{0: 6 (((cs string-address-array-address-address) (deref)) <- ((split)) ((f1 string-address)) ((/ literal))) -- nil
c{0: 7 (((p string-address-address)) <- ((get-address)) ((result instruction-trace-address) (deref)) ((pc offset))) -- nil
c{0: 8 (((delim string-address)) <- ((new)) : ) -- nil
c{0: 9 (((p string-address-address) (deref)) ((rest string-address)) <- ((split-first-at-substring)) ((rest string-address)) ((delim string-address))) -- nil
c{0: 10 (((inst string-address-address)) <- ((get-address)) ((result instruction-trace-address) (deref)) ((instruction offset))) -- nil
c{0: 11 (((inst string-address-address) (deref)) <- ((copy)) ((rest string-address))) -- nil
c{0: 12 (((reply)) ((result instruction-trace-address))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((in trace-address)) <- ((next-input)))
c{1: 2 ✓ (((buf string-address)) <- ((get)) ((in trace-address) (deref)) ((contents offset)))
c{1: 3 ✓ (((result instruction-trace-address)) <- ((new)) ((instruction-trace literal)))
c{1: 4 ✓ (((f1 string-address)) ((rest string-address)) <- ((split-first)) ((buf string-address)) ((  literal)))
c{1: 5 ✓ (((cs string-address-array-address-address)) <- ((get-address)) ((result instruction-trace-address) (deref)) ((call-stack offset)))
c{1: 6 ✓ (((cs string-address-array-address-address) (deref)) <- ((split)) ((f1 string-address)) ((/ literal)))
c{1: 7 ✓ (((p string-address-address)) <- ((get-address)) ((result instruction-trace-address) (deref)) ((pc offset)))
c{1: 8 ✓ (((delim string-address)) <- ((new)) : )
c{1: 9 ✓ (((p string-address-address) (deref)) ((rest string-address)) <- ((split-first-at-substring)) ((rest string-address)) ((delim string-address)))
c{1: 10 ✓ (((inst string-address-address)) <- ((get-address)) ((result instruction-trace-address) (deref)) ((instruction offset)))
c{1: 11 ✓ (((inst string-address-address) (deref)) <- ((copy)) ((rest string-address)))
c{1: 12 ✓ (((reply)) ((result instruction-trace-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((in string-address)) <- ((next-input))) -- nil
c{0: 2 (((result trace-address)) <- ((new)) ((trace literal))) -- nil
c{0: 3 (((delim string-address)) <- ((new)) : ) -- nil
c{0: 4 (((first string-address)) ((rest string-address)) <- ((split-first-at-substring)) ((in string-address)) ((delim string-address))) -- nil
c{0: 5 (((l string-address-address)) <- ((get-address)) ((result trace-address) (deref)) ((label offset))) -- nil
c{0: 6 (((l string-address-address) (deref)) <- ((copy)) ((first string-address))) -- nil
c{0: 7 (((c string-address-address)) <- ((get-address)) ((result trace-address) (deref)) ((contents offset))) -- nil
c{0: 8 (((c string-address-address) (deref)) <- ((copy)) ((rest string-address))) -- nil
c{0: 9 (((reply)) ((result trace-address))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((in string-address)) <- ((next-input)))
c{1: 2 ✓ (((result trace-address)) <- ((new)) ((trace literal)))
c{1: 3 ✓ (((delim string-address)) <- ((new)) : )
c{1: 4 ✓ (((first string-address)) ((rest string-address)) <- ((split-first-at-substring)) ((in string-address)) ((delim string-address)))
c{1: 5 ✓ (((l string-address-address)) <- ((get-address)) ((result trace-address) (deref)) ((label offset)))
c{1: 6 ✓ (((l string-address-address) (deref)) <- ((copy)) ((first string-address)))
c{1: 7 ✓ (((c string-address-address)) <- ((get-address)) ((result trace-address) (deref)) ((contents offset)))
c{1: 8 ✓ (((c string-address-address) (deref)) <- ((copy)) ((rest string-address)))
c{1: 9 ✓ (((reply)) ((result trace-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((in stream-address)) <- ((next-input))) -- nil
c{0: 2 (((result buffer-address)) <- ((init-buffer)) ((30 literal))) -- nil
c{0: 3 (((curr-tail instruction-trace-address)) <- ((copy)) ((nil literal))) -- nil
c{0: 4 (((ch buffer-address)) <- ((init-buffer)) ((5 literal))) -- nil
c{0: 5 (((run string-address) (const)) <- ((new)) run) -- nil
c{0: 6 next-line -- ((open 6))
c{0: 7 (((done? boolean)) <- ((end-of-stream?)) ((in stream-address))) -- ((open 6))
c{0: 8 (((break-if)) ((done? boolean))) -- ((open 6))
c{0: 9 (((line string-address)) <- ((read-line)) ((in stream-address))) -- ((open 6))
c{0: 10 (((f trace-address)) <- ((parse-trace)) ((line string-address))) -- ((open 6))
c{0: 11 (((l string-address)) <- ((get)) ((f trace-address) (deref)) ((label offset))) -- ((open 6))
c{0: 12 (((inst? boolean)) <- ((string-equal)) ((l string-address)) ((run string-address) (const))) -- ((open 12) (open 6))
c{0: 13 (((break-unless)) ((inst? boolean))) -- ((open 12) (open 6))
c{0: 14 (((break-unless)) ((curr-tail instruction-trace-address))) -- ((open 14) (open 12) (open 6))
c{0: 15 (((c trace-address-array-address-address)) <- ((get-address)) ((curr-tail instruction-trace-address) (deref)) ((children offset))) -- ((open 14) (open 12) (open 6))
c{0: 16 (((c trace-address-array-address-address) (deref)) <- ((to-array)) ((ch buffer-address))) -- ((open 14) (open 12) (open 6))
c{0: 17 (((ch buffer-address)) <- ((init-buffer)) ((5 literal))) -- ((open 14) (open 12) (open 6))
c{0: 18 (((curr-tail instruction-trace-address)) <- ((parse-instruction-trace)) ((f trace-address))) -- ((close 18) (open 14) (open 12) (open 6))
c{0: 19 (((result buffer-address)) <- ((append)) ((result buffer-address)) ((curr-tail instruction-trace-address))) -- ((close 18) (open 14) (open 12) (open 6))
c{0: 20 (((jump)) ((next-line offset))) -- ((close 18) (open 14) (open 12) (open 6))
c{0: 21 (((loop-unless)) ((curr-tail instruction-trace-address))) -- ((close 21) (close 18) (open 14) (open 12) (open 6))
c{0: 22 (((ch buffer-address)) <- ((append)) ((ch buffer-address)) ((f trace-address))) -- ((close 21) (close 18) (open 14) (open 12) (open 6))
c{0: 23 (((loop))) -- ((close 21) (close 18) (open 14) (open 12) (open 6))
c{0: 24 (((break-unless)) ((curr-tail instruction-trace-address))) -- ((open 24) (close 24) (close 21) (close 18) (open 14) (open 12) (open 6))
c{0: 25 (((c trace-address-array-address-address)) <- ((get-address)) ((curr-tail instruction-trace-address) (deref)) ((children offset))) -- ((open 24) (close 24) (close 21) (close 18) (open 14) (open 12) (open 6))
c{0: 26 (((c trace-address-array-address-address) (deref)) <- ((to-array)) ((ch buffer-address))) -- ((open 24) (close 24) (close 21) (close 18) (open 14) (open 12) (open 6))
c{0: 27 (((s instruction-trace-address-array-address)) <- ((to-array)) ((result buffer-address))) -- ((close 27) (open 24) (close 24) (close 21) (close 18) (open 14) (open 12) (open 6))
c{0: 28 (((reply)) ((s instruction-trace-address-array-address))) -- ((close 27) (open 24) (close 24) (close 21) (close 18) (open 14) (open 12) (open 6))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((in stream-address)) <- ((next-input)))
c{1: 2 ✓ (((result buffer-address)) <- ((init-buffer)) ((30 literal)))
c{1: 3 ✓ (((curr-tail instruction-trace-address)) <- ((copy)) ((nil literal)))
c{1: 4 ✓ (((ch buffer-address)) <- ((init-buffer)) ((5 literal)))
c{1: 5 ✓ (((run string-address) (const)) <- ((new)) run)
c{1: 7 ✓ (((done? boolean)) <- ((end-of-stream?)) ((in stream-address)))
c{1: 8 X (((break-if)) ((done? boolean))) => (((jump-if)) ((done? boolean)) ((15 offset)))
c{1: 9 ✓ (((line string-address)) <- ((read-line)) ((in stream-address)))
c{1: 10 ✓ (((f trace-address)) <- ((parse-trace)) ((line string-address)))
c{1: 11 ✓ (((l string-address)) <- ((get)) ((f trace-address) (deref)) ((label offset)))
c{1: 12 ✓ (((inst? boolean)) <- ((string-equal)) ((l string-address)) ((run string-address) (const)))
c{1: 13 X (((break-unless)) ((inst? boolean))) => (((jump-unless)) ((inst? boolean)) ((7 offset)))
c{1: 14 X (((break-unless)) ((curr-tail instruction-trace-address))) => (((jump-unless)) ((curr-tail instruction-trace-address)) ((3 offset)))
c{1: 15 ✓ (((c trace-address-array-address-address)) <- ((get-address)) ((curr-tail instruction-trace-address) (deref)) ((children offset)))
c{1: 16 ✓ (((c trace-address-array-address-address) (deref)) <- ((to-array)) ((ch buffer-address)))
c{1: 17 ✓ (((ch buffer-address)) <- ((init-buffer)) ((5 literal)))
c{1: 18 ✓ (((curr-tail instruction-trace-address)) <- ((parse-instruction-trace)) ((f trace-address)))
c{1: 19 ✓ (((result buffer-address)) <- ((append)) ((result buffer-address)) ((curr-tail instruction-trace-address)))
c{1: 20 ✓ (((jump)) ((next-line offset)))
c{1: 21 X (((loop-unless)) ((curr-tail instruction-trace-address))) => (((jump-unless)) ((curr-tail instruction-trace-address)) ((-16 offset)))
c{1: 22 ✓ (((ch buffer-address)) <- ((append)) ((ch buffer-address)) ((f trace-address)))
c{1: 23 X (((loop))) => (((jump)) ((-18 offset)))
c{1: 24 X (((break-unless)) ((curr-tail instruction-trace-address))) => (((jump-unless)) ((curr-tail instruction-trace-address)) ((2 offset)))
c{1: 25 ✓ (((c trace-address-array-address-address)) <- ((get-address)) ((curr-tail instruction-trace-address) (deref)) ((children offset)))
c{1: 26 ✓ (((c trace-address-array-address-address) (deref)) <- ((to-array)) ((ch buffer-address)))
c{1: 27 ✓ (((s instruction-trace-address-array-address)) <- ((to-array)) ((result buffer-address)))
c{1: 28 ✓ (((reply)) ((s instruction-trace-address-array-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((screen terminal-address)) <- ((next-input))) -- nil
c{0: 2 (((x instruction-trace-address)) <- ((next-input))) -- nil
c{0: 3 (((0 space-address) (names screen-state)) <- ((next-input))) -- nil
c{0: 4 (((clear-line)) ((screen terminal-address))) -- nil
c{0: 5 (((print-character)) ((screen terminal-address)) ((- literal))) -- nil
c{0: 6 (((print-character)) ((screen terminal-address)) ((  literal))) -- nil
c{0: 7 (((c string-address-array-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((call-stack offset))) -- nil
c{0: 8 (((i integer)) <- ((copy)) ((0 literal))) -- nil
c{0: 9 (((len integer)) <- ((length)) ((c string-address-array-address) (deref))) -- nil
c{0: 10 (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((len integer))) -- ((open 10))
c{0: 11 (((break-if)) ((done? boolean))) -- ((open 10))
c{0: 12 (((s string-address)) <- ((index)) ((c string-address-array-address) (deref)) ((i integer))) -- ((open 10))
c{0: 13 (((print-string)) ((screen terminal-address)) ((s string-address))) -- ((open 10))
c{0: 14 (((print-character)) ((screen terminal-address)) ((/ literal))) -- ((open 10))
c{0: 15 (((i integer)) <- ((add)) ((i integer)) ((1 literal))) -- ((open 10))
c{0: 16 (((loop))) -- ((open 10))
c{0: 17 (((print-character)) ((screen terminal-address)) ((  literal))) -- ((close 17) (open 10))
c{0: 18 (((p string-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((pc offset))) -- ((close 17) (open 10))
c{0: 19 (((print-string)) ((screen terminal-address)) ((p string-address))) -- ((close 17) (open 10))
c{0: 20 (((print-character)) ((screen terminal-address)) ((  literal))) -- ((close 17) (open 10))
c{0: 21 (((print-character)) ((screen terminal-address)) ((: literal))) -- ((close 17) (open 10))
c{0: 22 (((print-character)) ((screen terminal-address)) ((  literal))) -- ((close 17) (open 10))
c{0: 23 (((i string-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((instruction offset))) -- ((close 17) (open 10))
c{0: 24 (((print-string)) ((screen terminal-address)) ((i string-address))) -- ((close 17) (open 10))
c{0: 25 (((add-line)) ((0 space-address) (screen-state)) ((screen terminal-address))) -- ((close 17) (open 10))
c{0: 26 (((ch trace-address-array-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((children offset))) -- ((close 17) (open 10))
c{0: 27 (((i integer)) <- ((copy)) ((0 literal))) -- ((close 17) (open 10))
c{0: 28 (((break-if)) ((ch trace-address-array-address))) -- ((open 28) (close 17) (open 10))
c{0: 29 (((reply))) -- ((open 28) (close 17) (open 10))
c{0: 30 (((len integer)) <- ((length)) ((ch trace-address-array-address) (deref))) -- ((close 30) (open 28) (close 17) (open 10))
c{0: 31 (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((len integer))) -- ((open 31) (close 30) (open 28) (close 17) (open 10))
c{0: 32 (((break-if)) ((done? boolean))) -- ((open 31) (close 30) (open 28) (close 17) (open 10))
c{0: 33 (((screen-done? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((screen-height integer) (space 1))) -- ((open 31) (close 30) (open 28) (close 17) (open 10))
c{0: 34 (((break-if)) ((screen-done? boolean))) -- ((open 31) (close 30) (open 28) (close 17) (open 10))
c{0: 35 (((t trace-address)) <- ((index)) ((ch trace-address-array-address) (deref)) ((i integer))) -- ((open 31) (close 30) (open 28) (close 17) (open 10))
c{0: 36 (((print-character)) ((screen terminal-address)) ((  literal))) -- ((open 31) (close 30) (open 28) (close 17) (open 10))
c{0: 37 (((print-character)) ((screen terminal-address)) ((  literal))) -- ((open 31) (close 30) (open 28) (close 17) (open 10))
c{0: 38 (((print-character)) ((screen terminal-address)) ((  literal))) -- ((open 31) (close 30) (open 28) (close 17) (open 10))
c{0: 39 (((print-trace)) ((screen terminal-address)) ((t trace-address))) -- ((open 31) (close 30) (open 28) (close 17) (open 10))
c{0: 40 (((add-line)) ((0 space-address) (screen-state)) ((screen terminal-address))) -- ((open 31) (close 30) (open 28) (close 17) (open 10))
c{0: 41 (((i integer)) <- ((add)) ((i integer)) ((1 literal))) -- ((open 31) (close 30) (open 28) (close 17) (open 10))
c{0: 42 (((loop))) -- ((open 31) (close 30) (open 28) (close 17) (open 10))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((screen terminal-address)) <- ((next-input)))
c{1: 2 ✓ (((x instruction-trace-address)) <- ((next-input)))
c{1: 3 ✓ (((0 space-address) (names screen-state)) <- ((next-input)))
c{1: 4 ✓ (((clear-line)) ((screen terminal-address)))
c{1: 5 ✓ (((print-character)) ((screen terminal-address)) ((- literal)))
c{1: 6 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 7 ✓ (((c string-address-array-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((call-stack offset)))
c{1: 8 ✓ (((i integer)) <- ((copy)) ((0 literal)))
c{1: 9 ✓ (((len integer)) <- ((length)) ((c string-address-array-address) (deref)))
c{1: 10 ✓ (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((len integer)))
c{1: 11 X (((break-if)) ((done? boolean))) => (((jump-if)) ((done? boolean)) ((5 offset)))
c{1: 12 ✓ (((s string-address)) <- ((index)) ((c string-address-array-address) (deref)) ((i integer)))
c{1: 13 ✓ (((print-string)) ((screen terminal-address)) ((s string-address)))
c{1: 14 ✓ (((print-character)) ((screen terminal-address)) ((/ literal)))
c{1: 15 ✓ (((i integer)) <- ((add)) ((i integer)) ((1 literal)))
c{1: 16 X (((loop))) => (((jump)) ((-7 offset)))
c{1: 17 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 18 ✓ (((p string-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((pc offset)))
c{1: 19 ✓ (((print-string)) ((screen terminal-address)) ((p string-address)))
c{1: 20 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 21 ✓ (((print-character)) ((screen terminal-address)) ((: literal)))
c{1: 22 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 23 ✓ (((i string-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((instruction offset)))
c{1: 24 ✓ (((print-string)) ((screen terminal-address)) ((i string-address)))
c{1: 25 ✓ (((add-line)) ((0 space-address) (screen-state)) ((screen terminal-address)))
c{1: 26 ✓ (((ch trace-address-array-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((children offset)))
c{1: 27 ✓ (((i integer)) <- ((copy)) ((0 literal)))
c{1: 28 X (((break-if)) ((ch trace-address-array-address))) => (((jump-if)) ((ch trace-address-array-address)) ((1 offset)))
c{1: 29 ✓ (((reply)))
c{1: 30 ✓ (((len integer)) <- ((length)) ((ch trace-address-array-address) (deref)))
c{1: 31 ✓ (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((len integer)))
c{1: 32 X (((break-if)) ((done? boolean))) => (((jump-if)) ((done? boolean)) ((10 offset)))
c{1: 33 ✓ (((screen-done? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((screen-height integer) (space 1)))
c{1: 34 X (((break-if)) ((screen-done? boolean))) => (((jump-if)) ((screen-done? boolean)) ((8 offset)))
c{1: 35 ✓ (((t trace-address)) <- ((index)) ((ch trace-address-array-address) (deref)) ((i integer)))
c{1: 36 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 37 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 38 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 39 ✓ (((print-trace)) ((screen terminal-address)) ((t trace-address)))
c{1: 40 ✓ (((add-line)) ((0 space-address) (screen-state)) ((screen terminal-address)))
c{1: 41 ✓ (((i integer)) <- ((add)) ((i integer)) ((1 literal)))
c{1: 42 X (((loop))) => (((jump)) ((-12 offset)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((screen terminal)) <- ((next-input))) -- nil
c{0: 2 (((x instruction-trace-address)) <- ((next-input))) -- nil
c{0: 3 (((screen-state space-address)) <- ((next-input))) -- nil
c{0: 4 (((clear-line)) ((screen terminal-address))) -- nil
c{0: 5 (((print-character)) ((screen terminal-address)) ((+ literal))) -- nil
c{0: 6 (((print-character)) ((screen terminal-address)) ((  literal))) -- nil
c{0: 7 (((c string-address-array-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((call-stack offset))) -- nil
c{0: 8 (((i integer)) <- ((copy)) ((0 literal))) -- nil
c{0: 9 (((len integer)) <- ((length)) ((c string-address-array-address) (deref))) -- nil
c{0: 10 (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((len integer))) -- ((open 10))
c{0: 11 (((break-if)) ((done? boolean))) -- ((open 10))
c{0: 12 (((s string-address)) <- ((index)) ((c string-address-array-address) (deref)) ((i integer))) -- ((open 10))
c{0: 13 (((print-string)) ((screen terminal-address)) ((s string-address))) -- ((open 10))
c{0: 14 (((print-character)) ((screen terminal-address)) ((/ literal))) -- ((open 10))
c{0: 15 (((i integer)) <- ((add)) ((i integer)) ((1 literal))) -- ((open 10))
c{0: 16 (((loop))) -- ((open 10))
c{0: 17 (((print-character)) ((screen terminal-address)) ((  literal))) -- ((close 17) (open 10))
c{0: 18 (((p string-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((pc offset))) -- ((close 17) (open 10))
c{0: 19 (((print-string)) ((screen terminal-address)) ((p string-address))) -- ((close 17) (open 10))
c{0: 20 (((print-character)) ((screen terminal-address)) ((  literal))) -- ((close 17) (open 10))
c{0: 21 (((print-character)) ((screen terminal-address)) ((: literal))) -- ((close 17) (open 10))
c{0: 22 (((print-character)) ((screen terminal-address)) ((  literal))) -- ((close 17) (open 10))
c{0: 23 (((i string-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((instruction offset))) -- ((close 17) (open 10))
c{0: 24 (((print-string)) ((screen terminal-address)) ((i string-address))) -- ((close 17) (open 10))
c{0: 25 (((add-line)) ((screen-state space-address)) ((screen terminal-address))) -- ((close 17) (open 10))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((screen terminal)) <- ((next-input)))
c{1: 2 ✓ (((x instruction-trace-address)) <- ((next-input)))
c{1: 3 ✓ (((screen-state space-address)) <- ((next-input)))
c{1: 4 ✓ (((clear-line)) ((screen terminal-address)))
c{1: 5 ✓ (((print-character)) ((screen terminal-address)) ((+ literal)))
c{1: 6 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 7 ✓ (((c string-address-array-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((call-stack offset)))
c{1: 8 ✓ (((i integer)) <- ((copy)) ((0 literal)))
c{1: 9 ✓ (((len integer)) <- ((length)) ((c string-address-array-address) (deref)))
c{1: 10 ✓ (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((len integer)))
c{1: 11 X (((break-if)) ((done? boolean))) => (((jump-if)) ((done? boolean)) ((5 offset)))
c{1: 12 ✓ (((s string-address)) <- ((index)) ((c string-address-array-address) (deref)) ((i integer)))
c{1: 13 ✓ (((print-string)) ((screen terminal-address)) ((s string-address)))
c{1: 14 ✓ (((print-character)) ((screen terminal-address)) ((/ literal)))
c{1: 15 ✓ (((i integer)) <- ((add)) ((i integer)) ((1 literal)))
c{1: 16 X (((loop))) => (((jump)) ((-7 offset)))
c{1: 17 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 18 ✓ (((p string-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((pc offset)))
c{1: 19 ✓ (((print-string)) ((screen terminal-address)) ((p string-address)))
c{1: 20 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 21 ✓ (((print-character)) ((screen terminal-address)) ((: literal)))
c{1: 22 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 23 ✓ (((i string-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((instruction offset)))
c{1: 24 ✓ (((print-string)) ((screen terminal-address)) ((i string-address)))
c{1: 25 ✓ (((add-line)) ((screen-state space-address)) ((screen terminal-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((screen terminal-address)) <- ((next-input))) -- nil
c{0: 2 (((x trace-address)) <- ((next-input))) -- nil
c{0: 3 (((l string-address)) <- ((get)) ((x trace-address) (deref)) ((label offset))) -- nil
c{0: 4 (((clear-line)) ((screen terminal-address))) -- nil
c{0: 5 (((print-string)) ((screen terminal-address)) ((l string-address))) -- nil
c{0: 6 (((print-character)) ((screen terminal-address)) ((  literal))) -- nil
c{0: 7 (((print-character)) ((screen terminal-address)) ((: literal))) -- nil
c{0: 8 (((print-character)) ((screen terminal-address)) ((  literal))) -- nil
c{0: 9 (((c string-address)) <- ((get)) ((x trace-address) (deref)) ((contents offset))) -- nil
c{0: 10 (((print-string)) ((screen terminal-address)) ((c string-address))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((screen terminal-address)) <- ((next-input)))
c{1: 2 ✓ (((x trace-address)) <- ((next-input)))
c{1: 3 ✓ (((l string-address)) <- ((get)) ((x trace-address) (deref)) ((label offset)))
c{1: 4 ✓ (((clear-line)) ((screen terminal-address)))
c{1: 5 ✓ (((print-string)) ((screen terminal-address)) ((l string-address)))
c{1: 6 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 7 ✓ (((print-character)) ((screen terminal-address)) ((: literal)))
c{1: 8 ✓ (((print-character)) ((screen terminal-address)) ((  literal)))
c{1: 9 ✓ (((c string-address)) <- ((get)) ((x trace-address) (deref)) ((contents offset)))
c{1: 10 ✓ (((print-string)) ((screen terminal-address)) ((c string-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((0 space-address) (names screen-state)) <- ((next-input))) -- nil
c{0: 2 (((screen terminal-address)) <- ((next-input))) -- nil
c{0: 3 (((print-traces-collapsed-from)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((0 literal) (from))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((0 space-address) (names screen-state)) <- ((next-input)))
c{1: 2 ✓ (((screen terminal-address)) <- ((next-input)))
c{1: 3 ✓ (((print-traces-collapsed-from)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((0 literal) (from)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((0 space-address) (names screen-state)) <- ((next-input))) -- nil
c{0: 2 (((screen terminal-address)) <- ((next-input))) -- nil
c{0: 3 (((trace-index integer)) <- ((next-input))) -- nil
c{0: 4 (((len integer)) <- ((length)) ((traces instruction-trace-address-array-address) (space 1) (deref))) -- nil
c{0: 5 (((height integer)) <- ((min)) ((len integer)) ((screen-height integer) (space 1))) -- nil
c{0: 6 (((trace-done? boolean)) <- ((greater-or-equal)) ((trace-index integer)) ((len integer))) -- ((open 6))
c{0: 7 (((break-if)) ((trace-done? boolean))) -- ((open 6))
c{0: 8 (((screen-done? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((screen-height integer) (space 1))) -- ((open 6))
c{0: 9 (((break-if)) ((screen-done? boolean))) -- ((open 6))
c{0: 10 (((tr instruction-trace-address)) <- ((index)) ((traces instruction-trace-address-array-address) (space 1) (deref)) ((trace-index integer))) -- ((open 6))
c{0: 11 (((print-instruction-trace-collapsed)) ((screen terminal-address)) ((tr instruction-trace-address)) ((0 space-address) (screen-state))) -- ((open 6))
c{0: 12 (((trace-index integer)) <- ((add)) ((trace-index integer)) ((1 literal))) -- ((open 6))
c{0: 13 (((loop))) -- ((open 6))
c{0: 14 (((done? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((app-height integer) (space 1))) -- ((open 14) (close 14) (open 6))
c{0: 15 (((break-if)) ((done? boolean))) -- ((open 14) (close 14) (open 6))
c{0: 16 (((clear-line)) ((screen terminal-address))) -- ((open 14) (close 14) (open 6))
c{0: 17 (((down)) ((0 space-address) (screen-state)) ((screen terminal-address))) -- ((open 14) (close 14) (open 6))
c{0: 18 (((loop))) -- ((open 14) (close 14) (open 6))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((0 space-address) (names screen-state)) <- ((next-input)))
c{1: 2 ✓ (((screen terminal-address)) <- ((next-input)))
c{1: 3 ✓ (((trace-index integer)) <- ((next-input)))
c{1: 4 ✓ (((len integer)) <- ((length)) ((traces instruction-trace-address-array-address) (space 1) (deref)))
c{1: 5 ✓ (((height integer)) <- ((min)) ((len integer)) ((screen-height integer) (space 1)))
c{1: 6 ✓ (((trace-done? boolean)) <- ((greater-or-equal)) ((trace-index integer)) ((len integer)))
c{1: 7 X (((break-if)) ((trace-done? boolean))) => (((jump-if)) ((trace-done? boolean)) ((6 offset)))
c{1: 8 ✓ (((screen-done? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((screen-height integer) (space 1)))
c{1: 9 X (((break-if)) ((screen-done? boolean))) => (((jump-if)) ((screen-done? boolean)) ((4 offset)))
c{1: 10 ✓ (((tr instruction-trace-address)) <- ((index)) ((traces instruction-trace-address-array-address) (space 1) (deref)) ((trace-index integer)))
c{1: 11 ✓ (((print-instruction-trace-collapsed)) ((screen terminal-address)) ((tr instruction-trace-address)) ((0 space-address) (screen-state)))
c{1: 12 ✓ (((trace-index integer)) <- ((add)) ((trace-index integer)) ((1 literal)))
c{1: 13 X (((loop))) => (((jump)) ((-8 offset)))
c{1: 14 ✓ (((done? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((app-height integer) (space 1)))
c{1: 15 X (((break-if)) ((done? boolean))) => (((jump-if)) ((done? boolean)) ((3 offset)))
c{1: 16 ✓ (((clear-line)) ((screen terminal-address)))
c{1: 17 ✓ (((down)) ((0 space-address) (screen-state)) ((screen terminal-address)))
c{1: 18 X (((loop))) => (((jump)) ((-5 offset)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((0 space-address) (names screen-state)) <- ((next-input))) -- nil
c{0: 2 (((k keyboard-address)) <- ((next-input))) -- nil
c{0: 3 (((screen terminal-address)) <- ((next-input))) -- nil
c{0: 4 (((c character)) <- ((read-key)) ((k keyboard-address)) ((silent literal) (terminal))) -- nil
c{0: 5 (((break-if)) ((c character))) -- ((open 5))
c{0: 6 (((reply)) ((nil literal))) -- ((open 5))
c{0: 7 (((q-pressed? boolean)) <- ((equal)) ((c character)) ((q literal))) -- ((open 7) (close 7) (open 5))
c{0: 8 (((end-of-fake-keyboard-input? boolean)) <- ((equal)) ((c character)) ((  literal))) -- ((open 7) (close 7) (open 5))
c{0: 9 (((quit? boolean)) <- ((or)) ((q-pressed? boolean)) ((end-of-fake-keyboard-input? boolean))) -- ((open 7) (close 7) (open 5))
c{0: 10 (((break-unless)) ((quit? boolean))) -- ((open 7) (close 7) (open 5))
c{0: 11 (((reply)) ((t literal))) -- ((open 7) (close 7) (open 5))
c{0: 12 (((up? boolean)) <- ((equal)) ((c character)) ((up literal))) -- ((open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 13 (((k? boolean)) <- ((equal)) ((c character)) ((k literal))) -- ((open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 14 (((up? boolean)) <- ((or)) ((up? boolean)) ((k? boolean))) -- ((open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 15 (((break-unless)) ((up? boolean))) -- ((open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 16 (((up)) ((0 space-address) (screen-state)) ((screen terminal-address))) -- ((open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 17 (((reply)) ((nil literal))) -- ((open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 18 (((down? boolean)) <- ((equal)) ((c character)) ((down literal))) -- ((open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 19 (((j? boolean)) <- ((equal)) ((c character)) ((j literal))) -- ((open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 20 (((down? boolean)) <- ((or)) ((down? boolean)) ((j? boolean))) -- ((open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 21 (((break-unless)) ((down? boolean))) -- ((open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 22 (((down)) ((0 space-address) (screen-state)) ((screen terminal-address))) -- ((open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 23 (((reply)) ((nil literal))) -- ((open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 24 (((toggle? boolean)) <- ((equal)) ((c character)) ((
 literal))) -- ((open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 25 (((break-unless)) ((toggle? boolean))) -- ((open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 26 (((original-cursor-row integer)) <- ((copy)) ((cursor-row integer) (space 1))) -- ((open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 27 (((original-trace-index integer)) <- ((cursor-row-to-trace-index)) ((0 space-address) (screen-state)) ((original-cursor-row integer))) -- ((open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 28 (((expanded? boolean)) <- ((greater-or-equal)) ((expanded-index integer) (space 1)) ((0 literal))) -- ((open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 29 (((break-unless)) ((expanded? boolean))) -- ((open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 30 (((at-expanded? boolean)) <- ((equal)) ((cursor-row integer) (space 1)) ((expanded-index integer) (space 1))) -- ((open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 31 (((break-unless)) ((at-expanded? boolean))) -- ((open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 32 (((expanded-index integer) (space 1)) <- ((copy)) ((-1 literal))) -- ((open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 33 (((print-traces-collapsed-from)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((cursor-row integer) (space 1))) -- ((open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 34 (((back-to)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((original-cursor-row integer))) -- ((open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 35 (((reply))) -- ((open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 36 (((below-expanded? boolean)) <- ((greater-than)) ((cursor-row integer) (space 1)) ((expanded-index integer) (space 1))) -- ((open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 37 (((break-unless)) ((below-expanded? boolean))) -- ((open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 38 (((at-expanded? boolean)) <- ((equal)) ((cursor-row integer) (space 1)) ((expanded-index integer) (space 1))) -- ((open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 39 (((break-if)) ((at-expanded? boolean))) -- ((open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 40 (((up)) ((0 space-address)) ((screen terminal-address))) -- ((open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 41 (((loop))) -- ((open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 42 (((done? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((original-trace-index integer))) -- ((open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 43 (((break-if)) ((done? boolean))) -- ((open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 44 (((tr instruction-trace-address)) <- ((index)) ((traces instruction-trace-address-array-address) (space 1) (deref)) ((cursor-row integer) (space 1))) -- ((open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 45 (((print-instruction-trace-collapsed)) ((screen terminal-address)) ((tr instruction-trace-address)) ((0 space-address) (screen-state))) -- ((open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 46 (((loop))) -- ((open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 47 (((expanded-index integer) (space 1)) <- ((copy)) ((original-trace-index integer))) -- ((close 47) (close 47) (close 47) (open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 48 (((tr instruction-trace-address)) <- ((index)) ((traces instruction-trace-address-array-address) (space 1) (deref)) ((original-trace-index integer))) -- ((close 47) (close 47) (close 47) (open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 49 (((print-instruction-trace)) ((screen terminal-address)) ((tr instruction-trace-address)) ((0 space-address) (screen-state))) -- ((close 47) (close 47) (close 47) (open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 50 (((next-index integer)) <- ((add)) ((original-trace-index integer)) ((1 literal))) -- ((close 47) (close 47) (close 47) (open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 51 (((print-traces-collapsed-from)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((next-index integer))) -- ((close 47) (close 47) (close 47) (open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 52 (((back-to)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((original-trace-index integer))) -- ((close 47) (close 47) (close 47) (open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 53 (((reply)) ((nil literal))) -- ((close 47) (close 47) (close 47) (open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{0: 54 (((reply)) ((nil literal))) -- ((close 54) (close 47) (close 47) (close 47) (open 42) (close 42) (open 38) (open 36) (close 36) (open 30) (open 28) (open 24) (close 24) (open 18) (close 18) (open 12) (close 12) (open 7) (close 7) (open 5))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((0 space-address) (names screen-state)) <- ((next-input)))
c{1: 2 ✓ (((k keyboard-address)) <- ((next-input)))
c{1: 3 ✓ (((screen terminal-address)) <- ((next-input)))
c{1: 4 ✓ (((c character)) <- ((read-key)) ((k keyboard-address)) ((silent literal) (terminal)))
c{1: 5 X (((break-if)) ((c character))) => (((jump-if)) ((c character)) ((1 offset)))
c{1: 6 ✓ (((reply)) ((nil literal)))
c{1: 7 ✓ (((q-pressed? boolean)) <- ((equal)) ((c character)) ((q literal)))
c{1: 8 ✓ (((end-of-fake-keyboard-input? boolean)) <- ((equal)) ((c character)) ((  literal)))
c{1: 9 ✓ (((quit? boolean)) <- ((or)) ((q-pressed? boolean)) ((end-of-fake-keyboard-input? boolean)))
c{1: 10 X (((break-unless)) ((quit? boolean))) => (((jump-unless)) ((quit? boolean)) ((1 offset)))
c{1: 11 ✓ (((reply)) ((t literal)))
c{1: 12 ✓ (((up? boolean)) <- ((equal)) ((c character)) ((up literal)))
c{1: 13 ✓ (((k? boolean)) <- ((equal)) ((c character)) ((k literal)))
c{1: 14 ✓ (((up? boolean)) <- ((or)) ((up? boolean)) ((k? boolean)))
c{1: 15 X (((break-unless)) ((up? boolean))) => (((jump-unless)) ((up? boolean)) ((2 offset)))
c{1: 16 ✓ (((up)) ((0 space-address) (screen-state)) ((screen terminal-address)))
c{1: 17 ✓ (((reply)) ((nil literal)))
c{1: 18 ✓ (((down? boolean)) <- ((equal)) ((c character)) ((down literal)))
c{1: 19 ✓ (((j? boolean)) <- ((equal)) ((c character)) ((j literal)))
c{1: 20 ✓ (((down? boolean)) <- ((or)) ((down? boolean)) ((j? boolean)))
c{1: 21 X (((break-unless)) ((down? boolean))) => (((jump-unless)) ((down? boolean)) ((2 offset)))
c{1: 22 ✓ (((down)) ((0 space-address) (screen-state)) ((screen terminal-address)))
c{1: 23 ✓ (((reply)) ((nil literal)))
c{1: 24 ✓ (((toggle? boolean)) <- ((equal)) ((c character)) ((
 literal)))
c{1: 25 X (((break-unless)) ((toggle? boolean))) => (((jump-unless)) ((toggle? boolean)) ((28 offset)))
c{1: 26 ✓ (((original-cursor-row integer)) <- ((copy)) ((cursor-row integer) (space 1)))
c{1: 27 ✓ (((original-trace-index integer)) <- ((cursor-row-to-trace-index)) ((0 space-address) (screen-state)) ((original-cursor-row integer)))
c{1: 28 ✓ (((expanded? boolean)) <- ((greater-or-equal)) ((expanded-index integer) (space 1)) ((0 literal)))
c{1: 29 X (((break-unless)) ((expanded? boolean))) => (((jump-unless)) ((expanded? boolean)) ((17 offset)))
c{1: 30 ✓ (((at-expanded? boolean)) <- ((equal)) ((cursor-row integer) (space 1)) ((expanded-index integer) (space 1)))
c{1: 31 X (((break-unless)) ((at-expanded? boolean))) => (((jump-unless)) ((at-expanded? boolean)) ((4 offset)))
c{1: 32 ✓ (((expanded-index integer) (space 1)) <- ((copy)) ((-1 literal)))
c{1: 33 ✓ (((print-traces-collapsed-from)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((cursor-row integer) (space 1)))
c{1: 34 ✓ (((back-to)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((original-cursor-row integer)))
c{1: 35 ✓ (((reply)))
c{1: 36 ✓ (((below-expanded? boolean)) <- ((greater-than)) ((cursor-row integer) (space 1)) ((expanded-index integer) (space 1)))
c{1: 37 X (((break-unless)) ((below-expanded? boolean))) => (((jump-unless)) ((below-expanded? boolean)) ((9 offset)))
c{1: 38 ✓ (((at-expanded? boolean)) <- ((equal)) ((cursor-row integer) (space 1)) ((expanded-index integer) (space 1)))
c{1: 39 X (((break-if)) ((at-expanded? boolean))) => (((jump-if)) ((at-expanded? boolean)) ((2 offset)))
c{1: 40 ✓ (((up)) ((0 space-address)) ((screen terminal-address)))
c{1: 41 X (((loop))) => (((jump)) ((-4 offset)))
c{1: 42 ✓ (((done? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((original-trace-index integer)))
c{1: 43 X (((break-if)) ((done? boolean))) => (((jump-if)) ((done? boolean)) ((3 offset)))
c{1: 44 ✓ (((tr instruction-trace-address)) <- ((index)) ((traces instruction-trace-address-array-address) (space 1) (deref)) ((cursor-row integer) (space 1)))
c{1: 45 ✓ (((print-instruction-trace-collapsed)) ((screen terminal-address)) ((tr instruction-trace-address)) ((0 space-address) (screen-state)))
c{1: 46 X (((loop))) => (((jump)) ((-5 offset)))
c{1: 47 ✓ (((expanded-index integer) (space 1)) <- ((copy)) ((original-trace-index integer)))
c{1: 48 ✓ (((tr instruction-trace-address)) <- ((index)) ((traces instruction-trace-address-array-address) (space 1) (deref)) ((original-trace-index integer)))
c{1: 49 ✓ (((print-instruction-trace)) ((screen terminal-address)) ((tr instruction-trace-address)) ((0 space-address) (screen-state)))
c{1: 50 ✓ (((next-index integer)) <- ((add)) ((original-trace-index integer)) ((1 literal)))
c{1: 51 ✓ (((print-traces-collapsed-from)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((next-index integer)))
c{1: 52 ✓ (((back-to)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((original-trace-index integer)))
c{1: 53 ✓ (((reply)) ((nil literal)))
c{1: 54 ✓ (((reply)) ((nil literal)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((traces instruction-trace-address-array-address)) <- ((next-input))) -- nil
c{0: 2 (((screen-height integer)) <- ((next-input))) -- nil
c{0: 3 (((app-height integer)) <- ((copy)) ((0 literal))) -- nil
c{0: 4 (((printed-height integer)) <- ((copy)) ((0 literal))) -- nil
c{0: 5 (((cursor-row integer)) <- ((copy)) ((0 literal))) -- nil
c{0: 6 (((expanded-index integer)) <- ((copy)) ((-1 literal))) -- nil
c{0: 7 (((reply)) ((default-space space-address))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((traces instruction-trace-address-array-address)) <- ((next-input)))
c{1: 2 ✓ (((screen-height integer)) <- ((next-input)))
c{1: 3 ✓ (((app-height integer)) <- ((copy)) ((0 literal)))
c{1: 4 ✓ (((printed-height integer)) <- ((copy)) ((0 literal)))
c{1: 5 ✓ (((cursor-row integer)) <- ((copy)) ((0 literal)))
c{1: 6 ✓ (((expanded-index integer)) <- ((copy)) ((-1 literal)))
c{1: 7 ✓ (((reply)) ((default-space space-address)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((0 space-address) (names screen-state)) <- ((next-input))) -- nil
c{0: 2 (((screen terminal-address)) <- ((next-input))) -- nil
c{0: 3 (((at-bottom? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((printed-height integer) (space 1))) -- ((open 3))
c{0: 4 (((break-if)) ((at-bottom? boolean))) -- ((open 3))
c{0: 5 (((down)) ((0 space-address)) ((screen terminal-address))) -- ((open 3))
c{0: 6 (((loop))) -- ((open 3))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((0 space-address) (names screen-state)) <- ((next-input)))
c{1: 2 ✓ (((screen terminal-address)) <- ((next-input)))
c{1: 3 ✓ (((at-bottom? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((printed-height integer) (space 1)))
c{1: 4 X (((break-if)) ((at-bottom? boolean))) => (((jump-if)) ((at-bottom? boolean)) ((2 offset)))
c{1: 5 ✓ (((down)) ((0 space-address)) ((screen terminal-address)))
c{1: 6 X (((loop))) => (((jump)) ((-4 offset)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) -- nil
c{0: 1 (((0 space-address) (names screen-state)) <- ((next-input))) -- nil
c{0: 2 (((screen terminal-address)) <- ((next-input))) -- nil
c{0: 3 (((no-expanded? boolean)) <- ((less-than)) ((expanded-index integer) (space 1)) ((0 literal))) -- ((open 3))
c{0: 4 (((break-if)) ((no-expanded? boolean))) -- ((open 3))
c{0: 5 (((n integer)) <- ((instruction-trace-num-children)) ((traces instruction-trace-address-array-address) (space 1)) ((expanded-index integer) (space 1))) -- ((open 3))
c{0: 6 (((n integer)) <- ((add)) ((n integer)) ((1 literal))) -- ((open 3))
c{0: 7 (((cursor-row-below-expanded integer)) <- ((add)) ((expanded-index integer) (space 1)) ((n integer))) -- ((open 3))
c{0: 8 (((just-below-expanded? boolean)) <- ((equal)) ((cursor-row integer) (space 1)) ((cursor-row-below-expanded integer))) -- ((open 3))
c{0: 9 (((break-unless)) ((just-below-expanded? boolean))) -- ((open 3))
c{0: 10 (((i integer)) <- ((copy)) ((0 literal))) -- ((open 3))
c{0: 11 (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((n integer))) -- ((open 11) (open 3))
c{0: 12 (((break-if)) ((done? boolean))) -- ((open 11) (open 3))
c{0: 13 (((cursor-row integer) (space 1)) <- ((subtract)) ((cursor-row integer) (space 1)) ((1 literal))) -- ((open 11) (open 3))
c{0: 14 (((cursor-up)) ((screen terminal-address))) -- ((open 11) (open 3))
c{0: 15 (((i integer)) <- ((add)) ((i integer)) ((1 literal))) -- ((open 11) (open 3))
c{0: 16 (((loop))) -- ((open 11) (open 3))
c{0: 17 (((reply))) -- ((close 17) (open 11) (open 3))
c{0: 18 (((at-top? boolean)) <- ((lesser-or-equal)) ((cursor-row integer) (space 1)) ((0 literal))) -- ((open 18) (close 18) (close 17) (open 11) (open 3))
c{0: 19 (((break-if)) ((at-top? boolean))) -- ((open 18) (close 18) (close 17) (open 11) (open 3))
c{0: 20 (((cursor-row integer) (space 1)) <- ((subtract)) ((cursor-row integer) (space 1)) ((1 literal))) -- ((open 18) (close 18) (close 17) (open 11) (open 3))
c{0: 21 (((cursor-up)) ((screen terminal-address))) -- ((open 18) (close 18) (close 17) (open 11) (open 3))
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
c{1: 1 ✓ (((0 space-address) (names screen-state)) <- ((next-input)))
c{1: 2 ✓ (((screen terminal-address)) <- ((next-input)))
c{1: 3 ✓ (((no-expanded? boolean)) <- ((less-than)) ((expanded-index integer) (space 1)) ((0 literal)))
c{1: 4 X (((break-if)) ((no-expanded? boolean))) => (((jump-if)) ((no-expanded? boolean)) ((13 offset)))
c{1: 5 ✓ (((n integer)) <- ((instruction-trace-num-children)) ((traces instruction-trace-address-array-address) (space 1)) ((expanded-index integer) (space 1)))
c{1: 6 ✓ (((n integer)) <- ((add)) ((n integer)) ((1 literal)))
c{1: 7 ✓ (((cursor-row-below-expanded integer)) <- ((add)) ((expanded-index integer) (space 1)) ((n integer)))
c{1: 8 ✓ (((just-below-expanded? boolean)) <- ((equal)) ((cursor-row integer) (space 1)) ((cursor-row-below-expanded integer)))
c{1: 9 X (((break-unless)) ((just-below-expanded? boolean))) => (((jump-unless)) ((just-below-expanded? boolean)) ((8 offset)))
c{1: 10 ✓ (((i integer)) <- ((copy)) ((0 literal)))
c{1: 11 ✓ (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((n integer)))
c{1: 12 X (((break-if)) ((done? boolean))) => (((jump-if)) ((done? boolean)) ((4 offset)))
c{1: 13 ✓ (((cursor-row integer) (space 1)) <- ((subtract)) ((cursor-row integer) (space 1)) ((1 literal)))
c{1: 14 ✓ (((cursor-up)) ((screen terminal-address)))
c{1: 15 ✓ (((i integer)) <- ((add)) ((i integer)) ((1 literal)))
c{1: 16 X (((loop))) => (((jump)) ((-6 offset)))
c{1: 17 ✓ (((reply)))
c{1: 18 ✓ (((at-top? boolean)) <- ((lesser-or-equal)) ((cursor-row integer) (space 1)) ((0 literal)))
c{1: 19 X (((break-if)) ((at-top? boolean))) => (((jump-if)) ((at-top? boolean)) ((2 offset)))
c{1: 20 ✓ (((cursor-row integer) (space 1)) <- ((subtract)) ((cursor-row integer) (space 1)) ((1 literal)))
c{1: 21 ✓ (((cursor-up)) ((screen terminal-address)))
-: next-space-generator of add-line is screen-state
-: next-space-generator of back-to is screen-state
-: next-space-generator of browse-trace is screen-state
-: next-space-generator of cursor-row-to-trace-index is screen-state
-: next-space-generator of down is screen-state
-: next-space-generator of print-instruction-trace is screen-state
-: next-space-generator of print-traces-collapsed is screen-state
-: next-space-generator of print-traces-collapsed-from is screen-state
-: next-space-generator of process-key is screen-state
-: next-space-generator of to-bottom is screen-state
-: next-space-generator of up is screen-state
cn0: convert-names in add-line
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((0 space-address) (names screen-state)) <- ((next-input))) nil nil
cn0: checking oarg ((0 space-address) (names screen-state))
maybe-add: ((0 space-address) (names screen-state))
cn0: (((screen terminal-address)) <- ((next-input))) nil nil
cn0: checking oarg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: location for oarg ((screen terminal-address)): 1
cn0: (((at-bottom? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((printed-height integer) (space 1))) ((screen 1)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((printed-height integer) (space 1))
maybe-add: ((printed-height integer) (space 1))
cn0: checking oarg ((at-bottom? boolean))
maybe-add: ((at-bottom? boolean))
cn0: location for oarg ((at-bottom? boolean)): 2
cn0: (((jump-unless)) ((at-bottom? boolean)) ((9 offset))) ((at-bottom? 2) (screen 1)) nil
cn0: checking arg ((at-bottom? boolean))
maybe-add: ((at-bottom? boolean))
cn0: checking arg ((9 offset))
cn0: (((screen-full? boolean)) <- ((greater-or-equal)) ((app-height integer) (space 1)) ((screen-height integer) (space 1))) ((at-bottom? 2) (screen 1)) nil
cn0: checking arg ((app-height integer) (space 1))
maybe-add: ((app-height integer) (space 1))
cn0: checking arg ((screen-height integer) (space 1))
maybe-add: ((screen-height integer) (space 1))
cn0: checking oarg ((screen-full? boolean))
maybe-add: ((screen-full? boolean))
cn0: location for oarg ((screen-full? boolean)): 3
cn0: (((jump-unless)) ((screen-full? boolean)) ((3 offset))) ((at-bottom? 2) (screen 1) (screen-full? 3)) nil
cn0: checking arg ((screen-full? boolean))
maybe-add: ((screen-full? boolean))
cn0: checking arg ((3 offset))
cn0: (((cursor-to-next-line)) ((screen terminal-address))) ((at-bottom? 2) (screen 1) (screen-full? 3)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((cursor-up)) ((screen terminal-address))) ((at-bottom? 2) (screen 1) (screen-full? 3)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((reply))) ((at-bottom? 2) (screen 1) (screen-full? 3)) nil
cn0: (((printed-height integer) (space 1)) <- ((add)) ((printed-height integer) (space 1)) ((1 literal))) ((at-bottom? 2) (screen 1) (screen-full? 3)) nil
cn0: checking arg ((printed-height integer) (space 1))
maybe-add: ((printed-height integer) (space 1))
cn0: checking arg ((1 literal))
cn0: checking oarg ((printed-height integer) (space 1))
maybe-add: ((printed-height integer) (space 1))
cn0: (((grow-max? boolean)) <- ((greater-than)) ((printed-height integer) (space 1)) ((app-height integer) (space 1))) ((at-bottom? 2) (screen 1) (screen-full? 3)) nil
cn0: checking arg ((printed-height integer) (space 1))
maybe-add: ((printed-height integer) (space 1))
cn0: checking arg ((app-height integer) (space 1))
maybe-add: ((app-height integer) (space 1))
cn0: checking oarg ((grow-max? boolean))
maybe-add: ((grow-max? boolean))
cn0: location for oarg ((grow-max? boolean)): 4
cn0: (((jump-unless)) ((grow-max? boolean)) ((1 offset))) ((at-bottom? 2) (grow-max? 4) (screen 1) (screen-full? 3)) nil
cn0: checking arg ((grow-max? boolean))
maybe-add: ((grow-max? boolean))
cn0: checking arg ((1 offset))
cn0: (((app-height integer) (space 1)) <- ((copy)) ((printed-height integer) (space 1))) ((at-bottom? 2) (grow-max? 4) (screen 1) (screen-full? 3)) nil
cn0: checking arg ((printed-height integer) (space 1))
maybe-add: ((printed-height integer) (space 1))
cn0: checking oarg ((app-height integer) (space 1))
maybe-add: ((app-height integer) (space 1))
cn0: (((cursor-row integer) (space 1)) <- ((add)) ((cursor-row integer) (space 1)) ((1 literal))) ((at-bottom? 2) (grow-max? 4) (screen 1) (screen-full? 3)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((1 literal))
cn0: checking oarg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: (((cursor-to-next-line)) ((screen terminal-address))) ((at-bottom? 2) (grow-max? 4) (screen 1) (screen-full? 3)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: convert-names in back-to
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((0 space-address) (names screen-state)) <- ((next-input))) nil nil
cn0: checking oarg ((0 space-address) (names screen-state))
maybe-add: ((0 space-address) (names screen-state))
cn0: (((screen terminal-address)) <- ((next-input))) nil nil
cn0: checking oarg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: location for oarg ((screen terminal-address)): 1
cn0: (((target-row integer)) <- ((next-input))) ((screen 1)) nil
cn0: checking oarg ((target-row integer))
maybe-add: ((target-row integer))
cn0: location for oarg ((target-row integer)): 2
cn0: (((below-target? boolean)) <- ((greater-than)) ((cursor-row integer) (space 1)) ((target-row integer))) ((screen 1) (target-row 2)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((target-row integer))
maybe-add: ((target-row integer))
cn0: checking oarg ((below-target? boolean))
maybe-add: ((below-target? boolean))
cn0: location for oarg ((below-target? boolean)): 3
cn0: (((jump-unless)) ((below-target? boolean)) ((2 offset))) ((below-target? 3) (screen 1) (target-row 2)) nil
cn0: checking arg ((below-target? boolean))
maybe-add: ((below-target? boolean))
cn0: checking arg ((2 offset))
cn0: (((up)) ((0 space-address)) ((screen terminal-address))) ((below-target? 3) (screen 1) (target-row 2)) nil
cn0: checking arg ((0 space-address))
maybe-add: ((0 space-address))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((jump)) ((-4 offset))) ((below-target? 3) (screen 1) (target-row 2)) nil
cn0: checking arg ((-4 offset))
cn0: (((above-target? boolean)) <- ((less-than)) ((cursor-row integer) (space 1)) ((target-row integer))) ((below-target? 3) (screen 1) (target-row 2)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((target-row integer))
maybe-add: ((target-row integer))
cn0: checking oarg ((above-target? boolean))
maybe-add: ((above-target? boolean))
cn0: location for oarg ((above-target? boolean)): 4
cn0: (((jump-unless)) ((above-target? boolean)) ((2 offset))) ((above-target? 4) (below-target? 3) (screen 1) (target-row 2)) nil
cn0: checking arg ((above-target? boolean))
maybe-add: ((above-target? boolean))
cn0: checking arg ((2 offset))
cn0: (((down)) ((0 space-address)) ((screen terminal-address))) ((above-target? 4) (below-target? 3) (screen 1) (target-row 2)) nil
cn0: checking arg ((0 space-address))
maybe-add: ((0 space-address))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((jump)) ((-4 offset))) ((above-target? 4) (below-target? 3) (screen 1) (target-row 2)) nil
cn0: checking arg ((-4 offset))
cn0: convert-names in browse-trace
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((x string-address)) <- ((next-input))) nil nil
cn0: checking oarg ((x string-address))
maybe-add: ((x string-address))
cn0: location for oarg ((x string-address)): 1
cn0: (((screen-height integer)) <- ((next-input))) ((x 1)) nil
cn0: checking oarg ((screen-height integer))
maybe-add: ((screen-height integer))
cn0: location for oarg ((screen-height integer)): 2
cn0: (((s stream-address)) <- ((init-stream)) ((x string-address))) ((screen-height 2) (x 1)) nil
cn0: checking arg ((x string-address))
maybe-add: ((x string-address))
cn0: checking oarg ((s stream-address))
maybe-add: ((s stream-address))
cn0: location for oarg ((s stream-address)): 3
cn0: (((traces instruction-trace-address-array-address)) <- ((parse-traces)) ((s stream-address))) ((s 3) (screen-height 2) (x 1)) nil
cn0: checking arg ((s stream-address))
maybe-add: ((s stream-address))
cn0: checking oarg ((traces instruction-trace-address-array-address))
maybe-add: ((traces instruction-trace-address-array-address))
cn0: location for oarg ((traces instruction-trace-address-array-address)): 4
cn0: (((0 space-address) (names screen-state)) <- ((screen-state)) ((traces instruction-trace-address-array-address)) ((screen-height integer))) ((s 3) (screen-height 2) (traces 4) (x 1)) nil
cn0: checking arg ((traces instruction-trace-address-array-address))
maybe-add: ((traces instruction-trace-address-array-address))
cn0: checking arg ((screen-height integer))
maybe-add: ((screen-height integer))
cn0: checking oarg ((0 space-address) (names screen-state))
maybe-add: ((0 space-address) (names screen-state))
cn0: (((cursor-mode))) ((s 3) (screen-height 2) (traces 4) (x 1)) nil
cn0: (((print-traces-collapsed)) ((0 space-address) (screen-state)) ((nil literal) (terminal))) ((s 3) (screen-height 2) (traces 4) (x 1)) nil
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((nil literal) (terminal))
cn0: (((quit? boolean)) <- ((process-key)) ((0 space-address) (screen-state)) ((nil literal) (keyboard)) ((nil literal) (terminal))) ((s 3) (screen-height 2) (traces 4) (x 1)) nil
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((nil literal) (keyboard))
cn0: checking arg ((nil literal) (terminal))
cn0: checking oarg ((quit? boolean))
maybe-add: ((quit? boolean))
cn0: location for oarg ((quit? boolean)): 5
cn0: (((jump-if)) ((quit? boolean)) ((1 offset))) ((quit? 5) (s 3) (screen-height 2) (traces 4) (x 1)) nil
cn0: checking arg ((quit? boolean))
maybe-add: ((quit? boolean))
cn0: checking arg ((1 offset))
cn0: (((jump)) ((-3 offset))) ((quit? 5) (s 3) (screen-height 2) (traces 4) (x 1)) nil
cn0: checking arg ((-3 offset))
cn0: (((to-bottom)) ((0 space-address) (screen-state)) ((nil literal) (terminal))) ((quit? 5) (s 3) (screen-height 2) (traces 4) (x 1)) nil
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((nil literal) (terminal))
cn0: (((retro-mode))) ((quit? 5) (s 3) (screen-height 2) (traces 4) (x 1)) nil
cn0: convert-names in cursor-row-to-trace-index
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((0 space-address) (names screen-state)) <- ((next-input))) nil nil
cn0: checking oarg ((0 space-address) (names screen-state))
maybe-add: ((0 space-address) (names screen-state))
cn0: (((n integer) (screen)) <- ((next-input))) nil nil
cn0: checking oarg ((n integer) (screen))
maybe-add: ((n integer) (screen))
cn0: location for oarg ((n integer) (screen)): 1
cn0: (((has-expanded? boolean)) <- ((greater-or-equal)) ((expanded-index integer) (space 1)) ((0 literal))) ((n 1)) nil
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking arg ((0 literal))
cn0: checking oarg ((has-expanded? boolean))
maybe-add: ((has-expanded? boolean))
cn0: location for oarg ((has-expanded? boolean)): 2
cn0: (((jump-if)) ((has-expanded? boolean)) ((1 offset))) ((has-expanded? 2) (n 1)) nil
cn0: checking arg ((has-expanded? boolean))
maybe-add: ((has-expanded? boolean))
cn0: checking arg ((1 offset))
cn0: (((reply)) ((n integer) (index))) ((has-expanded? 2) (n 1)) nil
cn0: checking arg ((n integer) (index))
maybe-add: ((n integer) (index))
cn0: (((above-expanded? boolean)) <- ((lesser-or-equal)) ((cursor-row integer) (space 1) (screen)) ((expanded-index integer) (space 1))) ((has-expanded? 2) (n 1)) nil
cn0: checking arg ((cursor-row integer) (space 1) (screen))
maybe-add: ((cursor-row integer) (space 1) (screen))
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking oarg ((above-expanded? boolean))
maybe-add: ((above-expanded? boolean))
cn0: location for oarg ((above-expanded? boolean)): 3
cn0: (((jump-unless)) ((above-expanded? boolean)) ((1 offset))) ((above-expanded? 3) (has-expanded? 2) (n 1)) nil
cn0: checking arg ((above-expanded? boolean))
maybe-add: ((above-expanded? boolean))
cn0: checking arg ((1 offset))
cn0: (((reply)) ((n integer) (index))) ((above-expanded? 3) (has-expanded? 2) (n 1)) nil
cn0: checking arg ((n integer) (index))
maybe-add: ((n integer) (index))
cn0: (((k integer) (index)) <- ((instruction-trace-num-children)) ((traces instruction-trace-address-array-address) (space 1)) ((expanded-index integer) (space 1))) ((above-expanded? 3) (has-expanded? 2) (n 1)) nil
cn0: checking arg ((traces instruction-trace-address-array-address) (space 1))
maybe-add: ((traces instruction-trace-address-array-address) (space 1))
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking oarg ((k integer) (index))
maybe-add: ((k integer) (index))
cn0: location for oarg ((k integer) (index)): 4
cn0: (((result integer) (index)) <- ((subtract)) ((n integer) (screen)) ((k integer) (index))) ((above-expanded? 3) (has-expanded? 2) (k 4) (n 1)) nil
cn0: checking arg ((n integer) (screen))
maybe-add: ((n integer) (screen))
cn0: checking arg ((k integer) (index))
maybe-add: ((k integer) (index))
cn0: checking oarg ((result integer) (index))
maybe-add: ((result integer) (index))
cn0: location for oarg ((result integer) (index)): 5
cn0: (((reply)) ((result integer) (index))) ((above-expanded? 3) (has-expanded? 2) (k 4) (n 1) (result 5)) nil
cn0: checking arg ((result integer) (index))
maybe-add: ((result integer) (index))
cn0: convert-names in down
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((0 space-address) (names screen-state)) <- ((next-input))) nil nil
cn0: checking oarg ((0 space-address) (names screen-state))
maybe-add: ((0 space-address) (names screen-state))
cn0: (((screen terminal-address)) <- ((next-input))) nil nil
cn0: checking oarg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: location for oarg ((screen terminal-address)): 1
cn0: (((no-expanded? boolean)) <- ((less-than)) ((expanded-index integer) (space 1)) ((0 literal))) ((screen 1)) nil
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking arg ((0 literal))
cn0: checking oarg ((no-expanded? boolean))
maybe-add: ((no-expanded? boolean))
cn0: location for oarg ((no-expanded? boolean)): 2
cn0: (((jump-if)) ((no-expanded? boolean)) ((12 offset))) ((no-expanded? 2) (screen 1)) nil
cn0: checking arg ((no-expanded? boolean))
maybe-add: ((no-expanded? boolean))
cn0: checking arg ((12 offset))
cn0: (((at-expanded? boolean)) <- ((equal)) ((cursor-row integer) (space 1)) ((expanded-index integer) (space 1))) ((no-expanded? 2) (screen 1)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking oarg ((at-expanded? boolean))
maybe-add: ((at-expanded? boolean))
cn0: location for oarg ((at-expanded? boolean)): 3
cn0: (((jump-unless)) ((at-expanded? boolean)) ((10 offset))) ((at-expanded? 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((at-expanded? boolean))
maybe-add: ((at-expanded? boolean))
cn0: checking arg ((10 offset))
cn0: (((n integer)) <- ((instruction-trace-num-children)) ((traces instruction-trace-address-array-address) (space 1)) ((expanded-index integer) (space 1))) ((at-expanded? 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((traces instruction-trace-address-array-address) (space 1))
maybe-add: ((traces instruction-trace-address-array-address) (space 1))
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking oarg ((n integer))
maybe-add: ((n integer))
cn0: location for oarg ((n integer)): 4
cn0: (((n integer)) <- ((add)) ((n integer)) ((1 literal))) ((at-expanded? 3) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((n integer))
maybe-add: ((n integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((n integer))
maybe-add: ((n integer))
cn0: (((i integer)) <- ((copy)) ((0 literal))) ((at-expanded? 3) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((i integer))
maybe-add: ((i integer))
cn0: location for oarg ((i integer)): 5
cn0: (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((n integer))) ((at-expanded? 3) (i 5) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking arg ((n integer))
maybe-add: ((n integer))
cn0: checking oarg ((done? boolean))
maybe-add: ((done? boolean))
cn0: location for oarg ((done? boolean)): 6
cn0: (((jump-if)) ((done? boolean)) ((4 offset))) ((at-expanded? 3) (done? 6) (i 5) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((done? boolean))
maybe-add: ((done? boolean))
cn0: checking arg ((4 offset))
cn0: (((cursor-row integer) (space 1)) <- ((add)) ((cursor-row integer) (space 1)) ((1 literal))) ((at-expanded? 3) (done? 6) (i 5) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((1 literal))
cn0: checking oarg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: (((cursor-down)) ((screen terminal-address))) ((at-expanded? 3) (done? 6) (i 5) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((i integer)) <- ((add)) ((i integer)) ((1 literal))) ((at-expanded? 3) (done? 6) (i 5) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((i integer))
maybe-add: ((i integer))
cn0: (((jump)) ((-6 offset))) ((at-expanded? 3) (done? 6) (i 5) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((-6 offset))
cn0: (((reply))) ((at-expanded? 3) (done? 6) (i 5) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: (((at-bottom? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((printed-height integer) (space 1))) ((at-expanded? 3) (done? 6) (i 5) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((printed-height integer) (space 1))
maybe-add: ((printed-height integer) (space 1))
cn0: checking oarg ((at-bottom? boolean))
maybe-add: ((at-bottom? boolean))
cn0: location for oarg ((at-bottom? boolean)): 7
cn0: (((jump-if)) ((at-bottom? boolean)) ((2 offset))) ((at-bottom? 7) (at-expanded? 3) (done? 6) (i 5) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((at-bottom? boolean))
maybe-add: ((at-bottom? boolean))
cn0: checking arg ((2 offset))
cn0: (((cursor-row integer) (space 1)) <- ((add)) ((cursor-row integer) (space 1)) ((1 literal))) ((at-bottom? 7) (at-expanded? 3) (done? 6) (i 5) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((1 literal))
cn0: checking oarg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: (((cursor-down)) ((screen terminal-address))) ((at-bottom? 7) (at-expanded? 3) (done? 6) (i 5) (n 4) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: convert-names in instruction-trace-num-children
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((traces instruction-trace-address-array-address)) <- ((next-input))) nil nil
cn0: checking oarg ((traces instruction-trace-address-array-address))
maybe-add: ((traces instruction-trace-address-array-address))
cn0: location for oarg ((traces instruction-trace-address-array-address)): 1
cn0: (((index integer)) <- ((next-input))) ((traces 1)) nil
cn0: checking oarg ((index integer))
maybe-add: ((index integer))
cn0: location for oarg ((index integer)): 2
cn0: (((tr instruction-trace-address)) <- ((index)) ((traces instruction-trace-address-array-address) (deref)) ((index integer))) ((index 2) (traces 1)) nil
cn0: checking arg ((traces instruction-trace-address-array-address) (deref))
maybe-add: ((traces instruction-trace-address-array-address) (deref))
cn0: checking arg ((index integer))
maybe-add: ((index integer))
cn0: checking oarg ((tr instruction-trace-address))
maybe-add: ((tr instruction-trace-address))
cn0: location for oarg ((tr instruction-trace-address)): 3
cn0: (((tr-children trace-address-array-address)) <- ((get)) ((tr instruction-trace-address) (deref)) ((children offset))) ((index 2) (tr 3) (traces 1)) nil
cn0: field-access children in trinstruction-trace-addressderef of type instruction-trace
cn0: new field; computing location
cn0: field location 3
cn0: checking arg ((tr instruction-trace-address) (deref))
maybe-add: ((tr instruction-trace-address) (deref))
cn0: checking arg ((children offset))
cn0: checking oarg ((tr-children trace-address-array-address))
maybe-add: ((tr-children trace-address-array-address))
cn0: location for oarg ((tr-children trace-address-array-address)): 4
cn0: (((n integer)) <- ((length)) ((tr-children instruction-trace-address-array-address) (deref))) ((children 3) (index 2) (tr 3) (tr-children 4) (traces 1)) ((children t))
cn0: checking arg ((tr-children instruction-trace-address-array-address) (deref))
maybe-add: ((tr-children instruction-trace-address-array-address) (deref))
cn0: checking oarg ((n integer))
maybe-add: ((n integer))
cn0: location for oarg ((n integer)): 5
cn0: (((reply)) ((n integer))) ((children 3) (index 2) (n 5) (tr 3) (tr-children 4) (traces 1)) ((children t))
cn0: checking arg ((n integer))
maybe-add: ((n integer))
cn0: convert-names in main
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((x string-address)) <- ((new)) run: main 0: (((1 integer)) <- ((copy)) ((1 literal)))) nil nil
cn0: checking arg run: main 0: (((1 integer)) <- ((copy)) ((1 literal)))
cn0: checking oarg ((x string-address))
maybe-add: ((x string-address))
cn0: location for oarg ((x string-address)): 1
cn0: (((n integer)) <- ((length)) ((x string-address) (deref))) ((x 1)) nil
cn0: checking arg ((x string-address) (deref))
maybe-add: ((x string-address) (deref))
cn0: checking oarg ((n integer))
maybe-add: ((n integer))
cn0: location for oarg ((n integer)): 2
cn0: ((($print)) ((p2  literal))) ((n 2) (x 1)) nil
cn0: checking arg ((p2  literal))
cn0: ((($print)) ((n integer))) ((n 2) (x 1)) nil
cn0: checking arg ((n integer))
maybe-add: ((n integer))
cn0: ((($print)) ((
 literal))) ((n 2) (x 1)) nil
cn0: checking arg ((
 literal))
cn0: (((s stream-address)) <- ((init-stream)) ((x string-address))) ((n 2) (x 1)) nil
cn0: checking arg ((x string-address))
maybe-add: ((x string-address))
cn0: checking oarg ((s stream-address))
maybe-add: ((s stream-address))
cn0: location for oarg ((s stream-address)): 3
cn0: (((traces instruction-trace-address-array-address)) <- ((parse-traces)) ((s stream-address))) ((n 2) (s 3) (x 1)) nil
cn0: checking arg ((s stream-address))
maybe-add: ((s stream-address))
cn0: checking oarg ((traces instruction-trace-address-array-address))
maybe-add: ((traces instruction-trace-address-array-address))
cn0: location for oarg ((traces instruction-trace-address-array-address)): 4
cn0: convert-names in parse-instruction-trace
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((in trace-address)) <- ((next-input))) nil nil
cn0: checking oarg ((in trace-address))
maybe-add: ((in trace-address))
cn0: location for oarg ((in trace-address)): 1
cn0: (((buf string-address)) <- ((get)) ((in trace-address) (deref)) ((contents offset))) ((in 1)) nil
cn0: field-access contents in intrace-addressderef of type trace
cn0: new field; computing location
cn0: field location 1
cn0: checking arg ((in trace-address) (deref))
maybe-add: ((in trace-address) (deref))
cn0: checking arg ((contents offset))
cn0: checking oarg ((buf string-address))
maybe-add: ((buf string-address))
cn0: location for oarg ((buf string-address)): 2
cn0: (((result instruction-trace-address)) <- ((new)) ((instruction-trace literal))) ((buf 2) (contents 1) (in 1)) ((contents t))
cn0: checking arg ((instruction-trace literal))
cn0: checking oarg ((result instruction-trace-address))
maybe-add: ((result instruction-trace-address))
cn0: location for oarg ((result instruction-trace-address)): 3
cn0: (((f1 string-address)) ((rest string-address)) <- ((split-first)) ((buf string-address)) ((  literal))) ((buf 2) (contents 1) (in 1) (result 3)) ((contents t))
cn0: checking arg ((buf string-address))
maybe-add: ((buf string-address))
cn0: checking arg ((  literal))
cn0: checking oarg ((f1 string-address))
maybe-add: ((f1 string-address))
cn0: location for oarg ((f1 string-address)): 4
cn0: checking oarg ((rest string-address))
maybe-add: ((rest string-address))
cn0: location for oarg ((rest string-address)): 5
cn0: (((cs string-address-array-address-address)) <- ((get-address)) ((result instruction-trace-address) (deref)) ((call-stack offset))) ((buf 2) (contents 1) (f1 4) (in 1) (rest 5) (result 3)) ((contents t))
cn0: field-access call-stack in resultinstruction-trace-addressderef of type instruction-trace
cn0: new field; computing location
cn0: field location 0
cn0: checking arg ((result instruction-trace-address) (deref))
maybe-add: ((result instruction-trace-address) (deref))
cn0: checking arg ((call-stack offset))
cn0: checking oarg ((cs string-address-array-address-address))
maybe-add: ((cs string-address-array-address-address))
cn0: location for oarg ((cs string-address-array-address-address)): 6
cn0: (((cs string-address-array-address-address) (deref)) <- ((split)) ((f1 string-address)) ((/ literal))) ((buf 2) (call-stack 0) (contents 1) (cs 6) (f1 4) (in 1) (rest 5) (result 3)) ((call-stack t) (contents t))
cn0: checking arg ((f1 string-address))
maybe-add: ((f1 string-address))
cn0: checking arg ((/ literal))
cn0: checking oarg ((cs string-address-array-address-address) (deref))
maybe-add: ((cs string-address-array-address-address) (deref))
cn0: (((p string-address-address)) <- ((get-address)) ((result instruction-trace-address) (deref)) ((pc offset))) ((buf 2) (call-stack 0) (contents 1) (cs 6) (f1 4) (in 1) (rest 5) (result 3)) ((call-stack t) (contents t))
cn0: field-access pc in resultinstruction-trace-addressderef of type instruction-trace
cn0: new field; computing location
cn0: field location 1
cn0: checking arg ((result instruction-trace-address) (deref))
maybe-add: ((result instruction-trace-address) (deref))
cn0: checking arg ((pc offset))
cn0: checking oarg ((p string-address-address))
maybe-add: ((p string-address-address))
cn0: location for oarg ((p string-address-address)): 7
cn0: (((delim string-address)) <- ((new)) : ) ((buf 2) (call-stack 0) (contents 1) (cs 6) (f1 4) (in 1) (p 7) (pc 1) (rest 5) (result 3)) ((call-stack t) (contents t) (pc t))
cn0: checking arg : 
cn0: checking oarg ((delim string-address))
maybe-add: ((delim string-address))
cn0: location for oarg ((delim string-address)): 8
cn0: (((p string-address-address) (deref)) ((rest string-address)) <- ((split-first-at-substring)) ((rest string-address)) ((delim string-address))) ((buf 2) (call-stack 0) (contents 1) (cs 6) (delim 8) (f1 4) (in 1) (p 7) (pc 1) (rest 5) (result 3)) ((call-stack t) (contents t) (pc t))
cn0: checking arg ((rest string-address))
maybe-add: ((rest string-address))
cn0: checking arg ((delim string-address))
maybe-add: ((delim string-address))
cn0: checking oarg ((p string-address-address) (deref))
maybe-add: ((p string-address-address) (deref))
cn0: checking oarg ((rest string-address))
maybe-add: ((rest string-address))
cn0: (((inst string-address-address)) <- ((get-address)) ((result instruction-trace-address) (deref)) ((instruction offset))) ((buf 2) (call-stack 0) (contents 1) (cs 6) (delim 8) (f1 4) (in 1) (p 7) (pc 1) (rest 5) (result 3)) ((call-stack t) (contents t) (pc t))
cn0: field-access instruction in resultinstruction-trace-addressderef of type instruction-trace
cn0: new field; computing location
cn0: field location 2
cn0: checking arg ((result instruction-trace-address) (deref))
maybe-add: ((result instruction-trace-address) (deref))
cn0: checking arg ((instruction offset))
cn0: checking oarg ((inst string-address-address))
maybe-add: ((inst string-address-address))
cn0: location for oarg ((inst string-address-address)): 9
cn0: (((inst string-address-address) (deref)) <- ((copy)) ((rest string-address))) ((buf 2) (call-stack 0) (contents 1) (cs 6) (delim 8) (f1 4) (in 1) (inst 9) (instruction 2) (p 7) (pc 1) (rest 5) (result 3)) ((call-stack t) (contents t) (instruction t) (pc t))
cn0: checking arg ((rest string-address))
maybe-add: ((rest string-address))
cn0: checking oarg ((inst string-address-address) (deref))
maybe-add: ((inst string-address-address) (deref))
cn0: (((reply)) ((result instruction-trace-address))) ((buf 2) (call-stack 0) (contents 1) (cs 6) (delim 8) (f1 4) (in 1) (inst 9) (instruction 2) (p 7) (pc 1) (rest 5) (result 3)) ((call-stack t) (contents t) (instruction t) (pc t))
cn0: checking arg ((result instruction-trace-address))
maybe-add: ((result instruction-trace-address))
cn0: convert-names in parse-trace
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((in string-address)) <- ((next-input))) nil nil
cn0: checking oarg ((in string-address))
maybe-add: ((in string-address))
cn0: location for oarg ((in string-address)): 1
cn0: (((result trace-address)) <- ((new)) ((trace literal))) ((in 1)) nil
cn0: checking arg ((trace literal))
cn0: checking oarg ((result trace-address))
maybe-add: ((result trace-address))
cn0: location for oarg ((result trace-address)): 2
cn0: (((delim string-address)) <- ((new)) : ) ((in 1) (result 2)) nil
cn0: checking arg : 
cn0: checking oarg ((delim string-address))
maybe-add: ((delim string-address))
cn0: location for oarg ((delim string-address)): 3
cn0: (((first string-address)) ((rest string-address)) <- ((split-first-at-substring)) ((in string-address)) ((delim string-address))) ((delim 3) (in 1) (result 2)) nil
cn0: checking arg ((in string-address))
maybe-add: ((in string-address))
cn0: checking arg ((delim string-address))
maybe-add: ((delim string-address))
cn0: checking oarg ((first string-address))
maybe-add: ((first string-address))
cn0: location for oarg ((first string-address)): 4
cn0: checking oarg ((rest string-address))
maybe-add: ((rest string-address))
cn0: location for oarg ((rest string-address)): 5
cn0: (((l string-address-address)) <- ((get-address)) ((result trace-address) (deref)) ((label offset))) ((delim 3) (first 4) (in 1) (rest 5) (result 2)) nil
cn0: field-access label in resulttrace-addressderef of type trace
cn0: new field; computing location
cn0: field location 0
cn0: checking arg ((result trace-address) (deref))
maybe-add: ((result trace-address) (deref))
cn0: checking arg ((label offset))
cn0: checking oarg ((l string-address-address))
maybe-add: ((l string-address-address))
cn0: location for oarg ((l string-address-address)): 6
cn0: (((l string-address-address) (deref)) <- ((copy)) ((first string-address))) ((delim 3) (first 4) (in 1) (l 6) (label 0) (rest 5) (result 2)) ((label t))
cn0: checking arg ((first string-address))
maybe-add: ((first string-address))
cn0: checking oarg ((l string-address-address) (deref))
maybe-add: ((l string-address-address) (deref))
cn0: (((c string-address-address)) <- ((get-address)) ((result trace-address) (deref)) ((contents offset))) ((delim 3) (first 4) (in 1) (l 6) (label 0) (rest 5) (result 2)) ((label t))
cn0: field-access contents in resulttrace-addressderef of type trace
cn0: new field; computing location
cn0: field location 1
cn0: checking arg ((result trace-address) (deref))
maybe-add: ((result trace-address) (deref))
cn0: checking arg ((contents offset))
cn0: checking oarg ((c string-address-address))
maybe-add: ((c string-address-address))
cn0: location for oarg ((c string-address-address)): 7
cn0: (((c string-address-address) (deref)) <- ((copy)) ((rest string-address))) ((c 7) (contents 1) (delim 3) (first 4) (in 1) (l 6) (label 0) (rest 5) (result 2)) ((contents t) (label t))
cn0: checking arg ((rest string-address))
maybe-add: ((rest string-address))
cn0: checking oarg ((c string-address-address) (deref))
maybe-add: ((c string-address-address) (deref))
cn0: (((reply)) ((result trace-address))) ((c 7) (contents 1) (delim 3) (first 4) (in 1) (l 6) (label 0) (rest 5) (result 2)) ((contents t) (label t))
cn0: checking arg ((result trace-address))
maybe-add: ((result trace-address))
cn0: convert-names in parse-traces
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((in stream-address)) <- ((next-input))) nil nil
cn0: checking oarg ((in stream-address))
maybe-add: ((in stream-address))
cn0: location for oarg ((in stream-address)): 1
cn0: (((result buffer-address)) <- ((init-buffer)) ((30 literal))) ((in 1)) nil
cn0: checking arg ((30 literal))
cn0: checking oarg ((result buffer-address))
maybe-add: ((result buffer-address))
cn0: location for oarg ((result buffer-address)): 2
cn0: (((curr-tail instruction-trace-address)) <- ((copy)) ((nil literal))) ((in 1) (result 2)) nil
cn0: checking arg ((nil literal))
cn0: checking oarg ((curr-tail instruction-trace-address))
maybe-add: ((curr-tail instruction-trace-address))
cn0: location for oarg ((curr-tail instruction-trace-address)): 3
cn0: (((ch buffer-address)) <- ((init-buffer)) ((5 literal))) ((curr-tail 3) (in 1) (result 2)) nil
cn0: checking arg ((5 literal))
cn0: checking oarg ((ch buffer-address))
maybe-add: ((ch buffer-address))
cn0: location for oarg ((ch buffer-address)): 4
cn0: (((run string-address) (const)) <- ((new)) run) ((ch 4) (curr-tail 3) (in 1) (result 2)) nil
cn0: checking arg run
cn0: checking oarg ((run string-address) (const))
maybe-add: ((run string-address) (const))
cn0: location for oarg ((run string-address) (const)): 5
cn0: (((done? boolean)) <- ((end-of-stream?)) ((in stream-address))) ((ch 4) (curr-tail 3) (in 1) (result 2) (run 5)) nil
cn0: checking arg ((in stream-address))
maybe-add: ((in stream-address))
cn0: checking oarg ((done? boolean))
maybe-add: ((done? boolean))
cn0: location for oarg ((done? boolean)): 6
cn0: (((jump-if)) ((done? boolean)) ((15 offset))) ((ch 4) (curr-tail 3) (done? 6) (in 1) (result 2) (run 5)) nil
cn0: checking arg ((done? boolean))
maybe-add: ((done? boolean))
cn0: checking arg ((15 offset))
cn0: (((line string-address)) <- ((read-line)) ((in stream-address))) ((ch 4) (curr-tail 3) (done? 6) (in 1) (result 2) (run 5)) nil
cn0: checking arg ((in stream-address))
maybe-add: ((in stream-address))
cn0: checking oarg ((line string-address))
maybe-add: ((line string-address))
cn0: location for oarg ((line string-address)): 7
cn0: (((f trace-address)) <- ((parse-trace)) ((line string-address))) ((ch 4) (curr-tail 3) (done? 6) (in 1) (line 7) (result 2) (run 5)) nil
cn0: checking arg ((line string-address))
maybe-add: ((line string-address))
cn0: checking oarg ((f trace-address))
maybe-add: ((f trace-address))
cn0: location for oarg ((f trace-address)): 8
cn0: (((l string-address)) <- ((get)) ((f trace-address) (deref)) ((label offset))) ((ch 4) (curr-tail 3) (done? 6) (f 8) (in 1) (line 7) (result 2) (run 5)) nil
cn0: field-access label in ftrace-addressderef of type trace
cn0: new field; computing location
cn0: field location 0
cn0: checking arg ((f trace-address) (deref))
maybe-add: ((f trace-address) (deref))
cn0: checking arg ((label offset))
cn0: checking oarg ((l string-address))
maybe-add: ((l string-address))
cn0: location for oarg ((l string-address)): 9
cn0: (((inst? boolean)) <- ((string-equal)) ((l string-address)) ((run string-address) (const))) ((ch 4) (curr-tail 3) (done? 6) (f 8) (in 1) (l 9) (label 0) (line 7) (result 2) (run 5)) ((label t))
cn0: checking arg ((l string-address))
maybe-add: ((l string-address))
cn0: checking arg ((run string-address) (const))
maybe-add: ((run string-address) (const))
cn0: checking oarg ((inst? boolean))
maybe-add: ((inst? boolean))
cn0: location for oarg ((inst? boolean)): 10
cn0: (((jump-unless)) ((inst? boolean)) ((7 offset))) ((ch 4) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((label t))
cn0: checking arg ((inst? boolean))
maybe-add: ((inst? boolean))
cn0: checking arg ((7 offset))
cn0: (((jump-unless)) ((curr-tail instruction-trace-address)) ((3 offset))) ((ch 4) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((label t))
cn0: checking arg ((curr-tail instruction-trace-address))
maybe-add: ((curr-tail instruction-trace-address))
cn0: checking arg ((3 offset))
cn0: (((c trace-address-array-address-address)) <- ((get-address)) ((curr-tail instruction-trace-address) (deref)) ((children offset))) ((ch 4) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((label t))
cn0: field-access children in curr-tailinstruction-trace-addressderef of type instruction-trace
cn0: new field; computing location
cn0: field location 3
cn0: checking arg ((curr-tail instruction-trace-address) (deref))
maybe-add: ((curr-tail instruction-trace-address) (deref))
cn0: checking arg ((children offset))
cn0: checking oarg ((c trace-address-array-address-address))
maybe-add: ((c trace-address-array-address-address))
cn0: location for oarg ((c trace-address-array-address-address)): 11
cn0: (((c trace-address-array-address-address) (deref)) <- ((to-array)) ((ch buffer-address))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((children t) (label t))
cn0: checking arg ((ch buffer-address))
maybe-add: ((ch buffer-address))
cn0: checking oarg ((c trace-address-array-address-address) (deref))
maybe-add: ((c trace-address-array-address-address) (deref))
cn0: (((ch buffer-address)) <- ((init-buffer)) ((5 literal))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((children t) (label t))
cn0: checking arg ((5 literal))
cn0: checking oarg ((ch buffer-address))
maybe-add: ((ch buffer-address))
cn0: (((curr-tail instruction-trace-address)) <- ((parse-instruction-trace)) ((f trace-address))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((children t) (label t))
cn0: checking arg ((f trace-address))
maybe-add: ((f trace-address))
cn0: checking oarg ((curr-tail instruction-trace-address))
maybe-add: ((curr-tail instruction-trace-address))
cn0: (((result buffer-address)) <- ((append)) ((result buffer-address)) ((curr-tail instruction-trace-address))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((children t) (label t))
cn0: checking arg ((result buffer-address))
maybe-add: ((result buffer-address))
cn0: checking arg ((curr-tail instruction-trace-address))
maybe-add: ((curr-tail instruction-trace-address))
cn0: checking oarg ((result buffer-address))
maybe-add: ((result buffer-address))
cn0: (((jump)) ((-15 offset))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((children t) (label t))
cn0: checking arg ((-15 offset))
cn0: (((jump-unless)) ((curr-tail instruction-trace-address)) ((-16 offset))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((children t) (label t))
cn0: checking arg ((curr-tail instruction-trace-address))
maybe-add: ((curr-tail instruction-trace-address))
cn0: checking arg ((-16 offset))
cn0: (((ch buffer-address)) <- ((append)) ((ch buffer-address)) ((f trace-address))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((children t) (label t))
cn0: checking arg ((ch buffer-address))
maybe-add: ((ch buffer-address))
cn0: checking arg ((f trace-address))
maybe-add: ((f trace-address))
cn0: checking oarg ((ch buffer-address))
maybe-add: ((ch buffer-address))
cn0: (((jump)) ((-18 offset))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((children t) (label t))
cn0: checking arg ((-18 offset))
cn0: (((jump-unless)) ((curr-tail instruction-trace-address)) ((2 offset))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((children t) (label t))
cn0: checking arg ((curr-tail instruction-trace-address))
maybe-add: ((curr-tail instruction-trace-address))
cn0: checking arg ((2 offset))
cn0: (((c trace-address-array-address-address)) <- ((get-address)) ((curr-tail instruction-trace-address) (deref)) ((children offset))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((children t) (label t))
cn0: field-access children in curr-tailinstruction-trace-addressderef of type instruction-trace
cn0: checking arg ((curr-tail instruction-trace-address) (deref))
maybe-add: ((curr-tail instruction-trace-address) (deref))
cn0: checking arg ((children offset))
cn0: checking oarg ((c trace-address-array-address-address))
maybe-add: ((c trace-address-array-address-address))
cn0: (((c trace-address-array-address-address) (deref)) <- ((to-array)) ((ch buffer-address))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((children t) (label t))
cn0: checking arg ((ch buffer-address))
maybe-add: ((ch buffer-address))
cn0: checking oarg ((c trace-address-array-address-address) (deref))
maybe-add: ((c trace-address-array-address-address) (deref))
cn0: (((s instruction-trace-address-array-address)) <- ((to-array)) ((result buffer-address))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5)) ((children t) (label t))
cn0: checking arg ((result buffer-address))
maybe-add: ((result buffer-address))
cn0: checking oarg ((s instruction-trace-address-array-address))
maybe-add: ((s instruction-trace-address-array-address))
cn0: location for oarg ((s instruction-trace-address-array-address)): 12
cn0: (((reply)) ((s instruction-trace-address-array-address))) ((c 11) (ch 4) (children 3) (curr-tail 3) (done? 6) (f 8) (in 1) (inst? 10) (l 9) (label 0) (line 7) (result 2) (run 5) (s 12)) ((children t) (label t))
cn0: checking arg ((s instruction-trace-address-array-address))
maybe-add: ((s instruction-trace-address-array-address))
cn0: convert-names in print-instruction-trace
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((screen terminal-address)) <- ((next-input))) nil nil
cn0: checking oarg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: location for oarg ((screen terminal-address)): 1
cn0: (((x instruction-trace-address)) <- ((next-input))) ((screen 1)) nil
cn0: checking oarg ((x instruction-trace-address))
maybe-add: ((x instruction-trace-address))
cn0: location for oarg ((x instruction-trace-address)): 2
cn0: (((0 space-address) (names screen-state)) <- ((next-input))) ((screen 1) (x 2)) nil
cn0: checking oarg ((0 space-address) (names screen-state))
maybe-add: ((0 space-address) (names screen-state))
cn0: (((clear-line)) ((screen terminal-address))) ((screen 1) (x 2)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((print-character)) ((screen terminal-address)) ((- literal))) ((screen 1) (x 2)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((- literal))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((screen 1) (x 2)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((c string-address-array-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((call-stack offset))) ((screen 1) (x 2)) nil
cn0: field-access call-stack in xinstruction-trace-addressderef of type instruction-trace
cn0: new field; computing location
cn0: field location 0
cn0: checking arg ((x instruction-trace-address) (deref))
maybe-add: ((x instruction-trace-address) (deref))
cn0: checking arg ((call-stack offset))
cn0: checking oarg ((c string-address-array-address))
maybe-add: ((c string-address-array-address))
cn0: location for oarg ((c string-address-array-address)): 3
cn0: (((i integer)) <- ((copy)) ((0 literal))) ((c 3) (call-stack 0) (screen 1) (x 2)) ((call-stack t))
cn0: checking arg ((0 literal))
cn0: checking oarg ((i integer))
maybe-add: ((i integer))
cn0: location for oarg ((i integer)): 4
cn0: (((len integer)) <- ((length)) ((c string-address-array-address) (deref))) ((c 3) (call-stack 0) (i 4) (screen 1) (x 2)) ((call-stack t))
cn0: checking arg ((c string-address-array-address) (deref))
maybe-add: ((c string-address-array-address) (deref))
cn0: checking oarg ((len integer))
maybe-add: ((len integer))
cn0: location for oarg ((len integer)): 5
cn0: (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((len integer))) ((c 3) (call-stack 0) (i 4) (len 5) (screen 1) (x 2)) ((call-stack t))
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking arg ((len integer))
maybe-add: ((len integer))
cn0: checking oarg ((done? boolean))
maybe-add: ((done? boolean))
cn0: location for oarg ((done? boolean)): 6
cn0: (((jump-if)) ((done? boolean)) ((5 offset))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (screen 1) (x 2)) ((call-stack t))
cn0: checking arg ((done? boolean))
maybe-add: ((done? boolean))
cn0: checking arg ((5 offset))
cn0: (((s string-address)) <- ((index)) ((c string-address-array-address) (deref)) ((i integer))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (screen 1) (x 2)) ((call-stack t))
cn0: checking arg ((c string-address-array-address) (deref))
maybe-add: ((c string-address-array-address) (deref))
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking oarg ((s string-address))
maybe-add: ((s string-address))
cn0: location for oarg ((s string-address)): 7
cn0: (((print-string)) ((screen terminal-address)) ((s string-address))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (s 7) (screen 1) (x 2)) ((call-stack t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((s string-address))
maybe-add: ((s string-address))
cn0: (((print-character)) ((screen terminal-address)) ((/ literal))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (s 7) (screen 1) (x 2)) ((call-stack t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((/ literal))
cn0: (((i integer)) <- ((add)) ((i integer)) ((1 literal))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (s 7) (screen 1) (x 2)) ((call-stack t))
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((i integer))
maybe-add: ((i integer))
cn0: (((jump)) ((-7 offset))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (s 7) (screen 1) (x 2)) ((call-stack t))
cn0: checking arg ((-7 offset))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (s 7) (screen 1) (x 2)) ((call-stack t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((p string-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((pc offset))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (s 7) (screen 1) (x 2)) ((call-stack t))
cn0: field-access pc in xinstruction-trace-addressderef of type instruction-trace
cn0: new field; computing location
cn0: field location 1
cn0: checking arg ((x instruction-trace-address) (deref))
maybe-add: ((x instruction-trace-address) (deref))
cn0: checking arg ((pc offset))
cn0: checking oarg ((p string-address))
maybe-add: ((p string-address))
cn0: location for oarg ((p string-address)): 8
cn0: (((print-string)) ((screen terminal-address)) ((p string-address))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((p string-address))
maybe-add: ((p string-address))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((print-character)) ((screen terminal-address)) ((: literal))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((: literal))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((i string-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((instruction offset))) ((c 3) (call-stack 0) (done? 6) (i 4) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (pc t))
cn0: field-access instruction in xinstruction-trace-addressderef of type instruction-trace
cn0: new field; computing location
cn0: field location 2
cn0: checking arg ((x instruction-trace-address) (deref))
maybe-add: ((x instruction-trace-address) (deref))
cn0: checking arg ((instruction offset))
cn0: checking oarg ((i string-address))
maybe-add: ((i string-address))
cn0: (((print-string)) ((screen terminal-address)) ((i string-address))) ((c 3) (call-stack 0) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (instruction t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((i string-address))
maybe-add: ((i string-address))
cn0: (((add-line)) ((0 space-address) (screen-state)) ((screen terminal-address))) ((c 3) (call-stack 0) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (instruction t) (pc t))
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((ch trace-address-array-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((children offset))) ((c 3) (call-stack 0) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (instruction t) (pc t))
cn0: field-access children in xinstruction-trace-addressderef of type instruction-trace
cn0: new field; computing location
cn0: field location 3
cn0: checking arg ((x instruction-trace-address) (deref))
maybe-add: ((x instruction-trace-address) (deref))
cn0: checking arg ((children offset))
cn0: checking oarg ((ch trace-address-array-address))
maybe-add: ((ch trace-address-array-address))
cn0: location for oarg ((ch trace-address-array-address)): 9
cn0: (((i integer)) <- ((copy)) ((0 literal))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((0 literal))
cn0: checking oarg ((i integer))
maybe-add: ((i integer))
cn0: (((jump-if)) ((ch trace-address-array-address)) ((1 offset))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((ch trace-address-array-address))
maybe-add: ((ch trace-address-array-address))
cn0: checking arg ((1 offset))
cn0: (((reply))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: (((len integer)) <- ((length)) ((ch trace-address-array-address) (deref))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((ch trace-address-array-address) (deref))
maybe-add: ((ch trace-address-array-address) (deref))
cn0: checking oarg ((len integer))
maybe-add: ((len integer))
cn0: (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((len integer))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking arg ((len integer))
maybe-add: ((len integer))
cn0: checking oarg ((done? boolean))
maybe-add: ((done? boolean))
cn0: (((jump-if)) ((done? boolean)) ((10 offset))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((done? boolean))
maybe-add: ((done? boolean))
cn0: checking arg ((10 offset))
cn0: (((screen-done? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((screen-height integer) (space 1))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((screen-height integer) (space 1))
maybe-add: ((screen-height integer) (space 1))
cn0: checking oarg ((screen-done? boolean))
maybe-add: ((screen-done? boolean))
cn0: location for oarg ((screen-done? boolean)): 10
cn0: (((jump-if)) ((screen-done? boolean)) ((8 offset))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (screen-done? 10) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((screen-done? boolean))
maybe-add: ((screen-done? boolean))
cn0: checking arg ((8 offset))
cn0: (((t trace-address)) <- ((index)) ((ch trace-address-array-address) (deref)) ((i integer))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (screen-done? 10) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((ch trace-address-array-address) (deref))
maybe-add: ((ch trace-address-array-address) (deref))
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking oarg ((t trace-address))
maybe-add: ((t trace-address))
cn0: location for oarg ((t trace-address)): 11
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (screen-done? 10) (t 11) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (screen-done? 10) (t 11) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (screen-done? 10) (t 11) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((print-trace)) ((screen terminal-address)) ((t trace-address))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (screen-done? 10) (t 11) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((t trace-address))
maybe-add: ((t trace-address))
cn0: (((add-line)) ((0 space-address) (screen-state)) ((screen terminal-address))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (screen-done? 10) (t 11) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((i integer)) <- ((add)) ((i integer)) ((1 literal))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (screen-done? 10) (t 11) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((i integer))
maybe-add: ((i integer))
cn0: (((jump)) ((-12 offset))) ((c 3) (call-stack 0) (ch 9) (children 3) (done? 6) (i 4) (instruction 2) (len 5) (p 8) (pc 1) (s 7) (screen 1) (screen-done? 10) (t 11) (x 2)) ((call-stack t) (children t) (instruction t) (pc t))
cn0: checking arg ((-12 offset))
cn0: convert-names in print-instruction-trace-collapsed
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((screen terminal)) <- ((next-input))) nil nil
cn0: checking oarg ((screen terminal))
maybe-add: ((screen terminal))
cn0: location for oarg ((screen terminal)): 1
cn0: (((x instruction-trace-address)) <- ((next-input))) ((screen 1)) nil
cn0: checking oarg ((x instruction-trace-address))
maybe-add: ((x instruction-trace-address))
cn0: location for oarg ((x instruction-trace-address)): 6
cn0: (((screen-state space-address)) <- ((next-input))) ((screen 1) (x 6)) nil
cn0: checking oarg ((screen-state space-address))
maybe-add: ((screen-state space-address))
cn0: location for oarg ((screen-state space-address)): 7
cn0: (((clear-line)) ((screen terminal-address))) ((screen 1) (screen-state 7) (x 6)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((print-character)) ((screen terminal-address)) ((+ literal))) ((screen 1) (screen-state 7) (x 6)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((+ literal))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((screen 1) (screen-state 7) (x 6)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((c string-address-array-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((call-stack offset))) ((screen 1) (screen-state 7) (x 6)) nil
cn0: field-access call-stack in xinstruction-trace-addressderef of type instruction-trace
cn0: new field; computing location
cn0: field location 0
cn0: checking arg ((x instruction-trace-address) (deref))
maybe-add: ((x instruction-trace-address) (deref))
cn0: checking arg ((call-stack offset))
cn0: checking oarg ((c string-address-array-address))
maybe-add: ((c string-address-array-address))
cn0: location for oarg ((c string-address-array-address)): 8
cn0: (((i integer)) <- ((copy)) ((0 literal))) ((c 8) (call-stack 0) (screen 1) (screen-state 7) (x 6)) ((call-stack t))
cn0: checking arg ((0 literal))
cn0: checking oarg ((i integer))
maybe-add: ((i integer))
cn0: location for oarg ((i integer)): 9
cn0: (((len integer)) <- ((length)) ((c string-address-array-address) (deref))) ((c 8) (call-stack 0) (i 9) (screen 1) (screen-state 7) (x 6)) ((call-stack t))
cn0: checking arg ((c string-address-array-address) (deref))
maybe-add: ((c string-address-array-address) (deref))
cn0: checking oarg ((len integer))
maybe-add: ((len integer))
cn0: location for oarg ((len integer)): 10
cn0: (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((len integer))) ((c 8) (call-stack 0) (i 9) (len 10) (screen 1) (screen-state 7) (x 6)) ((call-stack t))
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking arg ((len integer))
maybe-add: ((len integer))
cn0: checking oarg ((done? boolean))
maybe-add: ((done? boolean))
cn0: location for oarg ((done? boolean)): 11
cn0: (((jump-if)) ((done? boolean)) ((5 offset))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (screen 1) (screen-state 7) (x 6)) ((call-stack t))
cn0: checking arg ((done? boolean))
maybe-add: ((done? boolean))
cn0: checking arg ((5 offset))
cn0: (((s string-address)) <- ((index)) ((c string-address-array-address) (deref)) ((i integer))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (screen 1) (screen-state 7) (x 6)) ((call-stack t))
cn0: checking arg ((c string-address-array-address) (deref))
maybe-add: ((c string-address-array-address) (deref))
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking oarg ((s string-address))
maybe-add: ((s string-address))
cn0: location for oarg ((s string-address)): 12
cn0: (((print-string)) ((screen terminal-address)) ((s string-address))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((s string-address))
maybe-add: ((s string-address))
cn0: (((print-character)) ((screen terminal-address)) ((/ literal))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((/ literal))
cn0: (((i integer)) <- ((add)) ((i integer)) ((1 literal))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t))
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((i integer))
maybe-add: ((i integer))
cn0: (((jump)) ((-7 offset))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t))
cn0: checking arg ((-7 offset))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((p string-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((pc offset))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t))
cn0: field-access pc in xinstruction-trace-addressderef of type instruction-trace
cn0: new field; computing location
cn0: field location 1
cn0: checking arg ((x instruction-trace-address) (deref))
maybe-add: ((x instruction-trace-address) (deref))
cn0: checking arg ((pc offset))
cn0: checking oarg ((p string-address))
maybe-add: ((p string-address))
cn0: location for oarg ((p string-address)): 13
cn0: (((print-string)) ((screen terminal-address)) ((p string-address))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (p 13) (pc 1) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((p string-address))
maybe-add: ((p string-address))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (p 13) (pc 1) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((print-character)) ((screen terminal-address)) ((: literal))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (p 13) (pc 1) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((: literal))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (p 13) (pc 1) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((i string-address)) <- ((get)) ((x instruction-trace-address) (deref)) ((instruction offset))) ((c 8) (call-stack 0) (done? 11) (i 9) (len 10) (p 13) (pc 1) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t) (pc t))
cn0: field-access instruction in xinstruction-trace-addressderef of type instruction-trace
cn0: new field; computing location
cn0: field location 2
cn0: checking arg ((x instruction-trace-address) (deref))
maybe-add: ((x instruction-trace-address) (deref))
cn0: checking arg ((instruction offset))
cn0: checking oarg ((i string-address))
maybe-add: ((i string-address))
cn0: (((print-string)) ((screen terminal-address)) ((i string-address))) ((c 8) (call-stack 0) (done? 11) (i 9) (instruction 2) (len 10) (p 13) (pc 1) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t) (instruction t) (pc t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((i string-address))
maybe-add: ((i string-address))
cn0: (((add-line)) ((screen-state space-address)) ((screen terminal-address))) ((c 8) (call-stack 0) (done? 11) (i 9) (instruction 2) (len 10) (p 13) (pc 1) (s 12) (screen 1) (screen-state 7) (x 6)) ((call-stack t) (instruction t) (pc t))
cn0: checking arg ((screen-state space-address))
maybe-add: ((screen-state space-address))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: convert-names in print-trace
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((screen terminal-address)) <- ((next-input))) nil nil
cn0: checking oarg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: location for oarg ((screen terminal-address)): 1
cn0: (((x trace-address)) <- ((next-input))) ((screen 1)) nil
cn0: checking oarg ((x trace-address))
maybe-add: ((x trace-address))
cn0: location for oarg ((x trace-address)): 2
cn0: (((l string-address)) <- ((get)) ((x trace-address) (deref)) ((label offset))) ((screen 1) (x 2)) nil
cn0: field-access label in xtrace-addressderef of type trace
cn0: new field; computing location
cn0: field location 0
cn0: checking arg ((x trace-address) (deref))
maybe-add: ((x trace-address) (deref))
cn0: checking arg ((label offset))
cn0: checking oarg ((l string-address))
maybe-add: ((l string-address))
cn0: location for oarg ((l string-address)): 3
cn0: (((clear-line)) ((screen terminal-address))) ((l 3) (label 0) (screen 1) (x 2)) ((label t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((print-string)) ((screen terminal-address)) ((l string-address))) ((l 3) (label 0) (screen 1) (x 2)) ((label t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((l string-address))
maybe-add: ((l string-address))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((l 3) (label 0) (screen 1) (x 2)) ((label t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((print-character)) ((screen terminal-address)) ((: literal))) ((l 3) (label 0) (screen 1) (x 2)) ((label t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((: literal))
cn0: (((print-character)) ((screen terminal-address)) ((  literal))) ((l 3) (label 0) (screen 1) (x 2)) ((label t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((  literal))
cn0: (((c string-address)) <- ((get)) ((x trace-address) (deref)) ((contents offset))) ((l 3) (label 0) (screen 1) (x 2)) ((label t))
cn0: field-access contents in xtrace-addressderef of type trace
cn0: new field; computing location
cn0: field location 1
cn0: checking arg ((x trace-address) (deref))
maybe-add: ((x trace-address) (deref))
cn0: checking arg ((contents offset))
cn0: checking oarg ((c string-address))
maybe-add: ((c string-address))
cn0: location for oarg ((c string-address)): 4
cn0: (((print-string)) ((screen terminal-address)) ((c string-address))) ((c 4) (contents 1) (l 3) (label 0) (screen 1) (x 2)) ((contents t) (label t))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((c string-address))
maybe-add: ((c string-address))
cn0: convert-names in print-traces-collapsed
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((0 space-address) (names screen-state)) <- ((next-input))) nil nil
cn0: checking oarg ((0 space-address) (names screen-state))
maybe-add: ((0 space-address) (names screen-state))
cn0: (((screen terminal-address)) <- ((next-input))) nil nil
cn0: checking oarg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: location for oarg ((screen terminal-address)): 1
cn0: (((print-traces-collapsed-from)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((0 literal) (from))) ((screen 1)) nil
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((0 literal) (from))
cn0: convert-names in print-traces-collapsed-from
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((0 space-address) (names screen-state)) <- ((next-input))) nil nil
cn0: checking oarg ((0 space-address) (names screen-state))
maybe-add: ((0 space-address) (names screen-state))
cn0: (((screen terminal-address)) <- ((next-input))) nil nil
cn0: checking oarg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: location for oarg ((screen terminal-address)): 1
cn0: (((trace-index integer)) <- ((next-input))) ((screen 1)) nil
cn0: checking oarg ((trace-index integer))
maybe-add: ((trace-index integer))
cn0: location for oarg ((trace-index integer)): 2
cn0: (((len integer)) <- ((length)) ((traces instruction-trace-address-array-address) (space 1) (deref))) ((screen 1) (trace-index 2)) nil
cn0: checking arg ((traces instruction-trace-address-array-address) (space 1) (deref))
maybe-add: ((traces instruction-trace-address-array-address) (space 1) (deref))
cn0: checking oarg ((len integer))
maybe-add: ((len integer))
cn0: location for oarg ((len integer)): 3
cn0: (((height integer)) <- ((min)) ((len integer)) ((screen-height integer) (space 1))) ((len 3) (screen 1) (trace-index 2)) nil
cn0: checking arg ((len integer))
maybe-add: ((len integer))
cn0: checking arg ((screen-height integer) (space 1))
maybe-add: ((screen-height integer) (space 1))
cn0: checking oarg ((height integer))
maybe-add: ((height integer))
cn0: location for oarg ((height integer)): 4
cn0: (((trace-done? boolean)) <- ((greater-or-equal)) ((trace-index integer)) ((len integer))) ((height 4) (len 3) (screen 1) (trace-index 2)) nil
cn0: checking arg ((trace-index integer))
maybe-add: ((trace-index integer))
cn0: checking arg ((len integer))
maybe-add: ((len integer))
cn0: checking oarg ((trace-done? boolean))
maybe-add: ((trace-done? boolean))
cn0: location for oarg ((trace-done? boolean)): 5
cn0: (((jump-if)) ((trace-done? boolean)) ((6 offset))) ((height 4) (len 3) (screen 1) (trace-done? 5) (trace-index 2)) nil
cn0: checking arg ((trace-done? boolean))
maybe-add: ((trace-done? boolean))
cn0: checking arg ((6 offset))
cn0: (((screen-done? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((screen-height integer) (space 1))) ((height 4) (len 3) (screen 1) (trace-done? 5) (trace-index 2)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((screen-height integer) (space 1))
maybe-add: ((screen-height integer) (space 1))
cn0: checking oarg ((screen-done? boolean))
maybe-add: ((screen-done? boolean))
cn0: location for oarg ((screen-done? boolean)): 6
cn0: (((jump-if)) ((screen-done? boolean)) ((4 offset))) ((height 4) (len 3) (screen 1) (screen-done? 6) (trace-done? 5) (trace-index 2)) nil
cn0: checking arg ((screen-done? boolean))
maybe-add: ((screen-done? boolean))
cn0: checking arg ((4 offset))
cn0: (((tr instruction-trace-address)) <- ((index)) ((traces instruction-trace-address-array-address) (space 1) (deref)) ((trace-index integer))) ((height 4) (len 3) (screen 1) (screen-done? 6) (trace-done? 5) (trace-index 2)) nil
cn0: checking arg ((traces instruction-trace-address-array-address) (space 1) (deref))
maybe-add: ((traces instruction-trace-address-array-address) (space 1) (deref))
cn0: checking arg ((trace-index integer))
maybe-add: ((trace-index integer))
cn0: checking oarg ((tr instruction-trace-address))
maybe-add: ((tr instruction-trace-address))
cn0: location for oarg ((tr instruction-trace-address)): 7
cn0: (((print-instruction-trace-collapsed)) ((screen terminal-address)) ((tr instruction-trace-address)) ((0 space-address) (screen-state))) ((height 4) (len 3) (screen 1) (screen-done? 6) (tr 7) (trace-done? 5) (trace-index 2)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((tr instruction-trace-address))
maybe-add: ((tr instruction-trace-address))
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: (((trace-index integer)) <- ((add)) ((trace-index integer)) ((1 literal))) ((height 4) (len 3) (screen 1) (screen-done? 6) (tr 7) (trace-done? 5) (trace-index 2)) nil
cn0: checking arg ((trace-index integer))
maybe-add: ((trace-index integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((trace-index integer))
maybe-add: ((trace-index integer))
cn0: (((jump)) ((-8 offset))) ((height 4) (len 3) (screen 1) (screen-done? 6) (tr 7) (trace-done? 5) (trace-index 2)) nil
cn0: checking arg ((-8 offset))
cn0: (((done? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((app-height integer) (space 1))) ((height 4) (len 3) (screen 1) (screen-done? 6) (tr 7) (trace-done? 5) (trace-index 2)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((app-height integer) (space 1))
maybe-add: ((app-height integer) (space 1))
cn0: checking oarg ((done? boolean))
maybe-add: ((done? boolean))
cn0: location for oarg ((done? boolean)): 8
cn0: (((jump-if)) ((done? boolean)) ((3 offset))) ((done? 8) (height 4) (len 3) (screen 1) (screen-done? 6) (tr 7) (trace-done? 5) (trace-index 2)) nil
cn0: checking arg ((done? boolean))
maybe-add: ((done? boolean))
cn0: checking arg ((3 offset))
cn0: (((clear-line)) ((screen terminal-address))) ((done? 8) (height 4) (len 3) (screen 1) (screen-done? 6) (tr 7) (trace-done? 5) (trace-index 2)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((down)) ((0 space-address) (screen-state)) ((screen terminal-address))) ((done? 8) (height 4) (len 3) (screen 1) (screen-done? 6) (tr 7) (trace-done? 5) (trace-index 2)) nil
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((jump)) ((-5 offset))) ((done? 8) (height 4) (len 3) (screen 1) (screen-done? 6) (tr 7) (trace-done? 5) (trace-index 2)) nil
cn0: checking arg ((-5 offset))
cn0: convert-names in process-key
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((0 space-address) (names screen-state)) <- ((next-input))) nil nil
cn0: checking oarg ((0 space-address) (names screen-state))
maybe-add: ((0 space-address) (names screen-state))
cn0: (((k keyboard-address)) <- ((next-input))) nil nil
cn0: checking oarg ((k keyboard-address))
maybe-add: ((k keyboard-address))
cn0: location for oarg ((k keyboard-address)): 1
cn0: (((screen terminal-address)) <- ((next-input))) ((k 1)) nil
cn0: checking oarg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: location for oarg ((screen terminal-address)): 2
cn0: (((c character)) <- ((read-key)) ((k keyboard-address)) ((silent literal) (terminal))) ((k 1) (screen 2)) nil
cn0: checking arg ((k keyboard-address))
maybe-add: ((k keyboard-address))
cn0: checking arg ((silent literal) (terminal))
cn0: checking oarg ((c character))
maybe-add: ((c character))
cn0: location for oarg ((c character)): 3
cn0: (((jump-if)) ((c character)) ((1 offset))) ((c 3) (k 1) (screen 2)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking arg ((1 offset))
cn0: (((reply)) ((nil literal))) ((c 3) (k 1) (screen 2)) nil
cn0: checking arg ((nil literal))
cn0: (((q-pressed? boolean)) <- ((equal)) ((c character)) ((q literal))) ((c 3) (k 1) (screen 2)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking arg ((q literal))
cn0: checking oarg ((q-pressed? boolean))
maybe-add: ((q-pressed? boolean))
cn0: location for oarg ((q-pressed? boolean)): 4
cn0: (((end-of-fake-keyboard-input? boolean)) <- ((equal)) ((c character)) ((  literal))) ((c 3) (k 1) (q-pressed? 4) (screen 2)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking arg ((  literal))
cn0: checking oarg ((end-of-fake-keyboard-input? boolean))
maybe-add: ((end-of-fake-keyboard-input? boolean))
cn0: location for oarg ((end-of-fake-keyboard-input? boolean)): 5
cn0: (((quit? boolean)) <- ((or)) ((q-pressed? boolean)) ((end-of-fake-keyboard-input? boolean))) ((c 3) (end-of-fake-keyboard-input? 5) (k 1) (q-pressed? 4) (screen 2)) nil
cn0: checking arg ((q-pressed? boolean))
maybe-add: ((q-pressed? boolean))
cn0: checking arg ((end-of-fake-keyboard-input? boolean))
maybe-add: ((end-of-fake-keyboard-input? boolean))
cn0: checking oarg ((quit? boolean))
maybe-add: ((quit? boolean))
cn0: location for oarg ((quit? boolean)): 6
cn0: (((jump-unless)) ((quit? boolean)) ((1 offset))) ((c 3) (end-of-fake-keyboard-input? 5) (k 1) (q-pressed? 4) (quit? 6) (screen 2)) nil
cn0: checking arg ((quit? boolean))
maybe-add: ((quit? boolean))
cn0: checking arg ((1 offset))
cn0: (((reply)) ((t literal))) ((c 3) (end-of-fake-keyboard-input? 5) (k 1) (q-pressed? 4) (quit? 6) (screen 2)) nil
cn0: checking arg ((t literal))
cn0: (((up? boolean)) <- ((equal)) ((c character)) ((up literal))) ((c 3) (end-of-fake-keyboard-input? 5) (k 1) (q-pressed? 4) (quit? 6) (screen 2)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking arg ((up literal))
cn0: checking oarg ((up? boolean))
maybe-add: ((up? boolean))
cn0: location for oarg ((up? boolean)): 7
cn0: (((k? boolean)) <- ((equal)) ((c character)) ((k literal))) ((c 3) (end-of-fake-keyboard-input? 5) (k 1) (q-pressed? 4) (quit? 6) (screen 2) (up? 7)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking arg ((k literal))
cn0: checking oarg ((k? boolean))
maybe-add: ((k? boolean))
cn0: location for oarg ((k? boolean)): 8
cn0: (((up? boolean)) <- ((or)) ((up? boolean)) ((k? boolean))) ((c 3) (end-of-fake-keyboard-input? 5) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (up? 7)) nil
cn0: checking arg ((up? boolean))
maybe-add: ((up? boolean))
cn0: checking arg ((k? boolean))
maybe-add: ((k? boolean))
cn0: checking oarg ((up? boolean))
maybe-add: ((up? boolean))
cn0: (((jump-unless)) ((up? boolean)) ((2 offset))) ((c 3) (end-of-fake-keyboard-input? 5) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (up? 7)) nil
cn0: checking arg ((up? boolean))
maybe-add: ((up? boolean))
cn0: checking arg ((2 offset))
cn0: (((up)) ((0 space-address) (screen-state)) ((screen terminal-address))) ((c 3) (end-of-fake-keyboard-input? 5) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (up? 7)) nil
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((reply)) ((nil literal))) ((c 3) (end-of-fake-keyboard-input? 5) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (up? 7)) nil
cn0: checking arg ((nil literal))
cn0: (((down? boolean)) <- ((equal)) ((c character)) ((down literal))) ((c 3) (end-of-fake-keyboard-input? 5) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (up? 7)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking arg ((down literal))
cn0: checking oarg ((down? boolean))
maybe-add: ((down? boolean))
cn0: location for oarg ((down? boolean)): 9
cn0: (((j? boolean)) <- ((equal)) ((c character)) ((j literal))) ((c 3) (down? 9) (end-of-fake-keyboard-input? 5) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (up? 7)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking arg ((j literal))
cn0: checking oarg ((j? boolean))
maybe-add: ((j? boolean))
cn0: location for oarg ((j? boolean)): 10
cn0: (((down? boolean)) <- ((or)) ((down? boolean)) ((j? boolean))) ((c 3) (down? 9) (end-of-fake-keyboard-input? 5) (j? 10) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (up? 7)) nil
cn0: checking arg ((down? boolean))
maybe-add: ((down? boolean))
cn0: checking arg ((j? boolean))
maybe-add: ((j? boolean))
cn0: checking oarg ((down? boolean))
maybe-add: ((down? boolean))
cn0: (((jump-unless)) ((down? boolean)) ((2 offset))) ((c 3) (down? 9) (end-of-fake-keyboard-input? 5) (j? 10) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (up? 7)) nil
cn0: checking arg ((down? boolean))
maybe-add: ((down? boolean))
cn0: checking arg ((2 offset))
cn0: (((down)) ((0 space-address) (screen-state)) ((screen terminal-address))) ((c 3) (down? 9) (end-of-fake-keyboard-input? 5) (j? 10) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (up? 7)) nil
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((reply)) ((nil literal))) ((c 3) (down? 9) (end-of-fake-keyboard-input? 5) (j? 10) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (up? 7)) nil
cn0: checking arg ((nil literal))
cn0: (((toggle? boolean)) <- ((equal)) ((c character)) ((
 literal))) ((c 3) (down? 9) (end-of-fake-keyboard-input? 5) (j? 10) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (up? 7)) nil
cn0: checking arg ((c character))
maybe-add: ((c character))
cn0: checking arg ((
 literal))
cn0: checking oarg ((toggle? boolean))
maybe-add: ((toggle? boolean))
cn0: location for oarg ((toggle? boolean)): 11
cn0: (((jump-unless)) ((toggle? boolean)) ((28 offset))) ((c 3) (down? 9) (end-of-fake-keyboard-input? 5) (j? 10) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((toggle? boolean))
maybe-add: ((toggle? boolean))
cn0: checking arg ((28 offset))
cn0: (((original-cursor-row integer)) <- ((copy)) ((cursor-row integer) (space 1))) ((c 3) (down? 9) (end-of-fake-keyboard-input? 5) (j? 10) (k 1) (k? 8) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking oarg ((original-cursor-row integer))
maybe-add: ((original-cursor-row integer))
cn0: location for oarg ((original-cursor-row integer)): 12
cn0: (((original-trace-index integer)) <- ((cursor-row-to-trace-index)) ((0 space-address) (screen-state)) ((original-cursor-row integer))) ((c 3) (down? 9) (end-of-fake-keyboard-input? 5) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((original-cursor-row integer))
maybe-add: ((original-cursor-row integer))
cn0: checking oarg ((original-trace-index integer))
maybe-add: ((original-trace-index integer))
cn0: location for oarg ((original-trace-index integer)): 13
cn0: (((expanded? boolean)) <- ((greater-or-equal)) ((expanded-index integer) (space 1)) ((0 literal))) ((c 3) (down? 9) (end-of-fake-keyboard-input? 5) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking arg ((0 literal))
cn0: checking oarg ((expanded? boolean))
maybe-add: ((expanded? boolean))
cn0: location for oarg ((expanded? boolean)): 14
cn0: (((jump-unless)) ((expanded? boolean)) ((17 offset))) ((c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((expanded? boolean))
maybe-add: ((expanded? boolean))
cn0: checking arg ((17 offset))
cn0: (((at-expanded? boolean)) <- ((equal)) ((cursor-row integer) (space 1)) ((expanded-index integer) (space 1))) ((c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking oarg ((at-expanded? boolean))
maybe-add: ((at-expanded? boolean))
cn0: location for oarg ((at-expanded? boolean)): 15
cn0: (((jump-unless)) ((at-expanded? boolean)) ((4 offset))) ((at-expanded? 15) (c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((at-expanded? boolean))
maybe-add: ((at-expanded? boolean))
cn0: checking arg ((4 offset))
cn0: (((expanded-index integer) (space 1)) <- ((copy)) ((-1 literal))) ((at-expanded? 15) (c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((-1 literal))
cn0: checking oarg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: (((print-traces-collapsed-from)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((cursor-row integer) (space 1))) ((at-expanded? 15) (c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: (((back-to)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((original-cursor-row integer))) ((at-expanded? 15) (c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((original-cursor-row integer))
maybe-add: ((original-cursor-row integer))
cn0: (((reply))) ((at-expanded? 15) (c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: (((below-expanded? boolean)) <- ((greater-than)) ((cursor-row integer) (space 1)) ((expanded-index integer) (space 1))) ((at-expanded? 15) (c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking oarg ((below-expanded? boolean))
maybe-add: ((below-expanded? boolean))
cn0: location for oarg ((below-expanded? boolean)): 16
cn0: (((jump-unless)) ((below-expanded? boolean)) ((9 offset))) ((at-expanded? 15) (below-expanded? 16) (c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((below-expanded? boolean))
maybe-add: ((below-expanded? boolean))
cn0: checking arg ((9 offset))
cn0: (((at-expanded? boolean)) <- ((equal)) ((cursor-row integer) (space 1)) ((expanded-index integer) (space 1))) ((at-expanded? 15) (below-expanded? 16) (c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking oarg ((at-expanded? boolean))
maybe-add: ((at-expanded? boolean))
cn0: (((jump-if)) ((at-expanded? boolean)) ((2 offset))) ((at-expanded? 15) (below-expanded? 16) (c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((at-expanded? boolean))
maybe-add: ((at-expanded? boolean))
cn0: checking arg ((2 offset))
cn0: (((up)) ((0 space-address)) ((screen terminal-address))) ((at-expanded? 15) (below-expanded? 16) (c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((0 space-address))
maybe-add: ((0 space-address))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((jump)) ((-4 offset))) ((at-expanded? 15) (below-expanded? 16) (c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((-4 offset))
cn0: (((done? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((original-trace-index integer))) ((at-expanded? 15) (below-expanded? 16) (c 3) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((original-trace-index integer))
maybe-add: ((original-trace-index integer))
cn0: checking oarg ((done? boolean))
maybe-add: ((done? boolean))
cn0: location for oarg ((done? boolean)): 17
cn0: (((jump-if)) ((done? boolean)) ((3 offset))) ((at-expanded? 15) (below-expanded? 16) (c 3) (done? 17) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((done? boolean))
maybe-add: ((done? boolean))
cn0: checking arg ((3 offset))
cn0: (((tr instruction-trace-address)) <- ((index)) ((traces instruction-trace-address-array-address) (space 1) (deref)) ((cursor-row integer) (space 1))) ((at-expanded? 15) (below-expanded? 16) (c 3) (done? 17) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (up? 7)) nil
cn0: checking arg ((traces instruction-trace-address-array-address) (space 1) (deref))
maybe-add: ((traces instruction-trace-address-array-address) (space 1) (deref))
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking oarg ((tr instruction-trace-address))
maybe-add: ((tr instruction-trace-address))
cn0: location for oarg ((tr instruction-trace-address)): 18
cn0: (((print-instruction-trace-collapsed)) ((screen terminal-address)) ((tr instruction-trace-address)) ((0 space-address) (screen-state))) ((at-expanded? 15) (below-expanded? 16) (c 3) (done? 17) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (tr 18) (up? 7)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((tr instruction-trace-address))
maybe-add: ((tr instruction-trace-address))
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: (((jump)) ((-5 offset))) ((at-expanded? 15) (below-expanded? 16) (c 3) (done? 17) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (tr 18) (up? 7)) nil
cn0: checking arg ((-5 offset))
cn0: (((expanded-index integer) (space 1)) <- ((copy)) ((original-trace-index integer))) ((at-expanded? 15) (below-expanded? 16) (c 3) (done? 17) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (tr 18) (up? 7)) nil
cn0: checking arg ((original-trace-index integer))
maybe-add: ((original-trace-index integer))
cn0: checking oarg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: (((tr instruction-trace-address)) <- ((index)) ((traces instruction-trace-address-array-address) (space 1) (deref)) ((original-trace-index integer))) ((at-expanded? 15) (below-expanded? 16) (c 3) (done? 17) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (tr 18) (up? 7)) nil
cn0: checking arg ((traces instruction-trace-address-array-address) (space 1) (deref))
maybe-add: ((traces instruction-trace-address-array-address) (space 1) (deref))
cn0: checking arg ((original-trace-index integer))
maybe-add: ((original-trace-index integer))
cn0: checking oarg ((tr instruction-trace-address))
maybe-add: ((tr instruction-trace-address))
cn0: (((print-instruction-trace)) ((screen terminal-address)) ((tr instruction-trace-address)) ((0 space-address) (screen-state))) ((at-expanded? 15) (below-expanded? 16) (c 3) (done? 17) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (tr 18) (up? 7)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((tr instruction-trace-address))
maybe-add: ((tr instruction-trace-address))
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: (((next-index integer)) <- ((add)) ((original-trace-index integer)) ((1 literal))) ((at-expanded? 15) (below-expanded? 16) (c 3) (done? 17) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (tr 18) (up? 7)) nil
cn0: checking arg ((original-trace-index integer))
maybe-add: ((original-trace-index integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((next-index integer))
maybe-add: ((next-index integer))
cn0: location for oarg ((next-index integer)): 19
cn0: (((print-traces-collapsed-from)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((next-index integer))) ((at-expanded? 15) (below-expanded? 16) (c 3) (done? 17) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (next-index 19) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (tr 18) (up? 7)) nil
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((next-index integer))
maybe-add: ((next-index integer))
cn0: (((back-to)) ((0 space-address) (screen-state)) ((screen terminal-address)) ((original-trace-index integer))) ((at-expanded? 15) (below-expanded? 16) (c 3) (done? 17) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (next-index 19) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (tr 18) (up? 7)) nil
cn0: checking arg ((0 space-address) (screen-state))
maybe-add: ((0 space-address) (screen-state))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: checking arg ((original-trace-index integer))
maybe-add: ((original-trace-index integer))
cn0: (((reply)) ((nil literal))) ((at-expanded? 15) (below-expanded? 16) (c 3) (done? 17) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (next-index 19) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (tr 18) (up? 7)) nil
cn0: checking arg ((nil literal))
cn0: (((reply)) ((nil literal))) ((at-expanded? 15) (below-expanded? 16) (c 3) (done? 17) (down? 9) (end-of-fake-keyboard-input? 5) (expanded? 14) (j? 10) (k 1) (k? 8) (next-index 19) (original-cursor-row 12) (original-trace-index 13) (q-pressed? 4) (quit? 6) (screen 2) (toggle? 11) (tr 18) (up? 7)) nil
cn0: checking arg ((nil literal))
cn0: convert-names in screen-state
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((traces instruction-trace-address-array-address)) <- ((next-input))) nil nil
cn0: checking oarg ((traces instruction-trace-address-array-address))
maybe-add: ((traces instruction-trace-address-array-address))
cn0: location for oarg ((traces instruction-trace-address-array-address)): 1
cn0: (((screen-height integer)) <- ((next-input))) ((traces 1)) nil
cn0: checking oarg ((screen-height integer))
maybe-add: ((screen-height integer))
cn0: location for oarg ((screen-height integer)): 2
cn0: (((app-height integer)) <- ((copy)) ((0 literal))) ((screen-height 2) (traces 1)) nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((app-height integer))
maybe-add: ((app-height integer))
cn0: location for oarg ((app-height integer)): 3
cn0: (((printed-height integer)) <- ((copy)) ((0 literal))) ((app-height 3) (screen-height 2) (traces 1)) nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((printed-height integer))
maybe-add: ((printed-height integer))
cn0: location for oarg ((printed-height integer)): 4
cn0: (((cursor-row integer)) <- ((copy)) ((0 literal))) ((app-height 3) (printed-height 4) (screen-height 2) (traces 1)) nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((cursor-row integer))
maybe-add: ((cursor-row integer))
cn0: location for oarg ((cursor-row integer)): 5
cn0: (((expanded-index integer)) <- ((copy)) ((-1 literal))) ((app-height 3) (cursor-row 5) (printed-height 4) (screen-height 2) (traces 1)) nil
cn0: checking arg ((-1 literal))
cn0: checking oarg ((expanded-index integer))
maybe-add: ((expanded-index integer))
cn0: location for oarg ((expanded-index integer)): 6
cn0: (((reply)) ((default-space space-address))) ((app-height 3) (cursor-row 5) (expanded-index 6) (printed-height 4) (screen-height 2) (traces 1)) nil
cn0: checking arg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: convert-names in to-bottom
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((0 space-address) (names screen-state)) <- ((next-input))) nil nil
cn0: checking oarg ((0 space-address) (names screen-state))
maybe-add: ((0 space-address) (names screen-state))
cn0: (((screen terminal-address)) <- ((next-input))) nil nil
cn0: checking oarg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: location for oarg ((screen terminal-address)): 1
cn0: (((at-bottom? boolean)) <- ((greater-or-equal)) ((cursor-row integer) (space 1)) ((printed-height integer) (space 1))) ((screen 1)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((printed-height integer) (space 1))
maybe-add: ((printed-height integer) (space 1))
cn0: checking oarg ((at-bottom? boolean))
maybe-add: ((at-bottom? boolean))
cn0: location for oarg ((at-bottom? boolean)): 2
cn0: (((jump-if)) ((at-bottom? boolean)) ((2 offset))) ((at-bottom? 2) (screen 1)) nil
cn0: checking arg ((at-bottom? boolean))
maybe-add: ((at-bottom? boolean))
cn0: checking arg ((2 offset))
cn0: (((down)) ((0 space-address)) ((screen terminal-address))) ((at-bottom? 2) (screen 1)) nil
cn0: checking arg ((0 space-address))
maybe-add: ((0 space-address))
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((jump)) ((-4 offset))) ((at-bottom? 2) (screen 1)) nil
cn0: checking arg ((-4 offset))
cn0: convert-names in up
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal) (capacity))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((0 space-address) (names screen-state)) <- ((next-input))) nil nil
cn0: checking oarg ((0 space-address) (names screen-state))
maybe-add: ((0 space-address) (names screen-state))
cn0: (((screen terminal-address)) <- ((next-input))) nil nil
cn0: checking oarg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: location for oarg ((screen terminal-address)): 1
cn0: (((no-expanded? boolean)) <- ((less-than)) ((expanded-index integer) (space 1)) ((0 literal))) ((screen 1)) nil
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking arg ((0 literal))
cn0: checking oarg ((no-expanded? boolean))
maybe-add: ((no-expanded? boolean))
cn0: location for oarg ((no-expanded? boolean)): 2
cn0: (((jump-if)) ((no-expanded? boolean)) ((13 offset))) ((no-expanded? 2) (screen 1)) nil
cn0: checking arg ((no-expanded? boolean))
maybe-add: ((no-expanded? boolean))
cn0: checking arg ((13 offset))
cn0: (((n integer)) <- ((instruction-trace-num-children)) ((traces instruction-trace-address-array-address) (space 1)) ((expanded-index integer) (space 1))) ((no-expanded? 2) (screen 1)) nil
cn0: checking arg ((traces instruction-trace-address-array-address) (space 1))
maybe-add: ((traces instruction-trace-address-array-address) (space 1))
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking oarg ((n integer))
maybe-add: ((n integer))
cn0: location for oarg ((n integer)): 3
cn0: (((n integer)) <- ((add)) ((n integer)) ((1 literal))) ((n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((n integer))
maybe-add: ((n integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((n integer))
maybe-add: ((n integer))
cn0: (((cursor-row-below-expanded integer)) <- ((add)) ((expanded-index integer) (space 1)) ((n integer))) ((n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((expanded-index integer) (space 1))
maybe-add: ((expanded-index integer) (space 1))
cn0: checking arg ((n integer))
maybe-add: ((n integer))
cn0: checking oarg ((cursor-row-below-expanded integer))
maybe-add: ((cursor-row-below-expanded integer))
cn0: location for oarg ((cursor-row-below-expanded integer)): 4
cn0: (((just-below-expanded? boolean)) <- ((equal)) ((cursor-row integer) (space 1)) ((cursor-row-below-expanded integer))) ((cursor-row-below-expanded 4) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((cursor-row-below-expanded integer))
maybe-add: ((cursor-row-below-expanded integer))
cn0: checking oarg ((just-below-expanded? boolean))
maybe-add: ((just-below-expanded? boolean))
cn0: location for oarg ((just-below-expanded? boolean)): 5
cn0: (((jump-unless)) ((just-below-expanded? boolean)) ((8 offset))) ((cursor-row-below-expanded 4) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((just-below-expanded? boolean))
maybe-add: ((just-below-expanded? boolean))
cn0: checking arg ((8 offset))
cn0: (((i integer)) <- ((copy)) ((0 literal))) ((cursor-row-below-expanded 4) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((i integer))
maybe-add: ((i integer))
cn0: location for oarg ((i integer)): 6
cn0: (((done? boolean)) <- ((greater-or-equal)) ((i integer)) ((n integer))) ((cursor-row-below-expanded 4) (i 6) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking arg ((n integer))
maybe-add: ((n integer))
cn0: checking oarg ((done? boolean))
maybe-add: ((done? boolean))
cn0: location for oarg ((done? boolean)): 7
cn0: (((jump-if)) ((done? boolean)) ((4 offset))) ((cursor-row-below-expanded 4) (done? 7) (i 6) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((done? boolean))
maybe-add: ((done? boolean))
cn0: checking arg ((4 offset))
cn0: (((cursor-row integer) (space 1)) <- ((subtract)) ((cursor-row integer) (space 1)) ((1 literal))) ((cursor-row-below-expanded 4) (done? 7) (i 6) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((1 literal))
cn0: checking oarg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: (((cursor-up)) ((screen terminal-address))) ((cursor-row-below-expanded 4) (done? 7) (i 6) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn0: (((i integer)) <- ((add)) ((i integer)) ((1 literal))) ((cursor-row-below-expanded 4) (done? 7) (i 6) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((i integer))
maybe-add: ((i integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((i integer))
maybe-add: ((i integer))
cn0: (((jump)) ((-6 offset))) ((cursor-row-below-expanded 4) (done? 7) (i 6) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((-6 offset))
cn0: (((reply))) ((cursor-row-below-expanded 4) (done? 7) (i 6) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: (((at-top? boolean)) <- ((lesser-or-equal)) ((cursor-row integer) (space 1)) ((0 literal))) ((cursor-row-below-expanded 4) (done? 7) (i 6) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((0 literal))
cn0: checking oarg ((at-top? boolean))
maybe-add: ((at-top? boolean))
cn0: location for oarg ((at-top? boolean)): 8
cn0: (((jump-if)) ((at-top? boolean)) ((2 offset))) ((at-top? 8) (cursor-row-below-expanded 4) (done? 7) (i 6) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((at-top? boolean))
maybe-add: ((at-top? boolean))
cn0: checking arg ((2 offset))
cn0: (((cursor-row integer) (space 1)) <- ((subtract)) ((cursor-row integer) (space 1)) ((1 literal))) ((at-top? 8) (cursor-row-below-expanded 4) (done? 7) (i 6) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: checking arg ((1 literal))
cn0: checking oarg ((cursor-row integer) (space 1))
maybe-add: ((cursor-row integer) (space 1))
cn0: (((cursor-up)) ((screen terminal-address))) ((at-top? 8) (cursor-row-below-expanded 4) (done? 7) (i 6) (just-below-expanded? 5) (n 3) (no-expanded? 2) (screen 1)) nil
cn0: checking arg ((screen terminal-address))
maybe-add: ((screen terminal-address))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((0 space-address) (names screen-state)) <- ((next-input)))
cn1: (((1 terminal-address)) <- ((next-input)))
cn1: (((2 boolean)) <- ((greater-or-equal)) ((5 integer) (space 1)) ((4 integer) (space 1)))
cn1: (((jump-unless)) ((2 boolean)) ((9 offset)))
cn1: (((3 boolean)) <- ((greater-or-equal)) ((3 integer) (space 1)) ((2 integer) (space 1)))
cn1: (((jump-unless)) ((3 boolean)) ((3 offset)))
cn1: (((cursor-to-next-line)) ((1 terminal-address)))
cn1: (((cursor-up)) ((1 terminal-address)))
cn1: (((reply)))
cn1: (((4 integer) (space 1)) <- ((add)) ((4 integer) (space 1)) ((1 literal)))
cn1: (((4 boolean)) <- ((greater-than)) ((4 integer) (space 1)) ((3 integer) (space 1)))
cn1: (((jump-unless)) ((4 boolean)) ((1 offset)))
cn1: (((3 integer) (space 1)) <- ((copy)) ((4 integer) (space 1)))
cn1: (((5 integer) (space 1)) <- ((add)) ((5 integer) (space 1)) ((1 literal)))
cn1: (((cursor-to-next-line)) ((1 terminal-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((0 space-address) (names screen-state)) <- ((next-input)))
cn1: (((1 terminal-address)) <- ((next-input)))
cn1: (((2 integer)) <- ((next-input)))
cn1: (((3 boolean)) <- ((greater-than)) ((5 integer) (space 1)) ((2 integer)))
cn1: (((jump-unless)) ((3 boolean)) ((2 offset)))
cn1: (((up)) ((0 space-address)) ((1 terminal-address)))
cn1: (((jump)) ((-4 offset)))
cn1: (((4 boolean)) <- ((less-than)) ((5 integer) (space 1)) ((2 integer)))
cn1: (((jump-unless)) ((4 boolean)) ((2 offset)))
cn1: (((down)) ((0 space-address)) ((1 terminal-address)))
cn1: (((jump)) ((-4 offset)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((1 string-address)) <- ((next-input)))
cn1: (((2 integer)) <- ((next-input)))
cn1: (((3 stream-address)) <- ((init-stream)) ((1 string-address)))
cn1: (((4 instruction-trace-address-array-address)) <- ((parse-traces)) ((3 stream-address)))
cn1: (((0 space-address) (names screen-state)) <- ((screen-state)) ((4 instruction-trace-address-array-address)) ((2 integer)))
cn1: (((cursor-mode)))
cn1: (((print-traces-collapsed)) ((0 space-address) (screen-state)) ((nil literal) (terminal)))
cn1: (((5 boolean)) <- ((process-key)) ((0 space-address) (screen-state)) ((nil literal) (keyboard)) ((nil literal) (terminal)))
cn1: (((jump-if)) ((5 boolean)) ((1 offset)))
cn1: (((jump)) ((-3 offset)))
cn1: (((to-bottom)) ((0 space-address) (screen-state)) ((nil literal) (terminal)))
cn1: (((retro-mode)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((0 space-address) (names screen-state)) <- ((next-input)))
cn1: (((1 integer) (screen)) <- ((next-input)))
cn1: (((2 boolean)) <- ((greater-or-equal)) ((6 integer) (space 1)) ((0 literal)))
cn1: (((jump-if)) ((2 boolean)) ((1 offset)))
cn1: (((reply)) ((1 integer) (index)))
cn1: (((3 boolean)) <- ((lesser-or-equal)) ((5 integer) (space 1) (screen)) ((6 integer) (space 1)))
cn1: (((jump-unless)) ((3 boolean)) ((1 offset)))
cn1: (((reply)) ((1 integer) (index)))
cn1: (((4 integer) (index)) <- ((instruction-trace-num-children)) ((1 instruction-trace-address-array-address) (space 1)) ((6 integer) (space 1)))
cn1: (((5 integer) (index)) <- ((subtract)) ((1 integer) (screen)) ((4 integer) (index)))
cn1: (((reply)) ((5 integer) (index)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((0 space-address) (names screen-state)) <- ((next-input)))
cn1: (((1 terminal-address)) <- ((next-input)))
cn1: (((2 boolean)) <- ((less-than)) ((6 integer) (space 1)) ((0 literal)))
cn1: (((jump-if)) ((2 boolean)) ((12 offset)))
cn1: (((3 boolean)) <- ((equal)) ((5 integer) (space 1)) ((6 integer) (space 1)))
cn1: (((jump-unless)) ((3 boolean)) ((10 offset)))
cn1: (((4 integer)) <- ((instruction-trace-num-children)) ((1 instruction-trace-address-array-address) (space 1)) ((6 integer) (space 1)))
cn1: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
cn1: (((5 integer)) <- ((copy)) ((0 literal)))
cn1: (((6 boolean)) <- ((greater-or-equal)) ((5 integer)) ((4 integer)))
cn1: (((jump-if)) ((6 boolean)) ((4 offset)))
cn1: (((5 integer) (space 1)) <- ((add)) ((5 integer) (space 1)) ((1 literal)))
cn1: (((cursor-down)) ((1 terminal-address)))
cn1: (((5 integer)) <- ((add)) ((5 integer)) ((1 literal)))
cn1: (((jump)) ((-6 offset)))
cn1: (((reply)))
cn1: (((7 boolean)) <- ((greater-or-equal)) ((5 integer) (space 1)) ((4 integer) (space 1)))
cn1: (((jump-if)) ((7 boolean)) ((2 offset)))
cn1: (((5 integer) (space 1)) <- ((add)) ((5 integer) (space 1)) ((1 literal)))
cn1: (((cursor-down)) ((1 terminal-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 instruction-trace-address-array-address)) <- ((next-input)))
cn1: (((2 integer)) <- ((next-input)))
cn1: (((3 instruction-trace-address)) <- ((index)) ((1 instruction-trace-address-array-address) (deref)) ((2 integer)))
cn1: (((4 trace-address-array-address)) <- ((get)) ((3 instruction-trace-address) (deref)) ((3 offset)))
cn1: (((5 integer)) <- ((length)) ((4 instruction-trace-address-array-address) (deref)))
cn1: (((reply)) ((5 integer)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((1 string-address)) <- ((new)) run: main 0: (((1 integer)) <- ((copy)) ((1 literal))))
cn1: (((2 integer)) <- ((length)) ((1 string-address) (deref)))
cn1: ((($print)) ((p2  literal)))
cn1: ((($print)) ((2 integer)))
cn1: ((($print)) ((
 literal)))
cn1: (((3 stream-address)) <- ((init-stream)) ((1 string-address)))
cn1: (((4 instruction-trace-address-array-address)) <- ((parse-traces)) ((3 stream-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 trace-address)) <- ((next-input)))
cn1: (((2 string-address)) <- ((get)) ((1 trace-address) (deref)) ((1 offset)))
cn1: (((3 instruction-trace-address)) <- ((new)) ((instruction-trace literal)))
cn1: (((4 string-address)) ((5 string-address)) <- ((split-first)) ((2 string-address)) ((  literal)))
cn1: (((6 string-address-array-address-address)) <- ((get-address)) ((3 instruction-trace-address) (deref)) ((0 offset)))
cn1: (((6 string-address-array-address-address) (deref)) <- ((split)) ((4 string-address)) ((/ literal)))
cn1: (((7 string-address-address)) <- ((get-address)) ((3 instruction-trace-address) (deref)) ((1 offset)))
cn1: (((8 string-address)) <- ((new)) : )
cn1: (((7 string-address-address) (deref)) ((5 string-address)) <- ((split-first-at-substring)) ((5 string-address)) ((8 string-address)))
cn1: (((9 string-address-address)) <- ((get-address)) ((3 instruction-trace-address) (deref)) ((2 offset)))
cn1: (((9 string-address-address) (deref)) <- ((copy)) ((5 string-address)))
cn1: (((reply)) ((3 instruction-trace-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 string-address)) <- ((next-input)))
cn1: (((2 trace-address)) <- ((new)) ((trace literal)))
cn1: (((3 string-address)) <- ((new)) : )
cn1: (((4 string-address)) ((5 string-address)) <- ((split-first-at-substring)) ((1 string-address)) ((3 string-address)))
cn1: (((6 string-address-address)) <- ((get-address)) ((2 trace-address) (deref)) ((0 offset)))
cn1: (((6 string-address-address) (deref)) <- ((copy)) ((4 string-address)))
cn1: (((7 string-address-address)) <- ((get-address)) ((2 trace-address) (deref)) ((1 offset)))
cn1: (((7 string-address-address) (deref)) <- ((copy)) ((5 string-address)))
cn1: (((reply)) ((2 trace-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 stream-address)) <- ((next-input)))
cn1: (((2 buffer-address)) <- ((init-buffer)) ((30 literal)))
cn1: (((3 instruction-trace-address)) <- ((copy)) ((nil literal)))
cn1: (((4 buffer-address)) <- ((init-buffer)) ((5 literal)))
cn1: (((5 string-address) (const)) <- ((new)) run)
cn1: next-line
cn1: (((6 boolean)) <- ((end-of-stream?)) ((1 stream-address)))
cn1: (((jump-if)) ((6 boolean)) ((15 offset)))
cn1: (((7 string-address)) <- ((read-line)) ((1 stream-address)))
cn1: (((8 trace-address)) <- ((parse-trace)) ((7 string-address)))
cn1: (((9 string-address)) <- ((get)) ((8 trace-address) (deref)) ((0 offset)))
cn1: (((10 boolean)) <- ((string-equal)) ((9 string-address)) ((5 string-address) (const)))
cn1: (((jump-unless)) ((10 boolean)) ((7 offset)))
cn1: (((jump-unless)) ((3 instruction-trace-address)) ((3 offset)))
cn1: (((11 trace-address-array-address-address)) <- ((get-address)) ((3 instruction-trace-address) (deref)) ((3 offset)))
cn1: (((11 trace-address-array-address-address) (deref)) <- ((to-array)) ((4 buffer-address)))
cn1: (((4 buffer-address)) <- ((init-buffer)) ((5 literal)))
cn1: (((3 instruction-trace-address)) <- ((parse-instruction-trace)) ((8 trace-address)))
cn1: (((2 buffer-address)) <- ((append)) ((2 buffer-address)) ((3 instruction-trace-address)))
cn1: (((jump)) ((-15 offset)))
cn1: (((jump-unless)) ((3 instruction-trace-address)) ((-16 offset)))
cn1: (((4 buffer-address)) <- ((append)) ((4 buffer-address)) ((8 trace-address)))
cn1: (((jump)) ((-18 offset)))
cn1: (((jump-unless)) ((3 instruction-trace-address)) ((2 offset)))
cn1: (((11 trace-address-array-address-address)) <- ((get-address)) ((3 instruction-trace-address) (deref)) ((3 offset)))
cn1: (((11 trace-address-array-address-address) (deref)) <- ((to-array)) ((4 buffer-address)))
cn1: (((12 instruction-trace-address-array-address)) <- ((to-array)) ((2 buffer-address)))
cn1: (((reply)) ((12 instruction-trace-address-array-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 terminal-address)) <- ((next-input)))
cn1: (((2 instruction-trace-address)) <- ((next-input)))
cn1: (((0 space-address) (names screen-state)) <- ((next-input)))
cn1: (((clear-line)) ((1 terminal-address)))
cn1: (((print-character)) ((1 terminal-address)) ((- literal)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((3 string-address-array-address)) <- ((get)) ((2 instruction-trace-address) (deref)) ((0 offset)))
cn1: (((4 integer)) <- ((copy)) ((0 literal)))
cn1: (((5 integer)) <- ((length)) ((3 string-address-array-address) (deref)))
cn1: (((6 boolean)) <- ((greater-or-equal)) ((4 integer)) ((5 integer)))
cn1: (((jump-if)) ((6 boolean)) ((5 offset)))
cn1: (((7 string-address)) <- ((index)) ((3 string-address-array-address) (deref)) ((4 integer)))
cn1: (((print-string)) ((1 terminal-address)) ((7 string-address)))
cn1: (((print-character)) ((1 terminal-address)) ((/ literal)))
cn1: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
cn1: (((jump)) ((-7 offset)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((8 string-address)) <- ((get)) ((2 instruction-trace-address) (deref)) ((1 offset)))
cn1: (((print-string)) ((1 terminal-address)) ((8 string-address)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((print-character)) ((1 terminal-address)) ((: literal)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((4 string-address)) <- ((get)) ((2 instruction-trace-address) (deref)) ((2 offset)))
cn1: (((print-string)) ((1 terminal-address)) ((4 string-address)))
cn1: (((add-line)) ((0 space-address) (screen-state)) ((1 terminal-address)))
cn1: (((9 trace-address-array-address)) <- ((get)) ((2 instruction-trace-address) (deref)) ((3 offset)))
cn1: (((4 integer)) <- ((copy)) ((0 literal)))
cn1: (((jump-if)) ((9 trace-address-array-address)) ((1 offset)))
cn1: (((reply)))
cn1: (((5 integer)) <- ((length)) ((9 trace-address-array-address) (deref)))
cn1: (((6 boolean)) <- ((greater-or-equal)) ((4 integer)) ((5 integer)))
cn1: (((jump-if)) ((6 boolean)) ((10 offset)))
cn1: (((10 boolean)) <- ((greater-or-equal)) ((5 integer) (space 1)) ((2 integer) (space 1)))
cn1: (((jump-if)) ((10 boolean)) ((8 offset)))
cn1: (((11 trace-address)) <- ((index)) ((9 trace-address-array-address) (deref)) ((4 integer)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((print-trace)) ((1 terminal-address)) ((11 trace-address)))
cn1: (((add-line)) ((0 space-address) (screen-state)) ((1 terminal-address)))
cn1: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
cn1: (((jump)) ((-12 offset)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 terminal)) <- ((next-input)))
cn1: (((6 instruction-trace-address)) <- ((next-input)))
cn1: (((7 space-address)) <- ((next-input)))
cn1: (((clear-line)) ((1 terminal-address)))
cn1: (((print-character)) ((1 terminal-address)) ((+ literal)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((8 string-address-array-address)) <- ((get)) ((6 instruction-trace-address) (deref)) ((0 offset)))
cn1: (((9 integer)) <- ((copy)) ((0 literal)))
cn1: (((10 integer)) <- ((length)) ((8 string-address-array-address) (deref)))
cn1: (((11 boolean)) <- ((greater-or-equal)) ((9 integer)) ((10 integer)))
cn1: (((jump-if)) ((11 boolean)) ((5 offset)))
cn1: (((12 string-address)) <- ((index)) ((8 string-address-array-address) (deref)) ((9 integer)))
cn1: (((print-string)) ((1 terminal-address)) ((12 string-address)))
cn1: (((print-character)) ((1 terminal-address)) ((/ literal)))
cn1: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
cn1: (((jump)) ((-7 offset)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((13 string-address)) <- ((get)) ((6 instruction-trace-address) (deref)) ((1 offset)))
cn1: (((print-string)) ((1 terminal-address)) ((13 string-address)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((print-character)) ((1 terminal-address)) ((: literal)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((9 string-address)) <- ((get)) ((6 instruction-trace-address) (deref)) ((2 offset)))
cn1: (((print-string)) ((1 terminal-address)) ((9 string-address)))
cn1: (((add-line)) ((7 space-address)) ((1 terminal-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 terminal-address)) <- ((next-input)))
cn1: (((2 trace-address)) <- ((next-input)))
cn1: (((3 string-address)) <- ((get)) ((2 trace-address) (deref)) ((0 offset)))
cn1: (((clear-line)) ((1 terminal-address)))
cn1: (((print-string)) ((1 terminal-address)) ((3 string-address)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((print-character)) ((1 terminal-address)) ((: literal)))
cn1: (((print-character)) ((1 terminal-address)) ((  literal)))
cn1: (((4 string-address)) <- ((get)) ((2 trace-address) (deref)) ((1 offset)))
cn1: (((print-string)) ((1 terminal-address)) ((4 string-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((0 space-address) (names screen-state)) <- ((next-input)))
cn1: (((1 terminal-address)) <- ((next-input)))
cn1: (((print-traces-collapsed-from)) ((0 space-address) (screen-state)) ((1 terminal-address)) ((0 literal) (from)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((0 space-address) (names screen-state)) <- ((next-input)))
cn1: (((1 terminal-address)) <- ((next-input)))
cn1: (((2 integer)) <- ((next-input)))
cn1: (((3 integer)) <- ((length)) ((1 instruction-trace-address-array-address) (space 1) (deref)))
cn1: (((4 integer)) <- ((min)) ((3 integer)) ((2 integer) (space 1)))
cn1: (((5 boolean)) <- ((greater-or-equal)) ((2 integer)) ((3 integer)))
cn1: (((jump-if)) ((5 boolean)) ((6 offset)))
cn1: (((6 boolean)) <- ((greater-or-equal)) ((5 integer) (space 1)) ((2 integer) (space 1)))
cn1: (((jump-if)) ((6 boolean)) ((4 offset)))
cn1: (((7 instruction-trace-address)) <- ((index)) ((1 instruction-trace-address-array-address) (space 1) (deref)) ((2 integer)))
cn1: (((print-instruction-trace-collapsed)) ((1 terminal-address)) ((7 instruction-trace-address)) ((0 space-address) (screen-state)))
cn1: (((2 integer)) <- ((add)) ((2 integer)) ((1 literal)))
cn1: (((jump)) ((-8 offset)))
cn1: (((8 boolean)) <- ((greater-or-equal)) ((5 integer) (space 1)) ((3 integer) (space 1)))
cn1: (((jump-if)) ((8 boolean)) ((3 offset)))
cn1: (((clear-line)) ((1 terminal-address)))
cn1: (((down)) ((0 space-address) (screen-state)) ((1 terminal-address)))
cn1: (((jump)) ((-5 offset)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((0 space-address) (names screen-state)) <- ((next-input)))
cn1: (((1 keyboard-address)) <- ((next-input)))
cn1: (((2 terminal-address)) <- ((next-input)))
cn1: (((3 character)) <- ((read-key)) ((1 keyboard-address)) ((silent literal) (terminal)))
cn1: (((jump-if)) ((3 character)) ((1 offset)))
cn1: (((reply)) ((nil literal)))
cn1: (((4 boolean)) <- ((equal)) ((3 character)) ((q literal)))
cn1: (((5 boolean)) <- ((equal)) ((3 character)) ((  literal)))
cn1: (((6 boolean)) <- ((or)) ((4 boolean)) ((5 boolean)))
cn1: (((jump-unless)) ((6 boolean)) ((1 offset)))
cn1: (((reply)) ((t literal)))
cn1: (((7 boolean)) <- ((equal)) ((3 character)) ((up literal)))
cn1: (((8 boolean)) <- ((equal)) ((3 character)) ((k literal)))
cn1: (((7 boolean)) <- ((or)) ((7 boolean)) ((8 boolean)))
cn1: (((jump-unless)) ((7 boolean)) ((2 offset)))
cn1: (((up)) ((0 space-address) (screen-state)) ((2 terminal-address)))
cn1: (((reply)) ((nil literal)))
cn1: (((9 boolean)) <- ((equal)) ((3 character)) ((down literal)))
cn1: (((10 boolean)) <- ((equal)) ((3 character)) ((j literal)))
cn1: (((9 boolean)) <- ((or)) ((9 boolean)) ((10 boolean)))
cn1: (((jump-unless)) ((9 boolean)) ((2 offset)))
cn1: (((down)) ((0 space-address) (screen-state)) ((2 terminal-address)))
cn1: (((reply)) ((nil literal)))
cn1: (((11 boolean)) <- ((equal)) ((3 character)) ((
 literal)))
cn1: (((jump-unless)) ((11 boolean)) ((28 offset)))
cn1: (((12 integer)) <- ((copy)) ((5 integer) (space 1)))
cn1: (((13 integer)) <- ((cursor-row-to-trace-index)) ((0 space-address) (screen-state)) ((12 integer)))
cn1: (((14 boolean)) <- ((greater-or-equal)) ((6 integer) (space 1)) ((0 literal)))
cn1: (((jump-unless)) ((14 boolean)) ((17 offset)))
cn1: (((15 boolean)) <- ((equal)) ((5 integer) (space 1)) ((6 integer) (space 1)))
cn1: (((jump-unless)) ((15 boolean)) ((4 offset)))
cn1: (((6 integer) (space 1)) <- ((copy)) ((-1 literal)))
cn1: (((print-traces-collapsed-from)) ((0 space-address) (screen-state)) ((2 terminal-address)) ((5 integer) (space 1)))
cn1: (((back-to)) ((0 space-address) (screen-state)) ((2 terminal-address)) ((12 integer)))
cn1: (((reply)))
cn1: (((16 boolean)) <- ((greater-than)) ((5 integer) (space 1)) ((6 integer) (space 1)))
cn1: (((jump-unless)) ((16 boolean)) ((9 offset)))
cn1: (((15 boolean)) <- ((equal)) ((5 integer) (space 1)) ((6 integer) (space 1)))
cn1: (((jump-if)) ((15 boolean)) ((2 offset)))
cn1: (((up)) ((0 space-address)) ((2 terminal-address)))
cn1: (((jump)) ((-4 offset)))
cn1: (((17 boolean)) <- ((greater-or-equal)) ((5 integer) (space 1)) ((13 integer)))
cn1: (((jump-if)) ((17 boolean)) ((3 offset)))
cn1: (((18 instruction-trace-address)) <- ((index)) ((1 instruction-trace-address-array-address) (space 1) (deref)) ((5 integer) (space 1)))
cn1: (((print-instruction-trace-collapsed)) ((2 terminal-address)) ((18 instruction-trace-address)) ((0 space-address) (screen-state)))
cn1: (((jump)) ((-5 offset)))
cn1: (((6 integer) (space 1)) <- ((copy)) ((13 integer)))
cn1: (((18 instruction-trace-address)) <- ((index)) ((1 instruction-trace-address-array-address) (space 1) (deref)) ((13 integer)))
cn1: (((print-instruction-trace)) ((2 terminal-address)) ((18 instruction-trace-address)) ((0 space-address) (screen-state)))
cn1: (((19 integer)) <- ((add)) ((13 integer)) ((1 literal)))
cn1: (((print-traces-collapsed-from)) ((0 space-address) (screen-state)) ((2 terminal-address)) ((19 integer)))
cn1: (((back-to)) ((0 space-address) (screen-state)) ((2 terminal-address)) ((13 integer)))
cn1: (((reply)) ((nil literal)))
cn1: (((reply)) ((nil literal)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((1 instruction-trace-address-array-address)) <- ((next-input)))
cn1: (((2 integer)) <- ((next-input)))
cn1: (((3 integer)) <- ((copy)) ((0 literal)))
cn1: (((4 integer)) <- ((copy)) ((0 literal)))
cn1: (((5 integer)) <- ((copy)) ((0 literal)))
cn1: (((6 integer)) <- ((copy)) ((-1 literal)))
cn1: (((reply)) ((default-space space-address)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((0 space-address) (names screen-state)) <- ((next-input)))
cn1: (((1 terminal-address)) <- ((next-input)))
cn1: (((2 boolean)) <- ((greater-or-equal)) ((5 integer) (space 1)) ((4 integer) (space 1)))
cn1: (((jump-if)) ((2 boolean)) ((2 offset)))
cn1: (((down)) ((0 space-address)) ((1 terminal-address)))
cn1: (((jump)) ((-4 offset)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
cn1: (((0 space-address) (names screen-state)) <- ((next-input)))
cn1: (((1 terminal-address)) <- ((next-input)))
cn1: (((2 boolean)) <- ((less-than)) ((6 integer) (space 1)) ((0 literal)))
cn1: (((jump-if)) ((2 boolean)) ((13 offset)))
cn1: (((3 integer)) <- ((instruction-trace-num-children)) ((1 instruction-trace-address-array-address) (space 1)) ((6 integer) (space 1)))
cn1: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
cn1: (((4 integer)) <- ((add)) ((6 integer) (space 1)) ((3 integer)))
cn1: (((5 boolean)) <- ((equal)) ((5 integer) (space 1)) ((4 integer)))
cn1: (((jump-unless)) ((5 boolean)) ((8 offset)))
cn1: (((6 integer)) <- ((copy)) ((0 literal)))
cn1: (((7 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
cn1: (((jump-if)) ((7 boolean)) ((4 offset)))
cn1: (((5 integer) (space 1)) <- ((subtract)) ((5 integer) (space 1)) ((1 literal)))
cn1: (((cursor-up)) ((1 terminal-address)))
cn1: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
cn1: (((jump)) ((-6 offset)))
cn1: (((reply)))
cn1: (((8 boolean)) <- ((lesser-or-equal)) ((5 integer) (space 1)) ((0 literal)))
cn1: (((jump-if)) ((8 boolean)) ((2 offset)))
cn1: (((5 integer) (space 1)) <- ((subtract)) ((5 integer) (space 1)) ((1 literal)))
cn1: (((cursor-up)) ((1 terminal-address)))
schedule: main
run: main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal) (capacity)))
run: main 0: 1000 => ((default-space space-address))
run: main 1: (((1 string-address)) <- ((new)) run: main 0: (((1 integer)) <- ((copy)) ((1 literal))))
run: main 1: 1031 => ((1 string-address))
mem: ((1 string-address)): 1002 <= 1031
run: main 2: (((2 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1031 integer) (raw)) => 54
run: main 2: 54 => ((2 integer))
mem: ((2 integer)): 1003 <= 54
run: main 3: ((($print)) ((p2  literal)))
run: main 4: ((($print)) ((2 integer)))
mem: ((2 integer)) => 54
run: main 5: ((($print)) ((
 literal)))
run: main 6: (((3 stream-address)) <- ((init-stream)) ((1 string-address)))
mem: ((1 string-address)) => 1031
run: init-stream/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-stream/main 0: 1086 => ((default-space space-address))
run: init-stream/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1031)
run: init-stream/main 1: 1031 => ((1 string-address))
mem: ((1 string-address)): 1088 <= 1031
run: init-stream/main 2: (((2 stream-address)) <- ((new)) ((stream literal)))
run: init-stream/main 2: 1117 => ((2 stream-address))
mem: ((2 stream-address)): 1089 <= 1117
run: init-stream/main 3: (((3 integer-address)) <- ((get-address)) ((2 stream-address) (deref)) ((0 offset)))
run: init-stream/main 3: 1117 => ((3 integer-address))
mem: ((3 integer-address)): 1090 <= 1117
run: init-stream/main 4: (((3 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: init-stream/main 4: 0 => ((3 integer-address) (deref))
mem: ((3 integer-address) (deref)): 1117 <= 0
run: init-stream/main 5: (((4 string-address-address)) <- ((get-address)) ((2 stream-address) (deref)) ((1 offset)))
run: init-stream/main 5: 1118 => ((4 string-address-address))
mem: ((4 string-address-address)): 1091 <= 1118
run: init-stream/main 6: (((4 string-address-address) (deref)) <- ((copy)) ((1 string-address)))
mem: ((1 string-address)) => 1031
run: init-stream/main 6: 1031 => ((4 string-address-address) (deref))
mem: ((4 string-address-address) (deref)): 1118 <= 1031
run: init-stream/main 7: (((reply)) ((2 stream-address)))
mem: ((2 stream-address)) => 1117
run: main 6: 1117 => ((3 stream-address))
mem: ((3 stream-address)): 1004 <= 1117
run: main 7: (((4 instruction-trace-address-array-address)) <- ((parse-traces)) ((3 stream-address)))
mem: ((3 stream-address)) => 1117
run: parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: parse-traces/main 0: 1119 => ((default-space space-address))
run: parse-traces/main 1: (((1 stream-address)) <- ((next-input)))
arg: nil 0 (1117)
run: parse-traces/main 1: 1117 => ((1 stream-address))
mem: ((1 stream-address)): 1121 <= 1117
run: parse-traces/main 2: (((2 buffer-address)) <- ((init-buffer)) ((30 literal)))
run: init-buffer/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-buffer/parse-traces/main 0: 1150 => ((default-space space-address))
run: init-buffer/parse-traces/main 1: (((1 buffer-address)) <- ((new)) ((buffer literal)))
run: init-buffer/parse-traces/main 1: 1181 => ((1 buffer-address))
mem: ((1 buffer-address)): 1152 <= 1181
run: init-buffer/parse-traces/main 2: (((2 integer-address)) <- ((get-address)) ((1 buffer-address) (deref)) ((0 offset)))
run: init-buffer/parse-traces/main 2: 1181 => ((2 integer-address))
mem: ((2 integer-address)): 1153 <= 1181
run: init-buffer/parse-traces/main 3: (((2 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: init-buffer/parse-traces/main 3: 0 => ((2 integer-address) (deref))
mem: ((2 integer-address) (deref)): 1181 <= 0
run: init-buffer/parse-traces/main 4: (((3 string-address-address)) <- ((get-address)) ((1 buffer-address) (deref)) ((1 offset)))
run: init-buffer/parse-traces/main 4: 1182 => ((3 string-address-address))
mem: ((3 string-address-address)): 1154 <= 1182
run: init-buffer/parse-traces/main 5: (((4 integer)) <- ((next-input)))
arg: nil 0 (30)
run: init-buffer/parse-traces/main 5: 30 => ((4 integer))
mem: ((4 integer)): 1155 <= 30
run: init-buffer/parse-traces/main 6: (((3 string-address-address) (deref)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 30
run: init-buffer/parse-traces/main 6: 1183 => ((3 string-address-address) (deref))
mem: ((3 string-address-address) (deref)): 1182 <= 1183
run: init-buffer/parse-traces/main 7: (((reply)) ((1 buffer-address)))
mem: ((1 buffer-address)) => 1181
run: parse-traces/main 2: 1181 => ((2 buffer-address))
mem: ((2 buffer-address)): 1122 <= 1181
run: parse-traces/main 3: (((3 instruction-trace-address)) <- ((copy)) ((nil literal)))
run: parse-traces/main 3: nil => ((3 instruction-trace-address))
mem: ((3 instruction-trace-address)): 1123 <= nil
run: parse-traces/main 4: (((4 buffer-address)) <- ((init-buffer)) ((5 literal)))
run: init-buffer/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-buffer/parse-traces/main 0: 1214 => ((default-space space-address))
run: init-buffer/parse-traces/main 1: (((1 buffer-address)) <- ((new)) ((buffer literal)))
run: init-buffer/parse-traces/main 1: 1245 => ((1 buffer-address))
mem: ((1 buffer-address)): 1216 <= 1245
run: init-buffer/parse-traces/main 2: (((2 integer-address)) <- ((get-address)) ((1 buffer-address) (deref)) ((0 offset)))
run: init-buffer/parse-traces/main 2: 1245 => ((2 integer-address))
mem: ((2 integer-address)): 1217 <= 1245
run: init-buffer/parse-traces/main 3: (((2 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: init-buffer/parse-traces/main 3: 0 => ((2 integer-address) (deref))
mem: ((2 integer-address) (deref)): 1245 <= 0
run: init-buffer/parse-traces/main 4: (((3 string-address-address)) <- ((get-address)) ((1 buffer-address) (deref)) ((1 offset)))
run: init-buffer/parse-traces/main 4: 1246 => ((3 string-address-address))
mem: ((3 string-address-address)): 1218 <= 1246
run: init-buffer/parse-traces/main 5: (((4 integer)) <- ((next-input)))
arg: nil 0 (5)
run: init-buffer/parse-traces/main 5: 5 => ((4 integer))
mem: ((4 integer)): 1219 <= 5
run: init-buffer/parse-traces/main 6: (((3 string-address-address) (deref)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 5
run: init-buffer/parse-traces/main 6: 1247 => ((3 string-address-address) (deref))
mem: ((3 string-address-address) (deref)): 1246 <= 1247
run: init-buffer/parse-traces/main 7: (((reply)) ((1 buffer-address)))
mem: ((1 buffer-address)) => 1245
run: parse-traces/main 4: 1245 => ((4 buffer-address))
mem: ((4 buffer-address)): 1124 <= 1245
run: parse-traces/main 5: (((5 string-address) (const)) <- ((new)) run)
run: parse-traces/main 5: 1253 => ((5 string-address) (const))
mem: ((5 string-address) (const)): 1125 <= 1253
run: parse-traces/main 6: next-line
run: parse-traces/main 7: (((6 boolean)) <- ((end-of-stream?)) ((1 stream-address)))
mem: ((1 stream-address)) => 1117
run: end-of-stream?/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: end-of-stream?/parse-traces/main 0: 1257 => ((default-space space-address))
run: end-of-stream?/parse-traces/main 1: (((1 stream-address)) <- ((next-input)))
arg: nil 0 (1117)
run: end-of-stream?/parse-traces/main 1: 1117 => ((1 stream-address))
mem: ((1 stream-address)): 1259 <= 1117
run: end-of-stream?/parse-traces/main 2: (((2 integer)) <- ((get)) ((1 stream-address) (deref)) ((0 offset)))
mem: ((1117 integer) (raw)) => 0
run: end-of-stream?/parse-traces/main 2: 0 => ((2 integer))
mem: ((2 integer)): 1260 <= 0
run: end-of-stream?/parse-traces/main 3: (((3 string-address)) <- ((get)) ((1 stream-address) (deref)) ((1 offset)))
mem: ((1118 string-address) (raw)) => 1031
run: end-of-stream?/parse-traces/main 3: 1031 => ((3 string-address))
mem: ((3 string-address)): 1261 <= 1031
run: end-of-stream?/parse-traces/main 4: (((4 integer)) <- ((length)) ((3 string-address) (deref)))
array-len: ((3 string-address) (deref))
mem: ((1031 integer) (raw)) => 54
run: end-of-stream?/parse-traces/main 4: 54 => ((4 integer))
mem: ((4 integer)): 1262 <= 54
run: end-of-stream?/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((2 integer)) ((4 integer)))
mem: ((2 integer)) => 0
mem: ((4 integer)) => 54
run: end-of-stream?/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1263 <= nil
run: end-of-stream?/parse-traces/main 6: (((reply)) ((5 boolean)))
mem: ((5 boolean)) => nil
run: parse-traces/main 7: nil => ((6 boolean))
mem: ((6 boolean)): 1126 <= nil
run: parse-traces/main 8: (((jump-if)) ((6 boolean)) ((15 offset)))
mem: ((6 boolean)) => nil
run: parse-traces/main 9: (((7 string-address)) <- ((read-line)) ((1 stream-address)))
mem: ((1 stream-address)) => 1117
run: read-line/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: read-line/parse-traces/main 0: 1288 => ((default-space space-address))
run: read-line/parse-traces/main 1: (((1 stream-address)) <- ((next-input)))
arg: nil 0 (1117)
run: read-line/parse-traces/main 1: 1117 => ((1 stream-address))
mem: ((1 stream-address)): 1290 <= 1117
run: read-line/parse-traces/main 2: (((2 integer-address)) <- ((get-address)) ((1 stream-address) (deref)) ((0 offset)))
run: read-line/parse-traces/main 2: 1117 => ((2 integer-address))
mem: ((2 integer-address)): 1291 <= 1117
run: read-line/parse-traces/main 3: (((3 string-address)) <- ((get)) ((1 stream-address) (deref)) ((1 offset)))
mem: ((1118 string-address) (raw)) => 1031
run: read-line/parse-traces/main 3: 1031 => ((3 string-address))
mem: ((3 string-address)): 1292 <= 1031
run: read-line/parse-traces/main 4: (((4 integer)) <- ((find-next)) ((3 string-address)) ((
 literal)) ((2 integer-address) (deref)))
mem: ((3 string-address)) => 1031
mem: ((2 integer-address) (deref)) => 0
run: find-next/read-line/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/read-line/parse-traces/main 0: 1319 => ((default-space space-address))
run: find-next/read-line/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1031 #\newline 0)
run: find-next/read-line/parse-traces/main 1: 1031 => ((1 string-address))
mem: ((1 string-address)): 1321 <= 1031
run: find-next/read-line/parse-traces/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1031 #\newline 0)
run: find-next/read-line/parse-traces/main 2: #\newline => ((2 character))
mem: ((2 character)): 1322 <= #\newline
run: find-next/read-line/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1031 #\newline 0)
run: find-next/read-line/parse-traces/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1323 <= 0
run: find-next/read-line/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1031 integer) (raw)) => 54
run: find-next/read-line/parse-traces/main 4: 54 => ((4 integer))
mem: ((4 integer)): 1324 <= 54
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 0
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1032 byte) (raw)) => r
run: find-next/read-line/parse-traces/main 7: #\r => ((6 byte))
mem: ((6 byte)): 1326 <= #\r
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => r
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-next/read-line/parse-traces/main 10: 1 => ((3 integer))
mem: ((3 integer)): 1323 <= 1
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1033 byte) (raw)) => u
run: find-next/read-line/parse-traces/main 7: #\u => ((6 byte))
mem: ((6 byte)): 1326 <= #\u
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => u
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 1
run: find-next/read-line/parse-traces/main 10: 2 => ((3 integer))
mem: ((3 integer)): 1323 <= 2
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1034 byte) (raw)) => n
run: find-next/read-line/parse-traces/main 7: #\n => ((6 byte))
mem: ((6 byte)): 1326 <= #\n
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => n
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-next/read-line/parse-traces/main 10: 3 => ((3 integer))
mem: ((3 integer)): 1323 <= 3
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1035 byte) (raw)) => :
run: find-next/read-line/parse-traces/main 7: #\: => ((6 byte))
mem: ((6 byte)): 1326 <= #\:
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => :
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 3
run: find-next/read-line/parse-traces/main 10: 4 => ((3 integer))
mem: ((3 integer)): 1323 <= 4
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 4
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 4
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1036 byte) (raw)) =>  
run: find-next/read-line/parse-traces/main 7: #\space => ((6 byte))
mem: ((6 byte)): 1326 <= #\space
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) =>  
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 4
run: find-next/read-line/parse-traces/main 10: 5 => ((3 integer))
mem: ((3 integer)): 1323 <= 5
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 5
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 5
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1037 byte) (raw)) => m
run: find-next/read-line/parse-traces/main 7: #\m => ((6 byte))
mem: ((6 byte)): 1326 <= #\m
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => m
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 5
run: find-next/read-line/parse-traces/main 10: 6 => ((3 integer))
mem: ((3 integer)): 1323 <= 6
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 6
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 6
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1038 byte) (raw)) => a
run: find-next/read-line/parse-traces/main 7: #\a => ((6 byte))
mem: ((6 byte)): 1326 <= #\a
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => a
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 6
run: find-next/read-line/parse-traces/main 10: 7 => ((3 integer))
mem: ((3 integer)): 1323 <= 7
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 7
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 7
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1039 byte) (raw)) => i
run: find-next/read-line/parse-traces/main 7: #\i => ((6 byte))
mem: ((6 byte)): 1326 <= #\i
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => i
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 7
run: find-next/read-line/parse-traces/main 10: 8 => ((3 integer))
mem: ((3 integer)): 1323 <= 8
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 8
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 8
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1040 byte) (raw)) => n
run: find-next/read-line/parse-traces/main 7: #\n => ((6 byte))
mem: ((6 byte)): 1326 <= #\n
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => n
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 8
run: find-next/read-line/parse-traces/main 10: 9 => ((3 integer))
mem: ((3 integer)): 1323 <= 9
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 9
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 9
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1041 byte) (raw)) =>  
run: find-next/read-line/parse-traces/main 7: #\space => ((6 byte))
mem: ((6 byte)): 1326 <= #\space
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) =>  
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 9
run: find-next/read-line/parse-traces/main 10: 10 => ((3 integer))
mem: ((3 integer)): 1323 <= 10
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 10
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 10
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1042 byte) (raw)) => 0
run: find-next/read-line/parse-traces/main 7: #\0 => ((6 byte))
mem: ((6 byte)): 1326 <= #\0
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => 0
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 10
run: find-next/read-line/parse-traces/main 10: 11 => ((3 integer))
mem: ((3 integer)): 1323 <= 11
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 11
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 11
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1043 byte) (raw)) => :
run: find-next/read-line/parse-traces/main 7: #\: => ((6 byte))
mem: ((6 byte)): 1326 <= #\:
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => :
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 11
run: find-next/read-line/parse-traces/main 10: 12 => ((3 integer))
mem: ((3 integer)): 1323 <= 12
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 12
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 12
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1044 byte) (raw)) =>  
run: find-next/read-line/parse-traces/main 7: #\space => ((6 byte))
mem: ((6 byte)): 1326 <= #\space
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) =>  
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 12
run: find-next/read-line/parse-traces/main 10: 13 => ((3 integer))
mem: ((3 integer)): 1323 <= 13
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 13
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 13
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1045 byte) (raw)) => (
run: find-next/read-line/parse-traces/main 7: #\( => ((6 byte))
mem: ((6 byte)): 1326 <= #\(
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => (
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 13
run: find-next/read-line/parse-traces/main 10: 14 => ((3 integer))
mem: ((3 integer)): 1323 <= 14
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 14
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 14
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1046 byte) (raw)) => (
run: find-next/read-line/parse-traces/main 7: #\( => ((6 byte))
mem: ((6 byte)): 1326 <= #\(
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => (
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 14
run: find-next/read-line/parse-traces/main 10: 15 => ((3 integer))
mem: ((3 integer)): 1323 <= 15
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 15
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 15
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1047 byte) (raw)) => (
run: find-next/read-line/parse-traces/main 7: #\( => ((6 byte))
mem: ((6 byte)): 1326 <= #\(
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => (
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 15
run: find-next/read-line/parse-traces/main 10: 16 => ((3 integer))
mem: ((3 integer)): 1323 <= 16
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 16
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 16
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1048 byte) (raw)) => 1
run: find-next/read-line/parse-traces/main 7: #\1 => ((6 byte))
mem: ((6 byte)): 1326 <= #\1
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => 1
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 16
run: find-next/read-line/parse-traces/main 10: 17 => ((3 integer))
mem: ((3 integer)): 1323 <= 17
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 17
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 17
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1049 byte) (raw)) =>  
run: find-next/read-line/parse-traces/main 7: #\space => ((6 byte))
mem: ((6 byte)): 1326 <= #\space
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) =>  
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 17
run: find-next/read-line/parse-traces/main 10: 18 => ((3 integer))
mem: ((3 integer)): 1323 <= 18
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 18
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 18
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1050 byte) (raw)) => i
run: find-next/read-line/parse-traces/main 7: #\i => ((6 byte))
mem: ((6 byte)): 1326 <= #\i
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => i
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 18
run: find-next/read-line/parse-traces/main 10: 19 => ((3 integer))
mem: ((3 integer)): 1323 <= 19
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 19
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 19
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1051 byte) (raw)) => n
run: find-next/read-line/parse-traces/main 7: #\n => ((6 byte))
mem: ((6 byte)): 1326 <= #\n
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => n
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 19
run: find-next/read-line/parse-traces/main 10: 20 => ((3 integer))
mem: ((3 integer)): 1323 <= 20
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 20
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 20
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1052 byte) (raw)) => t
run: find-next/read-line/parse-traces/main 7: #\t => ((6 byte))
mem: ((6 byte)): 1326 <= #\t
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => t
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 20
run: find-next/read-line/parse-traces/main 10: 21 => ((3 integer))
mem: ((3 integer)): 1323 <= 21
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 21
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 21
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1053 byte) (raw)) => e
run: find-next/read-line/parse-traces/main 7: #\e => ((6 byte))
mem: ((6 byte)): 1326 <= #\e
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => e
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 21
run: find-next/read-line/parse-traces/main 10: 22 => ((3 integer))
mem: ((3 integer)): 1323 <= 22
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 22
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 22
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1054 byte) (raw)) => g
run: find-next/read-line/parse-traces/main 7: #\g => ((6 byte))
mem: ((6 byte)): 1326 <= #\g
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => g
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 22
run: find-next/read-line/parse-traces/main 10: 23 => ((3 integer))
mem: ((3 integer)): 1323 <= 23
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 23
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 23
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1055 byte) (raw)) => e
run: find-next/read-line/parse-traces/main 7: #\e => ((6 byte))
mem: ((6 byte)): 1326 <= #\e
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => e
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 23
run: find-next/read-line/parse-traces/main 10: 24 => ((3 integer))
mem: ((3 integer)): 1323 <= 24
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 24
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 24
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1056 byte) (raw)) => r
run: find-next/read-line/parse-traces/main 7: #\r => ((6 byte))
mem: ((6 byte)): 1326 <= #\r
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => r
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 24
run: find-next/read-line/parse-traces/main 10: 25 => ((3 integer))
mem: ((3 integer)): 1323 <= 25
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 25
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 25
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1057 byte) (raw)) => )
run: find-next/read-line/parse-traces/main 7: #\) => ((6 byte))
mem: ((6 byte)): 1326 <= #\)
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => )
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 25
run: find-next/read-line/parse-traces/main 10: 26 => ((3 integer))
mem: ((3 integer)): 1323 <= 26
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 26
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 26
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1058 byte) (raw)) => )
run: find-next/read-line/parse-traces/main 7: #\) => ((6 byte))
mem: ((6 byte)): 1326 <= #\)
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => )
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 26
run: find-next/read-line/parse-traces/main 10: 27 => ((3 integer))
mem: ((3 integer)): 1323 <= 27
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 27
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 27
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1059 byte) (raw)) =>  
run: find-next/read-line/parse-traces/main 7: #\space => ((6 byte))
mem: ((6 byte)): 1326 <= #\space
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) =>  
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 27
run: find-next/read-line/parse-traces/main 10: 28 => ((3 integer))
mem: ((3 integer)): 1323 <= 28
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 28
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 28
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1060 byte) (raw)) => <
run: find-next/read-line/parse-traces/main 7: #\< => ((6 byte))
mem: ((6 byte)): 1326 <= #\<
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => <
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 28
run: find-next/read-line/parse-traces/main 10: 29 => ((3 integer))
mem: ((3 integer)): 1323 <= 29
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 29
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 29
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1061 byte) (raw)) => -
run: find-next/read-line/parse-traces/main 7: #\- => ((6 byte))
mem: ((6 byte)): 1326 <= #\-
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => -
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 29
run: find-next/read-line/parse-traces/main 10: 30 => ((3 integer))
mem: ((3 integer)): 1323 <= 30
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 30
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 30
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1062 byte) (raw)) =>  
run: find-next/read-line/parse-traces/main 7: #\space => ((6 byte))
mem: ((6 byte)): 1326 <= #\space
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) =>  
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 30
run: find-next/read-line/parse-traces/main 10: 31 => ((3 integer))
mem: ((3 integer)): 1323 <= 31
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 31
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 31
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1063 byte) (raw)) => (
run: find-next/read-line/parse-traces/main 7: #\( => ((6 byte))
mem: ((6 byte)): 1326 <= #\(
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => (
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 31
run: find-next/read-line/parse-traces/main 10: 32 => ((3 integer))
mem: ((3 integer)): 1323 <= 32
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 32
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 32
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1064 byte) (raw)) => (
run: find-next/read-line/parse-traces/main 7: #\( => ((6 byte))
mem: ((6 byte)): 1326 <= #\(
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => (
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 32
run: find-next/read-line/parse-traces/main 10: 33 => ((3 integer))
mem: ((3 integer)): 1323 <= 33
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 33
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 33
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1065 byte) (raw)) => c
run: find-next/read-line/parse-traces/main 7: #\c => ((6 byte))
mem: ((6 byte)): 1326 <= #\c
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => c
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 33
run: find-next/read-line/parse-traces/main 10: 34 => ((3 integer))
mem: ((3 integer)): 1323 <= 34
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 34
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 34
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1066 byte) (raw)) => o
run: find-next/read-line/parse-traces/main 7: #\o => ((6 byte))
mem: ((6 byte)): 1326 <= #\o
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => o
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 34
run: find-next/read-line/parse-traces/main 10: 35 => ((3 integer))
mem: ((3 integer)): 1323 <= 35
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 35
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 35
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1067 byte) (raw)) => p
run: find-next/read-line/parse-traces/main 7: #\p => ((6 byte))
mem: ((6 byte)): 1326 <= #\p
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => p
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 35
run: find-next/read-line/parse-traces/main 10: 36 => ((3 integer))
mem: ((3 integer)): 1323 <= 36
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 36
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 36
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1068 byte) (raw)) => y
run: find-next/read-line/parse-traces/main 7: #\y => ((6 byte))
mem: ((6 byte)): 1326 <= #\y
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => y
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 36
run: find-next/read-line/parse-traces/main 10: 37 => ((3 integer))
mem: ((3 integer)): 1323 <= 37
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 37
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 37
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1069 byte) (raw)) => )
run: find-next/read-line/parse-traces/main 7: #\) => ((6 byte))
mem: ((6 byte)): 1326 <= #\)
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => )
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 37
run: find-next/read-line/parse-traces/main 10: 38 => ((3 integer))
mem: ((3 integer)): 1323 <= 38
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 38
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 38
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1070 byte) (raw)) => )
run: find-next/read-line/parse-traces/main 7: #\) => ((6 byte))
mem: ((6 byte)): 1326 <= #\)
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => )
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 38
run: find-next/read-line/parse-traces/main 10: 39 => ((3 integer))
mem: ((3 integer)): 1323 <= 39
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 39
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 39
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1071 byte) (raw)) =>  
run: find-next/read-line/parse-traces/main 7: #\space => ((6 byte))
mem: ((6 byte)): 1326 <= #\space
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) =>  
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 39
run: find-next/read-line/parse-traces/main 10: 40 => ((3 integer))
mem: ((3 integer)): 1323 <= 40
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 40
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 40
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1072 byte) (raw)) => (
run: find-next/read-line/parse-traces/main 7: #\( => ((6 byte))
mem: ((6 byte)): 1326 <= #\(
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => (
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 40
run: find-next/read-line/parse-traces/main 10: 41 => ((3 integer))
mem: ((3 integer)): 1323 <= 41
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 41
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 41
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1073 byte) (raw)) => (
run: find-next/read-line/parse-traces/main 7: #\( => ((6 byte))
mem: ((6 byte)): 1326 <= #\(
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => (
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 41
run: find-next/read-line/parse-traces/main 10: 42 => ((3 integer))
mem: ((3 integer)): 1323 <= 42
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 42
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 42
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1074 byte) (raw)) => 1
run: find-next/read-line/parse-traces/main 7: #\1 => ((6 byte))
mem: ((6 byte)): 1326 <= #\1
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => 1
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 42
run: find-next/read-line/parse-traces/main 10: 43 => ((3 integer))
mem: ((3 integer)): 1323 <= 43
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 43
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 43
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1075 byte) (raw)) =>  
run: find-next/read-line/parse-traces/main 7: #\space => ((6 byte))
mem: ((6 byte)): 1326 <= #\space
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) =>  
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 43
run: find-next/read-line/parse-traces/main 10: 44 => ((3 integer))
mem: ((3 integer)): 1323 <= 44
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 44
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 44
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1076 byte) (raw)) => l
run: find-next/read-line/parse-traces/main 7: #\l => ((6 byte))
mem: ((6 byte)): 1326 <= #\l
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => l
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 44
run: find-next/read-line/parse-traces/main 10: 45 => ((3 integer))
mem: ((3 integer)): 1323 <= 45
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 45
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 45
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1077 byte) (raw)) => i
run: find-next/read-line/parse-traces/main 7: #\i => ((6 byte))
mem: ((6 byte)): 1326 <= #\i
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => i
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 45
run: find-next/read-line/parse-traces/main 10: 46 => ((3 integer))
mem: ((3 integer)): 1323 <= 46
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 46
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 46
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1078 byte) (raw)) => t
run: find-next/read-line/parse-traces/main 7: #\t => ((6 byte))
mem: ((6 byte)): 1326 <= #\t
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => t
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 46
run: find-next/read-line/parse-traces/main 10: 47 => ((3 integer))
mem: ((3 integer)): 1323 <= 47
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 47
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 47
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1079 byte) (raw)) => e
run: find-next/read-line/parse-traces/main 7: #\e => ((6 byte))
mem: ((6 byte)): 1326 <= #\e
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => e
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 47
run: find-next/read-line/parse-traces/main 10: 48 => ((3 integer))
mem: ((3 integer)): 1323 <= 48
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 48
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 48
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1080 byte) (raw)) => r
run: find-next/read-line/parse-traces/main 7: #\r => ((6 byte))
mem: ((6 byte)): 1326 <= #\r
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => r
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 48
run: find-next/read-line/parse-traces/main 10: 49 => ((3 integer))
mem: ((3 integer)): 1323 <= 49
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 49
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 49
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1081 byte) (raw)) => a
run: find-next/read-line/parse-traces/main 7: #\a => ((6 byte))
mem: ((6 byte)): 1326 <= #\a
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => a
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 49
run: find-next/read-line/parse-traces/main 10: 50 => ((3 integer))
mem: ((3 integer)): 1323 <= 50
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 50
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 50
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1082 byte) (raw)) => l
run: find-next/read-line/parse-traces/main 7: #\l => ((6 byte))
mem: ((6 byte)): 1326 <= #\l
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => l
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 50
run: find-next/read-line/parse-traces/main 10: 51 => ((3 integer))
mem: ((3 integer)): 1323 <= 51
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 51
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 51
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1083 byte) (raw)) => )
run: find-next/read-line/parse-traces/main 7: #\) => ((6 byte))
mem: ((6 byte)): 1326 <= #\)
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => )
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 51
run: find-next/read-line/parse-traces/main 10: 52 => ((3 integer))
mem: ((3 integer)): 1323 <= 52
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 52
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 52
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1084 byte) (raw)) => )
run: find-next/read-line/parse-traces/main 7: #\) => ((6 byte))
mem: ((6 byte)): 1326 <= #\)
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => )
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 52
run: find-next/read-line/parse-traces/main 10: 53 => ((3 integer))
mem: ((3 integer)): 1323 <= 53
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 53
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1325 <= nil
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/read-line/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 53
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1085 byte) (raw)) => )
run: find-next/read-line/parse-traces/main 7: #\) => ((6 byte))
mem: ((6 byte)): 1326 <= #\)
run: find-next/read-line/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => )
mem: ((2 character)) => 

run: find-next/read-line/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1327 <= nil
run: find-next/read-line/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/read-line/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 53
run: find-next/read-line/parse-traces/main 10: 54 => ((3 integer))
mem: ((3 integer)): 1323 <= 54
run: find-next/read-line/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/read-line/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 54
mem: ((4 integer)) => 54
run: find-next/read-line/parse-traces/main 5: t => ((5 boolean))
mem: ((5 boolean)): 1325 <= t
run: find-next/read-line/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => t
run: find-next/read-line/parse-traces/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 54
run: read-line/parse-traces/main 4: 54 => ((4 integer))
mem: ((4 integer)): 1293 <= 54
run: read-line/parse-traces/main 5: (((5 string-address)) <- ((string-copy)) ((3 string-address)) ((2 integer-address) (deref)) ((4 integer)))
mem: ((3 string-address)) => 1031
mem: ((2 integer-address) (deref)) => 0
mem: ((4 integer)) => 54
run: string-copy/read-line/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/read-line/parse-traces/main 0: 1350 => ((default-space space-address))
run: string-copy/read-line/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1031 0 54)
run: string-copy/read-line/parse-traces/main 1: 1031 => ((1 string-address))
mem: ((1 string-address)): 1352 <= 1031
run: string-copy/read-line/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1031 0 54)
run: string-copy/read-line/parse-traces/main 2: 0 => ((2 integer))
mem: ((2 integer)): 1353 <= 0
run: string-copy/read-line/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1031 0 54)
run: string-copy/read-line/parse-traces/main 3: 54 => ((3 integer))
mem: ((3 integer)): 1354 <= 54
run: string-copy/read-line/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1031 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 4: 54 => ((4 integer))
mem: ((4 integer)): 1355 <= 54
run: string-copy/read-line/parse-traces/main 5: (((3 integer)) <- ((min)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 54
mem: ((3 integer)) => 54
run: min/string-copy/read-line/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: min/string-copy/read-line/parse-traces/main 0: 1381 => ((default-space space-address))
run: min/string-copy/read-line/parse-traces/main 1: (((1 integer)) <- ((next-input)))
arg: nil 0 (54 54)
run: min/string-copy/read-line/parse-traces/main 1: 54 => ((1 integer))
mem: ((1 integer)): 1383 <= 54
run: min/string-copy/read-line/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (54 54)
run: min/string-copy/read-line/parse-traces/main 2: 54 => ((2 integer))
mem: ((2 integer)): 1384 <= 54
run: min/string-copy/read-line/parse-traces/main 3: (((3 boolean)) <- ((less-than)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 54
mem: ((2 integer)) => 54
run: min/string-copy/read-line/parse-traces/main 3: nil => ((3 boolean))
mem: ((3 boolean)): 1385 <= nil
run: min/string-copy/read-line/parse-traces/main 4: (((jump-if)) ((3 boolean)) ((1 offset)))
mem: ((3 boolean)) => nil
run: min/string-copy/read-line/parse-traces/main 5: (((reply)) ((2 integer)))
mem: ((2 integer)) => 54
run: string-copy/read-line/parse-traces/main 5: 54 => ((3 integer))
mem: ((3 integer)): 1354 <= 54
run: string-copy/read-line/parse-traces/main 6: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 54
mem: ((2 integer)) => 0
run: string-copy/read-line/parse-traces/main 6: 54 => ((4 integer))
mem: ((4 integer)): 1355 <= 54
run: string-copy/read-line/parse-traces/main 7: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 54
run: string-copy/read-line/parse-traces/main 7: 1412 => ((5 string-address))
mem: ((5 string-address)): 1356 <= 1412
run: string-copy/read-line/parse-traces/main 8: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 0
run: string-copy/read-line/parse-traces/main 8: 0 => ((6 integer))
mem: ((6 integer)): 1357 <= 0
run: string-copy/read-line/parse-traces/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/read-line/parse-traces/main 9: 0 => ((7 integer))
mem: ((7 integer)): 1358 <= 0
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 0
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 0
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1032 byte) (raw)) => r
run: string-copy/read-line/parse-traces/main 12: #\r => ((9 character))
mem: ((9 character)): 1360 <= #\r
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1413 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1413
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => r
run: string-copy/read-line/parse-traces/main 14: #\r => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1413 <= #\r
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 0
run: string-copy/read-line/parse-traces/main 15: 1 => ((6 integer))
mem: ((6 integer)): 1357 <= 1
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/read-line/parse-traces/main 16: 1 => ((7 integer))
mem: ((7 integer)): 1358 <= 1
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 1
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 1
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1033 byte) (raw)) => u
run: string-copy/read-line/parse-traces/main 12: #\u => ((9 character))
mem: ((9 character)): 1360 <= #\u
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 1
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1414 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1414
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => u
run: string-copy/read-line/parse-traces/main 14: #\u => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1414 <= #\u
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 1
run: string-copy/read-line/parse-traces/main 15: 2 => ((6 integer))
mem: ((6 integer)): 1357 <= 2
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: string-copy/read-line/parse-traces/main 16: 2 => ((7 integer))
mem: ((7 integer)): 1358 <= 2
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 2
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 2
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1034 byte) (raw)) => n
run: string-copy/read-line/parse-traces/main 12: #\n => ((9 character))
mem: ((9 character)): 1360 <= #\n
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 2
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1415 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1415
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => n
run: string-copy/read-line/parse-traces/main 14: #\n => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1415 <= #\n
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 2
run: string-copy/read-line/parse-traces/main 15: 3 => ((6 integer))
mem: ((6 integer)): 1357 <= 3
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 2
run: string-copy/read-line/parse-traces/main 16: 3 => ((7 integer))
mem: ((7 integer)): 1358 <= 3
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 3
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 3
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1035 byte) (raw)) => :
run: string-copy/read-line/parse-traces/main 12: #\: => ((9 character))
mem: ((9 character)): 1360 <= #\:
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 3
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1416 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1416
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => :
run: string-copy/read-line/parse-traces/main 14: #\: => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1416 <= #\:
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 3
run: string-copy/read-line/parse-traces/main 15: 4 => ((6 integer))
mem: ((6 integer)): 1357 <= 4
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 3
run: string-copy/read-line/parse-traces/main 16: 4 => ((7 integer))
mem: ((7 integer)): 1358 <= 4
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 4
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 4
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1036 byte) (raw)) =>  
run: string-copy/read-line/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1360 <= #\space
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 4
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1417 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1417
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/read-line/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1417 <= #\space
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 4
run: string-copy/read-line/parse-traces/main 15: 5 => ((6 integer))
mem: ((6 integer)): 1357 <= 5
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 4
run: string-copy/read-line/parse-traces/main 16: 5 => ((7 integer))
mem: ((7 integer)): 1358 <= 5
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 5
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 5
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1037 byte) (raw)) => m
run: string-copy/read-line/parse-traces/main 12: #\m => ((9 character))
mem: ((9 character)): 1360 <= #\m
schedule: scheduling string-copy/read-line/parse-traces/main for further processing
schedule: string-copy/read-line/parse-traces/main
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 5
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1418 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1418
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => m
run: string-copy/read-line/parse-traces/main 14: #\m => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1418 <= #\m
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 5
run: string-copy/read-line/parse-traces/main 15: 6 => ((6 integer))
mem: ((6 integer)): 1357 <= 6
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 5
run: string-copy/read-line/parse-traces/main 16: 6 => ((7 integer))
mem: ((7 integer)): 1358 <= 6
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 6
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 6
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1038 byte) (raw)) => a
run: string-copy/read-line/parse-traces/main 12: #\a => ((9 character))
mem: ((9 character)): 1360 <= #\a
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 6
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1419 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1419
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => a
run: string-copy/read-line/parse-traces/main 14: #\a => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1419 <= #\a
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 6
run: string-copy/read-line/parse-traces/main 15: 7 => ((6 integer))
mem: ((6 integer)): 1357 <= 7
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 6
run: string-copy/read-line/parse-traces/main 16: 7 => ((7 integer))
mem: ((7 integer)): 1358 <= 7
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 7
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 7
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1039 byte) (raw)) => i
run: string-copy/read-line/parse-traces/main 12: #\i => ((9 character))
mem: ((9 character)): 1360 <= #\i
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 7
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1420 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1420
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => i
run: string-copy/read-line/parse-traces/main 14: #\i => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1420 <= #\i
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 7
run: string-copy/read-line/parse-traces/main 15: 8 => ((6 integer))
mem: ((6 integer)): 1357 <= 8
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 7
run: string-copy/read-line/parse-traces/main 16: 8 => ((7 integer))
mem: ((7 integer)): 1358 <= 8
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 8
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 8
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1040 byte) (raw)) => n
run: string-copy/read-line/parse-traces/main 12: #\n => ((9 character))
mem: ((9 character)): 1360 <= #\n
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 8
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1421 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1421
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => n
run: string-copy/read-line/parse-traces/main 14: #\n => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1421 <= #\n
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 8
run: string-copy/read-line/parse-traces/main 15: 9 => ((6 integer))
mem: ((6 integer)): 1357 <= 9
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 8
run: string-copy/read-line/parse-traces/main 16: 9 => ((7 integer))
mem: ((7 integer)): 1358 <= 9
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 9
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 9
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1041 byte) (raw)) =>  
run: string-copy/read-line/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1360 <= #\space
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 9
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1422 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1422
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/read-line/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1422 <= #\space
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 9
run: string-copy/read-line/parse-traces/main 15: 10 => ((6 integer))
mem: ((6 integer)): 1357 <= 10
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 9
run: string-copy/read-line/parse-traces/main 16: 10 => ((7 integer))
mem: ((7 integer)): 1358 <= 10
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 10
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 10
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1042 byte) (raw)) => 0
run: string-copy/read-line/parse-traces/main 12: #\0 => ((9 character))
mem: ((9 character)): 1360 <= #\0
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 10
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1423 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1423
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => 0
run: string-copy/read-line/parse-traces/main 14: #\0 => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1423 <= #\0
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 10
run: string-copy/read-line/parse-traces/main 15: 11 => ((6 integer))
mem: ((6 integer)): 1357 <= 11
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 10
run: string-copy/read-line/parse-traces/main 16: 11 => ((7 integer))
mem: ((7 integer)): 1358 <= 11
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 11
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 11
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1043 byte) (raw)) => :
run: string-copy/read-line/parse-traces/main 12: #\: => ((9 character))
mem: ((9 character)): 1360 <= #\:
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 11
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1424 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1424
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => :
run: string-copy/read-line/parse-traces/main 14: #\: => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1424 <= #\:
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 11
run: string-copy/read-line/parse-traces/main 15: 12 => ((6 integer))
mem: ((6 integer)): 1357 <= 12
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 11
run: string-copy/read-line/parse-traces/main 16: 12 => ((7 integer))
mem: ((7 integer)): 1358 <= 12
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 12
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 12
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1044 byte) (raw)) =>  
run: string-copy/read-line/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1360 <= #\space
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 12
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1425 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1425
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/read-line/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1425 <= #\space
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 12
run: string-copy/read-line/parse-traces/main 15: 13 => ((6 integer))
mem: ((6 integer)): 1357 <= 13
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 12
run: string-copy/read-line/parse-traces/main 16: 13 => ((7 integer))
mem: ((7 integer)): 1358 <= 13
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 13
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 13
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1045 byte) (raw)) => (
run: string-copy/read-line/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1360 <= #\(
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 13
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1426 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1426
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/read-line/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1426 <= #\(
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 13
run: string-copy/read-line/parse-traces/main 15: 14 => ((6 integer))
mem: ((6 integer)): 1357 <= 14
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 13
run: string-copy/read-line/parse-traces/main 16: 14 => ((7 integer))
mem: ((7 integer)): 1358 <= 14
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 14
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 14
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1046 byte) (raw)) => (
run: string-copy/read-line/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1360 <= #\(
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 14
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1427 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1427
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/read-line/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1427 <= #\(
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 14
run: string-copy/read-line/parse-traces/main 15: 15 => ((6 integer))
mem: ((6 integer)): 1357 <= 15
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 14
run: string-copy/read-line/parse-traces/main 16: 15 => ((7 integer))
mem: ((7 integer)): 1358 <= 15
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 15
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 15
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1047 byte) (raw)) => (
run: string-copy/read-line/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1360 <= #\(
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 15
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1428 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1428
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/read-line/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1428 <= #\(
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 15
run: string-copy/read-line/parse-traces/main 15: 16 => ((6 integer))
mem: ((6 integer)): 1357 <= 16
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 15
run: string-copy/read-line/parse-traces/main 16: 16 => ((7 integer))
mem: ((7 integer)): 1358 <= 16
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 16
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 16
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1048 byte) (raw)) => 1
run: string-copy/read-line/parse-traces/main 12: #\1 => ((9 character))
mem: ((9 character)): 1360 <= #\1
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 16
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1429 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1429
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => 1
run: string-copy/read-line/parse-traces/main 14: #\1 => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1429 <= #\1
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 16
run: string-copy/read-line/parse-traces/main 15: 17 => ((6 integer))
mem: ((6 integer)): 1357 <= 17
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 16
run: string-copy/read-line/parse-traces/main 16: 17 => ((7 integer))
mem: ((7 integer)): 1358 <= 17
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 17
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 17
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1049 byte) (raw)) =>  
run: string-copy/read-line/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1360 <= #\space
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 17
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1430 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1430
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/read-line/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1430 <= #\space
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 17
run: string-copy/read-line/parse-traces/main 15: 18 => ((6 integer))
mem: ((6 integer)): 1357 <= 18
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 17
run: string-copy/read-line/parse-traces/main 16: 18 => ((7 integer))
mem: ((7 integer)): 1358 <= 18
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 18
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 18
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1050 byte) (raw)) => i
run: string-copy/read-line/parse-traces/main 12: #\i => ((9 character))
mem: ((9 character)): 1360 <= #\i
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 18
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1431 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1431
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => i
run: string-copy/read-line/parse-traces/main 14: #\i => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1431 <= #\i
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 18
run: string-copy/read-line/parse-traces/main 15: 19 => ((6 integer))
mem: ((6 integer)): 1357 <= 19
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 18
run: string-copy/read-line/parse-traces/main 16: 19 => ((7 integer))
mem: ((7 integer)): 1358 <= 19
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 19
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 19
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1051 byte) (raw)) => n
run: string-copy/read-line/parse-traces/main 12: #\n => ((9 character))
mem: ((9 character)): 1360 <= #\n
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 19
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1432 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1432
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => n
run: string-copy/read-line/parse-traces/main 14: #\n => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1432 <= #\n
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 19
run: string-copy/read-line/parse-traces/main 15: 20 => ((6 integer))
mem: ((6 integer)): 1357 <= 20
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 19
run: string-copy/read-line/parse-traces/main 16: 20 => ((7 integer))
mem: ((7 integer)): 1358 <= 20
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 20
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 20
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1052 byte) (raw)) => t
run: string-copy/read-line/parse-traces/main 12: #\t => ((9 character))
mem: ((9 character)): 1360 <= #\t
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 20
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1433 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1433
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => t
run: string-copy/read-line/parse-traces/main 14: #\t => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1433 <= #\t
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 20
run: string-copy/read-line/parse-traces/main 15: 21 => ((6 integer))
mem: ((6 integer)): 1357 <= 21
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 20
run: string-copy/read-line/parse-traces/main 16: 21 => ((7 integer))
mem: ((7 integer)): 1358 <= 21
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 21
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 21
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1053 byte) (raw)) => e
run: string-copy/read-line/parse-traces/main 12: #\e => ((9 character))
mem: ((9 character)): 1360 <= #\e
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 21
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1434 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1434
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => e
run: string-copy/read-line/parse-traces/main 14: #\e => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1434 <= #\e
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 21
run: string-copy/read-line/parse-traces/main 15: 22 => ((6 integer))
mem: ((6 integer)): 1357 <= 22
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 21
run: string-copy/read-line/parse-traces/main 16: 22 => ((7 integer))
mem: ((7 integer)): 1358 <= 22
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 22
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 22
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1054 byte) (raw)) => g
run: string-copy/read-line/parse-traces/main 12: #\g => ((9 character))
mem: ((9 character)): 1360 <= #\g
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 22
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1435 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1435
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => g
run: string-copy/read-line/parse-traces/main 14: #\g => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1435 <= #\g
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 22
run: string-copy/read-line/parse-traces/main 15: 23 => ((6 integer))
mem: ((6 integer)): 1357 <= 23
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 22
run: string-copy/read-line/parse-traces/main 16: 23 => ((7 integer))
mem: ((7 integer)): 1358 <= 23
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 23
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 23
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1055 byte) (raw)) => e
run: string-copy/read-line/parse-traces/main 12: #\e => ((9 character))
mem: ((9 character)): 1360 <= #\e
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 23
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1436 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1436
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => e
run: string-copy/read-line/parse-traces/main 14: #\e => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1436 <= #\e
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 23
run: string-copy/read-line/parse-traces/main 15: 24 => ((6 integer))
mem: ((6 integer)): 1357 <= 24
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 23
run: string-copy/read-line/parse-traces/main 16: 24 => ((7 integer))
mem: ((7 integer)): 1358 <= 24
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 24
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 24
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1056 byte) (raw)) => r
run: string-copy/read-line/parse-traces/main 12: #\r => ((9 character))
mem: ((9 character)): 1360 <= #\r
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 24
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1437 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1437
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => r
run: string-copy/read-line/parse-traces/main 14: #\r => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1437 <= #\r
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 24
run: string-copy/read-line/parse-traces/main 15: 25 => ((6 integer))
mem: ((6 integer)): 1357 <= 25
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 24
run: string-copy/read-line/parse-traces/main 16: 25 => ((7 integer))
mem: ((7 integer)): 1358 <= 25
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 25
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 25
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1057 byte) (raw)) => )
run: string-copy/read-line/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1360 <= #\)
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 25
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1438 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1438
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/read-line/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1438 <= #\)
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 25
run: string-copy/read-line/parse-traces/main 15: 26 => ((6 integer))
mem: ((6 integer)): 1357 <= 26
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 25
run: string-copy/read-line/parse-traces/main 16: 26 => ((7 integer))
mem: ((7 integer)): 1358 <= 26
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 26
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 26
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1058 byte) (raw)) => )
run: string-copy/read-line/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1360 <= #\)
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 26
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1439 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1439
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/read-line/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1439 <= #\)
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 26
run: string-copy/read-line/parse-traces/main 15: 27 => ((6 integer))
mem: ((6 integer)): 1357 <= 27
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 26
run: string-copy/read-line/parse-traces/main 16: 27 => ((7 integer))
mem: ((7 integer)): 1358 <= 27
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 27
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 27
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1059 byte) (raw)) =>  
run: string-copy/read-line/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1360 <= #\space
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 27
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1440 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1440
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/read-line/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1440 <= #\space
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 27
run: string-copy/read-line/parse-traces/main 15: 28 => ((6 integer))
mem: ((6 integer)): 1357 <= 28
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 27
run: string-copy/read-line/parse-traces/main 16: 28 => ((7 integer))
mem: ((7 integer)): 1358 <= 28
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 28
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 28
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1060 byte) (raw)) => <
run: string-copy/read-line/parse-traces/main 12: #\< => ((9 character))
mem: ((9 character)): 1360 <= #\<
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 28
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1441 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1441
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => <
run: string-copy/read-line/parse-traces/main 14: #\< => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1441 <= #\<
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 28
run: string-copy/read-line/parse-traces/main 15: 29 => ((6 integer))
mem: ((6 integer)): 1357 <= 29
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 28
run: string-copy/read-line/parse-traces/main 16: 29 => ((7 integer))
mem: ((7 integer)): 1358 <= 29
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 29
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 29
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1061 byte) (raw)) => -
run: string-copy/read-line/parse-traces/main 12: #\- => ((9 character))
mem: ((9 character)): 1360 <= #\-
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 29
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1442 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1442
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => -
run: string-copy/read-line/parse-traces/main 14: #\- => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1442 <= #\-
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 29
run: string-copy/read-line/parse-traces/main 15: 30 => ((6 integer))
mem: ((6 integer)): 1357 <= 30
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 29
run: string-copy/read-line/parse-traces/main 16: 30 => ((7 integer))
mem: ((7 integer)): 1358 <= 30
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 30
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 30
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1062 byte) (raw)) =>  
run: string-copy/read-line/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1360 <= #\space
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 30
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1443 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1443
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/read-line/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1443 <= #\space
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 30
run: string-copy/read-line/parse-traces/main 15: 31 => ((6 integer))
mem: ((6 integer)): 1357 <= 31
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 30
run: string-copy/read-line/parse-traces/main 16: 31 => ((7 integer))
mem: ((7 integer)): 1358 <= 31
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 31
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 31
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1063 byte) (raw)) => (
run: string-copy/read-line/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1360 <= #\(
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 31
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1444 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1444
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/read-line/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1444 <= #\(
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 31
run: string-copy/read-line/parse-traces/main 15: 32 => ((6 integer))
mem: ((6 integer)): 1357 <= 32
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 31
run: string-copy/read-line/parse-traces/main 16: 32 => ((7 integer))
mem: ((7 integer)): 1358 <= 32
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 32
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 32
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1064 byte) (raw)) => (
run: string-copy/read-line/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1360 <= #\(
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 32
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1445 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1445
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/read-line/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1445 <= #\(
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 32
run: string-copy/read-line/parse-traces/main 15: 33 => ((6 integer))
mem: ((6 integer)): 1357 <= 33
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 32
run: string-copy/read-line/parse-traces/main 16: 33 => ((7 integer))
mem: ((7 integer)): 1358 <= 33
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 33
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 33
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1065 byte) (raw)) => c
run: string-copy/read-line/parse-traces/main 12: #\c => ((9 character))
mem: ((9 character)): 1360 <= #\c
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 33
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1446 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1446
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => c
run: string-copy/read-line/parse-traces/main 14: #\c => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1446 <= #\c
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 33
run: string-copy/read-line/parse-traces/main 15: 34 => ((6 integer))
mem: ((6 integer)): 1357 <= 34
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 33
run: string-copy/read-line/parse-traces/main 16: 34 => ((7 integer))
mem: ((7 integer)): 1358 <= 34
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 34
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 34
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1066 byte) (raw)) => o
run: string-copy/read-line/parse-traces/main 12: #\o => ((9 character))
mem: ((9 character)): 1360 <= #\o
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 34
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1447 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1447
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => o
run: string-copy/read-line/parse-traces/main 14: #\o => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1447 <= #\o
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 34
run: string-copy/read-line/parse-traces/main 15: 35 => ((6 integer))
mem: ((6 integer)): 1357 <= 35
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 34
run: string-copy/read-line/parse-traces/main 16: 35 => ((7 integer))
mem: ((7 integer)): 1358 <= 35
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 35
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 35
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1067 byte) (raw)) => p
run: string-copy/read-line/parse-traces/main 12: #\p => ((9 character))
mem: ((9 character)): 1360 <= #\p
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 35
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1448 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1448
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => p
run: string-copy/read-line/parse-traces/main 14: #\p => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1448 <= #\p
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 35
run: string-copy/read-line/parse-traces/main 15: 36 => ((6 integer))
mem: ((6 integer)): 1357 <= 36
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 35
run: string-copy/read-line/parse-traces/main 16: 36 => ((7 integer))
mem: ((7 integer)): 1358 <= 36
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 36
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 36
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1068 byte) (raw)) => y
run: string-copy/read-line/parse-traces/main 12: #\y => ((9 character))
mem: ((9 character)): 1360 <= #\y
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 36
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1449 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1449
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => y
run: string-copy/read-line/parse-traces/main 14: #\y => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1449 <= #\y
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 36
run: string-copy/read-line/parse-traces/main 15: 37 => ((6 integer))
mem: ((6 integer)): 1357 <= 37
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 36
run: string-copy/read-line/parse-traces/main 16: 37 => ((7 integer))
mem: ((7 integer)): 1358 <= 37
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 37
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 37
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1069 byte) (raw)) => )
run: string-copy/read-line/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1360 <= #\)
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 37
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1450 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1450
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/read-line/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1450 <= #\)
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 37
run: string-copy/read-line/parse-traces/main 15: 38 => ((6 integer))
mem: ((6 integer)): 1357 <= 38
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 37
run: string-copy/read-line/parse-traces/main 16: 38 => ((7 integer))
mem: ((7 integer)): 1358 <= 38
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 38
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 38
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1070 byte) (raw)) => )
run: string-copy/read-line/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1360 <= #\)
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 38
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1451 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1451
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/read-line/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1451 <= #\)
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 38
run: string-copy/read-line/parse-traces/main 15: 39 => ((6 integer))
mem: ((6 integer)): 1357 <= 39
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 38
run: string-copy/read-line/parse-traces/main 16: 39 => ((7 integer))
mem: ((7 integer)): 1358 <= 39
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 39
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 39
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1071 byte) (raw)) =>  
run: string-copy/read-line/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1360 <= #\space
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 39
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1452 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1452
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/read-line/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1452 <= #\space
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 39
run: string-copy/read-line/parse-traces/main 15: 40 => ((6 integer))
mem: ((6 integer)): 1357 <= 40
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 39
run: string-copy/read-line/parse-traces/main 16: 40 => ((7 integer))
mem: ((7 integer)): 1358 <= 40
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 40
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 40
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1072 byte) (raw)) => (
run: string-copy/read-line/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1360 <= #\(
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 40
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1453 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1453
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/read-line/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1453 <= #\(
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 40
run: string-copy/read-line/parse-traces/main 15: 41 => ((6 integer))
mem: ((6 integer)): 1357 <= 41
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 40
run: string-copy/read-line/parse-traces/main 16: 41 => ((7 integer))
mem: ((7 integer)): 1358 <= 41
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 41
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 41
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1073 byte) (raw)) => (
run: string-copy/read-line/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1360 <= #\(
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 41
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1454 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1454
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/read-line/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1454 <= #\(
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 41
run: string-copy/read-line/parse-traces/main 15: 42 => ((6 integer))
mem: ((6 integer)): 1357 <= 42
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 41
run: string-copy/read-line/parse-traces/main 16: 42 => ((7 integer))
mem: ((7 integer)): 1358 <= 42
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 42
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 42
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1074 byte) (raw)) => 1
run: string-copy/read-line/parse-traces/main 12: #\1 => ((9 character))
mem: ((9 character)): 1360 <= #\1
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 42
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1455 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1455
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => 1
run: string-copy/read-line/parse-traces/main 14: #\1 => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1455 <= #\1
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 42
run: string-copy/read-line/parse-traces/main 15: 43 => ((6 integer))
mem: ((6 integer)): 1357 <= 43
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 42
run: string-copy/read-line/parse-traces/main 16: 43 => ((7 integer))
mem: ((7 integer)): 1358 <= 43
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 43
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 43
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1075 byte) (raw)) =>  
run: string-copy/read-line/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1360 <= #\space
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 43
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1456 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1456
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/read-line/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1456 <= #\space
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 43
run: string-copy/read-line/parse-traces/main 15: 44 => ((6 integer))
mem: ((6 integer)): 1357 <= 44
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 43
run: string-copy/read-line/parse-traces/main 16: 44 => ((7 integer))
mem: ((7 integer)): 1358 <= 44
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 44
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 44
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1076 byte) (raw)) => l
run: string-copy/read-line/parse-traces/main 12: #\l => ((9 character))
mem: ((9 character)): 1360 <= #\l
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 44
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1457 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1457
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => l
run: string-copy/read-line/parse-traces/main 14: #\l => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1457 <= #\l
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 44
run: string-copy/read-line/parse-traces/main 15: 45 => ((6 integer))
mem: ((6 integer)): 1357 <= 45
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 44
run: string-copy/read-line/parse-traces/main 16: 45 => ((7 integer))
mem: ((7 integer)): 1358 <= 45
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 45
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 45
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1077 byte) (raw)) => i
run: string-copy/read-line/parse-traces/main 12: #\i => ((9 character))
mem: ((9 character)): 1360 <= #\i
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 45
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1458 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1458
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => i
run: string-copy/read-line/parse-traces/main 14: #\i => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1458 <= #\i
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 45
run: string-copy/read-line/parse-traces/main 15: 46 => ((6 integer))
mem: ((6 integer)): 1357 <= 46
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 45
run: string-copy/read-line/parse-traces/main 16: 46 => ((7 integer))
mem: ((7 integer)): 1358 <= 46
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 46
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 46
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1078 byte) (raw)) => t
run: string-copy/read-line/parse-traces/main 12: #\t => ((9 character))
mem: ((9 character)): 1360 <= #\t
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 46
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1459 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1459
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => t
run: string-copy/read-line/parse-traces/main 14: #\t => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1459 <= #\t
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 46
run: string-copy/read-line/parse-traces/main 15: 47 => ((6 integer))
mem: ((6 integer)): 1357 <= 47
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 46
run: string-copy/read-line/parse-traces/main 16: 47 => ((7 integer))
mem: ((7 integer)): 1358 <= 47
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 47
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 47
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1079 byte) (raw)) => e
run: string-copy/read-line/parse-traces/main 12: #\e => ((9 character))
mem: ((9 character)): 1360 <= #\e
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 47
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1460 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1460
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => e
run: string-copy/read-line/parse-traces/main 14: #\e => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1460 <= #\e
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 47
run: string-copy/read-line/parse-traces/main 15: 48 => ((6 integer))
mem: ((6 integer)): 1357 <= 48
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 47
run: string-copy/read-line/parse-traces/main 16: 48 => ((7 integer))
mem: ((7 integer)): 1358 <= 48
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 48
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 48
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1080 byte) (raw)) => r
run: string-copy/read-line/parse-traces/main 12: #\r => ((9 character))
mem: ((9 character)): 1360 <= #\r
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 48
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1461 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1461
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => r
run: string-copy/read-line/parse-traces/main 14: #\r => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1461 <= #\r
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 48
run: string-copy/read-line/parse-traces/main 15: 49 => ((6 integer))
mem: ((6 integer)): 1357 <= 49
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 48
run: string-copy/read-line/parse-traces/main 16: 49 => ((7 integer))
mem: ((7 integer)): 1358 <= 49
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 49
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 49
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1081 byte) (raw)) => a
run: string-copy/read-line/parse-traces/main 12: #\a => ((9 character))
mem: ((9 character)): 1360 <= #\a
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 49
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1462 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1462
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => a
run: string-copy/read-line/parse-traces/main 14: #\a => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1462 <= #\a
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 49
run: string-copy/read-line/parse-traces/main 15: 50 => ((6 integer))
mem: ((6 integer)): 1357 <= 50
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 49
run: string-copy/read-line/parse-traces/main 16: 50 => ((7 integer))
mem: ((7 integer)): 1358 <= 50
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 50
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 50
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1082 byte) (raw)) => l
run: string-copy/read-line/parse-traces/main 12: #\l => ((9 character))
mem: ((9 character)): 1360 <= #\l
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 50
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1463 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1463
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => l
run: string-copy/read-line/parse-traces/main 14: #\l => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1463 <= #\l
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 50
run: string-copy/read-line/parse-traces/main 15: 51 => ((6 integer))
mem: ((6 integer)): 1357 <= 51
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 50
run: string-copy/read-line/parse-traces/main 16: 51 => ((7 integer))
mem: ((7 integer)): 1358 <= 51
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 51
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 51
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1083 byte) (raw)) => )
run: string-copy/read-line/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1360 <= #\)
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 51
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1464 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1464
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/read-line/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1464 <= #\)
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 51
run: string-copy/read-line/parse-traces/main 15: 52 => ((6 integer))
mem: ((6 integer)): 1357 <= 52
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 51
run: string-copy/read-line/parse-traces/main 16: 52 => ((7 integer))
mem: ((7 integer)): 1358 <= 52
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 52
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 52
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1084 byte) (raw)) => )
run: string-copy/read-line/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1360 <= #\)
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 52
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1465 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1465
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/read-line/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1465 <= #\)
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 52
run: string-copy/read-line/parse-traces/main 15: 53 => ((6 integer))
mem: ((6 integer)): 1357 <= 53
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 52
run: string-copy/read-line/parse-traces/main 16: 53 => ((7 integer))
mem: ((7 integer)): 1358 <= 53
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 53
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1359 <= nil
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/read-line/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 53
array-len: ((1031 string) (raw))
mem: ((1031 integer) (raw)) => 54
mem: ((1085 byte) (raw)) => )
run: string-copy/read-line/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1360 <= #\)
run: string-copy/read-line/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 53
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
run: string-copy/read-line/parse-traces/main 13: 1466 => ((10 character-address))
mem: ((10 character-address)): 1361 <= 1466
run: string-copy/read-line/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/read-line/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1466 <= #\)
run: string-copy/read-line/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 53
run: string-copy/read-line/parse-traces/main 15: 54 => ((6 integer))
mem: ((6 integer)): 1357 <= 54
run: string-copy/read-line/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 53
run: string-copy/read-line/parse-traces/main 16: 54 => ((7 integer))
mem: ((7 integer)): 1358 <= 54
run: string-copy/read-line/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/read-line/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 54
mem: ((3 integer)) => 54
run: string-copy/read-line/parse-traces/main 10: t => ((8 boolean))
mem: ((8 boolean)): 1359 <= t
run: string-copy/read-line/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/read-line/parse-traces/main 18: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1412
run: read-line/parse-traces/main 5: 1412 => ((5 string-address))
mem: ((5 string-address)): 1294 <= 1412
run: read-line/parse-traces/main 6: (((2 integer-address) (deref)) <- ((add)) ((4 integer)) ((1 literal)))
mem: ((4 integer)) => 54
run: read-line/parse-traces/main 6: 55 => ((2 integer-address) (deref))
mem: ((2 integer-address) (deref)): 1117 <= 55
run: read-line/parse-traces/main 7: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1412
run: parse-traces/main 9: 1412 => ((7 string-address))
mem: ((7 string-address)): 1127 <= 1412
run: parse-traces/main 10: (((8 trace-address)) <- ((parse-trace)) ((7 string-address)))
mem: ((7 string-address)) => 1412
run: parse-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: parse-trace/parse-traces/main 0: 1467 => ((default-space space-address))
run: parse-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1412)
run: parse-trace/parse-traces/main 1: 1412 => ((1 string-address))
mem: ((1 string-address)): 1469 <= 1412
run: parse-trace/parse-traces/main 2: (((2 trace-address)) <- ((new)) ((trace literal)))
run: parse-trace/parse-traces/main 2: 1498 => ((2 trace-address))
mem: ((2 trace-address)): 1470 <= 1498
run: parse-trace/parse-traces/main 3: (((3 string-address)) <- ((new)) : )
run: parse-trace/parse-traces/main 3: 1500 => ((3 string-address))
mem: ((3 string-address)): 1471 <= 1500
run: parse-trace/parse-traces/main 4: (((4 string-address)) ((5 string-address)) <- ((split-first-at-substring)) ((1 string-address)) ((3 string-address)))
mem: ((1 string-address)) => 1412
mem: ((3 string-address)) => 1500
run: split-first-at-substring/parse-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: split-first-at-substring/parse-trace/parse-traces/main 0: 1503 => ((default-space space-address))
run: split-first-at-substring/parse-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1412 1500)
run: split-first-at-substring/parse-trace/parse-traces/main 1: 1412 => ((1 string-address))
mem: ((1 string-address)): 1505 <= 1412
run: split-first-at-substring/parse-trace/parse-traces/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1412 1500)
run: split-first-at-substring/parse-trace/parse-traces/main 2: 1500 => ((2 string-address))
mem: ((2 string-address)): 1506 <= 1500
run: split-first-at-substring/parse-trace/parse-traces/main 3: (((3 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1412 integer) (raw)) => 54
run: split-first-at-substring/parse-trace/parse-traces/main 3: 54 => ((3 integer))
mem: ((3 integer)): 1507 <= 54
run: split-first-at-substring/parse-trace/parse-traces/main 4: (((4 boolean)) <- ((equal)) ((3 integer)) ((0 literal)))
mem: ((3 integer)) => 54
run: split-first-at-substring/parse-trace/parse-traces/main 4: nil => ((4 boolean))
mem: ((4 boolean)): 1508 <= nil
run: split-first-at-substring/parse-trace/parse-traces/main 5: (((jump-unless)) ((4 boolean)) ((3 offset)))
mem: ((4 boolean)) => nil
run: split-first-at-substring/parse-trace/parse-traces/main 9: (((7 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal)))
mem: ((1 string-address)) => 1412
mem: ((2 string-address)) => 1500
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 0: 1534 => ((default-space space-address))
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1412 1500 0)
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 1: 1412 => ((1 string-address))
mem: ((1 string-address)): 1536 <= 1412
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1412 1500 0)
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 2: 1500 => ((2 string-address))
mem: ((2 string-address)): 1537 <= 1500
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1412 1500 0)
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1538 <= 0
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 4: (((4 character)) <- ((index)) ((2 string-address) (deref)) ((0 literal)))
array-len: ((1500 string) (raw))
mem: ((1500 integer) (raw)) => 2
mem: ((1501 byte) (raw)) => :
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 4: #\: => ((4 character))
mem: ((4 character)): 1539 <= #\:
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1412 integer) (raw)) => 54
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 5: 54 => ((5 integer))
mem: ((5 integer)): 1540 <= 54
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 6: (((6 boolean)) <- ((greater-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 0
mem: ((5 integer)) => 54
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 6: nil => ((6 boolean))
mem: ((6 boolean)): 1541 <= nil
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 7: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => nil
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 8: (((7 boolean)) <- ((match-at)) ((1 string-address)) ((2 string-address)) ((3 integer)))
mem: ((1 string-address)) => 1412
mem: ((2 string-address)) => 1500
mem: ((3 integer)) => 0
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 0: 1565 => ((default-space space-address))
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1412 1500 0)
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 1: 1412 => ((1 string-address))
mem: ((1 string-address)): 1567 <= 1412
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1412 1500 0)
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 2: 1500 => ((2 string-address))
mem: ((2 string-address)): 1568 <= 1500
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1412 1500 0)
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1569 <= 0
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((1500 integer) (raw)) => 2
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 4: 2 => ((4 integer))
mem: ((4 integer)): 1570 <= 2
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1412 integer) (raw)) => 54
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 5: 54 => ((5 integer))
mem: ((5 integer)): 1571 <= 54
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 6: (((5 integer)) <- ((subtract)) ((5 integer)) ((4 integer)))
mem: ((5 integer)) => 54
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 6: 52 => ((5 integer))
mem: ((5 integer)): 1571 <= 52
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 7: (((6 boolean)) <- ((lesser-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 0
mem: ((5 integer)) => 52
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 7: t => ((6 boolean))
mem: ((6 boolean)): 1572 <= t
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 8: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 10: (((7 integer)) <- ((copy)) ((0 literal)))
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 10: 0 => ((7 integer))
mem: ((7 integer)): 1573 <= 0
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1574 <= nil
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1413 byte) (raw)) => r
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 13: #\r => ((9 character))
mem: ((9 character)): 1575 <= #\r
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1500 string) (raw))
mem: ((1500 integer) (raw)) => 2
mem: ((1501 byte) (raw)) => :
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 14: #\: => ((10 character))
mem: ((10 character)): 1576 <= #\:
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) => r
mem: ((10 character)) => :
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 15: nil => ((11 boolean))
mem: ((11 boolean)): 1577 <= nil
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => nil
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 17: (((reply)) ((nil literal)))
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1542 <= nil
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((3 offset)))
mem: ((7 boolean)) => nil
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 10: 1 => ((3 integer))
mem: ((3 integer)): 1538 <= 1
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 11: (((3 integer)) <- ((find-next)) ((1 string-address)) ((4 character)) ((3 integer)))
mem: ((1 string-address)) => 1412
mem: ((4 character)) => :
mem: ((3 integer)) => 1
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 0: 1596 => ((default-space space-address))
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1412 #\: 1)
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 1: 1412 => ((1 string-address))
mem: ((1 string-address)): 1598 <= 1412
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1412 #\: 1)
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 2: #\: => ((2 character))
mem: ((2 character)): 1599 <= #\:
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1412 #\: 1)
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 3: 1 => ((3 integer))
mem: ((3 integer)): 1600 <= 1
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1412 integer) (raw)) => 54
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 4: 54 => ((4 integer))
mem: ((4 integer)): 1601 <= 54
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 54
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1602 <= nil
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1414 byte) (raw)) => u
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 7: #\u => ((6 byte))
mem: ((6 byte)): 1603 <= #\u
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => u
mem: ((2 character)) => :
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1604 <= nil
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 1
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 10: 2 => ((3 integer))
mem: ((3 integer)): 1600 <= 2
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 54
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1602 <= nil
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1415 byte) (raw)) => n
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 7: #\n => ((6 byte))
mem: ((6 byte)): 1603 <= #\n
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => n
mem: ((2 character)) => :
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1604 <= nil
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 10: 3 => ((3 integer))
mem: ((3 integer)): 1600 <= 3
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 54
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1602 <= nil
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1416 byte) (raw)) => :
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 7: #\: => ((6 byte))
mem: ((6 byte)): 1603 <= #\:
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => :
mem: ((2 character)) => :
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1604 <= t
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/find-substring/split-first-at-substring/parse-trace/parse-traces/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 3
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 11: 3 => ((3 integer))
mem: ((3 integer)): 1538 <= 3
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 12: (((jump)) ((-7 offset)))
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 6: (((6 boolean)) <- ((greater-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 3
mem: ((5 integer)) => 54
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 6: nil => ((6 boolean))
mem: ((6 boolean)): 1541 <= nil
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 7: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => nil
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 8: (((7 boolean)) <- ((match-at)) ((1 string-address)) ((2 string-address)) ((3 integer)))
mem: ((1 string-address)) => 1412
mem: ((2 string-address)) => 1500
mem: ((3 integer)) => 3
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 0: 1627 => ((default-space space-address))
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1412 1500 3)
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 1: 1412 => ((1 string-address))
mem: ((1 string-address)): 1629 <= 1412
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1412 1500 3)
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 2: 1500 => ((2 string-address))
mem: ((2 string-address)): 1630 <= 1500
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1412 1500 3)
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 3: 3 => ((3 integer))
mem: ((3 integer)): 1631 <= 3
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((1500 integer) (raw)) => 2
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 4: 2 => ((4 integer))
mem: ((4 integer)): 1632 <= 2
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1412 integer) (raw)) => 54
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 5: 54 => ((5 integer))
mem: ((5 integer)): 1633 <= 54
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 6: (((5 integer)) <- ((subtract)) ((5 integer)) ((4 integer)))
mem: ((5 integer)) => 54
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 6: 52 => ((5 integer))
mem: ((5 integer)): 1633 <= 52
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 7: (((6 boolean)) <- ((lesser-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 3
mem: ((5 integer)) => 52
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 7: t => ((6 boolean))
mem: ((6 boolean)): 1634 <= t
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 8: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 10: (((7 integer)) <- ((copy)) ((0 literal)))
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 10: 0 => ((7 integer))
mem: ((7 integer)): 1635 <= 0
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1636 <= nil
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1416 byte) (raw)) => :
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 13: #\: => ((9 character))
mem: ((9 character)): 1637 <= #\:
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1500 string) (raw))
mem: ((1500 integer) (raw)) => 2
mem: ((1501 byte) (raw)) => :
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 14: #\: => ((10 character))
mem: ((10 character)): 1638 <= #\:
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) => :
mem: ((10 character)) => :
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 15: t => ((11 boolean))
mem: ((11 boolean)): 1639 <= t
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => t
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 18: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 3
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 18: 4 => ((3 integer))
mem: ((3 integer)): 1631 <= 4
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 19: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 19: 1 => ((7 integer))
mem: ((7 integer)): 1635 <= 1
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 20: (((jump)) ((-10 offset)))
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 1
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1636 <= nil
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 4
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1417 byte) (raw)) =>  
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 13: #\space => ((9 character))
mem: ((9 character)): 1637 <= #\space
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 1
array-len: ((1500 string) (raw))
mem: ((1500 integer) (raw)) => 2
mem: ((1502 byte) (raw)) =>  
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 14: #\space => ((10 character))
mem: ((10 character)): 1638 <= #\space
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) =>  
mem: ((10 character)) =>  
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 15: t => ((11 boolean))
mem: ((11 boolean)): 1639 <= t
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => t
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 18: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 4
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 18: 5 => ((3 integer))
mem: ((3 integer)): 1631 <= 5
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 19: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 19: 2 => ((7 integer))
mem: ((7 integer)): 1635 <= 2
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 20: (((jump)) ((-10 offset)))
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 2
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 11: t => ((8 boolean))
mem: ((8 boolean)): 1636 <= t
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => t
run: match-at/find-substring/split-first-at-substring/parse-trace/parse-traces/main 21: (((reply)) ((t literal)))
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1542 <= t
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((3 offset)))
mem: ((7 boolean)) => t
run: find-substring/split-first-at-substring/parse-trace/parse-traces/main 13: (((reply)) ((3 integer)))
mem: ((3 integer)) => 3
run: split-first-at-substring/parse-trace/parse-traces/main 9: 3 => ((7 integer))
mem: ((7 integer)): 1511 <= 3
run: split-first-at-substring/parse-trace/parse-traces/main 10: (((5 string-address)) <- ((string-copy)) ((1 string-address)) ((0 literal)) ((7 integer)))
mem: ((1 string-address)) => 1412
mem: ((7 integer)) => 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 0: 1658 => ((default-space space-address))
schedule: scheduling string-copy/split-first-at-substring/parse-trace/parse-traces/main for further processing
schedule: string-copy/split-first-at-substring/parse-trace/parse-traces/main
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1412 0 3)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 1: 1412 => ((1 string-address))
mem: ((1 string-address)): 1660 <= 1412
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1412 0 3)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 2: 0 => ((2 integer))
mem: ((2 integer)): 1661 <= 0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1412 0 3)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 3: 3 => ((3 integer))
mem: ((3 integer)): 1662 <= 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1412 integer) (raw)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 4: 54 => ((4 integer))
mem: ((4 integer)): 1663 <= 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 5: (((3 integer)) <- ((min)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 54
mem: ((3 integer)) => 3
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 0: 1689 => ((default-space space-address))
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 1: (((1 integer)) <- ((next-input)))
arg: nil 0 (54 3)
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 1: 54 => ((1 integer))
mem: ((1 integer)): 1691 <= 54
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (54 3)
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 2: 3 => ((2 integer))
mem: ((2 integer)): 1692 <= 3
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 3: (((3 boolean)) <- ((less-than)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 54
mem: ((2 integer)) => 3
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 3: nil => ((3 boolean))
mem: ((3 boolean)): 1693 <= nil
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 4: (((jump-if)) ((3 boolean)) ((1 offset)))
mem: ((3 boolean)) => nil
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 5: (((reply)) ((2 integer)))
mem: ((2 integer)) => 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 5: 3 => ((3 integer))
mem: ((3 integer)): 1662 <= 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 6: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 3
mem: ((2 integer)) => 0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 6: 3 => ((4 integer))
mem: ((4 integer)): 1663 <= 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 7: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 7: 1720 => ((5 string-address))
mem: ((5 string-address)): 1664 <= 1720
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 8: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 8: 0 => ((6 integer))
mem: ((6 integer)): 1665 <= 0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 9: 0 => ((7 integer))
mem: ((7 integer)): 1666 <= 0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 0
mem: ((3 integer)) => 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1667 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 0
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1413 byte) (raw)) => r
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\r => ((9 character))
mem: ((9 character)): 1668 <= #\r
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1720 string) (raw))
mem: ((1720 integer) (raw)) => 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1721 => ((10 character-address))
mem: ((10 character-address)): 1669 <= 1721
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => r
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\r => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1721 <= #\r
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 1 => ((6 integer))
mem: ((6 integer)): 1665 <= 1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 1 => ((7 integer))
mem: ((7 integer)): 1666 <= 1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 1
mem: ((3 integer)) => 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1667 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 1
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1414 byte) (raw)) => u
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\u => ((9 character))
mem: ((9 character)): 1668 <= #\u
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 1
array-len: ((1720 string) (raw))
mem: ((1720 integer) (raw)) => 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1722 => ((10 character-address))
mem: ((10 character-address)): 1669 <= 1722
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => u
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\u => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1722 <= #\u
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 2 => ((6 integer))
mem: ((6 integer)): 1665 <= 2
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 2 => ((7 integer))
mem: ((7 integer)): 1666 <= 2
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 2
mem: ((3 integer)) => 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1667 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 2
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1415 byte) (raw)) => n
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\n => ((9 character))
mem: ((9 character)): 1668 <= #\n
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 2
array-len: ((1720 string) (raw))
mem: ((1720 integer) (raw)) => 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1723 => ((10 character-address))
mem: ((10 character-address)): 1669 <= 1723
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => n
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\n => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1723 <= #\n
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 2
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 3 => ((6 integer))
mem: ((6 integer)): 1665 <= 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 2
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 3 => ((7 integer))
mem: ((7 integer)): 1666 <= 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 3
mem: ((3 integer)) => 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: t => ((8 boolean))
mem: ((8 boolean)): 1667 <= t
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 18: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1720
run: split-first-at-substring/parse-trace/parse-traces/main 10: 1720 => ((5 string-address))
mem: ((5 string-address)): 1509 <= 1720
run: split-first-at-substring/parse-trace/parse-traces/main 11: (((8 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((1500 integer) (raw)) => 2
run: split-first-at-substring/parse-trace/parse-traces/main 11: 2 => ((8 integer))
mem: ((8 integer)): 1512 <= 2
run: split-first-at-substring/parse-trace/parse-traces/main 12: (((7 integer)) <- ((add)) ((7 integer)) ((8 integer)))
mem: ((7 integer)) => 3
mem: ((8 integer)) => 2
run: split-first-at-substring/parse-trace/parse-traces/main 12: 5 => ((7 integer))
mem: ((7 integer)): 1511 <= 5
run: split-first-at-substring/parse-trace/parse-traces/main 13: (((6 string-address)) <- ((string-copy)) ((1 string-address)) ((7 integer)) ((3 integer)))
mem: ((1 string-address)) => 1412
mem: ((7 integer)) => 5
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 0: 1724 => ((default-space space-address))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1412 5 54)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 1: 1412 => ((1 string-address))
mem: ((1 string-address)): 1726 <= 1412
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1412 5 54)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 2: 5 => ((2 integer))
mem: ((2 integer)): 1727 <= 5
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1412 5 54)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 3: 54 => ((3 integer))
mem: ((3 integer)): 1728 <= 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1412 integer) (raw)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 4: 54 => ((4 integer))
mem: ((4 integer)): 1729 <= 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 5: (((3 integer)) <- ((min)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 54
mem: ((3 integer)) => 54
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 0: 1755 => ((default-space space-address))
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 1: (((1 integer)) <- ((next-input)))
arg: nil 0 (54 54)
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 1: 54 => ((1 integer))
mem: ((1 integer)): 1757 <= 54
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (54 54)
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 2: 54 => ((2 integer))
mem: ((2 integer)): 1758 <= 54
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 3: (((3 boolean)) <- ((less-than)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 54
mem: ((2 integer)) => 54
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 3: nil => ((3 boolean))
mem: ((3 boolean)): 1759 <= nil
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 4: (((jump-if)) ((3 boolean)) ((1 offset)))
mem: ((3 boolean)) => nil
run: min/string-copy/split-first-at-substring/parse-trace/parse-traces/main 5: (((reply)) ((2 integer)))
mem: ((2 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 5: 54 => ((3 integer))
mem: ((3 integer)): 1728 <= 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 6: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 54
mem: ((2 integer)) => 5
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 6: 49 => ((4 integer))
mem: ((4 integer)): 1729 <= 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 7: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 7: 1786 => ((5 string-address))
mem: ((5 string-address)): 1730 <= 1786
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 8: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 5
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 8: 5 => ((6 integer))
mem: ((6 integer)): 1731 <= 5
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 9: 0 => ((7 integer))
mem: ((7 integer)): 1732 <= 0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 5
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 5
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1418 byte) (raw)) => m
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\m => ((9 character))
mem: ((9 character)): 1734 <= #\m
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1787 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1787
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => m
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\m => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1787 <= #\m
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 5
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 6 => ((6 integer))
mem: ((6 integer)): 1731 <= 6
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 1 => ((7 integer))
mem: ((7 integer)): 1732 <= 1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 6
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 6
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1419 byte) (raw)) => a
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\a => ((9 character))
mem: ((9 character)): 1734 <= #\a
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 1
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1788 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1788
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => a
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\a => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1788 <= #\a
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 6
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 7 => ((6 integer))
mem: ((6 integer)): 1731 <= 7
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 2 => ((7 integer))
mem: ((7 integer)): 1732 <= 2
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 7
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 7
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1420 byte) (raw)) => i
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\i => ((9 character))
mem: ((9 character)): 1734 <= #\i
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 2
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1789 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1789
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => i
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\i => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1789 <= #\i
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 7
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 8 => ((6 integer))
mem: ((6 integer)): 1731 <= 8
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 2
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 3 => ((7 integer))
mem: ((7 integer)): 1732 <= 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 8
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 8
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1421 byte) (raw)) => n
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\n => ((9 character))
mem: ((9 character)): 1734 <= #\n
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 3
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1790 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1790
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => n
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\n => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1790 <= #\n
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 8
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 9 => ((6 integer))
mem: ((6 integer)): 1731 <= 9
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 3
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 4 => ((7 integer))
mem: ((7 integer)): 1732 <= 4
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 9
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 9
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1422 byte) (raw)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1734 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 4
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1791 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1791
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1791 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 9
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 10 => ((6 integer))
mem: ((6 integer)): 1731 <= 10
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 4
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 5 => ((7 integer))
mem: ((7 integer)): 1732 <= 5
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 10
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 10
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1423 byte) (raw)) => 0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\0 => ((9 character))
mem: ((9 character)): 1734 <= #\0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 5
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1792 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1792
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => 0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\0 => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1792 <= #\0
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 10
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 11 => ((6 integer))
mem: ((6 integer)): 1731 <= 11
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 5
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 6 => ((7 integer))
mem: ((7 integer)): 1732 <= 6
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 11
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 11
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1424 byte) (raw)) => :
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\: => ((9 character))
mem: ((9 character)): 1734 <= #\:
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 6
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1793 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1793
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => :
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\: => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1793 <= #\:
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 11
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 12 => ((6 integer))
mem: ((6 integer)): 1731 <= 12
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 6
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 7 => ((7 integer))
mem: ((7 integer)): 1732 <= 7
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 12
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 12
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1425 byte) (raw)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1734 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 7
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1794 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1794
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1794 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 12
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 13 => ((6 integer))
mem: ((6 integer)): 1731 <= 13
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 7
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 8 => ((7 integer))
mem: ((7 integer)): 1732 <= 8
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 13
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 13
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1426 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1734 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 8
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1795 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1795
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1795 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 13
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 14 => ((6 integer))
mem: ((6 integer)): 1731 <= 14
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 8
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 9 => ((7 integer))
mem: ((7 integer)): 1732 <= 9
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 14
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 14
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1427 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1734 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 9
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1796 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1796
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1796 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 14
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 15 => ((6 integer))
mem: ((6 integer)): 1731 <= 15
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 9
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 10 => ((7 integer))
mem: ((7 integer)): 1732 <= 10
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 15
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 15
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1428 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1734 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 10
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1797 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1797
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1797 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 15
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 16 => ((6 integer))
mem: ((6 integer)): 1731 <= 16
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 10
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 11 => ((7 integer))
mem: ((7 integer)): 1732 <= 11
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 16
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 16
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1429 byte) (raw)) => 1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\1 => ((9 character))
mem: ((9 character)): 1734 <= #\1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 11
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1798 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1798
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => 1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\1 => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1798 <= #\1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 16
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 17 => ((6 integer))
mem: ((6 integer)): 1731 <= 17
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 11
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 12 => ((7 integer))
mem: ((7 integer)): 1732 <= 12
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 17
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 17
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1430 byte) (raw)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1734 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 12
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1799 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1799
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1799 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 17
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 18 => ((6 integer))
mem: ((6 integer)): 1731 <= 18
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 12
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 13 => ((7 integer))
mem: ((7 integer)): 1732 <= 13
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 18
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 18
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1431 byte) (raw)) => i
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\i => ((9 character))
mem: ((9 character)): 1734 <= #\i
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 13
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1800 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1800
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => i
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\i => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1800 <= #\i
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 18
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 19 => ((6 integer))
mem: ((6 integer)): 1731 <= 19
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 13
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 14 => ((7 integer))
mem: ((7 integer)): 1732 <= 14
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 19
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 19
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1432 byte) (raw)) => n
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\n => ((9 character))
mem: ((9 character)): 1734 <= #\n
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 14
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1801 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1801
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => n
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\n => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1801 <= #\n
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 19
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 20 => ((6 integer))
mem: ((6 integer)): 1731 <= 20
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 14
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 15 => ((7 integer))
mem: ((7 integer)): 1732 <= 15
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 20
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 20
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1433 byte) (raw)) => t
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\t => ((9 character))
mem: ((9 character)): 1734 <= #\t
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 15
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1802 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1802
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => t
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\t => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1802 <= #\t
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 20
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 21 => ((6 integer))
mem: ((6 integer)): 1731 <= 21
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 15
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 16 => ((7 integer))
mem: ((7 integer)): 1732 <= 16
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 21
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 21
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1434 byte) (raw)) => e
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\e => ((9 character))
mem: ((9 character)): 1734 <= #\e
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 16
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1803 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1803
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => e
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\e => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1803 <= #\e
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 21
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 22 => ((6 integer))
mem: ((6 integer)): 1731 <= 22
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 16
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 17 => ((7 integer))
mem: ((7 integer)): 1732 <= 17
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 22
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 22
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1435 byte) (raw)) => g
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\g => ((9 character))
mem: ((9 character)): 1734 <= #\g
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 17
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1804 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1804
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => g
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\g => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1804 <= #\g
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 22
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 23 => ((6 integer))
mem: ((6 integer)): 1731 <= 23
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 17
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 18 => ((7 integer))
mem: ((7 integer)): 1732 <= 18
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 23
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 23
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1436 byte) (raw)) => e
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\e => ((9 character))
mem: ((9 character)): 1734 <= #\e
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 18
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1805 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1805
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => e
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\e => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1805 <= #\e
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 23
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 24 => ((6 integer))
mem: ((6 integer)): 1731 <= 24
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 18
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 19 => ((7 integer))
mem: ((7 integer)): 1732 <= 19
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 24
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 24
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1437 byte) (raw)) => r
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\r => ((9 character))
mem: ((9 character)): 1734 <= #\r
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 19
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1806 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1806
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => r
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\r => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1806 <= #\r
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 24
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 25 => ((6 integer))
mem: ((6 integer)): 1731 <= 25
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 19
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 20 => ((7 integer))
mem: ((7 integer)): 1732 <= 20
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 25
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 25
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1438 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1734 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 20
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1807 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1807
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1807 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 25
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 26 => ((6 integer))
mem: ((6 integer)): 1731 <= 26
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 20
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 21 => ((7 integer))
mem: ((7 integer)): 1732 <= 21
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 26
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 26
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1439 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1734 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 21
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1808 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1808
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1808 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 26
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 27 => ((6 integer))
mem: ((6 integer)): 1731 <= 27
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 21
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 22 => ((7 integer))
mem: ((7 integer)): 1732 <= 22
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 27
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 27
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1440 byte) (raw)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1734 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 22
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1809 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1809
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1809 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 27
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 28 => ((6 integer))
mem: ((6 integer)): 1731 <= 28
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 22
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 23 => ((7 integer))
mem: ((7 integer)): 1732 <= 23
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 28
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 28
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1441 byte) (raw)) => <
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\< => ((9 character))
mem: ((9 character)): 1734 <= #\<
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 23
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1810 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1810
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => <
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\< => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1810 <= #\<
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 28
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 29 => ((6 integer))
mem: ((6 integer)): 1731 <= 29
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 23
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 24 => ((7 integer))
mem: ((7 integer)): 1732 <= 24
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 29
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 29
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1442 byte) (raw)) => -
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\- => ((9 character))
mem: ((9 character)): 1734 <= #\-
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 24
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1811 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1811
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => -
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\- => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1811 <= #\-
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 29
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 30 => ((6 integer))
mem: ((6 integer)): 1731 <= 30
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 24
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 25 => ((7 integer))
mem: ((7 integer)): 1732 <= 25
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 30
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 30
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1443 byte) (raw)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1734 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 25
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1812 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1812
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1812 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 30
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 31 => ((6 integer))
mem: ((6 integer)): 1731 <= 31
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 25
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 26 => ((7 integer))
mem: ((7 integer)): 1732 <= 26
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 31
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 31
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1444 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1734 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 26
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1813 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1813
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1813 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 31
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 32 => ((6 integer))
mem: ((6 integer)): 1731 <= 32
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 26
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 27 => ((7 integer))
mem: ((7 integer)): 1732 <= 27
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 32
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 32
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1445 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1734 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 27
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1814 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1814
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1814 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 32
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 33 => ((6 integer))
mem: ((6 integer)): 1731 <= 33
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 27
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 28 => ((7 integer))
mem: ((7 integer)): 1732 <= 28
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 33
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 33
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1446 byte) (raw)) => c
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\c => ((9 character))
mem: ((9 character)): 1734 <= #\c
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 28
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1815 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1815
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => c
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\c => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1815 <= #\c
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 33
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 34 => ((6 integer))
mem: ((6 integer)): 1731 <= 34
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 28
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 29 => ((7 integer))
mem: ((7 integer)): 1732 <= 29
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 34
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 34
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1447 byte) (raw)) => o
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\o => ((9 character))
mem: ((9 character)): 1734 <= #\o
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 29
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1816 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1816
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => o
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\o => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1816 <= #\o
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 34
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 35 => ((6 integer))
mem: ((6 integer)): 1731 <= 35
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 29
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 30 => ((7 integer))
mem: ((7 integer)): 1732 <= 30
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 35
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 35
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1448 byte) (raw)) => p
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\p => ((9 character))
mem: ((9 character)): 1734 <= #\p
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 30
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1817 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1817
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => p
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\p => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1817 <= #\p
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 35
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 36 => ((6 integer))
mem: ((6 integer)): 1731 <= 36
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 30
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 31 => ((7 integer))
mem: ((7 integer)): 1732 <= 31
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 36
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 36
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1449 byte) (raw)) => y
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\y => ((9 character))
mem: ((9 character)): 1734 <= #\y
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 31
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1818 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1818
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => y
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\y => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1818 <= #\y
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 36
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 37 => ((6 integer))
mem: ((6 integer)): 1731 <= 37
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 31
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 32 => ((7 integer))
mem: ((7 integer)): 1732 <= 32
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 37
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 37
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1450 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1734 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 32
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1819 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1819
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1819 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 37
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 38 => ((6 integer))
mem: ((6 integer)): 1731 <= 38
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 32
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 33 => ((7 integer))
mem: ((7 integer)): 1732 <= 33
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 38
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 38
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1451 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1734 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 33
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1820 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1820
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1820 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 38
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 39 => ((6 integer))
mem: ((6 integer)): 1731 <= 39
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 33
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 34 => ((7 integer))
mem: ((7 integer)): 1732 <= 34
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 39
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 39
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1452 byte) (raw)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1734 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 34
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1821 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1821
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1821 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 39
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 40 => ((6 integer))
mem: ((6 integer)): 1731 <= 40
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 34
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 35 => ((7 integer))
mem: ((7 integer)): 1732 <= 35
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 40
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 40
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1453 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1734 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 35
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1822 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1822
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1822 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 40
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 41 => ((6 integer))
mem: ((6 integer)): 1731 <= 41
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 35
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 36 => ((7 integer))
mem: ((7 integer)): 1732 <= 36
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 41
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 41
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1454 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 1734 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 36
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1823 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1823
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1823 <= #\(
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 41
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 42 => ((6 integer))
mem: ((6 integer)): 1731 <= 42
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 36
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 37 => ((7 integer))
mem: ((7 integer)): 1732 <= 37
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 42
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 42
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1455 byte) (raw)) => 1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\1 => ((9 character))
mem: ((9 character)): 1734 <= #\1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 37
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1824 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1824
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => 1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\1 => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1824 <= #\1
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 42
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 43 => ((6 integer))
mem: ((6 integer)): 1731 <= 43
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 37
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 38 => ((7 integer))
mem: ((7 integer)): 1732 <= 38
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 43
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 43
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1456 byte) (raw)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 1734 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 38
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1825 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1825
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1825 <= #\space
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 43
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 44 => ((6 integer))
mem: ((6 integer)): 1731 <= 44
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 38
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 39 => ((7 integer))
mem: ((7 integer)): 1732 <= 39
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 44
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 44
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1457 byte) (raw)) => l
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\l => ((9 character))
mem: ((9 character)): 1734 <= #\l
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 39
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1826 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1826
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => l
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\l => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1826 <= #\l
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 44
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 45 => ((6 integer))
mem: ((6 integer)): 1731 <= 45
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 39
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 40 => ((7 integer))
mem: ((7 integer)): 1732 <= 40
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 45
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 45
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1458 byte) (raw)) => i
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\i => ((9 character))
mem: ((9 character)): 1734 <= #\i
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 40
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1827 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1827
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => i
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\i => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1827 <= #\i
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 45
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 46 => ((6 integer))
mem: ((6 integer)): 1731 <= 46
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 40
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 41 => ((7 integer))
mem: ((7 integer)): 1732 <= 41
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 46
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 46
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1459 byte) (raw)) => t
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\t => ((9 character))
mem: ((9 character)): 1734 <= #\t
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 41
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1828 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1828
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => t
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\t => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1828 <= #\t
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 46
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 47 => ((6 integer))
mem: ((6 integer)): 1731 <= 47
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 41
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 42 => ((7 integer))
mem: ((7 integer)): 1732 <= 42
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 47
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 47
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1460 byte) (raw)) => e
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\e => ((9 character))
mem: ((9 character)): 1734 <= #\e
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 42
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1829 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1829
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => e
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\e => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1829 <= #\e
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 47
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 48 => ((6 integer))
mem: ((6 integer)): 1731 <= 48
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 42
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 43 => ((7 integer))
mem: ((7 integer)): 1732 <= 43
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 48
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 48
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1461 byte) (raw)) => r
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\r => ((9 character))
mem: ((9 character)): 1734 <= #\r
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 43
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1830 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1830
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => r
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\r => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1830 <= #\r
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 48
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 49 => ((6 integer))
mem: ((6 integer)): 1731 <= 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 43
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 44 => ((7 integer))
mem: ((7 integer)): 1732 <= 44
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 49
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 49
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1462 byte) (raw)) => a
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\a => ((9 character))
mem: ((9 character)): 1734 <= #\a
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 44
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1831 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1831
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => a
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\a => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1831 <= #\a
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 50 => ((6 integer))
mem: ((6 integer)): 1731 <= 50
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 44
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 45 => ((7 integer))
mem: ((7 integer)): 1732 <= 45
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 50
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 50
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1463 byte) (raw)) => l
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\l => ((9 character))
mem: ((9 character)): 1734 <= #\l
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 45
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1832 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1832
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => l
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\l => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1832 <= #\l
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 50
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 51 => ((6 integer))
mem: ((6 integer)): 1731 <= 51
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 45
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 46 => ((7 integer))
mem: ((7 integer)): 1732 <= 46
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 51
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 51
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1464 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1734 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 46
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1833 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1833
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1833 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 51
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 52 => ((6 integer))
mem: ((6 integer)): 1731 <= 52
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 46
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 47 => ((7 integer))
mem: ((7 integer)): 1732 <= 47
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 52
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 52
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1465 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1734 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 47
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1834 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1834
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1834 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 52
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 53 => ((6 integer))
mem: ((6 integer)): 1731 <= 53
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 47
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 48 => ((7 integer))
mem: ((7 integer)): 1732 <= 48
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 53
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1733 <= nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 53
array-len: ((1412 string) (raw))
mem: ((1412 integer) (raw)) => 54
mem: ((1466 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 1734 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 48
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 13: 1835 => ((10 character-address))
mem: ((10 character-address)): 1735 <= 1835
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1835 <= #\)
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 53
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 15: 54 => ((6 integer))
mem: ((6 integer)): 1731 <= 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 48
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 16: 49 => ((7 integer))
mem: ((7 integer)): 1732 <= 49
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 54
mem: ((3 integer)) => 54
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 10: t => ((8 boolean))
mem: ((8 boolean)): 1733 <= t
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split-first-at-substring/parse-trace/parse-traces/main 18: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1786
run: split-first-at-substring/parse-trace/parse-traces/main 13: 1786 => ((6 string-address))
mem: ((6 string-address)): 1510 <= 1786
run: split-first-at-substring/parse-trace/parse-traces/main 14: (((reply)) ((5 string-address)) ((6 string-address)))
mem: ((5 string-address)) => 1720
mem: ((6 string-address)) => 1786
run: parse-trace/parse-traces/main 4: 1720 => ((4 string-address))
mem: ((4 string-address)): 1472 <= 1720
run: parse-trace/parse-traces/main 4: 1786 => ((5 string-address))
mem: ((5 string-address)): 1473 <= 1786
run: parse-trace/parse-traces/main 5: (((6 string-address-address)) <- ((get-address)) ((2 trace-address) (deref)) ((0 offset)))
run: parse-trace/parse-traces/main 5: 1498 => ((6 string-address-address))
mem: ((6 string-address-address)): 1474 <= 1498
run: parse-trace/parse-traces/main 6: (((6 string-address-address) (deref)) <- ((copy)) ((4 string-address)))
mem: ((4 string-address)) => 1720
run: parse-trace/parse-traces/main 6: 1720 => ((6 string-address-address) (deref))
mem: ((6 string-address-address) (deref)): 1498 <= 1720
run: parse-trace/parse-traces/main 7: (((7 string-address-address)) <- ((get-address)) ((2 trace-address) (deref)) ((1 offset)))
run: parse-trace/parse-traces/main 7: 1499 => ((7 string-address-address))
mem: ((7 string-address-address)): 1475 <= 1499
run: parse-trace/parse-traces/main 8: (((7 string-address-address) (deref)) <- ((copy)) ((5 string-address)))
mem: ((5 string-address)) => 1786
run: parse-trace/parse-traces/main 8: 1786 => ((7 string-address-address) (deref))
mem: ((7 string-address-address) (deref)): 1499 <= 1786
run: parse-trace/parse-traces/main 9: (((reply)) ((2 trace-address)))
mem: ((2 trace-address)) => 1498
run: parse-traces/main 10: 1498 => ((8 trace-address))
mem: ((8 trace-address)): 1128 <= 1498
run: parse-traces/main 11: (((9 string-address)) <- ((get)) ((8 trace-address) (deref)) ((0 offset)))
mem: ((1498 string-address) (raw)) => 1720
run: parse-traces/main 11: 1720 => ((9 string-address))
mem: ((9 string-address)): 1129 <= 1720
run: parse-traces/main 12: (((10 boolean)) <- ((string-equal)) ((9 string-address)) ((5 string-address) (const)))
mem: ((9 string-address)) => 1720
mem: ((5 string-address) (const)) => 1253
run: string-equal/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-equal/parse-traces/main 0: 1836 => ((default-space space-address))
run: string-equal/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1720 1253)
run: string-equal/parse-traces/main 1: 1720 => ((1 string-address))
mem: ((1 string-address)): 1838 <= 1720
run: string-equal/parse-traces/main 2: (((2 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1720 integer) (raw)) => 3
run: string-equal/parse-traces/main 2: 3 => ((2 integer))
mem: ((2 integer)): 1839 <= 3
run: string-equal/parse-traces/main 3: (((3 string-address)) <- ((next-input)))
arg: nil 1 (1720 1253)
run: string-equal/parse-traces/main 3: 1253 => ((3 string-address))
mem: ((3 string-address)): 1840 <= 1253
run: string-equal/parse-traces/main 4: (((4 integer)) <- ((length)) ((3 string-address) (deref)))
array-len: ((3 string-address) (deref))
mem: ((1253 integer) (raw)) => 3
run: string-equal/parse-traces/main 4: 3 => ((4 integer))
mem: ((4 integer)): 1841 <= 3
run: string-equal/parse-traces/main 5: (((5 boolean)) <- ((equal)) ((2 integer)) ((4 integer)))
mem: ((2 integer)) => 3
mem: ((4 integer)) => 3
run: string-equal/parse-traces/main 5: t => ((5 boolean))
mem: ((5 boolean)): 1842 <= t
run: string-equal/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((1 offset)))
mem: ((5 boolean)) => t
run: string-equal/parse-traces/main 8: (((6 integer)) <- ((copy)) ((0 literal)))
run: string-equal/parse-traces/main 8: 0 => ((6 integer))
mem: ((6 integer)): 1843 <= 0
run: string-equal/parse-traces/main 9: (((7 boolean)) <- ((greater-or-equal)) ((6 integer)) ((2 integer)))
mem: ((6 integer)) => 0
mem: ((2 integer)) => 3
run: string-equal/parse-traces/main 9: nil => ((7 boolean))
mem: ((7 boolean)): 1844 <= nil
run: string-equal/parse-traces/main 10: (((jump-if)) ((7 boolean)) ((7 offset)))
mem: ((7 boolean)) => nil
run: string-equal/parse-traces/main 11: (((8 byte)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 0
array-len: ((1720 string) (raw))
mem: ((1720 integer) (raw)) => 3
mem: ((1721 byte) (raw)) => r
run: string-equal/parse-traces/main 11: #\r => ((8 byte))
mem: ((8 byte)): 1845 <= #\r
run: string-equal/parse-traces/main 12: (((9 byte)) <- ((index)) ((3 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 0
array-len: ((1253 string) (raw))
mem: ((1253 integer) (raw)) => 3
mem: ((1254 byte) (raw)) => r
run: string-equal/parse-traces/main 12: #\r => ((9 byte))
mem: ((9 byte)): 1846 <= #\r
run: string-equal/parse-traces/main 13: (((10 boolean)) <- ((equal)) ((8 byte)) ((9 byte)))
mem: ((8 byte)) => r
mem: ((9 byte)) => r
run: string-equal/parse-traces/main 13: t => ((10 boolean))
mem: ((10 boolean)): 1847 <= t
run: string-equal/parse-traces/main 14: (((jump-if)) ((10 boolean)) ((1 offset)))
mem: ((10 boolean)) => t
run: string-equal/parse-traces/main 16: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 0
run: string-equal/parse-traces/main 16: 1 => ((6 integer))
mem: ((6 integer)): 1843 <= 1
run: string-equal/parse-traces/main 17: (((jump)) ((-9 offset)))
run: string-equal/parse-traces/main 9: (((7 boolean)) <- ((greater-or-equal)) ((6 integer)) ((2 integer)))
mem: ((6 integer)) => 1
mem: ((2 integer)) => 3
run: string-equal/parse-traces/main 9: nil => ((7 boolean))
mem: ((7 boolean)): 1844 <= nil
run: string-equal/parse-traces/main 10: (((jump-if)) ((7 boolean)) ((7 offset)))
mem: ((7 boolean)) => nil
run: string-equal/parse-traces/main 11: (((8 byte)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 1
array-len: ((1720 string) (raw))
mem: ((1720 integer) (raw)) => 3
mem: ((1722 byte) (raw)) => u
run: string-equal/parse-traces/main 11: #\u => ((8 byte))
mem: ((8 byte)): 1845 <= #\u
run: string-equal/parse-traces/main 12: (((9 byte)) <- ((index)) ((3 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 1
array-len: ((1253 string) (raw))
mem: ((1253 integer) (raw)) => 3
mem: ((1255 byte) (raw)) => u
run: string-equal/parse-traces/main 12: #\u => ((9 byte))
mem: ((9 byte)): 1846 <= #\u
run: string-equal/parse-traces/main 13: (((10 boolean)) <- ((equal)) ((8 byte)) ((9 byte)))
mem: ((8 byte)) => u
mem: ((9 byte)) => u
run: string-equal/parse-traces/main 13: t => ((10 boolean))
mem: ((10 boolean)): 1847 <= t
run: string-equal/parse-traces/main 14: (((jump-if)) ((10 boolean)) ((1 offset)))
mem: ((10 boolean)) => t
run: string-equal/parse-traces/main 16: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 1
run: string-equal/parse-traces/main 16: 2 => ((6 integer))
mem: ((6 integer)): 1843 <= 2
run: string-equal/parse-traces/main 17: (((jump)) ((-9 offset)))
run: string-equal/parse-traces/main 9: (((7 boolean)) <- ((greater-or-equal)) ((6 integer)) ((2 integer)))
mem: ((6 integer)) => 2
mem: ((2 integer)) => 3
run: string-equal/parse-traces/main 9: nil => ((7 boolean))
mem: ((7 boolean)): 1844 <= nil
run: string-equal/parse-traces/main 10: (((jump-if)) ((7 boolean)) ((7 offset)))
mem: ((7 boolean)) => nil
run: string-equal/parse-traces/main 11: (((8 byte)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 2
array-len: ((1720 string) (raw))
mem: ((1720 integer) (raw)) => 3
mem: ((1723 byte) (raw)) => n
run: string-equal/parse-traces/main 11: #\n => ((8 byte))
mem: ((8 byte)): 1845 <= #\n
run: string-equal/parse-traces/main 12: (((9 byte)) <- ((index)) ((3 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 2
array-len: ((1253 string) (raw))
mem: ((1253 integer) (raw)) => 3
mem: ((1256 byte) (raw)) => n
run: string-equal/parse-traces/main 12: #\n => ((9 byte))
mem: ((9 byte)): 1846 <= #\n
run: string-equal/parse-traces/main 13: (((10 boolean)) <- ((equal)) ((8 byte)) ((9 byte)))
mem: ((8 byte)) => n
mem: ((9 byte)) => n
run: string-equal/parse-traces/main 13: t => ((10 boolean))
mem: ((10 boolean)): 1847 <= t
run: string-equal/parse-traces/main 14: (((jump-if)) ((10 boolean)) ((1 offset)))
mem: ((10 boolean)) => t
run: string-equal/parse-traces/main 16: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 2
run: string-equal/parse-traces/main 16: 3 => ((6 integer))
mem: ((6 integer)): 1843 <= 3
run: string-equal/parse-traces/main 17: (((jump)) ((-9 offset)))
run: string-equal/parse-traces/main 9: (((7 boolean)) <- ((greater-or-equal)) ((6 integer)) ((2 integer)))
mem: ((6 integer)) => 3
mem: ((2 integer)) => 3
run: string-equal/parse-traces/main 9: t => ((7 boolean))
mem: ((7 boolean)): 1844 <= t
run: string-equal/parse-traces/main 10: (((jump-if)) ((7 boolean)) ((7 offset)))
mem: ((7 boolean)) => t
run: string-equal/parse-traces/main 18: (((reply)) ((t literal)))
run: parse-traces/main 12: t => ((10 boolean))
mem: ((10 boolean)): 1130 <= t
run: parse-traces/main 13: (((jump-unless)) ((10 boolean)) ((7 offset)))
mem: ((10 boolean)) => t
schedule: scheduling parse-traces/main for further processing
schedule: parse-traces/main
run: parse-traces/main 14: (((jump-unless)) ((3 instruction-trace-address)) ((3 offset)))
mem: ((3 instruction-trace-address)) => nil
run: parse-traces/main 18: (((3 instruction-trace-address)) <- ((parse-instruction-trace)) ((8 trace-address)))
mem: ((8 trace-address)) => 1498
run: parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: parse-instruction-trace/parse-traces/main 0: 1867 => ((default-space space-address))
run: parse-instruction-trace/parse-traces/main 1: (((1 trace-address)) <- ((next-input)))
arg: nil 0 (1498)
run: parse-instruction-trace/parse-traces/main 1: 1498 => ((1 trace-address))
mem: ((1 trace-address)): 1869 <= 1498
run: parse-instruction-trace/parse-traces/main 2: (((2 string-address)) <- ((get)) ((1 trace-address) (deref)) ((1 offset)))
mem: ((1499 string-address) (raw)) => 1786
run: parse-instruction-trace/parse-traces/main 2: 1786 => ((2 string-address))
mem: ((2 string-address)): 1870 <= 1786
run: parse-instruction-trace/parse-traces/main 3: (((3 instruction-trace-address)) <- ((new)) ((instruction-trace literal)))
run: parse-instruction-trace/parse-traces/main 3: 1898 => ((3 instruction-trace-address))
mem: ((3 instruction-trace-address)): 1871 <= 1898
run: parse-instruction-trace/parse-traces/main 4: (((4 string-address)) ((5 string-address)) <- ((split-first)) ((2 string-address)) ((  literal)))
mem: ((2 string-address)) => 1786
run: split-first/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: split-first/parse-instruction-trace/parse-traces/main 0: 1902 => ((default-space space-address))
run: split-first/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1786 #\space)
run: split-first/parse-instruction-trace/parse-traces/main 1: 1786 => ((1 string-address))
mem: ((1 string-address)): 1904 <= 1786
run: split-first/parse-instruction-trace/parse-traces/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1786 #\space)
run: split-first/parse-instruction-trace/parse-traces/main 2: #\space => ((2 character))
mem: ((2 character)): 1905 <= #\space
run: split-first/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1786 integer) (raw)) => 49
run: split-first/parse-instruction-trace/parse-traces/main 3: 49 => ((3 integer))
mem: ((3 integer)): 1906 <= 49
run: split-first/parse-instruction-trace/parse-traces/main 4: (((4 boolean)) <- ((equal)) ((3 integer)) ((0 literal)))
mem: ((3 integer)) => 49
run: split-first/parse-instruction-trace/parse-traces/main 4: nil => ((4 boolean))
mem: ((4 boolean)): 1907 <= nil
run: split-first/parse-instruction-trace/parse-traces/main 5: (((jump-unless)) ((4 boolean)) ((3 offset)))
mem: ((4 boolean)) => nil
run: split-first/parse-instruction-trace/parse-traces/main 9: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((0 literal)))
mem: ((1 string-address)) => 1786
mem: ((2 character)) =>  
run: find-next/split-first/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/split-first/parse-instruction-trace/parse-traces/main 0: 1933 => ((default-space space-address))
run: find-next/split-first/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1786 #\space 0)
run: find-next/split-first/parse-instruction-trace/parse-traces/main 1: 1786 => ((1 string-address))
mem: ((1 string-address)): 1935 <= 1786
run: find-next/split-first/parse-instruction-trace/parse-traces/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1786 #\space 0)
run: find-next/split-first/parse-instruction-trace/parse-traces/main 2: #\space => ((2 character))
mem: ((2 character)): 1936 <= #\space
run: find-next/split-first/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1786 #\space 0)
run: find-next/split-first/parse-instruction-trace/parse-traces/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1937 <= 0
run: find-next/split-first/parse-instruction-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1786 integer) (raw)) => 49
run: find-next/split-first/parse-instruction-trace/parse-traces/main 4: 49 => ((4 integer))
mem: ((4 integer)): 1938 <= 49
run: find-next/split-first/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 0
mem: ((4 integer)) => 49
run: find-next/split-first/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1939 <= nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1787 byte) (raw)) => m
run: find-next/split-first/parse-instruction-trace/parse-traces/main 7: #\m => ((6 byte))
mem: ((6 byte)): 1940 <= #\m
run: find-next/split-first/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => m
mem: ((2 character)) =>  
run: find-next/split-first/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1941 <= nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-next/split-first/parse-instruction-trace/parse-traces/main 10: 1 => ((3 integer))
mem: ((3 integer)): 1937 <= 1
run: find-next/split-first/parse-instruction-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/split-first/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 49
run: find-next/split-first/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1939 <= nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1788 byte) (raw)) => a
run: find-next/split-first/parse-instruction-trace/parse-traces/main 7: #\a => ((6 byte))
mem: ((6 byte)): 1940 <= #\a
run: find-next/split-first/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => a
mem: ((2 character)) =>  
run: find-next/split-first/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1941 <= nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 1
run: find-next/split-first/parse-instruction-trace/parse-traces/main 10: 2 => ((3 integer))
mem: ((3 integer)): 1937 <= 2
run: find-next/split-first/parse-instruction-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/split-first/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 49
run: find-next/split-first/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1939 <= nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1789 byte) (raw)) => i
run: find-next/split-first/parse-instruction-trace/parse-traces/main 7: #\i => ((6 byte))
mem: ((6 byte)): 1940 <= #\i
run: find-next/split-first/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => i
mem: ((2 character)) =>  
run: find-next/split-first/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1941 <= nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-next/split-first/parse-instruction-trace/parse-traces/main 10: 3 => ((3 integer))
mem: ((3 integer)): 1937 <= 3
run: find-next/split-first/parse-instruction-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/split-first/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 49
run: find-next/split-first/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1939 <= nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1790 byte) (raw)) => n
run: find-next/split-first/parse-instruction-trace/parse-traces/main 7: #\n => ((6 byte))
mem: ((6 byte)): 1940 <= #\n
run: find-next/split-first/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => n
mem: ((2 character)) =>  
run: find-next/split-first/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1941 <= nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 3
run: find-next/split-first/parse-instruction-trace/parse-traces/main 10: 4 => ((3 integer))
mem: ((3 integer)): 1937 <= 4
run: find-next/split-first/parse-instruction-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/split-first/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 4
mem: ((4 integer)) => 49
run: find-next/split-first/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1939 <= nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split-first/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 4
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1791 byte) (raw)) =>  
run: find-next/split-first/parse-instruction-trace/parse-traces/main 7: #\space => ((6 byte))
mem: ((6 byte)): 1940 <= #\space
run: find-next/split-first/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) =>  
mem: ((2 character)) =>  
run: find-next/split-first/parse-instruction-trace/parse-traces/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1941 <= t
run: find-next/split-first/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split-first/parse-instruction-trace/parse-traces/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 4
run: split-first/parse-instruction-trace/parse-traces/main 9: 4 => ((7 integer))
mem: ((7 integer)): 1910 <= 4
run: split-first/parse-instruction-trace/parse-traces/main 10: (((5 string-address)) <- ((string-copy)) ((1 string-address)) ((0 literal)) ((7 integer)))
mem: ((1 string-address)) => 1786
mem: ((7 integer)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 0: 1964 => ((default-space space-address))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1786 0 4)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 1: 1786 => ((1 string-address))
mem: ((1 string-address)): 1966 <= 1786
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1786 0 4)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 2: 0 => ((2 integer))
mem: ((2 integer)): 1967 <= 0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1786 0 4)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 3: 4 => ((3 integer))
mem: ((3 integer)): 1968 <= 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 4: 49 => ((4 integer))
mem: ((4 integer)): 1969 <= 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 5: (((3 integer)) <- ((min)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 49
mem: ((3 integer)) => 4
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 0: 1995 => ((default-space space-address))
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 1: (((1 integer)) <- ((next-input)))
arg: nil 0 (49 4)
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 1: 49 => ((1 integer))
mem: ((1 integer)): 1997 <= 49
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (49 4)
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 2: 4 => ((2 integer))
mem: ((2 integer)): 1998 <= 4
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 3: (((3 boolean)) <- ((less-than)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 49
mem: ((2 integer)) => 4
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 3: nil => ((3 boolean))
mem: ((3 boolean)): 1999 <= nil
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 4: (((jump-if)) ((3 boolean)) ((1 offset)))
mem: ((3 boolean)) => nil
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 5: (((reply)) ((2 integer)))
mem: ((2 integer)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 5: 4 => ((3 integer))
mem: ((3 integer)): 1968 <= 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 6: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 4
mem: ((2 integer)) => 0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 6: 4 => ((4 integer))
mem: ((4 integer)): 1969 <= 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 7: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 7: 2026 => ((5 string-address))
mem: ((5 string-address)): 1970 <= 2026
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 8: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 8: 0 => ((6 integer))
mem: ((6 integer)): 1971 <= 0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 9: 0 => ((7 integer))
mem: ((7 integer)): 1972 <= 0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 0
mem: ((3 integer)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1973 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 0
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1787 byte) (raw)) => m
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\m => ((9 character))
mem: ((9 character)): 1974 <= #\m
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2027 => ((10 character-address))
mem: ((10 character-address)): 1975 <= 2027
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => m
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\m => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2027 <= #\m
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 1 => ((6 integer))
mem: ((6 integer)): 1971 <= 1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 1 => ((7 integer))
mem: ((7 integer)): 1972 <= 1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 1
mem: ((3 integer)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1973 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 1
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1788 byte) (raw)) => a
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\a => ((9 character))
mem: ((9 character)): 1974 <= #\a
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 1
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2028 => ((10 character-address))
mem: ((10 character-address)): 1975 <= 2028
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => a
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\a => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2028 <= #\a
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 2 => ((6 integer))
mem: ((6 integer)): 1971 <= 2
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 2 => ((7 integer))
mem: ((7 integer)): 1972 <= 2
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 2
mem: ((3 integer)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1973 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 2
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1789 byte) (raw)) => i
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\i => ((9 character))
mem: ((9 character)): 1974 <= #\i
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 2
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2029 => ((10 character-address))
mem: ((10 character-address)): 1975 <= 2029
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => i
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\i => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2029 <= #\i
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 2
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 3 => ((6 integer))
mem: ((6 integer)): 1971 <= 3
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 2
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 3 => ((7 integer))
mem: ((7 integer)): 1972 <= 3
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 3
mem: ((3 integer)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 1973 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 3
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1790 byte) (raw)) => n
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\n => ((9 character))
mem: ((9 character)): 1974 <= #\n
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 3
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2030 => ((10 character-address))
mem: ((10 character-address)): 1975 <= 2030
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => n
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\n => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2030 <= #\n
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 3
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 4 => ((6 integer))
mem: ((6 integer)): 1971 <= 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 3
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 4 => ((7 integer))
mem: ((7 integer)): 1972 <= 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 4
mem: ((3 integer)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: t => ((8 boolean))
mem: ((8 boolean)): 1973 <= t
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 18: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 2026
run: split-first/parse-instruction-trace/parse-traces/main 10: 2026 => ((5 string-address))
mem: ((5 string-address)): 1908 <= 2026
run: split-first/parse-instruction-trace/parse-traces/main 11: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 4
run: split-first/parse-instruction-trace/parse-traces/main 11: 5 => ((7 integer))
mem: ((7 integer)): 1910 <= 5
run: split-first/parse-instruction-trace/parse-traces/main 12: (((6 string-address)) <- ((string-copy)) ((1 string-address)) ((7 integer)) ((3 integer)))
mem: ((1 string-address)) => 1786
mem: ((7 integer)) => 5
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 0: 2031 => ((default-space space-address))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1786 5 49)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 1: 1786 => ((1 string-address))
mem: ((1 string-address)): 2033 <= 1786
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1786 5 49)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 2: 5 => ((2 integer))
mem: ((2 integer)): 2034 <= 5
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1786 5 49)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 3: 49 => ((3 integer))
mem: ((3 integer)): 2035 <= 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1786 integer) (raw)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 4: 49 => ((4 integer))
mem: ((4 integer)): 2036 <= 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 5: (((3 integer)) <- ((min)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 49
mem: ((3 integer)) => 49
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 0: 2062 => ((default-space space-address))
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 1: (((1 integer)) <- ((next-input)))
arg: nil 0 (49 49)
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 1: 49 => ((1 integer))
mem: ((1 integer)): 2064 <= 49
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (49 49)
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 2: 49 => ((2 integer))
mem: ((2 integer)): 2065 <= 49
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 3: (((3 boolean)) <- ((less-than)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 49
mem: ((2 integer)) => 49
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 3: nil => ((3 boolean))
mem: ((3 boolean)): 2066 <= nil
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 4: (((jump-if)) ((3 boolean)) ((1 offset)))
mem: ((3 boolean)) => nil
run: min/string-copy/split-first/parse-instruction-trace/parse-traces/main 5: (((reply)) ((2 integer)))
mem: ((2 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 5: 49 => ((3 integer))
mem: ((3 integer)): 2035 <= 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 6: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 49
mem: ((2 integer)) => 5
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 6: 44 => ((4 integer))
mem: ((4 integer)): 2036 <= 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 7: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 7: 2093 => ((5 string-address))
mem: ((5 string-address)): 2037 <= 2093
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 8: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 5
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 8: 5 => ((6 integer))
mem: ((6 integer)): 2038 <= 5
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 9: 0 => ((7 integer))
mem: ((7 integer)): 2039 <= 0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 5
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 5
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1792 byte) (raw)) => 0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\0 => ((9 character))
mem: ((9 character)): 2041 <= #\0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2094 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2094
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => 0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\0 => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2094 <= #\0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 5
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 6 => ((6 integer))
mem: ((6 integer)): 2038 <= 6
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 1 => ((7 integer))
mem: ((7 integer)): 2039 <= 1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 6
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 6
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1793 byte) (raw)) => :
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\: => ((9 character))
mem: ((9 character)): 2041 <= #\:
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 1
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2095 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2095
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => :
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\: => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2095 <= #\:
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 6
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 7 => ((6 integer))
mem: ((6 integer)): 2038 <= 7
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 2 => ((7 integer))
mem: ((7 integer)): 2039 <= 2
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 7
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 7
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1794 byte) (raw)) =>  
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 2041 <= #\space
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 2
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2096 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2096
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2096 <= #\space
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 7
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 8 => ((6 integer))
mem: ((6 integer)): 2038 <= 8
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 2
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 3 => ((7 integer))
mem: ((7 integer)): 2039 <= 3
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 8
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 8
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1795 byte) (raw)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2041 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 3
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2097 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2097
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2097 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 8
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 9 => ((6 integer))
mem: ((6 integer)): 2038 <= 9
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 3
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 4 => ((7 integer))
mem: ((7 integer)): 2039 <= 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 9
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 9
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1796 byte) (raw)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2041 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 4
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2098 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2098
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2098 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 9
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 10 => ((6 integer))
mem: ((6 integer)): 2038 <= 10
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 4
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 5 => ((7 integer))
mem: ((7 integer)): 2039 <= 5
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 10
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 10
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1797 byte) (raw)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2041 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 5
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2099 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2099
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2099 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 10
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 11 => ((6 integer))
mem: ((6 integer)): 2038 <= 11
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 5
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 6 => ((7 integer))
mem: ((7 integer)): 2039 <= 6
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 11
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 11
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1798 byte) (raw)) => 1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\1 => ((9 character))
mem: ((9 character)): 2041 <= #\1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 6
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2100 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2100
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => 1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\1 => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2100 <= #\1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 11
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 12 => ((6 integer))
mem: ((6 integer)): 2038 <= 12
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 6
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 7 => ((7 integer))
mem: ((7 integer)): 2039 <= 7
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 12
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 12
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1799 byte) (raw)) =>  
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 2041 <= #\space
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 7
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2101 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2101
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2101 <= #\space
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 12
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 13 => ((6 integer))
mem: ((6 integer)): 2038 <= 13
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 7
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 8 => ((7 integer))
mem: ((7 integer)): 2039 <= 8
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 13
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 13
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1800 byte) (raw)) => i
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\i => ((9 character))
mem: ((9 character)): 2041 <= #\i
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 8
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2102 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2102
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => i
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\i => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2102 <= #\i
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 13
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 14 => ((6 integer))
mem: ((6 integer)): 2038 <= 14
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 8
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 9 => ((7 integer))
mem: ((7 integer)): 2039 <= 9
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 14
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 14
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1801 byte) (raw)) => n
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\n => ((9 character))
mem: ((9 character)): 2041 <= #\n
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 9
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2103 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2103
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => n
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\n => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2103 <= #\n
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 14
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 15 => ((6 integer))
mem: ((6 integer)): 2038 <= 15
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 9
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 10 => ((7 integer))
mem: ((7 integer)): 2039 <= 10
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 15
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 15
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1802 byte) (raw)) => t
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\t => ((9 character))
mem: ((9 character)): 2041 <= #\t
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 10
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2104 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2104
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => t
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\t => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2104 <= #\t
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 15
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 16 => ((6 integer))
mem: ((6 integer)): 2038 <= 16
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 10
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 11 => ((7 integer))
mem: ((7 integer)): 2039 <= 11
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 16
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 16
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1803 byte) (raw)) => e
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\e => ((9 character))
mem: ((9 character)): 2041 <= #\e
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 11
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2105 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2105
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => e
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\e => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2105 <= #\e
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 16
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 17 => ((6 integer))
mem: ((6 integer)): 2038 <= 17
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 11
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 12 => ((7 integer))
mem: ((7 integer)): 2039 <= 12
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 17
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 17
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1804 byte) (raw)) => g
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\g => ((9 character))
mem: ((9 character)): 2041 <= #\g
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 12
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2106 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2106
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => g
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\g => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2106 <= #\g
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 17
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 18 => ((6 integer))
mem: ((6 integer)): 2038 <= 18
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 12
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 13 => ((7 integer))
mem: ((7 integer)): 2039 <= 13
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 18
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 18
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1805 byte) (raw)) => e
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\e => ((9 character))
mem: ((9 character)): 2041 <= #\e
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 13
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2107 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2107
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => e
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\e => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2107 <= #\e
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 18
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 19 => ((6 integer))
mem: ((6 integer)): 2038 <= 19
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 13
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 14 => ((7 integer))
mem: ((7 integer)): 2039 <= 14
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 19
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 19
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1806 byte) (raw)) => r
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\r => ((9 character))
mem: ((9 character)): 2041 <= #\r
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 14
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2108 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2108
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => r
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\r => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2108 <= #\r
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 19
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 20 => ((6 integer))
mem: ((6 integer)): 2038 <= 20
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 14
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 15 => ((7 integer))
mem: ((7 integer)): 2039 <= 15
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 20
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 20
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1807 byte) (raw)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2041 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 15
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2109 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2109
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2109 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 20
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 21 => ((6 integer))
mem: ((6 integer)): 2038 <= 21
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 15
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 16 => ((7 integer))
mem: ((7 integer)): 2039 <= 16
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 21
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 21
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1808 byte) (raw)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2041 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 16
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2110 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2110
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2110 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 21
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 22 => ((6 integer))
mem: ((6 integer)): 2038 <= 22
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 16
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 17 => ((7 integer))
mem: ((7 integer)): 2039 <= 17
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 22
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 22
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1809 byte) (raw)) =>  
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 2041 <= #\space
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 17
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2111 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2111
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2111 <= #\space
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 22
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 23 => ((6 integer))
mem: ((6 integer)): 2038 <= 23
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 17
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 18 => ((7 integer))
mem: ((7 integer)): 2039 <= 18
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 23
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 23
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1810 byte) (raw)) => <
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\< => ((9 character))
mem: ((9 character)): 2041 <= #\<
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 18
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2112 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2112
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => <
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\< => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2112 <= #\<
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 23
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 24 => ((6 integer))
mem: ((6 integer)): 2038 <= 24
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 18
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 19 => ((7 integer))
mem: ((7 integer)): 2039 <= 19
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 24
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 24
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1811 byte) (raw)) => -
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\- => ((9 character))
mem: ((9 character)): 2041 <= #\-
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 19
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2113 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2113
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => -
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\- => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2113 <= #\-
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 24
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 25 => ((6 integer))
mem: ((6 integer)): 2038 <= 25
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 19
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 20 => ((7 integer))
mem: ((7 integer)): 2039 <= 20
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 25
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 25
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1812 byte) (raw)) =>  
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 2041 <= #\space
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 20
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2114 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2114
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2114 <= #\space
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 25
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 26 => ((6 integer))
mem: ((6 integer)): 2038 <= 26
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 20
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 21 => ((7 integer))
mem: ((7 integer)): 2039 <= 21
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 26
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 26
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1813 byte) (raw)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2041 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 21
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2115 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2115
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2115 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 26
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 27 => ((6 integer))
mem: ((6 integer)): 2038 <= 27
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 21
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 22 => ((7 integer))
mem: ((7 integer)): 2039 <= 22
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 27
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 27
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1814 byte) (raw)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2041 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 22
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2116 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2116
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2116 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 27
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 28 => ((6 integer))
mem: ((6 integer)): 2038 <= 28
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 22
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 23 => ((7 integer))
mem: ((7 integer)): 2039 <= 23
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 28
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 28
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1815 byte) (raw)) => c
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\c => ((9 character))
mem: ((9 character)): 2041 <= #\c
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 23
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2117 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2117
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => c
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\c => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2117 <= #\c
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 28
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 29 => ((6 integer))
mem: ((6 integer)): 2038 <= 29
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 23
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 24 => ((7 integer))
mem: ((7 integer)): 2039 <= 24
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 29
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 29
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1816 byte) (raw)) => o
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\o => ((9 character))
mem: ((9 character)): 2041 <= #\o
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 24
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2118 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2118
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => o
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\o => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2118 <= #\o
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 29
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 30 => ((6 integer))
mem: ((6 integer)): 2038 <= 30
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 24
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 25 => ((7 integer))
mem: ((7 integer)): 2039 <= 25
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 30
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 30
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1817 byte) (raw)) => p
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\p => ((9 character))
mem: ((9 character)): 2041 <= #\p
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 25
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2119 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2119
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => p
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\p => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2119 <= #\p
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 30
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 31 => ((6 integer))
mem: ((6 integer)): 2038 <= 31
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 25
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 26 => ((7 integer))
mem: ((7 integer)): 2039 <= 26
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 31
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 31
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1818 byte) (raw)) => y
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\y => ((9 character))
mem: ((9 character)): 2041 <= #\y
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 26
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2120 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2120
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => y
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\y => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2120 <= #\y
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 31
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 32 => ((6 integer))
mem: ((6 integer)): 2038 <= 32
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 26
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 27 => ((7 integer))
mem: ((7 integer)): 2039 <= 27
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 32
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 32
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1819 byte) (raw)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2041 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 27
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2121 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2121
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2121 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 32
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 33 => ((6 integer))
mem: ((6 integer)): 2038 <= 33
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 27
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 28 => ((7 integer))
mem: ((7 integer)): 2039 <= 28
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 33
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 33
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1820 byte) (raw)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2041 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 28
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2122 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2122
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2122 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 33
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 34 => ((6 integer))
mem: ((6 integer)): 2038 <= 34
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 28
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 29 => ((7 integer))
mem: ((7 integer)): 2039 <= 29
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 34
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 34
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1821 byte) (raw)) =>  
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 2041 <= #\space
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 29
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2123 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2123
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2123 <= #\space
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 34
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 35 => ((6 integer))
mem: ((6 integer)): 2038 <= 35
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 29
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 30 => ((7 integer))
mem: ((7 integer)): 2039 <= 30
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 35
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 35
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1822 byte) (raw)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2041 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 30
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2124 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2124
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2124 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 35
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 36 => ((6 integer))
mem: ((6 integer)): 2038 <= 36
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 30
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 31 => ((7 integer))
mem: ((7 integer)): 2039 <= 31
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 36
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 36
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1823 byte) (raw)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2041 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 31
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2125 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2125
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2125 <= #\(
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 36
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 37 => ((6 integer))
mem: ((6 integer)): 2038 <= 37
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 31
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 32 => ((7 integer))
mem: ((7 integer)): 2039 <= 32
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 37
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 37
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1824 byte) (raw)) => 1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\1 => ((9 character))
mem: ((9 character)): 2041 <= #\1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 32
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2126 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2126
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => 1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\1 => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2126 <= #\1
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 37
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 38 => ((6 integer))
mem: ((6 integer)): 2038 <= 38
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 32
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 33 => ((7 integer))
mem: ((7 integer)): 2039 <= 33
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 38
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 38
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1825 byte) (raw)) =>  
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 2041 <= #\space
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 33
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2127 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2127
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2127 <= #\space
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 38
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 39 => ((6 integer))
mem: ((6 integer)): 2038 <= 39
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 33
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 34 => ((7 integer))
mem: ((7 integer)): 2039 <= 34
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 39
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 39
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1826 byte) (raw)) => l
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\l => ((9 character))
mem: ((9 character)): 2041 <= #\l
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 34
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2128 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2128
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => l
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\l => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2128 <= #\l
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 39
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 40 => ((6 integer))
mem: ((6 integer)): 2038 <= 40
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 34
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 35 => ((7 integer))
mem: ((7 integer)): 2039 <= 35
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 40
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 40
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1827 byte) (raw)) => i
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\i => ((9 character))
mem: ((9 character)): 2041 <= #\i
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 35
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2129 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2129
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => i
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\i => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2129 <= #\i
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 40
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 41 => ((6 integer))
mem: ((6 integer)): 2038 <= 41
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 35
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 36 => ((7 integer))
mem: ((7 integer)): 2039 <= 36
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 41
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 41
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1828 byte) (raw)) => t
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\t => ((9 character))
mem: ((9 character)): 2041 <= #\t
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 36
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2130 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2130
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => t
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\t => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2130 <= #\t
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 41
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 42 => ((6 integer))
mem: ((6 integer)): 2038 <= 42
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 36
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 37 => ((7 integer))
mem: ((7 integer)): 2039 <= 37
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 42
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 42
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1829 byte) (raw)) => e
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\e => ((9 character))
mem: ((9 character)): 2041 <= #\e
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 37
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2131 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2131
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => e
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\e => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2131 <= #\e
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 42
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 43 => ((6 integer))
mem: ((6 integer)): 2038 <= 43
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 37
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 38 => ((7 integer))
mem: ((7 integer)): 2039 <= 38
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 43
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 43
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1830 byte) (raw)) => r
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\r => ((9 character))
mem: ((9 character)): 2041 <= #\r
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 38
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2132 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2132
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => r
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\r => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2132 <= #\r
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 43
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 44 => ((6 integer))
mem: ((6 integer)): 2038 <= 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 38
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 39 => ((7 integer))
mem: ((7 integer)): 2039 <= 39
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 44
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 44
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1831 byte) (raw)) => a
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\a => ((9 character))
mem: ((9 character)): 2041 <= #\a
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 39
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2133 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2133
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => a
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\a => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2133 <= #\a
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 45 => ((6 integer))
mem: ((6 integer)): 2038 <= 45
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 39
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 40 => ((7 integer))
mem: ((7 integer)): 2039 <= 40
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 45
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 45
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1832 byte) (raw)) => l
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\l => ((9 character))
mem: ((9 character)): 2041 <= #\l
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 40
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2134 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2134
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => l
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\l => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2134 <= #\l
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 45
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 46 => ((6 integer))
mem: ((6 integer)): 2038 <= 46
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 40
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 41 => ((7 integer))
mem: ((7 integer)): 2039 <= 41
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 46
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 46
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1833 byte) (raw)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2041 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 41
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2135 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2135
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2135 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 46
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 47 => ((6 integer))
mem: ((6 integer)): 2038 <= 47
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 41
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 42 => ((7 integer))
mem: ((7 integer)): 2039 <= 42
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 47
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 47
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1834 byte) (raw)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2041 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 42
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2136 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2136
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2136 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 47
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 48 => ((6 integer))
mem: ((6 integer)): 2038 <= 48
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 42
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 43 => ((7 integer))
mem: ((7 integer)): 2039 <= 43
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 48
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2040 <= nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 48
array-len: ((1786 string) (raw))
mem: ((1786 integer) (raw)) => 49
mem: ((1835 byte) (raw)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2041 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 43
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 13: 2137 => ((10 character-address))
mem: ((10 character-address)): 2042 <= 2137
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2137 <= #\)
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 48
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 15: 49 => ((6 integer))
mem: ((6 integer)): 2038 <= 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 43
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 16: 44 => ((7 integer))
mem: ((7 integer)): 2039 <= 44
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 49
mem: ((3 integer)) => 49
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 10: t => ((8 boolean))
mem: ((8 boolean)): 2040 <= t
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split-first/parse-instruction-trace/parse-traces/main 18: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 2093
run: split-first/parse-instruction-trace/parse-traces/main 12: 2093 => ((6 string-address))
mem: ((6 string-address)): 1909 <= 2093
run: split-first/parse-instruction-trace/parse-traces/main 13: (((reply)) ((5 string-address)) ((6 string-address)))
mem: ((5 string-address)) => 2026
mem: ((6 string-address)) => 2093
run: parse-instruction-trace/parse-traces/main 4: 2026 => ((4 string-address))
mem: ((4 string-address)): 1872 <= 2026
run: parse-instruction-trace/parse-traces/main 4: 2093 => ((5 string-address))
mem: ((5 string-address)): 1873 <= 2093
run: parse-instruction-trace/parse-traces/main 5: (((6 string-address-array-address-address)) <- ((get-address)) ((3 instruction-trace-address) (deref)) ((0 offset)))
run: parse-instruction-trace/parse-traces/main 5: 1898 => ((6 string-address-array-address-address))
mem: ((6 string-address-array-address-address)): 1874 <= 1898
run: parse-instruction-trace/parse-traces/main 6: (((6 string-address-array-address-address) (deref)) <- ((split)) ((4 string-address)) ((/ literal)))
mem: ((4 string-address)) => 2026
run: split/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: split/parse-instruction-trace/parse-traces/main 0: 2138 => ((default-space space-address))
run: split/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (2026 #\/)
run: split/parse-instruction-trace/parse-traces/main 1: 2026 => ((1 string-address))
mem: ((1 string-address)): 2140 <= 2026
run: split/parse-instruction-trace/parse-traces/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (2026 #\/)
run: split/parse-instruction-trace/parse-traces/main 2: #\/ => ((2 character))
mem: ((2 character)): 2141 <= #\/
run: split/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((2026 integer) (raw)) => 4
run: split/parse-instruction-trace/parse-traces/main 3: 4 => ((3 integer))
mem: ((3 integer)): 2142 <= 4
run: split/parse-instruction-trace/parse-traces/main 4: (((4 boolean)) <- ((equal)) ((3 integer)) ((0 literal)))
mem: ((3 integer)) => 4
run: split/parse-instruction-trace/parse-traces/main 4: nil => ((4 boolean))
mem: ((4 boolean)): 2143 <= nil
run: split/parse-instruction-trace/parse-traces/main 5: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => nil
run: split/parse-instruction-trace/parse-traces/main 8: (((6 integer)) <- ((copy)) ((1 literal)))
run: split/parse-instruction-trace/parse-traces/main 8: 1 => ((6 integer))
mem: ((6 integer)): 2145 <= 1
run: split/parse-instruction-trace/parse-traces/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: split/parse-instruction-trace/parse-traces/main 9: 0 => ((7 integer))
mem: ((7 integer)): 2146 <= 0
run: split/parse-instruction-trace/parse-traces/main 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
mem: ((1 string-address)) => 2026
mem: ((2 character)) => /
mem: ((7 integer)) => 0
run: find-next/split/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/split/parse-instruction-trace/parse-traces/main 0: 2169 => ((default-space space-address))
run: find-next/split/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (2026 #\/ 0)
run: find-next/split/parse-instruction-trace/parse-traces/main 1: 2026 => ((1 string-address))
mem: ((1 string-address)): 2171 <= 2026
run: find-next/split/parse-instruction-trace/parse-traces/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (2026 #\/ 0)
run: find-next/split/parse-instruction-trace/parse-traces/main 2: #\/ => ((2 character))
mem: ((2 character)): 2172 <= #\/
run: find-next/split/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (2026 #\/ 0)
run: find-next/split/parse-instruction-trace/parse-traces/main 3: 0 => ((3 integer))
mem: ((3 integer)): 2173 <= 0
run: find-next/split/parse-instruction-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((2026 integer) (raw)) => 4
run: find-next/split/parse-instruction-trace/parse-traces/main 4: 4 => ((4 integer))
mem: ((4 integer)): 2174 <= 4
run: find-next/split/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 0
mem: ((4 integer)) => 4
run: find-next/split/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 2175 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
mem: ((2027 byte) (raw)) => m
run: find-next/split/parse-instruction-trace/parse-traces/main 7: #\m => ((6 byte))
mem: ((6 byte)): 2176 <= #\m
run: find-next/split/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => m
mem: ((2 character)) => /
run: find-next/split/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 2177 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
schedule: scheduling find-next/split/parse-instruction-trace/parse-traces/main for further processing
schedule: find-next/split/parse-instruction-trace/parse-traces/main
run: find-next/split/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-next/split/parse-instruction-trace/parse-traces/main 10: 1 => ((3 integer))
mem: ((3 integer)): 2173 <= 1
run: find-next/split/parse-instruction-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/split/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 4
run: find-next/split/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 2175 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
mem: ((2028 byte) (raw)) => a
run: find-next/split/parse-instruction-trace/parse-traces/main 7: #\a => ((6 byte))
mem: ((6 byte)): 2176 <= #\a
run: find-next/split/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => a
mem: ((2 character)) => /
run: find-next/split/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 2177 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 1
run: find-next/split/parse-instruction-trace/parse-traces/main 10: 2 => ((3 integer))
mem: ((3 integer)): 2173 <= 2
run: find-next/split/parse-instruction-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/split/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 4
run: find-next/split/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 2175 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
mem: ((2029 byte) (raw)) => i
run: find-next/split/parse-instruction-trace/parse-traces/main 7: #\i => ((6 byte))
mem: ((6 byte)): 2176 <= #\i
run: find-next/split/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => i
mem: ((2 character)) => /
run: find-next/split/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 2177 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-next/split/parse-instruction-trace/parse-traces/main 10: 3 => ((3 integer))
mem: ((3 integer)): 2173 <= 3
run: find-next/split/parse-instruction-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/split/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 4
run: find-next/split/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 2175 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
mem: ((2030 byte) (raw)) => n
run: find-next/split/parse-instruction-trace/parse-traces/main 7: #\n => ((6 byte))
mem: ((6 byte)): 2176 <= #\n
run: find-next/split/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => n
mem: ((2 character)) => /
run: find-next/split/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 2177 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 3
run: find-next/split/parse-instruction-trace/parse-traces/main 10: 4 => ((3 integer))
mem: ((3 integer)): 2173 <= 4
run: find-next/split/parse-instruction-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/split/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 4
mem: ((4 integer)) => 4
run: find-next/split/parse-instruction-trace/parse-traces/main 5: t => ((5 boolean))
mem: ((5 boolean)): 2175 <= t
run: find-next/split/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => t
run: find-next/split/parse-instruction-trace/parse-traces/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 4
run: split/parse-instruction-trace/parse-traces/main 10: 4 => ((7 integer))
mem: ((7 integer)): 2146 <= 4
run: split/parse-instruction-trace/parse-traces/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
mem: ((7 integer)) => 4
mem: ((3 integer)) => 4
run: split/parse-instruction-trace/parse-traces/main 11: t => ((8 boolean))
mem: ((8 boolean)): 2147 <= t
run: split/parse-instruction-trace/parse-traces/main 12: (((jump-if)) ((8 boolean)) ((3 offset)))
mem: ((8 boolean)) => t
run: split/parse-instruction-trace/parse-traces/main 16: (((5 string-address-array-address)) <- ((new)) ((string-address-array literal)) ((6 integer)))
mem: ((6 integer)) => 1
run: split/parse-instruction-trace/parse-traces/main 16: 2200 => ((5 string-address-array-address))
mem: ((5 string-address-array-address)): 2144 <= 2200
run: split/parse-instruction-trace/parse-traces/main 17: (((9 integer)) <- ((copy)) ((0 literal)))
run: split/parse-instruction-trace/parse-traces/main 17: 0 => ((9 integer))
mem: ((9 integer)): 2148 <= 0
run: split/parse-instruction-trace/parse-traces/main 18: (((10 integer)) <- ((copy)) ((0 literal)))
run: split/parse-instruction-trace/parse-traces/main 18: 0 => ((10 integer))
mem: ((10 integer)): 2149 <= 0
run: split/parse-instruction-trace/parse-traces/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 0
mem: ((3 integer)) => 4
run: split/parse-instruction-trace/parse-traces/main 19: nil => ((8 boolean))
mem: ((8 boolean)): 2147 <= nil
run: split/parse-instruction-trace/parse-traces/main 20: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: split/parse-instruction-trace/parse-traces/main 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
mem: ((1 string-address)) => 2026
mem: ((2 character)) => /
mem: ((10 integer)) => 0
run: find-next/split/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/split/parse-instruction-trace/parse-traces/main 0: 2202 => ((default-space space-address))
run: find-next/split/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (2026 #\/ 0)
run: find-next/split/parse-instruction-trace/parse-traces/main 1: 2026 => ((1 string-address))
mem: ((1 string-address)): 2204 <= 2026
run: find-next/split/parse-instruction-trace/parse-traces/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (2026 #\/ 0)
run: find-next/split/parse-instruction-trace/parse-traces/main 2: #\/ => ((2 character))
mem: ((2 character)): 2205 <= #\/
run: find-next/split/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (2026 #\/ 0)
run: find-next/split/parse-instruction-trace/parse-traces/main 3: 0 => ((3 integer))
mem: ((3 integer)): 2206 <= 0
run: find-next/split/parse-instruction-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((2026 integer) (raw)) => 4
run: find-next/split/parse-instruction-trace/parse-traces/main 4: 4 => ((4 integer))
mem: ((4 integer)): 2207 <= 4
run: find-next/split/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 0
mem: ((4 integer)) => 4
run: find-next/split/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 2208 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
mem: ((2027 byte) (raw)) => m
run: find-next/split/parse-instruction-trace/parse-traces/main 7: #\m => ((6 byte))
mem: ((6 byte)): 2209 <= #\m
run: find-next/split/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => m
mem: ((2 character)) => /
run: find-next/split/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 2210 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-next/split/parse-instruction-trace/parse-traces/main 10: 1 => ((3 integer))
mem: ((3 integer)): 2206 <= 1
run: find-next/split/parse-instruction-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/split/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 4
run: find-next/split/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 2208 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
mem: ((2028 byte) (raw)) => a
run: find-next/split/parse-instruction-trace/parse-traces/main 7: #\a => ((6 byte))
mem: ((6 byte)): 2209 <= #\a
run: find-next/split/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => a
mem: ((2 character)) => /
run: find-next/split/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 2210 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 1
run: find-next/split/parse-instruction-trace/parse-traces/main 10: 2 => ((3 integer))
mem: ((3 integer)): 2206 <= 2
run: find-next/split/parse-instruction-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/split/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 4
run: find-next/split/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 2208 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
mem: ((2029 byte) (raw)) => i
run: find-next/split/parse-instruction-trace/parse-traces/main 7: #\i => ((6 byte))
mem: ((6 byte)): 2209 <= #\i
run: find-next/split/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => i
mem: ((2 character)) => /
run: find-next/split/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 2210 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-next/split/parse-instruction-trace/parse-traces/main 10: 3 => ((3 integer))
mem: ((3 integer)): 2206 <= 3
run: find-next/split/parse-instruction-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/split/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 4
run: find-next/split/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 2208 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
mem: ((2030 byte) (raw)) => n
run: find-next/split/parse-instruction-trace/parse-traces/main 7: #\n => ((6 byte))
mem: ((6 byte)): 2209 <= #\n
run: find-next/split/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => n
mem: ((2 character)) => /
run: find-next/split/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 2210 <= nil
run: find-next/split/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 3
run: find-next/split/parse-instruction-trace/parse-traces/main 10: 4 => ((3 integer))
mem: ((3 integer)): 2206 <= 4
run: find-next/split/parse-instruction-trace/parse-traces/main 11: (((jump)) ((-7 offset)))
run: find-next/split/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 4
mem: ((4 integer)) => 4
run: find-next/split/parse-instruction-trace/parse-traces/main 5: t => ((5 boolean))
mem: ((5 boolean)): 2208 <= t
run: find-next/split/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => t
run: find-next/split/parse-instruction-trace/parse-traces/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 4
run: split/parse-instruction-trace/parse-traces/main 21: 4 => ((11 integer))
mem: ((11 integer)): 2150 <= 4
run: split/parse-instruction-trace/parse-traces/main 22: (((12 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 0
array-len: ((2200 string-address-array) (raw))
mem: ((2200 integer) (raw)) => 1
run: split/parse-instruction-trace/parse-traces/main 22: 2201 => ((12 string-address-address))
mem: ((12 string-address-address)): 2151 <= 2201
run: split/parse-instruction-trace/parse-traces/main 23: (((12 string-address-address) (deref)) <- ((string-copy)) ((1 string-address)) ((10 integer)) ((11 integer)))
mem: ((1 string-address)) => 2026
mem: ((10 integer)) => 0
mem: ((11 integer)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split/parse-instruction-trace/parse-traces/main 0: 2233 => ((default-space space-address))
run: string-copy/split/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (2026 0 4)
run: string-copy/split/parse-instruction-trace/parse-traces/main 1: 2026 => ((1 string-address))
mem: ((1 string-address)): 2235 <= 2026
run: string-copy/split/parse-instruction-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (2026 0 4)
run: string-copy/split/parse-instruction-trace/parse-traces/main 2: 0 => ((2 integer))
mem: ((2 integer)): 2236 <= 0
run: string-copy/split/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (2026 0 4)
run: string-copy/split/parse-instruction-trace/parse-traces/main 3: 4 => ((3 integer))
mem: ((3 integer)): 2237 <= 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((2026 integer) (raw)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 4: 4 => ((4 integer))
mem: ((4 integer)): 2238 <= 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 5: (((3 integer)) <- ((min)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 4
mem: ((3 integer)) => 4
run: min/string-copy/split/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: min/string-copy/split/parse-instruction-trace/parse-traces/main 0: 2264 => ((default-space space-address))
run: min/string-copy/split/parse-instruction-trace/parse-traces/main 1: (((1 integer)) <- ((next-input)))
arg: nil 0 (4 4)
run: min/string-copy/split/parse-instruction-trace/parse-traces/main 1: 4 => ((1 integer))
mem: ((1 integer)): 2266 <= 4
run: min/string-copy/split/parse-instruction-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (4 4)
run: min/string-copy/split/parse-instruction-trace/parse-traces/main 2: 4 => ((2 integer))
mem: ((2 integer)): 2267 <= 4
run: min/string-copy/split/parse-instruction-trace/parse-traces/main 3: (((3 boolean)) <- ((less-than)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 4
mem: ((2 integer)) => 4
run: min/string-copy/split/parse-instruction-trace/parse-traces/main 3: nil => ((3 boolean))
mem: ((3 boolean)): 2268 <= nil
run: min/string-copy/split/parse-instruction-trace/parse-traces/main 4: (((jump-if)) ((3 boolean)) ((1 offset)))
mem: ((3 boolean)) => nil
run: min/string-copy/split/parse-instruction-trace/parse-traces/main 5: (((reply)) ((2 integer)))
mem: ((2 integer)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 5: 4 => ((3 integer))
mem: ((3 integer)): 2237 <= 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 6: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 4
mem: ((2 integer)) => 0
run: string-copy/split/parse-instruction-trace/parse-traces/main 6: 4 => ((4 integer))
mem: ((4 integer)): 2238 <= 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 7: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 7: 2295 => ((5 string-address))
mem: ((5 string-address)): 2239 <= 2295
run: string-copy/split/parse-instruction-trace/parse-traces/main 8: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 0
run: string-copy/split/parse-instruction-trace/parse-traces/main 8: 0 => ((6 integer))
mem: ((6 integer)): 2240 <= 0
run: string-copy/split/parse-instruction-trace/parse-traces/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split/parse-instruction-trace/parse-traces/main 9: 0 => ((7 integer))
mem: ((7 integer)): 2241 <= 0
run: string-copy/split/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 0
mem: ((3 integer)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2242 <= nil
run: string-copy/split/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 0
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
mem: ((2027 byte) (raw)) => m
run: string-copy/split/parse-instruction-trace/parse-traces/main 12: #\m => ((9 character))
mem: ((9 character)): 2243 <= #\m
run: string-copy/split/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((2295 string) (raw))
mem: ((2295 integer) (raw)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 13: 2296 => ((10 character-address))
mem: ((10 character-address)): 2244 <= 2296
run: string-copy/split/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => m
run: string-copy/split/parse-instruction-trace/parse-traces/main 14: #\m => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2296 <= #\m
run: string-copy/split/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 0
run: string-copy/split/parse-instruction-trace/parse-traces/main 15: 1 => ((6 integer))
mem: ((6 integer)): 2240 <= 1
run: string-copy/split/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split/parse-instruction-trace/parse-traces/main 16: 1 => ((7 integer))
mem: ((7 integer)): 2241 <= 1
run: string-copy/split/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 1
mem: ((3 integer)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2242 <= nil
run: string-copy/split/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 1
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
mem: ((2028 byte) (raw)) => a
run: string-copy/split/parse-instruction-trace/parse-traces/main 12: #\a => ((9 character))
mem: ((9 character)): 2243 <= #\a
run: string-copy/split/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 1
array-len: ((2295 string) (raw))
mem: ((2295 integer) (raw)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 13: 2297 => ((10 character-address))
mem: ((10 character-address)): 2244 <= 2297
run: string-copy/split/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => a
run: string-copy/split/parse-instruction-trace/parse-traces/main 14: #\a => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2297 <= #\a
run: string-copy/split/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 1
run: string-copy/split/parse-instruction-trace/parse-traces/main 15: 2 => ((6 integer))
mem: ((6 integer)): 2240 <= 2
run: string-copy/split/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: string-copy/split/parse-instruction-trace/parse-traces/main 16: 2 => ((7 integer))
mem: ((7 integer)): 2241 <= 2
run: string-copy/split/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 2
mem: ((3 integer)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2242 <= nil
run: string-copy/split/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 2
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
mem: ((2029 byte) (raw)) => i
run: string-copy/split/parse-instruction-trace/parse-traces/main 12: #\i => ((9 character))
mem: ((9 character)): 2243 <= #\i
run: string-copy/split/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 2
array-len: ((2295 string) (raw))
mem: ((2295 integer) (raw)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 13: 2298 => ((10 character-address))
mem: ((10 character-address)): 2244 <= 2298
run: string-copy/split/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => i
run: string-copy/split/parse-instruction-trace/parse-traces/main 14: #\i => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2298 <= #\i
run: string-copy/split/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 2
run: string-copy/split/parse-instruction-trace/parse-traces/main 15: 3 => ((6 integer))
mem: ((6 integer)): 2240 <= 3
run: string-copy/split/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 2
run: string-copy/split/parse-instruction-trace/parse-traces/main 16: 3 => ((7 integer))
mem: ((7 integer)): 2241 <= 3
run: string-copy/split/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 3
mem: ((3 integer)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2242 <= nil
run: string-copy/split/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 3
array-len: ((2026 string) (raw))
mem: ((2026 integer) (raw)) => 4
mem: ((2030 byte) (raw)) => n
run: string-copy/split/parse-instruction-trace/parse-traces/main 12: #\n => ((9 character))
mem: ((9 character)): 2243 <= #\n
run: string-copy/split/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 3
array-len: ((2295 string) (raw))
mem: ((2295 integer) (raw)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 13: 2299 => ((10 character-address))
mem: ((10 character-address)): 2244 <= 2299
run: string-copy/split/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => n
run: string-copy/split/parse-instruction-trace/parse-traces/main 14: #\n => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2299 <= #\n
run: string-copy/split/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 3
run: string-copy/split/parse-instruction-trace/parse-traces/main 15: 4 => ((6 integer))
mem: ((6 integer)): 2240 <= 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 3
run: string-copy/split/parse-instruction-trace/parse-traces/main 16: 4 => ((7 integer))
mem: ((7 integer)): 2241 <= 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 4
mem: ((3 integer)) => 4
run: string-copy/split/parse-instruction-trace/parse-traces/main 10: t => ((8 boolean))
mem: ((8 boolean)): 2242 <= t
run: string-copy/split/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split/parse-instruction-trace/parse-traces/main 18: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 2295
run: split/parse-instruction-trace/parse-traces/main 23: 2295 => ((12 string-address-address) (deref))
mem: ((12 string-address-address) (deref)): 2201 <= 2295
run: split/parse-instruction-trace/parse-traces/main 24: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
mem: ((11 integer)) => 4
run: split/parse-instruction-trace/parse-traces/main 24: 5 => ((10 integer))
mem: ((10 integer)): 2149 <= 5
run: split/parse-instruction-trace/parse-traces/main 25: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 0
run: split/parse-instruction-trace/parse-traces/main 25: 1 => ((9 integer))
mem: ((9 integer)): 2148 <= 1
run: split/parse-instruction-trace/parse-traces/main 26: (((jump)) ((-8 offset)))
run: split/parse-instruction-trace/parse-traces/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 5
mem: ((3 integer)) => 4
run: split/parse-instruction-trace/parse-traces/main 19: t => ((8 boolean))
mem: ((8 boolean)): 2147 <= t
run: split/parse-instruction-trace/parse-traces/main 20: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: split/parse-instruction-trace/parse-traces/main 27: (((reply)) ((5 string-address-array-address)))
mem: ((5 string-address-array-address)) => 2200
run: parse-instruction-trace/parse-traces/main 6: 2200 => ((6 string-address-array-address-address) (deref))
mem: ((6 string-address-array-address-address) (deref)): 1898 <= 2200
run: parse-instruction-trace/parse-traces/main 7: (((7 string-address-address)) <- ((get-address)) ((3 instruction-trace-address) (deref)) ((1 offset)))
run: parse-instruction-trace/parse-traces/main 7: 1899 => ((7 string-address-address))
mem: ((7 string-address-address)): 1875 <= 1899
run: parse-instruction-trace/parse-traces/main 8: (((8 string-address)) <- ((new)) : )
run: parse-instruction-trace/parse-traces/main 8: 2300 => ((8 string-address))
mem: ((8 string-address)): 1876 <= 2300
run: parse-instruction-trace/parse-traces/main 9: (((7 string-address-address) (deref)) ((5 string-address)) <- ((split-first-at-substring)) ((5 string-address)) ((8 string-address)))
mem: ((5 string-address)) => 2093
mem: ((8 string-address)) => 2300
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 0: 2303 => ((default-space space-address))
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (2093 2300)
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 1: 2093 => ((1 string-address))
mem: ((1 string-address)): 2305 <= 2093
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (2093 2300)
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 2: 2300 => ((2 string-address))
mem: ((2 string-address)): 2306 <= 2300
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((2093 integer) (raw)) => 44
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 3: 44 => ((3 integer))
mem: ((3 integer)): 2307 <= 44
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 4: (((4 boolean)) <- ((equal)) ((3 integer)) ((0 literal)))
mem: ((3 integer)) => 44
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 4: nil => ((4 boolean))
mem: ((4 boolean)): 2308 <= nil
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 5: (((jump-unless)) ((4 boolean)) ((3 offset)))
mem: ((4 boolean)) => nil
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 9: (((7 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal)))
mem: ((1 string-address)) => 2093
mem: ((2 string-address)) => 2300
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: 2334 => ((default-space space-address))
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (2093 2300 0)
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: 2093 => ((1 string-address))
mem: ((1 string-address)): 2336 <= 2093
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (2093 2300 0)
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: 2300 => ((2 string-address))
mem: ((2 string-address)): 2337 <= 2300
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (2093 2300 0)
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: 0 => ((3 integer))
mem: ((3 integer)): 2338 <= 0
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: (((4 character)) <- ((index)) ((2 string-address) (deref)) ((0 literal)))
array-len: ((2300 string) (raw))
mem: ((2300 integer) (raw)) => 2
mem: ((2301 byte) (raw)) => :
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: #\: => ((4 character))
mem: ((4 character)): 2339 <= #\:
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((2093 integer) (raw)) => 44
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: 44 => ((5 integer))
mem: ((5 integer)): 2340 <= 44
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: (((6 boolean)) <- ((greater-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 0
mem: ((5 integer)) => 44
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: nil => ((6 boolean))
mem: ((6 boolean)): 2341 <= nil
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 7: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => nil
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((match-at)) ((1 string-address)) ((2 string-address)) ((3 integer)))
mem: ((1 string-address)) => 2093
mem: ((2 string-address)) => 2300
mem: ((3 integer)) => 0
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: 2365 => ((default-space space-address))
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (2093 2300 0)
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: 2093 => ((1 string-address))
mem: ((1 string-address)): 2367 <= 2093
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (2093 2300 0)
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: 2300 => ((2 string-address))
mem: ((2 string-address)): 2368 <= 2300
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (2093 2300 0)
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: 0 => ((3 integer))
mem: ((3 integer)): 2369 <= 0
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((2300 integer) (raw)) => 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: 2 => ((4 integer))
mem: ((4 integer)): 2370 <= 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((2093 integer) (raw)) => 44
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: 44 => ((5 integer))
mem: ((5 integer)): 2371 <= 44
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: (((5 integer)) <- ((subtract)) ((5 integer)) ((4 integer)))
mem: ((5 integer)) => 44
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: 42 => ((5 integer))
mem: ((5 integer)): 2371 <= 42
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 7: (((6 boolean)) <- ((lesser-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 0
mem: ((5 integer)) => 42
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 7: t => ((6 boolean))
mem: ((6 boolean)): 2372 <= t
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 8: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((7 integer)) <- ((copy)) ((0 literal)))
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: 0 => ((7 integer))
mem: ((7 integer)): 2373 <= 0
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 2374 <= nil
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2094 byte) (raw)) => 0
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: #\0 => ((9 character))
mem: ((9 character)): 2375 <= #\0
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((2300 string) (raw))
mem: ((2300 integer) (raw)) => 2
mem: ((2301 byte) (raw)) => :
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\: => ((10 character))
mem: ((10 character)): 2376 <= #\:
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) => 0
mem: ((10 character)) => :
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: nil => ((11 boolean))
mem: ((11 boolean)): 2377 <= nil
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => nil
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((reply)) ((nil literal)))
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 2342 <= nil
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((3 offset)))
mem: ((7 boolean)) => nil
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: 1 => ((3 integer))
mem: ((3 integer)): 2338 <= 1
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((3 integer)) <- ((find-next)) ((1 string-address)) ((4 character)) ((3 integer)))
mem: ((1 string-address)) => 2093
mem: ((4 character)) => :
mem: ((3 integer)) => 1
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: 2396 => ((default-space space-address))
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (2093 #\: 1)
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: 2093 => ((1 string-address))
mem: ((1 string-address)): 2398 <= 2093
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (2093 #\: 1)
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: #\: => ((2 character))
mem: ((2 character)): 2399 <= #\:
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (2093 #\: 1)
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: 1 => ((3 integer))
mem: ((3 integer)): 2400 <= 1
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((2093 integer) (raw)) => 44
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: 44 => ((4 integer))
mem: ((4 integer)): 2401 <= 44
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 44
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 2402 <= nil
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2095 byte) (raw)) => :
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 7: #\: => ((6 byte))
mem: ((6 byte)): 2403 <= #\:
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => :
mem: ((2 character)) => :
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 8: t => ((7 boolean))
mem: ((7 boolean)): 2404 <= t
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 1
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: 1 => ((3 integer))
mem: ((3 integer)): 2338 <= 1
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((jump)) ((-7 offset)))
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: (((6 boolean)) <- ((greater-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 1
mem: ((5 integer)) => 44
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: nil => ((6 boolean))
mem: ((6 boolean)): 2341 <= nil
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 7: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => nil
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 8: (((7 boolean)) <- ((match-at)) ((1 string-address)) ((2 string-address)) ((3 integer)))
mem: ((1 string-address)) => 2093
mem: ((2 string-address)) => 2300
mem: ((3 integer)) => 1
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: 2427 => ((default-space space-address))
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (2093 2300 1)
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: 2093 => ((1 string-address))
mem: ((1 string-address)): 2429 <= 2093
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (2093 2300 1)
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: 2300 => ((2 string-address))
mem: ((2 string-address)): 2430 <= 2300
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (2093 2300 1)
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: 1 => ((3 integer))
mem: ((3 integer)): 2431 <= 1
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((2300 integer) (raw)) => 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: 2 => ((4 integer))
mem: ((4 integer)): 2432 <= 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((2093 integer) (raw)) => 44
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: 44 => ((5 integer))
mem: ((5 integer)): 2433 <= 44
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: (((5 integer)) <- ((subtract)) ((5 integer)) ((4 integer)))
mem: ((5 integer)) => 44
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: 42 => ((5 integer))
mem: ((5 integer)): 2433 <= 42
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 7: (((6 boolean)) <- ((lesser-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 1
mem: ((5 integer)) => 42
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 7: t => ((6 boolean))
mem: ((6 boolean)): 2434 <= t
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 8: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((7 integer)) <- ((copy)) ((0 literal)))
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: 0 => ((7 integer))
mem: ((7 integer)): 2435 <= 0
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 2436 <= nil
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2095 byte) (raw)) => :
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: #\: => ((9 character))
mem: ((9 character)): 2437 <= #\:
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((2300 string) (raw))
mem: ((2300 integer) (raw)) => 2
mem: ((2301 byte) (raw)) => :
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\: => ((10 character))
mem: ((10 character)): 2438 <= #\:
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) => :
mem: ((10 character)) => :
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: t => ((11 boolean))
mem: ((11 boolean)): 2439 <= t
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => t
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 18: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 1
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 18: 2 => ((3 integer))
mem: ((3 integer)): 2431 <= 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 19: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 19: 1 => ((7 integer))
mem: ((7 integer)): 2435 <= 1
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 20: (((jump)) ((-10 offset)))
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 1
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 2436 <= nil
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2096 byte) (raw)) =>  
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: #\space => ((9 character))
mem: ((9 character)): 2437 <= #\space
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 1
array-len: ((2300 string) (raw))
mem: ((2300 integer) (raw)) => 2
mem: ((2302 byte) (raw)) =>  
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\space => ((10 character))
mem: ((10 character)): 2438 <= #\space
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) =>  
mem: ((10 character)) =>  
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: t => ((11 boolean))
mem: ((11 boolean)): 2439 <= t
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => t
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 18: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 18: 3 => ((3 integer))
mem: ((3 integer)): 2431 <= 3
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 19: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 19: 2 => ((7 integer))
mem: ((7 integer)): 2435 <= 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 20: (((jump)) ((-10 offset)))
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 2
mem: ((4 integer)) => 2
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: t => ((8 boolean))
mem: ((8 boolean)): 2436 <= t
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => t
run: match-at/find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 21: (((reply)) ((t literal)))
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 8: t => ((7 boolean))
mem: ((7 boolean)): 2342 <= t
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 9: (((jump-if)) ((7 boolean)) ((3 offset)))
mem: ((7 boolean)) => t
run: find-substring/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((reply)) ((3 integer)))
mem: ((3 integer)) => 1
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 9: 1 => ((7 integer))
mem: ((7 integer)): 2311 <= 1
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((5 string-address)) <- ((string-copy)) ((1 string-address)) ((0 literal)) ((7 integer)))
mem: ((1 string-address)) => 2093
mem: ((7 integer)) => 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: 2458 => ((default-space space-address))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (2093 0 1)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: 2093 => ((1 string-address))
mem: ((1 string-address)): 2460 <= 2093
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (2093 0 1)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: 0 => ((2 integer))
mem: ((2 integer)): 2461 <= 0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (2093 0 1)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: 1 => ((3 integer))
mem: ((3 integer)): 2462 <= 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: 44 => ((4 integer))
mem: ((4 integer)): 2463 <= 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: (((3 integer)) <- ((min)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 44
mem: ((3 integer)) => 1
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: 2489 => ((default-space space-address))
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: (((1 integer)) <- ((next-input)))
arg: nil 0 (44 1)
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: 44 => ((1 integer))
mem: ((1 integer)): 2491 <= 44
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (44 1)
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: 1 => ((2 integer))
mem: ((2 integer)): 2492 <= 1
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: (((3 boolean)) <- ((less-than)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 44
mem: ((2 integer)) => 1
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: nil => ((3 boolean))
mem: ((3 boolean)): 2493 <= nil
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: (((jump-if)) ((3 boolean)) ((1 offset)))
mem: ((3 boolean)) => nil
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: (((reply)) ((2 integer)))
mem: ((2 integer)) => 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: 1 => ((3 integer))
mem: ((3 integer)): 2462 <= 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 1
mem: ((2 integer)) => 0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: 1 => ((4 integer))
mem: ((4 integer)): 2463 <= 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 7: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 7: 2520 => ((5 string-address))
mem: ((5 string-address)): 2464 <= 2520
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 8: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 8: 0 => ((6 integer))
mem: ((6 integer)): 2465 <= 0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 9: 0 => ((7 integer))
mem: ((7 integer)): 2466 <= 0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 0
mem: ((3 integer)) => 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2467 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 0
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2094 byte) (raw)) => 0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\0 => ((9 character))
mem: ((9 character)): 2468 <= #\0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((2520 string) (raw))
mem: ((2520 integer) (raw)) => 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2521 => ((10 character-address))
mem: ((10 character-address)): 2469 <= 2521
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => 0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\0 => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2521 <= #\0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 1 => ((6 integer))
mem: ((6 integer)): 2465 <= 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 1 => ((7 integer))
mem: ((7 integer)): 2466 <= 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 1
mem: ((3 integer)) => 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: t => ((8 boolean))
mem: ((8 boolean)): 2467 <= t
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 18: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 2520
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 10: 2520 => ((5 string-address))
mem: ((5 string-address)): 2309 <= 2520
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((8 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((2300 integer) (raw)) => 2
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 11: 2 => ((8 integer))
mem: ((8 integer)): 2312 <= 2
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((7 integer)) <- ((add)) ((7 integer)) ((8 integer)))
mem: ((7 integer)) => 1
mem: ((8 integer)) => 2
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 12: 3 => ((7 integer))
mem: ((7 integer)): 2311 <= 3
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((6 string-address)) <- ((string-copy)) ((1 string-address)) ((7 integer)) ((3 integer)))
mem: ((1 string-address)) => 2093
mem: ((7 integer)) => 3
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: 2522 => ((default-space space-address))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (2093 3 44)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: 2093 => ((1 string-address))
mem: ((1 string-address)): 2524 <= 2093
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (2093 3 44)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: 3 => ((2 integer))
mem: ((2 integer)): 2525 <= 3
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (2093 3 44)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: 44 => ((3 integer))
mem: ((3 integer)): 2526 <= 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((2093 integer) (raw)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: 44 => ((4 integer))
mem: ((4 integer)): 2527 <= 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: (((3 integer)) <- ((min)) ((4 integer)) ((3 integer)))
mem: ((4 integer)) => 44
mem: ((3 integer)) => 44
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 0: 2553 => ((default-space space-address))
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: (((1 integer)) <- ((next-input)))
arg: nil 0 (44 44)
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 1: 44 => ((1 integer))
mem: ((1 integer)): 2555 <= 44
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (44 44)
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 2: 44 => ((2 integer))
mem: ((2 integer)): 2556 <= 44
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: (((3 boolean)) <- ((less-than)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 44
mem: ((2 integer)) => 44
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 3: nil => ((3 boolean))
mem: ((3 boolean)): 2557 <= nil
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 4: (((jump-if)) ((3 boolean)) ((1 offset)))
mem: ((3 boolean)) => nil
run: min/string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: (((reply)) ((2 integer)))
mem: ((2 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 5: 44 => ((3 integer))
mem: ((3 integer)): 2526 <= 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 44
mem: ((2 integer)) => 3
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 6: 41 => ((4 integer))
mem: ((4 integer)): 2527 <= 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 7: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 7: 2584 => ((5 string-address))
mem: ((5 string-address)): 2528 <= 2584
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 8: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 3
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 8: 3 => ((6 integer))
mem: ((6 integer)): 2529 <= 3
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 9: 0 => ((7 integer))
mem: ((7 integer)): 2530 <= 0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 3
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 3
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2097 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2532 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2585 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2585
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2585 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 3
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 4 => ((6 integer))
mem: ((6 integer)): 2529 <= 4
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 1 => ((7 integer))
mem: ((7 integer)): 2530 <= 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 4
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 4
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2098 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2532 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 1
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2586 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2586
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2586 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 4
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 5 => ((6 integer))
mem: ((6 integer)): 2529 <= 5
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 2 => ((7 integer))
mem: ((7 integer)): 2530 <= 2
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 5
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 5
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2099 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2532 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 2
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2587 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2587
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2587 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 5
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 6 => ((6 integer))
mem: ((6 integer)): 2529 <= 6
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 2
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 3 => ((7 integer))
mem: ((7 integer)): 2530 <= 3
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 6
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 6
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2100 byte) (raw)) => 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\1 => ((9 character))
mem: ((9 character)): 2532 <= #\1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 3
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2588 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2588
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\1 => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2588 <= #\1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 6
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 7 => ((6 integer))
mem: ((6 integer)): 2529 <= 7
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 3
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 4 => ((7 integer))
mem: ((7 integer)): 2530 <= 4
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 7
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 7
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2101 byte) (raw)) =>  
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 2532 <= #\space
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 4
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2589 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2589
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2589 <= #\space
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 7
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 8 => ((6 integer))
mem: ((6 integer)): 2529 <= 8
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 4
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 5 => ((7 integer))
mem: ((7 integer)): 2530 <= 5
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 8
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 8
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2102 byte) (raw)) => i
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\i => ((9 character))
mem: ((9 character)): 2532 <= #\i
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 5
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2590 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2590
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => i
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\i => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2590 <= #\i
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 8
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 9 => ((6 integer))
mem: ((6 integer)): 2529 <= 9
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 5
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 6 => ((7 integer))
mem: ((7 integer)): 2530 <= 6
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 9
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 9
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2103 byte) (raw)) => n
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\n => ((9 character))
mem: ((9 character)): 2532 <= #\n
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 6
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2591 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2591
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => n
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\n => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2591 <= #\n
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 9
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 10 => ((6 integer))
mem: ((6 integer)): 2529 <= 10
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 6
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 7 => ((7 integer))
mem: ((7 integer)): 2530 <= 7
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 10
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 10
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2104 byte) (raw)) => t
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\t => ((9 character))
mem: ((9 character)): 2532 <= #\t
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 7
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2592 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2592
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => t
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\t => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2592 <= #\t
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 10
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 11 => ((6 integer))
mem: ((6 integer)): 2529 <= 11
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 7
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 8 => ((7 integer))
mem: ((7 integer)): 2530 <= 8
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 11
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 11
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2105 byte) (raw)) => e
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\e => ((9 character))
mem: ((9 character)): 2532 <= #\e
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 8
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2593 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2593
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => e
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\e => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2593 <= #\e
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 11
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 12 => ((6 integer))
mem: ((6 integer)): 2529 <= 12
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 8
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 9 => ((7 integer))
mem: ((7 integer)): 2530 <= 9
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 12
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 12
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2106 byte) (raw)) => g
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\g => ((9 character))
mem: ((9 character)): 2532 <= #\g
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 9
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2594 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2594
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => g
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\g => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2594 <= #\g
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 12
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 13 => ((6 integer))
mem: ((6 integer)): 2529 <= 13
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 9
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 10 => ((7 integer))
mem: ((7 integer)): 2530 <= 10
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 13
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 13
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2107 byte) (raw)) => e
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\e => ((9 character))
mem: ((9 character)): 2532 <= #\e
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 10
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2595 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2595
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => e
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\e => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2595 <= #\e
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 13
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 14 => ((6 integer))
mem: ((6 integer)): 2529 <= 14
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 10
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 11 => ((7 integer))
mem: ((7 integer)): 2530 <= 11
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 14
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 14
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2108 byte) (raw)) => r
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\r => ((9 character))
mem: ((9 character)): 2532 <= #\r
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 11
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2596 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2596
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => r
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\r => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2596 <= #\r
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 14
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 15 => ((6 integer))
mem: ((6 integer)): 2529 <= 15
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 11
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 12 => ((7 integer))
mem: ((7 integer)): 2530 <= 12
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 15
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 15
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2109 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2532 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 12
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2597 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2597
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2597 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 15
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 16 => ((6 integer))
mem: ((6 integer)): 2529 <= 16
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 12
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 13 => ((7 integer))
mem: ((7 integer)): 2530 <= 13
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 16
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 16
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2110 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2532 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 13
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2598 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2598
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2598 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 16
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 17 => ((6 integer))
mem: ((6 integer)): 2529 <= 17
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 13
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 14 => ((7 integer))
mem: ((7 integer)): 2530 <= 14
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 17
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 17
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2111 byte) (raw)) =>  
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 2532 <= #\space
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 14
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2599 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2599
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2599 <= #\space
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 17
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 18 => ((6 integer))
mem: ((6 integer)): 2529 <= 18
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 14
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 15 => ((7 integer))
mem: ((7 integer)): 2530 <= 15
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 18
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 18
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2112 byte) (raw)) => <
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\< => ((9 character))
mem: ((9 character)): 2532 <= #\<
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 15
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2600 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2600
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => <
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\< => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2600 <= #\<
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 18
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 19 => ((6 integer))
mem: ((6 integer)): 2529 <= 19
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 15
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 16 => ((7 integer))
mem: ((7 integer)): 2530 <= 16
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 19
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 19
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2113 byte) (raw)) => -
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\- => ((9 character))
mem: ((9 character)): 2532 <= #\-
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 16
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2601 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2601
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => -
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\- => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2601 <= #\-
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 19
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 20 => ((6 integer))
mem: ((6 integer)): 2529 <= 20
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 16
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 17 => ((7 integer))
mem: ((7 integer)): 2530 <= 17
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 20
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 20
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2114 byte) (raw)) =>  
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 2532 <= #\space
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 17
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2602 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2602
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2602 <= #\space
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 20
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 21 => ((6 integer))
mem: ((6 integer)): 2529 <= 21
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 17
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 18 => ((7 integer))
mem: ((7 integer)): 2530 <= 18
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 21
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 21
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2115 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2532 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 18
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2603 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2603
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2603 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 21
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 22 => ((6 integer))
mem: ((6 integer)): 2529 <= 22
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 18
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 19 => ((7 integer))
mem: ((7 integer)): 2530 <= 19
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 22
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 22
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2116 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2532 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 19
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2604 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2604
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2604 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 22
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 23 => ((6 integer))
mem: ((6 integer)): 2529 <= 23
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 19
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 20 => ((7 integer))
mem: ((7 integer)): 2530 <= 20
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 23
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 23
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2117 byte) (raw)) => c
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\c => ((9 character))
mem: ((9 character)): 2532 <= #\c
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 20
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2605 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2605
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => c
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\c => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2605 <= #\c
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 23
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 24 => ((6 integer))
mem: ((6 integer)): 2529 <= 24
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 20
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 21 => ((7 integer))
mem: ((7 integer)): 2530 <= 21
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 24
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 24
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2118 byte) (raw)) => o
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\o => ((9 character))
mem: ((9 character)): 2532 <= #\o
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 21
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2606 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2606
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => o
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\o => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2606 <= #\o
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 24
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 25 => ((6 integer))
mem: ((6 integer)): 2529 <= 25
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 21
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 22 => ((7 integer))
mem: ((7 integer)): 2530 <= 22
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 25
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 25
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2119 byte) (raw)) => p
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\p => ((9 character))
mem: ((9 character)): 2532 <= #\p
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 22
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2607 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2607
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => p
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\p => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2607 <= #\p
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 25
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 26 => ((6 integer))
mem: ((6 integer)): 2529 <= 26
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 22
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 23 => ((7 integer))
mem: ((7 integer)): 2530 <= 23
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 26
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 26
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2120 byte) (raw)) => y
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\y => ((9 character))
mem: ((9 character)): 2532 <= #\y
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 23
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2608 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2608
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => y
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\y => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2608 <= #\y
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 26
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 27 => ((6 integer))
mem: ((6 integer)): 2529 <= 27
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 23
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 24 => ((7 integer))
mem: ((7 integer)): 2530 <= 24
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 27
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 27
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2121 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2532 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 24
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2609 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2609
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2609 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 27
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 28 => ((6 integer))
mem: ((6 integer)): 2529 <= 28
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 24
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 25 => ((7 integer))
mem: ((7 integer)): 2530 <= 25
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 28
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 28
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2122 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2532 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 25
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2610 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2610
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2610 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 28
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 29 => ((6 integer))
mem: ((6 integer)): 2529 <= 29
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 25
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 26 => ((7 integer))
mem: ((7 integer)): 2530 <= 26
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 29
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 29
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2123 byte) (raw)) =>  
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 2532 <= #\space
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 26
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2611 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2611
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2611 <= #\space
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 29
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 30 => ((6 integer))
mem: ((6 integer)): 2529 <= 30
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 26
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 27 => ((7 integer))
mem: ((7 integer)): 2530 <= 27
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 30
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 30
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2124 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2532 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 27
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2612 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2612
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2612 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 30
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 31 => ((6 integer))
mem: ((6 integer)): 2529 <= 31
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 27
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 28 => ((7 integer))
mem: ((7 integer)): 2530 <= 28
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 31
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 31
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2125 byte) (raw)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\( => ((9 character))
mem: ((9 character)): 2532 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 28
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2613 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2613
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => (
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\( => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2613 <= #\(
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 31
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 32 => ((6 integer))
mem: ((6 integer)): 2529 <= 32
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 28
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 29 => ((7 integer))
mem: ((7 integer)): 2530 <= 29
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 32
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 32
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2126 byte) (raw)) => 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\1 => ((9 character))
mem: ((9 character)): 2532 <= #\1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 29
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2614 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2614
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => 1
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\1 => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2614 <= #\1
schedule: scheduling string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main for further processing
schedule: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 32
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 33 => ((6 integer))
mem: ((6 integer)): 2529 <= 33
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 29
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 30 => ((7 integer))
mem: ((7 integer)): 2530 <= 30
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 33
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 33
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2127 byte) (raw)) =>  
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\space => ((9 character))
mem: ((9 character)): 2532 <= #\space
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 30
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2615 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2615
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) =>  
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\space => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2615 <= #\space
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 33
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 34 => ((6 integer))
mem: ((6 integer)): 2529 <= 34
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 30
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 31 => ((7 integer))
mem: ((7 integer)): 2530 <= 31
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 34
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 34
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2128 byte) (raw)) => l
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\l => ((9 character))
mem: ((9 character)): 2532 <= #\l
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 31
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2616 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2616
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => l
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\l => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2616 <= #\l
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 34
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 35 => ((6 integer))
mem: ((6 integer)): 2529 <= 35
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 31
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 32 => ((7 integer))
mem: ((7 integer)): 2530 <= 32
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 35
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 35
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2129 byte) (raw)) => i
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\i => ((9 character))
mem: ((9 character)): 2532 <= #\i
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 32
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2617 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2617
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => i
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\i => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2617 <= #\i
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 35
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 36 => ((6 integer))
mem: ((6 integer)): 2529 <= 36
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 32
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 33 => ((7 integer))
mem: ((7 integer)): 2530 <= 33
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 36
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 36
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2130 byte) (raw)) => t
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\t => ((9 character))
mem: ((9 character)): 2532 <= #\t
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 33
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2618 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2618
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => t
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\t => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2618 <= #\t
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 36
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 37 => ((6 integer))
mem: ((6 integer)): 2529 <= 37
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 33
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 34 => ((7 integer))
mem: ((7 integer)): 2530 <= 34
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 37
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 37
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2131 byte) (raw)) => e
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\e => ((9 character))
mem: ((9 character)): 2532 <= #\e
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 34
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2619 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2619
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => e
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\e => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2619 <= #\e
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 37
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 38 => ((6 integer))
mem: ((6 integer)): 2529 <= 38
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 34
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 35 => ((7 integer))
mem: ((7 integer)): 2530 <= 35
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 38
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 38
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2132 byte) (raw)) => r
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\r => ((9 character))
mem: ((9 character)): 2532 <= #\r
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 35
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2620 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2620
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => r
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\r => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2620 <= #\r
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 38
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 39 => ((6 integer))
mem: ((6 integer)): 2529 <= 39
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 35
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 36 => ((7 integer))
mem: ((7 integer)): 2530 <= 36
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 39
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 39
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2133 byte) (raw)) => a
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\a => ((9 character))
mem: ((9 character)): 2532 <= #\a
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 36
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2621 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2621
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => a
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\a => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2621 <= #\a
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 39
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 40 => ((6 integer))
mem: ((6 integer)): 2529 <= 40
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 36
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 37 => ((7 integer))
mem: ((7 integer)): 2530 <= 37
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 40
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 40
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2134 byte) (raw)) => l
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\l => ((9 character))
mem: ((9 character)): 2532 <= #\l
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 37
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2622 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2622
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => l
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\l => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2622 <= #\l
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 40
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 41 => ((6 integer))
mem: ((6 integer)): 2529 <= 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 37
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 38 => ((7 integer))
mem: ((7 integer)): 2530 <= 38
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 41
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 41
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2135 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2532 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 38
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2623 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2623
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2623 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 42 => ((6 integer))
mem: ((6 integer)): 2529 <= 42
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 38
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 39 => ((7 integer))
mem: ((7 integer)): 2530 <= 39
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 42
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 42
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2136 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2532 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 39
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2624 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2624
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2624 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 42
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 43 => ((6 integer))
mem: ((6 integer)): 2529 <= 43
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 39
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 40 => ((7 integer))
mem: ((7 integer)): 2530 <= 40
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 43
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: nil => ((8 boolean))
mem: ((8 boolean)): 2531 <= nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 43
array-len: ((2093 string) (raw))
mem: ((2093 integer) (raw)) => 44
mem: ((2137 byte) (raw)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 12: #\) => ((9 character))
mem: ((9 character)): 2532 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 40
array-len: ((2584 string) (raw))
mem: ((2584 integer) (raw)) => 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2625 => ((10 character-address))
mem: ((10 character-address)): 2533 <= 2625
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => )
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 14: #\) => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 2625 <= #\)
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 43
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 15: 44 => ((6 integer))
mem: ((6 integer)): 2529 <= 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 40
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 16: 41 => ((7 integer))
mem: ((7 integer)): 2530 <= 41
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 17: (((jump)) ((-8 offset)))
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 44
mem: ((3 integer)) => 44
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 10: t => ((8 boolean))
mem: ((8 boolean)): 2531 <= t
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 11: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split-first-at-substring/parse-instruction-trace/parse-traces/main 18: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 2584
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 13: 2584 => ((6 string-address))
mem: ((6 string-address)): 2310 <= 2584
run: split-first-at-substring/parse-instruction-trace/parse-traces/main 14: (((reply)) ((5 string-address)) ((6 string-address)))
mem: ((5 string-address)) => 2520
mem: ((6 string-address)) => 2584
run: parse-instruction-trace/parse-traces/main 9: 2520 => ((7 string-address-address) (deref))
mem: ((7 string-address-address) (deref)): 1899 <= 2520
run: parse-instruction-trace/parse-traces/main 9: 2584 => ((5 string-address))
mem: ((5 string-address)): 1873 <= 2584
run: parse-instruction-trace/parse-traces/main 10: (((9 string-address-address)) <- ((get-address)) ((3 instruction-trace-address) (deref)) ((2 offset)))
run: parse-instruction-trace/parse-traces/main 10: 1900 => ((9 string-address-address))
mem: ((9 string-address-address)): 1877 <= 1900
run: parse-instruction-trace/parse-traces/main 11: (((9 string-address-address) (deref)) <- ((copy)) ((5 string-address)))
mem: ((5 string-address)) => 2584
run: parse-instruction-trace/parse-traces/main 11: 2584 => ((9 string-address-address) (deref))
mem: ((9 string-address-address) (deref)): 1900 <= 2584
run: parse-instruction-trace/parse-traces/main 12: (((reply)) ((3 instruction-trace-address)))
mem: ((3 instruction-trace-address)) => 1898
run: parse-traces/main 18: 1898 => ((3 instruction-trace-address))
mem: ((3 instruction-trace-address)): 1123 <= 1898
run: parse-traces/main 19: (((2 buffer-address)) <- ((append)) ((2 buffer-address)) ((3 instruction-trace-address)))
mem: ((2 buffer-address)) => 1181
mem: ((3 instruction-trace-address)) => 1898
run: append/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: append/parse-traces/main 0: 2626 => ((default-space space-address))
run: append/parse-traces/main 1: (((1 buffer-address)) <- ((next-input)))
arg: nil 0 (1181 1898)
run: append/parse-traces/main 1: 1181 => ((1 buffer-address))
mem: ((1 buffer-address)): 2628 <= 1181
run: append/parse-traces/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1181 1898)
run: append/parse-traces/main 2: 1898 => ((2 character))
mem: ((2 character)): 2629 <= 1898
run: append/parse-traces/main 3: (((3 boolean)) <- ((buffer-full?)) ((1 buffer-address)))
mem: ((1 buffer-address)) => 1181
run: buffer-full?/append/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: buffer-full?/append/parse-traces/main 0: 2657 => ((default-space space-address))
run: buffer-full?/append/parse-traces/main 1: (((1 buffer-address)) <- ((next-input)))
arg: nil 0 (1181)
run: buffer-full?/append/parse-traces/main 1: 1181 => ((1 buffer-address))
mem: ((1 buffer-address)): 2659 <= 1181
run: buffer-full?/append/parse-traces/main 2: (((2 integer)) <- ((get)) ((1 buffer-address) (deref)) ((0 offset)))
mem: ((1181 integer) (raw)) => 0
run: buffer-full?/append/parse-traces/main 2: 0 => ((2 integer))
mem: ((2 integer)): 2660 <= 0
run: buffer-full?/append/parse-traces/main 3: (((3 string-address)) <- ((get)) ((1 buffer-address) (deref)) ((1 offset)))
mem: ((1182 string-address) (raw)) => 1183
run: buffer-full?/append/parse-traces/main 3: 1183 => ((3 string-address))
mem: ((3 string-address)): 2661 <= 1183
run: buffer-full?/append/parse-traces/main 4: (((4 integer)) <- ((length)) ((3 string-address) (deref)))
array-len: ((3 string-address) (deref))
mem: ((1183 integer) (raw)) => 30
run: buffer-full?/append/parse-traces/main 4: 30 => ((4 integer))
mem: ((4 integer)): 2662 <= 30
run: buffer-full?/append/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((2 integer)) ((4 integer)))
mem: ((2 integer)) => 0
mem: ((4 integer)) => 30
run: buffer-full?/append/parse-traces/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 2663 <= nil
run: buffer-full?/append/parse-traces/main 6: (((reply)) ((5 boolean)))
mem: ((5 boolean)) => nil
run: append/parse-traces/main 3: nil => ((3 boolean))
mem: ((3 boolean)): 2630 <= nil
run: append/parse-traces/main 4: (((jump-unless)) ((3 boolean)) ((1 offset)))
mem: ((3 boolean)) => nil
run: append/parse-traces/main 6: (((4 integer-address)) <- ((get-address)) ((1 buffer-address) (deref)) ((0 offset)))
run: append/parse-traces/main 6: 1181 => ((4 integer-address))
mem: ((4 integer-address)): 2631 <= 1181
run: append/parse-traces/main 7: (((5 string-address)) <- ((get)) ((1 buffer-address) (deref)) ((1 offset)))
mem: ((1182 string-address) (raw)) => 1183
run: append/parse-traces/main 7: 1183 => ((5 string-address))
mem: ((5 string-address)): 2632 <= 1183
run: append/parse-traces/main 8: (((6 byte-address)) <- ((index-address)) ((5 string-address) (deref)) ((4 integer-address) (deref)))
mem: ((4 integer-address) (deref)) => 0
array-len: ((1183 string) (raw))
mem: ((1183 integer) (raw)) => 30
run: append/parse-traces/main 8: 1184 => ((6 byte-address))
mem: ((6 byte-address)): 2633 <= 1184
run: append/parse-traces/main 9: (((6 byte-address) (deref)) <- ((copy)) ((2 character)))
mem: ((2 character)) => 1898
run: append/parse-traces/main 9: 1898 => ((6 byte-address) (deref))
mem: ((6 byte-address) (deref)): 1184 <= 1898
run: append/parse-traces/main 10: (((4 integer-address) (deref)) <- ((add)) ((4 integer-address) (deref)) ((1 literal)))
mem: ((4 integer-address) (deref)) => 0
run: append/parse-traces/main 10: 1 => ((4 integer-address) (deref))
mem: ((4 integer-address) (deref)): 1181 <= 1
run: append/parse-traces/main 11: (((reply)) ((1 buffer-address) (same-as-arg 0)))
mem: ((1 buffer-address) (same-as-arg 0)) => 1181
run: parse-traces/main 19: 1181 => ((2 buffer-address))
mem: ((2 buffer-address)): 1122 <= 1181
run: parse-traces/main 20: (((jump)) ((-15 offset)))
run: parse-traces/main 6: next-line
run: parse-traces/main 7: (((6 boolean)) <- ((end-of-stream?)) ((1 stream-address)))
mem: ((1 stream-address)) => 1117
run: end-of-stream?/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: end-of-stream?/parse-traces/main 0: 2688 => ((default-space space-address))
run: end-of-stream?/parse-traces/main 1: (((1 stream-address)) <- ((next-input)))
arg: nil 0 (1117)
run: end-of-stream?/parse-traces/main 1: 1117 => ((1 stream-address))
mem: ((1 stream-address)): 2690 <= 1117
run: end-of-stream?/parse-traces/main 2: (((2 integer)) <- ((get)) ((1 stream-address) (deref)) ((0 offset)))
mem: ((1117 integer) (raw)) => 55
run: end-of-stream?/parse-traces/main 2: 55 => ((2 integer))
mem: ((2 integer)): 2691 <= 55
run: end-of-stream?/parse-traces/main 3: (((3 string-address)) <- ((get)) ((1 stream-address) (deref)) ((1 offset)))
mem: ((1118 string-address) (raw)) => 1031
run: end-of-stream?/parse-traces/main 3: 1031 => ((3 string-address))
mem: ((3 string-address)): 2692 <= 1031
run: end-of-stream?/parse-traces/main 4: (((4 integer)) <- ((length)) ((3 string-address) (deref)))
array-len: ((3 string-address) (deref))
mem: ((1031 integer) (raw)) => 54
run: end-of-stream?/parse-traces/main 4: 54 => ((4 integer))
mem: ((4 integer)): 2693 <= 54
run: end-of-stream?/parse-traces/main 5: (((5 boolean)) <- ((greater-or-equal)) ((2 integer)) ((4 integer)))
mem: ((2 integer)) => 55
mem: ((4 integer)) => 54
run: end-of-stream?/parse-traces/main 5: t => ((5 boolean))
mem: ((5 boolean)): 2694 <= t
run: end-of-stream?/parse-traces/main 6: (((reply)) ((5 boolean)))
mem: ((5 boolean)) => t
run: parse-traces/main 7: t => ((6 boolean))
mem: ((6 boolean)): 1126 <= t
run: parse-traces/main 8: (((jump-if)) ((6 boolean)) ((15 offset)))
mem: ((6 boolean)) => t
run: parse-traces/main 24: (((jump-unless)) ((3 instruction-trace-address)) ((2 offset)))
mem: ((3 instruction-trace-address)) => 1898
run: parse-traces/main 25: (((11 trace-address-array-address-address)) <- ((get-address)) ((3 instruction-trace-address) (deref)) ((3 offset)))
run: parse-traces/main 25: 1901 => ((11 trace-address-array-address-address))
mem: ((11 trace-address-array-address-address)): 1131 <= 1901
run: parse-traces/main 26: (((11 trace-address-array-address-address) (deref)) <- ((to-array)) ((4 buffer-address)))
mem: ((4 buffer-address)) => 1245
run: to-array/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: to-array/parse-traces/main 0: 2719 => ((default-space space-address))
run: to-array/parse-traces/main 1: (((1 buffer-address)) <- ((next-input)))
arg: nil 0 (1245)
run: to-array/parse-traces/main 1: 1245 => ((1 buffer-address))
mem: ((1 buffer-address)): 2721 <= 1245
run: to-array/parse-traces/main 2: (((2 integer)) <- ((get)) ((1 buffer-address) (deref)) ((0 offset)))
mem: ((1245 integer) (raw)) => 0
run: to-array/parse-traces/main 2: 0 => ((2 integer))
mem: ((2 integer)): 2722 <= 0
run: to-array/parse-traces/main 3: (((3 string-address)) <- ((get)) ((1 buffer-address) (deref)) ((1 offset)))
mem: ((1246 string-address) (raw)) => 1247
run: to-array/parse-traces/main 3: 1247 => ((3 string-address))
mem: ((3 string-address)): 2723 <= 1247
run: to-array/parse-traces/main 4: (((jump-if)) ((3 string-address)) ((1 offset)))
mem: ((3 string-address)) => 1247
run: to-array/parse-traces/main 6: (((4 string-address)) <- ((new)) ((string literal)) ((2 integer)))
mem: ((2 integer)) => 0
run: to-array/parse-traces/main 6: 2750 => ((4 string-address))
mem: ((4 string-address)): 2724 <= 2750
run: to-array/parse-traces/main 7: (((5 integer)) <- ((copy)) ((0 literal)))
run: to-array/parse-traces/main 7: 0 => ((5 integer))
mem: ((5 integer)): 2725 <= 0
run: to-array/parse-traces/main 8: (((6 boolean)) <- ((greater-or-equal)) ((5 integer)) ((2 integer)))
mem: ((5 integer)) => 0
mem: ((2 integer)) => 0
run: to-array/parse-traces/main 8: t => ((6 boolean))
mem: ((6 boolean)): 2726 <= t
run: to-array/parse-traces/main 9: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => t
run: to-array/parse-traces/main 15: (((reply)) ((4 string-address)))
mem: ((4 string-address)) => 2750
run: parse-traces/main 26: 2750 => ((11 trace-address-array-address-address) (deref))
mem: ((11 trace-address-array-address-address) (deref)): 1901 <= 2750
run: parse-traces/main 27: (((12 instruction-trace-address-array-address)) <- ((to-array)) ((2 buffer-address)))
mem: ((2 buffer-address)) => 1181
run: to-array/parse-traces/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: to-array/parse-traces/main 0: 2751 => ((default-space space-address))
run: to-array/parse-traces/main 1: (((1 buffer-address)) <- ((next-input)))
arg: nil 0 (1181)
run: to-array/parse-traces/main 1: 1181 => ((1 buffer-address))
mem: ((1 buffer-address)): 2753 <= 1181
run: to-array/parse-traces/main 2: (((2 integer)) <- ((get)) ((1 buffer-address) (deref)) ((0 offset)))
mem: ((1181 integer) (raw)) => 1
run: to-array/parse-traces/main 2: 1 => ((2 integer))
mem: ((2 integer)): 2754 <= 1
run: to-array/parse-traces/main 3: (((3 string-address)) <- ((get)) ((1 buffer-address) (deref)) ((1 offset)))
mem: ((1182 string-address) (raw)) => 1183
run: to-array/parse-traces/main 3: 1183 => ((3 string-address))
mem: ((3 string-address)): 2755 <= 1183
run: to-array/parse-traces/main 4: (((jump-if)) ((3 string-address)) ((1 offset)))
mem: ((3 string-address)) => 1183
run: to-array/parse-traces/main 6: (((4 string-address)) <- ((new)) ((string literal)) ((2 integer)))
mem: ((2 integer)) => 1
run: to-array/parse-traces/main 6: 2782 => ((4 string-address))
mem: ((4 string-address)): 2756 <= 2782
run: to-array/parse-traces/main 7: (((5 integer)) <- ((copy)) ((0 literal)))
run: to-array/parse-traces/main 7: 0 => ((5 integer))
mem: ((5 integer)): 2757 <= 0
run: to-array/parse-traces/main 8: (((6 boolean)) <- ((greater-or-equal)) ((5 integer)) ((2 integer)))
mem: ((5 integer)) => 0
mem: ((2 integer)) => 1
run: to-array/parse-traces/main 8: nil => ((6 boolean))
mem: ((6 boolean)): 2758 <= nil
run: to-array/parse-traces/main 9: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => nil
run: to-array/parse-traces/main 10: (((7 byte)) <- ((index)) ((3 string-address) (deref)) ((5 integer)))
mem: ((5 integer)) => 0
array-len: ((1183 string) (raw))
mem: ((1183 integer) (raw)) => 30
mem: ((1184 byte) (raw)) => 1898
run: to-array/parse-traces/main 10: 1898 => ((7 byte))
mem: ((7 byte)): 2759 <= 1898
run: to-array/parse-traces/main 11: (((8 byte-address)) <- ((index-address)) ((4 string-address) (deref)) ((5 integer)))
mem: ((5 integer)) => 0
array-len: ((2782 string) (raw))
mem: ((2782 integer) (raw)) => 1
run: to-array/parse-traces/main 11: 2783 => ((8 byte-address))
mem: ((8 byte-address)): 2760 <= 2783
run: to-array/parse-traces/main 12: (((8 byte-address) (deref)) <- ((copy)) ((7 byte)))
mem: ((7 byte)) => 1898
run: to-array/parse-traces/main 12: 1898 => ((8 byte-address) (deref))
mem: ((8 byte-address) (deref)): 2783 <= 1898
run: to-array/parse-traces/main 13: (((5 integer)) <- ((add)) ((5 integer)) ((1 literal)))
mem: ((5 integer)) => 0
run: to-array/parse-traces/main 13: 1 => ((5 integer))
mem: ((5 integer)): 2757 <= 1
run: to-array/parse-traces/main 14: (((jump)) ((-7 offset)))
run: to-array/parse-traces/main 8: (((6 boolean)) <- ((greater-or-equal)) ((5 integer)) ((2 integer)))
mem: ((5 integer)) => 1
mem: ((2 integer)) => 1
run: to-array/parse-traces/main 8: t => ((6 boolean))
mem: ((6 boolean)): 2758 <= t
run: to-array/parse-traces/main 9: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => t
run: to-array/parse-traces/main 15: (((reply)) ((4 string-address)))
mem: ((4 string-address)) => 2782
run: parse-traces/main 27: 2782 => ((12 instruction-trace-address-array-address))
mem: ((12 instruction-trace-address-array-address)): 1132 <= 2782
run: parse-traces/main 28: (((reply)) ((12 instruction-trace-address-array-address)))
mem: ((12 instruction-trace-address-array-address)) => 2782
run: main 7: 2782 => ((4 instruction-trace-address-array-address))
mem: ((4 instruction-trace-address-array-address)): 1005 <= 2782
schedule: done with routine nil
