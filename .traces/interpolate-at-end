schedule: main
run: -- nil
run: 1 main 0: ((1 string-address) <- new hello, _)
run: 1000 => (1 string-address)
setm: (1 string-address) <= 1000
setm: size of (1 string-address) is 1
setm: (1 string-address): setting 1 to 1000
run: -- ((1 1000) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _))
run: 2 main 1: ((2 string-address) <- new abc)
run: 1009 => (2 string-address)
setm: (2 string-address) <= 1009
setm: size of (2 string-address) is 1
setm: (2 string-address): setting 2 to 1009
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c))
run: 3 main 2: ((3 string-address) <- interpolate (1 string-address) (2 string-address))
m: (1 string-address)
sizeof: (1 string-address)
m: (2 string-address)
sizeof: (2 string-address)
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c))
run: 4 interpolate 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1013 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30))
run: 5 interpolate 1: ((1 string-address) <- arg)
arg: nil 0 (1000 1009)
run: 1000 => (1 string-address)
setm: (1 string-address) <= 1000
setm: size of (1 string-address) is 1
setm: (1 string-address): setting 1014 to 1000
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000))
run: 6 interpolate 2: ((2 integer) <- len (1 string-address deref))
array-len: (1 string-address deref)
m: (1 integer-address deref)
sizeof: (1 integer-address deref)
sizeof: (1000 integer)
run: 8 => (2 integer)
setm: (2 integer) <= 8
setm: size of (2 integer) is 1
setm: (2 integer): setting 1015 to 8
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8))
run: 7 interpolate 3: ((3 string-address) <- arg)
arg: nil 1 (1000 1009)
run: 1009 => (3 string-address)
setm: (3 string-address) <= 1009
setm: size of (3 string-address) is 1
setm: (3 string-address): setting 1016 to 1009
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009))
run: 8 interpolate 4: ((4 integer) <- len (3 string-address deref))
array-len: (3 string-address deref)
m: (3 integer-address deref)
sizeof: (3 integer-address deref)
sizeof: (nil integer)
run: 3 => (4 integer)
setm: (4 integer) <= 3
setm: size of (4 integer) is 1
setm: (4 integer): setting 1017 to 3
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3))
run: 9 interpolate 5: ((5 integer) <- add (2 integer) (4 integer))
m: (2 integer)
sizeof: (2 integer)
m: (4 integer)
sizeof: (4 integer)
add: 8 3
m: (2 integer)
sizeof: (2 integer)
m: (4 integer)
sizeof: (4 integer)
run: 11 => (5 integer)
setm: (5 integer) <= 11
setm: size of (5 integer) is 1
setm: (5 integer): setting 1018 to 11
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 11))
run: 10 interpolate 6: ((5 integer) <- sub (5 integer) (1 literal))
m: (5 integer)
sizeof: (5 integer)
run: 10 => (5 integer)
setm: (5 integer) <= 10
setm: size of (5 integer) is 1
setm: (5 integer): setting 1018 to 10
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10))
run: 11 interpolate 7: ((6 string-address) <- new (string literal) (5 integer))
m: (5 integer)
sizeof: (5 integer)
sizeof: byte
run: 1044 => (6 string-address)
setm: (6 string-address) <= 1044
setm: size of (6 string-address) is 1
setm: (6 string-address): setting 1019 to 1044
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1044 10))
run: 12 interpolate 8: ((7 integer) <- copy (0 literal))
run: 0 => (7 integer)
setm: (7 integer) <= 0
setm: size of (7 integer) is 1
setm: (7 integer): setting 1020 to 0
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 0) (1044 10))
run: 13 interpolate 9: ((8 integer) <- copy (0 literal))
run: 0 => (8 integer)
setm: (8 integer) <= 0
setm: size of (8 integer) is 1
setm: (8 integer): setting 1021 to 0
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 0) (1021 0) (1044 10))
run: 14 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1022 to t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 0) (1021 0) (1022 t) (1044 10))
run: 15 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 0) (1021 0) (1022 t) (1044 10))
run: 16 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
array-info: (1 string-address deref) (8 integer)
m: (8 integer)
sizeof: (8 integer)
array-info: initial base 1000 type ((address t) (elem string) (size 1))
array-info: (1 string-address deref) requests deref => ((array t) (elem byte))
array-len: (1 string-address deref)
m: (1 integer-address deref)
sizeof: (1 integer-address deref)
sizeof: (1000 integer)
array-info: array-len of (1 string-address deref) is 8
sizeof: byte
index: (1 string-address deref) (8 integer) => 1001 byte
m: (1001 byte global)
sizeof: (1001 byte global)
run: h => (10 byte)
setm: (10 byte) <= h
setm: size of (10 byte) is 1
setm: (10 byte): setting 1023 to h
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 0) (1021 0) (1022 t) (1023 h) (1044 10))
run: 17 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1024 to nil
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 0) (1021 0) (1022 t) (1023 h) (1044 10))
run: 18 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 0) (1021 0) (1022 t) (1023 h) (1044 10))
run: 19 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
array-info: (6 string-address deref) (7 integer)
m: (7 integer)
sizeof: (7 integer)
array-info: initial base 1044 type ((address t) (elem string) (size 1))
array-info: (6 string-address deref) requests deref => ((array t) (elem byte))
array-len: (6 string-address deref)
m: (6 integer-address deref)
sizeof: (6 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (6 string-address deref) is 10
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1045
run: 1045 => (12 byte-address)
setm: (12 byte-address) <= 1045
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1025 to 1045
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 0) (1021 0) (1022 t) (1023 h) (1025 1045) (1044 10))
run: 20 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: h => (12 byte-address deref)
setm: (12 byte-address deref) <= h
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1045 to h
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 0) (1021 0) (1022 t) (1023 h) (1025 1045) (1044 10) (1045 h))
run: 21 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 0 1
m: (8 integer)
sizeof: (8 integer)
run: 1 => (8 integer)
setm: (8 integer) <= 1
setm: size of (8 integer) is 1
setm: (8 integer): setting 1021 to 1
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 0) (1021 1) (1022 t) (1023 h) (1025 1045) (1044 10) (1045 h))
run: 22 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 0 1
m: (7 integer)
sizeof: (7 integer)
run: 1 => (7 integer)
setm: (7 integer) <= 1
setm: size of (7 integer) is 1
setm: (7 integer): setting 1020 to 1
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 1) (1021 1) (1022 t) (1023 h) (1025 1045) (1044 10) (1045 h))
run: 23 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 1) (1021 1) (1022 t) (1023 h) (1025 1045) (1044 10) (1045 h))
run: 24 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1022 to t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 1) (1021 1) (1022 t) (1023 h) (1025 1045) (1044 10) (1045 h))
run: 25 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 1) (1021 1) (1022 t) (1023 h) (1025 1045) (1044 10) (1045 h))
run: 26 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
array-info: (1 string-address deref) (8 integer)
m: (8 integer)
sizeof: (8 integer)
array-info: initial base 1000 type ((address t) (elem string) (size 1))
array-info: (1 string-address deref) requests deref => ((array t) (elem byte))
array-len: (1 string-address deref)
m: (1 integer-address deref)
sizeof: (1 integer-address deref)
sizeof: (1000 integer)
array-info: array-len of (1 string-address deref) is 8
sizeof: byte
index: (1 string-address deref) (8 integer) => 1002 byte
m: (1002 byte global)
sizeof: (1002 byte global)
run: e => (10 byte)
setm: (10 byte) <= e
setm: size of (10 byte) is 1
setm: (10 byte): setting 1023 to e
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 1) (1021 1) (1022 t) (1023 e) (1025 1045) (1044 10) (1045 h))
run: 27 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1024 to nil
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 1) (1021 1) (1022 t) (1023 e) (1025 1045) (1044 10) (1045 h))
run: 28 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 1) (1021 1) (1022 t) (1023 e) (1025 1045) (1044 10) (1045 h))
run: 29 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
array-info: (6 string-address deref) (7 integer)
m: (7 integer)
sizeof: (7 integer)
array-info: initial base 1044 type ((address t) (elem string) (size 1))
array-info: (6 string-address deref) requests deref => ((array t) (elem byte))
array-len: (6 string-address deref)
m: (6 integer-address deref)
sizeof: (6 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (6 string-address deref) is 10
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1046
run: 1046 => (12 byte-address)
setm: (12 byte-address) <= 1046
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1025 to 1046
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 1) (1021 1) (1022 t) (1023 e) (1025 1046) (1044 10) (1045 h))
run: 30 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: e => (12 byte-address deref)
setm: (12 byte-address deref) <= e
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1046 to e
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 1) (1021 1) (1022 t) (1023 e) (1025 1046) (1044 10) (1045 h) (1046 e))
run: 31 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 1 1
m: (8 integer)
sizeof: (8 integer)
run: 2 => (8 integer)
setm: (8 integer) <= 2
setm: size of (8 integer) is 1
setm: (8 integer): setting 1021 to 2
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 1) (1021 2) (1022 t) (1023 e) (1025 1046) (1044 10) (1045 h) (1046 e))
run: 32 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 1 1
m: (7 integer)
sizeof: (7 integer)
run: 2 => (7 integer)
setm: (7 integer) <= 2
setm: size of (7 integer) is 1
setm: (7 integer): setting 1020 to 2
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 2) (1021 2) (1022 t) (1023 e) (1025 1046) (1044 10) (1045 h) (1046 e))
run: 33 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 2) (1021 2) (1022 t) (1023 e) (1025 1046) (1044 10) (1045 h) (1046 e))
run: 34 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1022 to t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 2) (1021 2) (1022 t) (1023 e) (1025 1046) (1044 10) (1045 h) (1046 e))
run: 35 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 2) (1021 2) (1022 t) (1023 e) (1025 1046) (1044 10) (1045 h) (1046 e))
run: 36 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
array-info: (1 string-address deref) (8 integer)
m: (8 integer)
sizeof: (8 integer)
array-info: initial base 1000 type ((address t) (elem string) (size 1))
array-info: (1 string-address deref) requests deref => ((array t) (elem byte))
array-len: (1 string-address deref)
m: (1 integer-address deref)
sizeof: (1 integer-address deref)
sizeof: (1000 integer)
array-info: array-len of (1 string-address deref) is 8
sizeof: byte
index: (1 string-address deref) (8 integer) => 1003 byte
m: (1003 byte global)
sizeof: (1003 byte global)
run: l => (10 byte)
setm: (10 byte) <= l
setm: size of (10 byte) is 1
setm: (10 byte): setting 1023 to l
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 2) (1021 2) (1022 t) (1023 l) (1025 1046) (1044 10) (1045 h) (1046 e))
run: 37 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1024 to nil
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 2) (1021 2) (1022 t) (1023 l) (1025 1046) (1044 10) (1045 h) (1046 e))
run: 38 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 2) (1021 2) (1022 t) (1023 l) (1025 1046) (1044 10) (1045 h) (1046 e))
run: 39 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
array-info: (6 string-address deref) (7 integer)
m: (7 integer)
sizeof: (7 integer)
array-info: initial base 1044 type ((address t) (elem string) (size 1))
array-info: (6 string-address deref) requests deref => ((array t) (elem byte))
array-len: (6 string-address deref)
m: (6 integer-address deref)
sizeof: (6 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (6 string-address deref) is 10
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1047
run: 1047 => (12 byte-address)
setm: (12 byte-address) <= 1047
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1025 to 1047
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 2) (1021 2) (1022 t) (1023 l) (1025 1047) (1044 10) (1045 h) (1046 e))
run: 40 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: l => (12 byte-address deref)
setm: (12 byte-address deref) <= l
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1047 to l
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 2) (1021 2) (1022 t) (1023 l) (1025 1047) (1044 10) (1045 h) (1046 e) (1047 l))
run: 41 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 2 1
m: (8 integer)
sizeof: (8 integer)
run: 3 => (8 integer)
setm: (8 integer) <= 3
setm: size of (8 integer) is 1
setm: (8 integer): setting 1021 to 3
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 2) (1021 3) (1022 t) (1023 l) (1025 1047) (1044 10) (1045 h) (1046 e) (1047 l))
run: 42 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 2 1
m: (7 integer)
sizeof: (7 integer)
run: 3 => (7 integer)
setm: (7 integer) <= 3
setm: size of (7 integer) is 1
setm: (7 integer): setting 1020 to 3
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 3) (1021 3) (1022 t) (1023 l) (1025 1047) (1044 10) (1045 h) (1046 e) (1047 l))
run: 43 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 3) (1021 3) (1022 t) (1023 l) (1025 1047) (1044 10) (1045 h) (1046 e) (1047 l))
run: 44 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1022 to t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 3) (1021 3) (1022 t) (1023 l) (1025 1047) (1044 10) (1045 h) (1046 e) (1047 l))
run: 45 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 3) (1021 3) (1022 t) (1023 l) (1025 1047) (1044 10) (1045 h) (1046 e) (1047 l))
run: 46 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
array-info: (1 string-address deref) (8 integer)
m: (8 integer)
sizeof: (8 integer)
array-info: initial base 1000 type ((address t) (elem string) (size 1))
array-info: (1 string-address deref) requests deref => ((array t) (elem byte))
array-len: (1 string-address deref)
m: (1 integer-address deref)
sizeof: (1 integer-address deref)
sizeof: (1000 integer)
array-info: array-len of (1 string-address deref) is 8
sizeof: byte
index: (1 string-address deref) (8 integer) => 1004 byte
m: (1004 byte global)
sizeof: (1004 byte global)
run: l => (10 byte)
setm: (10 byte) <= l
setm: size of (10 byte) is 1
setm: (10 byte): setting 1023 to l
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 3) (1021 3) (1022 t) (1023 l) (1025 1047) (1044 10) (1045 h) (1046 e) (1047 l))
run: 47 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1024 to nil
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 3) (1021 3) (1022 t) (1023 l) (1025 1047) (1044 10) (1045 h) (1046 e) (1047 l))
run: 48 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 3) (1021 3) (1022 t) (1023 l) (1025 1047) (1044 10) (1045 h) (1046 e) (1047 l))
run: 49 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
array-info: (6 string-address deref) (7 integer)
m: (7 integer)
sizeof: (7 integer)
array-info: initial base 1044 type ((address t) (elem string) (size 1))
array-info: (6 string-address deref) requests deref => ((array t) (elem byte))
array-len: (6 string-address deref)
m: (6 integer-address deref)
sizeof: (6 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (6 string-address deref) is 10
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1048
run: 1048 => (12 byte-address)
setm: (12 byte-address) <= 1048
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1025 to 1048
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 3) (1021 3) (1022 t) (1023 l) (1025 1048) (1044 10) (1045 h) (1046 e) (1047 l))
run: 50 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: l => (12 byte-address deref)
setm: (12 byte-address deref) <= l
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1048 to l
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 3) (1021 3) (1022 t) (1023 l) (1025 1048) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l))
run: 51 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 3 1
m: (8 integer)
sizeof: (8 integer)
run: 4 => (8 integer)
setm: (8 integer) <= 4
setm: size of (8 integer) is 1
setm: (8 integer): setting 1021 to 4
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 3) (1021 4) (1022 t) (1023 l) (1025 1048) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l))
run: 52 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 3 1
m: (7 integer)
sizeof: (7 integer)
run: 4 => (7 integer)
setm: (7 integer) <= 4
setm: size of (7 integer) is 1
setm: (7 integer): setting 1020 to 4
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 4) (1021 4) (1022 t) (1023 l) (1025 1048) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l))
run: 53 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 4) (1021 4) (1022 t) (1023 l) (1025 1048) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l))
run: 54 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1022 to t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 4) (1021 4) (1022 t) (1023 l) (1025 1048) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l))
run: 55 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 4) (1021 4) (1022 t) (1023 l) (1025 1048) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l))
run: 56 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
array-info: (1 string-address deref) (8 integer)
m: (8 integer)
sizeof: (8 integer)
array-info: initial base 1000 type ((address t) (elem string) (size 1))
array-info: (1 string-address deref) requests deref => ((array t) (elem byte))
array-len: (1 string-address deref)
m: (1 integer-address deref)
sizeof: (1 integer-address deref)
sizeof: (1000 integer)
array-info: array-len of (1 string-address deref) is 8
sizeof: byte
index: (1 string-address deref) (8 integer) => 1005 byte
m: (1005 byte global)
sizeof: (1005 byte global)
run: o => (10 byte)
setm: (10 byte) <= o
setm: size of (10 byte) is 1
setm: (10 byte): setting 1023 to o
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 4) (1021 4) (1022 t) (1023 o) (1025 1048) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l))
run: 57 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1024 to nil
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 4) (1021 4) (1022 t) (1023 o) (1025 1048) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l))
run: 58 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 4) (1021 4) (1022 t) (1023 o) (1025 1048) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l))
run: 59 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
array-info: (6 string-address deref) (7 integer)
m: (7 integer)
sizeof: (7 integer)
array-info: initial base 1044 type ((address t) (elem string) (size 1))
array-info: (6 string-address deref) requests deref => ((array t) (elem byte))
array-len: (6 string-address deref)
m: (6 integer-address deref)
sizeof: (6 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (6 string-address deref) is 10
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1049
run: 1049 => (12 byte-address)
setm: (12 byte-address) <= 1049
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1025 to 1049
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 4) (1021 4) (1022 t) (1023 o) (1025 1049) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l))
run: 60 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: o => (12 byte-address deref)
setm: (12 byte-address deref) <= o
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1049 to o
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 4) (1021 4) (1022 t) (1023 o) (1025 1049) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o))
run: 61 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 4 1
m: (8 integer)
sizeof: (8 integer)
run: 5 => (8 integer)
setm: (8 integer) <= 5
setm: size of (8 integer) is 1
setm: (8 integer): setting 1021 to 5
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 4) (1021 5) (1022 t) (1023 o) (1025 1049) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o))
run: 62 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 4 1
m: (7 integer)
sizeof: (7 integer)
run: 5 => (7 integer)
setm: (7 integer) <= 5
setm: size of (7 integer) is 1
setm: (7 integer): setting 1020 to 5
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 5) (1021 5) (1022 t) (1023 o) (1025 1049) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o))
run: 63 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 5) (1021 5) (1022 t) (1023 o) (1025 1049) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o))
run: 64 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1022 to t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 5) (1021 5) (1022 t) (1023 o) (1025 1049) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o))
run: 65 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 5) (1021 5) (1022 t) (1023 o) (1025 1049) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o))
run: 66 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
array-info: (1 string-address deref) (8 integer)
m: (8 integer)
sizeof: (8 integer)
array-info: initial base 1000 type ((address t) (elem string) (size 1))
array-info: (1 string-address deref) requests deref => ((array t) (elem byte))
array-len: (1 string-address deref)
m: (1 integer-address deref)
sizeof: (1 integer-address deref)
sizeof: (1000 integer)
array-info: array-len of (1 string-address deref) is 8
sizeof: byte
index: (1 string-address deref) (8 integer) => 1006 byte
m: (1006 byte global)
sizeof: (1006 byte global)
run: , => (10 byte)
setm: (10 byte) <= ,
setm: size of (10 byte) is 1
setm: (10 byte): setting 1023 to ,
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 5) (1021 5) (1022 t) (1023 ,) (1025 1049) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o))
run: 67 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1024 to nil
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 5) (1021 5) (1022 t) (1023 ,) (1025 1049) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o))
run: 68 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 5) (1021 5) (1022 t) (1023 ,) (1025 1049) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o))
run: 69 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
array-info: (6 string-address deref) (7 integer)
m: (7 integer)
sizeof: (7 integer)
array-info: initial base 1044 type ((address t) (elem string) (size 1))
array-info: (6 string-address deref) requests deref => ((array t) (elem byte))
array-len: (6 string-address deref)
m: (6 integer-address deref)
sizeof: (6 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (6 string-address deref) is 10
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1050
run: 1050 => (12 byte-address)
setm: (12 byte-address) <= 1050
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1025 to 1050
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 5) (1021 5) (1022 t) (1023 ,) (1025 1050) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o))
run: 70 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: , => (12 byte-address deref)
setm: (12 byte-address deref) <= ,
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1050 to ,
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 5) (1021 5) (1022 t) (1023 ,) (1025 1050) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,))
run: 71 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 5 1
m: (8 integer)
sizeof: (8 integer)
run: 6 => (8 integer)
setm: (8 integer) <= 6
setm: size of (8 integer) is 1
setm: (8 integer): setting 1021 to 6
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 5) (1021 6) (1022 t) (1023 ,) (1025 1050) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,))
run: 72 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 5 1
m: (7 integer)
sizeof: (7 integer)
run: 6 => (7 integer)
setm: (7 integer) <= 6
setm: size of (7 integer) is 1
setm: (7 integer): setting 1020 to 6
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 6) (1021 6) (1022 t) (1023 ,) (1025 1050) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,))
run: 73 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 6) (1021 6) (1022 t) (1023 ,) (1025 1050) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,))
run: 74 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1022 to t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 6) (1021 6) (1022 t) (1023 ,) (1025 1050) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,))
run: 75 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 6) (1021 6) (1022 t) (1023 ,) (1025 1050) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,))
run: 76 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
array-info: (1 string-address deref) (8 integer)
m: (8 integer)
sizeof: (8 integer)
array-info: initial base 1000 type ((address t) (elem string) (size 1))
array-info: (1 string-address deref) requests deref => ((array t) (elem byte))
array-len: (1 string-address deref)
m: (1 integer-address deref)
sizeof: (1 integer-address deref)
sizeof: (1000 integer)
array-info: array-len of (1 string-address deref) is 8
sizeof: byte
index: (1 string-address deref) (8 integer) => 1007 byte
m: (1007 byte global)
sizeof: (1007 byte global)
run:   => (10 byte)
setm: (10 byte) <=  
setm: size of (10 byte) is 1
setm: (10 byte): setting 1023 to  
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 6) (1021 6) (1022 t) (1023  ) (1025 1050) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,))
run: 77 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1024 to nil
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 6) (1021 6) (1022 t) (1023  ) (1025 1050) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,))
run: 78 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 6) (1021 6) (1022 t) (1023  ) (1025 1050) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,))
run: 79 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
array-info: (6 string-address deref) (7 integer)
m: (7 integer)
sizeof: (7 integer)
array-info: initial base 1044 type ((address t) (elem string) (size 1))
array-info: (6 string-address deref) requests deref => ((array t) (elem byte))
array-len: (6 string-address deref)
m: (6 integer-address deref)
sizeof: (6 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (6 string-address deref) is 10
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1051
run: 1051 => (12 byte-address)
setm: (12 byte-address) <= 1051
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1025 to 1051
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 6) (1021 6) (1022 t) (1023  ) (1025 1051) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,))
run: 80 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run:   => (12 byte-address deref)
setm: (12 byte-address deref) <=  
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1051 to  
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 6) (1021 6) (1022 t) (1023  ) (1025 1051) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 81 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 6 1
m: (8 integer)
sizeof: (8 integer)
run: 7 => (8 integer)
setm: (8 integer) <= 7
setm: size of (8 integer) is 1
setm: (8 integer): setting 1021 to 7
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 6) (1021 7) (1022 t) (1023  ) (1025 1051) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 82 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 6 1
m: (7 integer)
sizeof: (7 integer)
run: 7 => (7 integer)
setm: (7 integer) <= 7
setm: size of (7 integer) is 1
setm: (7 integer): setting 1020 to 7
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023  ) (1025 1051) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 83 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023  ) (1025 1051) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 84 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1022 to t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023  ) (1025 1051) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 85 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023  ) (1025 1051) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 86 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
array-info: (1 string-address deref) (8 integer)
m: (8 integer)
sizeof: (8 integer)
array-info: initial base 1000 type ((address t) (elem string) (size 1))
array-info: (1 string-address deref) requests deref => ((array t) (elem byte))
array-len: (1 string-address deref)
m: (1 integer-address deref)
sizeof: (1 integer-address deref)
sizeof: (1000 integer)
array-info: array-len of (1 string-address deref) is 8
sizeof: byte
index: (1 string-address deref) (8 integer) => 1008 byte
m: (1008 byte global)
sizeof: (1008 byte global)
run: _ => (10 byte)
setm: (10 byte) <= _
setm: size of (10 byte) is 1
setm: (10 byte): setting 1023 to _
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023 _) (1025 1051) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 87 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: t => (11 boolean)
setm: (11 boolean) <= t
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1024 to t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023 _) (1024 t) (1025 1051) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 88 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that t is t
jump: jumping to 20
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023 _) (1024 t) (1025 1051) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 89 interpolate 20: ((13 integer) <- copy (0 literal))
run: 0 => (13 integer)
setm: (13 integer) <= 0
setm: size of (13 integer) is 1
setm: (13 integer): setting 1026 to 0
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023 _) (1024 t) (1025 1051) (1026 0) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 90 interpolate 21: ((14 boolean) <- lt (13 integer) (4 integer))
m: (13 integer)
sizeof: (13 integer)
m: (4 integer)
sizeof: (4 integer)
run: t => (14 boolean)
setm: (14 boolean) <= t
setm: size of (14 boolean) is 1
setm: (14 boolean): setting 1027 to t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023 _) (1024 t) (1025 1051) (1026 0) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 91 interpolate 22: (jump-unless (14 boolean) (6 offset))
m: (14 boolean)
sizeof: (14 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023 _) (1024 t) (1025 1051) (1026 0) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 92 interpolate 23: ((10 byte) <- index (3 string-address deref) (13 integer))
array-info: (3 string-address deref) (13 integer)
m: (13 integer)
sizeof: (13 integer)
array-info: initial base 1009 type ((address t) (elem string) (size 1))
array-info: (3 string-address deref) requests deref => ((array t) (elem byte))
array-len: (3 string-address deref)
m: (3 integer-address deref)
sizeof: (3 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (3 string-address deref) is 3
sizeof: byte
index: (3 string-address deref) (13 integer) => 1010 byte
m: (1010 byte global)
sizeof: (1010 byte global)
run: a => (10 byte)
setm: (10 byte) <= a
setm: size of (10 byte) is 1
setm: (10 byte): setting 1023 to a
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023 a) (1024 t) (1025 1051) (1026 0) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 93 interpolate 24: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
array-info: (6 string-address deref) (7 integer)
m: (7 integer)
sizeof: (7 integer)
array-info: initial base 1044 type ((address t) (elem string) (size 1))
array-info: (6 string-address deref) requests deref => ((array t) (elem byte))
array-len: (6 string-address deref)
m: (6 integer-address deref)
sizeof: (6 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (6 string-address deref) is 10
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1052
run: 1052 => (12 byte-address)
setm: (12 byte-address) <= 1052
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1025 to 1052
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023 a) (1024 t) (1025 1052) (1026 0) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ))
run: 94 interpolate 25: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: a => (12 byte-address deref)
setm: (12 byte-address deref) <= a
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1052 to a
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023 a) (1024 t) (1025 1052) (1026 0) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a))
run: 95 interpolate 26: ((13 integer) <- add (13 integer) (1 literal))
m: (13 integer)
sizeof: (13 integer)
add: 0 1
m: (13 integer)
sizeof: (13 integer)
run: 1 => (13 integer)
setm: (13 integer) <= 1
setm: size of (13 integer) is 1
setm: (13 integer): setting 1026 to 1
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 7) (1021 7) (1022 t) (1023 a) (1024 t) (1025 1052) (1026 1) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a))
run: 96 interpolate 27: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 7 1
m: (7 integer)
sizeof: (7 integer)
run: 8 => (7 integer)
setm: (7 integer) <= 8
setm: size of (7 integer) is 1
setm: (7 integer): setting 1020 to 8
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 8) (1021 7) (1022 t) (1023 a) (1024 t) (1025 1052) (1026 1) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a))
run: 97 interpolate 28: (jump (-8 offset))
jump: jumping to 21
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 8) (1021 7) (1022 t) (1023 a) (1024 t) (1025 1052) (1026 1) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a))
run: 98 interpolate 21: ((14 boolean) <- lt (13 integer) (4 integer))
m: (13 integer)
sizeof: (13 integer)
m: (4 integer)
sizeof: (4 integer)
run: t => (14 boolean)
setm: (14 boolean) <= t
setm: size of (14 boolean) is 1
setm: (14 boolean): setting 1027 to t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 8) (1021 7) (1022 t) (1023 a) (1024 t) (1025 1052) (1026 1) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a))
run: 99 interpolate 22: (jump-unless (14 boolean) (6 offset))
m: (14 boolean)
sizeof: (14 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 8) (1021 7) (1022 t) (1023 a) (1024 t) (1025 1052) (1026 1) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a))
run: 100 interpolate 23: ((10 byte) <- index (3 string-address deref) (13 integer))
array-info: (3 string-address deref) (13 integer)
m: (13 integer)
sizeof: (13 integer)
array-info: initial base 1009 type ((address t) (elem string) (size 1))
array-info: (3 string-address deref) requests deref => ((array t) (elem byte))
array-len: (3 string-address deref)
m: (3 integer-address deref)
sizeof: (3 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (3 string-address deref) is 3
sizeof: byte
index: (3 string-address deref) (13 integer) => 1011 byte
m: (1011 byte global)
sizeof: (1011 byte global)
run: b => (10 byte)
setm: (10 byte) <= b
setm: size of (10 byte) is 1
setm: (10 byte): setting 1023 to b
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 8) (1021 7) (1022 t) (1023 b) (1024 t) (1025 1052) (1026 1) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a))
run: 101 interpolate 24: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
array-info: (6 string-address deref) (7 integer)
m: (7 integer)
sizeof: (7 integer)
array-info: initial base 1044 type ((address t) (elem string) (size 1))
array-info: (6 string-address deref) requests deref => ((array t) (elem byte))
array-len: (6 string-address deref)
m: (6 integer-address deref)
sizeof: (6 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (6 string-address deref) is 10
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1053
run: 1053 => (12 byte-address)
setm: (12 byte-address) <= 1053
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1025 to 1053
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 8) (1021 7) (1022 t) (1023 b) (1024 t) (1025 1053) (1026 1) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a))
run: 102 interpolate 25: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: b => (12 byte-address deref)
setm: (12 byte-address deref) <= b
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1053 to b
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 8) (1021 7) (1022 t) (1023 b) (1024 t) (1025 1053) (1026 1) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b))
run: 103 interpolate 26: ((13 integer) <- add (13 integer) (1 literal))
m: (13 integer)
sizeof: (13 integer)
add: 1 1
m: (13 integer)
sizeof: (13 integer)
run: 2 => (13 integer)
setm: (13 integer) <= 2
setm: size of (13 integer) is 1
setm: (13 integer): setting 1026 to 2
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 8) (1021 7) (1022 t) (1023 b) (1024 t) (1025 1053) (1026 2) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b))
run: 104 interpolate 27: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 8 1
m: (7 integer)
sizeof: (7 integer)
run: 9 => (7 integer)
setm: (7 integer) <= 9
setm: size of (7 integer) is 1
setm: (7 integer): setting 1020 to 9
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 9) (1021 7) (1022 t) (1023 b) (1024 t) (1025 1053) (1026 2) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b))
run: 105 interpolate 28: (jump (-8 offset))
jump: jumping to 21
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 9) (1021 7) (1022 t) (1023 b) (1024 t) (1025 1053) (1026 2) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b))
run: 106 interpolate 21: ((14 boolean) <- lt (13 integer) (4 integer))
m: (13 integer)
sizeof: (13 integer)
m: (4 integer)
sizeof: (4 integer)
run: t => (14 boolean)
setm: (14 boolean) <= t
setm: size of (14 boolean) is 1
setm: (14 boolean): setting 1027 to t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 9) (1021 7) (1022 t) (1023 b) (1024 t) (1025 1053) (1026 2) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b))
run: 107 interpolate 22: (jump-unless (14 boolean) (6 offset))
m: (14 boolean)
sizeof: (14 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 9) (1021 7) (1022 t) (1023 b) (1024 t) (1025 1053) (1026 2) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b))
run: 108 interpolate 23: ((10 byte) <- index (3 string-address deref) (13 integer))
array-info: (3 string-address deref) (13 integer)
m: (13 integer)
sizeof: (13 integer)
array-info: initial base 1009 type ((address t) (elem string) (size 1))
array-info: (3 string-address deref) requests deref => ((array t) (elem byte))
array-len: (3 string-address deref)
m: (3 integer-address deref)
sizeof: (3 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (3 string-address deref) is 3
sizeof: byte
index: (3 string-address deref) (13 integer) => 1012 byte
m: (1012 byte global)
sizeof: (1012 byte global)
run: c => (10 byte)
setm: (10 byte) <= c
setm: size of (10 byte) is 1
setm: (10 byte): setting 1023 to c
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 9) (1021 7) (1022 t) (1023 c) (1024 t) (1025 1053) (1026 2) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b))
run: 109 interpolate 24: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
array-info: (6 string-address deref) (7 integer)
m: (7 integer)
sizeof: (7 integer)
array-info: initial base 1044 type ((address t) (elem string) (size 1))
array-info: (6 string-address deref) requests deref => ((array t) (elem byte))
array-len: (6 string-address deref)
m: (6 integer-address deref)
sizeof: (6 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (6 string-address deref) is 10
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1054
run: 1054 => (12 byte-address)
setm: (12 byte-address) <= 1054
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1025 to 1054
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 9) (1021 7) (1022 t) (1023 c) (1024 t) (1025 1054) (1026 2) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b))
run: 110 interpolate 25: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: c => (12 byte-address deref)
setm: (12 byte-address deref) <= c
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1054 to c
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 9) (1021 7) (1022 t) (1023 c) (1024 t) (1025 1054) (1026 2) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b) (1054 c))
run: 111 interpolate 26: ((13 integer) <- add (13 integer) (1 literal))
m: (13 integer)
sizeof: (13 integer)
add: 2 1
m: (13 integer)
sizeof: (13 integer)
run: 3 => (13 integer)
setm: (13 integer) <= 3
setm: size of (13 integer) is 1
setm: (13 integer): setting 1026 to 3
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 9) (1021 7) (1022 t) (1023 c) (1024 t) (1025 1054) (1026 3) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b) (1054 c))
run: 112 interpolate 27: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 9 1
m: (7 integer)
sizeof: (7 integer)
run: 10 => (7 integer)
setm: (7 integer) <= 10
setm: size of (7 integer) is 1
setm: (7 integer): setting 1020 to 10
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 10) (1021 7) (1022 t) (1023 c) (1024 t) (1025 1054) (1026 3) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b) (1054 c))
run: 113 interpolate 28: (jump (-8 offset))
jump: jumping to 21
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 10) (1021 7) (1022 t) (1023 c) (1024 t) (1025 1054) (1026 3) (1027 t) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b) (1054 c))
run: 114 interpolate 21: ((14 boolean) <- lt (13 integer) (4 integer))
m: (13 integer)
sizeof: (13 integer)
m: (4 integer)
sizeof: (4 integer)
run: nil => (14 boolean)
setm: (14 boolean) <= nil
setm: size of (14 boolean) is 1
setm: (14 boolean): setting 1027 to nil
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 10) (1021 7) (1022 t) (1023 c) (1024 t) (1025 1054) (1026 3) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b) (1054 c))
run: 115 interpolate 22: (jump-unless (14 boolean) (6 offset))
m: (14 boolean)
sizeof: (14 boolean)
jump: checking that nil is not t
jump: jumping to 29
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 10) (1021 7) (1022 t) (1023 c) (1024 t) (1025 1054) (1026 3) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b) (1054 c))
run: 116 interpolate 29: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 7 1
m: (8 integer)
sizeof: (8 integer)
run: 8 => (8 integer)
setm: (8 integer) <= 8
setm: size of (8 integer) is 1
setm: (8 integer): setting 1021 to 8
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 10) (1021 8) (1022 t) (1023 c) (1024 t) (1025 1054) (1026 3) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b) (1054 c))
run: 117 interpolate 30: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: nil => (9 boolean)
setm: (9 boolean) <= nil
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1022 to nil
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 10) (1021 8) (1023 c) (1024 t) (1025 1054) (1026 3) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b) (1054 c))
run: 118 interpolate 31: (jump-unless (9 boolean) (6 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that nil is not t
jump: jumping to 38
run: -- ((1 1000) (2 1009) (1000 8) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 ,) (1007  ) (1008 _) (1009 3) (1010 a) (1011 b) (1012 c) (1013 30) (1014 1000) (1015 8) (1016 1009) (1017 3) (1018 10) (1019 1044) (1020 10) (1021 8) (1023 c) (1024 t) (1025 1054) (1026 3) (1044 10) (1045 h) (1046 e) (1047 l) (1048 l) (1049 o) (1050 ,) (1051  ) (1052 a) (1053 b) (1054 c))
run: 119 interpolate 38: (reply (6 string-address))
m: (6 string-address)
sizeof: (6 string-address)
reply: ((6 string-address)) ((3 string-address))
reply: 1044 => (3 string-address)
setm: (3 string-address) <= 1044
setm: size of (3 string-address) is 1
setm: (3 string-address): setting 3 to 1044
schedule: done with routine
