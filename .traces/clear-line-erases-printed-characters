parse: instruction: run
parse:   ingredient: {name: "\n#?     $start-tracing #? 4\n    1:address:screen <- init-fake-screen 3:literal/width, 2:literal/height\n    # print a character\n    1:address:screen <- print-character 1:address:screen, 97:literal  # 'a'\n    # move cursor to start of line\n    1:address:screen <- move-cursor 1:address:screen, 0:literal/row, 0:literal/column\n    # clear line\n    1:address:screen <- clear-line 1:address:screen\n    2:address:array:screen-cell <- get 1:address:screen/deref, data:offset\n    3:array:screen-cell <- copy 2:address:array:screen-cell/deref\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    3 <- 6  # width*height\n    4 <- 0\n    5 <- 7\n    6 <- 0\n    7 <- 7\n    8 <- 0\n    9 <- 7\n    10 <- 0\n    11 <- 7\n    12 <- 0\n    13 <- 7\n    14 <- 0\n    15 <- 7\n  ", properties: [_: "literal-string"]}
after-brace: recipe clear-line-erases-printed-characters
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: clear-line-erases-printed-characters
 101 run: run [
#?     $start-tracing #? 4
    1:address:screen <- init-fake-screen 3:literal/width, 2:literal/height
    # print a character
    1:address:screen <- print-character 1:address:screen, 97:literal  # 'a'
    # move cursor to start of line
    1:address:screen <- move-cursor 1:address:screen, 0:literal/row, 0:literal/column
    # clear line
    1:address:screen <- clear-line 1:address:screen
    2:address:array:screen-cell <- get 1:address:screen/deref, data:offset
    3:array:screen-cell <- copy 2:address:array:screen-cell/deref
  ]
parse: instruction: init-fake-screen
parse:   ingredient: {name: "3", properties: ["3": "literal", "width": ]}
parse:   ingredient: {name: "2", properties: ["2": "literal", "height": ]}
parse:   product: {name: "1", properties: ["1": "address":"screen"]}
parse: instruction: print-character
parse:   ingredient: {name: "1", properties: ["1": "address":"screen"]}
parse:   ingredient: {name: "97", properties: ["97": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"screen"]}
parse: instruction: move-cursor
parse:   ingredient: {name: "1", properties: ["1": "address":"screen"]}
parse:   ingredient: {name: "0", properties: ["0": "literal", "row": ]}
parse:   ingredient: {name: "0", properties: ["0": "literal", "column": ]}
parse:   product: {name: "1", properties: ["1": "address":"screen"]}
parse: instruction: clear-line
parse:   ingredient: {name: "1", properties: ["1": "address":"screen"]}
parse:   product: {name: "1", properties: ["1": "address":"screen"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"screen", "deref": ]}
parse:   ingredient: {name: "data", properties: ["data": "offset"]}
parse:   product: {name: "2", properties: ["2": "address":"array":"screen-cell"]}
parse: instruction: copy
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"screen-cell", "deref": ]}
parse:   product: {name: "3", properties: ["3": "array":"screen-cell"]}
name: element data of type screen is at offset 4
after-brace: recipe run1001
after-brace: init-fake-screen ...
after-brace: print-character ...
after-brace: move-cursor ...
after-brace: clear-line ...
after-brace: get ...
after-brace: copy ...
 101 run: 1:address:screen <- init-fake-screen 3:literal/width, 2:literal/height
 102 run: default-space:address:array:location <- new location:type, 30:literal/capacity
9999 mem: array size is 30
9999 mem: new alloc: 1000
 102 run: result:address:screen <- new screen:type
9999 mem: new alloc: 1031
9999 mem: storing 1031 in location 1002
 102 run: width:address:number <- get-address result:address:screen/deref, num-columns:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1003
 102 run: width:address:number/deref <- next-ingredient 
9999 mem: location 1003 is 1032
9999 mem: storing 3 in location 1032
 102 run: height:address:number <- get-address result:address:screen/deref, num-rows:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1004
 102 run: height:address:number/deref <- next-ingredient 
9999 mem: location 1004 is 1031
9999 mem: storing 2 in location 1031
 102 run: row:address:number <- get-address result:address:screen/deref, cursor-row:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1005
 102 run: row:address:number/deref <- copy 0:literal
9999 mem: location 1005 is 1033
9999 mem: storing 0 in location 1033
 102 run: column:address:number <- get-address result:address:screen/deref, cursor-column:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1034
9999 mem: storing 1034 in location 1006
 102 run: column:address:number/deref <- copy 0:literal
9999 mem: location 1006 is 1034
9999 mem: storing 0 in location 1034
 102 run: bufsize:number <- multiply width:address:number/deref, height:address:number/deref
9999 mem: location 1003 is 1032
9999 mem: location 1032 is 3
9999 mem: location 1004 is 1031
9999 mem: location 1031 is 2
9999 mem: storing 6 in location 1007
 102 run: buf:address:address:array:screen-cell <- get-address result:address:screen/deref, data:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1035
9999 mem: storing 1035 in location 1008
 102 run: buf:address:address:array:screen-cell/deref <- new screen-cell:type, bufsize:number
9999 mem: location 1007 is 6
9999 mem: array size is 6
9999 mem: new alloc: 1036
9999 mem: location 1008 is 1035
9999 mem: storing 1036 in location 1035
 102 run: clear-screen result:address:screen
9999 mem: location 1002 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1049
 103 run: x:address:screen <- next-ingredient 
9999 mem: storing 1031 in location 1051
 103 run: break-unless x:address:screen, 
9999 mem: location 1051 is 1031
9999 run: jump-unless fell through
 103 run: buf:address:array:screen-cell <- get x:address:screen/deref, data:offset
9999 mem: location 1051 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1051 is 1031
9999 run: address to copy is 1035
9999 run: its type is address
9999 mem: location 1035 is 1036
9999 mem: storing 1036 in location 1052
 103 run: max:number <- length buf:address:array:screen-cell/deref
9999 mem: location 1052 is 1036
9999 mem: location 1036 is 6
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1052 is 1036
9999 mem: storing 6 in location 1053
 103 run: i:number <- copy 0:literal
9999 mem: storing 0 in location 1054
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1054 is 0
9999 mem: location 1053 is 6
9999 mem: storing 0 in location 1055
 103 run: break-if done?:boolean, 
9999 mem: location 1055 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address buf:address:array:screen-cell/deref, i:number
9999 mem: location 1052 is 1036
9999 mem: location 1036 is 6
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1054 is 0
9999 mem: location 1052 is 1036
9999 mem: location 1054 is 0
9999 mem: storing 1037 in location 1056
 103 run: curr-content:address:character <- get-address curr:address:screen-cell/deref, contents:offset
9999 mem: location 1056 is 1037
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1056 is 1037
9999 run: address to copy is 1037
9999 mem: storing 1037 in location 1057
 103 run: curr-content:address:character/deref <- copy [ ]
9999 mem: location 1057 is 1037
9999 mem: storing 0 in location 1037
 103 run: curr-color:address:character <- get-address curr:address:screen-cell/deref, color:offset
9999 mem: location 1056 is 1037
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1056 is 1037
9999 run: address to copy is 1038
9999 mem: storing 1038 in location 1058
 103 run: curr-color:address:character/deref <- copy 7:literal/white
9999 mem: location 1058 is 1038
9999 mem: storing 7 in location 1038
 103 run: i:number <- add i:number, 1:literal
9999 mem: location 1054 is 0
9999 mem: storing 1 in location 1054
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1054 is 1
9999 mem: location 1053 is 6
9999 mem: storing 0 in location 1055
 103 run: break-if done?:boolean, 
9999 mem: location 1055 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address buf:address:array:screen-cell/deref, i:number
9999 mem: location 1052 is 1036
9999 mem: location 1036 is 6
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1054 is 1
9999 mem: location 1052 is 1036
9999 mem: location 1054 is 1
9999 mem: storing 1039 in location 1056
 103 run: curr-content:address:character <- get-address curr:address:screen-cell/deref, contents:offset
9999 mem: location 1056 is 1039
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1056 is 1039
9999 run: address to copy is 1039
9999 mem: storing 1039 in location 1057
 103 run: curr-content:address:character/deref <- copy [ ]
9999 mem: location 1057 is 1039
9999 mem: storing 0 in location 1039
 103 run: curr-color:address:character <- get-address curr:address:screen-cell/deref, color:offset
9999 mem: location 1056 is 1039
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1056 is 1039
9999 run: address to copy is 1040
9999 mem: storing 1040 in location 1058
 103 run: curr-color:address:character/deref <- copy 7:literal/white
9999 mem: location 1058 is 1040
9999 mem: storing 7 in location 1040
 103 run: i:number <- add i:number, 1:literal
9999 mem: location 1054 is 1
9999 mem: storing 2 in location 1054
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1054 is 2
9999 mem: location 1053 is 6
9999 mem: storing 0 in location 1055
 103 run: break-if done?:boolean, 
9999 mem: location 1055 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address buf:address:array:screen-cell/deref, i:number
9999 mem: location 1052 is 1036
9999 mem: location 1036 is 6
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1054 is 2
9999 mem: location 1052 is 1036
9999 mem: location 1054 is 2
9999 mem: storing 1041 in location 1056
 103 run: curr-content:address:character <- get-address curr:address:screen-cell/deref, contents:offset
9999 mem: location 1056 is 1041
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1056 is 1041
9999 run: address to copy is 1041
9999 mem: storing 1041 in location 1057
 103 run: curr-content:address:character/deref <- copy [ ]
9999 mem: location 1057 is 1041
9999 mem: storing 0 in location 1041
 103 run: curr-color:address:character <- get-address curr:address:screen-cell/deref, color:offset
9999 mem: location 1056 is 1041
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1056 is 1041
9999 run: address to copy is 1042
9999 mem: storing 1042 in location 1058
 103 run: curr-color:address:character/deref <- copy 7:literal/white
9999 mem: location 1058 is 1042
9999 mem: storing 7 in location 1042
 103 run: i:number <- add i:number, 1:literal
9999 mem: location 1054 is 2
9999 mem: storing 3 in location 1054
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1054 is 3
9999 mem: location 1053 is 6
9999 mem: storing 0 in location 1055
 103 run: break-if done?:boolean, 
9999 mem: location 1055 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address buf:address:array:screen-cell/deref, i:number
9999 mem: location 1052 is 1036
9999 mem: location 1036 is 6
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1054 is 3
9999 mem: location 1052 is 1036
9999 mem: location 1054 is 3
9999 mem: storing 1043 in location 1056
 103 run: curr-content:address:character <- get-address curr:address:screen-cell/deref, contents:offset
9999 mem: location 1056 is 1043
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1056 is 1043
9999 run: address to copy is 1043
9999 mem: storing 1043 in location 1057
 103 run: curr-content:address:character/deref <- copy [ ]
9999 mem: location 1057 is 1043
9999 mem: storing 0 in location 1043
 103 run: curr-color:address:character <- get-address curr:address:screen-cell/deref, color:offset
9999 mem: location 1056 is 1043
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1056 is 1043
9999 run: address to copy is 1044
9999 mem: storing 1044 in location 1058
 103 run: curr-color:address:character/deref <- copy 7:literal/white
9999 mem: location 1058 is 1044
9999 mem: storing 7 in location 1044
 103 run: i:number <- add i:number, 1:literal
9999 mem: location 1054 is 3
9999 mem: storing 4 in location 1054
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1054 is 4
9999 mem: location 1053 is 6
9999 mem: storing 0 in location 1055
 103 run: break-if done?:boolean, 
9999 mem: location 1055 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address buf:address:array:screen-cell/deref, i:number
9999 mem: location 1052 is 1036
9999 mem: location 1036 is 6
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1045 is 0
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1054 is 4
9999 mem: location 1052 is 1036
9999 mem: location 1054 is 4
9999 mem: storing 1045 in location 1056
 103 run: curr-content:address:character <- get-address curr:address:screen-cell/deref, contents:offset
9999 mem: location 1056 is 1045
9999 mem: location 1045 is 0
9999 mem: location 1046 is 0
9999 mem: location 1056 is 1045
9999 run: address to copy is 1045
9999 mem: storing 1045 in location 1057
 103 run: curr-content:address:character/deref <- copy [ ]
9999 mem: location 1057 is 1045
9999 mem: storing 0 in location 1045
 103 run: curr-color:address:character <- get-address curr:address:screen-cell/deref, color:offset
9999 mem: location 1056 is 1045
9999 mem: location 1045 is 0
9999 mem: location 1046 is 0
9999 mem: location 1056 is 1045
9999 run: address to copy is 1046
9999 mem: storing 1046 in location 1058
 103 run: curr-color:address:character/deref <- copy 7:literal/white
9999 mem: location 1058 is 1046
9999 mem: storing 7 in location 1046
 103 run: i:number <- add i:number, 1:literal
9999 mem: location 1054 is 4
9999 mem: storing 5 in location 1054
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1054 is 5
9999 mem: location 1053 is 6
9999 mem: storing 0 in location 1055
 103 run: break-if done?:boolean, 
9999 mem: location 1055 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address buf:address:array:screen-cell/deref, i:number
9999 mem: location 1052 is 1036
9999 mem: location 1036 is 6
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1045 is 0
9999 mem: location 1046 is 7
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1054 is 5
9999 mem: location 1052 is 1036
9999 mem: location 1054 is 5
9999 mem: storing 1047 in location 1056
 103 run: curr-content:address:character <- get-address curr:address:screen-cell/deref, contents:offset
9999 mem: location 1056 is 1047
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1056 is 1047
9999 run: address to copy is 1047
9999 mem: storing 1047 in location 1057
 103 run: curr-content:address:character/deref <- copy [ ]
9999 mem: location 1057 is 1047
9999 mem: storing 0 in location 1047
 103 run: curr-color:address:character <- get-address curr:address:screen-cell/deref, color:offset
9999 mem: location 1056 is 1047
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1056 is 1047
9999 run: address to copy is 1048
9999 mem: storing 1048 in location 1058
 103 run: curr-color:address:character/deref <- copy 7:literal/white
9999 mem: location 1058 is 1048
9999 mem: storing 7 in location 1048
 103 run: i:number <- add i:number, 1:literal
9999 mem: location 1054 is 5
9999 mem: storing 6 in location 1054
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 1054 is 6
9999 mem: location 1053 is 6
9999 mem: storing 1 in location 1055
 103 run: break-if done?:boolean, 
9999 mem: location 1055 is 1
9999 run: jumping to instruction 17
 103 run: cur:address:number <- get-address x:address:screen/deref, cursor-row:offset
9999 mem: location 1051 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1051 is 1031
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1059
 103 run: cur:address:number/deref <- copy 0:literal
9999 mem: location 1059 is 1033
9999 mem: storing 0 in location 1033
 103 run: cur:address:number <- get-address x:address:screen/deref, cursor-column:offset
9999 mem: location 1051 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1051 is 1031
9999 run: address to copy is 1034
9999 mem: storing 1034 in location 1059
 103 run: cur:address:number/deref <- copy 0:literal
9999 mem: location 1059 is 1034
9999 mem: storing 0 in location 1034
 103 run: reply x:address:screen/same-as-ingredient:0
9999 mem: location 1051 is 1031
 102 run: reply result:address:screen
9999 mem: location 1002 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 1
 101 run: 1:address:screen <- print-character 1:address:screen, 97:literal
9999 mem: location 1 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1080
 102 run: x:address:screen <- next-ingredient 
9999 mem: storing 1031 in location 1082
 102 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1083
 102 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1084
9999 mem: storing 0 in location 1085
 102 run: break-if color-found?:boolean, 
9999 mem: location 1085 is 0
9999 run: jump-if fell through
 102 run: color:number <- copy 7:literal/white
9999 mem: storing 7 in location 1084
 102 run: break-unless x:address:screen, 
9999 mem: location 1082 is 1031
9999 run: jump-unless fell through
 102 run: row:address:number <- get-address x:address:screen/deref, cursor-row:offset
9999 mem: location 1082 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1082 is 1031
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1086
 102 run: column:address:number <- get-address x:address:screen/deref, cursor-column:offset
9999 mem: location 1082 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1082 is 1031
9999 run: address to copy is 1034
9999 mem: storing 1034 in location 1087
 102 run: width:number <- get x:address:screen/deref, num-columns:offset
9999 mem: location 1082 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1082 is 1031
9999 run: address to copy is 1032
9999 run: its type is number
9999 mem: location 1032 is 3
9999 mem: storing 3 in location 1088
 102 run: height:number <- get x:address:screen/deref, num-rows:offset
9999 mem: location 1082 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1082 is 1031
9999 run: address to copy is 1031
9999 run: its type is number
9999 mem: location 1031 is 2
9999 mem: storing 2 in location 1089
 102 run: newline?:boolean <- equal c:character, 10:literal/newline
9999 mem: location 1083 is 97
9999 mem: storing 0 in location 1090
 102 run: break-unless newline?:boolean, 
9999 mem: location 1090 is 0
9999 run: jumping to instruction 25
 102 run: index:number <- multiply row:address:number/deref, width:number
9999 mem: location 1086 is 1033
9999 mem: location 1033 is 0
9999 mem: location 1088 is 3
9999 mem: storing 0 in location 1093
 102 run: index:number <- add index:number, column:address:number/deref
9999 mem: location 1093 is 0
9999 mem: location 1087 is 1034
9999 mem: location 1034 is 0
9999 mem: storing 0 in location 1093
 102 run: buf:address:array:screen-cell <- get x:address:screen/deref, data:offset
9999 mem: location 1082 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1082 is 1031
9999 run: address to copy is 1035
9999 run: its type is address
9999 mem: location 1035 is 1036
9999 mem: storing 1036 in location 1094
 102 run: backspace?:boolean <- equal c:character, 8:literal
9999 mem: location 1083 is 97
9999 mem: storing 0 in location 1095
 102 run: break-unless backspace?:boolean, 
9999 mem: location 1095 is 0
9999 run: jumping to instruction 44
 102 run: cursor:address:screen-cell <- index-address buf:address:array:screen-cell/deref, index:number
9999 mem: location 1094 is 1036
9999 mem: location 1036 is 6
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1045 is 0
9999 mem: location 1046 is 7
9999 mem: location 1047 is 0
9999 mem: location 1048 is 7
9999 mem: location 1093 is 0
9999 mem: location 1094 is 1036
9999 mem: location 1093 is 0
9999 mem: storing 1037 in location 1097
 102 run: cursor-contents:address:character <- get-address cursor:address:screen-cell/deref, contents:offset
9999 mem: location 1097 is 1037
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1097 is 1037
9999 run: address to copy is 1037
9999 mem: storing 1037 in location 1098
 102 run: cursor-color:address:number <- get-address cursor:address:screen-cell/deref, color:offset
9999 mem: location 1097 is 1037
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1097 is 1037
9999 run: address to copy is 1038
9999 mem: storing 1038 in location 1099
 102 run: cursor-contents:address:character/deref <- copy c:character
9999 mem: location 1083 is 97
9999 mem: location 1098 is 1037
9999 mem: storing 97 in location 1037
 102 run: cursor-color:address:number/deref <- copy color:number
9999 mem: location 1084 is 7
9999 mem: location 1099 is 1038
9999 mem: storing 7 in location 1038
 102 run: right:number <- subtract width:number, 1:literal
9999 mem: location 1088 is 3
9999 mem: storing 2 in location 1100
 102 run: at-right?:boolean <- greater-or-equal column:address:number/deref, right:number
9999 mem: location 1087 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1100 is 2
9999 mem: storing 0 in location 1101
 102 run: break-if at-right?:boolean, 
9999 mem: location 1101 is 0
9999 run: jump-if fell through
 102 run: column:address:number/deref <- add column:address:number/deref, 1:literal
9999 mem: location 1087 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1087 is 1034
9999 mem: storing 1 in location 1034
 102 run: reply x:address:screen/same-as-ingredient:0
9999 mem: location 1082 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 1
 101 run: 1:address:screen <- move-cursor 1:address:screen, 0:literal/row, 0:literal/column
9999 mem: location 1 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1111
 102 run: x:address:screen <- next-ingredient 
9999 mem: storing 1031 in location 1113
 102 run: new-row:number <- next-ingredient 
9999 mem: storing 0 in location 1114
 102 run: new-column:number <- next-ingredient 
9999 mem: storing 0 in location 1115
 102 run: break-unless x:address:screen, 
9999 mem: location 1113 is 1031
9999 run: jump-unless fell through
 102 run: row:address:number <- get-address x:address:screen/deref, cursor-row:offset
9999 mem: location 1113 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 1
9999 mem: location 1035 is 1036
9999 mem: location 1113 is 1031
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1116
 102 run: row:address:number/deref <- copy new-row:number
9999 mem: location 1114 is 0
9999 mem: location 1116 is 1033
9999 mem: storing 0 in location 1033
 102 run: column:address:number <- get-address x:address:screen/deref, cursor-column:offset
9999 mem: location 1113 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 1
9999 mem: location 1035 is 1036
9999 mem: location 1113 is 1031
9999 run: address to copy is 1034
9999 mem: storing 1034 in location 1117
 102 run: column:address:number/deref <- copy new-column:number
9999 mem: location 1115 is 0
9999 mem: location 1117 is 1034
9999 mem: storing 0 in location 1034
 102 run: reply x:address:screen/same-as-ingredient:0
9999 mem: location 1113 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 1
 101 run: 1:address:screen <- clear-line 1:address:screen
9999 mem: location 1 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1142
 102 run: x:address:screen <- next-ingredient 
9999 mem: storing 1031 in location 1144
 102 run: break-unless x:address:screen, 
9999 mem: location 1144 is 1031
9999 run: jump-unless fell through
 102 run: width:number <- get x:address:screen/deref, num-columns:offset
9999 mem: location 1144 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1144 is 1031
9999 run: address to copy is 1032
9999 run: its type is number
9999 mem: location 1032 is 3
9999 mem: storing 3 in location 1145
 102 run: column:address:number <- get-address x:address:screen/deref, cursor-column:offset
9999 mem: location 1144 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1144 is 1031
9999 run: address to copy is 1034
9999 mem: storing 1034 in location 1146
 102 run: original-column:number <- copy column:address:number/deref
9999 mem: location 1146 is 1034
9999 mem: location 1034 is 0
9999 mem: storing 0 in location 1147
 102 run: right:number <- subtract width:number, 1:literal
9999 mem: location 1145 is 3
9999 mem: storing 2 in location 1148
 102 run: done?:boolean <- greater-or-equal column:address:number/deref, right:number
9999 mem: location 1146 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1148 is 2
9999 mem: storing 0 in location 1149
 102 run: break-if done?:boolean, 
9999 mem: location 1149 is 0
9999 run: jump-if fell through
 102 run: print-character x:address:screen, [ ]
9999 mem: location 1144 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1173
 103 run: x:address:screen <- next-ingredient 
9999 mem: storing 1031 in location 1175
 103 run: c:character <- next-ingredient 
9999 mem: storing 0 in location 1176
 103 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1177
9999 mem: storing 0 in location 1178
 103 run: break-if color-found?:boolean, 
9999 mem: location 1178 is 0
9999 run: jump-if fell through
 103 run: color:number <- copy 7:literal/white
9999 mem: storing 7 in location 1177
 103 run: break-unless x:address:screen, 
9999 mem: location 1175 is 1031
9999 run: jump-unless fell through
 103 run: row:address:number <- get-address x:address:screen/deref, cursor-row:offset
9999 mem: location 1175 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1175 is 1031
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1179
 103 run: column:address:number <- get-address x:address:screen/deref, cursor-column:offset
9999 mem: location 1175 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1175 is 1031
9999 run: address to copy is 1034
9999 mem: storing 1034 in location 1180
 103 run: width:number <- get x:address:screen/deref, num-columns:offset
9999 mem: location 1175 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1175 is 1031
9999 run: address to copy is 1032
9999 run: its type is number
9999 mem: location 1032 is 3
9999 mem: storing 3 in location 1181
 103 run: height:number <- get x:address:screen/deref, num-rows:offset
9999 mem: location 1175 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1175 is 1031
9999 run: address to copy is 1031
9999 run: its type is number
9999 mem: location 1031 is 2
9999 mem: storing 2 in location 1182
 103 run: newline?:boolean <- equal c:character, 10:literal/newline
9999 mem: location 1176 is 0
9999 mem: storing 0 in location 1183
 103 run: break-unless newline?:boolean, 
9999 mem: location 1183 is 0
9999 run: jumping to instruction 25
 103 run: index:number <- multiply row:address:number/deref, width:number
9999 mem: location 1179 is 1033
9999 mem: location 1033 is 0
9999 mem: location 1181 is 3
9999 mem: storing 0 in location 1186
 103 run: index:number <- add index:number, column:address:number/deref
9999 mem: location 1186 is 0
9999 mem: location 1180 is 1034
9999 mem: location 1034 is 0
9999 mem: storing 0 in location 1186
 103 run: buf:address:array:screen-cell <- get x:address:screen/deref, data:offset
9999 mem: location 1175 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1175 is 1031
9999 run: address to copy is 1035
9999 run: its type is address
9999 mem: location 1035 is 1036
9999 mem: storing 1036 in location 1187
 103 run: backspace?:boolean <- equal c:character, 8:literal
9999 mem: location 1176 is 0
9999 mem: storing 0 in location 1188
 103 run: break-unless backspace?:boolean, 
9999 mem: location 1188 is 0
9999 run: jumping to instruction 44
 103 run: cursor:address:screen-cell <- index-address buf:address:array:screen-cell/deref, index:number
9999 mem: location 1187 is 1036
9999 mem: location 1036 is 6
9999 mem: location 1037 is 97
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1045 is 0
9999 mem: location 1046 is 7
9999 mem: location 1047 is 0
9999 mem: location 1048 is 7
9999 mem: location 1186 is 0
9999 mem: location 1187 is 1036
9999 mem: location 1186 is 0
9999 mem: storing 1037 in location 1190
 103 run: cursor-contents:address:character <- get-address cursor:address:screen-cell/deref, contents:offset
9999 mem: location 1190 is 1037
9999 mem: location 1037 is 97
9999 mem: location 1038 is 7
9999 mem: location 1190 is 1037
9999 run: address to copy is 1037
9999 mem: storing 1037 in location 1191
 103 run: cursor-color:address:number <- get-address cursor:address:screen-cell/deref, color:offset
9999 mem: location 1190 is 1037
9999 mem: location 1037 is 97
9999 mem: location 1038 is 7
9999 mem: location 1190 is 1037
9999 run: address to copy is 1038
9999 mem: storing 1038 in location 1192
 103 run: cursor-contents:address:character/deref <- copy c:character
9999 mem: location 1176 is 0
9999 mem: location 1191 is 1037
9999 mem: storing 0 in location 1037
 103 run: cursor-color:address:number/deref <- copy color:number
9999 mem: location 1177 is 7
9999 mem: location 1192 is 1038
9999 mem: storing 7 in location 1038
 103 run: right:number <- subtract width:number, 1:literal
9999 mem: location 1181 is 3
9999 mem: storing 2 in location 1193
 103 run: at-right?:boolean <- greater-or-equal column:address:number/deref, right:number
9999 mem: location 1180 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1193 is 2
9999 mem: storing 0 in location 1194
 103 run: break-if at-right?:boolean, 
9999 mem: location 1194 is 0
9999 run: jump-if fell through
 103 run: column:address:number/deref <- add column:address:number/deref, 1:literal
9999 mem: location 1180 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1180 is 1034
9999 mem: storing 1 in location 1034
 103 run: reply x:address:screen/same-as-ingredient:0
9999 mem: location 1175 is 1031
 102 run: loop 
9999 run: jumping to instruction 8
 102 run: right:number <- subtract width:number, 1:literal
9999 mem: location 1145 is 3
9999 mem: storing 2 in location 1148
 102 run: done?:boolean <- greater-or-equal column:address:number/deref, right:number
9999 mem: location 1146 is 1034
9999 mem: location 1034 is 1
9999 mem: location 1148 is 2
9999 mem: storing 0 in location 1149
 102 run: break-if done?:boolean, 
9999 mem: location 1149 is 0
9999 run: jump-if fell through
 102 run: print-character x:address:screen, [ ]
9999 mem: location 1144 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1204
 103 run: x:address:screen <- next-ingredient 
9999 mem: storing 1031 in location 1206
 103 run: c:character <- next-ingredient 
9999 mem: storing 0 in location 1207
 103 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1208
9999 mem: storing 0 in location 1209
 103 run: break-if color-found?:boolean, 
9999 mem: location 1209 is 0
9999 run: jump-if fell through
 103 run: color:number <- copy 7:literal/white
9999 mem: storing 7 in location 1208
 103 run: break-unless x:address:screen, 
9999 mem: location 1206 is 1031
9999 run: jump-unless fell through
 103 run: row:address:number <- get-address x:address:screen/deref, cursor-row:offset
9999 mem: location 1206 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 1
9999 mem: location 1035 is 1036
9999 mem: location 1206 is 1031
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1210
 103 run: column:address:number <- get-address x:address:screen/deref, cursor-column:offset
9999 mem: location 1206 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 1
9999 mem: location 1035 is 1036
9999 mem: location 1206 is 1031
9999 run: address to copy is 1034
9999 mem: storing 1034 in location 1211
 103 run: width:number <- get x:address:screen/deref, num-columns:offset
9999 mem: location 1206 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 1
9999 mem: location 1035 is 1036
9999 mem: location 1206 is 1031
9999 run: address to copy is 1032
9999 run: its type is number
9999 mem: location 1032 is 3
9999 mem: storing 3 in location 1212
 103 run: height:number <- get x:address:screen/deref, num-rows:offset
9999 mem: location 1206 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 1
9999 mem: location 1035 is 1036
9999 mem: location 1206 is 1031
9999 run: address to copy is 1031
9999 run: its type is number
9999 mem: location 1031 is 2
9999 mem: storing 2 in location 1213
 103 run: newline?:boolean <- equal c:character, 10:literal/newline
9999 mem: location 1207 is 0
9999 mem: storing 0 in location 1214
 103 run: break-unless newline?:boolean, 
9999 mem: location 1214 is 0
9999 run: jumping to instruction 25
 103 run: index:number <- multiply row:address:number/deref, width:number
9999 mem: location 1210 is 1033
9999 mem: location 1033 is 0
9999 mem: location 1212 is 3
9999 mem: storing 0 in location 1217
 103 run: index:number <- add index:number, column:address:number/deref
9999 mem: location 1217 is 0
9999 mem: location 1211 is 1034
9999 mem: location 1034 is 1
9999 mem: storing 1 in location 1217
 103 run: buf:address:array:screen-cell <- get x:address:screen/deref, data:offset
9999 mem: location 1206 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 1
9999 mem: location 1035 is 1036
9999 mem: location 1206 is 1031
9999 run: address to copy is 1035
9999 run: its type is address
9999 mem: location 1035 is 1036
9999 mem: storing 1036 in location 1218
 103 run: backspace?:boolean <- equal c:character, 8:literal
9999 mem: location 1207 is 0
9999 mem: storing 0 in location 1219
 103 run: break-unless backspace?:boolean, 
9999 mem: location 1219 is 0
9999 run: jumping to instruction 44
 103 run: cursor:address:screen-cell <- index-address buf:address:array:screen-cell/deref, index:number
9999 mem: location 1218 is 1036
9999 mem: location 1036 is 6
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1045 is 0
9999 mem: location 1046 is 7
9999 mem: location 1047 is 0
9999 mem: location 1048 is 7
9999 mem: location 1217 is 1
9999 mem: location 1218 is 1036
9999 mem: location 1217 is 1
9999 mem: storing 1039 in location 1221
 103 run: cursor-contents:address:character <- get-address cursor:address:screen-cell/deref, contents:offset
9999 mem: location 1221 is 1039
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1221 is 1039
9999 run: address to copy is 1039
9999 mem: storing 1039 in location 1222
 103 run: cursor-color:address:number <- get-address cursor:address:screen-cell/deref, color:offset
9999 mem: location 1221 is 1039
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1221 is 1039
9999 run: address to copy is 1040
9999 mem: storing 1040 in location 1223
 103 run: cursor-contents:address:character/deref <- copy c:character
9999 mem: location 1207 is 0
9999 mem: location 1222 is 1039
9999 mem: storing 0 in location 1039
 103 run: cursor-color:address:number/deref <- copy color:number
9999 mem: location 1208 is 7
9999 mem: location 1223 is 1040
9999 mem: storing 7 in location 1040
 103 run: right:number <- subtract width:number, 1:literal
9999 mem: location 1212 is 3
9999 mem: storing 2 in location 1224
 103 run: at-right?:boolean <- greater-or-equal column:address:number/deref, right:number
9999 mem: location 1211 is 1034
9999 mem: location 1034 is 1
9999 mem: location 1224 is 2
9999 mem: storing 0 in location 1225
 103 run: break-if at-right?:boolean, 
9999 mem: location 1225 is 0
9999 run: jump-if fell through
 103 run: column:address:number/deref <- add column:address:number/deref, 1:literal
9999 mem: location 1211 is 1034
9999 mem: location 1034 is 1
9999 mem: location 1211 is 1034
9999 mem: storing 2 in location 1034
 103 run: reply x:address:screen/same-as-ingredient:0
9999 mem: location 1206 is 1031
 102 run: loop 
9999 run: jumping to instruction 8
 102 run: right:number <- subtract width:number, 1:literal
9999 mem: location 1145 is 3
9999 mem: storing 2 in location 1148
 102 run: done?:boolean <- greater-or-equal column:address:number/deref, right:number
9999 mem: location 1146 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1148 is 2
9999 mem: storing 1 in location 1149
 102 run: break-if done?:boolean, 
9999 mem: location 1149 is 1
9999 run: jumping to instruction 13
 102 run: column:address:number/deref <- copy original-column:number
9999 mem: location 1147 is 0
9999 mem: location 1146 is 1034
9999 mem: storing 0 in location 1034
 102 run: reply x:address:screen/same-as-ingredient:0
9999 mem: location 1144 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 1
 101 run: 2:address:array:screen-cell <- get 1:address:screen/deref, data:offset
9999 mem: location 1 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 1036
9999 mem: location 1 is 1031
9999 run: address to copy is 1035
9999 run: its type is address
9999 mem: location 1035 is 1036
9999 mem: storing 1036 in location 2
 101 run: 3:array:screen-cell <- copy 2:address:array:screen-cell/deref
9999 mem: location 2 is 1036
9999 mem: location 1036 is 6
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1045 is 0
9999 mem: location 1046 is 7
9999 mem: location 1047 is 0
9999 mem: location 1048 is 7
9999 mem: storing 6 in location 3
9999 mem: storing 0 in location 4
9999 mem: storing 7 in location 5
9999 mem: storing 0 in location 6
9999 mem: storing 7 in location 7
9999 mem: storing 0 in location 8
9999 mem: storing 7 in location 9
9999 mem: storing 0 in location 10
9999 mem: storing 7 in location 11
9999 mem: storing 0 in location 12
9999 mem: storing 7 in location 13
9999 mem: storing 0 in location 14
9999 mem: storing 7 in location 15
 100 run: memory-should-contain [
    3 <- 6  # width*height
    4 <- 0
    5 <- 7
    6 <- 0
    7 <- 7
    8 <- 0
    9 <- 7
    10 <- 0
    11 <- 7
    12 <- 0
    13 <- 7
    14 <- 0
    15 <- 7
  ]
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
9999 run: checking location 14
9999 run: checking location 15
