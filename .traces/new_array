9991 parse: --- defining main
9993 parse: instruction: new
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"number": "type"}
9993 parse:   ingredient: {"5": "literal"}
9993 parse:   product: {"1": <"address" : <"shared" : <"array" : <"number" : <>>>>>, "raw": <>}
9992 load: after rewriting: 1:address:shared:array:number/raw <- new number:type, 5
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"number": "type"}
9993 parse:   product: {"2": <"address" : <"shared" : <"number" : <>>>>, "raw": <>}
9992 load: after rewriting: 2:address:shared:number/raw <- new number:type
9993 parse: instruction: subtract
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"number" : <>>>>, "raw": <>}
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"array" : <"number" : <>>>>>, "raw": <>}
9993 parse:   product: {"3": "number", "raw": <>}
9992 load: after rewriting: 3:number/raw <- subtract 2:address:shared:number/raw, 1:address:shared:array:number/raw
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: new ...
9992 transform: new ...
9992 transform: subtract ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "number" is 1
9992 new: size of "number" is 1
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: 1:address:shared:array:number/raw <- new number:type, 5
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1000
9999 mem: storing 5 in location 1001
9999 mem: storing 1000 in location 1
9999 mem: incrementing refcount of 1000: 0 -> 1
 102 run: 2:address:shared:number/raw <- new number:type
9999 mem: allocating size 2
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 2
9999 mem: incrementing refcount of 1007: 0 -> 1
 102 run: 3:number/raw <- subtract 2:address:shared:number/raw, 1:address:shared:array:number/raw
9999 mem: location 2 is 1007
9999 mem: location 1 is 1000
9999 mem: storing 7 in location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
