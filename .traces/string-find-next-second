schedule: main
run: main 0: (((1 string-address)) <- ((new)) ab/c/)
run: main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: main 1: (((2 integer)) <- ((find-next)) ((1 string-address)) ((/ literal)) ((3 literal)))
mem: ((1 string-address)) => 1000
run: find-next/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 3)
run: find-next/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 3)
run: find-next/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 3)
run: find-next/main 2: 3 => ((3 integer))
mem: ((3 integer)): 3 <= 3
run: find-next/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 5
run: find-next/main 3: 5 => ((4 integer))
mem: ((4 integer)): 4 <= 5
run: find-next/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 5
run: find-next/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((1000 string))
mem: ((1000 integer)) => 5
mem: ((1004 byte) (raw)) => c
run: find-next/main 6: #\c => ((6 byte))
mem: ((6 byte)): 6 <= #\c
run: find-next/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => c
mem: ((2 character)) => /
run: find-next/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 3
run: find-next/main 9: 4 => ((3 integer))
mem: ((3 integer)): 3 <= 4
run: find-next/main 10: (((jump)) ((-7 offset)))
run: find-next/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 4
mem: ((4 integer)) => 5
run: find-next/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 4
array-len: ((1000 string))
mem: ((1000 integer)) => 5
mem: ((1005 byte) (raw)) => /
run: find-next/main 6: #\/ => ((6 byte))
mem: ((6 byte)): 6 <= #\/
run: find-next/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/main 7: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: find-next/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 4
run: main 1: 4 => ((2 integer))
mem: ((2 integer)): 2 <= 4
schedule: done with routine 
