schedule: main
run: 1 main 0: (((1 string-address)) <- ((new)) ab/c/)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: 2 main 1: (((2 integer)) <- ((find-next)) ((1 string-address)) ((/ literal)) ((3 literal)))
m: ((1 string-address))
sizeof: ((1 string-address))
run: 3 find-next 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 3)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: 4 find-next 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 3)
run: #\/ => ((2 character))
setm: ((2 character)) <= #\/
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 2 to #\/
run: 5 find-next 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 3)
run: 3 => ((3 integer))
setm: ((3 integer)) <= 3
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 3
run: 6 find-next 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer))
sizeof: ((1000 integer))
run: 5 => ((4 integer))
setm: ((4 integer)) <= 5
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 4 to 5
run: 7 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: 8 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
run: 9 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1004 byte) (raw))
sizeof: ((1004 byte) (raw))
run: #\c => ((6 byte))
setm: ((6 byte)) <= #\c
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to #\c
run: 10 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: nil => ((7 boolean))
setm: ((7 boolean)) <= nil
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to nil
run: 11 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
run: 12 find-next 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
m: ((3 integer))
sizeof: ((3 integer))
run: 4 => ((3 integer))
setm: ((3 integer)) <= 4
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 4
run: 13 find-next 10: (((jump)) ((-7 offset)))
run: 14 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: 15 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
run: 16 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1005 byte) (raw))
sizeof: ((1005 byte) (raw))
run: #\/ => ((6 byte))
setm: ((6 byte)) <= #\/
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to #\/
run: 17 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: t => ((7 boolean))
setm: ((7 boolean)) <= t
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to t
run: 18 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
run: 19 find-next 11: (((reply)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
reply: (((3 integer))) (((2 integer)))
reply: 4 => ((2 integer))
setm: ((2 integer)) <= 4
setm: size of ((2 integer)) is 1
setm: ((2 integer)): setting 2 to 4
schedule: done with routine 
