9991 parse: --- defining main
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"x": <>}
9993 parse:   product: {"y": "number"}
9992 load: after rewriting: y:number <- foo x
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:number
9999 parse: header product: b:number
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: reply
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"34": "literal"}
9992 load: after rewriting: reply 34
9999 parse: recipe foo has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:boolean
9999 parse: header product: b:number
9991 parse: --- defining foo_2
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: reply
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"35": "literal"}
9992 load: after rewriting: reply 35
9999 parse: recipe foo_2 has a header
9990 transform: === transform_all()
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- checking reply instructions against header for foo_2
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- fill in reply ingredients from header for recipe foo_2
9991 transform: --- deduce types for recipe main
9992 transform: y => number
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: a => number
9991 transform: --- deduce types for recipe foo_2
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: a => boolean
9991 transform: --- deduce types from header for foo
9993 transform: type of a is number
9993 transform: type of b is number
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: a:number <- next-ingredient-without-typechecking 
9993 transform:   product: a: number -- {"a": "number"}
9992 transform: instruction: reply 34
9991 transform: --- deduce types from header for foo_2
9993 transform: type of a is boolean
9993 transform: type of b is number
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: a:boolean <- next-ingredient-without-typechecking 
9993 transform:   product: a: boolean -- {"a": "boolean"}
9992 transform: instruction: reply 35
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- collect surrounding spaces for recipe foo_2
9991 transform: --- transform names for recipe main
   0 error: main: missing type for x in 'y:number <- foo x'

9993 name: assign y 1
9991 transform: --- transform names for recipe foo
9993 name: assign a 1
9991 transform: --- transform names for recipe foo_2
9993 name: assign a 1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: score for variant 0: -1
9992 transform: score for variant 1: -1
9992 transform: score for variant 2: -1
9992 transform: score for variant 3: -1
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9992 transform: score for variant 7: -1
9992 transform: score for variant 8: -1
9992 transform: score for variant 9: -1
9992 transform: score for variant 10: -1
9992 transform: score for variant 11: -1
9992 transform: score for variant 12: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 13: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 14: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 13
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 14
9993 transform: no type ingredients
9992 transform: final score: -1
   0 error: main: failed to find a matching call for 'y:number <- foo x'

9991 transform: --- resolve ambiguous calls for recipe foo
9991 transform: --- resolve ambiguous calls for recipe foo_2
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- compute instruction operations for recipe foo_2
9991 transform: --- transform braces for recipe main
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: reply ...
9991 transform: --- transform braces for recipe foo_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: reply ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- perform checks for recipe foo_2
9991 transform: --- type-check calls inside recipe main
   0 error: main: ingredient 0 has the wrong type at 'y:number <- foo x'

9991 transform: --- type-check calls inside recipe foo
9991 transform: --- type-check calls inside recipe foo_2
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe foo_2
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- checking reply instructions against header for foo_2
9991 transform: --- parsing any uninitialized reagents as integers
