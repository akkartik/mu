schedule: main
run: -- nil
run: 1 main 0: ((1 integer) <- copy (4 literal))
run: 4 => (1 integer)
setm: (1 integer) <= 4
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
setm: size of (1 integer) is 1
setm: (1 integer): setting 1 to 4
run: -- ((1 4))
run: 2 main 1: ((2 integer) <- copy (1 literal))
run: 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
setm: size of (2 integer) is 1
setm: (2 integer): setting 2 to 1
run: -- ((1 4) (2 1))
run: 3 main 2: ((2 integer) <- add (2 integer) (2 integer))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
add: 1 1
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
run: 2 => (2 integer)
setm: (2 integer) <= 2
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
setm: size of (2 integer) is 1
setm: (2 integer): setting 2 to 2
run: -- ((1 4) (2 2))
run: 4 main 3: ((3 boolean) <- neq (1 integer) (2 integer))
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
neq: 4 2
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
run: t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 3 to t
run: -- ((1 4) (2 2) (3 t))
run: 5 main 4: (jump-if (3 boolean) (-3 offset))
m: (3 boolean)
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
jump: checking that t is t
jump: jumping to 2
run: -- ((1 4) (2 2) (3 t))
run: 6 main 2: ((2 integer) <- add (2 integer) (2 integer))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
add: 2 2
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
run: 4 => (2 integer)
setm: (2 integer) <= 4
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
setm: size of (2 integer) is 1
setm: (2 integer): setting 2 to 4
run: -- ((1 4) (2 4) (3 t))
run: 7 main 3: ((3 boolean) <- neq (1 integer) (2 integer))
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
neq: 4 4
m: (1 integer)
sz: (1 integer)
addr: (1 integer)
addr: initial result: 1
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
run: nil => (3 boolean)
setm: (3 boolean) <= nil
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 3 to nil
run: -- ((1 4) (2 4))
run: 8 main 4: (jump-if (3 boolean) (-3 offset))
m: (3 boolean)
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
jump: checking that nil is t
run: -- ((1 4) (2 4))
run: 9 main 5: ((4 integer) <- copy (34 literal))
run: 34 => (4 integer)
setm: (4 integer) <= 34
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
setm: size of (4 integer) is 1
setm: (4 integer): setting 4 to 34
run: -- ((1 4) (2 4) (4 34))
run: 10 main 6: (reply)
schedule: done with routine
