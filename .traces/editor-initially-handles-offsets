9999 parse: instruction: assume-screen
9999 parse:   ingredient: {"5": "literal", "width": <>}
9999 parse:   ingredient: {"5": "literal", "height": <>}
9999 parse: instruction: run
9999 parse:   ingredient: {"\n    s:address:array:character <- new [abc]\n    new-editor s:address:array:character, screen:address, 1/left, 5/right\n  ": "literal-string"}
9999 parse: instruction: screen-should-contain
9999 parse:   ingredient: {"\n    .     .\n    . abc .\n    .     .\n  ": "literal-string"}
9999 after-brace: recipe scenario-editor-initially-handles-offsets
9999 after-brace: new-fake-screen ...
9999 after-brace: run ...
9999 after-brace: screen-should-contain ...
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9999 schedule: scenario-editor-initially-handles-offsets
 102 run: screen:address <- new-fake-screen 5/width, 5/height
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1000
 103 run: result:address:screen <- new screen:type
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1002
 103 run: width:address:number <- get-address *result, num-columns:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1010
9999 mem: storing 1010 in location 1003
 103 run: *width <- next-ingredient 
9999 mem: location 1003 is 1010
9999 mem: storing 5 in location 1010
 103 run: height:address:number <- get-address *result, num-rows:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 0
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1004
 103 run: *height <- next-ingredient 
9999 mem: location 1004 is 1009
9999 mem: storing 5 in location 1009
 103 run: row:address:number <- get-address *result, cursor-row:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 103 run: *row <- copy 0
9999 mem: location 1005 is 1011
9999 mem: storing 0 in location 1011
 103 run: column:address:number <- get-address *result, cursor-column:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 103 run: *column <- copy 0
9999 mem: location 1006 is 1012
9999 mem: storing 0 in location 1012
 103 run: bufsize:number <- multiply *width, *height
9999 mem: location 1003 is 1010
9999 mem: location 1010 is 5
9999 mem: location 1004 is 1009
9999 mem: location 1009 is 5
9999 mem: storing 25 in location 1007
 103 run: buf:address:address:array:screen-cell <- get-address *result, data:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1008
 103 run: *buf <- new screen-cell:type, bufsize
9999 mem: location 1007 is 25
9999 mem: array size is 25
9999 mem: new alloc: 1014
9999 mem: location 1008 is 1013
9999 mem: storing 1014 in location 1013
 103 run: clear-screen result
9999 mem: location 1002 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1065
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1067
 104 run: break-unless sc, 
9999 mem: location 1067 is 1009
9999 run: jump-unless fell through
 104 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1067 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1067 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1068
 104 run: max:number <- length *buf
9999 mem: location 1068 is 1014
9999 mem: storing 25 in location 1069
 104 run: i:number <- copy 0
9999 mem: storing 0 in location 1070
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 0
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 0
9999 mem: storing 1015 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1072 is 1015
9999 run: address to copy is 1015
9999 mem: storing 1015 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1015
9999 mem: storing 0 in location 1015
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1072 is 1015
9999 run: address to copy is 1016
9999 mem: storing 1016 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1016
9999 mem: storing 7 in location 1016
 104 run: i <- add i, 1
9999 mem: location 1070 is 0
9999 mem: storing 1 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 1
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 1
9999 mem: storing 1017 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1017
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1072 is 1017
9999 run: address to copy is 1017
9999 mem: storing 1017 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1017
9999 mem: storing 0 in location 1017
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1017
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1072 is 1017
9999 run: address to copy is 1018
9999 mem: storing 1018 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1018
9999 mem: storing 7 in location 1018
 104 run: i <- add i, 1
9999 mem: location 1070 is 1
9999 mem: storing 2 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 2
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 2
9999 mem: storing 1019 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1019
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1072 is 1019
9999 run: address to copy is 1019
9999 mem: storing 1019 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1019
9999 mem: storing 0 in location 1019
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1019
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1072 is 1019
9999 run: address to copy is 1020
9999 mem: storing 1020 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1020
9999 mem: storing 7 in location 1020
 104 run: i <- add i, 1
9999 mem: location 1070 is 2
9999 mem: storing 3 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 3
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 3
9999 mem: storing 1021 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1021
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1072 is 1021
9999 run: address to copy is 1021
9999 mem: storing 1021 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1021
9999 mem: storing 0 in location 1021
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1021
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1072 is 1021
9999 run: address to copy is 1022
9999 mem: storing 1022 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1022
9999 mem: storing 7 in location 1022
 104 run: i <- add i, 1
9999 mem: location 1070 is 3
9999 mem: storing 4 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 4
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 4
9999 mem: storing 1023 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1072 is 1023
9999 run: address to copy is 1023
9999 mem: storing 1023 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1023
9999 mem: storing 0 in location 1023
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1072 is 1023
9999 run: address to copy is 1024
9999 mem: storing 1024 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1024
9999 mem: storing 7 in location 1024
 104 run: i <- add i, 1
9999 mem: location 1070 is 4
9999 mem: storing 5 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 5
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 5
9999 mem: storing 1025 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1072 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1025
9999 mem: storing 0 in location 1025
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1072 is 1025
9999 run: address to copy is 1026
9999 mem: storing 1026 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1026
9999 mem: storing 7 in location 1026
 104 run: i <- add i, 1
9999 mem: location 1070 is 5
9999 mem: storing 6 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 6
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 6
9999 mem: storing 1027 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1027
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1072 is 1027
9999 run: address to copy is 1027
9999 mem: storing 1027 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1027
9999 mem: storing 0 in location 1027
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1027
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1072 is 1027
9999 run: address to copy is 1028
9999 mem: storing 1028 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1028
9999 mem: storing 7 in location 1028
 104 run: i <- add i, 1
9999 mem: location 1070 is 6
9999 mem: storing 7 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 7
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 7
9999 mem: storing 1029 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1072 is 1029
9999 run: address to copy is 1029
9999 mem: storing 1029 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1029
9999 mem: storing 0 in location 1029
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1072 is 1029
9999 run: address to copy is 1030
9999 mem: storing 1030 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1030
9999 mem: storing 7 in location 1030
 104 run: i <- add i, 1
9999 mem: location 1070 is 7
9999 mem: storing 8 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 8
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 8
9999 mem: storing 1031 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1072 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1031
9999 mem: storing 0 in location 1031
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1072 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1032
9999 mem: storing 7 in location 1032
 104 run: i <- add i, 1
9999 mem: location 1070 is 8
9999 mem: storing 9 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 9
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 9
9999 mem: storing 1033 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1033
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1072 is 1033
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1033
9999 mem: storing 0 in location 1033
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1033
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1072 is 1033
9999 run: address to copy is 1034
9999 mem: storing 1034 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1034
9999 mem: storing 7 in location 1034
 104 run: i <- add i, 1
9999 mem: location 1070 is 9
9999 mem: storing 10 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 10
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 10
9999 mem: storing 1035 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1035
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1072 is 1035
9999 run: address to copy is 1035
9999 mem: storing 1035 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1035
9999 mem: storing 0 in location 1035
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1035
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1072 is 1035
9999 run: address to copy is 1036
9999 mem: storing 1036 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1036
9999 mem: storing 7 in location 1036
 104 run: i <- add i, 1
9999 mem: location 1070 is 10
9999 mem: storing 11 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 11
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 11
9999 mem: storing 1037 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1037
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1072 is 1037
9999 run: address to copy is 1037
9999 mem: storing 1037 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1037
9999 mem: storing 0 in location 1037
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1037
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1072 is 1037
9999 run: address to copy is 1038
9999 mem: storing 1038 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1038
9999 mem: storing 7 in location 1038
 104 run: i <- add i, 1
9999 mem: location 1070 is 11
9999 mem: storing 12 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 12
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 12
9999 mem: storing 1039 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1039
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1072 is 1039
9999 run: address to copy is 1039
9999 mem: storing 1039 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1039
9999 mem: storing 0 in location 1039
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1039
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1072 is 1039
9999 run: address to copy is 1040
9999 mem: storing 1040 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1040
9999 mem: storing 7 in location 1040
 104 run: i <- add i, 1
9999 mem: location 1070 is 12
9999 mem: storing 13 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 13
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 13
9999 mem: storing 1041 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1041
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1072 is 1041
9999 run: address to copy is 1041
9999 mem: storing 1041 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1041
9999 mem: storing 0 in location 1041
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1041
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1072 is 1041
9999 run: address to copy is 1042
9999 mem: storing 1042 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1042
9999 mem: storing 7 in location 1042
 104 run: i <- add i, 1
9999 mem: location 1070 is 13
9999 mem: storing 14 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 14
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 14
9999 mem: storing 1043 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1043
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1072 is 1043
9999 run: address to copy is 1043
9999 mem: storing 1043 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1043
9999 mem: storing 0 in location 1043
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1043
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1072 is 1043
9999 run: address to copy is 1044
9999 mem: storing 1044 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1044
9999 mem: storing 7 in location 1044
 104 run: i <- add i, 1
9999 mem: location 1070 is 14
9999 mem: storing 15 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 15
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 15
9999 mem: storing 1045 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1045
9999 mem: location 1045 is 0
9999 mem: location 1046 is 0
9999 mem: location 1072 is 1045
9999 run: address to copy is 1045
9999 mem: storing 1045 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1045
9999 mem: storing 0 in location 1045
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1045
9999 mem: location 1045 is 0
9999 mem: location 1046 is 0
9999 mem: location 1072 is 1045
9999 run: address to copy is 1046
9999 mem: storing 1046 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1046
9999 mem: storing 7 in location 1046
 104 run: i <- add i, 1
9999 mem: location 1070 is 15
9999 mem: storing 16 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 16
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 16
9999 mem: storing 1047 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1047
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1072 is 1047
9999 run: address to copy is 1047
9999 mem: storing 1047 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1047
9999 mem: storing 0 in location 1047
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1047
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1072 is 1047
9999 run: address to copy is 1048
9999 mem: storing 1048 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1048
9999 mem: storing 7 in location 1048
 104 run: i <- add i, 1
9999 mem: location 1070 is 16
9999 mem: storing 17 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 17
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 17
9999 mem: storing 1049 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1049
9999 mem: location 1049 is 0
9999 mem: location 1050 is 0
9999 mem: location 1072 is 1049
9999 run: address to copy is 1049
9999 mem: storing 1049 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1049
9999 mem: storing 0 in location 1049
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1049
9999 mem: location 1049 is 0
9999 mem: location 1050 is 0
9999 mem: location 1072 is 1049
9999 run: address to copy is 1050
9999 mem: storing 1050 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1050
9999 mem: storing 7 in location 1050
 104 run: i <- add i, 1
9999 mem: location 1070 is 17
9999 mem: storing 18 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 18
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 18
9999 mem: storing 1051 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1051
9999 mem: location 1051 is 0
9999 mem: location 1052 is 0
9999 mem: location 1072 is 1051
9999 run: address to copy is 1051
9999 mem: storing 1051 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1051
9999 mem: storing 0 in location 1051
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1051
9999 mem: location 1051 is 0
9999 mem: location 1052 is 0
9999 mem: location 1072 is 1051
9999 run: address to copy is 1052
9999 mem: storing 1052 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1052
9999 mem: storing 7 in location 1052
 104 run: i <- add i, 1
9999 mem: location 1070 is 18
9999 mem: storing 19 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 19
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 19
9999 mem: storing 1053 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1053
9999 mem: location 1053 is 0
9999 mem: location 1054 is 0
9999 mem: location 1072 is 1053
9999 run: address to copy is 1053
9999 mem: storing 1053 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1053
9999 mem: storing 0 in location 1053
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1053
9999 mem: location 1053 is 0
9999 mem: location 1054 is 0
9999 mem: location 1072 is 1053
9999 run: address to copy is 1054
9999 mem: storing 1054 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1054
9999 mem: storing 7 in location 1054
 104 run: i <- add i, 1
9999 mem: location 1070 is 19
9999 mem: storing 20 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 20
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 20
9999 mem: storing 1055 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1055
9999 mem: location 1055 is 0
9999 mem: location 1056 is 0
9999 mem: location 1072 is 1055
9999 run: address to copy is 1055
9999 mem: storing 1055 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1055
9999 mem: storing 0 in location 1055
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1055
9999 mem: location 1055 is 0
9999 mem: location 1056 is 0
9999 mem: location 1072 is 1055
9999 run: address to copy is 1056
9999 mem: storing 1056 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1056
9999 mem: storing 7 in location 1056
 104 run: i <- add i, 1
9999 mem: location 1070 is 20
9999 mem: storing 21 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 21
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 21
9999 mem: storing 1057 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1057
9999 mem: location 1057 is 0
9999 mem: location 1058 is 0
9999 mem: location 1072 is 1057
9999 run: address to copy is 1057
9999 mem: storing 1057 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1057
9999 mem: storing 0 in location 1057
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1057
9999 mem: location 1057 is 0
9999 mem: location 1058 is 0
9999 mem: location 1072 is 1057
9999 run: address to copy is 1058
9999 mem: storing 1058 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1058
9999 mem: storing 7 in location 1058
 104 run: i <- add i, 1
9999 mem: location 1070 is 21
9999 mem: storing 22 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 22
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 22
9999 mem: storing 1059 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1059
9999 mem: location 1059 is 0
9999 mem: location 1060 is 0
9999 mem: location 1072 is 1059
9999 run: address to copy is 1059
9999 mem: storing 1059 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1059
9999 mem: storing 0 in location 1059
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1059
9999 mem: location 1059 is 0
9999 mem: location 1060 is 0
9999 mem: location 1072 is 1059
9999 run: address to copy is 1060
9999 mem: storing 1060 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1060
9999 mem: storing 7 in location 1060
 104 run: i <- add i, 1
9999 mem: location 1070 is 22
9999 mem: storing 23 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 23
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 23
9999 mem: storing 1061 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1061
9999 mem: location 1061 is 0
9999 mem: location 1062 is 0
9999 mem: location 1072 is 1061
9999 run: address to copy is 1061
9999 mem: storing 1061 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1061
9999 mem: storing 0 in location 1061
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1061
9999 mem: location 1061 is 0
9999 mem: location 1062 is 0
9999 mem: location 1072 is 1061
9999 run: address to copy is 1062
9999 mem: storing 1062 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1062
9999 mem: storing 7 in location 1062
 104 run: i <- add i, 1
9999 mem: location 1070 is 23
9999 mem: storing 24 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 24
9999 mem: location 1069 is 25
9999 mem: storing 0 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1068 is 1014
9999 mem: location 1070 is 24
9999 mem: storing 1063 in location 1072
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1072 is 1063
9999 mem: location 1063 is 0
9999 mem: location 1064 is 0
9999 mem: location 1072 is 1063
9999 run: address to copy is 1063
9999 mem: storing 1063 in location 1073
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1073 is 1063
9999 mem: storing 0 in location 1063
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1072 is 1063
9999 mem: location 1063 is 0
9999 mem: location 1064 is 0
9999 mem: location 1072 is 1063
9999 run: address to copy is 1064
9999 mem: storing 1064 in location 1074
 104 run: *curr-color <- copy 7/white
9999 mem: location 1074 is 1064
9999 mem: storing 7 in location 1064
 104 run: i <- add i, 1
9999 mem: location 1070 is 24
9999 mem: storing 25 in location 1070
 104 run: loop 
9999 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1070 is 25
9999 mem: location 1069 is 25
9999 mem: storing 1 in location 1071
 104 run: break-if done?, 
9999 mem: location 1071 is 1
9999 run: jumping to instruction 17
 104 run: x:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1067 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1067 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1075
 104 run: *x <- copy 0
9999 mem: location 1075 is 1011
9999 mem: storing 0 in location 1011
 104 run: x <- get-address *sc, cursor-column:offset
9999 mem: location 1067 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1067 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1075
 104 run: *x <- copy 0
9999 mem: location 1075 is 1012
9999 mem: storing 0 in location 1012
 104 run: reply sc/same-as-ingredient:0
9999 mem: location 1067 is 1009
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply result
9999 mem: location 1002 is 1009
9999 trace: reply: decrementing callstack depth from 2
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 900
 102 run: run [
    s:address:array:character <- new [abc]
    new-editor s:address:array:character, screen:address, 1/left, 5/right
  ]
9999 parse: instruction: new
9999 parse:   ingredient: {"abc": "literal-string"}
9999 parse:   product: {"s": <"address" : <"array" : <"character" : <>>>>}
9999 parse: instruction: new-editor
9999 parse:   ingredient: {"s": <"address" : <"array" : <"character" : <>>>>}
9999 parse:   ingredient: {"screen": "address"}
9999 parse:   ingredient: {"1": "literal", "left": <>}
9999 parse:   ingredient: {"5": "literal", "right": <>}
9999 name: assign s 1
9999 after-brace: recipe run1001
9999 after-brace: new ...
9999 after-brace: new-editor ...
9999 trace: run: incrementing callstack depth to 2
 103 run: s:address:array:character <- new [abc]
9999 mem: storing 1076 in location 1
 103 run: new-editor s:address:array:character, screen:address, 1/left, 5/right
9999 mem: location 1 is 1076
9999 mem: location 900 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1080
 104 run: s:address:array:character <- next-ingredient 
9999 mem: storing 1076 in location 1082
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1083
 104 run: left:number <- next-ingredient 
9999 mem: storing 1 in location 1084
 104 run: right:number <- next-ingredient 
9999 mem: storing 5 in location 1085
 104 run: right <- subtract right, 1
9999 mem: location 1085 is 5
9999 mem: storing 4 in location 1085
 104 run: result:address:editor-data <- new editor-data:type
9999 mem: storing 1065 in location 1086
 104 run: x:address:number <- get-address *result, left:offset
9999 mem: location 1086 is 1065
9999 mem: location 1065 is 0
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: location 1068 is 0
9999 mem: location 1069 is 0
9999 mem: location 1070 is 0
9999 mem: location 1071 is 0
9999 mem: location 1072 is 0
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1086 is 1065
9999 run: address to copy is 1069
9999 mem: storing 1069 in location 1087
 104 run: *x <- copy left
9999 mem: location 1084 is 1
9999 mem: location 1087 is 1069
9999 mem: storing 1 in location 1069
 104 run: x <- get-address *result, right:offset
9999 mem: location 1086 is 1065
9999 mem: location 1065 is 0
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: location 1068 is 0
9999 mem: location 1069 is 1
9999 mem: location 1070 is 0
9999 mem: location 1071 is 0
9999 mem: location 1072 is 0
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1086 is 1065
9999 run: address to copy is 1070
9999 mem: storing 1070 in location 1087
 104 run: *x <- copy right
9999 mem: location 1085 is 4
9999 mem: location 1087 is 1070
9999 mem: storing 4 in location 1070
 104 run: x <- get-address *result, cursor-row:offset
9999 mem: location 1086 is 1065
9999 mem: location 1065 is 0
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: location 1068 is 0
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 0
9999 mem: location 1072 is 0
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1086 is 1065
9999 run: address to copy is 1071
9999 mem: storing 1071 in location 1087
 104 run: *x <- copy 1/top
9999 mem: location 1087 is 1071
9999 mem: storing 1 in location 1071
 104 run: x <- get-address *result, cursor-column:offset
9999 mem: location 1086 is 1065
9999 mem: location 1065 is 0
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: location 1068 is 0
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 0
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1086 is 1065
9999 run: address to copy is 1072
9999 mem: storing 1072 in location 1087
 104 run: *x <- copy left
9999 mem: location 1084 is 1
9999 mem: location 1087 is 1072
9999 mem: storing 1 in location 1072
 104 run: init:address:address:duplex-list <- get-address *result, data:offset
9999 mem: location 1086 is 1065
9999 mem: location 1065 is 0
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: location 1068 is 0
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1086 is 1065
9999 run: address to copy is 1065
9999 mem: storing 1065 in location 1088
 104 run: *init <- push-duplex 167/§, 0/tail
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1092
 105 run: x:character <- next-ingredient 
9999 mem: storing 167 in location 1094
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 0 in location 1095
 105 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1100
9999 mem: storing 1100 in location 1096
 105 run: val:address:character <- get-address *result, value:offset
9999 mem: location 1096 is 1100
9999 mem: location 1100 is 0
9999 mem: location 1101 is 0
9999 mem: location 1102 is 0
9999 mem: location 1096 is 1100
9999 run: address to copy is 1100
9999 mem: storing 1100 in location 1097
 105 run: *val <- copy x
9999 mem: location 1094 is 167
9999 mem: location 1097 is 1100
9999 mem: storing 167 in location 1100
 105 run: next:address:address:duplex-list <- get-address *result, next:offset
9999 mem: location 1096 is 1100
9999 mem: location 1100 is 167
9999 mem: location 1101 is 0
9999 mem: location 1102 is 0
9999 mem: location 1096 is 1100
9999 run: address to copy is 1101
9999 mem: storing 1101 in location 1098
 105 run: *next <- copy in
9999 mem: location 1095 is 0
9999 mem: location 1098 is 1101
9999 mem: storing 0 in location 1101
 105 run: jump-if in, 1:offset
9999 mem: location 1095 is 0
9999 run: jump-if fell through
 105 run: reply result
9999 mem: location 1096 is 1100
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 1100
9999 mem: location 1088 is 1065
9999 mem: storing 1100 in location 1065
 104 run: top-of-screen:address:address:duplex-list <- get-address *result, top-of-screen:offset
9999 mem: location 1086 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: location 1068 is 0
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1086 is 1065
9999 run: address to copy is 1066
9999 mem: storing 1066 in location 1089
 104 run: *top-of-screen <- copy *init
9999 mem: location 1088 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1089 is 1066
9999 mem: storing 1100 in location 1066
 104 run: y:address:address:duplex-list <- get-address *result, before-cursor:offset
9999 mem: location 1086 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1066 is 1100
9999 mem: location 1067 is 0
9999 mem: location 1068 is 0
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1086 is 1065
9999 run: address to copy is 1068
9999 mem: storing 1068 in location 1090
 104 run: *y <- copy *init
9999 mem: location 1088 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1090 is 1068
9999 mem: storing 1100 in location 1068
 104 run: result <- insert-text result, s
9999 mem: location 1086 is 1065
9999 mem: location 1082 is 1076
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
 105 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1065 in location 1002
 105 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1076 in location 1003
 105 run: jump-if text, 1:offset
9999 mem: location 1003 is 1076
9999 run: jumping to instruction 5
 105 run: len:number <- length *text
9999 mem: location 1003 is 1076
9999 mem: storing 3 in location 1004
 105 run: jump-if len, 1:offset
9999 mem: location 1004 is 3
9999 run: jumping to instruction 8
 105 run: idx:number <- copy 0
9999 mem: storing 0 in location 1005
 105 run: curr:address:duplex-list <- get *editor, data:offset
9999 mem: location 1002 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1066 is 1100
9999 mem: location 1067 is 0
9999 mem: location 1068 is 1100
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1002 is 1065
9999 run: address to copy is 1065
9999 run: its type is address
9999 mem: location 1065 is 1100
9999 mem: storing 1100 in location 1006
 105 run: done?:boolean <- greater-or-equal idx, len
9999 mem: location 1005 is 0
9999 mem: location 1004 is 3
9999 mem: storing 0 in location 1007
 105 run: break-if done?, 
9999 mem: location 1007 is 0
9999 run: jump-if fell through
 105 run: c:character <- index *text, idx
9999 mem: location 1003 is 1076
9999 mem: location 1005 is 0
9999 run: address to copy is 1077
9999 run: its type is character
9999 mem: location 1077 is 97
9999 mem: storing 97 in location 1008
 105 run: insert-duplex c, curr
9999 mem: location 1008 is 97
9999 mem: location 1006 is 1100
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 106 run: x:character <- next-ingredient 
9999 mem: storing 97 in location 1094
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1100 in location 1095
 106 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1103
9999 mem: storing 1103 in location 1096
 106 run: val:address:character <- get-address *new-node, value:offset
9999 mem: location 1096 is 1103
9999 mem: location 1103 is 0
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1096 is 1103
9999 run: address to copy is 1103
9999 mem: storing 1103 in location 1097
 106 run: *val <- copy x
9999 mem: location 1094 is 97
9999 mem: location 1097 is 1103
9999 mem: storing 97 in location 1103
 106 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1095 is 1100
9999 mem: location 1100 is 167
9999 mem: location 1101 is 0
9999 mem: location 1102 is 0
9999 mem: location 1095 is 1100
9999 run: address to copy is 1101
9999 run: its type is address
9999 mem: location 1101 is 0
9999 mem: storing 0 in location 1098
 106 run: y:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1095 is 1100
9999 mem: location 1100 is 167
9999 mem: location 1101 is 0
9999 mem: location 1102 is 0
9999 mem: location 1095 is 1100
9999 run: address to copy is 1101
9999 mem: storing 1101 in location 1099
 106 run: *y <- copy new-node
9999 mem: location 1096 is 1103
9999 mem: location 1099 is 1101
9999 mem: storing 1103 in location 1101
 106 run: y <- get-address *new-node, prev:offset
9999 mem: location 1096 is 1103
9999 mem: location 1103 is 97
9999 mem: location 1104 is 0
9999 mem: location 1105 is 0
9999 mem: location 1096 is 1103
9999 run: address to copy is 1105
9999 mem: storing 1105 in location 1099
 106 run: *y <- copy in
9999 mem: location 1095 is 1100
9999 mem: location 1099 is 1105
9999 mem: storing 1100 in location 1105
 106 run: y <- get-address *new-node, next:offset
9999 mem: location 1096 is 1103
9999 mem: location 1103 is 97
9999 mem: location 1104 is 0
9999 mem: location 1105 is 1100
9999 mem: location 1096 is 1103
9999 run: address to copy is 1104
9999 mem: storing 1104 in location 1099
 106 run: *y <- copy next-node
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1104
9999 mem: storing 0 in location 1104
 106 run: jump-if next-node, 1:offset
9999 mem: location 1098 is 0
9999 run: jump-if fell through
 106 run: reply new-node
9999 mem: location 1096 is 1103
9999 trace: reply: decrementing callstack depth from 5
 105 run: curr <- next-duplex curr
9999 mem: location 1006 is 1100
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1106
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1100 in location 1108
 106 run: jump-if in, 1:offset
9999 mem: location 1108 is 1100
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1108 is 1100
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1103
9999 mem: location 1102 is 0
9999 mem: location 1108 is 1100
9999 run: address to copy is 1101
9999 run: its type is address
9999 mem: location 1101 is 1103
9999 mem: storing 1103 in location 1109
 106 run: reply result
9999 mem: location 1109 is 1103
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1103
9999 mem: storing 1103 in location 1006
 105 run: idx <- add idx, 1
9999 mem: location 1005 is 0
9999 mem: storing 1 in location 1005
 105 run: loop 
9999 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal idx, len
9999 mem: location 1005 is 1
9999 mem: location 1004 is 3
9999 mem: storing 0 in location 1007
 105 run: break-if done?, 
9999 mem: location 1007 is 0
9999 run: jump-if fell through
 105 run: c:character <- index *text, idx
9999 mem: location 1003 is 1076
9999 mem: location 1005 is 1
9999 run: address to copy is 1078
9999 run: its type is character
9999 mem: location 1078 is 98
9999 mem: storing 98 in location 1008
 105 run: insert-duplex c, curr
9999 mem: location 1008 is 98
9999 mem: location 1006 is 1103
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 106 run: x:character <- next-ingredient 
9999 mem: storing 98 in location 1094
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1103 in location 1095
 106 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1110
9999 mem: storing 1110 in location 1096
 106 run: val:address:character <- get-address *new-node, value:offset
9999 mem: location 1096 is 1110
9999 mem: location 1110 is 0
9999 mem: location 1111 is 0
9999 mem: location 1112 is 0
9999 mem: location 1096 is 1110
9999 run: address to copy is 1110
9999 mem: storing 1110 in location 1097
 106 run: *val <- copy x
9999 mem: location 1094 is 98
9999 mem: location 1097 is 1110
9999 mem: storing 98 in location 1110
 106 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1095 is 1103
9999 mem: location 1103 is 97
9999 mem: location 1104 is 0
9999 mem: location 1105 is 1100
9999 mem: location 1095 is 1103
9999 run: address to copy is 1104
9999 run: its type is address
9999 mem: location 1104 is 0
9999 mem: storing 0 in location 1098
 106 run: y:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1095 is 1103
9999 mem: location 1103 is 97
9999 mem: location 1104 is 0
9999 mem: location 1105 is 1100
9999 mem: location 1095 is 1103
9999 run: address to copy is 1104
9999 mem: storing 1104 in location 1099
 106 run: *y <- copy new-node
9999 mem: location 1096 is 1110
9999 mem: location 1099 is 1104
9999 mem: storing 1110 in location 1104
 106 run: y <- get-address *new-node, prev:offset
9999 mem: location 1096 is 1110
9999 mem: location 1110 is 98
9999 mem: location 1111 is 0
9999 mem: location 1112 is 0
9999 mem: location 1096 is 1110
9999 run: address to copy is 1112
9999 mem: storing 1112 in location 1099
 106 run: *y <- copy in
9999 mem: location 1095 is 1103
9999 mem: location 1099 is 1112
9999 mem: storing 1103 in location 1112
 106 run: y <- get-address *new-node, next:offset
9999 mem: location 1096 is 1110
9999 mem: location 1110 is 98
9999 mem: location 1111 is 0
9999 mem: location 1112 is 1103
9999 mem: location 1096 is 1110
9999 run: address to copy is 1111
9999 mem: storing 1111 in location 1099
 106 run: *y <- copy next-node
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1111
9999 mem: storing 0 in location 1111
 106 run: jump-if next-node, 1:offset
9999 mem: location 1098 is 0
9999 run: jump-if fell through
 106 run: reply new-node
9999 mem: location 1096 is 1110
9999 trace: reply: decrementing callstack depth from 5
 105 run: curr <- next-duplex curr
9999 mem: location 1006 is 1103
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1103 in location 1108
 106 run: jump-if in, 1:offset
9999 mem: location 1108 is 1103
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1108 is 1103
9999 mem: location 1103 is 97
9999 mem: location 1104 is 1110
9999 mem: location 1105 is 1100
9999 mem: location 1108 is 1103
9999 run: address to copy is 1104
9999 run: its type is address
9999 mem: location 1104 is 1110
9999 mem: storing 1110 in location 1109
 106 run: reply result
9999 mem: location 1109 is 1110
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1110
9999 mem: storing 1110 in location 1006
 105 run: idx <- add idx, 1
9999 mem: location 1005 is 1
9999 mem: storing 2 in location 1005
 105 run: loop 
9999 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal idx, len
9999 mem: location 1005 is 2
9999 mem: location 1004 is 3
9999 mem: storing 0 in location 1007
 105 run: break-if done?, 
9999 mem: location 1007 is 0
9999 run: jump-if fell through
 105 run: c:character <- index *text, idx
9999 mem: location 1003 is 1076
9999 mem: location 1005 is 2
9999 run: address to copy is 1079
9999 run: its type is character
9999 mem: location 1079 is 99
9999 mem: storing 99 in location 1008
 105 run: insert-duplex c, curr
9999 mem: location 1008 is 99
9999 mem: location 1006 is 1110
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 106 run: x:character <- next-ingredient 
9999 mem: storing 99 in location 1094
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1110 in location 1095
 106 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1113
9999 mem: storing 1113 in location 1096
 106 run: val:address:character <- get-address *new-node, value:offset
9999 mem: location 1096 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 0
9999 mem: location 1096 is 1113
9999 run: address to copy is 1113
9999 mem: storing 1113 in location 1097
 106 run: *val <- copy x
9999 mem: location 1094 is 99
9999 mem: location 1097 is 1113
9999 mem: storing 99 in location 1113
 106 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1095 is 1110
9999 mem: location 1110 is 98
9999 mem: location 1111 is 0
9999 mem: location 1112 is 1103
9999 mem: location 1095 is 1110
9999 run: address to copy is 1111
9999 run: its type is address
9999 mem: location 1111 is 0
9999 mem: storing 0 in location 1098
 106 run: y:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1095 is 1110
9999 mem: location 1110 is 98
9999 mem: location 1111 is 0
9999 mem: location 1112 is 1103
9999 mem: location 1095 is 1110
9999 run: address to copy is 1111
9999 mem: storing 1111 in location 1099
 106 run: *y <- copy new-node
9999 mem: location 1096 is 1113
9999 mem: location 1099 is 1111
9999 mem: storing 1113 in location 1111
 106 run: y <- get-address *new-node, prev:offset
9999 mem: location 1096 is 1113
9999 mem: location 1113 is 99
9999 mem: location 1114 is 0
9999 mem: location 1115 is 0
9999 mem: location 1096 is 1113
9999 run: address to copy is 1115
9999 mem: storing 1115 in location 1099
 106 run: *y <- copy in
9999 mem: location 1095 is 1110
9999 mem: location 1099 is 1115
9999 mem: storing 1110 in location 1115
 106 run: y <- get-address *new-node, next:offset
9999 mem: location 1096 is 1113
9999 mem: location 1113 is 99
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1110
9999 mem: location 1096 is 1113
9999 run: address to copy is 1114
9999 mem: storing 1114 in location 1099
 106 run: *y <- copy next-node
9999 mem: location 1098 is 0
9999 mem: location 1099 is 1114
9999 mem: storing 0 in location 1114
 106 run: jump-if next-node, 1:offset
9999 mem: location 1098 is 0
9999 run: jump-if fell through
 106 run: reply new-node
9999 mem: location 1096 is 1113
9999 trace: reply: decrementing callstack depth from 5
 105 run: curr <- next-duplex curr
9999 mem: location 1006 is 1110
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1110 in location 1108
 106 run: jump-if in, 1:offset
9999 mem: location 1108 is 1110
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1108 is 1110
9999 mem: location 1110 is 98
9999 mem: location 1111 is 1113
9999 mem: location 1112 is 1103
9999 mem: location 1108 is 1110
9999 run: address to copy is 1111
9999 run: its type is address
9999 mem: location 1111 is 1113
9999 mem: storing 1113 in location 1109
 106 run: reply result
9999 mem: location 1109 is 1113
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1113
9999 mem: storing 1113 in location 1006
 105 run: idx <- add idx, 1
9999 mem: location 1005 is 2
9999 mem: storing 3 in location 1005
 105 run: loop 
9999 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal idx, len
9999 mem: location 1005 is 3
9999 mem: location 1004 is 3
9999 mem: storing 1 in location 1007
 105 run: break-if done?, 
9999 mem: location 1007 is 1
9999 run: jumping to instruction 18
 105 run: reply editor/same-as-ingredient:0
9999 mem: location 1002 is 1065
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 1065
9999 mem: storing 1065 in location 1086
 104 run: y <- get-address *result, before-cursor:offset
9999 mem: location 1086 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1066 is 1100
9999 mem: location 1067 is 0
9999 mem: location 1068 is 1100
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1086 is 1065
9999 run: address to copy is 1068
9999 mem: storing 1068 in location 1090
 104 run: *y <- copy *init
9999 mem: location 1088 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1090 is 1068
9999 mem: storing 1100 in location 1068
 104 run: _, _, screen, result <- render screen, result
9999 mem: location 1083 is 1009
9999 mem: location 1086 is 1065
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 26
9999 mem: new alloc: 1116
 105 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1118
 105 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1065 in location 1119
 105 run: jump-if editor, 1:offset
9999 mem: location 1119 is 1065
9999 run: jumping to instruction 5
 105 run: left:number <- get *editor, left:offset
9999 mem: location 1119 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1066 is 1100
9999 mem: location 1067 is 0
9999 mem: location 1068 is 1100
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1119 is 1065
9999 run: address to copy is 1069
9999 run: its type is number
9999 mem: location 1069 is 1
9999 mem: storing 1 in location 1120
 105 run: screen-height:number <- screen-height screen
9999 mem: location 1118 is 1009
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1108
 106 run: break-unless sc, 
9999 mem: location 1108 is 1009
9999 run: jump-unless fell through
 106 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1108 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1108 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1109
 106 run: reply height
9999 mem: location 1109 is 5
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1121
 105 run: right:number <- get *editor, right:offset
9999 mem: location 1119 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1066 is 1100
9999 mem: location 1067 is 0
9999 mem: location 1068 is 1100
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1119 is 1065
9999 run: address to copy is 1070
9999 run: its type is number
9999 mem: location 1070 is 4
9999 mem: storing 4 in location 1122
 105 run: curr:address:duplex-list <- get *editor, top-of-screen:offset
9999 mem: location 1119 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1066 is 1100
9999 mem: location 1067 is 0
9999 mem: location 1068 is 1100
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1119 is 1065
9999 run: address to copy is 1066
9999 run: its type is address
9999 mem: location 1066 is 1100
9999 mem: storing 1100 in location 1123
 105 run: prev:address:duplex-list <- copy curr
9999 mem: location 1123 is 1100
9999 mem: storing 1100 in location 1124
 105 run: curr <- next-duplex curr
9999 mem: location 1123 is 1100
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1100 in location 1108
 106 run: jump-if in, 1:offset
9999 mem: location 1108 is 1100
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1108 is 1100
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1103
9999 mem: location 1102 is 0
9999 mem: location 1108 is 1100
9999 run: address to copy is 1101
9999 run: its type is address
9999 mem: location 1101 is 1103
9999 mem: storing 1103 in location 1109
 106 run: reply result
9999 mem: location 1109 is 1103
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1103
9999 mem: storing 1103 in location 1123
 105 run: color:number <- copy 7/white
9999 mem: storing 7 in location 1125
 105 run: row:number <- copy 1/top
9999 mem: storing 1 in location 1126
 105 run: column:number <- copy left
9999 mem: location 1120 is 1
9999 mem: storing 1 in location 1127
 105 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1119 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1066 is 1100
9999 mem: location 1067 is 0
9999 mem: location 1068 is 1100
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1119 is 1065
9999 run: address to copy is 1071
9999 mem: storing 1071 in location 1128
 105 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1119 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1066 is 1100
9999 mem: location 1067 is 0
9999 mem: location 1068 is 1100
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1119 is 1065
9999 run: address to copy is 1072
9999 mem: storing 1072 in location 1129
 105 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1119 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1066 is 1100
9999 mem: location 1067 is 0
9999 mem: location 1068 is 1100
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1119 is 1065
9999 run: address to copy is 1068
9999 mem: storing 1068 in location 1130
 105 run: screen <- move-cursor screen, row, column
9999 mem: location 1118 is 1009
9999 mem: location 1126 is 1
9999 mem: location 1127 is 1
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1143
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1145
 106 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1146
 106 run: new-column:number <- next-ingredient 
9999 mem: storing 1 in location 1147
 106 run: break-unless sc, 
9999 mem: location 1145 is 1009
9999 run: jump-unless fell through
 106 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1145 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1148
 106 run: *row <- copy new-row
9999 mem: location 1146 is 1
9999 mem: location 1148 is 1011
9999 mem: storing 1 in location 1011
 106 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1145 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1145 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1149
 106 run: *column <- copy new-column
9999 mem: location 1147 is 1
9999 mem: location 1149 is 1012
9999 mem: storing 1 in location 1012
 106 run: reply sc/same-as-ingredient:0
9999 mem: location 1145 is 1009
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1118
 105 run: break-unless curr, 
9999 mem: location 1123 is 1103
9999 run: jump-unless fell through
 105 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1126 is 1
9999 mem: location 1121 is 5
9999 mem: storing 0 in location 1131
 105 run: break-if off-screen?, 
9999 mem: location 1131 is 0
9999 run: jump-if fell through
 105 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1126 is 1
9999 mem: location 1128 is 1071
9999 mem: location 1071 is 1
9999 mem: storing 1 in location 1132
 105 run: break-unless at-cursor-row?, 
9999 mem: location 1132 is 1
9999 run: jump-unless fell through
 105 run: at-cursor?:boolean <- equal column, *cursor-column
9999 mem: location 1127 is 1
9999 mem: location 1129 is 1072
9999 mem: location 1072 is 1
9999 mem: storing 1 in location 1133
 105 run: break-unless at-cursor?, 
9999 mem: location 1133 is 1
9999 run: jump-unless fell through
 105 run: *before-cursor <- copy prev
9999 mem: location 1124 is 1100
9999 mem: location 1130 is 1068
9999 mem: storing 1100 in location 1068
 105 run: c:character <- get *curr, value:offset
9999 mem: location 1123 is 1103
9999 mem: location 1103 is 97
9999 mem: location 1104 is 1110
9999 mem: location 1105 is 1100
9999 mem: location 1123 is 1103
9999 run: address to copy is 1103
9999 run: its type is character
9999 mem: location 1103 is 97
9999 mem: storing 97 in location 1134
 105 run: color <- get-color color, c
9999 mem: location 1125 is 7
9999 mem: location 1134 is 97
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1150
 106 run: color:number <- next-ingredient 
9999 mem: storing 7 in location 1152
 106 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1153
 106 run: color-is-white?:boolean <- equal color, 7/white
9999 mem: location 1152 is 7
9999 mem: storing 1 in location 1154
 106 run: break-unless color-is-white?, 
9999 mem: location 1154 is 1
9999 run: jump-unless fell through
 106 run: starting-comment?:boolean <- equal c, 35/#
9999 mem: location 1153 is 97
9999 mem: storing 0 in location 1155
 106 run: break-unless starting-comment?, 
9999 mem: location 1155 is 0
9999 run: jumping to instruction 11
 106 run: color-is-blue?:boolean <- equal color, 12/lightblue
9999 mem: location 1152 is 7
9999 mem: storing 0 in location 1156
 106 run: break-unless color-is-blue?, 
9999 mem: location 1156 is 0
9999 run: jumping to instruction 20
 106 run: break-unless color-is-white?, 
9999 mem: location 1154 is 1
9999 run: jump-unless fell through
 106 run: starting-assignment?:boolean <- equal c, 60/<
9999 mem: location 1153 is 97
9999 mem: storing 0 in location 1158
 106 run: break-unless starting-assignment?, 
9999 mem: location 1158 is 0
9999 run: jumping to instruction 27
 106 run: color-is-red?:boolean <- equal color, 1/red
9999 mem: location 1152 is 7
9999 mem: storing 0 in location 1159
 106 run: break-unless color-is-red?, 
9999 mem: location 1159 is 0
9999 run: jumping to instruction 35
 106 run: reply color
9999 mem: location 1152 is 7
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 7
9999 mem: storing 7 in location 1125
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1134 is 97
9999 mem: storing 0 in location 1135
 105 run: break-unless newline?, 
9999 mem: location 1135 is 0
9999 run: jumping to instruction 52
 105 run: at-right?:boolean <- equal column, right
9999 mem: location 1127 is 1
9999 mem: location 1122 is 4
9999 mem: storing 0 in location 1137
 105 run: break-unless at-right?, 
9999 mem: location 1137 is 0
9999 run: jumping to instruction 61
 105 run: print-character screen, c, color
9999 mem: location 1118 is 1009
9999 mem: location 1134 is 97
9999 mem: location 1125 is 7
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
9999 mem: new alloc: 1161
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1163
 106 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1164
 106 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 7 in location 1165
9999 mem: storing 1 in location 1166
 106 run: break-if color-found?, 
9999 mem: location 1166 is 1
9999 run: jumping to instruction 7
 106 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1167
9999 mem: storing 0 in location 1168
 106 run: break-if bg-color-found?, 
9999 mem: location 1168 is 0
9999 run: jump-if fell through
 106 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1167
 106 run: trace 90, [print-character], c
9999 mem: location 1164 is 97
  90 print-character: 97 
 106 run: break-unless sc, 
9999 mem: location 1163 is 1009
9999 run: jump-unless fell through
 106 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1169
 106 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1170
 106 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1171
 106 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1171 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1172
 106 run: jump-if legal?, 1:offset
9999 mem: location 1172 is 1
9999 run: jumping to instruction 22
 106 run: legal? <- lesser-than *row, height
9999 mem: location 1171 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1170 is 5
9999 mem: storing 1 in location 1172
 106 run: jump-if legal?, 1:offset
9999 mem: location 1172 is 1
9999 run: jumping to instruction 25
 106 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1173
9999 schedule: print-character/render/new-editor/run1001/scenario-editor-initially-handles-offsets
 106 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1172
 106 run: jump-if legal?, 1:offset
9999 mem: location 1172 is 1
9999 run: jumping to instruction 29
 106 run: legal? <- lesser-than *column, width
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1169 is 5
9999 mem: storing 1 in location 1172
 106 run: jump-if legal?, 1:offset
9999 mem: location 1172 is 1
9999 run: jumping to instruction 32
 106 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1164 is 97
9999 mem: storing 0 in location 1174
 106 run: break-unless newline?, 
9999 mem: location 1174 is 0
9999 run: jumping to instruction 43
 106 run: index:number <- multiply *row, width
9999 mem: location 1171 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1169 is 5
9999 mem: storing 5 in location 1177
 106 run: index <- add index, *column
9999 mem: location 1177 is 5
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 6 in location 1177
 106 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1178
 106 run: len:number <- length *buf
9999 mem: location 1178 is 1014
9999 mem: storing 25 in location 1179
 106 run: backspace?:boolean <- equal c, 8
9999 mem: location 1164 is 97
9999 mem: storing 0 in location 1180
 106 run: break-unless backspace?, 
9999 mem: location 1180 is 0
9999 run: jumping to instruction 63
 106 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1178 is 1014
9999 mem: location 1177 is 6
9999 mem: storing 1027 in location 1182
 106 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1182 is 1027
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1182 is 1027
9999 run: address to copy is 1027
9999 mem: storing 1027 in location 1183
 106 run: *cursor-contents <- copy c
9999 mem: location 1164 is 97
9999 mem: location 1183 is 1027
9999 mem: storing 97 in location 1027
 106 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1182 is 1027
9999 mem: location 1027 is 97
9999 mem: location 1028 is 7
9999 mem: location 1182 is 1027
9999 run: address to copy is 1028
9999 mem: storing 1028 in location 1184
 106 run: *cursor-color <- copy color
9999 mem: location 1165 is 7
9999 mem: location 1184 is 1028
9999 mem: storing 7 in location 1028
 106 run: right:number <- subtract width, 1
9999 mem: location 1169 is 5
9999 mem: storing 4 in location 1185
 106 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1185 is 4
9999 mem: storing 0 in location 1186
 106 run: break-if at-right?, 
9999 mem: location 1186 is 0
9999 run: jump-if fell through
 106 run: *column <- add *column, 1
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1173 is 1012
9999 mem: storing 2 in location 1012
 106 run: reply sc/same-as-ingredient:0
9999 mem: location 1163 is 1009
9999 trace: reply: decrementing callstack depth from 5
 105 run: curr <- next-duplex curr
9999 mem: location 1123 is 1103
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1103 in location 1108
 106 run: jump-if in, 1:offset
9999 mem: location 1108 is 1103
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1108 is 1103
9999 mem: location 1103 is 97
9999 mem: location 1104 is 1110
9999 mem: location 1105 is 1100
9999 mem: location 1108 is 1103
9999 run: address to copy is 1104
9999 run: its type is address
9999 mem: location 1104 is 1110
9999 mem: storing 1110 in location 1109
 106 run: reply result
9999 mem: location 1109 is 1110
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1110
9999 mem: storing 1110 in location 1123
 105 run: prev <- next-duplex prev
9999 mem: location 1124 is 1100
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1100 in location 1108
 106 run: jump-if in, 1:offset
9999 mem: location 1108 is 1100
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1108 is 1100
9999 mem: location 1100 is 167
9999 mem: location 1101 is 1103
9999 mem: location 1102 is 0
9999 mem: location 1108 is 1100
9999 run: address to copy is 1101
9999 run: its type is address
9999 mem: location 1101 is 1103
9999 mem: storing 1103 in location 1109
 106 run: reply result
9999 mem: location 1109 is 1103
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1103
9999 mem: storing 1103 in location 1124
 105 run: column <- add column, 1
9999 mem: location 1127 is 1
9999 mem: storing 2 in location 1127
 105 run: loop 
9999 run: jumping to instruction 20
 105 run: break-unless curr, 
9999 mem: location 1123 is 1110
9999 run: jump-unless fell through
 105 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1126 is 1
9999 mem: location 1121 is 5
9999 mem: storing 0 in location 1131
 105 run: break-if off-screen?, 
9999 mem: location 1131 is 0
9999 run: jump-if fell through
 105 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1126 is 1
9999 mem: location 1128 is 1071
9999 mem: location 1071 is 1
9999 mem: storing 1 in location 1132
 105 run: break-unless at-cursor-row?, 
9999 mem: location 1132 is 1
9999 run: jump-unless fell through
 105 run: at-cursor?:boolean <- equal column, *cursor-column
9999 mem: location 1127 is 2
9999 mem: location 1129 is 1072
9999 mem: location 1072 is 1
9999 mem: storing 0 in location 1133
 105 run: break-unless at-cursor?, 
9999 mem: location 1133 is 0
9999 run: jumping to instruction 30
 105 run: c:character <- get *curr, value:offset
9999 mem: location 1123 is 1110
9999 mem: location 1110 is 98
9999 mem: location 1111 is 1113
9999 mem: location 1112 is 1103
9999 mem: location 1123 is 1110
9999 run: address to copy is 1110
9999 run: its type is character
9999 mem: location 1110 is 98
9999 mem: storing 98 in location 1134
 105 run: color <- get-color color, c
9999 mem: location 1125 is 7
9999 mem: location 1134 is 98
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 106 run: color:number <- next-ingredient 
9999 mem: storing 7 in location 1152
 106 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 1153
 106 run: color-is-white?:boolean <- equal color, 7/white
9999 mem: location 1152 is 7
9999 mem: storing 1 in location 1154
 106 run: break-unless color-is-white?, 
9999 mem: location 1154 is 1
9999 run: jump-unless fell through
 106 run: starting-comment?:boolean <- equal c, 35/#
9999 mem: location 1153 is 98
9999 mem: storing 0 in location 1155
 106 run: break-unless starting-comment?, 
9999 mem: location 1155 is 0
9999 run: jumping to instruction 11
 106 run: color-is-blue?:boolean <- equal color, 12/lightblue
9999 mem: location 1152 is 7
9999 mem: storing 0 in location 1156
 106 run: break-unless color-is-blue?, 
9999 mem: location 1156 is 0
9999 run: jumping to instruction 20
 106 run: break-unless color-is-white?, 
9999 mem: location 1154 is 1
9999 run: jump-unless fell through
 106 run: starting-assignment?:boolean <- equal c, 60/<
9999 mem: location 1153 is 98
9999 mem: storing 0 in location 1158
 106 run: break-unless starting-assignment?, 
9999 mem: location 1158 is 0
9999 run: jumping to instruction 27
 106 run: color-is-red?:boolean <- equal color, 1/red
9999 mem: location 1152 is 7
9999 mem: storing 0 in location 1159
 106 run: break-unless color-is-red?, 
9999 mem: location 1159 is 0
9999 run: jumping to instruction 35
 106 run: reply color
9999 mem: location 1152 is 7
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 7
9999 mem: storing 7 in location 1125
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1134 is 98
9999 mem: storing 0 in location 1135
 105 run: break-unless newline?, 
9999 mem: location 1135 is 0
9999 run: jumping to instruction 52
 105 run: at-right?:boolean <- equal column, right
9999 mem: location 1127 is 2
9999 mem: location 1122 is 4
9999 mem: storing 0 in location 1137
 105 run: break-unless at-right?, 
9999 mem: location 1137 is 0
9999 run: jumping to instruction 61
 105 run: print-character screen, c, color
9999 mem: location 1118 is 1009
9999 mem: location 1134 is 98
9999 mem: location 1125 is 7
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1163
 106 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 1164
 106 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 7 in location 1165
9999 mem: storing 1 in location 1166
 106 run: break-if color-found?, 
9999 mem: location 1166 is 1
9999 run: jumping to instruction 7
 106 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1167
9999 mem: storing 0 in location 1168
 106 run: break-if bg-color-found?, 
9999 mem: location 1168 is 0
9999 run: jump-if fell through
 106 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1167
 106 run: trace 90, [print-character], c
9999 mem: location 1164 is 98
  90 print-character: 98 
 106 run: break-unless sc, 
9999 mem: location 1163 is 1009
9999 run: jump-unless fell through
 106 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1169
 106 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1170
 106 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1171
 106 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1171 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1172
 106 run: jump-if legal?, 1:offset
9999 mem: location 1172 is 1
9999 run: jumping to instruction 22
 106 run: legal? <- lesser-than *row, height
9999 mem: location 1171 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1170 is 5
9999 mem: storing 1 in location 1172
 106 run: jump-if legal?, 1:offset
9999 mem: location 1172 is 1
9999 run: jumping to instruction 25
 106 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1173
 106 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 1 in location 1172
 106 run: jump-if legal?, 1:offset
9999 mem: location 1172 is 1
9999 run: jumping to instruction 29
 106 run: legal? <- lesser-than *column, width
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1169 is 5
9999 mem: storing 1 in location 1172
 106 run: jump-if legal?, 1:offset
9999 mem: location 1172 is 1
9999 run: jumping to instruction 32
 106 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1164 is 98
9999 mem: storing 0 in location 1174
 106 run: break-unless newline?, 
9999 mem: location 1174 is 0
9999 run: jumping to instruction 43
 106 run: index:number <- multiply *row, width
9999 mem: location 1171 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1169 is 5
9999 mem: storing 5 in location 1177
 106 run: index <- add index, *column
9999 mem: location 1177 is 5
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 7 in location 1177
 106 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1178
 106 run: len:number <- length *buf
9999 mem: location 1178 is 1014
9999 mem: storing 25 in location 1179
 106 run: backspace?:boolean <- equal c, 8
9999 mem: location 1164 is 98
9999 mem: storing 0 in location 1180
 106 run: break-unless backspace?, 
9999 mem: location 1180 is 0
9999 run: jumping to instruction 63
 106 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1178 is 1014
9999 mem: location 1177 is 7
9999 mem: storing 1029 in location 1182
 106 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1182 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 7
9999 mem: location 1182 is 1029
9999 run: address to copy is 1029
9999 mem: storing 1029 in location 1183
 106 run: *cursor-contents <- copy c
9999 mem: location 1164 is 98
9999 mem: location 1183 is 1029
9999 mem: storing 98 in location 1029
 106 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1182 is 1029
9999 mem: location 1029 is 98
9999 mem: location 1030 is 7
9999 mem: location 1182 is 1029
9999 run: address to copy is 1030
9999 mem: storing 1030 in location 1184
 106 run: *cursor-color <- copy color
9999 mem: location 1165 is 7
9999 mem: location 1184 is 1030
9999 mem: storing 7 in location 1030
 106 run: right:number <- subtract width, 1
9999 mem: location 1169 is 5
9999 mem: storing 4 in location 1185
 106 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1185 is 4
9999 mem: storing 0 in location 1186
 106 run: break-if at-right?, 
9999 mem: location 1186 is 0
9999 run: jump-if fell through
 106 run: *column <- add *column, 1
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1173 is 1012
9999 mem: storing 3 in location 1012
 106 run: reply sc/same-as-ingredient:0
9999 mem: location 1163 is 1009
9999 trace: reply: decrementing callstack depth from 5
 105 run: curr <- next-duplex curr
9999 mem: location 1123 is 1110
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1110 in location 1108
 106 run: jump-if in, 1:offset
9999 mem: location 1108 is 1110
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1108 is 1110
9999 mem: location 1110 is 98
9999 mem: location 1111 is 1113
9999 mem: location 1112 is 1103
9999 mem: location 1108 is 1110
9999 run: address to copy is 1111
9999 run: its type is address
9999 mem: location 1111 is 1113
9999 mem: storing 1113 in location 1109
 106 run: reply result
9999 mem: location 1109 is 1113
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1113
9999 mem: storing 1113 in location 1123
 105 run: prev <- next-duplex prev
9999 mem: location 1124 is 1103
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1103 in location 1108
 106 run: jump-if in, 1:offset
9999 mem: location 1108 is 1103
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1108 is 1103
9999 mem: location 1103 is 97
9999 mem: location 1104 is 1110
9999 mem: location 1105 is 1100
9999 mem: location 1108 is 1103
9999 run: address to copy is 1104
9999 run: its type is address
9999 mem: location 1104 is 1110
9999 mem: storing 1110 in location 1109
 106 run: reply result
9999 mem: location 1109 is 1110
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1110
9999 mem: storing 1110 in location 1124
 105 run: column <- add column, 1
9999 mem: location 1127 is 2
9999 mem: storing 3 in location 1127
 105 run: loop 
9999 run: jumping to instruction 20
 105 run: break-unless curr, 
9999 mem: location 1123 is 1113
9999 run: jump-unless fell through
 105 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1126 is 1
9999 mem: location 1121 is 5
9999 mem: storing 0 in location 1131
 105 run: break-if off-screen?, 
9999 mem: location 1131 is 0
9999 run: jump-if fell through
 105 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1126 is 1
9999 mem: location 1128 is 1071
9999 mem: location 1071 is 1
9999 mem: storing 1 in location 1132
 105 run: break-unless at-cursor-row?, 
9999 mem: location 1132 is 1
9999 run: jump-unless fell through
 105 run: at-cursor?:boolean <- equal column, *cursor-column
9999 mem: location 1127 is 3
9999 mem: location 1129 is 1072
9999 mem: location 1072 is 1
9999 mem: storing 0 in location 1133
 105 run: break-unless at-cursor?, 
9999 mem: location 1133 is 0
9999 run: jumping to instruction 30
 105 run: c:character <- get *curr, value:offset
9999 mem: location 1123 is 1113
9999 mem: location 1113 is 99
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1110
9999 mem: location 1123 is 1113
9999 run: address to copy is 1113
9999 run: its type is character
9999 mem: location 1113 is 99
9999 mem: storing 99 in location 1134
 105 run: color <- get-color color, c
9999 mem: location 1125 is 7
9999 mem: location 1134 is 99
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 106 run: color:number <- next-ingredient 
9999 mem: storing 7 in location 1152
 106 run: c:character <- next-ingredient 
9999 mem: storing 99 in location 1153
 106 run: color-is-white?:boolean <- equal color, 7/white
9999 mem: location 1152 is 7
9999 mem: storing 1 in location 1154
 106 run: break-unless color-is-white?, 
9999 mem: location 1154 is 1
9999 run: jump-unless fell through
 106 run: starting-comment?:boolean <- equal c, 35/#
9999 mem: location 1153 is 99
9999 mem: storing 0 in location 1155
 106 run: break-unless starting-comment?, 
9999 mem: location 1155 is 0
9999 run: jumping to instruction 11
 106 run: color-is-blue?:boolean <- equal color, 12/lightblue
9999 mem: location 1152 is 7
9999 mem: storing 0 in location 1156
 106 run: break-unless color-is-blue?, 
9999 mem: location 1156 is 0
9999 run: jumping to instruction 20
 106 run: break-unless color-is-white?, 
9999 mem: location 1154 is 1
9999 run: jump-unless fell through
 106 run: starting-assignment?:boolean <- equal c, 60/<
9999 mem: location 1153 is 99
9999 mem: storing 0 in location 1158
 106 run: break-unless starting-assignment?, 
9999 mem: location 1158 is 0
9999 run: jumping to instruction 27
 106 run: color-is-red?:boolean <- equal color, 1/red
9999 mem: location 1152 is 7
9999 mem: storing 0 in location 1159
 106 run: break-unless color-is-red?, 
9999 mem: location 1159 is 0
9999 run: jumping to instruction 35
 106 run: reply color
9999 mem: location 1152 is 7
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 7
9999 mem: storing 7 in location 1125
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1134 is 99
9999 mem: storing 0 in location 1135
 105 run: break-unless newline?, 
9999 mem: location 1135 is 0
9999 run: jumping to instruction 52
 105 run: at-right?:boolean <- equal column, right
9999 mem: location 1127 is 3
9999 mem: location 1122 is 4
9999 mem: storing 0 in location 1137
 105 run: break-unless at-right?, 
9999 mem: location 1137 is 0
9999 run: jumping to instruction 61
 105 run: print-character screen, c, color
9999 mem: location 1118 is 1009
9999 mem: location 1134 is 99
9999 mem: location 1125 is 7
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1163
 106 run: c:character <- next-ingredient 
9999 mem: storing 99 in location 1164
 106 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 7 in location 1165
9999 mem: storing 1 in location 1166
 106 run: break-if color-found?, 
9999 mem: location 1166 is 1
9999 run: jumping to instruction 7
 106 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1167
9999 mem: storing 0 in location 1168
 106 run: break-if bg-color-found?, 
9999 mem: location 1168 is 0
9999 run: jump-if fell through
 106 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1167
 106 run: trace 90, [print-character], c
9999 mem: location 1164 is 99
  90 print-character: 99 
 106 run: break-unless sc, 
9999 mem: location 1163 is 1009
9999 run: jump-unless fell through
 106 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1169
 106 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1170
 106 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1171
 106 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1171 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1172
 106 run: jump-if legal?, 1:offset
9999 mem: location 1172 is 1
9999 run: jumping to instruction 22
 106 run: legal? <- lesser-than *row, height
9999 mem: location 1171 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1170 is 5
9999 mem: storing 1 in location 1172
 106 run: jump-if legal?, 1:offset
9999 mem: location 1172 is 1
9999 run: jumping to instruction 25
 106 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1173
 106 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 3
9999 mem: storing 1 in location 1172
 106 run: jump-if legal?, 1:offset
9999 mem: location 1172 is 1
9999 run: jumping to instruction 29
 106 run: legal? <- lesser-than *column, width
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1169 is 5
9999 mem: storing 1 in location 1172
 106 run: jump-if legal?, 1:offset
9999 mem: location 1172 is 1
9999 run: jumping to instruction 32
 106 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1164 is 99
9999 mem: storing 0 in location 1174
 106 run: break-unless newline?, 
9999 mem: location 1174 is 0
9999 run: jumping to instruction 43
 106 run: index:number <- multiply *row, width
9999 mem: location 1171 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1169 is 5
9999 mem: storing 5 in location 1177
 106 run: index <- add index, *column
9999 mem: location 1177 is 5
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 3
9999 mem: storing 8 in location 1177
 106 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1163 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1163 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1178
 106 run: len:number <- length *buf
9999 mem: location 1178 is 1014
9999 mem: storing 25 in location 1179
 106 run: backspace?:boolean <- equal c, 8
9999 mem: location 1164 is 99
9999 mem: storing 0 in location 1180
 106 run: break-unless backspace?, 
9999 mem: location 1180 is 0
9999 run: jumping to instruction 63
 106 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1178 is 1014
9999 mem: location 1177 is 8
9999 mem: storing 1031 in location 1182
 106 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1182 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 7
9999 mem: location 1182 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1183
 106 run: *cursor-contents <- copy c
9999 mem: location 1164 is 99
9999 mem: location 1183 is 1031
9999 mem: storing 99 in location 1031
 106 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1182 is 1031
9999 mem: location 1031 is 99
9999 mem: location 1032 is 7
9999 mem: location 1182 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1184
 106 run: *cursor-color <- copy color
9999 mem: location 1165 is 7
9999 mem: location 1184 is 1032
9999 mem: storing 7 in location 1032
 106 run: right:number <- subtract width, 1
9999 mem: location 1169 is 5
9999 mem: storing 4 in location 1185
 106 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1185 is 4
9999 mem: storing 0 in location 1186
 106 run: break-if at-right?, 
9999 mem: location 1186 is 0
9999 run: jump-if fell through
 106 run: *column <- add *column, 1
9999 mem: location 1173 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1173 is 1012
9999 mem: storing 4 in location 1012
 106 run: reply sc/same-as-ingredient:0
9999 mem: location 1163 is 1009
9999 trace: reply: decrementing callstack depth from 5
 105 run: curr <- next-duplex curr
9999 mem: location 1123 is 1113
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1113 in location 1108
 106 run: jump-if in, 1:offset
9999 mem: location 1108 is 1113
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1108 is 1113
9999 mem: location 1113 is 99
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1110
9999 mem: location 1108 is 1113
9999 run: address to copy is 1114
9999 run: its type is address
9999 mem: location 1114 is 0
9999 mem: storing 0 in location 1109
 106 run: reply result
9999 mem: location 1109 is 0
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 0
9999 mem: storing 0 in location 1123
 105 run: prev <- next-duplex prev
9999 mem: location 1124 is 1110
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1110 in location 1108
 106 run: jump-if in, 1:offset
9999 mem: location 1108 is 1110
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1108 is 1110
9999 mem: location 1110 is 98
9999 mem: location 1111 is 1113
9999 mem: location 1112 is 1103
9999 mem: location 1108 is 1110
9999 run: address to copy is 1111
9999 run: its type is address
9999 mem: location 1111 is 1113
9999 mem: storing 1113 in location 1109
 106 run: reply result
9999 mem: location 1109 is 1113
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1113
9999 mem: storing 1113 in location 1124
 105 run: column <- add column, 1
9999 mem: location 1127 is 3
9999 mem: storing 4 in location 1127
 105 run: loop 
9999 run: jumping to instruction 20
 105 run: break-unless curr, 
9999 mem: location 1123 is 0
9999 run: jumping to instruction 67
 105 run: bottom-of-screen:address:address:duplex-list <- get-address *editor, bottom-of-screen:offset
9999 mem: location 1119 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1066 is 1100
9999 mem: location 1067 is 0
9999 mem: location 1068 is 1100
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1119 is 1065
9999 run: address to copy is 1067
9999 mem: storing 1067 in location 1138
 105 run: *bottom-of-screen <- copy curr
9999 mem: location 1123 is 0
9999 mem: location 1138 is 1067
9999 mem: storing 0 in location 1067
 105 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1126 is 1
9999 mem: location 1128 is 1071
9999 mem: location 1071 is 1
9999 mem: storing 1 in location 1132
 105 run: cursor-outside-line?:boolean <- lesser-or-equal column, *cursor-column
9999 mem: location 1127 is 4
9999 mem: location 1129 is 1072
9999 mem: location 1072 is 1
9999 mem: storing 0 in location 1139
 105 run: before-cursor-on-same-line?:boolean <- and at-cursor-row?, cursor-outside-line?
9999 mem: location 1132 is 1
9999 mem: location 1139 is 0
9999 mem: storing 0 in location 1140
 105 run: above-cursor-row?:boolean <- lesser-than row, *cursor-row
9999 mem: location 1126 is 1
9999 mem: location 1128 is 1071
9999 mem: location 1071 is 1
9999 mem: storing 0 in location 1141
 105 run: before-cursor?:boolean <- or before-cursor-on-same-line?, above-cursor-row?
9999 mem: location 1140 is 0
9999 mem: location 1141 is 0
9999 mem: storing 0 in location 1142
 105 run: break-unless before-cursor?, 
9999 mem: location 1142 is 0
9999 run: jumping to instruction 80
 105 run: reply row, column, screen/same-as-ingredient:0, editor/same-as-ingredient:1
9999 mem: location 1126 is 1
9999 mem: location 1127 is 4
9999 mem: location 1118 is 1009
9999 mem: location 1119 is 1065
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 1
9999 run: result 1 is 4
9999 run: result 2 is 1009
9999 run: result 3 is 1065
9999 mem: storing 1009 in location 1083
9999 mem: storing 1065 in location 1086
 104 run: indent?:address:boolean <- get-address *result, indent?:offset
9999 mem: location 1086 is 1065
9999 mem: location 1065 is 1100
9999 mem: location 1066 is 1100
9999 mem: location 1067 is 0
9999 mem: location 1068 is 1100
9999 mem: location 1069 is 1
9999 mem: location 1070 is 4
9999 mem: location 1071 is 1
9999 mem: location 1072 is 1
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1086 is 1065
9999 run: address to copy is 1073
9999 mem: storing 1073 in location 1091
 104 run: *indent? <- copy 1/true
9999 mem: location 1091 is 1073
9999 mem: storing 1 in location 1073
 104 run: reply result
9999 mem: location 1086 is 1065
9999 trace: reply: decrementing callstack depth from 3
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: screen-should-contain [
    .     .
    . abc .
    .     .
  ]
9999 trace: fall-through: exiting scenario-editor-initially-handles-offsets; decrementing callstack depth from 1
