9991 parse: --- defining main
9993 parse: instruction: merge
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"14": "literal"}
9993 parse:   ingredient: {"15": "literal"}
9993 parse:   ingredient: {"16": "literal"}
9993 parse:   product: {"10": <"foo" : <"point" : <>>>}
9992 load: after rewriting: 10:foo:point <- merge 14, 15, 16
9993 parse: instruction: bar
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"10": <"foo" : <"point" : <>>>}
9993 parse:   product: {"20": "point", "raw": <>}
9992 load: after rewriting: 20:point/raw <- bar 10:foo:point
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:foo:_t
9999 parse: header product: result:_t
9991 parse: --- defining bar
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"a": <>}
9993 parse:   ingredient: {"x": "offset"}
9993 parse:   product: {"result": <>}
9992 load: after rewriting: result <- get a, x:offset
9999 parse: recipe bar has a header
9999 parse: container has type ingredients; parsing
9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element name: x
9999 parse:   type: 2000
9993 parse:   element name: y
9993 parse:   type: 1
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe bar
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe bar
9991 transform: --- deduce types for recipe main
9991 transform: --- deduce types for recipe bar
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: a => <?-1 : <?-1 : <>>>
9992 transform: a <= <?-1 : <?-1 : <>>>
9992 transform: result => ?-1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction bar
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking generic variant 0
9992 transform: final score: 100
9992 transform: matches
9992 transform: found variant to specialize: 1000 bar
9993 transform: switching bar to bar_2
9993 transform: adding mapping from _t to point
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient a:foo:_t
9993 transform: _t => point
9993 transform:   after: <foo : <point : <>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:_t
9993 transform: _t => point
9993 transform:   after: point
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'a:foo:_t <- next-ingredient '
9993 transform: replacing in ingredient a:foo:_t
9993 transform: _t => point
9993 transform:   after: <foo : <point : <>>>
9993 transform: replacing in instruction 'result <- get a, x:offset'
9993 transform: replacing in ingredient a
9993 transform: _t => point
9993 transform:   after: <foo : <point : <>>>
9993 transform: replacing in ingredient x:offset
9993 transform:   after: ?0
9993 transform: replacing in instruction 'reply result:_t'
9993 transform: replacing in ingredient result:_t
9993 transform: _t => point
9993 transform:   after: point
9992 transform: new specialization: bar_2
9991 transform: --- resolve ambiguous calls for recipe bar_2
9991 transform: --- deduce types from header for bar
9992 transform: default-space:address:array:location <- new location:type, number-of-locals:literal
9992 transform: a:foo:_t <- next-ingredient 
9992 transform: result <- get a, x:offset
9993 transform: type of result is ?-1
9992 transform: reply result:_t
9991 transform: --- deduce types from header for bar_2
9992 transform: default-space:address:array:location <- new location:type, number-of-locals:literal
9992 transform: a:foo:_t <- next-ingredient 
9992 transform: result <- get a, x:offset
9993 transform: type of result is point
9992 transform: reply result:_t
9991 transform: --- checking reply instructions against header for bar_2
9991 transform: --- transform names for recipe main
9991 transform: --- transform names for recipe bar_2
9993 name: assign a 1
9999 type: checking size of type ingredient

9999 type: type deduced to be point$
9999 type: type deduced to be point$
9993 name: element x of type foo is at offset 0
9993 name: assign result 4
9991 transform: --- transform braces for recipe main
9992 transform: merge ...
9992 transform: bar ...
9991 transform: --- transform braces for recipe bar
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- transform braces for recipe bar_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe bar
9991 transform: --- compute instruction operations for recipe bar_2
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe bar_2
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe bar_2
9992 new: size of "location" is 1
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: 10:foo:point <- merge 14, 15, 16
9999 type: checking size of type ingredient

9999 type: type deduced to be point$
9999 type: type deduced to be point$
9999 mem: storing 14 in location 10
9999 mem: storing 15 in location 11
9999 mem: storing 16 in location 12
 102 run: 20:point/raw <- bar_2 10:foo:point
9999 type: checking size of type ingredient

9999 type: type deduced to be point$
9999 type: type deduced to be point$
9999 mem: location 10 is 14
9999 mem: location 11 is 15
9999 mem: location 12 is 16
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 103 run: a:foo:_t <- next-ingredient 
9999 type: checking size of type ingredient

9999 type: type deduced to be point$
9999 type: type deduced to be point$
9999 mem: storing 14 in location 1002
9999 mem: storing 15 in location 1003
9999 mem: storing 16 in location 1004
 103 run: result <- get a, x:offset
9999 type: checking size of type ingredient

9999 type: type deduced to be point$
9999 type: type deduced to be point$
9999 mem: location 1002 is 14
9999 mem: location 1003 is 15
9999 mem: location 1004 is 16
9998 run: address to copy is 1002
9998 run: its type is point
9999 mem: location 1002 is 14
9999 mem: location 1003 is 15
9999 mem: storing 14 in location 1005
9999 mem: storing 15 in location 1006
 103 run: reply result:_t
9999 mem: location 1005 is 14
9999 mem: location 1006 is 15
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is [14, 15]
9999 mem: storing 14 in location 20
9999 mem: storing 15 in location 21
9999 trace: fall-through: exiting main; decrementing callstack depth from 1
