schedule: main
run: 1 main 0: (((1 integer) (routine-id)) <- ((fork)) ((f1 fn)) ((nil literal) (globals)) ((30 literal) (limit)))
run: 1 => ((1 integer) (routine-id))
setm: ((1 integer) (routine-id)) <= 1
setm: size of ((1 integer) (routine-id)) is 1
setm: ((1 integer) (routine-id)): setting 1 to 1
run: 2 main 1: (((sleep)) ((until-routine-done literal)) ((1 integer) (routine-id)))
m: ((1 integer) (routine-id))
sizeof: ((1 integer) (routine-id))
schedule: pushing main to sleep queue
schedule: f1
run: 3 f1 0: (((jump)) ((-1 offset)))
run: 4 f1 0: (((jump)) ((-1 offset)))
run: 5 f1 0: (((jump)) ((-1 offset)))
run: 6 f1 0: (((jump)) ((-1 offset)))
run: 7 f1 0: (((jump)) ((-1 offset)))
schedule: scheduling f1 for further processing (limit)
schedule: f1
run: 8 f1 0: (((jump)) ((-1 offset)))
run: 9 f1 0: (((jump)) ((-1 offset)))
run: 10 f1 0: (((jump)) ((-1 offset)))
run: 11 f1 0: (((jump)) ((-1 offset)))
run: 12 f1 0: (((jump)) ((-1 offset)))
schedule: scheduling f1 for further processing (limit)
schedule: f1
run: 13 f1 0: (((jump)) ((-1 offset)))
run: 14 f1 0: (((jump)) ((-1 offset)))
run: 15 f1 0: (((jump)) ((-1 offset)))
run: 16 f1 0: (((jump)) ((-1 offset)))
run: 17 f1 0: (((jump)) ((-1 offset)))
schedule: scheduling f1 for further processing (limit)
schedule: f1
run: 18 f1 0: (((jump)) ((-1 offset)))
run: 19 f1 0: (((jump)) ((-1 offset)))
run: 20 f1 0: (((jump)) ((-1 offset)))
run: 21 f1 0: (((jump)) ((-1 offset)))
run: 22 f1 0: (((jump)) ((-1 offset)))
schedule: scheduling f1 for further processing (limit)
schedule: f1
run: 23 f1 0: (((jump)) ((-1 offset)))
run: 24 f1 0: (((jump)) ((-1 offset)))
run: 25 f1 0: (((jump)) ((-1 offset)))
run: 26 f1 0: (((jump)) ((-1 offset)))
run: 27 f1 0: (((jump)) ((-1 offset)))
schedule: scheduling f1 for further processing (limit)
schedule: f1
run: 28 f1 0: (((jump)) ((-1 offset)))
run: 29 f1 0: (((jump)) ((-1 offset)))
run: 30 f1 0: (((jump)) ((-1 offset)))
run: 31 f1 0: (((jump)) ((-1 offset)))
run: 32 f1 0: (((jump)) ((-1 offset)))
schedule: scheduling f1 for further processing (limit)
schedule: routine ran out of time
schedule: waking up main
schedule: main
run: 33 main 2: (((2 integer)) <- ((copy)) ((34 literal)))
run: 34 => ((2 integer))
setm: ((2 integer)) <= 34
setm: size of ((2 integer)) is 1
setm: ((2 integer)): setting 2 to 34
schedule: done with routine
