9991 parse: --- defining main
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"point": "type"}
9993 parse:   product: {"1": <"address" : <"point" : <>>>}
9992 load: after rewriting: 1:address:point <- new point:type
9993 parse: instruction: get-address
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"point" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"y": "offset"}
9993 parse:   product: {"2": <"address" : <"number" : <>>>}
9992 load: after rewriting: 2:address:number <- get-address *1:address:point, y:offset
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"2": <"address" : <"number" : <>>>, "lookup": <>}
9992 load: after rewriting: *2:address:number <- copy 34
9993 parse: instruction: bar
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"point" : <>>>}
9993 parse:   product: {"3": <"address" : <"point" : <>>>}
9992 load: after rewriting: 3:address:point <- bar 1:address:point
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": <"address" : <"point" : <>>>, "lookup": <>}
9993 parse:   product: {"4": "point"}
9992 load: after rewriting: 4:point <- copy *3:address:point
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:_t
9999 parse: header product: result:_t
9991 parse: --- defining bar
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"a": <>}
9993 parse:   product: {"result": <>}
9992 load: after rewriting: result <- copy a
9999 parse: recipe bar has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9993 name: element y of type point is at offset 1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction bar
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: score for variant 0: -1
9992 transform: score for variant 1: -1
9992 transform: score for variant 2: -1
9992 transform: score for variant 3: -1
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9992 transform: score for variant 7: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 8: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 8
9992 transform: final score: 100
9992 transform: matches
9992 transform: found variant to specialize: 1000 bar
9993 transform: switching bar to bar_2
9993 transform: compute type names: bar_2
9994 transform:     checking {"a": "_t"}: "_t"
9993 transform: type of a is "_t"
9994 transform:     checking {"result": "_t"}: "_t"
9993 transform: type of result is "_t"
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: a:_t <- next-ingredient-without-typechecking 
9994 transform:     checking {"a": "_t"}: "_t"
9993 transform:   instruction: result <- copy a
9994 transform:     checking {"a": <>}: <>
9994 transform:     deducing type to "_t"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to "_t"
9993 transform: adding mapping from _t to <"address" : <"point" : <>>>
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient a:_t
9993 transform: _t => <"address" : <"point" : <>>>
9993 transform:   after: <address : <point : <>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:_t
9993 transform: _t => <"address" : <"point" : <>>>
9993 transform:   after: <address : <point : <>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'a:_t <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient a:_t
9993 transform: _t => <"address" : <"point" : <>>>
9993 transform:   after: <address : <point : <>>>
9993 transform: replacing in instruction 'result <- copy a'
9993 transform: replacing in ingredient a
9993 transform: _t => <"address" : <"point" : <>>>
9993 transform:   after: <address : <point : <>>>
9993 transform: replacing in ingredient result
9993 transform: _t => <"address" : <"point" : <>>>
9993 transform:   after: <address : <point : <>>>
9992 transform: transforming new specialization: bar_2
9991 transform: --- checking reply instructions against header for bar_2
9991 transform: --- fill in reply ingredients from header for recipe bar_2
9991 transform: --- deduce types for recipe bar_2
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: a => <address : <point : <>>>
9992 transform: result => <address : <point : <>>>
9991 transform: --- deduce types from header for bar_2
9993 transform: type of a is <address : <point : <>>>
9993 transform: type of result is <address : <point : <>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: a:_t <- next-ingredient-without-typechecking 
9993 transform:   product: a: <address : <point : <>>> -- {"a": <"address" : <"point" : <>>>}
9992 transform: instruction: result <- copy a
9993 transform:   product: result: <address : <point : <>>> -- {"result": <"address" : <"point" : <>>>}
9992 transform: instruction: reply result:_t
9991 transform: --- collect surrounding spaces for recipe bar_2
9991 transform: --- transform names for recipe bar_2
9993 name: assign a 1
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe bar_2
9991 transform: --- compute instruction operations for recipe bar_2
9991 transform: --- transform braces for recipe bar_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe bar_2
9991 transform: --- type-check 'call' instructions inside recipe bar_2
9991 transform: --- type-check calls inside recipe bar_2
9991 transform: --- convert 'new' to 'allocate' for recipe bar_2
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for bar_2
9992 transform: new specialization: bar_2
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: bar ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "point" is 2
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: 1:address:point <- new point:type
9999 mem: new alloc: 1000
9999 mem: storing 1000 in location 1
 102 run: 2:address:number <- get-address *1:address:point, y:offset
9999 mem: location 1 is 1000
9999 mem: location 1000 is 0
9999 mem: location 1001 is 0
9999 mem: location 1 is 1000
9998 run: address to copy is 1001
9999 mem: storing 1001 in location 2
 102 run: *2:address:number <- copy 34
9999 mem: location 2 is 1001
9999 mem: storing 34 in location 1001
 102 run: 3:address:point <- bar_2 1:address:point
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1002
 103 run: a:_t <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1004
 103 run: result <- copy a
9999 mem: location 1004 is 1000
9999 mem: storing 1000 in location 1005
 103 run: reply result:_t
9999 mem: location 1005 is 1000
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1000
9999 mem: storing 1000 in location 3
 102 run: 4:point <- copy *3:address:point
9999 mem: location 3 is 1000
9999 mem: location 1000 is 0
9999 mem: location 1001 is 34
9999 mem: storing 0 in location 4
9999 mem: storing 34 in location 5
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
