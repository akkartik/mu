parse: instruction: copy
parse:   ingredient: {name: "3", value: 0, type: 0, properties: ["3": "literal"]}
parse:   product: {name: "1", value: 0, type: 1, properties: ["1": "number"]}
parse: instruction: copy
parse:   ingredient: {name: "97", value: 0, type: 0, properties: ["97": "literal"]}
parse:   product: {name: "2", value: 0, type: 1, properties: ["2": "number"]}
parse: instruction: copy
parse:   ingredient: {name: "98", value: 0, type: 0, properties: ["98": "literal"]}
parse:   product: {name: "3", value: 0, type: 1, properties: ["3": "number"]}
parse: instruction: copy
parse:   ingredient: {name: "99", value: 0, type: 0, properties: ["99": "literal"]}
parse:   product: {name: "4", value: 0, type: 1, properties: ["4": "number"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    1:string <- [ab]
  ", value: 0, type: 0, properties: ["
    1:string <- [ab]
  ": "literal-string"]}
after-brace: recipe main
after-brace: copy ...
after-brace: copy ...
after-brace: copy ...
after-brace: copy ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: main
run: instruction main/0
run: {name: "1", value: 1, type: 1, properties: ["1": "number"]} <- copy/1 {name: "3", value: 3, type: 0, properties: ["3": "literal"]}
run: ingredient 0 is 3
run: product 0 is 1
mem: storing 3 in location 1
run: instruction main/1
run: {name: "2", value: 2, type: 1, properties: ["2": "number"]} <- copy/1 {name: "97", value: 97, type: 0, properties: ["97": "literal"]}
run: ingredient 0 is 97
run: product 0 is 2
mem: storing 97 in location 2
run: instruction main/2
run: {name: "3", value: 3, type: 1, properties: ["3": "number"]} <- copy/1 {name: "98", value: 98, type: 0, properties: ["98": "literal"]}
run: ingredient 0 is 98
run: product 0 is 3
mem: storing 98 in location 3
run: instruction main/3
run: {name: "4", value: 4, type: 1, properties: ["4": "number"]} <- copy/1 {name: "99", value: 99, type: 0, properties: ["99": "literal"]}
run: ingredient 0 is 99
run: product 0 is 4
mem: storing 99 in location 4
run: instruction main/4
run: memory-should-contain/56 {name: "
    1:string <- [ab]
  ", value: 0, type: 0, properties: ["
    1:string <- [ab]
  ": "literal-string"]}
run: ingredient 0 is 
    1:string <- [ab]
  
run: checking string length at 1
warn: expected location 1 to contain length 2 of string [ab] but saw 3
run: checking location 2
run: checking location 3
