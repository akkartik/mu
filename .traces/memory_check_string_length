9991 parse: --- defining main
9993 parse: instruction: copy
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   product: {"1": "number"}
9992 load: after rewriting: 1:number <- copy 3
9993 parse: instruction: copy
9993 parse:   ingredient: {"97": "literal"}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- copy 97
9993 parse: instruction: copy
9993 parse:   ingredient: {"98": "literal"}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- copy 98
9993 parse: instruction: copy
9993 parse:   ingredient: {"99": "literal"}
9993 parse:   product: {"4": "number"}
9992 load: after rewriting: 4:number <- copy 99
9993 parse: instruction: memory-should-contain
9993 parse:   ingredient: {"\n    1:string <- [ab]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    1:string <- [ab]
  ]
9990 transform: === transform_all()
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- transform braces for recipe main
9991 transform: copy ...
9991 transform: copy ...
9991 transform: copy ...
9991 transform: copy ...
9991 transform: memory-should-contain ...
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: 1:number <- copy 3
9999 mem: storing 3 in location 1
 102 run: 2:number <- copy 97
9999 mem: storing 97 in location 2
 102 run: 3:number <- copy 98
9999 mem: storing 98 in location 3
 102 run: 4:number <- copy 99
9999 mem: storing 99 in location 4
 102 run: memory-should-contain [
    1:string <- [ab]
  ]
9999 run: checking string length at 1
   0 error: expected location 1 to contain length 2 of string [ab] but saw 3

