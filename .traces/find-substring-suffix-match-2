c{0: 0 (((1 string-address)) <- ((new)) abcd) -- nil
c{0: 1 (((2 string-address)) <- ((new)) cde) -- nil
c{0: 2 (((3 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal))) -- nil
c{1: 0 ✓ (((1 string-address)) <- ((new)) abcd)
c{1: 1 ✓ (((2 string-address)) <- ((new)) cde)
c{1: 2 ✓ (((3 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal)))
cn0: convert-names in main
cn0: (((1 string-address)) <- ((new)) abcd) nil nil
cn0: checking arg abcd
cn0: checking oarg ((1 string-address))
maybe-add: ((1 string-address))
cn0: (((2 string-address)) <- ((new)) cde) nil nil
cn0: checking arg cde
cn0: checking oarg ((2 string-address))
maybe-add: ((2 string-address))
cn0: (((3 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal))) nil nil
cn0: checking arg ((1 string-address))
maybe-add: ((1 string-address))
cn0: checking arg ((2 string-address))
maybe-add: ((2 string-address))
cn0: checking arg ((0 literal))
cn0: checking oarg ((3 integer))
maybe-add: ((3 integer))
cn1: (((1 string-address)) <- ((new)) abcd)
cn1: (((2 string-address)) <- ((new)) cde)
cn1: (((3 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal)))
schedule: main
run: main 0: (((1 string-address)) <- ((new)) abcd)
run: main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: main 1: (((2 string-address)) <- ((new)) cde)
run: main 1: 1005 => ((2 string-address))
mem: ((2 string-address)): 2 <= 1005
run: main 2: (((3 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1005
run: find-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-substring/main 0: 1009 => ((default-space space-address))
run: find-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1005 0)
run: find-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1011 <= 1000
run: find-substring/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1000 1005 0)
run: find-substring/main 2: 1005 => ((2 string-address))
mem: ((2 string-address)): 1012 <= 1005
run: find-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 1005 0)
run: find-substring/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1013 <= 0
run: find-substring/main 4: (((4 character)) <- ((index)) ((2 string-address) (deref)) ((0 literal)))
array-len: ((1005 string) (raw))
mem: ((1005 integer) (raw)) => 3
mem: ((1006 byte) (raw)) => c
run: find-substring/main 4: #\c => ((4 character))
mem: ((4 character)): 1014 <= #\c
run: find-substring/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 4
run: find-substring/main 5: 4 => ((5 integer))
mem: ((5 integer)): 1015 <= 4
run: find-substring/main 6: (((6 boolean)) <- ((greater-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 0
mem: ((5 integer)) => 4
run: find-substring/main 6: nil => ((6 boolean))
mem: ((6 boolean)): 1016 <= nil
run: find-substring/main 7: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => nil
run: find-substring/main 8: (((7 boolean)) <- ((match-at)) ((1 string-address)) ((2 string-address)) ((3 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1005
mem: ((3 integer)) => 0
run: match-at/find-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: match-at/find-substring/main 0: 1040 => ((default-space space-address))
run: match-at/find-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1005 0)
run: match-at/find-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1042 <= 1000
run: match-at/find-substring/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1000 1005 0)
run: match-at/find-substring/main 2: 1005 => ((2 string-address))
mem: ((2 string-address)): 1043 <= 1005
run: match-at/find-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 1005 0)
run: match-at/find-substring/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1044 <= 0
run: match-at/find-substring/main 4: (((4 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((1005 integer) (raw)) => 3
run: match-at/find-substring/main 4: 3 => ((4 integer))
mem: ((4 integer)): 1045 <= 3
run: match-at/find-substring/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 4
run: match-at/find-substring/main 5: 4 => ((5 integer))
mem: ((5 integer)): 1046 <= 4
run: match-at/find-substring/main 6: (((5 integer)) <- ((subtract)) ((5 integer)) ((4 integer)))
mem: ((5 integer)) => 4
mem: ((4 integer)) => 3
run: match-at/find-substring/main 6: 1 => ((5 integer))
mem: ((5 integer)): 1046 <= 1
run: match-at/find-substring/main 7: (((6 boolean)) <- ((lesser-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 0
mem: ((5 integer)) => 1
run: match-at/find-substring/main 7: t => ((6 boolean))
mem: ((6 boolean)): 1047 <= t
run: match-at/find-substring/main 8: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: match-at/find-substring/main 10: (((7 integer)) <- ((copy)) ((0 literal)))
run: match-at/find-substring/main 10: 0 => ((7 integer))
mem: ((7 integer)): 1048 <= 0
run: match-at/find-substring/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 3
run: match-at/find-substring/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1049 <= nil
run: match-at/find-substring/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 4
mem: ((1001 byte) (raw)) => a
run: match-at/find-substring/main 13: #\a => ((9 character))
mem: ((9 character)): 1050 <= #\a
run: match-at/find-substring/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1005 string) (raw))
mem: ((1005 integer) (raw)) => 3
mem: ((1006 byte) (raw)) => c
run: match-at/find-substring/main 14: #\c => ((10 character))
mem: ((10 character)): 1051 <= #\c
run: match-at/find-substring/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) => a
mem: ((10 character)) => c
run: match-at/find-substring/main 15: nil => ((11 boolean))
mem: ((11 boolean)): 1052 <= nil
run: match-at/find-substring/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => nil
run: match-at/find-substring/main 17: (((reply)) ((nil literal)))
run: find-substring/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1017 <= nil
run: find-substring/main 9: (((jump-if)) ((7 boolean)) ((3 offset)))
mem: ((7 boolean)) => nil
run: find-substring/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-substring/main 10: 1 => ((3 integer))
mem: ((3 integer)): 1013 <= 1
run: find-substring/main 11: (((3 integer)) <- ((find-next)) ((1 string-address)) ((4 character)) ((3 integer)))
mem: ((1 string-address)) => 1000
mem: ((4 character)) => c
mem: ((3 integer)) => 1
run: find-next/find-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/find-substring/main 0: 1071 => ((default-space space-address))
run: find-next/find-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\c 1)
run: find-next/find-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1073 <= 1000
run: find-next/find-substring/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\c 1)
run: find-next/find-substring/main 2: #\c => ((2 character))
mem: ((2 character)): 1074 <= #\c
run: find-next/find-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\c 1)
run: find-next/find-substring/main 3: 1 => ((3 integer))
mem: ((3 integer)): 1075 <= 1
run: find-next/find-substring/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 4
run: find-next/find-substring/main 4: 4 => ((4 integer))
mem: ((4 integer)): 1076 <= 4
run: find-next/find-substring/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 4
run: find-next/find-substring/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1077 <= nil
run: find-next/find-substring/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/find-substring/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 4
mem: ((1002 byte) (raw)) => b
run: find-next/find-substring/main 7: #\b => ((6 byte))
mem: ((6 byte)): 1078 <= #\b
run: find-next/find-substring/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => b
mem: ((2 character)) => c
run: find-next/find-substring/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1079 <= nil
run: find-next/find-substring/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/find-substring/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 1
run: find-next/find-substring/main 10: 2 => ((3 integer))
mem: ((3 integer)): 1075 <= 2
run: find-next/find-substring/main 11: (((jump)) ((-7 offset)))
run: find-next/find-substring/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 4
run: find-next/find-substring/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1077 <= nil
run: find-next/find-substring/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/find-substring/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 4
mem: ((1003 byte) (raw)) => c
run: find-next/find-substring/main 7: #\c => ((6 byte))
mem: ((6 byte)): 1078 <= #\c
run: find-next/find-substring/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => c
mem: ((2 character)) => c
run: find-next/find-substring/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1079 <= t
run: find-next/find-substring/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/find-substring/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 2
run: find-substring/main 11: 2 => ((3 integer))
mem: ((3 integer)): 1013 <= 2
run: find-substring/main 12: (((jump)) ((-7 offset)))
run: find-substring/main 6: (((6 boolean)) <- ((greater-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 2
mem: ((5 integer)) => 4
run: find-substring/main 6: nil => ((6 boolean))
mem: ((6 boolean)): 1016 <= nil
run: find-substring/main 7: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => nil
run: find-substring/main 8: (((7 boolean)) <- ((match-at)) ((1 string-address)) ((2 string-address)) ((3 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1005
mem: ((3 integer)) => 2
run: match-at/find-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: match-at/find-substring/main 0: 1102 => ((default-space space-address))
run: match-at/find-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1005 2)
run: match-at/find-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1104 <= 1000
run: match-at/find-substring/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1000 1005 2)
run: match-at/find-substring/main 2: 1005 => ((2 string-address))
mem: ((2 string-address)): 1105 <= 1005
run: match-at/find-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 1005 2)
run: match-at/find-substring/main 3: 2 => ((3 integer))
mem: ((3 integer)): 1106 <= 2
run: match-at/find-substring/main 4: (((4 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((1005 integer) (raw)) => 3
run: match-at/find-substring/main 4: 3 => ((4 integer))
mem: ((4 integer)): 1107 <= 3
run: match-at/find-substring/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 4
run: match-at/find-substring/main 5: 4 => ((5 integer))
mem: ((5 integer)): 1108 <= 4
run: match-at/find-substring/main 6: (((5 integer)) <- ((subtract)) ((5 integer)) ((4 integer)))
mem: ((5 integer)) => 4
mem: ((4 integer)) => 3
run: match-at/find-substring/main 6: 1 => ((5 integer))
mem: ((5 integer)): 1108 <= 1
run: match-at/find-substring/main 7: (((6 boolean)) <- ((lesser-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 2
mem: ((5 integer)) => 1
run: match-at/find-substring/main 7: nil => ((6 boolean))
mem: ((6 boolean)): 1109 <= nil
run: match-at/find-substring/main 8: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => nil
run: match-at/find-substring/main 9: (((reply)) ((nil literal)))
run: find-substring/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1017 <= nil
run: find-substring/main 9: (((jump-if)) ((7 boolean)) ((3 offset)))
mem: ((7 boolean)) => nil
run: find-substring/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-substring/main 10: 3 => ((3 integer))
mem: ((3 integer)): 1013 <= 3
run: find-substring/main 11: (((3 integer)) <- ((find-next)) ((1 string-address)) ((4 character)) ((3 integer)))
mem: ((1 string-address)) => 1000
mem: ((4 character)) => c
mem: ((3 integer)) => 3
run: find-next/find-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/find-substring/main 0: 1133 => ((default-space space-address))
run: find-next/find-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\c 3)
run: find-next/find-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1135 <= 1000
run: find-next/find-substring/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\c 3)
run: find-next/find-substring/main 2: #\c => ((2 character))
mem: ((2 character)): 1136 <= #\c
run: find-next/find-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\c 3)
run: find-next/find-substring/main 3: 3 => ((3 integer))
mem: ((3 integer)): 1137 <= 3
run: find-next/find-substring/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 4
run: find-next/find-substring/main 4: 4 => ((4 integer))
mem: ((4 integer)): 1138 <= 4
run: find-next/find-substring/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 4
run: find-next/find-substring/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1139 <= nil
run: find-next/find-substring/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/find-substring/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 4
mem: ((1004 byte) (raw)) => d
run: find-next/find-substring/main 7: #\d => ((6 byte))
mem: ((6 byte)): 1140 <= #\d
run: find-next/find-substring/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => d
mem: ((2 character)) => c
run: find-next/find-substring/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1141 <= nil
run: find-next/find-substring/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/find-substring/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 3
run: find-next/find-substring/main 10: 4 => ((3 integer))
mem: ((3 integer)): 1137 <= 4
run: find-next/find-substring/main 11: (((jump)) ((-7 offset)))
run: find-next/find-substring/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 4
mem: ((4 integer)) => 4
run: find-next/find-substring/main 5: t => ((5 boolean))
mem: ((5 boolean)): 1139 <= t
run: find-next/find-substring/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => t
run: find-next/find-substring/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 4
run: find-substring/main 11: 4 => ((3 integer))
mem: ((3 integer)): 1013 <= 4
run: find-substring/main 12: (((jump)) ((-7 offset)))
run: find-substring/main 6: (((6 boolean)) <- ((greater-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 4
mem: ((5 integer)) => 4
run: find-substring/main 6: t => ((6 boolean))
mem: ((6 boolean)): 1016 <= t
run: find-substring/main 7: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => t
run: find-substring/main 13: (((reply)) ((3 integer)))
mem: ((3 integer)) => 4
run: main 2: 4 => ((3 integer))
mem: ((3 integer)): 3 <= 4
schedule: done with routine nil
