9991 parse: --- defining scenario-print-character-at-top-left-2
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "literal", "width": <>}
9993 parse:   ingredient: {"2": "literal", "height": <>}
9992 load: after rewriting: screen:address:screen <- new-fake-screen 3/width, 2/height
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    screen:address:screen <- print-character screen:address:screen, 97/a\n  ": "literal-string"}
9992 load: after rewriting: run [
    screen:address:screen <- print-character screen:address:screen, 97/a
  ]
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    .a  .\n    .   .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain [
    .a  .
    .   .
  ]
9999 parse: recipe scenario-print-character-at-top-left-2 has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe scenario-print-character-at-top-left-2
9991 transform: --- deduce types for recipe scenario-print-character-at-top-left-2
9992 transform: screen => <address : <screen : <>>>
9991 transform: --- collect surrounding spaces for recipe scenario-print-character-at-top-left-2
9991 transform: --- transform names for recipe scenario-print-character-at-top-left-2
9991 transform: --- transform braces for recipe scenario-print-character-at-top-left-2
9991 transform: assume-screen ...
9991 transform: run ...
9991 transform: screen-should-contain ...
9991 transform: --- compute instruction operations for recipe scenario-print-character-at-top-left-2
9991 transform: --- perform checks for recipe scenario-print-character-at-top-left-2
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-print-character-at-top-left-2
 102 run: screen:address:screen <- new-fake-screen 3/width, 2/height
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1000
 103 run: result:address:screen <- new screen:type
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1002
 103 run: width:address:number <- get-address *result, num-columns:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1003
 103 run: *width <- next-ingredient 
9999 mem: location 1003 is 1010
9999 mem: storing 3 in location 1010
 103 run: height:address:number <- get-address *result, num-rows:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 0
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1004
 103 run: *height <- next-ingredient 
9999 mem: location 1004 is 1009
9999 mem: storing 2 in location 1009
 103 run: row:address:number <- get-address *result, cursor-row:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 103 run: *row <- copy 0
9999 mem: location 1005 is 1011
9999 mem: storing 0 in location 1011
 103 run: column:address:number <- get-address *result, cursor-column:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 103 run: *column <- copy 0
9999 mem: location 1006 is 1012
9999 mem: storing 0 in location 1012
 103 run: bufsize:number <- multiply *width, *height
9999 mem: location 1003 is 1010
9999 mem: location 1010 is 3
9999 mem: location 1004 is 1009
9999 mem: location 1009 is 2
9999 mem: storing 6 in location 1007
 103 run: buf:address:address:array:screen-cell <- get-address *result, data:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1008
 103 run: *buf <- new screen-cell:type, bufsize
9999 mem: location 1007 is 6
9999 mem: array size is 6
9999 mem: new alloc: 1014
9999 mem: location 1008 is 1013
9999 mem: storing 1014 in location 1013
 103 run: clear-screen result
9999 mem: location 1002 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1027
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1029
 104 run: jump-unless sc, 
9999 mem: location 1029 is 1009
9998 run: jump-unless fell through
 104 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1029 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1029 is 1009
9998 run: address to copy is 1013
9998 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1030
 104 run: max:number <- length *buf
9999 mem: location 1030 is 1014
9999 mem: storing 6 in location 1031
 104 run: i:number <- copy 0
9999 mem: storing 0 in location 1032
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1032 is 0
9999 mem: location 1031 is 6
9999 mem: storing 0 in location 1033
 104 run: jump-if done?, 
9999 mem: location 1033 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1030 is 1014
9999 mem: location 1032 is 0
9999 mem: storing 1015 in location 1034
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1034 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1034 is 1015
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1035
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1035 is 1015
9999 mem: storing 0 in location 1015
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1034 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1034 is 1015
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1036
 104 run: *curr-color <- copy 7/white
9999 mem: location 1036 is 1016
9999 mem: storing 7 in location 1016
 104 run: i <- add i, 1
9999 mem: location 1032 is 0
9999 mem: storing 1 in location 1032
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1032 is 1
9999 mem: location 1031 is 6
9999 mem: storing 0 in location 1033
 104 run: jump-if done?, 
9999 mem: location 1033 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1030 is 1014
9999 mem: location 1032 is 1
9999 mem: storing 1017 in location 1034
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1034 is 1017
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1034 is 1017
9998 run: address to copy is 1017
9999 mem: storing 1017 in location 1035
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1035 is 1017
9999 mem: storing 0 in location 1017
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1034 is 1017
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1034 is 1017
9998 run: address to copy is 1018
9999 mem: storing 1018 in location 1036
 104 run: *curr-color <- copy 7/white
9999 mem: location 1036 is 1018
9999 mem: storing 7 in location 1018
 104 run: i <- add i, 1
9999 mem: location 1032 is 1
9999 mem: storing 2 in location 1032
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1032 is 2
9999 mem: location 1031 is 6
9999 mem: storing 0 in location 1033
 104 run: jump-if done?, 
9999 mem: location 1033 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1030 is 1014
9999 mem: location 1032 is 2
9999 mem: storing 1019 in location 1034
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1034 is 1019
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1034 is 1019
9998 run: address to copy is 1019
9999 mem: storing 1019 in location 1035
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1035 is 1019
9999 mem: storing 0 in location 1019
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1034 is 1019
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1034 is 1019
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1036
 104 run: *curr-color <- copy 7/white
9999 mem: location 1036 is 1020
9999 mem: storing 7 in location 1020
 104 run: i <- add i, 1
9999 mem: location 1032 is 2
9999 mem: storing 3 in location 1032
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1032 is 3
9999 mem: location 1031 is 6
9999 mem: storing 0 in location 1033
 104 run: jump-if done?, 
9999 mem: location 1033 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1030 is 1014
9999 mem: location 1032 is 3
9999 mem: storing 1021 in location 1034
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1034 is 1021
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1034 is 1021
9998 run: address to copy is 1021
9999 mem: storing 1021 in location 1035
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1035 is 1021
9999 mem: storing 0 in location 1021
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1034 is 1021
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1034 is 1021
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1036
 104 run: *curr-color <- copy 7/white
9999 mem: location 1036 is 1022
9999 mem: storing 7 in location 1022
 104 run: i <- add i, 1
9999 mem: location 1032 is 3
9999 mem: storing 4 in location 1032
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1032 is 4
9999 mem: location 1031 is 6
9999 mem: storing 0 in location 1033
 104 run: jump-if done?, 
9999 mem: location 1033 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1030 is 1014
9999 mem: location 1032 is 4
9999 mem: storing 1023 in location 1034
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1034 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1034 is 1023
9998 run: address to copy is 1023
9999 mem: storing 1023 in location 1035
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1035 is 1023
9999 mem: storing 0 in location 1023
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1034 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1034 is 1023
9998 run: address to copy is 1024
9999 mem: storing 1024 in location 1036
 104 run: *curr-color <- copy 7/white
9999 mem: location 1036 is 1024
9999 mem: storing 7 in location 1024
 104 run: i <- add i, 1
9999 mem: location 1032 is 4
9999 mem: storing 5 in location 1032
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1032 is 5
9999 mem: location 1031 is 6
9999 mem: storing 0 in location 1033
 104 run: jump-if done?, 
9999 mem: location 1033 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1030 is 1014
9999 mem: location 1032 is 5
9999 mem: storing 1025 in location 1034
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1034 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1034 is 1025
9998 run: address to copy is 1025
9999 mem: storing 1025 in location 1035
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1035 is 1025
9999 mem: storing 0 in location 1025
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1034 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1034 is 1025
9998 run: address to copy is 1026
9999 mem: storing 1026 in location 1036
 104 run: *curr-color <- copy 7/white
9999 mem: location 1036 is 1026
9999 mem: storing 7 in location 1026
 104 run: i <- add i, 1
9999 mem: location 1032 is 5
9999 mem: storing 6 in location 1032
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1032 is 6
9999 mem: location 1031 is 6
9999 mem: storing 1 in location 1033
 104 run: jump-if done?, 
9999 mem: location 1033 is 1
9998 run: jumping to instruction 17
 104 run: x:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1029 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1029 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1037
 104 run: *x <- copy 0
9999 mem: location 1037 is 1011
9999 mem: storing 0 in location 1011
 104 run: x <- get-address *sc, cursor-column:offset
9999 mem: location 1029 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1029 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1037
 104 run: *x <- copy 0
9999 mem: location 1037 is 1012
9999 mem: storing 0 in location 1012
 104 run: reply sc/same-as-ingredient:0
9999 mem: location 1029 is 1009
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply result
9999 mem: location 1002 is 1009
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 900
 102 run: run [
    screen:address:screen <- print-character screen:address:screen, 97/a
  ]
9991 parse: --- defining run1001
9993 parse: instruction: print-character
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"screen": <"address" : <"screen" : <>>>}
9993 parse:   ingredient: {"97": "literal", "a": <>}
9993 parse:   product: {"screen": <"address" : <"screen" : <>>>}
9992 load: after rewriting: screen:address:screen <- print-character screen:address:screen, 97/a
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe run1001
9991 transform: --- deduce types for recipe run1001
9992 transform: screen => <address : <screen : <>>>
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- transform braces for recipe run1001
9991 transform: print-character ...
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: screen:address:screen <- print-character screen:address:screen, 97/a
9999 mem: location 900 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 25
9999 mem: new alloc: 1038
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1040
 104 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1041
 104 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1042
9999 mem: storing 0 in location 1043
 104 run: jump-if color-found?, 
9999 mem: location 1043 is 0
9998 run: jump-if fell through
 104 run: color <- copy 7/white
9999 mem: storing 7 in location 1042
 104 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1044
9999 mem: storing 0 in location 1045
 104 run: jump-if bg-color-found?, 
9999 mem: location 1045 is 0
9998 run: jump-if fell through
 104 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1044
 104 run: trace 90, [print-character], c
9999 mem: location 1041 is 97
  90 print-character: 97 
 104 run: jump-unless sc, 
9999 mem: location 1040 is 1009
9998 run: jump-unless fell through
 104 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1040 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1040 is 1009
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 3
9999 mem: storing 3 in location 1046
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1040 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1040 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 2
9999 mem: storing 2 in location 1047
 104 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1040 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1040 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1048
 104 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1048 is 1011
9999 mem: location 1011 is 0
9999 mem: storing 1 in location 1049
 104 run: jump-if legal?, 1:offset
9999 mem: location 1049 is 1
9998 run: jumping to instruction 22
 104 run: legal? <- lesser-than *row, height
9999 mem: location 1048 is 1011
9999 mem: location 1011 is 0
9999 mem: location 1047 is 2
9999 mem: storing 1 in location 1049
 104 run: jump-if legal?, 1:offset
9999 mem: location 1049 is 1
9998 run: jumping to instruction 25
 104 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1040 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1040 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1050
 104 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1050 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 1 in location 1049
 104 run: jump-if legal?, 1:offset
9999 mem: location 1049 is 1
9998 run: jumping to instruction 29
 104 run: legal? <- lesser-than *column, width
9999 mem: location 1050 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1046 is 3
9999 mem: storing 1 in location 1049
 104 run: jump-if legal?, 1:offset
9999 mem: location 1049 is 1
9998 run: jumping to instruction 32
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1041 is 97
9999 mem: storing 0 in location 1051
 104 run: jump-unless newline?, 
9999 mem: location 1051 is 0
9998 run: jumping to instruction 43
 104 run: index:number <- multiply *row, width
9999 mem: location 1048 is 1011
9999 mem: location 1011 is 0
9999 mem: location 1046 is 3
9999 mem: storing 0 in location 1054
 104 run: index <- add index, *column
9999 mem: location 1054 is 0
9999 mem: location 1050 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1054
 104 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1040 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1040 is 1009
9998 run: address to copy is 1013
9998 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1055
 104 run: len:number <- length *buf
9999 mem: location 1055 is 1014
9999 mem: storing 6 in location 1056
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 1041 is 97
9999 mem: storing 0 in location 1057
 104 run: jump-unless backspace?, 
9999 mem: location 1057 is 0
9998 run: jumping to instruction 63
 104 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1055 is 1014
9999 mem: location 1054 is 0
9999 mem: storing 1015 in location 1059
 104 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1059 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1059 is 1015
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1060
 104 run: *cursor-contents <- copy c
9999 mem: location 1041 is 97
9999 mem: location 1060 is 1015
9999 mem: storing 97 in location 1015
 104 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1059 is 1015
9999 mem: location 1015 is 97
9999 mem: location 1016 is 7
9999 mem: location 1059 is 1015
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1061
 104 run: *cursor-color <- copy color
9999 mem: location 1042 is 7
9999 mem: location 1061 is 1016
9999 mem: storing 7 in location 1016
 104 run: right:number <- subtract width, 1
9999 mem: location 1046 is 3
9999 mem: storing 2 in location 1062
 104 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1050 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1062 is 2
9999 mem: storing 0 in location 1063
 104 run: jump-if at-right?, 
9999 mem: location 1063 is 0
9998 run: jump-if fell through
 104 run: *column <- add *column, 1
9999 mem: location 1050 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1050 is 1012
9999 mem: storing 1 in location 1012
 104 run: reply sc/same-as-ingredient:0
9999 mem: location 1040 is 1009
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 900
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: screen-should-contain [
    .a  .
    .   .
  ]
9999 trace: fall-through: exiting scenario-print-character-at-top-left-2; decrementing callstack depth from 1
