9991 parse: --- defining scenario-channel-initialization
9993 parse: instruction: run
9993 parse:   ingredient: {"\n    1:address:channel <- new-channel 3/capacity\n    2:number <- get *1:address:channel, first-full:offset\n    3:number <- get *1:address:channel, first-free:offset\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:channel <- new-channel 3/capacity
    2:number <- get *1:address:channel, first-full:offset
    3:number <- get *1:address:channel, first-free:offset
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   ingredient: {"\n    2 <- 0  # first-full\n    3 <- 0  # first-free\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2 <- 0  # first-full
    3 <- 0  # first-free
  ]
9990 transform: === transform_all()
9991 transform: --- collect surrounding spaces for recipe scenario-channel-initialization
9991 transform: --- transform names for recipe scenario-channel-initialization
9991 transform: --- transform braces for recipe scenario-channel-initialization
9991 transform: run ...
9991 transform: memory-should-contain ...
9991 transform: --- compute instruction operations for recipe scenario-channel-initialization
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-channel-initialization
 102 run: run [
    1:address:channel <- new-channel 3/capacity
    2:number <- get *1:address:channel, first-full:offset
    3:number <- get *1:address:channel, first-free:offset
  ]
9991 parse: --- defining run1001
9993 parse: instruction: new-channel
9993 parse:   ingredient: {"3": "literal", "capacity": <>}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- new-channel 3/capacity
9993 parse: instruction: get
9993 parse:   ingredient: {"*1": <"address" : <"channel" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"first-full": "offset"}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- get *1:address:channel, first-full:offset
9993 parse: instruction: get
9993 parse:   ingredient: {"*1": <"address" : <"channel" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"first-free": "offset"}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- get *1:address:channel, first-free:offset
9990 transform: === transform_all()
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9993 name: element first-full of type channel is at offset 0
9993 name: element first-free of type channel is at offset 1
9991 transform: --- transform braces for recipe run1001
9991 transform: new-channel ...
9991 transform: get ...
9991 transform: get ...
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:channel <- new-channel 3/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 104 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1002
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9998 run: address to copy is 1007
9999 mem: storing 1007 in location 1003
 104 run: *full <- copy 0
9999 mem: location 1003 is 1007
9999 mem: storing 0 in location 1007
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1004
 104 run: *free <- copy 0
9999 mem: location 1004 is 1008
9999 mem: storing 0 in location 1008
 104 run: capacity:number <- next-ingredient 
9999 mem: storing 3 in location 1005
 104 run: capacity <- add capacity, 1
9999 mem: location 1005 is 3
9999 mem: storing 4 in location 1005
 104 run: dest:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 104 run: *dest <- new character:type, capacity
9999 mem: location 1005 is 4
9999 mem: array size is 4
9999 mem: new alloc: 1010
9999 mem: location 1006 is 1009
9999 mem: storing 1010 in location 1009
 104 run: reply result
9999 mem: location 1002 is 1007
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: 2:number <- get *1:address:channel, first-full:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 2
 103 run: 3:number <- get *1:address:channel, first-free:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9998 run: address to copy is 1008
9998 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 3
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    2 <- 0  # first-full
    3 <- 0  # first-free
  ]
9999 run: checking location 2
9999 run: checking location 3
9999 trace: fall-through: exiting scenario-channel-initialization; decrementing callstack depth from 1
