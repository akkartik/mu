9991 parse: --- defining scenario_channel-initialization
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:channel <- new-channel 3/capacity\n    2:number <- get *1:address:shared:channel, first-full:offset\n    3:number <- get *1:address:shared:channel, first-free:offset\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:shared:channel <- new-channel 3/capacity
    2:number <- get *1:address:shared:channel, first-full:offset
    3:number <- get *1:address:shared:channel, first-free:offset
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2 <- 0  # first-full\n    3 <- 0  # first-free\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2 <- 0  # first-full
    3 <- 0  # first-free
  ]
9999 parse: recipe scenario_channel-initialization has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_channel-initialization
9991 transform: --- deduce types for recipe scenario_channel-initialization
9991 transform: --- collect surrounding spaces for recipe scenario_channel-initialization
9991 transform: --- transform names for recipe scenario_channel-initialization
9991 transform: --- resolve ambiguous calls for recipe scenario_channel-initialization
9991 transform: --- compute instruction operations for recipe scenario_channel-initialization
9991 transform: --- transform braces for recipe scenario_channel-initialization
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_channel-initialization
9991 transform: --- type-check 'call' instructions inside recipe scenario_channel-initialization
9991 transform: --- type-check calls inside recipe scenario_channel-initialization
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_channel-initialization
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_channel-initialization
 102 run: run [
    1:address:shared:channel <- new-channel 3/capacity
    2:number <- get *1:address:shared:channel, first-full:offset
    3:number <- get *1:address:shared:channel, first-free:offset
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": "literal", "capacity": <>}
9993 parse:   product: {"1": <"address" : <"shared" : <"channel" : <>>>>}
9992 load: after rewriting: 1:address:shared:channel <- new-channel 3/capacity
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"channel" : <>>>>, "lookup": <>}
9993 parse:   ingredient: {"first-full": "offset"}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- get *1:address:shared:channel, first-full:offset
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"channel" : <>>>>, "lookup": <>}
9993 parse:   ingredient: {"first-free": "offset"}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- get *1:address:shared:channel, first-free:offset
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: element first-full of type channel is at offset 0
9993 name: element first-free of type channel is at offset 1
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction 1:address:shared:channel <- new-channel 3/capacity
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 100
9992 transform: checking variant 0: recipe new-channel {"capacity": "number"} -> {"result": <"address" : <"shared" : <"channel" : <>>>>}
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 0: 100
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new-channel ...
9992 transform: get ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:channel <- new-channel 3/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 104 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1003
 104 run: result <- new channel:type
9999 mem: allocating size 4
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
9999 mem: incrementing refcount of 1008: 0 -> 1
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1005
 104 run: *full <- copy 0
9999 mem: location 1005 is 1009
9999 mem: storing 0 in location 1009
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1006
 104 run: *free <- copy 0
9999 mem: location 1006 is 1010
9999 mem: storing 0 in location 1010
 104 run: capacity <- add capacity, 1
9999 mem: location 1003 is 3
9999 mem: storing 4 in location 1003
 104 run: dest:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1007
 104 run: *dest <- new character:type, capacity
9999 mem: location 1003 is 4
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1012
9999 mem: storing 4 in location 1013
9999 mem: location 1007 is 1011
9999 mem: storing 1012 in location 1011
9999 mem: incrementing refcount of 1012: 0 -> 1
 104 run: reply result:address:shared:channel
9999 mem: location 1004 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1
9999 mem: incrementing refcount of 1008: 1 -> 2
 103 run: 2:number <- get *1:address:shared:channel, first-full:offset
9999 mem: location 1 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 2
 103 run: 3:number <- get *1:address:shared:channel, first-free:offset
9999 mem: location 1 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 0
9999 mem: storing 0 in location 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    2 <- 0  # first-full
    3 <- 0  # first-free
  ]
9999 run: checking location 2
9999 run: checking location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
