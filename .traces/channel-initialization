parse: instruction: run
parse:   ingredient: {name: "\n    1:address:channel <- new-channel 3:literal/capacity\n    2:number <- get 1:address:channel/deref, first-full:offset\n    3:number <- get 1:address:channel/deref, first-free:offset\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    2 <- 0  # first-full\n    3 <- 0  # first-free\n  ", properties: [_: "literal-string"]}
after-brace: recipe channel-initialization
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: channel-initialization
 101 run: run [
    1:address:channel <- new-channel 3:literal/capacity
    2:number <- get 1:address:channel/deref, first-full:offset
    3:number <- get 1:address:channel/deref, first-free:offset
  ]
parse: instruction: new-channel
parse:   ingredient: {name: "3", properties: ["3": "literal", "capacity": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "deref": ]}
parse:   ingredient: {name: "first-full", properties: ["first-full": "offset"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "deref": ]}
parse:   ingredient: {name: "first-free", properties: ["first-free": "offset"]}
parse:   product: {name: "3", properties: ["3": "number"]}
name: element first-full of type channel is at offset 0
name: element first-free of type channel is at offset 1
after-brace: recipe run1001
after-brace: new-channel ...
after-brace: get ...
after-brace: get ...
 101 run: 1:address:channel <- new-channel 3:literal/capacity
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1000
 102 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1031
9999 mem: storing 1031 in location 1002
 102 run: full:address:number <- get-address result:address:channel/deref, first-full:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1003
 102 run: full:address:number/deref <- copy 0:literal
9999 mem: location 1003 is 1031
9999 mem: storing 0 in location 1031
 102 run: free:address:number <- get-address result:address:channel/deref, first-free:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1004
 102 run: free:address:number/deref <- copy 0:literal
9999 mem: location 1004 is 1032
9999 mem: storing 0 in location 1032
 102 run: capacity:number <- next-ingredient 
9999 mem: storing 3 in location 1005
 102 run: capacity:number <- add capacity:number, 1:literal
9999 mem: location 1005 is 3
9999 mem: storing 4 in location 1005
 102 run: dest:address:address:array:location <- get-address result:address:channel/deref, data:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1006
 102 run: dest:address:address:array:location/deref <- new location:type, capacity:number
9999 mem: location 1005 is 4
9999 mem: array size is 4
9999 mem: new alloc: 1034
9999 mem: location 1006 is 1033
9999 mem: storing 1034 in location 1033
 102 run: reply result:address:channel
9999 mem: location 1002 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 1
 101 run: 2:number <- get 1:address:channel/deref, first-full:offset
9999 mem: location 1 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1 is 1031
9999 run: address to copy is 1031
9999 run: its type is number
9999 mem: location 1031 is 0
9999 mem: storing 0 in location 2
 101 run: 3:number <- get 1:address:channel/deref, first-free:offset
9999 mem: location 1 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1 is 1031
9999 run: address to copy is 1032
9999 run: its type is number
9999 mem: location 1032 is 0
9999 mem: storing 0 in location 3
 100 run: memory-should-contain [
    2 <- 0  # first-full
    3 <- 0  # first-free
  ]
9999 run: checking location 2
9999 run: checking location 3
