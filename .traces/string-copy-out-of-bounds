9991 load: --- defining scenario-string-copy-out-of-bounds
9993 parse: instruction: run
9993 parse:   ingredient: {"\n    1:address:array:character <- new [abc]\n    2:address:array:character <- string-copy 1:address:array:character, 2, 4\n    3:array:character <- copy *2:address:array:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:array:character <- new [abc]
    2:address:array:character <- string-copy 1:address:array:character, 2, 4
    3:array:character <- copy *2:address:array:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   ingredient: {"\n    3:string <- [c]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    3:string <- [c]
  ]
9990 transform: === transform_all()
9991 transform: --- collect surrounding spaces for recipe scenario-string-copy-out-of-bounds
9991 transform: --- transform names for recipe scenario-string-copy-out-of-bounds
9991 transform: --- transform braces for recipe scenario-string-copy-out-of-bounds
9991 transform: run ...
9991 transform: memory-should-contain ...
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-string-copy-out-of-bounds
 102 run: run [
    1:address:array:character <- new [abc]
    2:address:array:character <- string-copy 1:address:array:character, 2, 4
    3:array:character <- copy *2:address:array:character
  ]
9991 load: --- defining run1001
9993 parse: instruction: new
9993 parse:   ingredient: {"abc": "literal-string"}
9993 parse:   product: {"1": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:array:character <- new [abc]
9993 parse: instruction: string-copy
9993 parse:   ingredient: {"1": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   ingredient: {"2": "literal"}
9993 parse:   ingredient: {"4": "literal"}
9993 parse:   product: {"2": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: 2:address:array:character <- string-copy 1:address:array:character, 2, 4
9993 parse: instruction: copy
9993 parse:   ingredient: {"*2": <"address" : <"array" : <"character" : <>>>>, "lookup": <>}
9993 parse:   product: {"3": <"array" : <"character" : <>>>}
9992 load: after rewriting: 3:array:character <- copy *2:address:array:character
9990 transform: === transform_all()
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- transform braces for recipe run1001
9991 transform: new ...
9991 transform: string-copy ...
9991 transform: copy ...
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:array:character <- new [abc]
9999 mem: storing 1000 in location 1
 103 run: 2:address:array:character <- string-copy 1:address:array:character, 2, 4
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1004
 104 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1006
 104 run: start:number <- next-ingredient 
9999 mem: storing 2 in location 1007
 104 run: end:number <- next-ingredient 
9999 mem: storing 4 in location 1008
 104 run: len:number <- length *buf
9999 mem: location 1006 is 1000
9999 mem: storing 3 in location 1009
 104 run: end:number <- min len, end
9999 mem: location 1009 is 3
9999 mem: location 1008 is 4
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1016
 105 run: x:number <- next-ingredient 
9999 mem: storing 3 in location 1018
 105 run: y:number <- next-ingredient 
9999 mem: storing 4 in location 1019
 105 run: return-x?:boolean <- lesser-than x, y
9999 mem: location 1018 is 3
9999 mem: location 1019 is 4
9999 mem: storing 1 in location 1020
 105 run: break-if return-x?, 
9999 mem: location 1020 is 1
9999 run: jumping to instruction 7
 105 run: reply x
9999 mem: location 1018 is 3
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 3
9999 mem: storing 3 in location 1008
 104 run: len <- subtract end, start
9999 mem: location 1008 is 3
9999 mem: location 1007 is 2
9999 mem: storing 1 in location 1009
 104 run: result:address:array:character <- new character:type, len
9999 mem: location 1009 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1021
9999 mem: storing 1021 in location 1010
 104 run: src-idx:number <- copy start
9999 mem: location 1007 is 2
9999 mem: storing 2 in location 1011
 104 run: dest-idx:number <- copy 0
9999 mem: storing 0 in location 1012
 104 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1011 is 2
9999 mem: location 1008 is 3
9999 mem: storing 0 in location 1013
 104 run: break-if done?, 
9999 mem: location 1013 is 0
9999 run: jump-if fell through
 104 run: src:character <- index *buf, src-idx
9999 mem: location 1006 is 1000
9999 mem: location 1011 is 2
9999 run: address to copy is 1003
9999 run: its type is character
9999 mem: location 1003 is 99
9999 mem: storing 99 in location 1014
 104 run: dest:address:character <- index-address *result, dest-idx
9999 mem: location 1010 is 1021
9999 mem: location 1012 is 0
9999 mem: storing 1022 in location 1015
 104 run: *dest <- copy src
9999 mem: location 1014 is 99
9999 mem: location 1015 is 1022
9999 mem: storing 99 in location 1022
 104 run: src-idx <- add src-idx, 1
9999 mem: location 1011 is 2
9999 mem: storing 3 in location 1011
 104 run: dest-idx <- add dest-idx, 1
9999 mem: location 1012 is 0
9999 mem: storing 1 in location 1012
 104 run: loop 
9999 run: jumping to instruction 11
 104 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1011 is 3
9999 mem: location 1008 is 3
9999 mem: storing 1 in location 1013
 104 run: break-if done?, 
9999 mem: location 1013 is 1
9999 run: jumping to instruction 19
 104 run: reply result
9999 mem: location 1010 is 1021
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1021
9999 mem: storing 1021 in location 2
 103 run: 3:array:character <- copy *2:address:array:character
9999 mem: location 2 is 1021
9999 mem: location 1021 is 1
9999 mem: location 1022 is 99
9999 mem: storing 1 in location 3
9999 mem: storing 99 in location 4
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    3:string <- [c]
  ]
9999 run: checking string length at 3
9999 run: checking location 4
9999 trace: fall-through: exiting scenario-string-copy-out-of-bounds; decrementing callstack depth from 1
