c{0: 0 (((default-space space-address)) <- ((next-input))) -- nil
c{0: 1 (((1 integer)) <- ((add)) ((1 integer)) ((1 literal))) -- nil
c{0: 2 (((reply)) ((1 integer))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((next-input)))
c{1: 1 ✓ (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
c{1: 2 ✓ (((reply)) ((1 integer)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((1 integer)) <- ((copy)) ((3 literal))) -- nil
c{0: 2 (((reply)) ((default-space space-address))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((1 integer)) <- ((copy)) ((3 literal)))
c{1: 2 ✓ (((reply)) ((default-space space-address)))
c{0: 0 (((1 space-address)) <- ((init-counter))) -- nil
c{0: 1 (((2 integer)) <- ((increment-counter)) ((1 space-address))) -- nil
c{0: 2 (((3 integer)) <- ((increment-counter)) ((1 space-address))) -- nil
c{1: 0 ✓ (((1 space-address)) <- ((init-counter)))
c{1: 1 ✓ (((2 integer)) <- ((increment-counter)) ((1 space-address)))
c{1: 2 ✓ (((3 integer)) <- ((increment-counter)) ((1 space-address)))
cn0: convert-names in increment-counter
cn0: (((default-space space-address)) <- ((next-input))) nil nil
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal))) nil nil
cn0: checking arg ((1 integer))
maybe-add: ((1 integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((reply)) ((1 integer))) nil nil
cn0: checking arg ((1 integer))
maybe-add: ((1 integer))
cn0: convert-names in init-counter
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((1 integer)) <- ((copy)) ((3 literal))) nil nil
cn0: checking arg ((3 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((reply)) ((default-space space-address))) nil nil
cn0: checking arg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: convert-names in main
cn0: (((1 space-address)) <- ((init-counter))) nil nil
cn0: checking oarg ((1 space-address))
maybe-add: ((1 space-address))
cn0: (((2 integer)) <- ((increment-counter)) ((1 space-address))) nil nil
cn0: checking arg ((1 space-address))
maybe-add: ((1 space-address))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: (((3 integer)) <- ((increment-counter)) ((1 space-address))) nil nil
cn0: checking arg ((1 space-address))
maybe-add: ((1 space-address))
cn0: checking oarg ((3 integer))
maybe-add: ((3 integer))
cn1: (((default-space space-address)) <- ((next-input)))
cn1: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
cn1: (((reply)) ((1 integer)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 integer)) <- ((copy)) ((3 literal)))
cn1: (((reply)) ((default-space space-address)))
cn1: (((1 space-address)) <- ((init-counter)))
cn1: (((2 integer)) <- ((increment-counter)) ((1 space-address)))
cn1: (((3 integer)) <- ((increment-counter)) ((1 space-address)))
schedule: main
run: main 0: (((1 space-address)) <- ((init-counter)))
run: init-counter/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-counter/main 0: 1000 => ((default-space space-address))
run: init-counter/main 1: (((1 integer)) <- ((copy)) ((3 literal)))
run: init-counter/main 1: 3 => ((1 integer))
mem: ((1 integer)): 1002 <= 3
run: init-counter/main 2: (((reply)) ((default-space space-address)))
run: main 0: 1000 => ((1 space-address))
mem: ((1 space-address)): 1 <= 1000
run: main 1: (((2 integer)) <- ((increment-counter)) ((1 space-address)))
mem: ((1 space-address)) => 1000
run: increment-counter/main 0: (((default-space space-address)) <- ((next-input)))
arg: nil 0 (1000)
run: increment-counter/main 0: 1000 => ((default-space space-address))
run: increment-counter/main 1: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 3
run: increment-counter/main 1: 4 => ((1 integer))
mem: ((1 integer)): 1002 <= 4
run: increment-counter/main 2: (((reply)) ((1 integer)))
mem: ((1 integer)) => 4
run: main 1: 4 => ((2 integer))
mem: ((2 integer)): 2 <= 4
run: main 2: (((3 integer)) <- ((increment-counter)) ((1 space-address)))
mem: ((1 space-address)) => 1000
run: increment-counter/main 0: (((default-space space-address)) <- ((next-input)))
arg: nil 0 (1000)
run: increment-counter/main 0: 1000 => ((default-space space-address))
run: increment-counter/main 1: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 4
run: increment-counter/main 1: 5 => ((1 integer))
mem: ((1 integer)): 1002 <= 5
run: increment-counter/main 2: (((reply)) ((1 integer)))
mem: ((1 integer)) => 5
run: main 2: 5 => ((3 integer))
mem: ((3 integer)): 3 <= 5
schedule: done with routine nil
