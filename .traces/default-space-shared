schedule: main
run: 1 main 0: (((1 space-address)) <- ((init-counter)))
run: 2 init-counter 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
sizeof: ((_ location))
run: 1000 => ((default-space space-address))
sizeof: ((default-space space-address))
run: 3 init-counter 1: (((1 integer)) <- ((copy)) ((3 literal)))
run: 3 => ((1 integer))
setm: ((1 integer)) <= 3
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1002 to 3
run: 4 init-counter 2: (((reply)) ((default-space space-address)))
reply: (((default-space space-address))) (((1 space-address)))
reply: 1000 => ((1 space-address))
setm: ((1 space-address)) <= 1000
setm: size of ((1 space-address)) is 1
setm: ((1 space-address)): setting 1 to 1000
run: 5 main 1: (((2 integer)) <- ((increment-counter)) ((1 space-address)))
m: ((1 space-address))
sizeof: ((1 space-address))
run: 6 increment-counter 0: (((default-space space-address)) <- ((next-input)))
arg: nil 0 (1000)
run: 1000 => ((default-space space-address))
sizeof: ((default-space space-address))
run: 7 increment-counter 1: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: 4 => ((1 integer))
setm: ((1 integer)) <= 4
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1002 to 4
run: 8 increment-counter 2: (((reply)) ((1 integer)))
m: ((1 integer))
sizeof: ((1 integer))
reply: (((1 integer))) (((2 integer)))
reply: 4 => ((2 integer))
setm: ((2 integer)) <= 4
setm: size of ((2 integer)) is 1
setm: ((2 integer)): setting 2 to 4
run: 9 main 2: (((3 integer)) <- ((increment-counter)) ((1 space-address)))
m: ((1 space-address))
sizeof: ((1 space-address))
run: 10 increment-counter 0: (((default-space space-address)) <- ((next-input)))
arg: nil 0 (1000)
run: 1000 => ((default-space space-address))
sizeof: ((default-space space-address))
run: 11 increment-counter 1: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: 5 => ((1 integer))
setm: ((1 integer)) <= 5
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1002 to 5
run: 12 increment-counter 2: (((reply)) ((1 integer)))
m: ((1 integer))
sizeof: ((1 integer))
reply: (((1 integer))) (((3 integer)))
reply: 5 => ((3 integer))
setm: ((3 integer)) <= 5
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 5
schedule: done with routine 
