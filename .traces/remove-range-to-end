9991 parse: --- defining scenario-remove-range-to-end
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"18": "literal"}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:duplex-list:character <- push 18, 0
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"17": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:duplex-list:character <- push 17, 1:address:duplex-list:character
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"16": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:duplex-list:character <- push 16, 1:address:duplex-list:character
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"15": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:duplex-list:character <- push 15, 1:address:duplex-list:character
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"14": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:duplex-list:character <- push 14, 1:address:duplex-list:character
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"13": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:duplex-list:character <- push 13, 1:address:duplex-list:character
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    # delete 15, 16 and 17\n    # first pointer: to the third element\n    2:address:duplex-list:character <- next 1:address:duplex-list:character\n    # second pointer: to the fifth element\n    3:address:duplex-list:character <- next 2:address:duplex-list:character\n    3:address:duplex-list:character <- next 3:address:duplex-list:character\n    3:address:duplex-list:character <- next 3:address:duplex-list:character\n    3:address:duplex-list:character <- next 3:address:duplex-list:character\n    remove-between 2:address:duplex-list:character, 3:address:duplex-list:character\n    # now check the list\n    4:character <- get *1:address:duplex-list:character, value:offset\n    5:address:duplex-list:character <- next 1:address:duplex-list:character\n    6:character <- get *5:address:duplex-list:character, value:offset\n    7:address:duplex-list:character <- next 5:address:duplex-list:character\n    8:character <- get *7:address:duplex-list:character, value:offset\n    9:address:duplex-list:character <- next 7:address:duplex-list:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    # delete 15, 16 and 17
    # first pointer: to the third element
    2:address:duplex-list:character <- next 1:address:duplex-list:character
    # second pointer: to the fifth element
    3:address:duplex-list:character <- next 2:address:duplex-list:character
    3:address:duplex-list:character <- next 3:address:duplex-list:character
    3:address:duplex-list:character <- next 3:address:duplex-list:character
    3:address:duplex-list:character <- next 3:address:duplex-list:character
    remove-between 2:address:duplex-list:character, 3:address:duplex-list:character
    # now check the list
    4:character <- get *1:address:duplex-list:character, value:offset
    5:address:duplex-list:character <- next 1:address:duplex-list:character
    6:character <- get *5:address:duplex-list:character, value:offset
    7:address:duplex-list:character <- next 5:address:duplex-list:character
    8:character <- get *7:address:duplex-list:character, value:offset
    9:address:duplex-list:character <- next 7:address:duplex-list:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    4 <- 13\n    6 <- 14\n    8 <- 18\n    9 <- 0\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    4 <- 13
    6 <- 14
    8 <- 18
    9 <- 0
  ]
9999 parse: recipe scenario-remove-range-to-end has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-remove-range-to-end
9991 transform: --- transform braces for recipe scenario-remove-range-to-end
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- deduce types for recipe scenario-remove-range-to-end
9991 transform: --- resolve ambiguous calls for recipe scenario-remove-range-to-end
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9992 transform: checking variant 9: -1
9992 transform: checking variant 10: -1
9992 transform: checking variant 11: -1
9992 transform: checking variant 12: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: mismatch: product 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 1
9992 transform: final score: 100
9992 transform: matches
9992 transform: found variant to specialize: 237 push_2
9993 transform: switching push to push_3
9993 transform: compute type names: push_3
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"in": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform: type of in is <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"result": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform: type of result is <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: x:_elem <- next-ingredient 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: in:address:duplex-list:_elem <- next-ingredient 
9994 transform:     checking {"in": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform:   instruction: result <- new {(duplex-list _elem): type}
9994 transform:     checking {"(duplex-list _elem)": "type"}: "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform:   instruction: val:address:_elem <- get-address *result, value:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"val": <"address" : <"_elem" : <>>>}: <"address" : <"_elem" : <>>>
9993 transform: type of val is <"address" : <"_elem" : <>>>
9993 transform:   instruction: *val <- copy x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"val": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"_elem" : <>>>
9993 transform:   instruction: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"next": <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: type of next is <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: *next <- copy in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"next": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: jump-if in, 1:offset
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"1": "offset"}: "offset"
9993 transform:   instruction: reply 
9993 transform:   instruction: prev:address:address:duplex-list:_elem <- get-address *in, prev:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"prev": "offset"}: "offset"
9994 transform:     checking {"prev": <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: type of prev is <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: *prev <- copy result
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"prev": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: adding mapping from _elem to "literal"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in instruction 'in:address:duplex-list:_elem <- next-ingredient '
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in instruction 'result <- new {(duplex-list _elem): type}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform:   after: ?0
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'val:address:_elem <- get-address *result, value:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient val:address:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9993 transform: replacing in instruction '*val <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in ingredient *val
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9993 transform: replacing in instruction 'next:address:address:duplex-list:_elem <- get-address *result, next:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient next:address:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction '*next <- copy in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient *next
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'jump-if in, 1:offset'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient 1:offset
9993 transform:   after: ?0
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction 'prev:address:address:duplex-list:_elem <- get-address *in, prev:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient prev:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient prev:address:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction '*prev <- copy result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient *prev
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9992 transform: transforming new specialization: push_3
9991 transform: --- checking reply instructions against header for push_3
9991 transform: --- fill in reply ingredients from header for recipe push_3
9991 transform: --- transform braces for recipe push_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: reply-unless ...
9992 transform:  ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- deduce types for recipe push_3
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: x => character
9992 transform: in => <address : <duplex-list : <character : <>>>>
9992 transform: result => <address : <duplex-list : <character : <>>>>
9992 transform: val => <address : <character : <>>>
9992 transform: next => <address : <address : <duplex-list : <character : <>>>>>
9992 transform: prev => <address : <address : <duplex-list : <character : <>>>>>
9991 transform: --- deduce types from header for push_3
9993 transform: type of x is character
9993 transform: type of in is <address : <duplex-list : <character : <>>>>
9993 transform: type of result is <address : <duplex-list : <character : <>>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: x:_elem <- next-ingredient 
9993 transform:   product: x: character -- {"x": "character"}
9992 transform: instruction: in:address:duplex-list:_elem <- next-ingredient 
9993 transform:   product: in: <address : <duplex-list : <character : <>>>> -- {"in": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 transform: instruction: result <- new {(duplex-list _elem): type}
9993 transform:   product: result: <address : <duplex-list : <character : <>>>> -- {"result": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 transform: instruction: val:address:_elem <- get-address *result, value:offset
9993 transform:   product: val: <address : <character : <>>> -- {"val": <"address" : <"character" : <>>>}
9992 transform: instruction: *val <- copy x
9993 transform:   product: val: <address : <character : <>>> -- {"val": <"address" : <"character" : <>>>, "lookup": <>}
9992 transform: instruction: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9993 transform:   product: next: <address : <address : <duplex-list : <character : <>>>>> -- {"next": <"address" : <"address" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: *next <- copy in
9993 transform:   product: next: <address : <address : <duplex-list : <character : <>>>>> -- {"next": <"address" : <"address" : <"duplex-list" : <"character" : <>>>>>, "lookup": <>}
9992 transform: instruction: jump-if in, 1:offset
9992 transform: instruction: reply result:address:duplex-list:_elem
9992 transform: instruction: prev:address:address:duplex-list:_elem <- get-address *in, prev:offset
9993 transform:   product: prev: <address : <address : <duplex-list : <character : <>>>>> -- {"prev": <"address" : <"address" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: *prev <- copy result
9993 transform:   product: prev: <address : <address : <duplex-list : <character : <>>>>> -- {"prev": <"address" : <"address" : <"duplex-list" : <"character" : <>>>>>, "lookup": <>}
9992 transform: instruction: reply result:address:duplex-list:_elem
9991 transform: --- resolve ambiguous calls for recipe push_3
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9991 transform: --- checking reply instructions against header for push_3
9991 transform: --- collect surrounding spaces for recipe push_3
9991 transform: --- transform names for recipe push_3
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element value of type duplex-list is at offset 0
9993 name: assign val 4
9993 name: element next of type duplex-list is at offset 1
9993 name: assign next 5
9993 name: element prev of type duplex-list is at offset 2
9993 name: assign prev 6
9991 transform: --- compute instruction operations for recipe push_3
9991 transform: --- perform checks for recipe push_3
9991 transform: --- convert 'new' to 'allocate' for recipe push_3
9992 new: size of "location" is 1
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9992 new: size of <"duplex-list" : <"character" : <>>> is 3
9992 transform: new specialization: push_3
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9992 transform: checking variant 9: -1
9992 transform: checking variant 10: -1
9992 transform: checking variant 11: -1
9992 transform: checking variant 12: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 13: 100
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9992 transform: checking variant 9: -1
9992 transform: checking variant 10: -1
9992 transform: checking variant 11: -1
9992 transform: checking variant 12: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 13: 100
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9992 transform: checking variant 9: -1
9992 transform: checking variant 10: -1
9992 transform: checking variant 11: -1
9992 transform: checking variant 12: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 13: 100
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9992 transform: checking variant 9: -1
9992 transform: checking variant 10: -1
9992 transform: checking variant 11: -1
9992 transform: checking variant 12: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 13: 100
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9992 transform: checking variant 9: -1
9992 transform: checking variant 10: -1
9992 transform: checking variant 11: -1
9992 transform: checking variant 12: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 13: 100
9991 transform: --- collect surrounding spaces for recipe scenario-remove-range-to-end
9991 transform: --- transform names for recipe scenario-remove-range-to-end
9991 transform: --- compute instruction operations for recipe scenario-remove-range-to-end
9991 transform: --- perform checks for recipe scenario-remove-range-to-end
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-remove-range-to-end
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-remove-range-to-end
 102 run: 1:address:duplex-list:character <- push_3 18, 0
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1000
 103 run: x:_elem <- next-ingredient 
9999 mem: storing 18 in location 1002
 103 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 0 in location 1003
 103 run: result <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
 103 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1005
 103 run: *val <- copy x
9999 mem: location 1002 is 18
9999 mem: location 1005 is 1008
9999 mem: storing 18 in location 1008
 103 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 18
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 103 run: *next <- copy in
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1009
9999 mem: storing 0 in location 1009
 103 run: jump-if in, 1:offset
9999 mem: location 1003 is 0
9998 run: jump-if fell through
 103 run: reply result:address:duplex-list:_elem
9999 mem: location 1004 is 1008
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1
 102 run: 1:address:duplex-list:character <- push_3 17, 1:address:duplex-list:character
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 103 run: x:_elem <- next-ingredient 
9999 mem: storing 17 in location 1002
 103 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1008 in location 1003
 103 run: result <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1011
9999 mem: storing 1011 in location 1004
 103 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1004 is 1011
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 103 run: *val <- copy x
9999 mem: location 1002 is 17
9999 mem: location 1005 is 1011
9999 mem: storing 17 in location 1011
 103 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1011 is 17
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1004 is 1011
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 103 run: *next <- copy in
9999 mem: location 1003 is 1008
9999 mem: location 1006 is 1012
9999 mem: storing 1008 in location 1012
 103 run: jump-if in, 1:offset
9999 mem: location 1003 is 1008
9998 run: jumping to instruction 10
 103 run: prev:address:address:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1003 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 18
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1003 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1007
 103 run: *prev <- copy result
9999 mem: location 1004 is 1011
9999 mem: location 1007 is 1010
9999 mem: storing 1011 in location 1010
 103 run: reply result:address:duplex-list:_elem
9999 mem: location 1004 is 1011
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 1
 102 run: 1:address:duplex-list:character <- push_3 16, 1:address:duplex-list:character
9999 mem: location 1 is 1011
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 103 run: x:_elem <- next-ingredient 
9999 mem: storing 16 in location 1002
 103 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1003
 103 run: result <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1014
9999 mem: storing 1014 in location 1004
 103 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1014
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1005
 103 run: *val <- copy x
9999 mem: location 1002 is 16
9999 mem: location 1005 is 1014
9999 mem: storing 16 in location 1014
 103 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 16
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1014
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1006
 103 run: *next <- copy in
9999 mem: location 1003 is 1011
9999 mem: location 1006 is 1015
9999 mem: storing 1011 in location 1015
 103 run: jump-if in, 1:offset
9999 mem: location 1003 is 1011
9998 run: jumping to instruction 10
 103 run: prev:address:address:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1003 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1011 is 17
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 0
9999 mem: location 1003 is 1011
9999 type: type deduced to be character$
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1007
 103 run: *prev <- copy result
9999 mem: location 1004 is 1014
9999 mem: location 1007 is 1013
9999 mem: storing 1014 in location 1013
 103 run: reply result:address:duplex-list:_elem
9999 mem: location 1004 is 1014
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 1
 102 run: 1:address:duplex-list:character <- push_3 15, 1:address:duplex-list:character
9999 mem: location 1 is 1014
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 103 run: x:_elem <- next-ingredient 
9999 mem: storing 15 in location 1002
 103 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1014 in location 1003
 103 run: result <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1017
9999 mem: storing 1017 in location 1004
 103 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1004 is 1017
9998 run: address to copy is 1017
9999 mem: storing 1017 in location 1005
 103 run: *val <- copy x
9999 mem: location 1002 is 15
9999 mem: location 1005 is 1017
9999 mem: storing 15 in location 1017
 103 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1017 is 15
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1004 is 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1018
9999 mem: storing 1018 in location 1006
 103 run: *next <- copy in
9999 mem: location 1003 is 1014
9999 mem: location 1006 is 1018
9999 mem: storing 1014 in location 1018
 103 run: jump-if in, 1:offset
9999 mem: location 1003 is 1014
9998 run: jumping to instruction 10
 103 run: prev:address:address:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1003 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 16
9999 mem: location 1015 is 1011
9999 mem: location 1016 is 0
9999 mem: location 1003 is 1014
9999 type: type deduced to be character$
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1007
 103 run: *prev <- copy result
9999 mem: location 1004 is 1017
9999 mem: location 1007 is 1016
9999 mem: storing 1017 in location 1016
 103 run: reply result:address:duplex-list:_elem
9999 mem: location 1004 is 1017
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1017
9999 mem: storing 1017 in location 1
 102 run: 1:address:duplex-list:character <- push_3 14, 1:address:duplex-list:character
9999 mem: location 1 is 1017
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 103 run: x:_elem <- next-ingredient 
9999 mem: storing 14 in location 1002
 103 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1017 in location 1003
 103 run: result <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1020
9999 mem: storing 1020 in location 1004
 103 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1020
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1004 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1005
 103 run: *val <- copy x
9999 mem: location 1002 is 14
9999 mem: location 1005 is 1020
9999 mem: storing 14 in location 1020
 103 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1020
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1020 is 14
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1004 is 1020
9999 type: type deduced to be character$
9998 run: address to copy is 1021
9999 mem: storing 1021 in location 1006
 103 run: *next <- copy in
9999 mem: location 1003 is 1017
9999 mem: location 1006 is 1021
9999 mem: storing 1017 in location 1021
 103 run: jump-if in, 1:offset
9999 mem: location 1003 is 1017
9998 run: jumping to instruction 10
 103 run: prev:address:address:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1003 is 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1017 is 15
9999 mem: location 1018 is 1014
9999 mem: location 1019 is 0
9999 mem: location 1003 is 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1019
9999 mem: storing 1019 in location 1007
 103 run: *prev <- copy result
9999 mem: location 1004 is 1020
9999 mem: location 1007 is 1019
9999 mem: storing 1020 in location 1019
 103 run: reply result:address:duplex-list:_elem
9999 mem: location 1004 is 1020
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1
 102 run: 1:address:duplex-list:character <- push_3 13, 1:address:duplex-list:character
9999 mem: location 1 is 1020
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 103 run: x:_elem <- next-ingredient 
9999 mem: storing 13 in location 1002
 103 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1020 in location 1003
 103 run: result <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1023
9999 mem: storing 1023 in location 1004
 103 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1023
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1004 is 1023
9998 run: address to copy is 1023
9999 mem: storing 1023 in location 1005
 103 run: *val <- copy x
9999 mem: location 1002 is 13
9999 mem: location 1005 is 1023
9999 mem: storing 13 in location 1023
 103 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1023
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1023 is 13
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1004 is 1023
9999 type: type deduced to be character$
9998 run: address to copy is 1024
9999 mem: storing 1024 in location 1006
 103 run: *next <- copy in
9999 mem: location 1003 is 1020
9999 mem: location 1006 is 1024
9999 mem: storing 1020 in location 1024
 103 run: jump-if in, 1:offset
9999 mem: location 1003 is 1020
9998 run: jumping to instruction 10
 103 run: prev:address:address:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1003 is 1020
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1020 is 14
9999 mem: location 1021 is 1017
9999 mem: location 1022 is 0
9999 mem: location 1003 is 1020
9999 type: type deduced to be character$
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1007
 103 run: *prev <- copy result
9999 mem: location 1004 is 1023
9999 mem: location 1007 is 1022
9999 mem: storing 1023 in location 1022
 103 run: reply result:address:duplex-list:_elem
9999 mem: location 1004 is 1023
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1023
9999 mem: storing 1023 in location 1
 102 run: run [
    # delete 15, 16 and 17
    # first pointer: to the third element
    2:address:duplex-list:character <- next 1:address:duplex-list:character
    # second pointer: to the fifth element
    3:address:duplex-list:character <- next 2:address:duplex-list:character
    3:address:duplex-list:character <- next 3:address:duplex-list:character
    3:address:duplex-list:character <- next 3:address:duplex-list:character
    3:address:duplex-list:character <- next 3:address:duplex-list:character
    remove-between 2:address:duplex-list:character, 3:address:duplex-list:character
    # now check the list
    4:character <- get *1:address:duplex-list:character, value:offset
    5:address:duplex-list:character <- next 1:address:duplex-list:character
    6:character <- get *5:address:duplex-list:character, value:offset
    7:address:duplex-list:character <- next 5:address:duplex-list:character
    8:character <- get *7:address:duplex-list:character, value:offset
    9:address:duplex-list:character <- next 7:address:duplex-list:character
  ]
9991 parse: --- defining run1002
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 2:address:duplex-list:character <- next 1:address:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 3:address:duplex-list:character <- next 2:address:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 3:address:duplex-list:character <- next 3:address:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 3:address:duplex-list:character <- next 3:address:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 3:address:duplex-list:character <- next 3:address:duplex-list:character
9993 parse: instruction: remove-between
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   ingredient: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: remove-between 2:address:duplex-list:character, 3:address:duplex-list:character
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>, "lookup": <>}
9993 parse:   ingredient: {"value": "offset"}
9993 parse:   product: {"4": "character"}
9992 load: after rewriting: 4:character <- get *1:address:duplex-list:character, value:offset
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"5": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 5:address:duplex-list:character <- next 1:address:duplex-list:character
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"5": <"address" : <"duplex-list" : <"character" : <>>>>, "lookup": <>}
9993 parse:   ingredient: {"value": "offset"}
9993 parse:   product: {"6": "character"}
9992 load: after rewriting: 6:character <- get *5:address:duplex-list:character, value:offset
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"5": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"7": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 7:address:duplex-list:character <- next 5:address:duplex-list:character
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"7": <"address" : <"duplex-list" : <"character" : <>>>>, "lookup": <>}
9993 parse:   ingredient: {"value": "offset"}
9993 parse:   product: {"8": "character"}
9992 load: after rewriting: 8:character <- get *7:address:duplex-list:character, value:offset
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"7": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"9": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 9:address:duplex-list:character <- next 7:address:duplex-list:character
9999 parse: recipe run1002 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1002
9991 transform: --- transform braces for recipe run1002
9992 transform: next ...
9992 transform: next ...
9992 transform: next ...
9992 transform: next ...
9992 transform: next ...
9992 transform: remove-between ...
9992 transform: get ...
9992 transform: next ...
9992 transform: get ...
9992 transform: next ...
9992 transform: get ...
9992 transform: next ...
9992 transform:  ...
9991 transform: --- deduce types for recipe run1002
9991 transform: --- resolve ambiguous calls for recipe run1002
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 100
9992 transform: matches
9992 transform: found variant to specialize: 239 next
9993 transform: switching next to next_2
9993 transform: compute type names: next_2
9994 transform:     checking {"in": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform: type of in is <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"result": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform: type of result is <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: in:address:duplex-list:_elem <- next-ingredient 
9994 transform:     checking {"in": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform:   instruction: jump-if in, 1:offset
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"1": "offset"}: "offset"
9993 transform:   instruction: reply 0
9994 transform:     checking {"0": "literal"}: "literal"
9993 transform: type of 0 is "literal"
9993 transform:   instruction: result <- get *in, next:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform: adding mapping from _elem to "character"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'in:address:duplex-list:_elem <- next-ingredient '
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in instruction 'jump-if in, 1:offset'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient 1:offset
9993 transform:   after: ?0
9993 transform: replacing in instruction 'reply 0'
9993 transform: replacing in ingredient 0
9993 transform:   after: ?0
9993 transform: replacing in instruction 'result <- get *in, next:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9992 transform: transforming new specialization: next_2
9991 transform: --- checking reply instructions against header for next_2
9991 transform: --- fill in reply ingredients from header for recipe next_2
9991 transform: --- transform braces for recipe next_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: reply-unless ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- deduce types for recipe next_2
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: in => <address : <duplex-list : <character : <>>>>
9992 transform: result => <address : <duplex-list : <character : <>>>>
9991 transform: --- deduce types from header for next_2
9993 transform: type of in is <address : <duplex-list : <character : <>>>>
9993 transform: type of result is <address : <duplex-list : <character : <>>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: in:address:duplex-list:_elem <- next-ingredient 
9993 transform:   product: in: <address : <duplex-list : <character : <>>>> -- {"in": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 transform: instruction: jump-if in, 1:offset
9992 transform: instruction: reply 0
9992 transform: instruction: result <- get *in, next:offset
9993 transform:   product: result: <address : <duplex-list : <character : <>>>> -- {"result": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 transform: instruction: reply result:address:duplex-list:_elem
9991 transform: --- resolve ambiguous calls for recipe next_2
9991 transform: --- checking reply instructions against header for next_2
9991 transform: --- collect surrounding spaces for recipe next_2
9991 transform: --- transform names for recipe next_2
9993 name: assign in 1
9993 name: element next of type duplex-list is at offset 1
9993 name: assign result 2
9991 transform: --- compute instruction operations for recipe next_2
9991 transform: --- perform checks for recipe next_2
9991 transform: --- convert 'new' to 'allocate' for recipe next_2
9992 new: size of "location" is 1
9992 transform: new specialization: next_2
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: checking variant 9: 100
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: checking variant 9: 100
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: checking variant 9: 100
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: checking variant 9: 100
9992 transform: instruction remove-between
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 99
9992 transform: matches
9992 transform: found variant to specialize: 243 remove-between
9993 transform: switching remove-between to remove-between_2
9993 transform: compute type names: remove-between_2
9994 transform:     checking {"start": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform: type of start is <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"end": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform: type of end is <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"start": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: start:address:duplex-list:_elem <- next-ingredient 
9994 transform:     checking {"start": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform:   instruction: end:address:duplex-list:_elem <- next-ingredient 
9994 transform:     checking {"end": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform:   instruction: jump-if start, 1:offset
9994 transform:     checking {"start": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"1": "offset"}: "offset"
9993 transform:   instruction: reply 
9993 transform:   instruction: next:address:address:duplex-list:_elem <- get-address *start, next:offset
9994 transform:     checking {"start": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"next": <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: type of next is <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: nothing-to-delete?:boolean <- equal *next, end
9994 transform:     checking {"next": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"end": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"nothing-to-delete?": "boolean"}: "boolean"
9993 transform: type of nothing-to-delete? is "boolean"
9993 transform:   instruction: jump-unless nothing-to-delete?, 1:offset
9994 transform:     checking {"nothing-to-delete?": <>}: <>
9994 transform:     deducing type to "boolean"
9994 transform:     checking {"1": "offset"}: "offset"
9993 transform:   instruction: reply 
9993 transform:   instruction: prev:address:address:duplex-list:_elem <- get-address **next, prev:offset
9994 transform:     checking {"next": <>, "lookup": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"prev": "offset"}: "offset"
9994 transform:     checking {"prev": <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: type of prev is <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: *prev <- copy 0
9994 transform:     checking {"0": "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {"prev": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: *next <- copy end
9994 transform:     checking {"end": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"next": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: jump-if end, 1:offset
9994 transform:     checking {"end": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"1": "offset"}: "offset"
9993 transform:   instruction: reply 
9993 transform:   instruction: prev <- get-address *end, prev:offset
9994 transform:     checking {"end": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"prev": "offset"}: "offset"
9994 transform:     checking {"prev": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: next <- get-address **prev, next:offset
9994 transform:     checking {"prev": <>, "lookup": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"next": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: *next <- copy 0
9994 transform:     checking {"0": "literal"}: "literal"
9994 transform:     checking {"next": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: *prev <- copy start
9994 transform:     checking {"start": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"prev": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: adding mapping from _elem to "character"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient start:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient end:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient start:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'start:address:duplex-list:_elem <- next-ingredient '
9993 transform: replacing in ingredient start:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in instruction 'end:address:duplex-list:_elem <- next-ingredient '
9993 transform: replacing in ingredient end:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in instruction 'jump-if start, 1:offset'
9993 transform: replacing in ingredient start
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient 1:offset
9993 transform:   after: ?0
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction 'next:address:address:duplex-list:_elem <- get-address *start, next:offset'
9993 transform: replacing in ingredient *start
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient next:address:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'nothing-to-delete?:boolean <- equal *next, end'
9993 transform: replacing in ingredient *next
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient end
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient nothing-to-delete?:boolean
9993 transform:   after: boolean
9993 transform: replacing in instruction 'jump-unless nothing-to-delete?, 1:offset'
9993 transform: replacing in ingredient nothing-to-delete?
9993 transform:   after: boolean
9993 transform: replacing in ingredient 1:offset
9993 transform:   after: ?0
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction 'prev:address:address:duplex-list:_elem <- get-address **next, prev:offset'
9993 transform: replacing in ingredient **next
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient prev:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient prev:address:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction '*prev <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform:   after: ?0
9993 transform: replacing in ingredient *prev
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction '*next <- copy end'
9993 transform: replacing in ingredient end
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient *next
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'jump-if end, 1:offset'
9993 transform: replacing in ingredient end
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient 1:offset
9993 transform:   after: ?0
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction 'prev <- get-address *end, prev:offset'
9993 transform: replacing in ingredient *end
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient prev:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient prev
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'next <- get-address **prev, next:offset'
9993 transform: replacing in ingredient **prev
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient next
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction '*next <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform:   after: ?0
9993 transform: replacing in ingredient *next
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction '*prev <- copy start'
9993 transform: replacing in ingredient start
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient *prev
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <duplex-list : <character : <>>>>>
9992 transform: transforming new specialization: remove-between_2
9991 transform: --- checking reply instructions against header for remove-between_2
9991 transform: --- fill in reply ingredients from header for recipe remove-between_2
9991 transform: --- transform braces for recipe remove-between_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: reply-unless ...
9992 transform:  ...
9992 transform: get-address ...
9992 transform: equal ...
9992 transform: reply-if ...
9992 transform:  ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: reply-unless ...
9992 transform:  ...
9992 transform: get-address ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- deduce types for recipe remove-between_2
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: start => <address : <duplex-list : <character : <>>>>
9992 transform: end => <address : <duplex-list : <character : <>>>>
9992 transform: next => <address : <address : <duplex-list : <character : <>>>>>
9992 transform: nothing-to-delete? => boolean
9992 transform: prev => <address : <address : <duplex-list : <character : <>>>>>
9991 transform: --- deduce types from header for remove-between_2
9993 transform: type of start is <address : <duplex-list : <character : <>>>>
9993 transform: type of end is <address : <duplex-list : <character : <>>>>
9993 transform: type of start is <address : <duplex-list : <character : <>>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: start:address:duplex-list:_elem <- next-ingredient 
9993 transform:   product: start: <address : <duplex-list : <character : <>>>> -- {"start": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 transform: instruction: end:address:duplex-list:_elem <- next-ingredient 
9993 transform:   product: end: <address : <duplex-list : <character : <>>>> -- {"end": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 transform: instruction: jump-if start, 1:offset
9992 transform: instruction: reply start:address:duplex-list:_elem
9992 transform: instruction: next:address:address:duplex-list:_elem <- get-address *start, next:offset
9993 transform:   product: next: <address : <address : <duplex-list : <character : <>>>>> -- {"next": <"address" : <"address" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: nothing-to-delete?:boolean <- equal *next, end
9993 transform:   product: nothing-to-delete?: boolean -- {"nothing-to-delete?": "boolean"}
9992 transform: instruction: jump-unless nothing-to-delete?, 1:offset
9992 transform: instruction: reply start:address:duplex-list:_elem
9992 transform: instruction: prev:address:address:duplex-list:_elem <- get-address **next, prev:offset
9993 transform:   product: prev: <address : <address : <duplex-list : <character : <>>>>> -- {"prev": <"address" : <"address" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: *prev <- copy 0
9993 transform:   product: prev: <address : <address : <duplex-list : <character : <>>>>> -- {"prev": <"address" : <"address" : <"duplex-list" : <"character" : <>>>>>, "lookup": <>}
9992 transform: instruction: *next <- copy end
9993 transform:   product: next: <address : <address : <duplex-list : <character : <>>>>> -- {"next": <"address" : <"address" : <"duplex-list" : <"character" : <>>>>>, "lookup": <>}
9992 transform: instruction: jump-if end, 1:offset
9992 transform: instruction: reply start:address:duplex-list:_elem
9992 transform: instruction: prev <- get-address *end, prev:offset
9993 transform:   product: prev: <address : <address : <duplex-list : <character : <>>>>> -- {"prev": <"address" : <"address" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: next <- get-address **prev, next:offset
9993 transform:   product: next: <address : <address : <duplex-list : <character : <>>>>> -- {"next": <"address" : <"address" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: *next <- copy 0
9993 transform:   product: next: <address : <address : <duplex-list : <character : <>>>>> -- {"next": <"address" : <"address" : <"duplex-list" : <"character" : <>>>>>, "lookup": <>}
9992 transform: instruction: *prev <- copy start
9993 transform:   product: prev: <address : <address : <duplex-list : <character : <>>>>> -- {"prev": <"address" : <"address" : <"duplex-list" : <"character" : <>>>>>, "lookup": <>}
9992 transform: instruction: reply start:address:duplex-list:_elem
9991 transform: --- resolve ambiguous calls for recipe remove-between_2
9992 transform: instruction equal
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9991 transform: --- checking reply instructions against header for remove-between_2
9991 transform: --- collect surrounding spaces for recipe remove-between_2
9991 transform: --- transform names for recipe remove-between_2
9993 name: assign start 1
9993 name: assign end 2
9993 name: element next of type duplex-list is at offset 1
9993 name: assign next 3
9993 name: assign nothing-to-delete? 4
9993 name: element prev of type duplex-list is at offset 2
9993 name: assign prev 5
9993 name: element prev of type duplex-list is at offset 2
9993 name: element next of type duplex-list is at offset 1
9991 transform: --- compute instruction operations for recipe remove-between_2
9991 transform: --- perform checks for recipe remove-between_2
9991 transform: --- convert 'new' to 'allocate' for recipe remove-between_2
9992 new: size of "location" is 1
9992 transform: new specialization: remove-between_2
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: checking variant 9: 100
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: checking variant 9: 100
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: checking variant 9: 100
9991 transform: --- collect surrounding spaces for recipe run1002
9991 transform: --- transform names for recipe run1002
9993 name: element value of type duplex-list is at offset 0
9993 name: element value of type duplex-list is at offset 0
9993 name: element value of type duplex-list is at offset 0
9991 transform: --- compute instruction operations for recipe run1002
9991 transform: --- perform checks for recipe run1002
9991 transform: --- convert 'new' to 'allocate' for recipe run1002
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 2:address:duplex-list:character <- next_2 1:address:duplex-list:character
9999 mem: location 1 is 1023
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1026
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1023 in location 1028
 104 run: jump-if in, 1:offset
9999 mem: location 1028 is 1023
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1028 is 1023
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1023 is 13
9999 mem: location 1024 is 1020
9999 mem: location 1025 is 0
9999 mem: location 1028 is 1023
9999 type: type deduced to be character$
9998 run: address to copy is 1024
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1024 is 1020
9999 mem: storing 1020 in location 1029
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1029 is 1020
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 2
 103 run: 3:address:duplex-list:character <- next_2 2:address:duplex-list:character
9999 mem: location 2 is 1020
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1020 in location 1028
 104 run: jump-if in, 1:offset
9999 mem: location 1028 is 1020
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1028 is 1020
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1020 is 14
9999 mem: location 1021 is 1017
9999 mem: location 1022 is 1023
9999 mem: location 1028 is 1020
9999 type: type deduced to be character$
9998 run: address to copy is 1021
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1021 is 1017
9999 mem: storing 1017 in location 1029
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1029 is 1017
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: storing 1017 in location 3
 103 run: 3:address:duplex-list:character <- next_2 3:address:duplex-list:character
9999 mem: location 3 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1017 in location 1028
 104 run: jump-if in, 1:offset
9999 mem: location 1028 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1028 is 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1017 is 15
9999 mem: location 1018 is 1014
9999 mem: location 1019 is 1020
9999 mem: location 1028 is 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1018
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1018 is 1014
9999 mem: storing 1014 in location 1029
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1029 is 1014
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 3
 103 run: 3:address:duplex-list:character <- next_2 3:address:duplex-list:character
9999 mem: location 3 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1014 in location 1028
 104 run: jump-if in, 1:offset
9999 mem: location 1028 is 1014
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1028 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 16
9999 mem: location 1015 is 1011
9999 mem: location 1016 is 1017
9999 mem: location 1028 is 1014
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1015 is 1011
9999 mem: storing 1011 in location 1029
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1029 is 1011
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 3
 103 run: 3:address:duplex-list:character <- next_2 3:address:duplex-list:character
9999 mem: location 3 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1028
 104 run: jump-if in, 1:offset
9999 mem: location 1028 is 1011
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1028 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1011 is 17
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1028 is 1011
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1012 is 1008
9999 mem: storing 1008 in location 1029
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1029 is 1008
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 3
 103 run: remove-between_2 2:address:duplex-list:character, 3:address:duplex-list:character
9999 mem: location 2 is 1020
9999 mem: location 3 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1030
 104 run: start:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1020 in location 1032
 104 run: end:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1008 in location 1033
 104 run: jump-if start, 1:offset
9999 mem: location 1032 is 1020
9998 run: jumping to instruction 5
 104 run: next:address:address:duplex-list:_elem <- get-address *start, next:offset
9999 mem: location 1032 is 1020
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1020 is 14
9999 mem: location 1021 is 1017
9999 mem: location 1022 is 1023
9999 mem: location 1032 is 1020
9999 type: type deduced to be character$
9998 run: address to copy is 1021
9999 mem: storing 1021 in location 1034
 104 run: nothing-to-delete?:boolean <- equal *next, end
9999 mem: location 1034 is 1021
9999 mem: location 1021 is 1017
9999 mem: location 1033 is 1008
9999 mem: storing 0 in location 1035
 104 run: jump-unless nothing-to-delete?, 1:offset
9999 mem: location 1035 is 0
9998 run: jumping to instruction 9
 104 run: prev:address:address:duplex-list:_elem <- get-address **next, prev:offset
9999 mem: location 1034 is 1021
9999 mem: location 1021 is 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1017 is 15
9999 mem: location 1018 is 1014
9999 mem: location 1019 is 1020
9999 mem: location 1034 is 1021
9999 mem: location 1021 is 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1019
9999 mem: storing 1019 in location 1036
 104 run: *prev <- copy 0
9999 mem: location 1036 is 1019
9999 mem: storing 0 in location 1019
 104 run: *next <- copy end
9999 mem: location 1033 is 1008
9999 mem: location 1034 is 1021
9999 mem: storing 1008 in location 1021
 104 run: jump-if end, 1:offset
9999 mem: location 1033 is 1008
9998 run: jumping to instruction 14
 104 run: prev <- get-address *end, prev:offset
9999 mem: location 1033 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 18
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: location 1033 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1036
 104 run: next <- get-address **prev, next:offset
9999 mem: location 1036 is 1010
9999 mem: location 1010 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1011 is 17
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1036 is 1010
9999 mem: location 1010 is 1011
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1034
 104 run: *next <- copy 0
9999 mem: location 1034 is 1012
9999 mem: storing 0 in location 1012
 104 run: *prev <- copy start
9999 mem: location 1032 is 1020
9999 mem: location 1036 is 1010
9999 mem: storing 1020 in location 1010
 104 run: reply start:address:duplex-list:_elem
9999 mem: location 1032 is 1020
9999 trace: reply: decrementing callstack depth from 3
 103 run: 4:character <- get *1:address:duplex-list:character, value:offset
9999 mem: location 1 is 1023
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1023 is 13
9999 mem: location 1024 is 1020
9999 mem: location 1025 is 0
9999 mem: location 1 is 1023
9998 run: address to copy is 1023
9998 run: its type is character
9999 mem: location 1023 is 13
9999 mem: storing 13 in location 4
 103 run: 5:address:duplex-list:character <- next_2 1:address:duplex-list:character
9999 mem: location 1 is 1023
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1023 in location 1028
 104 run: jump-if in, 1:offset
9999 mem: location 1028 is 1023
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1028 is 1023
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1023 is 13
9999 mem: location 1024 is 1020
9999 mem: location 1025 is 0
9999 mem: location 1028 is 1023
9999 type: type deduced to be character$
9998 run: address to copy is 1024
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1024 is 1020
9999 mem: storing 1020 in location 1029
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1029 is 1020
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 5
 103 run: 6:character <- get *5:address:duplex-list:character, value:offset
9999 mem: location 5 is 1020
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1020 is 14
9999 mem: location 1021 is 1008
9999 mem: location 1022 is 1023
9999 mem: location 5 is 1020
9998 run: address to copy is 1020
9998 run: its type is character
9999 mem: location 1020 is 14
9999 mem: storing 14 in location 6
 103 run: 7:address:duplex-list:character <- next_2 5:address:duplex-list:character
9999 mem: location 5 is 1020
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1020 in location 1028
 104 run: jump-if in, 1:offset
9999 mem: location 1028 is 1020
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1028 is 1020
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1020 is 14
9999 mem: location 1021 is 1008
9999 mem: location 1022 is 1023
9999 mem: location 1028 is 1020
9999 type: type deduced to be character$
9998 run: address to copy is 1021
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1021 is 1008
9999 mem: storing 1008 in location 1029
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1029 is 1008
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 7
 103 run: 8:character <- get *7:address:duplex-list:character, value:offset
9999 mem: location 7 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 18
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1020
9999 mem: location 7 is 1008
9998 run: address to copy is 1008
9998 run: its type is character
9999 mem: location 1008 is 18
9999 mem: storing 18 in location 8
 103 run: 9:address:duplex-list:character <- next_2 7:address:duplex-list:character
9999 mem: location 7 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1008 in location 1028
 104 run: jump-if in, 1:offset
9999 mem: location 1028 is 1008
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1028 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 18
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1020
9999 mem: location 1028 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1009
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1029
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1029 is 0
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 9
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    4 <- 13
    6 <- 14
    8 <- 18
    9 <- 0
  ]
9999 run: checking location 4
9999 run: checking location 6
9999 run: checking location 8
9999 run: checking location 9
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
