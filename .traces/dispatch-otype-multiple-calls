schedule: main
run: 1 main 0: (((1 boolean)) <- ((test1)) ((t literal)) ((t literal)))
run: 2 test1 0: (((4 type)) <- ((otype)) ((0 offset)))
run: boolean => ((4 type))
setm: ((4 type)) <= boolean
setm: size of ((4 type)) is 1
setm: ((4 type)): setting 4 to boolean
run: 3 test1 1: (((5 boolean)) <- ((equal)) ((4 type)) ((integer literal)))
m: ((4 type))
sizeof: ((4 type))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: 4 test1 2: (((jump-unless)) ((5 boolean)) ((4 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking ~nil
jump: jumping to 7
run: 5 test1 7: (((5 boolean)) <- ((equal)) ((4 type)) ((boolean literal)))
m: ((4 type))
sizeof: ((4 type))
run: t => ((5 boolean))
setm: ((5 boolean)) <= t
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to t
run: 6 test1 8: (((jump-unless)) ((5 boolean)) ((4 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking ~t
run: 7 test1 9: (((6 boolean)) <- ((next-input)))
arg: nil 0 (t t)
run: t => ((6 boolean))
setm: ((6 boolean)) <= t
setm: size of ((6 boolean)) is 1
setm: ((6 boolean)): setting 6 to t
run: 8 test1 10: (((7 boolean)) <- ((next-input)))
arg: nil 1 (t t)
run: t => ((7 boolean))
setm: ((7 boolean)) <= t
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to t
run: 9 test1 11: (((8 boolean)) <- ((or)) ((6 boolean)) ((7 boolean)))
m: ((6 boolean))
sizeof: ((6 boolean))
run: t => ((8 boolean))
setm: ((8 boolean)) <= t
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 8 to t
run: 10 test1 12: (((reply)) ((8 boolean)))
m: ((8 boolean))
sizeof: ((8 boolean))
reply: (((8 boolean))) (((1 boolean)))
reply: t => ((1 boolean))
setm: ((1 boolean)) <= t
setm: size of ((1 boolean)) is 1
setm: ((1 boolean)): setting 1 to t
run: 11 main 1: (((2 integer)) <- ((test1)) ((3 literal)) ((4 literal)))
run: 12 test1 0: (((4 type)) <- ((otype)) ((0 offset)))
run: integer => ((4 type))
setm: ((4 type)) <= integer
setm: size of ((4 type)) is 1
setm: ((4 type)): setting 4 to integer
run: 13 test1 1: (((5 boolean)) <- ((equal)) ((4 type)) ((integer literal)))
m: ((4 type))
sizeof: ((4 type))
run: t => ((5 boolean))
setm: ((5 boolean)) <= t
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to t
run: 14 test1 2: (((jump-unless)) ((5 boolean)) ((4 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking ~t
run: 15 test1 3: (((6 integer)) <- ((next-input)))
arg: nil 0 (3 4)
run: 3 => ((6 integer))
setm: ((6 integer)) <= 3
setm: size of ((6 integer)) is 1
setm: ((6 integer)): setting 6 to 3
run: 16 test1 4: (((7 integer)) <- ((next-input)))
arg: nil 1 (3 4)
run: 4 => ((7 integer))
setm: ((7 integer)) <= 4
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 7 to 4
run: 17 test1 5: (((8 integer)) <- ((add)) ((6 integer)) ((7 integer)))
m: ((6 integer))
sizeof: ((6 integer))
m: ((7 integer))
sizeof: ((7 integer))
add: 3 4
m: ((6 integer))
sizeof: ((6 integer))
m: ((7 integer))
sizeof: ((7 integer))
run: 7 => ((8 integer))
setm: ((8 integer)) <= 7
setm: size of ((8 integer)) is 1
setm: ((8 integer)): setting 8 to 7
run: 18 test1 6: (((reply)) ((8 integer)))
m: ((8 integer))
sizeof: ((8 integer))
reply: (((8 integer))) (((2 integer)))
reply: 7 => ((2 integer))
setm: ((2 integer)) <= 7
setm: size of ((2 integer)) is 1
setm: ((2 integer)): setting 2 to 7
schedule: done with routine
