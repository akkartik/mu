schedule: main
run: 1 main 0: (((1 boolean)) <- ((test1)) ((t literal)) ((t literal)))
run: 2 test1 0: (((4 type)) <- ((otype)) ((0 offset)))
run: boolean => ((4 type))
setm: ((4 type)) <= boolean
setm: size of ((4 type)) is 1
setm: ((4 type)): setting 4 to boolean
run: 3 test1 1: (((5 boolean)) <- ((equal)) ((4 type)) ((integer literal)))
m: ((4 type))
sizeof: ((4 type))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: 4 test1 2: (((jump-unless)) ((5 boolean)) ((4 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
run: 5 test1 7: (((5 boolean)) <- ((equal)) ((4 type)) ((boolean literal)))
m: ((4 type))
sizeof: ((4 type))
run: t => ((5 boolean))
setm: ((5 boolean)) <= t
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to t
run: 6 test1 8: (((jump-unless)) ((5 boolean)) ((nil offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
run: 7 test1 9: (((6 boolean)) <- ((next-input)))
arg: nil 0 (t t)
run: t => ((6 boolean))
setm: ((6 boolean)) <= t
setm: size of ((6 boolean)) is 1
setm: ((6 boolean)): setting 6 to t
run: 8 test1 10: (((7 boolean)) <- ((next-input)))
arg: nil 1 (t t)
run: t => ((7 boolean))
setm: ((7 boolean)) <= t
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to t
run: 9 test1 11: (((8 boolean)) <- ((or)) ((6 boolean)) ((7 boolean)))
m: ((6 boolean))
sizeof: ((6 boolean))
run: t => ((8 boolean))
setm: ((8 boolean)) <= t
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 8 to t
run: 10 test1 12: (((reply)) ((8 boolean)))
m: ((8 boolean))
sizeof: ((8 boolean))
reply: (((8 boolean))) (((1 boolean)))
reply: t => ((1 boolean))
setm: ((1 boolean)) <= t
setm: size of ((1 boolean)) is 1
setm: ((1 boolean)): setting 1 to t
schedule: done with routine 
