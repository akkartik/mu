schedule: main
run: main 0: (((1 boolean)) <- ((test1)) ((t literal)) ((t literal)))
run: test1/main 0: (((4 type)) <- ((otype)) ((0 offset)))
run: test1/main 0: boolean => ((4 type))
mem: ((4 type)): 4 <= boolean
run: test1/main 1: (((5 boolean)) <- ((equal)) ((4 type)) ((integer literal)))
mem: ((4 type)) => boolean
run: test1/main 1: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: test1/main 2: (((jump-unless)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: test1/main 7: (((5 boolean)) <- ((equal)) ((4 type)) ((boolean literal)))
mem: ((4 type)) => boolean
run: test1/main 7: t => ((5 boolean))
mem: ((5 boolean)): 5 <= t
run: test1/main 8: (((jump-unless)) ((5 boolean)) ((nil offset)))
mem: ((5 boolean)) => t
run: test1/main 9: (((6 boolean)) <- ((next-input)))
arg: nil 0 (t t)
run: test1/main 9: t => ((6 boolean))
mem: ((6 boolean)): 6 <= t
run: test1/main 10: (((7 boolean)) <- ((next-input)))
arg: nil 1 (t t)
run: test1/main 10: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: test1/main 11: (((8 boolean)) <- ((or)) ((6 boolean)) ((7 boolean)))
mem: ((6 boolean)) => t
run: test1/main 11: t => ((8 boolean))
mem: ((8 boolean)): 8 <= t
run: test1/main 12: (((reply)) ((8 boolean)))
mem: ((8 boolean)) => t
run: main 0: t => ((1 boolean))
mem: ((1 boolean)): 1 <= t
schedule: done with routine 
