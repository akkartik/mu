schedule: main
run: 1 main 0: (((1 string-address) (raw)) <- ((integer-to-decimal-string)) ((0 literal)))
run: 2 integer-to-decimal-string 0: (((1 integer)) <- ((next-input)))
arg: nil 0 (0)
run: 0 => ((1 integer))
setm: ((1 integer)) <= 0
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 0
run: 3 integer-to-decimal-string 1: (((2 boolean)) <- ((equal)) ((1 integer)) ((0 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: t => ((2 boolean))
setm: ((2 boolean)) <= t
setm: size of ((2 boolean)) is 1
setm: ((2 boolean)): setting 2 to t
run: 4 integer-to-decimal-string 2: (((jump-unless)) ((2 boolean)) ((2 offset)))
m: ((2 boolean))
sizeof: ((2 boolean))
run: 5 integer-to-decimal-string 3: (((3 string-address)) <- ((new)) 0)
run: 1000 => ((3 string-address))
setm: ((3 string-address)) <= 1000
setm: size of ((3 string-address)) is 1
setm: ((3 string-address)): setting 3 to 1000
run: 6 integer-to-decimal-string 4: (((reply)) ((3 string-address)))
m: ((3 string-address))
sizeof: ((3 string-address))
reply: (((3 string-address))) (((1 string-address) (raw)))
reply: 1000 => ((1 string-address) (raw))
setm: ((1 string-address) (raw)) <= 1000
setm: size of ((1 string-address) (raw)) is 1
setm: ((1 string-address) (raw)): setting 1 to 1000
schedule: done with routine
