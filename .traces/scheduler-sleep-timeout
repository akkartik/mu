schedule: baseline
run: 1 baseline 0: (((1 integer)) <- ((copy)) ((0 literal)))
run: 0 => ((1 integer))
setm: ((1 integer)) <= 0
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 0
schedule: scheduling baseline for further processing
schedule: f1
run: 2 f1 0: (((sleep)) ((for-some-cycles literal)) ((10 literal)))
run: sleeping until 12
schedule: pushing f1 to sleep queue
schedule: baseline
run: 3 baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: nil => ((2 boolean))
setm: ((2 boolean)) <= nil
setm: size of ((2 boolean)) is 1
setm: ((2 boolean)): setting 2 to nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 4 baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
m: ((2 boolean))
sizeof: ((2 boolean))
jump: checking nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 5 baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
m: ((1 integer))
sizeof: ((1 integer))
add: 0 1
m: ((1 integer))
sizeof: ((1 integer))
run: 1 => ((1 integer))
setm: ((1 integer)) <= 1
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 1
schedule: scheduling baseline for further processing
schedule: routine timed out
schedule: baseline
run: 6 baseline 4: (((jump)) ((-4 offset)))
jump: jumping to 1
schedule: scheduling baseline for further processing
schedule: baseline
run: 7 baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: nil => ((2 boolean))
setm: ((2 boolean)) <= nil
setm: size of ((2 boolean)) is 1
setm: ((2 boolean)): setting 2 to nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 8 baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
m: ((2 boolean))
sizeof: ((2 boolean))
jump: checking nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 9 baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
m: ((1 integer))
sizeof: ((1 integer))
add: 1 1
m: ((1 integer))
sizeof: ((1 integer))
run: 2 => ((1 integer))
setm: ((1 integer)) <= 2
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 2
schedule: scheduling baseline for further processing
schedule: baseline
run: 10 baseline 4: (((jump)) ((-4 offset)))
jump: jumping to 1
schedule: scheduling baseline for further processing
schedule: baseline
run: 11 baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: nil => ((2 boolean))
setm: ((2 boolean)) <= nil
setm: size of ((2 boolean)) is 1
setm: ((2 boolean)): setting 2 to nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 12 baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
m: ((2 boolean))
sizeof: ((2 boolean))
jump: checking nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 13 baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
m: ((1 integer))
sizeof: ((1 integer))
add: 2 1
m: ((1 integer))
sizeof: ((1 integer))
run: 3 => ((1 integer))
setm: ((1 integer)) <= 3
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 3
schedule: scheduling baseline for further processing
schedule: baseline
run: 14 baseline 4: (((jump)) ((-4 offset)))
jump: jumping to 1
schedule: scheduling baseline for further processing
schedule: baseline
run: 15 baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: nil => ((2 boolean))
setm: ((2 boolean)) <= nil
setm: size of ((2 boolean)) is 1
setm: ((2 boolean)): setting 2 to nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 16 baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
m: ((2 boolean))
sizeof: ((2 boolean))
jump: checking nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 17 baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
m: ((1 integer))
sizeof: ((1 integer))
add: 3 1
m: ((1 integer))
sizeof: ((1 integer))
run: 4 => ((1 integer))
setm: ((1 integer)) <= 4
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 4
schedule: scheduling baseline for further processing
schedule: baseline
run: 18 baseline 4: (((jump)) ((-4 offset)))
jump: jumping to 1
schedule: scheduling baseline for further processing
schedule: baseline
run: 19 baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: nil => ((2 boolean))
setm: ((2 boolean)) <= nil
setm: size of ((2 boolean)) is 1
setm: ((2 boolean)): setting 2 to nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 20 baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
m: ((2 boolean))
sizeof: ((2 boolean))
jump: checking nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 21 baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
m: ((1 integer))
sizeof: ((1 integer))
add: 4 1
m: ((1 integer))
sizeof: ((1 integer))
run: 5 => ((1 integer))
setm: ((1 integer)) <= 5
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 5
schedule: scheduling baseline for further processing
schedule: baseline
run: 22 baseline 4: (((jump)) ((-4 offset)))
jump: jumping to 1
schedule: scheduling baseline for further processing
schedule: baseline
run: 23 baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: nil => ((2 boolean))
setm: ((2 boolean)) <= nil
setm: size of ((2 boolean)) is 1
setm: ((2 boolean)): setting 2 to nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 24 baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
m: ((2 boolean))
sizeof: ((2 boolean))
jump: checking nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 25 baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
m: ((1 integer))
sizeof: ((1 integer))
add: 5 1
m: ((1 integer))
sizeof: ((1 integer))
run: 6 => ((1 integer))
setm: ((1 integer)) <= 6
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 6
schedule: scheduling baseline for further processing
schedule: baseline
run: 26 baseline 4: (((jump)) ((-4 offset)))
jump: jumping to 1
schedule: scheduling baseline for further processing
schedule: baseline
run: 27 baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: nil => ((2 boolean))
setm: ((2 boolean)) <= nil
setm: size of ((2 boolean)) is 1
setm: ((2 boolean)): setting 2 to nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 28 baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
m: ((2 boolean))
sizeof: ((2 boolean))
jump: checking nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 29 baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
m: ((1 integer))
sizeof: ((1 integer))
add: 6 1
m: ((1 integer))
sizeof: ((1 integer))
run: 7 => ((1 integer))
setm: ((1 integer)) <= 7
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 7
schedule: scheduling baseline for further processing
schedule: baseline
run: 30 baseline 4: (((jump)) ((-4 offset)))
jump: jumping to 1
schedule: scheduling baseline for further processing
schedule: baseline
run: 31 baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: nil => ((2 boolean))
setm: ((2 boolean)) <= nil
setm: size of ((2 boolean)) is 1
setm: ((2 boolean)): setting 2 to nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 32 baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
m: ((2 boolean))
sizeof: ((2 boolean))
jump: checking nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 33 baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
m: ((1 integer))
sizeof: ((1 integer))
add: 7 1
m: ((1 integer))
sizeof: ((1 integer))
run: 8 => ((1 integer))
setm: ((1 integer)) <= 8
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 8
schedule: scheduling baseline for further processing
schedule: baseline
run: 34 baseline 4: (((jump)) ((-4 offset)))
jump: jumping to 1
schedule: scheduling baseline for further processing
schedule: baseline
run: 35 baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: nil => ((2 boolean))
setm: ((2 boolean)) <= nil
setm: size of ((2 boolean)) is 1
setm: ((2 boolean)): setting 2 to nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 36 baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
m: ((2 boolean))
sizeof: ((2 boolean))
jump: checking nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 37 baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
m: ((1 integer))
sizeof: ((1 integer))
add: 8 1
m: ((1 integer))
sizeof: ((1 integer))
run: 9 => ((1 integer))
setm: ((1 integer)) <= 9
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 9
schedule: scheduling baseline for further processing
schedule: baseline
run: 38 baseline 4: (((jump)) ((-4 offset)))
jump: jumping to 1
schedule: scheduling baseline for further processing
schedule: baseline
run: 39 baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: nil => ((2 boolean))
setm: ((2 boolean)) <= nil
setm: size of ((2 boolean)) is 1
setm: ((2 boolean)): setting 2 to nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 40 baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
m: ((2 boolean))
sizeof: ((2 boolean))
jump: checking nil
schedule: scheduling baseline for further processing
schedule: baseline
run: 41 baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
m: ((1 integer))
sizeof: ((1 integer))
add: 9 1
m: ((1 integer))
sizeof: ((1 integer))
run: 10 => ((1 integer))
setm: ((1 integer)) <= 10
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 10
schedule: scheduling baseline for further processing
schedule: baseline
run: 42 baseline 4: (((jump)) ((-4 offset)))
jump: jumping to 1
schedule: scheduling baseline for further processing
schedule: baseline
run: 43 baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
m: ((1 integer))
sizeof: ((1 integer))
run: t => ((2 boolean))
setm: ((2 boolean)) <= t
setm: size of ((2 boolean)) is 1
setm: ((2 boolean)): setting 2 to t
schedule: scheduling baseline for further processing
schedule: baseline
run: 44 baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
m: ((2 boolean))
sizeof: ((2 boolean))
jump: checking t
jump: jumping to 5
schedule: scheduling baseline for further processing
schedule: baseline
schedule: done with routine
