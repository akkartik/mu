schedule: baseline
run: baseline 0: (((1 integer)) <- ((copy)) ((0 literal)))
run: baseline 0: 0 => ((1 integer))
mem: ((1 integer)): 1 <= 0
schedule: scheduling baseline for further processing
schedule: f1
run: f1 0: (((sleep)) ((for-some-cycles literal)) ((10 literal)))
run: f1 0: sleeping until 12
schedule: pushing f1 to sleep queue
schedule: baseline
run: baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
mem: ((1 integer)) => 0
run: baseline 1: nil => ((2 boolean))
mem: ((2 boolean)): 2 <= nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 0
run: baseline 3: 1 => ((1 integer))
mem: ((1 integer)): 1 <= 1
schedule: scheduling baseline for further processing
schedule: routine timed out
schedule: baseline
run: baseline 4: (((jump)) ((-4 offset)))
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
mem: ((1 integer)) => 1
run: baseline 1: nil => ((2 boolean))
mem: ((2 boolean)): 2 <= nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 1
run: baseline 3: 2 => ((1 integer))
mem: ((1 integer)): 1 <= 2
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 4: (((jump)) ((-4 offset)))
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
mem: ((1 integer)) => 2
run: baseline 1: nil => ((2 boolean))
mem: ((2 boolean)): 2 <= nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 2
run: baseline 3: 3 => ((1 integer))
mem: ((1 integer)): 1 <= 3
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 4: (((jump)) ((-4 offset)))
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
mem: ((1 integer)) => 3
run: baseline 1: nil => ((2 boolean))
mem: ((2 boolean)): 2 <= nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 3
run: baseline 3: 4 => ((1 integer))
mem: ((1 integer)): 1 <= 4
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 4: (((jump)) ((-4 offset)))
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
mem: ((1 integer)) => 4
run: baseline 1: nil => ((2 boolean))
mem: ((2 boolean)): 2 <= nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 4
run: baseline 3: 5 => ((1 integer))
mem: ((1 integer)): 1 <= 5
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 4: (((jump)) ((-4 offset)))
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
mem: ((1 integer)) => 5
run: baseline 1: nil => ((2 boolean))
mem: ((2 boolean)): 2 <= nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 5
run: baseline 3: 6 => ((1 integer))
mem: ((1 integer)): 1 <= 6
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 4: (((jump)) ((-4 offset)))
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
mem: ((1 integer)) => 6
run: baseline 1: nil => ((2 boolean))
mem: ((2 boolean)): 2 <= nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 6
run: baseline 3: 7 => ((1 integer))
mem: ((1 integer)): 1 <= 7
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 4: (((jump)) ((-4 offset)))
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
mem: ((1 integer)) => 7
run: baseline 1: nil => ((2 boolean))
mem: ((2 boolean)): 2 <= nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 7
run: baseline 3: 8 => ((1 integer))
mem: ((1 integer)): 1 <= 8
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 4: (((jump)) ((-4 offset)))
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
mem: ((1 integer)) => 8
run: baseline 1: nil => ((2 boolean))
mem: ((2 boolean)): 2 <= nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 8
run: baseline 3: 9 => ((1 integer))
mem: ((1 integer)): 1 <= 9
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 4: (((jump)) ((-4 offset)))
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
mem: ((1 integer)) => 9
run: baseline 1: nil => ((2 boolean))
mem: ((2 boolean)): 2 <= nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => nil
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 3: (((1 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 9
run: baseline 3: 10 => ((1 integer))
mem: ((1 integer)): 1 <= 10
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 4: (((jump)) ((-4 offset)))
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 1: (((2 boolean)) <- ((greater-or-equal)) ((1 integer)) ((10 literal)))
mem: ((1 integer)) => 10
run: baseline 1: t => ((2 boolean))
mem: ((2 boolean)): 2 <= t
schedule: scheduling baseline for further processing
schedule: baseline
run: baseline 2: (((jump-if)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => t
schedule: scheduling baseline for further processing
schedule: baseline
schedule: done with routine 
