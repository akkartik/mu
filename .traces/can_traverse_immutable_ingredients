9991 parse: --- defining container test-list
9999 parse: type number: 1000
9993 parse:   element name: next
9993 parse:   type: 2
9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"test-list": "type"}
9993 parse:   product: {"p": <"address" : <"shared" : <"test-list" : <>>>>}
9992 load: after rewriting: p:address:shared:test-list <- new test-list:type
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"p": <>}
9992 load: after rewriting: foo p
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: p:address:shared:test-list
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: bar
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"p": <>}
9993 parse:   product: {"p2": <"address" : <"shared" : <"test-list" : <>>>>}
9992 load: after rewriting: p2:address:shared:test-list <- bar p
9999 parse: recipe foo has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:address:shared:test-list
9999 parse: header product: y:address:shared:test-list
9991 parse: --- defining bar
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <>, "lookup": <>}
9993 parse:   ingredient: {"next": "offset"}
9993 parse:   product: {"y": <>}
9992 load: after rewriting: y <- get *x, next:offset
9999 parse: recipe bar has a header
9990 transform: === transform_all()
9991 transform: --- checking reply instructions against header for bar
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- fill in reply ingredients from header for recipe bar
9991 transform: --- deduce types for recipe main
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: p => <address : <shared : <test-list : <>>>>
9992 transform: p <= <address : <shared : <test-list : <>>>>
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: p => <address : <shared : <test-list : <>>>>
9992 transform: p <= <address : <shared : <test-list : <>>>>
9992 transform: p2 => <address : <shared : <test-list : <>>>>
9991 transform: --- deduce types for recipe bar
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: x => <address : <shared : <test-list : <>>>>
9992 transform: x <= <address : <shared : <test-list : <>>>>
9992 transform: y => <address : <shared : <test-list : <>>>>
9991 transform: --- deduce types from header for bar
9993 transform: type of x is <address : <shared : <test-list : <>>>>
9993 transform: type of y is <address : <shared : <test-list : <>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: x:address:shared:test-list <- next-ingredient-without-typechecking 
9993 transform:   product: x: <address : <shared : <test-list : <>>>> -- {"x": <"address" : <"shared" : <"test-list" : <>>>>}
9992 transform: instruction: y <- get *x, next:offset
9993 transform:   product: y: NULLNULLNULL -- {"y": <>}
9993 transform: type of y is <address : <shared : <test-list : <>>>>
9992 transform: instruction: reply y:address:shared:test-list
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- collect surrounding spaces for recipe bar
9991 transform: --- transform names for recipe main
9993 name: assign p 1
9991 transform: --- transform names for recipe foo
9993 name: assign p 1
9993 name: assign p2 2
9991 transform: --- transform names for recipe bar
9993 name: assign x 1
9993 name: element next of type test-list is at offset 0
9993 name: assign y 2
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo p
9992 transform: checking variant (strict) 59: recipe foo {"p": <"address" : <"shared" : <"test-list" : <>>>>}
9991 transform: --- resolve ambiguous calls for recipe foo
9992 transform: instruction p2:address:shared:test-list <- bar p
9992 transform: checking variant (strict) 13: recipe bar {"x": <"address" : <"shared" : <"test-list" : <>>>>} -> {"y": <"address" : <"shared" : <"test-list" : <>>>>}
9991 transform: --- resolve ambiguous calls for recipe bar
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- compute instruction operations for recipe bar
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: bar ...
9992 transform:  ...
9991 transform: --- transform braces for recipe bar
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- perform checks for recipe bar
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check 'call' instructions inside recipe bar
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- type-check calls inside recipe bar
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9992 new: size of "test-list" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe bar
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for bar
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1000
9999 mem: storing 2 in location 1001
 102 run: p:address:shared:test-list <- new test-list:type
9999 mem: allocating size 2
9999 mem: new alloc: 1004
9999 mem: storing 1004 in location 1003
9999 mem: incrementing refcount of 1004: 0 -> 1
 102 run: foo p
9999 mem: location 1003 is 1004
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1006
9999 mem: storing 3 in location 1007
 103 run: p:address:shared:test-list <- next-ingredient-without-typechecking 
9999 mem: storing 1004 in location 1009
9999 mem: incrementing refcount of 1004: 1 -> 2
 103 run: p2:address:shared:test-list <- bar p
9999 mem: location 1009 is 1004
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1011
9999 mem: storing 3 in location 1012
 104 run: x:address:shared:test-list <- next-ingredient-without-typechecking 
9999 mem: storing 1004 in location 1014
9999 mem: incrementing refcount of 1004: 2 -> 3
 104 run: y <- get *x, next:offset
9999 mem: location 1014 is 1004
9999 mem: skipping refcount at 1004
9999 mem: location 1005 is 0
9999 mem: location 1014 is 1004
9999 mem: skipping refcount at 1004
9998 run: address to copy is 1005
9998 run: its type is <address : <shared : <test-list : <>>>>
9999 mem: location 1005 is 0
9999 mem: storing 0 in location 1015
 104 run: reply y:address:shared:test-list
9999 mem: location 1015 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 1010
 103 run: reply 
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
 102 run: reply 
9999 abandon: saving in free-list of size 4
9999 trace: reply: decrementing callstack depth from 1
