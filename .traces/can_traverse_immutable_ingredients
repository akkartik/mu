9991 parse: --- defining container test-list
9999 parse: type number: 1000
9993 parse:   element name: next
9993 parse:   type: 2
9993 parse:   type: 1000
9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"test-list": "type"}
9993 parse:   product: {"p": <"address" : <"test-list" : <>>>}
9992 load: after rewriting: p:address:test-list <- new test-list:type
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"p": <>}
9992 load: after rewriting: foo p
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: p:address:test-list
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: bar
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"p": <>}
9993 parse:   product: {"p2": <"address" : <"test-list" : <>>>}
9992 load: after rewriting: p2:address:test-list <- bar p
9999 parse: recipe foo has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:address:test-list
9999 parse: header product: y:address:test-list
9991 parse: --- defining bar
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <>, "lookup": <>}
9993 parse:   ingredient: {"next": "offset"}
9993 parse:   product: {"y": <>}
9992 load: after rewriting: y <- get *x, next:offset
9999 parse: recipe bar has a header
9990 transform: === transform_all()
9991 transform: --- checking reply instructions against header for bar
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- fill in reply ingredients from header for recipe bar
9991 transform: --- deduce types for recipe main
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: p => <address : <test-list : <>>>
9992 transform: p <= <address : <test-list : <>>>
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: p => <address : <test-list : <>>>
9992 transform: p <= <address : <test-list : <>>>
9992 transform: p2 => <address : <test-list : <>>>
9991 transform: --- deduce types for recipe bar
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: x => <address : <test-list : <>>>
9992 transform: x <= <address : <test-list : <>>>
9992 transform: y => <address : <test-list : <>>>
9991 transform: --- deduce types from header for bar
9993 transform: type of x is <address : <test-list : <>>>
9993 transform: type of y is <address : <test-list : <>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: x:address:test-list <- next-ingredient 
9993 transform:   product: x: <address : <test-list : <>>> -- {"x": <"address" : <"test-list" : <>>>}
9992 transform: instruction: y <- get *x, next:offset
9993 transform:   product: y: NULLNULLNULL -- {"y": <>}
9993 transform: type of y is <address : <test-list : <>>>
9992 transform: instruction: reply y:address:test-list
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- collect surrounding spaces for recipe bar
9991 transform: --- transform names for recipe main
9993 name: assign p 1
9991 transform: --- transform names for recipe foo
9993 name: assign p 1
9993 name: assign p2 2
9991 transform: --- transform names for recipe bar
9993 name: assign x 1
9993 name: element next of type test-list is at offset 0
9993 name: assign y 2
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo
9993 transform: strict match: ingredient 0
9992 transform: score for base: 1000
9992 transform: score for variant 0: -1
9992 transform: score for variant 1: -1
9992 transform: score for variant 2: -1
9992 transform: score for variant 3: -1
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9992 transform: score for variant 7: -1
9992 transform: score for variant 8: -1
9992 transform: score for variant 9: -1
9992 transform: score for variant 10: -1
9992 transform: score for variant 11: -1
9992 transform: score for variant 12: -1
9992 transform: score for variant 13: -1
9992 transform: score for variant 14: -1
9992 transform: score for variant 15: -1
9992 transform: score for variant 16: -1
9992 transform: score for variant 17: -1
9992 transform: score for variant 18: -1
9992 transform: score for variant 19: -1
9992 transform: score for variant 20: -1
9992 transform: score for variant 21: -1
9992 transform: score for variant 22: -1
9992 transform: score for variant 23: -1
9992 transform: score for variant 24: -1
9992 transform: score for variant 25: -1
9992 transform: score for variant 26: -1
9992 transform: score for variant 27: -1
9992 transform: score for variant 28: -1
9992 transform: score for variant 29: -1
9992 transform: score for variant 30: -1
9992 transform: score for variant 31: -1
9992 transform: score for variant 32: -1
9992 transform: score for variant 33: -1
9992 transform: score for variant 34: -1
9992 transform: score for variant 35: -1
9992 transform: score for variant 36: -1
9992 transform: score for variant 37: -1
9992 transform: score for variant 38: -1
9992 transform: score for variant 39: -1
9992 transform: score for variant 40: -1
9992 transform: score for variant 41: -1
9992 transform: score for variant 42: -1
9992 transform: score for variant 43: -1
9992 transform: score for variant 44: -1
9992 transform: score for variant 45: -1
9992 transform: score for variant 46: -1
9992 transform: score for variant 47: -1
9992 transform: score for variant 48: -1
9992 transform: score for variant 49: -1
9992 transform: score for variant 50: -1
9992 transform: score for variant 51: -1
9992 transform: score for variant 52: -1
9992 transform: score for variant 53: -1
9992 transform: score for variant 54: -1
9992 transform: score for variant 55: -1
9993 transform: strict match: ingredient 0
9992 transform: score for variant 56: 1000
9991 transform: --- resolve ambiguous calls for recipe foo
9992 transform: instruction bar
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 1000
9992 transform: score for variant 0: -1
9992 transform: score for variant 1: -1
9992 transform: score for variant 2: -1
9992 transform: score for variant 3: -1
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9992 transform: score for variant 7: -1
9992 transform: score for variant 8: -1
9992 transform: score for variant 9: -1
9992 transform: score for variant 10: -1
9992 transform: score for variant 11: -1
9992 transform: score for variant 12: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 13: 1000
9991 transform: --- resolve ambiguous calls for recipe bar
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- compute instruction operations for recipe bar
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: bar ...
9992 transform:  ...
9991 transform: --- transform braces for recipe bar
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- perform checks for recipe bar
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9992 new: size of "test-list" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe bar
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for bar
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1000
 102 run: p:address:test-list <- new test-list:type
9999 mem: new alloc: 1003
9999 mem: storing 1003 in location 1002
 102 run: foo p
9999 mem: location 1002 is 1003
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1004
 103 run: p:address:test-list <- next-ingredient 
9999 mem: storing 1003 in location 1006
 103 run: p2:address:test-list <- bar p
9999 mem: location 1006 is 1003
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1008
 104 run: x:address:test-list <- next-ingredient 
9999 mem: storing 1003 in location 1010
 104 run: y <- get *x, next:offset
9999 mem: location 1010 is 1003
9999 mem: location 1003 is 0
9999 mem: location 1010 is 1003
9998 run: address to copy is 1003
9998 run: its type is <address : <test-list : <>>>
9999 mem: location 1003 is 0
9999 mem: storing 0 in location 1011
 104 run: reply y:address:test-list
9999 mem: location 1011 is 0
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 1007
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
