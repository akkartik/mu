9991 parse: --- defining main
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "literal", "unsafe": <>}
9993 parse:   product: {"1": <"address" : <"number" : <>>>}
9992 load: after rewriting: 1:address:number <- copy 2/unsafe
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- copy 34
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"number" : <>>>, "lookup": <>}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- copy *1:address:number
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- type-check calls inside recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: 1:address:number <- copy 2/unsafe
9999 mem: storing 2 in location 1
 102 run: 2:number <- copy 34
9999 mem: storing 34 in location 2
 102 run: 3:number <- copy *1:address:number
9999 mem: location 1 is 2
9999 mem: location 2 is 34
9999 mem: storing 34 in location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
