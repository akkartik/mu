9991 parse: --- defining scenario-integer-to-decimal-digit-zero
9993 parse: instruction: run
9993 parse:   ingredient: {"\n    1:address:array:character/raw <- integer-to-decimal-string 0\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:array:character/raw <- integer-to-decimal-string 0
    2:array:character/raw <- copy *1:address:array:character/raw
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   ingredient: {"\n    2:string <- [0]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2:string <- [0]
  ]
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- collect surrounding spaces for recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- transform names for recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- transform braces for recipe scenario-integer-to-decimal-digit-zero
9991 transform: run ...
9991 transform: memory-should-contain ...
9991 transform: --- compute instruction operations for recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-integer-to-decimal-digit-zero
 102 run: run [
    1:address:array:character/raw <- integer-to-decimal-string 0
    2:array:character/raw <- copy *1:address:array:character/raw
  ]
9991 parse: --- defining run1001
9993 parse: instruction: integer-to-decimal-string
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"1": <"address" : <"array" : <"character" : <>>>>, "raw": <>}
9992 load: after rewriting: 1:address:array:character/raw <- integer-to-decimal-string 0
9993 parse: instruction: copy
9993 parse:   ingredient: {"*1": <"address" : <"array" : <"character" : <>>>>, "raw": <>, "lookup": <>}
9993 parse:   product: {"2": <"array" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 2:array:character/raw <- copy *1:address:array:character/raw
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- transform braces for recipe run1001
9991 transform: integer-to-decimal-string ...
9991 transform: copy ...
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:array:character/raw <- integer-to-decimal-string 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
9999 mem: new alloc: 1000
 104 run: n:number <- next-ingredient 
9999 mem: storing 0 in location 1002
 104 run: jump-if n, 
9999 mem: location 1002 is 0
9998 run: jump-if fell through
 104 run: result:address:array:character <- new [0]
9999 mem: storing 1017 in location 1003
 104 run: reply result
9999 mem: location 1003 is 1017
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: storing 1017 in location 1
 103 run: 2:array:character/raw <- copy *1:address:array:character/raw
9999 mem: location 1 is 1017
9999 mem: location 1017 is 1
9999 mem: location 1018 is 48
9999 mem: storing 1 in location 2
9999 mem: storing 48 in location 3
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    2:string <- [0]
  ]
9999 run: checking string length at 2
9999 run: checking location 3
9999 trace: fall-through: exiting scenario-integer-to-decimal-digit-zero; decrementing callstack depth from 1
