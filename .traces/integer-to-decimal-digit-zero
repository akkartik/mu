9991 parse: --- defining scenario-integer-to-decimal-digit-zero
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:array:character/raw <- to-text 0\n    2:array:character/raw <- copy *1:address:shared:array:character/raw\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:shared:array:character/raw <- to-text 0
    2:array:character/raw <- copy *1:address:shared:array:character/raw
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2:array:character <- [0]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2:array:character <- [0]
  ]
9999 parse: recipe scenario-integer-to-decimal-digit-zero has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- deduce types for recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- collect surrounding spaces for recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- transform names for recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- resolve ambiguous calls for recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- compute instruction operations for recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- transform braces for recipe scenario-integer-to-decimal-digit-zero
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- type-check 'call' instructions inside recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- type-check calls inside recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-integer-to-decimal-digit-zero
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-integer-to-decimal-digit-zero
 102 run: run [
    1:address:shared:array:character/raw <- to-text 0
    2:array:character/raw <- copy *1:address:shared:array:character/raw
  ]
9991 parse: --- defining run1001
9993 parse: instruction: to-text
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>}
9992 load: after rewriting: 1:address:shared:array:character/raw <- to-text 0
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>, "lookup": <>}
9993 parse:   product: {"2": <"array" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 2:array:character/raw <- copy *1:address:shared:array:character/raw
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- deduce types for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction to-text
9993 transform: non-strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 990
9993 transform: non-strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 0: 990
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: to-text ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run1001
9991 transform: --- type-check 'call' instructions inside recipe run1001
9991 transform: --- type-check calls inside recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:array:character/raw <- to-text_2 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
9999 mem: allocating size 18
9999 mem: new alloc: 1000
9999 mem: storing 16 in location 1001
 104 run: n:number <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1003
 104 run: jump-if n, 
9999 mem: location 1003 is 0
9998 run: jump-if fell through
 104 run: result <- new [0]
9999 mem: storing 1018 in location 1004
9999 mem: incrementing refcount of 1018: 0 -> 1
 104 run: reply result:address:shared:array:character
9999 mem: location 1004 is 1018
9999 abandon: saving in free-list of size 18
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1018
9999 mem: storing 1018 in location 1
9999 mem: incrementing refcount of 1018: 1 -> 2
 103 run: 2:array:character/raw <- copy *1:address:shared:array:character/raw
9999 mem: location 1 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1019 is 1
9999 mem: location 1020 is 48
9999 mem: storing 1 in location 2
9999 mem: storing 48 in location 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    2:array:character <- [0]
  ]
9999 run: checking string length at 2
9999 run: checking location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
