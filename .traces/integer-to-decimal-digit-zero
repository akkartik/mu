parse: instruction: run
parse:   ingredient: {name: "
    1:address:array:character/raw <- integer-to-decimal-string 0:literal
    2:array:character/raw <- copy 1:address:array:character/deref/raw
  ", properties: ["
    1:address:array:character/raw <- integer-to-decimal-string 0:literal
    2:array:character/raw <- copy 1:address:array:character/deref/raw
  ": "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    2:string <- [0]
  ", properties: ["
    2:string <- [0]
  ": "literal-string"]}
after-brace: recipe integer-to-decimal-digit-zero
after-brace: run ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: integer-to-decimal-digit-zero
run: run [
    1:address:array:character/raw <- integer-to-decimal-string 0:literal
    2:array:character/raw <- copy 1:address:array:character/deref/raw
  ]
parse: instruction: integer-to-decimal-string
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"array":"character", "raw": ]}
parse: instruction: copy
parse:   ingredient: {name: "1", properties: ["1": "address":"array":"character", "deref": , "raw": ]}
parse:   product: {name: "2", properties: ["2": "array":"character", "raw": ]}
after-brace: recipe run1001
after-brace: integer-to-decimal-string ...
after-brace: copy ...
run: 1:address:array:character/raw <- integer-to-decimal-string 0:literal
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1000
run: n:number <- next-ingredient 
mem: storing 0 in location 1002
run: break-if n:number, 
mem: location 1002 is 0
run: jump-if fell through
run: result:address:array:character <- new [0]
mem: storing 1031 in location 1003
run: reply result:address:array:character
mem: location 1003 is 1031
run: result 0 is 1031
mem: storing 1031 in location 1
run: 2:array:character/raw <- copy 1:address:array:character/deref/raw
mem: location 1 is 1031
mem: location 1031 is 1
mem: location 1032 is 48
mem: storing 1 in location 2
mem: storing 48 in location 3
run: memory-should-contain [
    2:string <- [0]
  ]
run: checking string length at 2
run: checking location 3
