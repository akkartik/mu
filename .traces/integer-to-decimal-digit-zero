parse: instruction: run
parse:   ingredient: {name: "
    1:address:array:character/raw <- integer-to-decimal-string 0:literal
    2:array:character/raw <- copy 1:address:array:character/deref/raw
  ", value: 0, type: 0, properties: ["
    1:address:array:character/raw <- integer-to-decimal-string 0:literal
    2:array:character/raw <- copy 1:address:array:character/deref/raw
  ": "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    2:string <- [0]
  ", value: 0, type: 0, properties: ["
    2:string <- [0]
  ": "literal-string"]}
after-brace: recipe integer-to-decimal-digit-zero
after-brace: run ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: integer-to-decimal-digit-zero
run: instruction integer-to-decimal-digit-zero/0
run: run/55 {name: "
    1:address:array:character/raw <- integer-to-decimal-string 0:literal
    2:array:character/raw <- copy 1:address:array:character/deref/raw
  ", value: 0, type: 0, properties: ["
    1:address:array:character/raw <- integer-to-decimal-string 0:literal
    2:array:character/raw <- copy 1:address:array:character/deref/raw
  ": "literal-string"]}
run: ingredient 0 is 
    1:address:array:character/raw <- integer-to-decimal-string 0:literal
    2:array:character/raw <- copy 1:address:array:character/deref/raw
  
parse: instruction: integer-to-decimal-string
parse:   ingredient: {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
parse:   product: {name: "1", value: 0, type: 2-5-4, properties: ["1": "address":"array":"character", "raw": ]}
parse: instruction: copy
parse:   ingredient: {name: "1", value: 0, type: 2-5-4, properties: ["1": "address":"array":"character", "deref": , "raw": ]}
parse:   product: {name: "2", value: 0, type: 5-4, properties: ["2": "array":"character", "raw": ]}
after-brace: recipe run1001
after-brace: integer-to-decimal-string ...
after-brace: copy ...
run: instruction run1001/0
run: {name: "1", value: 1, type: 2-5-4, properties: ["1": "address":"array":"character", "raw": ]} <- integer-to-decimal-string/105 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run: ingredient 0 is 0
run: instruction integer-to-decimal-string/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1000
run: product 0 is default-space
run: instruction integer-to-decimal-string/1
run: {name: "n", value: 1, type: 1, properties: ["n": "number"]} <- next-ingredient/34 
run: product 0 is n
mem: storing 0 in location 1002
run: instruction integer-to-decimal-string/3
run: break-if/11 {name: "n", value: 1, type: 1, properties: ["n": "number"]}, {name: "", value: 2, type: 0, properties: ["": ]}
run: ingredient 0 is n
mem: location 1002 is 0
run: ingredient 1 is 
run: jump-if fell through
run: instruction integer-to-decimal-string/4
run: {name: "result", value: 2, type: 2-5-4, properties: ["result": "address":"array":"character"]} <- new/52 {name: "0", value: 0, type: 0, properties: ["0": "literal-string"]}
run: ingredient 0 is 0
run: product 0 is result
mem: storing 1031 in location 1003
run: instruction integer-to-decimal-string/5
run: reply/37 {name: "result", value: 2, type: 2-5-4, properties: ["result": "address":"array":"character"]}
run: ingredient 0 is result
mem: location 1003 is 1031
run: result 0 is 1031
run: product 0 is 1
mem: storing 1031 in location 1
run: instruction run1001/1
run: {name: "2", value: 2, type: 5-4, properties: ["2": "array":"character", "raw": ]} <- copy/1 {name: "1", value: 1, type: 2-5-4, properties: ["1": "address":"array":"character", "deref": , "raw": ]}
run: ingredient 0 is 1
mem: location 1 is 1031
mem: location 1031 is 1
mem: location 1032 is 48
run: product 0 is 2
mem: storing 1 in location 2
mem: storing 48 in location 3
run: instruction integer-to-decimal-digit-zero/1
run: memory-should-contain/56 {name: "
    2:string <- [0]
  ", value: 0, type: 0, properties: ["
    2:string <- [0]
  ": "literal-string"]}
run: ingredient 0 is 
    2:string <- [0]
  
run: checking string length at 2
run: checking location 3
