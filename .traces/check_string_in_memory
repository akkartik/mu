parse: instruction: run
parse:   ingredient: {name: "\n    1:number <- copy 3:literal\n    2:character <- copy 97:literal  # 'a'\n    3:character <- copy 98:literal  # 'b'\n    4:character <- copy 99:literal  # 'c'\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    1:string <- [abc]\n  ", properties: [_: "literal-string"]}
after-brace: recipe check_string_in_memory
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: check_string_in_memory
 101 run: run [
    1:number <- copy 3:literal
    2:character <- copy 97:literal  # 'a'
    3:character <- copy 98:literal  # 'b'
    4:character <- copy 99:literal  # 'c'
  ]
parse: instruction: copy
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse:   product: {name: "1", properties: ["1": "number"]}
parse: instruction: copy
parse:   ingredient: {name: "97", properties: ["97": "literal"]}
parse:   product: {name: "2", properties: ["2": "character"]}
parse: instruction: copy
parse:   ingredient: {name: "98", properties: ["98": "literal"]}
parse:   product: {name: "3", properties: ["3": "character"]}
parse: instruction: copy
parse:   ingredient: {name: "99", properties: ["99": "literal"]}
parse:   product: {name: "4", properties: ["4": "character"]}
after-brace: recipe run1001
after-brace: copy ...
after-brace: copy ...
after-brace: copy ...
after-brace: copy ...
 101 run: 1:number <- copy 3:literal
9999 mem: storing 3 in location 1
 101 run: 2:character <- copy 97:literal
9999 mem: storing 97 in location 2
 101 run: 3:character <- copy 98:literal
9999 mem: storing 98 in location 3
 101 run: 4:character <- copy 99:literal
9999 mem: storing 99 in location 4
 100 run: memory-should-contain [
    1:string <- [abc]
  ]
9999 run: checking string length at 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
