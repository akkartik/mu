 101 run: assume-console [
    left-click 2, 3
    press 65517  # up arrow
  ]
parse: instruction: left-click
parse:   ingredient: {name: "2", properties: ["2": "literal"]}
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse: instruction: press
parse:   ingredient: {name: "65517", properties: ["65517": "literal"]}
 101 run: run [
    editor-event-loop screen:address, console:address, 2:address:editor-data
    3:number <- get *2:address:editor-data, cursor-row:offset
    4:number <- get *2:address:editor-data, cursor-column:offset
  ]
parse: instruction: editor-event-loop
parse:   ingredient: {name: "screen", properties: ["screen": "address"]}
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   ingredient: {name: "2", properties: ["2": "address":"editor-data"]}
parse: instruction: get
parse:   ingredient: {name: "2", properties: ["*2": "address":"editor-data", "lookup": ]}
parse:   ingredient: {name: "cursor-row", properties: ["cursor-row": "offset"]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: get
parse:   ingredient: {name: "2", properties: ["*2": "address":"editor-data", "lookup": ]}
parse:   ingredient: {name: "cursor-column", properties: ["cursor-column": "offset"]}
parse:   product: {name: "4", properties: ["4": "number"]}
name: element cursor-row of type editor-data is at offset 6
name: element cursor-column of type editor-data is at offset 7
after-brace: recipe run1001
after-brace: editor-event-loop ...
after-brace: get ...
after-brace: get ...
 101 run: editor-event-loop screen:address, console:address, 2:address:editor-data
9999 mem: location 900 is 1009
9999 mem: location 901 is 1282
9999 mem: location 2 is 1000
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 102 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1247
 102 run: console:address <- next-ingredient 
9999 mem: storing 1282 in location 1248
 102 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1249
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1248 is 1282
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
9999 mem: new alloc: 1284
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1282 in location 1286
 103 run: break-unless x, 
9999 mem: location 1286 is 1282
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1286 is 1282
9999 mem: location 1282 is 0
9999 mem: location 1283 is 1273
9999 mem: location 1286 is 1282
9999 run: address to copy is 1282
9999 mem: storing 1282 in location 1287
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1286 is 1282
9999 mem: location 1282 is 0
9999 mem: location 1283 is 1273
9999 mem: location 1286 is 1282
9999 run: address to copy is 1283
9999 run: its type is address
9999 mem: location 1283 is 1273
9999 mem: storing 1273 in location 1288
 103 run: max:number <- length *buf
9999 mem: location 1288 is 1273
9999 mem: storing 2 in location 1289
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1287 is 1282
9999 mem: location 1282 is 0
9999 mem: location 1289 is 2
9999 mem: storing 0 in location 1290
 103 run: break-unless done?, 
9999 mem: location 1290 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index *buf, *idx
9999 mem: location 1288 is 1273
9999 mem: location 1287 is 1282
9999 mem: location 1282 is 0
9999 run: address to copy is 1274
9999 run: its type is event
9999 mem: location 1274 is 2
9999 mem: location 1275 is 65513
9999 mem: location 1276 is 2
9999 mem: location 1277 is 3
9999 mem: storing 2 in location 1292
9999 mem: storing 65513 in location 1293
9999 mem: storing 2 in location 1294
9999 mem: storing 3 in location 1295
 103 run: *idx <- add *idx, 1
9999 mem: location 1287 is 1282
9999 mem: location 1282 is 0
9999 mem: location 1287 is 1282
9999 mem: storing 1 in location 1282
 103 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1292 is 2
9999 mem: location 1293 is 65513
9999 mem: location 1294 is 2
9999 mem: location 1295 is 3
9999 mem: location 1286 is 1282
9999 run: result 0 is [2, 65513, 2, 3]
9999 run: result 1 is 1282
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 2 in location 1250
9999 mem: storing 65513 in location 1251
9999 mem: storing 2 in location 1252
9999 mem: storing 3 in location 1253
9999 mem: storing 1282 in location 1248
9999 mem: storing 1 in location 1254
9999 mem: storing 0 in location 1255
 102 run: loop-unless found?, 
9999 mem: location 1254 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1255 is 0
9999 run: jump-if fell through
 102 run: trace 10, [app], [next-event]
  10 app: next-event 
 102 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1250 is 2
9999 mem: location 1251 is 65513
9999 mem: location 1252 is 2
9999 mem: location 1253 is 3
9999 mem: storing 1251 in location 1256
 102 run: break-unless t, 
9999 mem: location 1256 is 1251
9999 run: jump-unless fell through
 102 run: move-cursor-in-editor screen, editor, *t
9999 mem: location 1247 is 1009
9999 mem: location 1249 is 1000
9999 mem: location 1256 is 1251
9999 mem: location 1251 is 65513
9999 mem: location 1252 is 2
9999 mem: location 1253 is 3
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1286
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1287
 103 run: t:touch-event <- next-ingredient 
9999 mem: storing 65513 in location 1288
9999 mem: storing 2 in location 1289
9999 mem: storing 3 in location 1290
 103 run: jump-if editor, 1:offset
9999 mem: location 1287 is 1000
9999 run: jumping to instruction 6
 103 run: click-column:number <- get t, column:offset
9999 mem: location 1288 is 65513
9999 mem: location 1289 is 2
9999 mem: location 1290 is 3
9999 run: address to copy is 1290
9999 run: its type is number
9999 mem: location 1290 is 3
9999 mem: storing 3 in location 1291
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1287 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1287 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1292
 103 run: too-far-left?:boolean <- lesser-than click-column, left
9999 mem: location 1291 is 3
9999 mem: location 1292 is 0
9999 mem: storing 0 in location 1293
 103 run: jump-unless too-far-left?, 1:offset
9999 mem: location 1293 is 0
9999 run: jumping to instruction 11
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1287 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1287 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1294
 103 run: too-far-right?:boolean <- greater-than click-column, right
9999 mem: location 1291 is 3
9999 mem: location 1294 is 9
9999 mem: storing 0 in location 1295
 103 run: jump-unless too-far-right?, 1:offset
9999 mem: location 1295 is 0
9999 run: jumping to instruction 15
 103 run: click-row:number <- get t, row:offset
9999 mem: location 1288 is 65513
9999 mem: location 1289 is 2
9999 mem: location 1290 is 3
9999 run: address to copy is 1289
9999 run: its type is number
9999 mem: location 1289 is 2
9999 mem: storing 2 in location 1296
 103 run: click-column:number <- get t, column:offset
9999 mem: location 1288 is 65513
9999 mem: location 1289 is 2
9999 mem: location 1290 is 3
9999 run: address to copy is 1290
9999 run: its type is number
9999 mem: location 1290 is 3
9999 mem: storing 3 in location 1291
 103 run: editor <- snap-cursor screen, editor, click-row, click-column
9999 mem: location 1286 is 1009
9999 mem: location 1287 is 1000
9999 mem: location 1296 is 2
9999 mem: location 1291 is 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 26
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1181
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1182
 104 run: target-row:number <- next-ingredient 
9999 mem: storing 2 in location 1183
 104 run: target-column:number <- next-ingredient 
9999 mem: storing 3 in location 1184
 104 run: jump-if editor, 1:offset
9999 mem: location 1182 is 1000
9999 run: jumping to instruction 7
 104 run: left:number <- get *editor, left:offset
9999 mem: location 1182 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1182 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1185
 104 run: right:number <- get *editor, right:offset
9999 mem: location 1182 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1182 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1186
 104 run: screen-height:number <- screen-height screen
9999 mem: location 1181 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1168
 105 run: break-unless sc, 
9999 mem: location 1168 is 1009
9999 run: jump-unless fell through
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1168 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1168 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1169
 105 run: reply height
9999 mem: location 1169 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1187
 104 run: curr:address:duplex-list <- get *editor, top-of-screen:offset
9999 mem: location 1182 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1182 is 1000
9999 run: address to copy is 1001
9999 run: its type is address
9999 mem: location 1001 is 1151
9999 mem: storing 1151 in location 1188
 104 run: prev:address:duplex-list <- copy curr
9999 mem: location 1188 is 1151
9999 mem: storing 1151 in location 1189
 104 run: curr <- next-duplex curr
9999 mem: location 1188 is 1151
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1151 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1151
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1168 is 1151
9999 mem: location 1151 is 167
9999 mem: location 1152 is 1163
9999 mem: location 1153 is 0
9999 mem: location 1168 is 1151
9999 run: address to copy is 1152
9999 run: its type is address
9999 mem: location 1152 is 1163
9999 mem: storing 1163 in location 1169
 105 run: reply result
9999 mem: location 1169 is 1163
9999 run: result 0 is 1163
9999 mem: storing 1163 in location 1188
 104 run: row:number <- copy 1/top
9999 mem: storing 1 in location 1190
 104 run: column:number <- copy left
9999 mem: location 1185 is 0
9999 mem: storing 0 in location 1191
 104 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1182 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1182 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1192
 104 run: *cursor-row <- copy target-row
9999 mem: location 1183 is 2
9999 mem: location 1192 is 1006
9999 mem: location 1192 is 1006
9999 mem: storing 2 in location 1006
 104 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1182 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1182 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1193
 104 run: *cursor-column <- copy target-column
9999 mem: location 1184 is 3
9999 mem: location 1193 is 1007
9999 mem: location 1193 is 1007
9999 mem: storing 3 in location 1007
 104 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1182 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 3
9999 mem: location 1008 is 1
9999 mem: location 1182 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1194
 104 run: break-unless curr, 
9999 mem: location 1188 is 1163
9999 run: jump-unless fell through
 104 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1190 is 1
9999 mem: location 1187 is 5
9999 mem: storing 0 in location 1195
 104 run: break-if off-screen?, 
9999 mem: location 1195 is 0
9999 run: jump-if fell through
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1190 is 1
9999 mem: location 1192 is 1006
9999 mem: location 1006 is 2
9999 mem: storing 0 in location 1196
 104 run: break-unless at-cursor-row?, 
9999 mem: location 1196 is 0
9999 run: jumping to instruction 31
 104 run: c:character <- get *curr, value:offset
9999 mem: location 1188 is 1163
9999 mem: location 1163 is 10
9999 mem: location 1164 is 1170
9999 mem: location 1165 is 1151
9999 mem: location 1188 is 1163
9999 run: address to copy is 1163
9999 run: its type is number
9999 mem: location 1163 is 10
9999 mem: storing 10 in location 1198
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1198 is 10
9999 mem: storing 1 in location 1199
 104 run: break-unless newline?, 
9999 mem: location 1199 is 1
9999 run: jump-unless fell through
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1190 is 1
9999 mem: location 1192 is 1006
9999 mem: location 1006 is 2
9999 mem: storing 0 in location 1196
 104 run: break-unless at-cursor-row?, 
9999 mem: location 1196 is 0
9999 run: jumping to instruction 43
 104 run: row <- add row, 1
9999 mem: location 1190 is 1
9999 mem: storing 2 in location 1190
 104 run: column <- copy left
9999 mem: location 1185 is 0
9999 mem: storing 0 in location 1191
 104 run: curr <- next-duplex curr
9999 mem: location 1188 is 1163
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1163 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1163
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1168 is 1163
9999 mem: location 1163 is 10
9999 mem: location 1164 is 1170
9999 mem: location 1165 is 1151
9999 mem: location 1168 is 1163
9999 run: address to copy is 1164
9999 run: its type is address
9999 mem: location 1164 is 1170
9999 mem: storing 1170 in location 1169
 105 run: reply result
9999 mem: location 1169 is 1170
9999 run: result 0 is 1170
9999 mem: storing 1170 in location 1188
 104 run: prev <- next-duplex prev
9999 mem: location 1189 is 1151
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1151 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1151
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1168 is 1151
9999 mem: location 1151 is 167
9999 mem: location 1152 is 1163
9999 mem: location 1153 is 0
9999 mem: location 1168 is 1151
9999 run: address to copy is 1152
9999 run: its type is address
9999 mem: location 1152 is 1163
9999 mem: storing 1163 in location 1169
 105 run: reply result
9999 mem: location 1169 is 1163
9999 run: result 0 is 1163
9999 mem: storing 1163 in location 1189
 104 run: loop +next-character:label
9999 run: jumping to instruction 22
 104 run: break-unless curr, 
9999 mem: location 1188 is 1170
9999 run: jump-unless fell through
 104 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1190 is 2
9999 mem: location 1187 is 5
9999 mem: storing 0 in location 1195
 104 run: break-if off-screen?, 
9999 mem: location 1195 is 0
9999 run: jump-if fell through
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1190 is 2
9999 mem: location 1192 is 1006
9999 mem: location 1006 is 2
9999 mem: storing 1 in location 1196
 104 run: break-unless at-cursor-row?, 
9999 mem: location 1196 is 1
9999 run: jump-unless fell through
 104 run: at-cursor?:boolean <- equal column, *cursor-column
9999 mem: location 1191 is 0
9999 mem: location 1193 is 1007
9999 mem: location 1007 is 3
9999 mem: storing 0 in location 1197
 104 run: break-unless at-cursor?, 
9999 mem: location 1197 is 0
9999 run: jumping to instruction 31
 104 run: c:character <- get *curr, value:offset
9999 mem: location 1188 is 1170
9999 mem: location 1170 is 100
9999 mem: location 1171 is 1173
9999 mem: location 1172 is 1163
9999 mem: location 1188 is 1170
9999 run: address to copy is 1170
9999 run: its type is number
9999 mem: location 1170 is 100
9999 mem: storing 100 in location 1198
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1198 is 100
9999 mem: storing 0 in location 1199
 104 run: break-unless newline?, 
9999 mem: location 1199 is 0
9999 run: jumping to instruction 49
 104 run: at-right?:boolean <- equal column, right
9999 mem: location 1191 is 0
9999 mem: location 1186 is 9
9999 mem: storing 0 in location 1201
 104 run: break-unless at-right?, 
9999 mem: location 1201 is 0
9999 run: jumping to instruction 56
 104 run: curr <- next-duplex curr
9999 mem: location 1188 is 1170
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1170 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1170
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1168 is 1170
9999 mem: location 1170 is 100
9999 mem: location 1171 is 1173
9999 mem: location 1172 is 1163
9999 mem: location 1168 is 1170
9999 run: address to copy is 1171
9999 run: its type is address
9999 mem: location 1171 is 1173
9999 mem: storing 1173 in location 1169
 105 run: reply result
9999 mem: location 1169 is 1173
9999 run: result 0 is 1173
9999 mem: storing 1173 in location 1188
 104 run: prev <- next-duplex prev
9999 mem: location 1189 is 1163
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1163 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1163
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1168 is 1163
9999 mem: location 1163 is 10
9999 mem: location 1164 is 1170
9999 mem: location 1165 is 1151
9999 mem: location 1168 is 1163
9999 run: address to copy is 1164
9999 run: its type is address
9999 mem: location 1164 is 1170
9999 mem: storing 1170 in location 1169
 105 run: reply result
9999 mem: location 1169 is 1170
9999 run: result 0 is 1170
9999 mem: storing 1170 in location 1189
 104 run: column <- add column, 1
9999 mem: location 1191 is 0
9999 mem: storing 1 in location 1191
 104 run: loop 
9999 run: jumping to instruction 21
 104 run: break-unless curr, 
9999 mem: location 1188 is 1173
9999 run: jump-unless fell through
 104 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1190 is 2
9999 mem: location 1187 is 5
9999 mem: storing 0 in location 1195
 104 run: break-if off-screen?, 
9999 mem: location 1195 is 0
9999 run: jump-if fell through
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1190 is 2
9999 mem: location 1192 is 1006
9999 mem: location 1006 is 2
9999 mem: storing 1 in location 1196
 104 run: break-unless at-cursor-row?, 
9999 mem: location 1196 is 1
9999 run: jump-unless fell through
 104 run: at-cursor?:boolean <- equal column, *cursor-column
9999 mem: location 1191 is 1
9999 mem: location 1193 is 1007
9999 mem: location 1007 is 3
9999 mem: storing 0 in location 1197
 104 run: break-unless at-cursor?, 
9999 mem: location 1197 is 0
9999 run: jumping to instruction 31
 104 run: c:character <- get *curr, value:offset
9999 mem: location 1188 is 1173
9999 mem: location 1173 is 101
9999 mem: location 1174 is 1176
9999 mem: location 1175 is 1170
9999 mem: location 1188 is 1173
9999 run: address to copy is 1173
9999 run: its type is number
9999 mem: location 1173 is 101
9999 mem: storing 101 in location 1198
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1198 is 101
9999 mem: storing 0 in location 1199
 104 run: break-unless newline?, 
9999 mem: location 1199 is 0
9999 run: jumping to instruction 49
 104 run: at-right?:boolean <- equal column, right
9999 mem: location 1191 is 1
9999 mem: location 1186 is 9
9999 mem: storing 0 in location 1201
schedule: snap-cursor/move-cursor-in-editor/editor-event-loop/run1001/scenario-editor-adjusts-column-at-empty-line
 104 run: break-unless at-right?, 
9999 mem: location 1201 is 0
9999 run: jumping to instruction 56
 104 run: curr <- next-duplex curr
9999 mem: location 1188 is 1173
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1173 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1173
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1168 is 1173
9999 mem: location 1173 is 101
9999 mem: location 1174 is 1176
9999 mem: location 1175 is 1170
9999 mem: location 1168 is 1173
9999 run: address to copy is 1174
9999 run: its type is address
9999 mem: location 1174 is 1176
9999 mem: storing 1176 in location 1169
 105 run: reply result
9999 mem: location 1169 is 1176
9999 run: result 0 is 1176
9999 mem: storing 1176 in location 1188
 104 run: prev <- next-duplex prev
9999 mem: location 1189 is 1170
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1170 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1170
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1168 is 1170
9999 mem: location 1170 is 100
9999 mem: location 1171 is 1173
9999 mem: location 1172 is 1163
9999 mem: location 1168 is 1170
9999 run: address to copy is 1171
9999 run: its type is address
9999 mem: location 1171 is 1173
9999 mem: storing 1173 in location 1169
 105 run: reply result
9999 mem: location 1169 is 1173
9999 run: result 0 is 1173
9999 mem: storing 1173 in location 1189
 104 run: column <- add column, 1
9999 mem: location 1191 is 1
9999 mem: storing 2 in location 1191
 104 run: loop 
9999 run: jumping to instruction 21
 104 run: break-unless curr, 
9999 mem: location 1188 is 1176
9999 run: jump-unless fell through
 104 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1190 is 2
9999 mem: location 1187 is 5
9999 mem: storing 0 in location 1195
 104 run: break-if off-screen?, 
9999 mem: location 1195 is 0
9999 run: jump-if fell through
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1190 is 2
9999 mem: location 1192 is 1006
9999 mem: location 1006 is 2
9999 mem: storing 1 in location 1196
 104 run: break-unless at-cursor-row?, 
9999 mem: location 1196 is 1
9999 run: jump-unless fell through
 104 run: at-cursor?:boolean <- equal column, *cursor-column
9999 mem: location 1191 is 2
9999 mem: location 1193 is 1007
9999 mem: location 1007 is 3
9999 mem: storing 0 in location 1197
 104 run: break-unless at-cursor?, 
9999 mem: location 1197 is 0
9999 run: jumping to instruction 31
 104 run: c:character <- get *curr, value:offset
9999 mem: location 1188 is 1176
9999 mem: location 1176 is 102
9999 mem: location 1177 is 0
9999 mem: location 1178 is 1173
9999 mem: location 1188 is 1176
9999 run: address to copy is 1176
9999 run: its type is number
9999 mem: location 1176 is 102
9999 mem: storing 102 in location 1198
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1198 is 102
9999 mem: storing 0 in location 1199
 104 run: break-unless newline?, 
9999 mem: location 1199 is 0
9999 run: jumping to instruction 49
 104 run: at-right?:boolean <- equal column, right
9999 mem: location 1191 is 2
9999 mem: location 1186 is 9
9999 mem: storing 0 in location 1201
 104 run: break-unless at-right?, 
9999 mem: location 1201 is 0
9999 run: jumping to instruction 56
 104 run: curr <- next-duplex curr
9999 mem: location 1188 is 1176
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1176 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1176
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1168 is 1176
9999 mem: location 1176 is 102
9999 mem: location 1177 is 0
9999 mem: location 1178 is 1173
9999 mem: location 1168 is 1176
9999 run: address to copy is 1177
9999 run: its type is address
9999 mem: location 1177 is 0
9999 mem: storing 0 in location 1169
 105 run: reply result
9999 mem: location 1169 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1188
 104 run: prev <- next-duplex prev
9999 mem: location 1189 is 1173
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1173 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1173
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1168 is 1173
9999 mem: location 1173 is 101
9999 mem: location 1174 is 1176
9999 mem: location 1175 is 1170
9999 mem: location 1168 is 1173
9999 run: address to copy is 1174
9999 run: its type is address
9999 mem: location 1174 is 1176
9999 mem: storing 1176 in location 1169
 105 run: reply result
9999 mem: location 1169 is 1176
9999 run: result 0 is 1176
9999 mem: storing 1176 in location 1189
 104 run: column <- add column, 1
9999 mem: location 1191 is 2
9999 mem: storing 3 in location 1191
 104 run: loop 
9999 run: jumping to instruction 21
 104 run: break-unless curr, 
9999 mem: location 1188 is 0
9999 run: jumping to instruction 61
 104 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1190 is 2
9999 mem: location 1192 is 1006
9999 mem: location 1006 is 2
9999 mem: storing 1 in location 1196
 104 run: cursor-outside-line?:boolean <- lesser-or-equal column, *cursor-column
9999 mem: location 1191 is 3
9999 mem: location 1193 is 1007
9999 mem: location 1007 is 3
9999 mem: storing 1 in location 1202
 104 run: before-cursor-on-same-line?:boolean <- and at-cursor-row?, cursor-outside-line?
9999 mem: location 1196 is 1
9999 mem: location 1202 is 1
9999 mem: storing 1 in location 1203
 104 run: above-cursor-row?:boolean <- lesser-than row, *cursor-row
9999 mem: location 1190 is 2
9999 mem: location 1192 is 1006
9999 mem: location 1006 is 2
9999 mem: storing 0 in location 1204
 104 run: before-cursor?:boolean <- or before-cursor-on-same-line?, above-cursor-row?
9999 mem: location 1203 is 1
9999 mem: location 1204 is 0
9999 mem: storing 1 in location 1205
 104 run: break-unless before-cursor?, 
9999 mem: location 1205 is 1
9999 run: jump-unless fell through
 104 run: *cursor-row <- copy row
9999 mem: location 1190 is 2
9999 mem: location 1192 is 1006
9999 mem: location 1192 is 1006
9999 mem: storing 2 in location 1006
 104 run: *cursor-column <- copy column
9999 mem: location 1191 is 3
9999 mem: location 1193 is 1007
9999 mem: location 1193 is 1007
9999 mem: storing 3 in location 1007
 104 run: *before-cursor <- copy prev
9999 mem: location 1189 is 1176
9999 mem: location 1194 is 1003
9999 mem: location 1194 is 1003
9999 mem: storing 1176 in location 1003
 104 run: reply editor/same-as-ingredient:1
9999 mem: location 1182 is 1000
9999 run: result 0 is 1000
9999 mem: storing 1000 in location 1287
 103 run: reply 1/true
 102 run: loop +next-event:label
9999 run: jumping to instruction 6
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1248 is 1282
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1282 in location 1286
 103 run: break-unless x, 
9999 mem: location 1286 is 1282
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1286 is 1282
9999 mem: location 1282 is 1
9999 mem: location 1283 is 1273
9999 mem: location 1286 is 1282
9999 run: address to copy is 1282
9999 mem: storing 1282 in location 1287
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1286 is 1282
9999 mem: location 1282 is 1
9999 mem: location 1283 is 1273
9999 mem: location 1286 is 1282
9999 run: address to copy is 1283
9999 run: its type is address
9999 mem: location 1283 is 1273
9999 mem: storing 1273 in location 1288
 103 run: max:number <- length *buf
9999 mem: location 1288 is 1273
9999 mem: storing 2 in location 1289
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1287 is 1282
9999 mem: location 1282 is 1
9999 mem: location 1289 is 2
9999 mem: storing 0 in location 1290
 103 run: break-unless done?, 
9999 mem: location 1290 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index *buf, *idx
9999 mem: location 1288 is 1273
9999 mem: location 1287 is 1282
9999 mem: location 1282 is 1
9999 run: address to copy is 1278
9999 run: its type is event
9999 mem: location 1278 is 1
9999 mem: location 1279 is 65517
9999 mem: location 1280 is 0
9999 mem: location 1281 is 0
9999 mem: storing 1 in location 1292
9999 mem: storing 65517 in location 1293
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 103 run: *idx <- add *idx, 1
9999 mem: location 1287 is 1282
9999 mem: location 1282 is 1
9999 mem: location 1287 is 1282
9999 mem: storing 2 in location 1282
 103 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1292 is 1
9999 mem: location 1293 is 65517
9999 mem: location 1294 is 0
9999 mem: location 1295 is 0
9999 mem: location 1286 is 1282
9999 run: result 0 is [1, 65517, 0, 0]
9999 run: result 1 is 1282
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 1 in location 1250
9999 mem: storing 65517 in location 1251
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
9999 mem: storing 1282 in location 1248
9999 mem: storing 1 in location 1254
9999 mem: storing 0 in location 1255
 102 run: loop-unless found?, 
9999 mem: location 1254 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1255 is 0
9999 run: jump-if fell through
 102 run: trace 10, [app], [next-event]
  10 app: next-event 
 102 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1250 is 1
9999 mem: location 1251 is 65517
9999 mem: location 1252 is 0
9999 mem: location 1253 is 0
9999 mem: storing 0 in location 1256
 102 run: break-unless t, 
9999 mem: location 1256 is 0
9999 run: jumping to instruction 15
 102 run: break-if t, 
9999 mem: location 1256 is 0
9999 run: jump-if fell through
 102 run: screen, editor, go-render?:boolean <- handle-keyboard-event screen, editor, e
9999 mem: location 1247 is 1009
9999 mem: location 1249 is 1000
9999 mem: location 1250 is 1
9999 mem: location 1251 is 65517
9999 mem: location 1252 is 0
9999 mem: location 1253 is 0
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 66
9999 mem: new alloc: 1297
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1299
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1300
 103 run: e:event <- next-ingredient 
9999 mem: storing 1 in location 1301
9999 mem: storing 65517 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: storing 0 in location 1304
 103 run: jump-if editor, 1:offset
9999 mem: location 1300 is 1000
9999 run: jumping to instruction 6
 103 run: screen-width:number <- screen-width screen
9999 mem: location 1299 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1168
 104 run: break-unless sc, 
9999 mem: location 1168 is 1009
9999 run: jump-unless fell through
 104 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1168 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1168 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1169
 104 run: reply width
9999 mem: location 1169 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1305
 103 run: screen-height:number <- screen-height screen
9999 mem: location 1299 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1168
 104 run: break-unless sc, 
9999 mem: location 1168 is 1009
9999 run: jump-unless fell through
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1168 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1168 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1169
 104 run: reply height
9999 mem: location 1169 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1306
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1300 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1176
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 3
9999 mem: location 1008 is 1
9999 mem: location 1300 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1307
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1300 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1176
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 3
9999 mem: location 1008 is 1
9999 mem: location 1300 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1308
 103 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1300 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1176
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 3
9999 mem: location 1008 is 1
9999 mem: location 1300 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1309
 103 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1300 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1176
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 3
9999 mem: location 1008 is 1
9999 mem: location 1300 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1310
 103 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1300 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1176
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 2
9999 mem: location 1007 is 3
9999 mem: location 1008 is 1
9999 mem: location 1300 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1311
 103 run: save-row:number <- copy *cursor-row
9999 mem: location 1310 is 1006
9999 mem: location 1006 is 2
9999 mem: location 1310 is 1006
9999 mem: location 1310 is 1006
9999 mem: storing 2 in location 1312
 103 run: save-column:number <- copy *cursor-column
9999 mem: location 1311 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1311 is 1007
9999 mem: location 1311 is 1007
9999 mem: storing 3 in location 1313
 103 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1301 is 1
9999 mem: location 1302 is 65517
9999 mem: location 1303 is 0
9999 mem: location 1304 is 0
9999 mem: storing 0 in location 1314
 103 run: break-unless c, 
9999 mem: location 1314 is 0
9999 run: jumping to instruction 75
 103 run: k:address:number <- maybe-convert e:event, keycode:variant
9999 mem: location 1301 is 1
9999 mem: location 1302 is 65517
9999 mem: location 1303 is 0
9999 mem: location 1304 is 0
9999 mem: storing 1302 in location 1326
 103 run: assert k, [event was of unknown type; neither keyboard nor mouse]
9999 mem: location 1326 is 1302
 103 run: page-up?:boolean <- equal *k, 65519/page-up
9999 mem: location 1326 is 1302
9999 mem: location 1302 is 65517
9999 mem: storing 0 in location 1327
 103 run: break-unless page-up?, 
9999 mem: location 1327 is 0
9999 run: jumping to instruction 84
 103 run: page-down?:boolean <- equal *k, 65518/page-down
9999 mem: location 1326 is 1302
9999 mem: location 1302 is 65517
9999 mem: storing 0 in location 1328
 103 run: break-unless page-down?, 
9999 mem: location 1328 is 0
9999 run: jumping to instruction 90
 103 run: end?:boolean <- equal *k, 65520/end
9999 mem: location 1326 is 1302
9999 mem: location 1302 is 65517
9999 mem: storing 0 in location 1329
 103 run: break-unless end?, 
9999 mem: location 1329 is 0
9999 run: jumping to instruction 96
 103 run: home?:boolean <- equal *k, 65521/home
9999 mem: location 1326 is 1302
9999 mem: location 1302 is 65517
9999 mem: storing 0 in location 1330
 103 run: break-unless home?, 
9999 mem: location 1330 is 0
9999 run: jumping to instruction 102
 103 run: move-to-next-line?:boolean <- equal *k, 65516/down-arrow
9999 mem: location 1326 is 1302
9999 mem: location 1302 is 65517
9999 mem: storing 0 in location 1331
 103 run: break-unless move-to-next-line?, 
9999 mem: location 1331 is 0
9999 run: jumping to instruction 143
 103 run: move-to-previous-line?:boolean <- equal *k, 65517/up-arrow
9999 mem: location 1326 is 1302
9999 mem: location 1302 is 65517
9999 mem: storing 1 in location 1343
 103 run: break-unless move-to-previous-line?, 
9999 mem: location 1343 is 1
9999 run: jump-unless fell through
 103 run: already-at-top?:boolean <- lesser-or-equal *cursor-row, 1/top
9999 mem: location 1310 is 1006
9999 mem: location 1006 is 2
9999 mem: storing 0 in location 1344
 103 run: break-if already-at-top?, 
9999 mem: location 1344 is 0
9999 run: jump-if fell through
 103 run: *cursor-row <- subtract *cursor-row, 1
9999 mem: location 1310 is 1006
9999 mem: location 1006 is 2
9999 mem: location 1310 is 1006
9999 mem: storing 1 in location 1006
 103 run: prev:address:duplex-list <- before-previous-line *before-cursor, editor
9999 mem: location 1309 is 1003
9999 mem: location 1003 is 1176
9999 mem: location 1300 is 1000
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 13
9999 mem: new alloc: 1364
 104 run: curr:address:duplex-list <- next-ingredient 
9999 mem: storing 1176 in location 1366
 104 run: c:character <- get *curr, value:offset
9999 mem: location 1366 is 1176
9999 mem: location 1176 is 102
9999 mem: location 1177 is 0
9999 mem: location 1178 is 1173
9999 mem: location 1366 is 1176
9999 run: address to copy is 1176
9999 run: its type is number
9999 mem: location 1176 is 102
9999 mem: storing 102 in location 1367
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1368
 104 run: left:number <- get *editor, left:offset
9999 mem: location 1368 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1176
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 3
9999 mem: location 1008 is 1
9999 mem: location 1368 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1369
 104 run: right:number <- get *editor, right:offset
9999 mem: location 1368 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1176
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 3
9999 mem: location 1008 is 1
9999 mem: location 1368 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1370
 104 run: max-line-length:number <- subtract right, left, -1/exclusive-right, 1/wrap-icon
9999 mem: location 1370 is 9
9999 mem: location 1369 is 0
9999 mem: storing 9 in location 1371
 104 run: sentinel:address:duplex-list <- get *editor, data:offset
9999 mem: location 1368 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1176
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 3
9999 mem: location 1008 is 1
9999 mem: location 1368 is 1000
9999 run: address to copy is 1000
9999 run: its type is address
9999 mem: location 1000 is 1151
9999 mem: storing 1151 in location 1372
 104 run: len:number <- previous-line-length curr, sentinel
9999 mem: location 1366 is 1176
9999 mem: location 1372 is 1151
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 105 run: curr:address:duplex-list <- next-ingredient 
9999 mem: storing 1176 in location 1145
 105 run: start:address:duplex-list <- next-ingredient 
9999 mem: storing 1151 in location 1146
 105 run: result:number <- copy 0
9999 mem: storing 0 in location 1147
 105 run: jump-if curr, 1:offset
9999 mem: location 1145 is 1176
9999 run: jumping to instruction 6
 105 run: at-start?:boolean <- equal curr, start
9999 mem: location 1145 is 1176
9999 mem: location 1146 is 1151
9999 mem: storing 0 in location 1148
 105 run: jump-unless at-start?, 1:offset
9999 mem: location 1148 is 0
9999 run: jumping to instruction 9
 105 run: curr <- prev-duplex curr
9999 mem: location 1145 is 1176
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1176 in location 1168
 106 run: jump-if in, 1:offset
9999 mem: location 1168 is 1176
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, prev:offset
9999 mem: location 1168 is 1176
9999 mem: location 1176 is 102
9999 mem: location 1177 is 0
9999 mem: location 1178 is 1173
9999 mem: location 1168 is 1176
9999 run: address to copy is 1178
9999 run: its type is address
9999 mem: location 1178 is 1173
9999 mem: storing 1173 in location 1169
 106 run: reply result
9999 mem: location 1169 is 1173
9999 run: result 0 is 1173
9999 mem: storing 1173 in location 1145
 105 run: break-unless curr, 
9999 mem: location 1145 is 1173
9999 run: jump-unless fell through
 105 run: at-start?:boolean <- equal curr, start
9999 mem: location 1145 is 1173
9999 mem: location 1146 is 1151
9999 mem: storing 0 in location 1148
 105 run: break-if at-start?, 
9999 mem: location 1148 is 0
9999 run: jump-if fell through
 105 run: c:character <- get *curr, value:offset
9999 mem: location 1145 is 1173
9999 mem: location 1173 is 101
9999 mem: location 1174 is 1176
9999 mem: location 1175 is 1170
9999 mem: location 1145 is 1173
9999 run: address to copy is 1173
9999 run: its type is number
9999 mem: location 1173 is 101
9999 mem: storing 101 in location 1149
 105 run: at-newline?:boolean <- equal c, 10/newline
9999 mem: location 1149 is 101
9999 mem: storing 0 in location 1150
 105 run: break-if at-newline?, 
9999 mem: location 1150 is 0
9999 run: jump-if fell through
 105 run: result <- add result, 1
9999 mem: location 1147 is 0
9999 mem: storing 1 in location 1147
 105 run: loop 
9999 run: jumping to instruction 10
 105 run: curr <- prev-duplex curr
9999 mem: location 1145 is 1173
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1173 in location 1168
 106 run: jump-if in, 1:offset
9999 mem: location 1168 is 1173
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, prev:offset
9999 mem: location 1168 is 1173
9999 mem: location 1173 is 101
9999 mem: location 1174 is 1176
9999 mem: location 1175 is 1170
9999 mem: location 1168 is 1173
9999 run: address to copy is 1175
9999 run: its type is address
9999 mem: location 1175 is 1170
9999 mem: storing 1170 in location 1169
 106 run: reply result
9999 mem: location 1169 is 1170
9999 run: result 0 is 1170
9999 mem: storing 1170 in location 1145
 105 run: break-unless curr, 
9999 mem: location 1145 is 1170
9999 run: jump-unless fell through
 105 run: at-start?:boolean <- equal curr, start
9999 mem: location 1145 is 1170
9999 mem: location 1146 is 1151
9999 mem: storing 0 in location 1148
 105 run: break-if at-start?, 
9999 mem: location 1148 is 0
9999 run: jump-if fell through
 105 run: c:character <- get *curr, value:offset
9999 mem: location 1145 is 1170
9999 mem: location 1170 is 100
9999 mem: location 1171 is 1173
9999 mem: location 1172 is 1163
9999 mem: location 1145 is 1170
9999 run: address to copy is 1170
9999 run: its type is number
9999 mem: location 1170 is 100
9999 mem: storing 100 in location 1149
 105 run: at-newline?:boolean <- equal c, 10/newline
9999 mem: location 1149 is 100
9999 mem: storing 0 in location 1150
 105 run: break-if at-newline?, 
9999 mem: location 1150 is 0
9999 run: jump-if fell through
 105 run: result <- add result, 1
9999 mem: location 1147 is 1
9999 mem: storing 2 in location 1147
 105 run: loop 
9999 run: jumping to instruction 10
 105 run: curr <- prev-duplex curr
9999 mem: location 1145 is 1170
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1170 in location 1168
 106 run: jump-if in, 1:offset
9999 mem: location 1168 is 1170
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, prev:offset
9999 mem: location 1168 is 1170
9999 mem: location 1170 is 100
9999 mem: location 1171 is 1173
9999 mem: location 1172 is 1163
9999 mem: location 1168 is 1170
9999 run: address to copy is 1172
9999 run: its type is address
9999 mem: location 1172 is 1163
9999 mem: storing 1163 in location 1169
 106 run: reply result
9999 mem: location 1169 is 1163
9999 run: result 0 is 1163
9999 mem: storing 1163 in location 1145
 105 run: break-unless curr, 
9999 mem: location 1145 is 1163
9999 run: jump-unless fell through
 105 run: at-start?:boolean <- equal curr, start
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1151
9999 mem: storing 0 in location 1148
 105 run: break-if at-start?, 
9999 mem: location 1148 is 0
9999 run: jump-if fell through
 105 run: c:character <- get *curr, value:offset
9999 mem: location 1145 is 1163
9999 mem: location 1163 is 10
9999 mem: location 1164 is 1170
9999 mem: location 1165 is 1151
9999 mem: location 1145 is 1163
9999 run: address to copy is 1163
9999 run: its type is number
9999 mem: location 1163 is 10
9999 mem: storing 10 in location 1149
 105 run: at-newline?:boolean <- equal c, 10/newline
9999 mem: location 1149 is 10
9999 mem: storing 1 in location 1150
 105 run: break-if at-newline?, 
9999 mem: location 1150 is 1
9999 run: jumping to instruction 19
 105 run: reply result
9999 mem: location 1147 is 2
9999 run: result 0 is 2
9999 mem: storing 2 in location 1373
 104 run: break-if len, 
9999 mem: location 1373 is 2
9999 run: jumping to instruction 15
 104 run: _, max:number <- divide-with-remainder len, max-line-length
9999 mem: location 1373 is 2
9999 mem: location 1371 is 9
9999 mem: storing 2 in location 1375
 104 run: break-if max, 
9999 mem: location 1375 is 2
9999 run: jumping to instruction 20
 104 run: max <- add max, 1
9999 mem: location 1375 is 2
9999 mem: storing 3 in location 1375
 104 run: count:number <- copy 0
9999 mem: storing 0 in location 1376
 104 run: done?:boolean <- greater-or-equal count, max
9999 mem: location 1376 is 0
9999 mem: location 1375 is 3
9999 mem: storing 0 in location 1377
 104 run: break-if done?, 
9999 mem: location 1377 is 0
9999 run: jump-if fell through
 104 run: prev:address:duplex-list <- prev-duplex curr
9999 mem: location 1366 is 1176
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1176 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1176
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, prev:offset
9999 mem: location 1168 is 1176
9999 mem: location 1176 is 102
9999 mem: location 1177 is 0
9999 mem: location 1178 is 1173
9999 mem: location 1168 is 1176
9999 run: address to copy is 1178
9999 run: its type is address
9999 mem: location 1178 is 1173
9999 mem: storing 1173 in location 1169
 105 run: reply result
9999 mem: location 1169 is 1173
9999 run: result 0 is 1173
9999 mem: storing 1173 in location 1374
 104 run: break-unless prev, 
9999 mem: location 1374 is 1173
9999 run: jump-unless fell through
 104 run: curr <- copy prev
9999 mem: location 1374 is 1173
9999 mem: storing 1173 in location 1366
 104 run: count <- add count, 1
9999 mem: location 1376 is 0
9999 mem: storing 1 in location 1376
 104 run: loop 
9999 run: jumping to instruction 24
 104 run: done?:boolean <- greater-or-equal count, max
9999 mem: location 1376 is 1
9999 mem: location 1375 is 3
9999 mem: storing 0 in location 1377
 104 run: break-if done?, 
9999 mem: location 1377 is 0
9999 run: jump-if fell through
 104 run: prev:address:duplex-list <- prev-duplex curr
9999 mem: location 1366 is 1173
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1173 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1173
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, prev:offset
9999 mem: location 1168 is 1173
9999 mem: location 1173 is 101
9999 mem: location 1174 is 1176
9999 mem: location 1175 is 1170
9999 mem: location 1168 is 1173
9999 run: address to copy is 1175
9999 run: its type is address
9999 mem: location 1175 is 1170
9999 mem: storing 1170 in location 1169
 105 run: reply result
9999 mem: location 1169 is 1170
9999 run: result 0 is 1170
9999 mem: storing 1170 in location 1374
 104 run: break-unless prev, 
9999 mem: location 1374 is 1170
9999 run: jump-unless fell through
 104 run: curr <- copy prev
9999 mem: location 1374 is 1170
9999 mem: storing 1170 in location 1366
 104 run: count <- add count, 1
9999 mem: location 1376 is 1
9999 mem: storing 2 in location 1376
 104 run: loop 
9999 run: jumping to instruction 24
 104 run: done?:boolean <- greater-or-equal count, max
9999 mem: location 1376 is 2
9999 mem: location 1375 is 3
9999 mem: storing 0 in location 1377
 104 run: break-if done?, 
9999 mem: location 1377 is 0
9999 run: jump-if fell through
 104 run: prev:address:duplex-list <- prev-duplex curr
9999 mem: location 1366 is 1170
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1170 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1170
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, prev:offset
9999 mem: location 1168 is 1170
9999 mem: location 1170 is 100
9999 mem: location 1171 is 1173
9999 mem: location 1172 is 1163
9999 mem: location 1168 is 1170
9999 run: address to copy is 1172
9999 run: its type is address
9999 mem: location 1172 is 1163
9999 mem: storing 1163 in location 1169
 105 run: reply result
9999 mem: location 1169 is 1163
9999 run: result 0 is 1163
9999 mem: storing 1163 in location 1374
 104 run: break-unless prev, 
9999 mem: location 1374 is 1163
9999 run: jump-unless fell through
 104 run: curr <- copy prev
9999 mem: location 1374 is 1163
9999 mem: storing 1163 in location 1366
 104 run: count <- add count, 1
9999 mem: location 1376 is 2
9999 mem: storing 3 in location 1376
 104 run: loop 
9999 run: jumping to instruction 24
 104 run: done?:boolean <- greater-or-equal count, max
9999 mem: location 1376 is 3
9999 mem: location 1375 is 3
9999 mem: storing 1 in location 1377
 104 run: break-if done?, 
9999 mem: location 1377 is 1
9999 run: jumping to instruction 31
 104 run: reply curr
9999 mem: location 1366 is 1163
9999 run: result 0 is 1163
9999 mem: storing 1163 in location 1345
 103 run: no-motion?:boolean <- equal prev, *before-cursor
9999 mem: location 1345 is 1163
9999 mem: location 1309 is 1003
9999 mem: location 1003 is 1176
9999 mem: storing 0 in location 1336
 103 run: jump-unless no-motion?, 1:offset
9999 mem: location 1336 is 0
9999 run: jumping to instruction 155
 103 run: tmp:address:duplex-list <- copy prev
9999 mem: location 1345 is 1163
9999 mem: storing 1163 in location 1346
 103 run: prev:address:duplex-list <- before-previous-line tmp, editor
9999 mem: location 1346 is 1163
9999 mem: location 1300 is 1000
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 13
 104 run: curr:address:duplex-list <- next-ingredient 
9999 mem: storing 1163 in location 1366
 104 run: c:character <- get *curr, value:offset
9999 mem: location 1366 is 1163
9999 mem: location 1163 is 10
9999 mem: location 1164 is 1170
9999 mem: location 1165 is 1151
9999 mem: location 1366 is 1163
9999 run: address to copy is 1163
9999 run: its type is number
9999 mem: location 1163 is 10
9999 mem: storing 10 in location 1367
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1368
 104 run: left:number <- get *editor, left:offset
9999 mem: location 1368 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1176
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 3
9999 mem: location 1008 is 1
9999 mem: location 1368 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1369
 104 run: right:number <- get *editor, right:offset
9999 mem: location 1368 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1176
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 3
9999 mem: location 1008 is 1
9999 mem: location 1368 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1370
 104 run: max-line-length:number <- subtract right, left, -1/exclusive-right, 1/wrap-icon
9999 mem: location 1370 is 9
9999 mem: location 1369 is 0
9999 mem: storing 9 in location 1371
 104 run: sentinel:address:duplex-list <- get *editor, data:offset
9999 mem: location 1368 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1176
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 3
9999 mem: location 1008 is 1
9999 mem: location 1368 is 1000
9999 run: address to copy is 1000
9999 run: its type is address
9999 mem: location 1000 is 1151
9999 mem: storing 1151 in location 1372
 104 run: len:number <- previous-line-length curr, sentinel
9999 mem: location 1366 is 1163
9999 mem: location 1372 is 1151
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 105 run: curr:address:duplex-list <- next-ingredient 
9999 mem: storing 1163 in location 1145
 105 run: start:address:duplex-list <- next-ingredient 
9999 mem: storing 1151 in location 1146
 105 run: result:number <- copy 0
9999 mem: storing 0 in location 1147
 105 run: jump-if curr, 1:offset
9999 mem: location 1145 is 1163
9999 run: jumping to instruction 6
 105 run: at-start?:boolean <- equal curr, start
9999 mem: location 1145 is 1163
9999 mem: location 1146 is 1151
9999 mem: storing 0 in location 1148
 105 run: jump-unless at-start?, 1:offset
9999 mem: location 1148 is 0
9999 run: jumping to instruction 9
 105 run: curr <- prev-duplex curr
9999 mem: location 1145 is 1163
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 106 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1163 in location 1168
 106 run: jump-if in, 1:offset
9999 mem: location 1168 is 1163
9999 run: jumping to instruction 4
 106 run: result:address:duplex-list <- get *in, prev:offset
9999 mem: location 1168 is 1163
9999 mem: location 1163 is 10
9999 mem: location 1164 is 1170
9999 mem: location 1165 is 1151
9999 mem: location 1168 is 1163
9999 run: address to copy is 1165
9999 run: its type is address
9999 mem: location 1165 is 1151
9999 mem: storing 1151 in location 1169
 106 run: reply result
9999 mem: location 1169 is 1151
9999 run: result 0 is 1151
9999 mem: storing 1151 in location 1145
 105 run: break-unless curr, 
9999 mem: location 1145 is 1151
9999 run: jump-unless fell through
 105 run: at-start?:boolean <- equal curr, start
9999 mem: location 1145 is 1151
9999 mem: location 1146 is 1151
9999 mem: storing 1 in location 1148
 105 run: break-if at-start?, 
9999 mem: location 1148 is 1
9999 run: jumping to instruction 19
 105 run: reply result
9999 mem: location 1147 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1373
 104 run: break-if len, 
9999 mem: location 1373 is 0
9999 run: jump-if fell through
 104 run: prev:address:duplex-list <- prev-duplex curr
9999 mem: location 1366 is 1163
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1163 in location 1168
 105 run: jump-if in, 1:offset
9999 mem: location 1168 is 1163
9999 run: jumping to instruction 4
 105 run: result:address:duplex-list <- get *in, prev:offset
9999 mem: location 1168 is 1163
9999 mem: location 1163 is 10
9999 mem: location 1164 is 1170
9999 mem: location 1165 is 1151
9999 mem: location 1168 is 1163
9999 run: address to copy is 1165
9999 run: its type is address
9999 mem: location 1165 is 1151
9999 mem: storing 1151 in location 1169
 105 run: reply result
9999 mem: location 1169 is 1151
9999 run: result 0 is 1151
9999 mem: storing 1151 in location 1374
 104 run: jump-if prev, 1:offset
9999 mem: location 1374 is 1151
9999 run: jumping to instruction 14
 104 run: reply prev
9999 mem: location 1374 is 1151
9999 run: result 0 is 1151
9999 mem: storing 1151 in location 1345
 103 run: no-motion?:boolean <- equal prev, *before-cursor
9999 mem: location 1345 is 1151
9999 mem: location 1309 is 1003
9999 mem: location 1003 is 1176
9999 mem: storing 0 in location 1336
 103 run: jump-unless no-motion?, 1:offset
9999 mem: location 1336 is 0
9999 run: jumping to instruction 160
 103 run: *before-cursor <- copy prev
9999 mem: location 1345 is 1151
9999 mem: location 1309 is 1003
9999 mem: location 1309 is 1003
9999 mem: storing 1151 in location 1003
 103 run: target-column:number <- copy *cursor-column
9999 mem: location 1311 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1311 is 1007
9999 mem: location 1311 is 1007
9999 mem: storing 3 in location 1337
 103 run: *cursor-column <- copy left
9999 mem: location 1307 is 0
9999 mem: location 1311 is 1007
9999 mem: location 1311 is 1007
9999 mem: storing 0 in location 1007
 103 run: done?:boolean <- greater-or-equal *cursor-column, target-column
9999 mem: location 1311 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1337 is 3
9999 mem: storing 0 in location 1338
 103 run: break-if done?, 
9999 mem: location 1338 is 0
9999 run: jump-if fell through
 103 run: curr:address:duplex-list <- next-duplex *before-cursor
9999 mem: location 1309 is 1003
9999 mem: location 1003 is 1151
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1151 in location 1168
 104 run: jump-if in, 1:offset
9999 mem: location 1168 is 1151
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1168 is 1151
9999 mem: location 1151 is 167
9999 mem: location 1152 is 1163
9999 mem: location 1153 is 0
9999 mem: location 1168 is 1151
9999 run: address to copy is 1152
9999 run: its type is address
9999 mem: location 1152 is 1163
9999 mem: storing 1163 in location 1169
 104 run: reply result
9999 mem: location 1169 is 1163
9999 run: result 0 is 1163
9999 mem: storing 1163 in location 1339
 103 run: break-unless curr, 
9999 mem: location 1339 is 1163
9999 run: jump-unless fell through
 103 run: currc:character <- get *curr, value:offset
9999 mem: location 1339 is 1163
9999 mem: location 1163 is 10
9999 mem: location 1164 is 1170
9999 mem: location 1165 is 1151
9999 mem: location 1339 is 1163
9999 run: address to copy is 1163
9999 run: its type is number
9999 mem: location 1163 is 10
9999 mem: storing 10 in location 1340
 103 run: at-newline?:boolean <- equal currc, 10/newline
9999 mem: location 1340 is 10
9999 mem: storing 1 in location 1341
 103 run: break-if at-newline?, 
9999 mem: location 1341 is 1
9999 run: jumping to instruction 174
 103 run: reply screen/same-as-ingredient:0, editor/same-as-ingredient:1, 0/no-more-render
9999 mem: location 1299 is 1009
9999 mem: location 1300 is 1000
9999 run: result 0 is 1009
9999 run: result 1 is 1000
9999 run: result 2 is 0
9999 mem: storing 1009 in location 1247
9999 mem: storing 1000 in location 1249
9999 mem: storing 0 in location 1257
 102 run: break-unless go-render?, 
9999 mem: location 1257 is 0
9999 run: jumping to instruction 22
 102 run: loop 
9999 run: jumping to instruction 5
 102 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1248 is 1282
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1282 in location 1286
 103 run: break-unless x, 
9999 mem: location 1286 is 1282
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1286 is 1282
9999 mem: location 1282 is 2
9999 mem: location 1283 is 1273
9999 mem: location 1286 is 1282
9999 run: address to copy is 1282
9999 mem: storing 1282 in location 1287
 103 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1286 is 1282
9999 mem: location 1282 is 2
9999 mem: location 1283 is 1273
9999 mem: location 1286 is 1282
9999 run: address to copy is 1283
9999 run: its type is address
9999 mem: location 1283 is 1273
9999 mem: storing 1273 in location 1288
 103 run: max:number <- length *buf
9999 mem: location 1288 is 1273
9999 mem: storing 2 in location 1289
 103 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1287 is 1282
9999 mem: location 1282 is 2
9999 mem: location 1289 is 2
9999 mem: storing 1 in location 1290
 103 run: break-unless done?, 
9999 mem: location 1290 is 1
9999 run: jump-unless fell through
 103 run: dummy:address:event <- new event:type
9999 mem: storing 1166 in location 1291
 103 run: reply *dummy, x/same-as-ingredient:0, 1/found, 1/quit
9999 mem: location 1291 is 1166
9999 mem: location 1166 is 0
9999 mem: location 1167 is 0
9999 mem: location 1168 is 0
9999 mem: location 1169 is 0
9999 mem: location 1286 is 1282
9999 run: result 0 is [0, 0, 0, 0]
9999 run: result 1 is 1282
9999 run: result 2 is 1
9999 run: result 3 is 1
9999 mem: storing 0 in location 1250
9999 mem: storing 0 in location 1251
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
9999 mem: storing 1282 in location 1248
9999 mem: storing 1 in location 1254
9999 mem: storing 1 in location 1255
 102 run: loop-unless found?, 
9999 mem: location 1254 is 1
9999 run: jump-unless fell through
 102 run: break-if quit?, 
9999 mem: location 1255 is 1
9999 run: jumping to instruction 25
 101 run: 3:number <- get *2:address:editor-data, cursor-row:offset
9999 mem: location 2 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 2 is 1000
9999 run: address to copy is 1006
9999 run: its type is number
9999 mem: location 1006 is 1
9999 mem: storing 1 in location 3
 101 run: 4:number <- get *2:address:editor-data, cursor-column:offset
9999 mem: location 2 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 2 is 1000
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 4
 100 run: memory-should-contain [
    3 <- 1
    4 <- 0
  ]
9999 run: checking location 3
9999 run: checking location 4
 100 run: check-trace-count-for-label 0, [print-character]
 100 run: assume-console [
    type [0]
  ]
parse: instruction: type
parse:   ingredient: {name: "0", properties: [_: "literal-string"]}
 100 run: run [
    editor-event-loop screen:address, console:address, 2:address:editor-data
  ]
parse: instruction: editor-event-loop
parse:   ingredient: {name: "screen", properties: ["screen": "address"]}
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   ingredient: {name: "2", properties: ["2": "address":"editor-data"]}
after-brace: recipe run1002
after-brace: editor-event-loop ...
 100 run: editor-event-loop screen:address, console:address, 2:address:editor-data
9999 mem: location 900 is 1009
9999 mem: location 901 is 1383
9999 mem: location 2 is 1000
 101 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 101 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1247
 101 run: console:address <- next-ingredient 
9999 mem: storing 1383 in location 1248
 101 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1249
 101 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1248 is 1383
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 102 run: x:address:console <- next-ingredient 
9999 mem: storing 1383 in location 1286
 102 run: break-unless x, 
9999 mem: location 1286 is 1383
9999 run: jump-unless fell through
 102 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1286 is 1383
9999 mem: location 1383 is 0
9999 mem: location 1384 is 1378
9999 mem: location 1286 is 1383
9999 run: address to copy is 1383
9999 mem: storing 1383 in location 1287
 102 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1286 is 1383
9999 mem: location 1383 is 0
9999 mem: location 1384 is 1378
9999 mem: location 1286 is 1383
9999 run: address to copy is 1384
9999 run: its type is address
9999 mem: location 1384 is 1378
9999 mem: storing 1378 in location 1288
 102 run: max:number <- length *buf
9999 mem: location 1288 is 1378
9999 mem: storing 1 in location 1289
 102 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1287 is 1383
9999 mem: location 1383 is 0
9999 mem: location 1289 is 1
9999 mem: storing 0 in location 1290
 102 run: break-unless done?, 
9999 mem: location 1290 is 0
9999 run: jumping to instruction 12
 102 run: result:event <- index *buf, *idx
9999 mem: location 1288 is 1378
9999 mem: location 1287 is 1383
9999 mem: location 1383 is 0
9999 run: address to copy is 1379
9999 run: its type is event
9999 mem: location 1379 is 0
9999 mem: location 1380 is 48
9999 mem: location 1381 is 0
9999 mem: location 1382 is 0
9999 mem: storing 0 in location 1292
9999 mem: storing 48 in location 1293
9999 mem: storing 0 in location 1294
9999 mem: storing 0 in location 1295
 102 run: *idx <- add *idx, 1
9999 mem: location 1287 is 1383
9999 mem: location 1383 is 0
9999 mem: location 1287 is 1383
9999 mem: storing 1 in location 1383
 102 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1292 is 0
9999 mem: location 1293 is 48
9999 mem: location 1294 is 0
9999 mem: location 1295 is 0
9999 mem: location 1286 is 1383
9999 run: result 0 is [0, 48, 0, 0]
9999 run: result 1 is 1383
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1250
9999 mem: storing 48 in location 1251
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
9999 mem: storing 1383 in location 1248
9999 mem: storing 1 in location 1254
9999 mem: storing 0 in location 1255
 101 run: loop-unless found?, 
9999 mem: location 1254 is 1
9999 run: jump-unless fell through
 101 run: break-if quit?, 
9999 mem: location 1255 is 0
9999 run: jump-if fell through
 101 run: trace 10, [app], [next-event]
  10 app: next-event 
 101 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1250 is 0
9999 mem: location 1251 is 48
9999 mem: location 1252 is 0
9999 mem: location 1253 is 0
9999 mem: storing 0 in location 1256
 101 run: break-unless t, 
9999 mem: location 1256 is 0
9999 run: jumping to instruction 15
 101 run: break-if t, 
9999 mem: location 1256 is 0
9999 run: jump-if fell through
 101 run: screen, editor, go-render?:boolean <- handle-keyboard-event screen, editor, e
9999 mem: location 1247 is 1009
9999 mem: location 1249 is 1000
9999 mem: location 1250 is 0
9999 mem: location 1251 is 48
9999 mem: location 1252 is 0
9999 mem: location 1253 is 0
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 66
 102 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1299
 102 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1300
 102 run: e:event <- next-ingredient 
9999 mem: storing 0 in location 1301
9999 mem: storing 48 in location 1302
9999 mem: storing 0 in location 1303
9999 mem: storing 0 in location 1304
 102 run: jump-if editor, 1:offset
9999 mem: location 1300 is 1000
9999 run: jumping to instruction 6
 102 run: screen-width:number <- screen-width screen
9999 mem: location 1299 is 1009
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1385
 103 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1387
 103 run: break-unless sc, 
9999 mem: location 1387 is 1009
9999 run: jump-unless fell through
 103 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1387 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1387 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1388
 103 run: reply width
9999 mem: location 1388 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1305
 102 run: screen-height:number <- screen-height screen
9999 mem: location 1299 is 1009
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 103 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1387
 103 run: break-unless sc, 
9999 mem: location 1387 is 1009
9999 run: jump-unless fell through
 103 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1387 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1387 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1388
 103 run: reply height
9999 mem: location 1388 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1306
 102 run: left:number <- get *editor, left:offset
9999 mem: location 1300 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1300 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1307
 102 run: right:number <- get *editor, right:offset
9999 mem: location 1300 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1300 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1308
 102 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1300 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1300 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1309
 102 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1300 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1300 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1310
 102 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1300 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1300 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1311
 102 run: save-row:number <- copy *cursor-row
9999 mem: location 1310 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1310 is 1006
9999 mem: location 1310 is 1006
9999 mem: storing 1 in location 1312
 102 run: save-column:number <- copy *cursor-column
9999 mem: location 1311 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1311 is 1007
9999 mem: location 1311 is 1007
9999 mem: storing 0 in location 1313
 102 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1301 is 0
9999 mem: location 1302 is 48
9999 mem: location 1303 is 0
9999 mem: location 1304 is 0
9999 mem: storing 1302 in location 1314
 102 run: break-unless c, 
9999 mem: location 1314 is 1302
9999 run: jump-unless fell through
 102 run: ctrl-b?:boolean <- equal *c, 2/ctrl-f
9999 mem: location 1314 is 1302
9999 mem: location 1302 is 48
9999 mem: storing 0 in location 1315
 102 run: break-unless ctrl-b?, 
9999 mem: location 1315 is 0
9999 run: jumping to instruction 24
 102 run: ctrl-f?:boolean <- equal *c, 6/ctrl-f
9999 mem: location 1314 is 1302
9999 mem: location 1302 is 48
9999 mem: storing 0 in location 1316
 102 run: break-unless ctrl-f?, 
9999 mem: location 1316 is 0
9999 run: jumping to instruction 30
 102 run: ctrl-k?:boolean <- equal *c, 11/ctrl-k
9999 mem: location 1314 is 1302
9999 mem: location 1302 is 48
9999 mem: storing 0 in location 1317
 102 run: break-unless ctrl-k?, 
9999 mem: location 1317 is 0
9999 run: jumping to instruction 36
 102 run: ctrl-u?:boolean <- equal *c, 21/ctrl-u
9999 mem: location 1314 is 1302
9999 mem: location 1302 is 48
9999 mem: storing 0 in location 1318
 102 run: break-unless ctrl-u?, 
9999 mem: location 1318 is 0
9999 run: jumping to instruction 42
 102 run: ctrl-e?:boolean <- equal *c, 5/ctrl-e
9999 mem: location 1314 is 1302
9999 mem: location 1302 is 48
9999 mem: storing 0 in location 1319
 102 run: break-unless ctrl-e?, 
9999 mem: location 1319 is 0
9999 run: jumping to instruction 48
 102 run: ctrl-a?:boolean <- equal *c, 1/ctrl-a
9999 mem: location 1314 is 1302
9999 mem: location 1302 is 48
9999 mem: storing 0 in location 1320
 102 run: break-unless ctrl-a?, 
9999 mem: location 1320 is 0
9999 run: jumping to instruction 54
 102 run: backspace?:boolean <- equal *c, 8/backspace
9999 mem: location 1314 is 1302
9999 mem: location 1302 is 48
9999 mem: storing 0 in location 1321
 102 run: break-unless backspace?, 
9999 mem: location 1321 is 0
9999 run: jumping to instruction 60
 102 run: tab?:boolean <- equal *c, 9/tab
9999 mem: location 1314 is 1302
9999 mem: location 1302 is 48
9999 mem: storing 0 in location 1323
 102 run: break-unless tab?, 
9999 mem: location 1323 is 0
9999 run: jumping to instruction 67
 102 run: regular-character?:boolean <- greater-or-equal *c, 32/space
9999 mem: location 1314 is 1302
9999 mem: location 1302 is 48
9999 mem: storing 1 in location 1324
 102 run: newline?:boolean <- equal *c, 10/newline
9999 mem: location 1314 is 1302
9999 mem: location 1302 is 48
9999 mem: storing 0 in location 1325
 102 run: regular-character? <- or regular-character?, newline?
9999 mem: location 1324 is 1
9999 mem: location 1325 is 0
9999 mem: storing 1 in location 1324
 102 run: jump-if regular-character?, 1:offset
9999 mem: location 1324 is 1
9999 run: jumping to instruction 73
 102 run: editor, screen, go-render?:boolean <- insert-at-cursor editor, *c, screen
9999 mem: location 1300 is 1000
9999 mem: location 1314 is 1302
9999 mem: location 1302 is 48
9999 mem: location 1299 is 1009
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 35
9999 mem: new alloc: 1389
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1391
 103 run: c:character <- next-ingredient 
9999 mem: storing 48 in location 1392
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1393
 103 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1391 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1151
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1391 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1394
 103 run: insert-duplex c, *before-cursor
9999 mem: location 1392 is 48
9999 mem: location 1394 is 1003
9999 mem: location 1003 is 1151
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 104 run: x:location <- next-ingredient 
9999 mem: storing 48 in location 1145
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1151 in location 1146
 104 run: new-node:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1425
9999 mem: storing 1425 in location 1147
 104 run: val:address:location <- get-address *new-node, value:offset
9999 mem: location 1147 is 1425
9999 mem: location 1425 is 0
9999 mem: location 1426 is 0
9999 mem: location 1427 is 0
9999 mem: location 1147 is 1425
9999 run: address to copy is 1425
9999 mem: storing 1425 in location 1148
 104 run: *val <- copy x
9999 mem: location 1145 is 48
9999 mem: location 1148 is 1425
9999 mem: location 1148 is 1425
9999 mem: storing 48 in location 1425
 104 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1146 is 1151
9999 mem: location 1151 is 167
9999 mem: location 1152 is 1163
9999 mem: location 1153 is 0
9999 mem: location 1146 is 1151
9999 run: address to copy is 1152
9999 run: its type is address
9999 mem: location 1152 is 1163
9999 mem: storing 1163 in location 1149
 104 run: y:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1146 is 1151
9999 mem: location 1151 is 167
9999 mem: location 1152 is 1163
9999 mem: location 1153 is 0
9999 mem: location 1146 is 1151
9999 run: address to copy is 1152
9999 mem: storing 1152 in location 1150
 104 run: *y <- copy new-node
9999 mem: location 1147 is 1425
9999 mem: location 1150 is 1152
9999 mem: location 1150 is 1152
9999 mem: storing 1425 in location 1152
 104 run: y <- get-address *new-node, prev:offset
9999 mem: location 1147 is 1425
9999 mem: location 1425 is 48
9999 mem: location 1426 is 0
9999 mem: location 1427 is 0
9999 mem: location 1147 is 1425
9999 run: address to copy is 1427
9999 mem: storing 1427 in location 1150
 104 run: *y <- copy in
9999 mem: location 1146 is 1151
9999 mem: location 1150 is 1427
9999 mem: location 1150 is 1427
9999 mem: storing 1151 in location 1427
 104 run: y <- get-address *new-node, next:offset
9999 mem: location 1147 is 1425
9999 mem: location 1425 is 48
9999 mem: location 1426 is 0
9999 mem: location 1427 is 1151
9999 mem: location 1147 is 1425
9999 run: address to copy is 1426
9999 mem: storing 1426 in location 1150
 104 run: *y <- copy next-node
9999 mem: location 1149 is 1163
9999 mem: location 1150 is 1426
9999 mem: location 1150 is 1426
9999 mem: storing 1163 in location 1426
 104 run: jump-if next-node, 1:offset
9999 mem: location 1149 is 1163
9999 run: jumping to instruction 15
 104 run: y <- get-address *next-node, prev:offset
9999 mem: location 1149 is 1163
9999 mem: location 1163 is 10
9999 mem: location 1164 is 1170
9999 mem: location 1165 is 1151
9999 mem: location 1149 is 1163
9999 run: address to copy is 1165
9999 mem: storing 1165 in location 1150
 104 run: *y <- copy new-node
9999 mem: location 1147 is 1425
9999 mem: location 1150 is 1165
9999 mem: location 1150 is 1165
9999 mem: storing 1425 in location 1165
 104 run: reply new-node
9999 mem: location 1147 is 1425
 103 run: *before-cursor <- next-duplex *before-cursor
9999 mem: location 1394 is 1003
9999 mem: location 1003 is 1151
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1151 in location 1387
 104 run: jump-if in, 1:offset
9999 mem: location 1387 is 1151
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1387 is 1151
9999 mem: location 1151 is 167
9999 mem: location 1152 is 1425
9999 mem: location 1153 is 0
9999 mem: location 1387 is 1151
9999 run: address to copy is 1152
9999 run: its type is address
9999 mem: location 1152 is 1425
9999 mem: storing 1425 in location 1388
 104 run: reply result
9999 mem: location 1388 is 1425
9999 run: result 0 is 1425
9999 mem: location 1394 is 1003
9999 mem: storing 1425 in location 1003
 103 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1391 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1425
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1391 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1395
 103 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1391 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1425
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1391 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1396
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1391 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1425
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1391 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1397
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1391 is 1000
9999 mem: location 1000 is 1151
9999 mem: location 1001 is 1151
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1425
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1391 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1398
 103 run: save-row:number <- copy *cursor-row
9999 mem: location 1395 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1395 is 1006
9999 mem: location 1395 is 1006
9999 mem: storing 1 in location 1399
 103 run: save-column:number <- copy *cursor-column
9999 mem: location 1396 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1396 is 1007
9999 mem: location 1396 is 1007
9999 mem: storing 0 in location 1400
 103 run: screen-width:number <- screen-width screen
9999 mem: location 1393 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1387
 104 run: break-unless sc, 
9999 mem: location 1387 is 1009
9999 run: jump-unless fell through
 104 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1387 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1387 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1388
 104 run: reply width
9999 mem: location 1388 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1401
 103 run: screen-height:number <- screen-height screen
9999 mem: location 1393 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1387
 104 run: break-unless sc, 
9999 mem: location 1387 is 1009
9999 run: jump-unless fell through
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1387 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1387 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1388
 104 run: reply height
9999 mem: location 1388 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1402
schedule: insert-at-cursor/handle-keyboard-event/editor-event-loop/run1002/scenario-editor-adjusts-column-at-empty-line
 103 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1392 is 48
9999 mem: storing 0 in location 1403
 103 run: break-unless newline?, 
9999 mem: location 1403 is 0
9999 run: jumping to instruction 47
 103 run: wrap-column:number <- subtract right, 1
9999 mem: location 1398 is 9
9999 mem: storing 8 in location 1413
 103 run: at-wrap?:boolean <- greater-or-equal *cursor-column, wrap-column
9999 mem: location 1396 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1413 is 8
9999 mem: storing 0 in location 1414
 103 run: break-unless at-wrap?, 
9999 mem: location 1414 is 0
9999 run: jumping to instruction 65
 103 run: *cursor-column <- add *cursor-column, 1
9999 mem: location 1396 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1396 is 1007
9999 mem: storing 1 in location 1007
 103 run: next:address:duplex-list <- next-duplex *before-cursor
9999 mem: location 1394 is 1003
9999 mem: location 1003 is 1425
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1425 in location 1387
 104 run: jump-if in, 1:offset
9999 mem: location 1387 is 1425
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1387 is 1425
9999 mem: location 1425 is 48
9999 mem: location 1426 is 1163
9999 mem: location 1427 is 1151
9999 mem: location 1387 is 1425
9999 run: address to copy is 1426
9999 run: its type is address
9999 mem: location 1426 is 1163
9999 mem: storing 1163 in location 1388
 104 run: reply result
9999 mem: location 1388 is 1163
9999 run: result 0 is 1163
9999 mem: storing 1163 in location 1415
 103 run: at-end?:boolean <- equal next, 0/null
9999 mem: location 1415 is 1163
9999 mem: storing 0 in location 1416
 103 run: break-unless at-end?, 
9999 mem: location 1416 is 0
9999 run: jumping to instruction 79
 103 run: break-unless next, 
9999 mem: location 1415 is 1163
9999 run: jump-unless fell through
 103 run: at-right?:boolean <- greater-or-equal *cursor-column, screen-width
9999 mem: location 1396 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1401 is 10
9999 mem: storing 0 in location 1419
 103 run: break-if at-right?, 
9999 mem: location 1419 is 0
9999 run: jump-if fell through
 103 run: curr:address:duplex-list <- copy *before-cursor
9999 mem: location 1394 is 1003
9999 mem: location 1003 is 1425
9999 mem: location 1394 is 1003
9999 mem: location 1394 is 1003
9999 mem: storing 1425 in location 1421
 103 run: move-cursor screen, save-row, save-column
9999 mem: location 1393 is 1009
9999 mem: location 1399 is 1
9999 mem: location 1400 is 0
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1208
 104 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1209
 104 run: new-column:number <- next-ingredient 
9999 mem: storing 0 in location 1210
 104 run: break-unless sc, 
9999 mem: location 1208 is 1009
9999 run: jump-unless fell through
 104 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1208 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 5
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1208 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1211
 104 run: *row <- copy new-row
9999 mem: location 1209 is 1
9999 mem: location 1211 is 1011
9999 mem: location 1211 is 1011
9999 mem: storing 1 in location 1011
 104 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1208 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1208 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1212
 104 run: *column <- copy new-column
9999 mem: location 1210 is 0
9999 mem: location 1212 is 1012
9999 mem: location 1212 is 1012
9999 mem: storing 0 in location 1012
 104 run: reply sc/same-as-ingredient:0
9999 mem: location 1208 is 1009
 103 run: curr-column:number <- copy save-column
9999 mem: location 1400 is 0
9999 mem: storing 0 in location 1422
 103 run: at-right?:boolean <- greater-or-equal curr-column, screen-width
9999 mem: location 1422 is 0
9999 mem: location 1401 is 10
9999 mem: storing 0 in location 1419
 103 run: jump-unless at-right?, 1:offset
9999 mem: location 1419 is 0
9999 run: jumping to instruction 91
 103 run: break-unless curr, 
9999 mem: location 1421 is 1425
9999 run: jump-unless fell through
 103 run: currc:character <- get *curr, value:offset
9999 mem: location 1421 is 1425
9999 mem: location 1425 is 48
9999 mem: location 1426 is 1163
9999 mem: location 1427 is 1151
9999 mem: location 1421 is 1425
9999 run: address to copy is 1425
9999 run: its type is number
9999 mem: location 1425 is 48
9999 mem: storing 48 in location 1423
 103 run: at-newline?:boolean <- equal currc, 10/newline
9999 mem: location 1423 is 48
9999 mem: storing 0 in location 1424
 103 run: break-if at-newline?, 
9999 mem: location 1424 is 0
9999 run: jump-if fell through
 103 run: print-character screen, currc
9999 mem: location 1393 is 1009
9999 mem: location 1423 is 48
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1221
 104 run: c:character <- next-ingredient 
9999 mem: storing 48 in location 1222
 104 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1223
9999 mem: storing 0 in location 1224
 104 run: break-if color-found?, 
9999 mem: location 1224 is 0
9999 run: jump-if fell through
 104 run: color <- copy 7/white
9999 mem: storing 7 in location 1223
 104 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1225
9999 mem: storing 0 in location 1226
 104 run: break-if bg-color-found?, 
9999 mem: location 1226 is 0
9999 run: jump-if fell through
 104 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1225
 104 run: trace 90, [print-character], c
9999 mem: location 1222 is 48
  90 print-character: 48 
 104 run: break-unless sc, 
9999 mem: location 1221 is 1009
9999 run: jump-unless fell through
 104 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1221 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1221 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1227
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1221 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1221 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1228
 104 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1221 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1221 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1229
 104 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1229 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1230
 104 run: jump-if legal?, 1:offset
9999 mem: location 1230 is 1
9999 run: jumping to instruction 22
 104 run: legal? <- lesser-than *row, height
9999 mem: location 1229 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1228 is 5
9999 mem: storing 1 in location 1230
 104 run: jump-if legal?, 1:offset
9999 mem: location 1230 is 1
9999 run: jumping to instruction 25
 104 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1221 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1221 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1231
 104 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1231 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 1 in location 1230
 104 run: jump-if legal?, 1:offset
9999 mem: location 1230 is 1
9999 run: jumping to instruction 29
 104 run: legal? <- lesser-than *column, width
9999 mem: location 1231 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1227 is 10
9999 mem: storing 1 in location 1230
 104 run: jump-if legal?, 1:offset
9999 mem: location 1230 is 1
9999 run: jumping to instruction 32
 104 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1222 is 48
9999 mem: storing 0 in location 1232
 104 run: break-unless newline?, 
9999 mem: location 1232 is 0
9999 run: jumping to instruction 43
 104 run: index:number <- multiply *row, width
9999 mem: location 1229 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1227 is 10
9999 mem: storing 10 in location 1235
 104 run: index <- add index, *column
9999 mem: location 1235 is 10
9999 mem: location 1231 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 10 in location 1235
 104 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1221 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1221 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1236
 104 run: len:number <- length *buf
9999 mem: location 1236 is 1014
9999 mem: storing 50 in location 1237
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 1222 is 48
9999 mem: storing 0 in location 1238
 104 run: break-unless backspace?, 
9999 mem: location 1238 is 0
9999 run: jumping to instruction 63
 104 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1236 is 1014
9999 mem: location 1235 is 10
9999 mem: storing 1035 in location 1240
 104 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1240 is 1035
9999 mem: location 1035 is 32
9999 mem: location 1036 is 7
9999 mem: location 1240 is 1035
9999 run: address to copy is 1035
9999 mem: storing 1035 in location 1241
 104 run: *cursor-contents <- copy c
9999 mem: location 1222 is 48
9999 mem: location 1241 is 1035
9999 mem: location 1241 is 1035
9999 mem: storing 48 in location 1035
 104 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1240 is 1035
9999 mem: location 1035 is 48
9999 mem: location 1036 is 7
9999 mem: location 1240 is 1035
9999 run: address to copy is 1036
9999 mem: storing 1036 in location 1242
 104 run: *cursor-color <- copy color
9999 mem: location 1223 is 7
9999 mem: location 1242 is 1036
9999 mem: location 1242 is 1036
9999 mem: storing 7 in location 1036
 104 run: right:number <- subtract width, 1
9999 mem: location 1227 is 10
9999 mem: storing 9 in location 1243
 104 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1231 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1243 is 9
9999 mem: storing 0 in location 1244
 104 run: break-if at-right?, 
9999 mem: location 1244 is 0
9999 run: jump-if fell through
 104 run: *column <- add *column, 1
9999 mem: location 1231 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1231 is 1012
9999 mem: storing 1 in location 1012
 104 run: reply sc/same-as-ingredient:0
9999 mem: location 1221 is 1009
 103 run: curr-column <- add curr-column, 1
9999 mem: location 1422 is 0
9999 mem: storing 1 in location 1422
 103 run: curr <- next-duplex curr
9999 mem: location 1421 is 1425
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1425 in location 1387
 104 run: jump-if in, 1:offset
9999 mem: location 1387 is 1425
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1387 is 1425
9999 mem: location 1425 is 48
9999 mem: location 1426 is 1163
9999 mem: location 1427 is 1151
9999 mem: location 1387 is 1425
9999 run: address to copy is 1426
9999 run: its type is address
9999 mem: location 1426 is 1163
9999 mem: storing 1163 in location 1388
 104 run: reply result
9999 mem: location 1388 is 1163
9999 run: result 0 is 1163
9999 mem: storing 1163 in location 1421
 103 run: loop 
9999 run: jumping to instruction 88
 103 run: at-right?:boolean <- greater-or-equal curr-column, screen-width
9999 mem: location 1422 is 1
9999 mem: location 1401 is 10
9999 mem: storing 0 in location 1419
 103 run: jump-unless at-right?, 1:offset
9999 mem: location 1419 is 0
9999 run: jumping to instruction 91
 103 run: break-unless curr, 
9999 mem: location 1421 is 1163
9999 run: jump-unless fell through
 103 run: currc:character <- get *curr, value:offset
9999 mem: location 1421 is 1163
9999 mem: location 1163 is 10
9999 mem: location 1164 is 1170
9999 mem: location 1165 is 1425
9999 mem: location 1421 is 1163
9999 run: address to copy is 1163
9999 run: its type is number
9999 mem: location 1163 is 10
9999 mem: storing 10 in location 1423
 103 run: at-newline?:boolean <- equal currc, 10/newline
9999 mem: location 1423 is 10
9999 mem: storing 1 in location 1424
 103 run: break-if at-newline?, 
9999 mem: location 1424 is 1
9999 run: jumping to instruction 99
 103 run: reply editor/same-as-ingredient:0, screen/same-as-ingredient:2, 0/no-more-render
9999 mem: location 1391 is 1000
9999 mem: location 1393 is 1009
9999 run: result 0 is 1000
9999 run: result 1 is 1009
9999 run: result 2 is 0
9999 mem: storing 1000 in location 1300
9999 mem: storing 1009 in location 1299
9999 mem: storing 0 in location 1322
 102 run: reply screen/same-as-ingredient:0, editor/same-as-ingredient:1, go-render?
9999 mem: location 1299 is 1009
9999 mem: location 1300 is 1000
9999 mem: location 1322 is 0
9999 run: result 0 is 1009
9999 run: result 1 is 1000
9999 run: result 2 is 0
9999 mem: storing 1009 in location 1247
9999 mem: storing 1000 in location 1249
9999 mem: storing 0 in location 1257
 101 run: break-unless go-render?, 
9999 mem: location 1257 is 0
9999 run: jumping to instruction 22
 101 run: loop 
9999 run: jumping to instruction 5
 101 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1248 is 1383
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 102 run: x:address:console <- next-ingredient 
9999 mem: storing 1383 in location 1286
 102 run: break-unless x, 
9999 mem: location 1286 is 1383
9999 run: jump-unless fell through
 102 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1286 is 1383
9999 mem: location 1383 is 1
9999 mem: location 1384 is 1378
9999 mem: location 1286 is 1383
9999 run: address to copy is 1383
9999 mem: storing 1383 in location 1287
 102 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1286 is 1383
9999 mem: location 1383 is 1
9999 mem: location 1384 is 1378
9999 mem: location 1286 is 1383
9999 run: address to copy is 1384
9999 run: its type is address
9999 mem: location 1384 is 1378
9999 mem: storing 1378 in location 1288
 102 run: max:number <- length *buf
9999 mem: location 1288 is 1378
9999 mem: storing 1 in location 1289
 102 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1287 is 1383
9999 mem: location 1383 is 1
9999 mem: location 1289 is 1
9999 mem: storing 1 in location 1290
 102 run: break-unless done?, 
9999 mem: location 1290 is 1
9999 run: jump-unless fell through
 102 run: dummy:address:event <- new event:type
9999 mem: storing 1385 in location 1291
 102 run: reply *dummy, x/same-as-ingredient:0, 1/found, 1/quit
9999 mem: location 1291 is 1385
9999 mem: location 1385 is 0
9999 mem: location 1386 is 0
9999 mem: location 1387 is 0
9999 mem: location 1388 is 0
9999 mem: location 1286 is 1383
9999 run: result 0 is [0, 0, 0, 0]
9999 run: result 1 is 1383
9999 run: result 2 is 1
9999 run: result 3 is 1
9999 mem: storing 0 in location 1250
9999 mem: storing 0 in location 1251
9999 mem: storing 0 in location 1252
9999 mem: storing 0 in location 1253
9999 mem: storing 1383 in location 1248
9999 mem: storing 1 in location 1254
9999 mem: storing 1 in location 1255
 101 run: loop-unless found?, 
9999 mem: location 1254 is 1
9999 run: jump-unless fell through
 101 run: break-if quit?, 
9999 mem: location 1255 is 1
9999 run: jumping to instruction 25
  99 run: screen-should-contain [
    .          .
    .0         .
    .def       .
    .┈┈┈┈┈┈┈┈┈┈.
    .          .
  ]
