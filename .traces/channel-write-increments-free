parse: instruction: run
parse:   ingredient: {name: "\n    1:address:channel <- new-channel 3:literal/capacity\n    1:address:channel <- write 1:address:channel, 34:literal\n    2:number <- get 1:address:channel/deref, first-full:offset\n    3:number <- get 1:address:channel/deref, first-free:offset\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    2 <- 0  # first-full\n    3 <- 1  # first-free\n  ", properties: [_: "literal-string"]}
after-brace: recipe channel-write-increments-free
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: channel-write-increments-free
 101 run: run [
    1:address:channel <- new-channel 3:literal/capacity
    1:address:channel <- write 1:address:channel, 34:literal
    2:number <- get 1:address:channel/deref, first-full:offset
    3:number <- get 1:address:channel/deref, first-free:offset
  ]
parse: instruction: new-channel
parse:   ingredient: {name: "3", properties: ["3": "literal", "capacity": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "34", properties: ["34": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "deref": ]}
parse:   ingredient: {name: "first-full", properties: ["first-full": "offset"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "deref": ]}
parse:   ingredient: {name: "first-free", properties: ["first-free": "offset"]}
parse:   product: {name: "3", properties: ["3": "number"]}
name: element first-full of type channel is at offset 0
name: element first-free of type channel is at offset 1
after-brace: recipe run1001
after-brace: new-channel ...
after-brace: write ...
after-brace: get ...
after-brace: get ...
 101 run: 1:address:channel <- new-channel 3:literal/capacity
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 102 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1002
 102 run: full:address:number <- get-address result:address:channel/deref, first-full:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1003
 102 run: full:address:number/deref <- copy 0:literal
9999 mem: location 1003 is 1007
9999 mem: storing 0 in location 1007
 102 run: free:address:number <- get-address result:address:channel/deref, first-free:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1004
 102 run: free:address:number/deref <- copy 0:literal
9999 mem: location 1004 is 1008
9999 mem: storing 0 in location 1008
 102 run: capacity:number <- next-ingredient 
9999 mem: storing 3 in location 1005
 102 run: capacity:number <- add capacity:number, 1:literal
9999 mem: location 1005 is 3
9999 mem: storing 4 in location 1005
 102 run: dest:address:address:array:location <- get-address result:address:channel/deref, data:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 102 run: dest:address:address:array:location/deref <- new location:type, capacity:number
9999 mem: location 1005 is 4
9999 mem: array size is 4
9999 mem: new alloc: 1010
9999 mem: location 1006 is 1009
9999 mem: storing 1010 in location 1009
 102 run: reply result:address:channel
9999 mem: location 1002 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 101 run: 1:address:channel <- write 1:address:channel, 34:literal
9999 mem: location 1 is 1007
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1015
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1017
 102 run: val:location <- next-ingredient 
9999 mem: storing 34 in location 1018
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1017 is 1007
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1026
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1028
 103 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1028 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1028 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1029
 103 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 1029 is 0
9999 mem: storing 1 in location 1029
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1028 is 1007
 104 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1034
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1036
 104 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1036 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1036 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1037
 104 run: result:number <- length q:address:array:location/deref
9999 mem: location 1037 is 1010
9999 mem: location 1010 is 4
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1037 is 1010
9999 mem: storing 4 in location 1038
 104 run: reply result:number
9999 mem: location 1038 is 4
9999 run: result 0 is 4
9999 mem: storing 4 in location 1030
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1029 is 1
9999 mem: location 1030 is 4
9999 mem: storing 0 in location 1031
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1031 is 0
9999 run: jumping to instruction 9
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1028 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1028 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1032
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1032 is 0
9999 mem: location 1029 is 1
9999 mem: storing 0 in location 1033
 103 run: reply result:boolean
9999 mem: location 1033 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1019
 102 run: break-unless full:boolean, 
9999 mem: location 1019 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1017 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1017 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1021
 102 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 1017 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1017 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1022
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 1021 is 1010
9999 mem: location 1010 is 4
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1022 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1021 is 1010
9999 mem: location 1022 is 1008
9999 mem: location 1008 is 0
9999 mem: storing 1011 in location 1023
 102 run: dest:address:location/deref <- copy val:location
9999 mem: location 1018 is 34
9999 mem: location 1023 is 1011
9999 mem: storing 34 in location 1011
 102 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 1022 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1022 is 1008
9999 mem: storing 1 in location 1008
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 1021 is 1010
9999 mem: location 1010 is 4
9999 mem: location 1011 is 34
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1021 is 1010
9999 mem: storing 4 in location 1024
 102 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 1022 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1024 is 4
9999 mem: storing 0 in location 1025
 102 run: break-unless at-end?:boolean, 
9999 mem: location 1025 is 0
9999 run: jumping to instruction 19
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1017 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 101 run: 2:number <- get 1:address:channel/deref, first-full:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 2
 101 run: 3:number <- get 1:address:channel/deref, first-free:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 3
 100 run: memory-should-contain [
    2 <- 0  # first-full
    3 <- 1  # first-free
  ]
9999 run: checking location 2
9999 run: checking location 3
