c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 tagged-value-address) <- new (tagged-value literal)) -- nil
c{0: 2 ((1 tagged-value-address deref) <- arg) -- nil
c{0: 3 ((2 type) <- arg) -- nil
c{0: 4 ((3 type) <- get (1 tagged-value-address deref) (0 offset)) -- nil
c{0: 5 ((4 boolean) <- eq (3 type) (2 type)) -- nil
c{0: 6 (break-if (4 boolean)) -- ((open 6))
c{0: 7 (reply (0 literal) (nil literal)) -- ((open 6))
c{0: 8 ((5 location) <- get (1 tagged-value-address deref) (1 offset)) -- ((close 8) (open 6))
c{0: 9 (reply (5 location) (4 boolean)) -- ((close 8) (open 6))
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 tagged-value-address))
c{1: 2 arg ((1 tagged-value-address deref))
c{1: 3 arg ((2 type))
c{1: 4 get ((3 type))
c{1: 5 eq ((4 boolean))
c{1: 6 begin nil
c{1: 6 break-if nil
c{1: 7 reply nil
c{1: 8 get ((5 location))
c{1: 9 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 tagged-value-address) <- new (tagged-value literal)) nil nil
maybe-add: (tagged-value literal)
cn0: checking (1 tagged-value-address)
maybe-add: (1 tagged-value-address)
cn0: ((1 tagged-value-address deref) <- arg) nil nil
cn0: checking (1 tagged-value-address deref)
maybe-add: (1 tagged-value-address deref)
cn0: ((2 type) <- arg) nil nil
cn0: checking (2 type)
maybe-add: (2 type)
cn0: ((3 type) <- get (1 tagged-value-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (3 type)
maybe-add: (3 type)
cn0: ((4 boolean) <- eq (3 type) (2 type)) nil nil
maybe-add: (3 type)
maybe-add: (2 type)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-if (4 boolean) (1 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (1 offset)
cn0: (reply (0 literal) (nil literal)) nil nil
maybe-add: (0 literal)
maybe-add: (nil literal)
cn0: ((5 location) <- get (1 tagged-value-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (5 location)
maybe-add: (5 location)
cn0: (reply (5 location) (4 boolean)) nil nil
maybe-add: (5 location)
maybe-add: (4 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 type) <- arg) -- nil
c{0: 2 ((2 integer) <- sizeof (1 type)) -- nil
c{0: 3 ((3 boolean) <- eq (2 integer) (1 literal)) -- nil
c{0: 4 (assert (3 boolean)) -- nil
c{0: 5 ((4 tagged-value-address) <- new (tagged-value literal)) -- nil
c{0: 6 ((5 location) <- get-address (4 tagged-value-address deref) (0 offset)) -- nil
c{0: 7 ((5 location deref) <- copy (1 type)) -- nil
c{0: 8 ((6 location) <- get-address (4 tagged-value-address deref) (1 offset)) -- nil
c{0: 9 ((6 location deref) <- arg) -- nil
c{0: 10 (reply (4 tagged-value-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 type))
c{1: 2 sizeof ((2 integer))
c{1: 3 eq ((3 boolean))
c{1: 4 assert nil
c{1: 5 new ((4 tagged-value-address))
c{1: 6 get-address ((5 location))
c{1: 7 copy ((5 location deref))
c{1: 8 get-address ((6 location))
c{1: 9 arg ((6 location deref))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 type) <- arg) nil nil
cn0: checking (1 type)
maybe-add: (1 type)
cn0: ((2 integer) <- sizeof (1 type)) nil nil
maybe-add: (1 type)
cn0: checking (2 integer)
maybe-add: (2 integer)
cn0: ((3 boolean) <- eq (2 integer) (1 literal)) nil nil
maybe-add: (2 integer)
maybe-add: (1 literal)
cn0: checking (3 boolean)
maybe-add: (3 boolean)
cn0: (assert (3 boolean)) nil nil
maybe-add: (3 boolean)
cn0: ((4 tagged-value-address) <- new (tagged-value literal)) nil nil
maybe-add: (tagged-value literal)
cn0: checking (4 tagged-value-address)
maybe-add: (4 tagged-value-address)
cn0: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (5 location)
maybe-add: (5 location)
cn0: ((5 location deref) <- copy (1 type)) nil nil
maybe-add: (1 type)
cn0: checking (5 location deref)
maybe-add: (5 location deref)
cn0: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (6 location)
maybe-add: (6 location)
cn0: ((6 location deref) <- arg) nil nil
cn0: checking (6 location deref)
maybe-add: (6 location deref)
cn0: (reply (4 tagged-value-address)) nil nil
maybe-add: (4 tagged-value-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- arg) -- nil
c{0: 2 ((2 list-address) <- get (1 list-address deref) (1 offset)) -- nil
c{0: 3 (reply (2 list-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 list-address))
c{1: 2 get ((2 list-address))
c{1: 3 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- arg) nil nil
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 list-address) <- get (1 list-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: (reply (2 list-address)) nil nil
maybe-add: (2 list-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- arg) -- nil
c{0: 2 ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset)) -- nil
c{0: 3 (reply (2 tagged-value-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 list-address))
c{1: 2 get-address ((2 tagged-value-address))
c{1: 3 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- arg) nil nil
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (2 tagged-value-address)
maybe-add: (2 tagged-value-address)
cn0: (reply (2 tagged-value-address)) nil nil
maybe-add: (2 tagged-value-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- new (list literal)) -- nil
c{0: 2 ((2 list-address) <- copy (1 list-address)) -- nil
c{0: 3 ((3 integer) (4 boolean) <- arg) -- ((open 3))
c{0: 4 (break-unless (4 boolean)) -- ((open 3))
c{0: 5 ((5 list-address-address) <- get-address (2 list-address deref) (1 offset)) -- ((open 3))
c{0: 6 ((5 list-address-address deref) <- new (list literal)) -- ((open 3))
c{0: 7 ((2 list-address) <- list-next (2 list-address)) -- ((open 3))
c{0: 8 ((6 tagged-value-address) <- list-value-address (2 list-address)) -- ((open 3))
c{0: 9 ((6 tagged-value-address deref) <- save-type (3 integer)) -- ((open 3))
c{0: 10 (loop) -- ((open 3))
c{0: 11 ((1 list-address) <- list-next (1 list-address)) -- ((close 11) (open 3))
c{0: 12 (reply (1 list-address)) -- ((close 11) (open 3))
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 list-address))
c{1: 2 copy ((2 list-address))
c{1: 3 begin nil
c{1: 3 arg ((3 integer) (4 boolean))
c{1: 4 break-unless nil
c{1: 5 get-address ((5 list-address-address))
c{1: 6 new ((5 list-address-address deref))
c{1: 7 list-next ((2 list-address))
c{1: 8 list-value-address ((6 tagged-value-address))
c{1: 9 save-type ((6 tagged-value-address deref))
c{1: 10 loop nil
c{1: 11 list-next ((1 list-address))
c{1: 12 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- new (list literal)) nil nil
maybe-add: (list literal)
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 list-address) <- copy (1 list-address)) nil nil
maybe-add: (1 list-address)
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: ((3 integer) (4 boolean) <- arg) nil nil
cn0: checking (3 integer)
maybe-add: (3 integer)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-unless (4 boolean) (6 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (6 offset)
cn0: ((5 list-address-address) <- get-address (2 list-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (5 list-address-address)
maybe-add: (5 list-address-address)
cn0: ((5 list-address-address deref) <- new (list literal)) nil nil
maybe-add: (list literal)
cn0: checking (5 list-address-address deref)
maybe-add: (5 list-address-address deref)
cn0: ((2 list-address) <- list-next (2 list-address)) nil nil
maybe-add: (2 list-address)
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: ((6 tagged-value-address) <- list-value-address (2 list-address)) nil nil
maybe-add: (2 list-address)
cn0: checking (6 tagged-value-address)
maybe-add: (6 tagged-value-address)
cn0: ((6 tagged-value-address deref) <- save-type (3 integer)) nil nil
maybe-add: (3 integer)
cn0: checking (6 tagged-value-address deref)
maybe-add: (6 tagged-value-address deref)
cn0: (jump (-8 offset)) nil nil
maybe-add: (-8 offset)
cn0: ((1 list-address) <- list-next (1 list-address)) nil nil
maybe-add: (1 list-address)
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: (reply (1 list-address)) nil nil
maybe-add: (1 list-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- new (channel literal)) -- nil
c{0: 2 ((2 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- nil
c{0: 3 ((2 integer-address deref) <- copy (0 literal)) -- nil
c{0: 4 ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- nil
c{0: 5 ((3 integer-address deref) <- copy (0 literal)) -- nil
c{0: 6 ((4 integer) <- arg) -- nil
c{0: 7 ((4 integer) <- add (4 integer) (1 literal)) -- nil
c{0: 8 ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset)) -- nil
c{0: 9 ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer)) -- nil
c{0: 10 (reply (1 channel-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 channel-address))
c{1: 2 get-address ((2 integer-address))
c{1: 3 copy ((2 integer-address deref))
c{1: 4 get-address ((3 integer-address))
c{1: 5 copy ((3 integer-address deref))
c{1: 6 arg ((4 integer))
c{1: 7 add ((4 integer))
c{1: 8 get-address ((5 tagged-value-array-address-address))
c{1: 9 new ((5 tagged-value-array-address-address deref))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- new (channel literal)) nil nil
maybe-add: (channel literal)
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (2 integer-address)
maybe-add: (2 integer-address)
cn0: ((2 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (2 integer-address deref)
maybe-add: (2 integer-address deref)
cn0: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (3 integer-address)
maybe-add: (3 integer-address)
cn0: ((3 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (3 integer-address deref)
maybe-add: (3 integer-address deref)
cn0: ((4 integer) <- arg) nil nil
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((4 integer) <- add (4 integer) (1 literal)) nil nil
maybe-add: (4 integer)
maybe-add: (1 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (5 tagged-value-array-address-address)
maybe-add: (5 tagged-value-array-address-address)
cn0: ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer)) nil nil
maybe-add: (tagged-value-array literal)
maybe-add: (4 integer)
cn0: checking (5 tagged-value-array-address-address deref)
maybe-add: (5 tagged-value-array-address-address deref)
cn0: (reply (1 channel-address)) nil nil
maybe-add: (1 channel-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 tagged-value-array-address) <- get (1 channel) (2 offset)) -- nil
c{0: 3 ((5 integer) <- len (4 tagged-value-array-address deref)) -- nil
c{0: 4 (reply (5 integer)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 tagged-value-array-address))
c{1: 3 len ((5 integer))
c{1: 4 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 tagged-value-array-address) <- get (1 channel) (2 offset)) nil nil
cn0: field-access 2
cn0: checking (4 tagged-value-array-address)
maybe-add: (4 tagged-value-array-address)
cn0: ((5 integer) <- len (4 tagged-value-array-address deref)) nil nil
maybe-add: (4 tagged-value-array-address deref)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: (reply (5 integer)) nil nil
maybe-add: (5 integer)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- arg) -- nil
c{0: 2 ((2 tagged-value) <- arg) -- nil
c{0: 3 ((4 boolean) <- full? (1 channel-address deref)) -- ((open 3))
c{0: 4 (break-unless (4 boolean)) -- ((open 3))
c{0: 5 ((5 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- ((open 3))
c{0: 6 (sleep (5 integer-address deref)) -- ((open 3))
c{0: 7 ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) -- ((close 7) (open 3))
c{0: 8 ((7 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- ((close 7) (open 3))
c{0: 9 ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref)) -- ((close 7) (open 3))
c{0: 10 ((8 tagged-value-address deref) <- copy (2 tagged-value)) -- ((close 7) (open 3))
c{0: 11 ((7 integer-address deref) <- add (7 integer-address deref) (1 literal)) -- ((close 7) (open 3))
c{0: 12 ((9 integer) <- len (6 tagged-value-array-address deref)) -- ((open 12) (close 7) (open 3))
c{0: 13 ((10 boolean) <- lt (7 integer-address deref) (9 integer)) -- ((open 12) (close 7) (open 3))
c{0: 14 (break-if (10 boolean)) -- ((open 12) (close 7) (open 3))
c{0: 15 ((7 integer-address deref) <- copy (0 literal)) -- ((open 12) (close 7) (open 3))
c{0: 16 (reply (1 channel-address deref)) -- ((close 16) (open 12) (close 7) (open 3))
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel-address))
c{1: 2 arg ((2 tagged-value))
c{1: 3 begin nil
c{1: 3 full? ((4 boolean))
c{1: 4 break-unless nil
c{1: 5 get-address ((5 integer-address))
c{1: 6 sleep nil
c{1: 7 get ((6 tagged-value-array-address))
c{1: 8 get-address ((7 integer-address))
c{1: 9 index-address ((8 tagged-value-address))
c{1: 10 copy ((8 tagged-value-address deref))
c{1: 11 add ((7 integer-address deref))
c{1: 12 begin nil
c{1: 12 len ((9 integer))
c{1: 13 lt ((10 boolean))
c{1: 14 break-if nil
c{1: 15 copy ((7 integer-address deref))
c{1: 16 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- arg) nil nil
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 tagged-value) <- arg) nil nil
cn0: checking (2 tagged-value)
maybe-add: (2 tagged-value)
cn0: ((4 boolean) <- full? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-unless (4 boolean) (2 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (2 offset)
cn0: ((5 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (5 integer-address)
maybe-add: (5 integer-address)
cn0: (sleep (5 integer-address deref)) nil nil
maybe-add: (5 integer-address deref)
cn0: ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (6 tagged-value-array-address)
maybe-add: (6 tagged-value-array-address)
cn0: ((7 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (7 integer-address)
maybe-add: (7 integer-address)
cn0: ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref)) nil nil
maybe-add: (6 tagged-value-array-address deref)
maybe-add: (7 integer-address deref)
cn0: checking (8 tagged-value-address)
maybe-add: (8 tagged-value-address)
cn0: ((8 tagged-value-address deref) <- copy (2 tagged-value)) nil nil
maybe-add: (2 tagged-value)
cn0: checking (8 tagged-value-address deref)
maybe-add: (8 tagged-value-address deref)
cn0: ((7 integer-address deref) <- add (7 integer-address deref) (1 literal)) nil nil
maybe-add: (7 integer-address deref)
maybe-add: (1 literal)
cn0: checking (7 integer-address deref)
maybe-add: (7 integer-address deref)
cn0: ((9 integer) <- len (6 tagged-value-array-address deref)) nil nil
maybe-add: (6 tagged-value-array-address deref)
cn0: checking (9 integer)
maybe-add: (9 integer)
cn0: ((10 boolean) <- lt (7 integer-address deref) (9 integer)) nil nil
maybe-add: (7 integer-address deref)
maybe-add: (9 integer)
cn0: checking (10 boolean)
maybe-add: (10 boolean)
cn0: (jump-if (10 boolean) (1 offset)) nil nil
maybe-add: (10 boolean)
maybe-add: (1 offset)
cn0: ((7 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (7 integer-address deref)
maybe-add: (7 integer-address deref)
cn0: (reply (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- arg) -- nil
c{0: 2 ((2 boolean) <- empty? (1 channel-address deref)) -- ((open 2))
c{0: 3 (break-unless (2 boolean)) -- ((open 2))
c{0: 4 ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- ((open 2))
c{0: 5 (sleep (3 integer-address deref)) -- ((open 2))
c{0: 6 ((4 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- ((close 6) (open 2))
c{0: 7 ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) -- ((close 6) (open 2))
c{0: 8 ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref)) -- ((close 6) (open 2))
c{0: 9 ((4 integer-address deref) <- add (4 integer-address deref) (1 literal)) -- ((close 6) (open 2))
c{0: 10 ((8 integer) <- len (5 tagged-value-array-address deref)) -- ((open 10) (close 6) (open 2))
c{0: 11 ((9 boolean) <- lt (4 integer-address deref) (8 integer)) -- ((open 10) (close 6) (open 2))
c{0: 12 (break-if (9 boolean)) -- ((open 10) (close 6) (open 2))
c{0: 13 ((4 integer-address deref) <- copy (0 literal)) -- ((open 10) (close 6) (open 2))
c{0: 14 (reply (6 tagged-value) (1 channel-address deref)) -- ((close 14) (open 10) (close 6) (open 2))
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel-address))
c{1: 2 begin nil
c{1: 2 empty? ((2 boolean))
c{1: 3 break-unless nil
c{1: 4 get-address ((3 integer-address))
c{1: 5 sleep nil
c{1: 6 get-address ((4 integer-address))
c{1: 7 get ((5 tagged-value-array-address))
c{1: 8 index ((6 tagged-value))
c{1: 9 add ((4 integer-address deref))
c{1: 10 begin nil
c{1: 10 len ((8 integer))
c{1: 11 lt ((9 boolean))
c{1: 12 break-if nil
c{1: 13 copy ((4 integer-address deref))
c{1: 14 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- arg) nil nil
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 boolean) <- empty? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (2 boolean)
maybe-add: (2 boolean)
cn0: (jump-unless (2 boolean) (2 offset)) nil nil
maybe-add: (2 boolean)
maybe-add: (2 offset)
cn0: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (3 integer-address)
maybe-add: (3 integer-address)
cn0: (sleep (3 integer-address deref)) nil nil
maybe-add: (3 integer-address deref)
cn0: ((4 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (4 integer-address)
maybe-add: (4 integer-address)
cn0: ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (5 tagged-value-array-address)
maybe-add: (5 tagged-value-array-address)
cn0: ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref)) nil nil
maybe-add: (5 tagged-value-array-address deref)
maybe-add: (4 integer-address deref)
cn0: checking (6 tagged-value)
maybe-add: (6 tagged-value)
cn0: ((4 integer-address deref) <- add (4 integer-address deref) (1 literal)) nil nil
maybe-add: (4 integer-address deref)
maybe-add: (1 literal)
cn0: checking (4 integer-address deref)
maybe-add: (4 integer-address deref)
cn0: ((8 integer) <- len (5 tagged-value-array-address deref)) nil nil
maybe-add: (5 tagged-value-array-address deref)
cn0: checking (8 integer)
maybe-add: (8 integer)
cn0: ((9 boolean) <- lt (4 integer-address deref) (8 integer)) nil nil
maybe-add: (4 integer-address deref)
maybe-add: (8 integer)
cn0: checking (9 boolean)
maybe-add: (9 boolean)
cn0: (jump-if (9 boolean) (1 offset)) nil nil
maybe-add: (9 boolean)
maybe-add: (1 offset)
cn0: ((4 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer-address deref)
maybe-add: (4 integer-address deref)
cn0: (reply (6 tagged-value) (1 channel-address deref)) nil nil
maybe-add: (6 tagged-value)
maybe-add: (1 channel-address deref)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 integer) <- get (1 channel) (0 offset)) -- nil
c{0: 3 ((5 integer) <- get (1 channel) (1 offset)) -- nil
c{0: 4 ((6 boolean) <- eq (4 integer) (5 integer)) -- nil
c{0: 5 (reply (6 boolean)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 integer))
c{1: 3 get ((5 integer))
c{1: 4 eq ((6 boolean))
c{1: 5 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 integer) <- get (1 channel) (0 offset)) nil nil
cn0: field-access 0
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- get (1 channel) (1 offset)) nil nil
cn0: field-access 1
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((6 boolean) <- eq (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn0: (reply (6 boolean)) nil nil
maybe-add: (6 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 integer) <- get (1 channel) (1 offset)) -- nil
c{0: 3 ((4 integer) <- add (4 integer) (1 literal)) -- nil
c{0: 4 ((5 integer) <- capacity (1 channel)) -- ((open 4))
c{0: 5 ((6 boolean) <- lt (4 integer) (5 integer)) -- ((open 4))
c{0: 6 (break-if (6 boolean)) -- ((open 4))
c{0: 7 ((4 integer) <- copy (0 literal)) -- ((open 4))
c{0: 8 ((7 integer) <- get (1 channel) (0 offset)) -- ((close 8) (open 4))
c{0: 9 ((8 boolean) <- eq (7 integer) (4 integer)) -- ((close 8) (open 4))
c{0: 10 (reply (8 boolean)) -- ((close 8) (open 4))
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 integer))
c{1: 3 add ((4 integer))
c{1: 4 begin nil
c{1: 4 capacity ((5 integer))
c{1: 5 lt ((6 boolean))
c{1: 6 break-if nil
c{1: 7 copy ((4 integer))
c{1: 8 get ((7 integer))
c{1: 9 eq ((8 boolean))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 integer) <- get (1 channel) (1 offset)) nil nil
cn0: field-access 1
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((4 integer) <- add (4 integer) (1 literal)) nil nil
maybe-add: (4 integer)
maybe-add: (1 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- capacity (1 channel)) nil nil
maybe-add: (1 channel)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((6 boolean) <- lt (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn0: (jump-if (6 boolean) (1 offset)) nil nil
maybe-add: (6 boolean)
maybe-add: (1 offset)
cn0: ((4 integer) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((7 integer) <- get (1 channel) (0 offset)) nil nil
cn0: field-access 0
cn0: checking (7 integer)
maybe-add: (7 integer)
cn0: ((8 boolean) <- eq (7 integer) (4 integer)) nil nil
maybe-add: (7 integer)
maybe-add: (4 integer)
cn0: checking (8 boolean)
maybe-add: (8 boolean)
cn0: (reply (8 boolean)) nil nil
maybe-add: (8 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 tagged-value-array-address) <- get (1 channel) (2 offset)) -- nil
c{0: 3 ((5 integer) <- len (4 tagged-value-array-address deref)) -- nil
c{0: 4 (reply (5 integer)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 tagged-value-array-address))
c{1: 3 len ((5 integer))
c{1: 4 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 tagged-value-array-address) <- get (1 channel) (2 offset)) nil nil
cn0: field-access 2
cn0: checking (4 tagged-value-array-address)
maybe-add: (4 tagged-value-array-address)
cn0: ((5 integer) <- len (4 tagged-value-array-address deref)) nil nil
maybe-add: (4 tagged-value-array-address deref)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: (reply (5 integer)) nil nil
maybe-add: (5 integer)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 integer) <- get (1 channel) (0 offset)) -- nil
c{0: 3 ((5 integer) <- get (1 channel) (1 offset)) -- nil
c{0: 4 ((6 boolean) <- eq (4 integer) (5 integer)) -- nil
c{0: 5 (reply (6 boolean)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 integer))
c{1: 3 get ((5 integer))
c{1: 4 eq ((6 boolean))
c{1: 5 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 integer) <- get (1 channel) (0 offset)) nil nil
cn0: field-access 0
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- get (1 channel) (1 offset)) nil nil
cn0: field-access 1
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((6 boolean) <- eq (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn0: (reply (6 boolean)) nil nil
maybe-add: (6 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 integer) <- get (1 channel) (1 offset)) -- nil
c{0: 3 ((4 integer) <- add (4 integer) (1 literal)) -- nil
c{0: 4 ((5 integer) <- capacity (1 channel)) -- nil
c{0: 5 ((6 boolean) <- lt (4 integer) (5 integer)) -- nil
c{0: 6 (jump-if (6 boolean) (1 offset)) -- nil
c{0: 7 ((4 integer) <- copy (0 literal)) -- nil
c{0: 8 ((7 integer) <- get (1 channel) (0 offset)) -- nil
c{0: 9 ((8 boolean) <- eq (7 integer) (4 integer)) -- nil
c{0: 10 (reply (8 boolean)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 integer))
c{1: 3 add ((4 integer))
c{1: 4 capacity ((5 integer))
c{1: 5 lt ((6 boolean))
c{1: 6 jump-if nil
c{1: 7 copy ((4 integer))
c{1: 8 get ((7 integer))
c{1: 9 eq ((8 boolean))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 integer) <- get (1 channel) (1 offset)) nil nil
cn0: field-access 1
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((4 integer) <- add (4 integer) (1 literal)) nil nil
maybe-add: (4 integer)
maybe-add: (1 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- capacity (1 channel)) nil nil
maybe-add: (1 channel)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((6 boolean) <- lt (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn0: (jump-if (6 boolean) (1 offset)) nil nil
maybe-add: (6 boolean)
maybe-add: (1 offset)
cn0: ((4 integer) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((7 integer) <- get (1 channel) (0 offset)) nil nil
cn0: field-access 0
cn0: checking (7 integer)
maybe-add: (7 integer)
cn0: ((8 boolean) <- eq (7 integer) (4 integer)) nil nil
maybe-add: (7 integer)
maybe-add: (4 integer)
cn0: checking (8 boolean)
maybe-add: (8 boolean)
cn0: (reply (8 boolean)) nil nil
maybe-add: (8 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- arg) -- nil
c{0: 2 ((2 list-address) <- get (1 list-address deref) (1 offset)) -- nil
c{0: 3 (reply (2 list-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 list-address))
c{1: 2 get ((2 list-address))
c{1: 3 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- arg) nil nil
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 list-address) <- get (1 list-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: (reply (2 list-address)) nil nil
maybe-add: (2 list-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- arg) -- nil
c{0: 2 ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset)) -- nil
c{0: 3 (reply (2 tagged-value-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 list-address))
c{1: 2 get-address ((2 tagged-value-address))
c{1: 3 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- arg) nil nil
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (2 tagged-value-address)
maybe-add: (2 tagged-value-address)
cn0: (reply (2 tagged-value-address)) nil nil
maybe-add: (2 tagged-value-address)
cn1: update names nil nil
c{0: 0 ((1 channel-address) <- new-channel (1 literal)) -- nil
c{0: 1 ((2 integer-address) <- new (integer literal)) -- nil
c{0: 2 ((2 integer-address deref) <- copy (34 literal)) -- nil
c{0: 3 ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (2 integer-address)) -- nil
c{0: 4 ((1 channel-address deref) <- write (1 channel-address) (3 tagged-value-address deref)) -- nil
c{0: 5 (_ (1 channel-address deref) <- read (1 channel-address)) -- nil
c{0: 6 ((4 integer) <- get (1 channel-address deref) (first-full offset)) -- nil
c{0: 7 ((1 channel-address deref) <- write (1 channel-address) (3 tagged-value-address deref)) -- nil
c{0: 8 (_ (1 channel-address deref) <- read (1 channel-address)) -- nil
c{0: 9 ((5 integer) <- get (1 channel-address deref) (first-full offset)) -- nil
c{1: 0 new-channel ((1 channel-address))
c{1: 1 new ((2 integer-address))
c{1: 2 copy ((2 integer-address deref))
c{1: 3 new-tagged-value ((3 tagged-value-address))
c{1: 4 write ((1 channel-address deref))
c{1: 5 read (_ (1 channel-address deref))
c{1: 6 get ((4 integer))
c{1: 7 write ((1 channel-address deref))
c{1: 8 read (_ (1 channel-address deref))
c{1: 9 get ((5 integer))
cn0: ((1 channel-address) <- new-channel (1 literal)) nil nil
maybe-add: (1 literal)
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 integer-address) <- new (integer literal)) nil nil
maybe-add: (integer literal)
cn0: checking (2 integer-address)
maybe-add: (2 integer-address)
cn0: ((2 integer-address deref) <- copy (34 literal)) nil nil
maybe-add: (34 literal)
cn0: checking (2 integer-address deref)
maybe-add: (2 integer-address deref)
cn0: ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (2 integer-address)) nil nil
maybe-add: (integer-address literal)
maybe-add: (2 integer-address)
cn0: checking (3 tagged-value-address)
maybe-add: (3 tagged-value-address)
cn0: ((1 channel-address deref) <- write (1 channel-address) (3 tagged-value-address deref)) nil nil
maybe-add: (1 channel-address)
maybe-add: (3 tagged-value-address deref)
cn0: checking (1 channel-address deref)
maybe-add: (1 channel-address deref)
cn0: (_ (1 channel-address deref) <- read (1 channel-address)) nil nil
maybe-add: (1 channel-address)
cn0: checking _
cn0: checking (1 channel-address deref)
maybe-add: (1 channel-address deref)
cn0: ((4 integer) <- get (1 channel-address deref) (first-full offset)) nil nil
cn0: field-access first-full
cn0: field-access deref
cn0: new field; computing location
cn0: field location 0
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((1 channel-address deref) <- write (1 channel-address) (3 tagged-value-address deref)) ((first-full 0)) ((first-full t))
maybe-add: (1 channel-address)
maybe-add: (3 tagged-value-address deref)
cn0: checking (1 channel-address deref)
maybe-add: (1 channel-address deref)
cn0: (_ (1 channel-address deref) <- read (1 channel-address)) ((first-full 0)) ((first-full t))
maybe-add: (1 channel-address)
cn0: checking _
cn0: checking (1 channel-address deref)
maybe-add: (1 channel-address deref)
cn0: ((5 integer) <- get (1 channel-address deref) (first-full offset)) ((first-full 0)) ((first-full t))
cn0: field-access first-full
cn0: field-access deref
cn0: checking (5 integer)
maybe-add: (5 integer)
cn1: update names ((first-full 0)) ((first-full t))
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 tagged-value-address) <- new (tagged-value literal)) -- nil
c{0: 2 ((1 tagged-value-address deref) <- arg) -- nil
c{0: 3 ((2 type) <- arg) -- nil
c{0: 4 ((3 type) <- get (1 tagged-value-address deref) (0 offset)) -- nil
c{0: 5 ((4 boolean) <- eq (3 type) (2 type)) -- nil
c{0: 6 (jump-if (4 boolean) (1 offset)) -- nil
c{0: 7 (reply (0 literal) (nil literal)) -- nil
c{0: 8 ((5 location) <- get (1 tagged-value-address deref) (1 offset)) -- nil
c{0: 9 (reply (5 location) (4 boolean)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 tagged-value-address))
c{1: 2 arg ((1 tagged-value-address deref))
c{1: 3 arg ((2 type))
c{1: 4 get ((3 type))
c{1: 5 eq ((4 boolean))
c{1: 6 jump-if nil
c{1: 7 reply nil
c{1: 8 get ((5 location))
c{1: 9 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 tagged-value-address) <- new (tagged-value literal)) nil nil
maybe-add: (tagged-value literal)
cn0: checking (1 tagged-value-address)
maybe-add: (1 tagged-value-address)
cn0: ((1 tagged-value-address deref) <- arg) nil nil
cn0: checking (1 tagged-value-address deref)
maybe-add: (1 tagged-value-address deref)
cn0: ((2 type) <- arg) nil nil
cn0: checking (2 type)
maybe-add: (2 type)
cn0: ((3 type) <- get (1 tagged-value-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (3 type)
maybe-add: (3 type)
cn0: ((4 boolean) <- eq (3 type) (2 type)) nil nil
maybe-add: (3 type)
maybe-add: (2 type)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-if (4 boolean) (1 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (1 offset)
cn0: (reply (0 literal) (nil literal)) nil nil
maybe-add: (0 literal)
maybe-add: (nil literal)
cn0: ((5 location) <- get (1 tagged-value-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (5 location)
maybe-add: (5 location)
cn0: (reply (5 location) (4 boolean)) nil nil
maybe-add: (5 location)
maybe-add: (4 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- new (channel literal)) -- nil
c{0: 2 ((2 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- nil
c{0: 3 ((2 integer-address deref) <- copy (0 literal)) -- nil
c{0: 4 ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- nil
c{0: 5 ((3 integer-address deref) <- copy (0 literal)) -- nil
c{0: 6 ((4 integer) <- arg) -- nil
c{0: 7 ((4 integer) <- add (4 integer) (1 literal)) -- nil
c{0: 8 ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset)) -- nil
c{0: 9 ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer)) -- nil
c{0: 10 (reply (1 channel-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 channel-address))
c{1: 2 get-address ((2 integer-address))
c{1: 3 copy ((2 integer-address deref))
c{1: 4 get-address ((3 integer-address))
c{1: 5 copy ((3 integer-address deref))
c{1: 6 arg ((4 integer))
c{1: 7 add ((4 integer))
c{1: 8 get-address ((5 tagged-value-array-address-address))
c{1: 9 new ((5 tagged-value-array-address-address deref))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- new (channel literal)) nil nil
maybe-add: (channel literal)
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (2 integer-address)
maybe-add: (2 integer-address)
cn0: ((2 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (2 integer-address deref)
maybe-add: (2 integer-address deref)
cn0: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (3 integer-address)
maybe-add: (3 integer-address)
cn0: ((3 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (3 integer-address deref)
maybe-add: (3 integer-address deref)
cn0: ((4 integer) <- arg) nil nil
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((4 integer) <- add (4 integer) (1 literal)) nil nil
maybe-add: (4 integer)
maybe-add: (1 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (5 tagged-value-array-address-address)
maybe-add: (5 tagged-value-array-address-address)
cn0: ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer)) nil nil
maybe-add: (tagged-value-array literal)
maybe-add: (4 integer)
cn0: checking (5 tagged-value-array-address-address deref)
maybe-add: (5 tagged-value-array-address-address deref)
cn0: (reply (1 channel-address)) nil nil
maybe-add: (1 channel-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- new (list literal)) -- nil
c{0: 2 ((2 list-address) <- copy (1 list-address)) -- nil
c{0: 3 ((3 integer) (4 boolean) <- arg) -- nil
c{0: 4 (jump-unless (4 boolean) (6 offset)) -- nil
c{0: 5 ((5 list-address-address) <- get-address (2 list-address deref) (1 offset)) -- nil
c{0: 6 ((5 list-address-address deref) <- new (list literal)) -- nil
c{0: 7 ((2 list-address) <- list-next (2 list-address)) -- nil
c{0: 8 ((6 tagged-value-address) <- list-value-address (2 list-address)) -- nil
c{0: 9 ((6 tagged-value-address deref) <- save-type (3 integer)) -- nil
c{0: 10 (jump (-8 offset)) -- nil
c{0: 11 ((1 list-address) <- list-next (1 list-address)) -- nil
c{0: 12 (reply (1 list-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 list-address))
c{1: 2 copy ((2 list-address))
c{1: 3 arg ((3 integer) (4 boolean))
c{1: 4 jump-unless nil
c{1: 5 get-address ((5 list-address-address))
c{1: 6 new ((5 list-address-address deref))
c{1: 7 list-next ((2 list-address))
c{1: 8 list-value-address ((6 tagged-value-address))
c{1: 9 save-type ((6 tagged-value-address deref))
c{1: 10 jump nil
c{1: 11 list-next ((1 list-address))
c{1: 12 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- new (list literal)) nil nil
maybe-add: (list literal)
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 list-address) <- copy (1 list-address)) nil nil
maybe-add: (1 list-address)
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: ((3 integer) (4 boolean) <- arg) nil nil
cn0: checking (3 integer)
maybe-add: (3 integer)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-unless (4 boolean) (6 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (6 offset)
cn0: ((5 list-address-address) <- get-address (2 list-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (5 list-address-address)
maybe-add: (5 list-address-address)
cn0: ((5 list-address-address deref) <- new (list literal)) nil nil
maybe-add: (list literal)
cn0: checking (5 list-address-address deref)
maybe-add: (5 list-address-address deref)
cn0: ((2 list-address) <- list-next (2 list-address)) nil nil
maybe-add: (2 list-address)
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: ((6 tagged-value-address) <- list-value-address (2 list-address)) nil nil
maybe-add: (2 list-address)
cn0: checking (6 tagged-value-address)
maybe-add: (6 tagged-value-address)
cn0: ((6 tagged-value-address deref) <- save-type (3 integer)) nil nil
maybe-add: (3 integer)
cn0: checking (6 tagged-value-address deref)
maybe-add: (6 tagged-value-address deref)
cn0: (jump (-8 offset)) nil nil
maybe-add: (-8 offset)
cn0: ((1 list-address) <- list-next (1 list-address)) nil nil
maybe-add: (1 list-address)
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: (reply (1 list-address)) nil nil
maybe-add: (1 list-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 type) <- arg) -- nil
c{0: 2 ((2 integer) <- sizeof (1 type)) -- nil
c{0: 3 ((3 boolean) <- eq (2 integer) (1 literal)) -- nil
c{0: 4 (assert (3 boolean)) -- nil
c{0: 5 ((4 tagged-value-address) <- new (tagged-value literal)) -- nil
c{0: 6 ((5 location) <- get-address (4 tagged-value-address deref) (0 offset)) -- nil
c{0: 7 ((5 location deref) <- copy (1 type)) -- nil
c{0: 8 ((6 location) <- get-address (4 tagged-value-address deref) (1 offset)) -- nil
c{0: 9 ((6 location deref) <- arg) -- nil
c{0: 10 (reply (4 tagged-value-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 type))
c{1: 2 sizeof ((2 integer))
c{1: 3 eq ((3 boolean))
c{1: 4 assert nil
c{1: 5 new ((4 tagged-value-address))
c{1: 6 get-address ((5 location))
c{1: 7 copy ((5 location deref))
c{1: 8 get-address ((6 location))
c{1: 9 arg ((6 location deref))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 type) <- arg) nil nil
cn0: checking (1 type)
maybe-add: (1 type)
cn0: ((2 integer) <- sizeof (1 type)) nil nil
maybe-add: (1 type)
cn0: checking (2 integer)
maybe-add: (2 integer)
cn0: ((3 boolean) <- eq (2 integer) (1 literal)) nil nil
maybe-add: (2 integer)
maybe-add: (1 literal)
cn0: checking (3 boolean)
maybe-add: (3 boolean)
cn0: (assert (3 boolean)) nil nil
maybe-add: (3 boolean)
cn0: ((4 tagged-value-address) <- new (tagged-value literal)) nil nil
maybe-add: (tagged-value literal)
cn0: checking (4 tagged-value-address)
maybe-add: (4 tagged-value-address)
cn0: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (5 location)
maybe-add: (5 location)
cn0: ((5 location deref) <- copy (1 type)) nil nil
maybe-add: (1 type)
cn0: checking (5 location deref)
maybe-add: (5 location deref)
cn0: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (6 location)
maybe-add: (6 location)
cn0: ((6 location deref) <- arg) nil nil
cn0: checking (6 location deref)
maybe-add: (6 location deref)
cn0: (reply (4 tagged-value-address)) nil nil
maybe-add: (4 tagged-value-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- arg) -- nil
c{0: 2 ((2 boolean) <- empty? (1 channel-address deref)) -- nil
c{0: 3 (jump-unless (2 boolean) (2 offset)) -- nil
c{0: 4 ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- nil
c{0: 5 (sleep (3 integer-address deref)) -- nil
c{0: 6 ((4 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- nil
c{0: 7 ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) -- nil
c{0: 8 ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref)) -- nil
c{0: 9 ((4 integer-address deref) <- add (4 integer-address deref) (1 literal)) -- nil
c{0: 10 ((8 integer) <- len (5 tagged-value-array-address deref)) -- nil
c{0: 11 ((9 boolean) <- lt (4 integer-address deref) (8 integer)) -- nil
c{0: 12 (jump-if (9 boolean) (1 offset)) -- nil
c{0: 13 ((4 integer-address deref) <- copy (0 literal)) -- nil
c{0: 14 (reply (6 tagged-value) (1 channel-address deref)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel-address))
c{1: 2 empty? ((2 boolean))
c{1: 3 jump-unless nil
c{1: 4 get-address ((3 integer-address))
c{1: 5 sleep nil
c{1: 6 get-address ((4 integer-address))
c{1: 7 get ((5 tagged-value-array-address))
c{1: 8 index ((6 tagged-value))
c{1: 9 add ((4 integer-address deref))
c{1: 10 len ((8 integer))
c{1: 11 lt ((9 boolean))
c{1: 12 jump-if nil
c{1: 13 copy ((4 integer-address deref))
c{1: 14 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- arg) nil nil
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 boolean) <- empty? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (2 boolean)
maybe-add: (2 boolean)
cn0: (jump-unless (2 boolean) (2 offset)) nil nil
maybe-add: (2 boolean)
maybe-add: (2 offset)
cn0: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (3 integer-address)
maybe-add: (3 integer-address)
cn0: (sleep (3 integer-address deref)) nil nil
maybe-add: (3 integer-address deref)
cn0: ((4 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (4 integer-address)
maybe-add: (4 integer-address)
cn0: ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (5 tagged-value-array-address)
maybe-add: (5 tagged-value-array-address)
cn0: ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref)) nil nil
maybe-add: (5 tagged-value-array-address deref)
maybe-add: (4 integer-address deref)
cn0: checking (6 tagged-value)
maybe-add: (6 tagged-value)
cn0: ((4 integer-address deref) <- add (4 integer-address deref) (1 literal)) nil nil
maybe-add: (4 integer-address deref)
maybe-add: (1 literal)
cn0: checking (4 integer-address deref)
maybe-add: (4 integer-address deref)
cn0: ((8 integer) <- len (5 tagged-value-array-address deref)) nil nil
maybe-add: (5 tagged-value-array-address deref)
cn0: checking (8 integer)
maybe-add: (8 integer)
cn0: ((9 boolean) <- lt (4 integer-address deref) (8 integer)) nil nil
maybe-add: (4 integer-address deref)
maybe-add: (8 integer)
cn0: checking (9 boolean)
maybe-add: (9 boolean)
cn0: (jump-if (9 boolean) (1 offset)) nil nil
maybe-add: (9 boolean)
maybe-add: (1 offset)
cn0: ((4 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer-address deref)
maybe-add: (4 integer-address deref)
cn0: (reply (6 tagged-value) (1 channel-address deref)) nil nil
maybe-add: (6 tagged-value)
maybe-add: (1 channel-address deref)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- arg) -- nil
c{0: 2 ((2 tagged-value) <- arg) -- nil
c{0: 3 ((4 boolean) <- full? (1 channel-address deref)) -- nil
c{0: 4 (jump-unless (4 boolean) (2 offset)) -- nil
c{0: 5 ((5 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- nil
c{0: 6 (sleep (5 integer-address deref)) -- nil
c{0: 7 ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) -- nil
c{0: 8 ((7 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- nil
c{0: 9 ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref)) -- nil
c{0: 10 ((8 tagged-value-address deref) <- copy (2 tagged-value)) -- nil
c{0: 11 ((7 integer-address deref) <- add (7 integer-address deref) (1 literal)) -- nil
c{0: 12 ((9 integer) <- len (6 tagged-value-array-address deref)) -- nil
c{0: 13 ((10 boolean) <- lt (7 integer-address deref) (9 integer)) -- nil
c{0: 14 (jump-if (10 boolean) (1 offset)) -- nil
c{0: 15 ((7 integer-address deref) <- copy (0 literal)) -- nil
c{0: 16 (reply (1 channel-address deref)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel-address))
c{1: 2 arg ((2 tagged-value))
c{1: 3 full? ((4 boolean))
c{1: 4 jump-unless nil
c{1: 5 get-address ((5 integer-address))
c{1: 6 sleep nil
c{1: 7 get ((6 tagged-value-array-address))
c{1: 8 get-address ((7 integer-address))
c{1: 9 index-address ((8 tagged-value-address))
c{1: 10 copy ((8 tagged-value-address deref))
c{1: 11 add ((7 integer-address deref))
c{1: 12 len ((9 integer))
c{1: 13 lt ((10 boolean))
c{1: 14 jump-if nil
c{1: 15 copy ((7 integer-address deref))
c{1: 16 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- arg) nil nil
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 tagged-value) <- arg) nil nil
cn0: checking (2 tagged-value)
maybe-add: (2 tagged-value)
cn0: ((4 boolean) <- full? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-unless (4 boolean) (2 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (2 offset)
cn0: ((5 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (5 integer-address)
maybe-add: (5 integer-address)
cn0: (sleep (5 integer-address deref)) nil nil
maybe-add: (5 integer-address deref)
cn0: ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (6 tagged-value-array-address)
maybe-add: (6 tagged-value-array-address)
cn0: ((7 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (7 integer-address)
maybe-add: (7 integer-address)
cn0: ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref)) nil nil
maybe-add: (6 tagged-value-array-address deref)
maybe-add: (7 integer-address deref)
cn0: checking (8 tagged-value-address)
maybe-add: (8 tagged-value-address)
cn0: ((8 tagged-value-address deref) <- copy (2 tagged-value)) nil nil
maybe-add: (2 tagged-value)
cn0: checking (8 tagged-value-address deref)
maybe-add: (8 tagged-value-address deref)
cn0: ((7 integer-address deref) <- add (7 integer-address deref) (1 literal)) nil nil
maybe-add: (7 integer-address deref)
maybe-add: (1 literal)
cn0: checking (7 integer-address deref)
maybe-add: (7 integer-address deref)
cn0: ((9 integer) <- len (6 tagged-value-array-address deref)) nil nil
maybe-add: (6 tagged-value-array-address deref)
cn0: checking (9 integer)
maybe-add: (9 integer)
cn0: ((10 boolean) <- lt (7 integer-address deref) (9 integer)) nil nil
maybe-add: (7 integer-address deref)
maybe-add: (9 integer)
cn0: checking (10 boolean)
maybe-add: (10 boolean)
cn0: (jump-if (10 boolean) (1 offset)) nil nil
maybe-add: (10 boolean)
maybe-add: (1 offset)
cn0: ((7 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (7 integer-address deref)
maybe-add: (7 integer-address deref)
cn0: (reply (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn1: update names nil nil
schedule: main
run: -- nil
run: 1 main 0: ((1 channel-address) <- new-channel (1 literal))
run: -- nil
run: 2 new-channel 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: 3 new-channel 1: ((1 channel-address) <- new (channel literal))
sizeof: channel
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1001 to 1031
run: -- ((1000 30) (1001 1031))
run: 4 new-channel 2: ((2 integer-address) <- get-address (1 channel-address deref) (0 offset))
record-info: (1 channel-address deref) (0 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (0 offset) => 1031
run: 1031 => (2 integer-address)
setm: (2 integer-address) <= 1031
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 1002 to 1031
run: -- ((1000 30) (1001 1031) (1002 1031))
run: 5 new-channel 3: ((2 integer-address deref) <- copy (0 literal))
run: 0 => (2 integer-address deref)
setm: (2 integer-address deref) <= 0
sz: (2 integer-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
addr: incrementing by 1000
sz: (1031 integer)
addr: (2 integer-address deref)
addr: initial result: 2
addr: incrementing by 1000
addr: deref 1002 => 1031
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1031 to 0
run: -- ((1000 30) (1001 1031) (1002 1031) (1031 0))
run: 6 new-channel 4: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset))
record-info: (1 channel-address deref) (1 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (1 offset) => 1032
run: 1032 => (3 integer-address)
setm: (3 integer-address) <= 1032
sz: (3 integer-address)
addr: (3 integer-address)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 integer-address) is 1
setm: (3 integer-address): setting 1003 to 1032
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 1032) (1031 0))
run: 7 new-channel 5: ((3 integer-address deref) <- copy (0 literal))
run: 0 => (3 integer-address deref)
setm: (3 integer-address deref) <= 0
sz: (3 integer-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
addr: incrementing by 1000
sz: (1032 integer)
addr: (3 integer-address deref)
addr: initial result: 3
addr: incrementing by 1000
addr: deref 1003 => 1032
setm: size of (3 integer-address deref) is 1
setm: (3 integer-address deref): setting 1032 to 0
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 1032) (1031 0) (1032 0))
run: 8 new-channel 6: ((4 integer) <- arg)
arg: nil 0 (1)
run: 1 => (4 integer)
setm: (4 integer) <= 1
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 integer) is 1
setm: (4 integer): setting 1004 to 1
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 1) (1031 0) (1032 0))
run: 9 new-channel 7: ((4 integer) <- add (4 integer) (1 literal))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
add: 1 1
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
run: 2 => (4 integer)
setm: (4 integer) <= 2
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 integer) is 1
setm: (4 integer): setting 1004 to 2
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1031 0) (1032 0))
run: 10 new-channel 8: ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (2 offset) => 1033
run: 1033 => (5 tagged-value-array-address-address)
setm: (5 tagged-value-array-address-address) <= 1033
sz: (5 tagged-value-array-address-address)
addr: (5 tagged-value-array-address-address)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 tagged-value-array-address-address) is 1
setm: (5 tagged-value-array-address-address): setting 1005 to 1033
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0))
run: 11 new-channel 9: ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1000
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1034 => (5 tagged-value-array-address-address deref)
setm: (5 tagged-value-array-address-address deref) <= 1034
sz: (5 tagged-value-array-address-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1033 tagged-value-array-address)
addr: (5 tagged-value-array-address-address deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1033
setm: size of (5 tagged-value-array-address-address deref) is 1
setm: (5 tagged-value-array-address-address deref): setting 1033 to 1034
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2))
run: 12 new-channel 10: (reply (1 channel-address))
m: (1 channel-address)
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1000
reply: ((1 channel-address)) ((1 channel-address))
reply: 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1 to 1031
run: -- ((1 1031) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2))
run: 13 main 1: ((2 integer-address) <- new (integer literal))
sizeof: integer
run: 1039 => (2 integer-address)
setm: (2 integer-address) <= 1039
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 2 to 1039
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2))
run: 14 main 2: ((2 integer-address deref) <- copy (34 literal))
run: 34 => (2 integer-address deref)
setm: (2 integer-address deref) <= 34
sz: (2 integer-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
sz: (1039 integer)
addr: (2 integer-address deref)
addr: initial result: 2
addr: deref 2 => 1039
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1039 to 34
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34))
run: 15 main 3: ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (2 integer-address))
m: (2 integer-address)
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34))
run: 16 new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1040 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30))
run: 17 new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer-address 1039)
run: integer-address => (1 type)
setm: (1 type) <= integer-address
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1040
setm: size of (1 type) is 1
setm: (1 type): setting 1041 to integer-address
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address))
run: 18 new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1040
sizeof: integer-address
run: 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1040
setm: size of (2 integer) is 1
setm: (2 integer): setting 1042 to 1
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1))
run: 19 new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1040
run: t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1040
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 1043 to t
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t))
run: 20 new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1040
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t))
run: 21 new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1071 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1071
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1040
setm: size of (4 tagged-value-address) is 1
setm: (4 tagged-value-address): setting 1044 to 1071
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071))
run: 22 new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
record-info: (4 tagged-value-address deref) (0 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1040
addr: deref 1044 => 1071
record-info: initial base 1071 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (0 offset) => 1071
run: 1071 => (5 location)
setm: (5 location) <= 1071
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1040
setm: size of (5 location) is 1
setm: (5 location): setting 1045 to 1071
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071))
run: 23 new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1040
run: integer-address => (5 location deref)
setm: (5 location deref) <= integer-address
sz: (5 location deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1040
sz: (1071 location)
addr: (5 location deref)
addr: initial result: 5
addr: incrementing by 1040
addr: deref 1045 => 1071
setm: size of (5 location deref) is 1
setm: (5 location deref): setting 1071 to integer-address
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1071 integer-address))
run: 24 new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
record-info: (4 tagged-value-address deref) (1 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1040
addr: deref 1044 => 1071
record-info: initial base 1071 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (1 offset) => 1072
run: 1072 => (6 location)
setm: (6 location) <= 1072
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1040
setm: size of (6 location) is 1
setm: (6 location): setting 1046 to 1072
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address))
run: 25 new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer-address 1039)
run: 1039 => (6 location deref)
setm: (6 location deref) <= 1039
sz: (6 location deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1040
sz: (1072 location)
addr: (6 location deref)
addr: initial result: 6
addr: incrementing by 1040
addr: deref 1046 => 1072
setm: size of (6 location deref) is 1
setm: (6 location deref): setting 1072 to 1039
run: -- ((1 1031) (2 1039) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039))
run: 26 new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1040
reply: ((4 tagged-value-address)) ((3 tagged-value-address))
reply: 1071 => (3 tagged-value-address)
setm: (3 tagged-value-address) <= 1071
sz: (3 tagged-value-address)
addr: (3 tagged-value-address)
addr: initial result: 3
setm: size of (3 tagged-value-address) is 1
setm: (3 tagged-value-address): setting 3 to 1071
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039))
run: 27 main 4: ((1 channel-address deref) <- write (1 channel-address) (3 tagged-value-address deref))
m: (1 channel-address)
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
m: (3 tagged-value-address deref)
sz: (3 tagged-value-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
sz: (1071 tagged-value)
addr: (3 tagged-value-address deref)
addr: initial result: 3
addr: deref 3 => 1071
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039))
run: 28 write 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1073 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30))
run: 29 write 1: ((1 channel-address) <- arg)
arg: nil 0 (1031 #(tagged record (integer-address 1039 . nil)))
run: 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1073
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1074 to 1031
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031))
run: 30 write 2: ((2 tagged-value) <- arg)
arg: nil 1 (1031 #(tagged record (integer-address 1039 . nil)))
run: #(tagged record (integer-address 1039 . nil)) => (2 tagged-value)
setm: (2 tagged-value) <= #(tagged record (integer-address 1039 . nil))
sz: (2 tagged-value)
addr: (2 tagged-value)
addr: initial result: 2
addr: incrementing by 1073
setm: size of (2 tagged-value) is 2
setm: (2 tagged-value): setting 1075 to integer-address
setm: (2 tagged-value): setting 1076 to 1039
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039))
run: 31 write 3: ((4 boolean) <- full? (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1073
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1073
addr: deref 1074 => 1031
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039))
run: 32 full? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1104 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30))
run: 33 full? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (0 0 1034 . nil)))
run: #(tagged record (0 0 1034 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (0 0 1034 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1104
setm: size of (1 channel) is 3
setm: (1 channel): setting 1105 to 0
setm: (1 channel): setting 1106 to 0
setm: (1 channel): setting 1107 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034))
run: 34 full? 2: ((4 integer) <- get (1 channel) (1 offset))
record-info: (1 channel) (1 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1104
record-info: initial base 1105 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (1 offset) => 1106 integer
m: (1106 integer global)
sz: (1106 integer global)
addr: (1106 integer global)
addr: initial result: 1106
run: 0 => (4 integer)
setm: (4 integer) <= 0
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1104
setm: size of (4 integer) is 1
setm: (4 integer): setting 1108 to 0
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 0))
run: 35 full? 3: ((4 integer) <- add (4 integer) (1 literal))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1104
add: 0 1
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1104
run: 1 => (4 integer)
setm: (4 integer) <= 1
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1104
setm: size of (4 integer) is 1
setm: (4 integer): setting 1108 to 1
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1))
run: 36 full? 4: ((5 integer) <- capacity (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1104
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1))
run: 37 capacity 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1135 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1135 30))
run: 38 capacity 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (0 0 1034 . nil)))
run: #(tagged record (0 0 1034 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (0 0 1034 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1135
setm: size of (1 channel) is 3
setm: (1 channel): setting 1136 to 0
setm: (1 channel): setting 1137 to 0
setm: (1 channel): setting 1138 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1135 30) (1136 0) (1137 0) (1138 1034))
run: 39 capacity 2: ((4 tagged-value-array-address) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1135
record-info: initial base 1136 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (2 offset) => 1138 tagged-value-array-address
m: (1138 tagged-value-array-address global)
sz: (1138 tagged-value-array-address global)
addr: (1138 tagged-value-array-address global)
addr: initial result: 1138
run: 1034 => (4 tagged-value-array-address)
setm: (4 tagged-value-array-address) <= 1034
sz: (4 tagged-value-array-address)
addr: (4 tagged-value-array-address)
addr: initial result: 4
addr: incrementing by 1135
setm: size of (4 tagged-value-array-address) is 1
setm: (4 tagged-value-array-address): setting 1139 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034))
run: 40 capacity 3: ((5 integer) <- len (4 tagged-value-array-address deref))
array-len: (4 tagged-value-array-address deref)
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1135
sz: (1034 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1135
addr: deref 1139 => 1034
run: 2 => (5 integer)
setm: (5 integer) <= 2
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1135
setm: size of (5 integer) is 1
setm: (5 integer): setting 1140 to 2
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 41 capacity 4: (reply (5 integer))
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1135
reply: ((5 integer)) ((5 integer))
reply: 2 => (5 integer)
setm: (5 integer) <= 2
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1104
setm: size of (5 integer) is 1
setm: (5 integer): setting 1109 to 2
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 42 full? 5: ((6 boolean) <- lt (4 integer) (5 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1104
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1104
run: t => (6 boolean)
setm: (6 boolean) <= t
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1104
setm: size of (6 boolean) is 1
setm: (6 boolean): setting 1110 to t
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 43 full? 6: (jump-if (6 boolean) (1 offset))
m: (6 boolean)
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1104
jump: checking that t is t
jump: jumping to 8
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 44 full? 8: ((7 integer) <- get (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1104
record-info: initial base 1105 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (0 offset) => 1105 integer
m: (1105 integer global)
sz: (1105 integer global)
addr: (1105 integer global)
addr: initial result: 1105
run: 0 => (7 integer)
setm: (7 integer) <= 0
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1104
setm: size of (7 integer) is 1
setm: (7 integer): setting 1111 to 0
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 45 full? 9: ((8 boolean) <- eq (7 integer) (4 integer))
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1104
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1104
run: nil => (8 boolean)
setm: (8 boolean) <= nil
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1104
setm: size of (8 boolean) is 1
setm: (8 boolean): setting 1112 to nil
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 46 full? 10: (reply (8 boolean))
m: (8 boolean)
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1104
reply: ((8 boolean)) ((4 boolean))
reply: nil => (4 boolean)
setm: (4 boolean) <= nil
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1073
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1077 to nil
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 47 write 4: (jump-unless (4 boolean) (2 offset))
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1073
jump: checking that nil is not t
jump: jumping to 7
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 48 write 7: ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1073
addr: deref 1074 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel-address deref) (2 offset) => 1033 tagged-value-array-address
m: (1033 tagged-value-array-address global)
sz: (1033 tagged-value-array-address global)
addr: (1033 tagged-value-array-address global)
addr: initial result: 1033
run: 1034 => (6 tagged-value-array-address)
setm: (6 tagged-value-array-address) <= 1034
sz: (6 tagged-value-array-address)
addr: (6 tagged-value-array-address)
addr: initial result: 6
addr: incrementing by 1073
setm: size of (6 tagged-value-array-address) is 1
setm: (6 tagged-value-array-address): setting 1079 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 49 write 8: ((7 integer-address) <- get-address (1 channel-address deref) (1 offset))
record-info: (1 channel-address deref) (1 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1073
addr: deref 1074 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (1 offset) => 1032
run: 1032 => (7 integer-address)
setm: (7 integer-address) <= 1032
sz: (7 integer-address)
addr: (7 integer-address)
addr: initial result: 7
addr: incrementing by 1073
setm: size of (7 integer-address) is 1
setm: (7 integer-address): setting 1080 to 1032
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 50 write 9: ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref))
array-info: (6 tagged-value-array-address deref) (7 integer-address deref)
addr: (6 tagged-value-array-address deref)
addr: initial result: 6
addr: incrementing by 1073
addr: deref 1079 => 1034
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1073
sz: (1032 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1073
addr: deref 1080 => 1032
array-info: initial base 1034 type ((address t) (elem tagged-value-array) (size 1))
array-info: (6 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (6 tagged-value-array-address deref)
m: (6 integer-address deref)
sz: (6 integer-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1073
sz: (1034 integer)
addr: (6 integer-address deref)
addr: initial result: 6
addr: incrementing by 1073
addr: deref 1079 => 1034
array-info: array-len of (6 tagged-value-array-address deref) is 2
index-address: (6 tagged-value-array-address deref) (7 integer-address deref) => 1035
run: 1035 => (8 tagged-value-address)
setm: (8 tagged-value-address) <= 1035
sz: (8 tagged-value-address)
addr: (8 tagged-value-address)
addr: initial result: 8
addr: incrementing by 1073
setm: size of (8 tagged-value-address) is 1
setm: (8 tagged-value-address): setting 1081 to 1035
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 51 write 10: ((8 tagged-value-address deref) <- copy (2 tagged-value))
m: (2 tagged-value)
sz: (2 tagged-value)
addr: (2 tagged-value)
addr: initial result: 2
addr: incrementing by 1073
run: #(tagged record (integer-address 1039 . nil)) => (8 tagged-value-address deref)
setm: (8 tagged-value-address deref) <= #(tagged record (integer-address 1039 . nil))
sz: (8 tagged-value-address deref)
m: (8 location)
sz: (8 location)
addr: (8 location)
addr: initial result: 8
addr: incrementing by 1073
sz: (1035 tagged-value)
addr: (8 tagged-value-address deref)
addr: initial result: 8
addr: incrementing by 1073
addr: deref 1081 => 1035
setm: size of (8 tagged-value-address deref) is 2
setm: (8 tagged-value-address deref): setting 1035 to integer-address
setm: (8 tagged-value-address deref): setting 1036 to 1039
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 52 write 11: ((7 integer-address deref) <- add (7 integer-address deref) (1 literal))
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1073
sz: (1032 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1073
addr: deref 1080 => 1032
add: 0 1
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1073
sz: (1032 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1073
addr: deref 1080 => 1032
run: 1 => (7 integer-address deref)
setm: (7 integer-address deref) <= 1
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1073
sz: (1032 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1073
addr: deref 1080 => 1032
setm: size of (7 integer-address deref) is 1
setm: (7 integer-address deref): setting 1032 to 1
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 53 write 12: ((9 integer) <- len (6 tagged-value-array-address deref))
array-len: (6 tagged-value-array-address deref)
m: (6 integer-address deref)
sz: (6 integer-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1073
sz: (1034 integer)
addr: (6 integer-address deref)
addr: initial result: 6
addr: incrementing by 1073
addr: deref 1079 => 1034
run: 2 => (9 integer)
setm: (9 integer) <= 2
sz: (9 integer)
addr: (9 integer)
addr: initial result: 9
addr: incrementing by 1073
setm: size of (9 integer) is 1
setm: (9 integer): setting 1082 to 2
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 54 write 13: ((10 boolean) <- lt (7 integer-address deref) (9 integer))
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1073
sz: (1032 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1073
addr: deref 1080 => 1032
m: (9 integer)
sz: (9 integer)
addr: (9 integer)
addr: initial result: 9
addr: incrementing by 1073
run: t => (10 boolean)
setm: (10 boolean) <= t
sz: (10 boolean)
addr: (10 boolean)
addr: initial result: 10
addr: incrementing by 1073
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1083 to t
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 55 write 14: (jump-if (10 boolean) (1 offset))
m: (10 boolean)
sz: (10 boolean)
addr: (10 boolean)
addr: initial result: 10
addr: incrementing by 1073
jump: checking that t is t
jump: jumping to 16
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 56 write 16: (reply (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1073
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1073
addr: deref 1074 => 1031
reply: ((1 channel-address deref)) ((1 channel-address deref))
reply: #(tagged record (0 1 1034 . nil)) => (1 channel-address deref)
setm: (1 channel-address deref) <= #(tagged record (0 1 1034 . nil))
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1031
setm: size of (1 channel-address deref) is 3
setm: (1 channel-address deref): setting 1031 to 0
setm: (1 channel-address deref): setting 1032 to 1
setm: (1 channel-address deref): setting 1033 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 57 main 5: (_ (1 channel-address deref) <- read (1 channel-address))
m: (1 channel-address)
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2))
run: 58 read 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1166 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30))
run: 59 read 1: ((1 channel-address) <- arg)
arg: nil 0 (1031)
run: 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1166
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1167 to 1031
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031))
run: 60 read 2: ((2 boolean) <- empty? (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1166
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1166
addr: deref 1167 => 1031
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031))
run: 61 empty? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1197 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1197 30))
run: 62 empty? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (0 1 1034 . nil)))
run: #(tagged record (0 1 1034 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (0 1 1034 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1197
setm: size of (1 channel) is 3
setm: (1 channel): setting 1198 to 0
setm: (1 channel): setting 1199 to 1
setm: (1 channel): setting 1200 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1197 30) (1198 0) (1199 1) (1200 1034))
run: 63 empty? 2: ((4 integer) <- get (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1197
record-info: initial base 1198 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (0 offset) => 1198 integer
m: (1198 integer global)
sz: (1198 integer global)
addr: (1198 integer global)
addr: initial result: 1198
run: 0 => (4 integer)
setm: (4 integer) <= 0
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1197
setm: size of (4 integer) is 1
setm: (4 integer): setting 1201 to 0
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0))
run: 64 empty? 3: ((5 integer) <- get (1 channel) (1 offset))
record-info: (1 channel) (1 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1197
record-info: initial base 1198 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (1 offset) => 1199 integer
m: (1199 integer global)
sz: (1199 integer global)
addr: (1199 integer global)
addr: initial result: 1199
run: 1 => (5 integer)
setm: (5 integer) <= 1
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1197
setm: size of (5 integer) is 1
setm: (5 integer): setting 1202 to 1
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 65 empty? 4: ((6 boolean) <- eq (4 integer) (5 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1197
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1197
run: nil => (6 boolean)
setm: (6 boolean) <= nil
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1197
setm: size of (6 boolean) is 1
setm: (6 boolean): setting 1203 to nil
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 66 empty? 5: (reply (6 boolean))
m: (6 boolean)
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1197
reply: ((6 boolean)) ((2 boolean))
reply: nil => (2 boolean)
setm: (2 boolean) <= nil
sz: (2 boolean)
addr: (2 boolean)
addr: initial result: 2
addr: incrementing by 1166
setm: size of (2 boolean) is 1
setm: (2 boolean): setting 1168 to nil
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 67 read 3: (jump-unless (2 boolean) (2 offset))
m: (2 boolean)
sz: (2 boolean)
addr: (2 boolean)
addr: initial result: 2
addr: incrementing by 1166
jump: checking that nil is not t
jump: jumping to 6
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 68 read 6: ((4 integer-address) <- get-address (1 channel-address deref) (0 offset))
record-info: (1 channel-address deref) (0 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1166
addr: deref 1167 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (0 offset) => 1031
run: 1031 => (4 integer-address)
setm: (4 integer-address) <= 1031
sz: (4 integer-address)
addr: (4 integer-address)
addr: initial result: 4
addr: incrementing by 1166
setm: size of (4 integer-address) is 1
setm: (4 integer-address): setting 1170 to 1031
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 69 read 7: ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1166
addr: deref 1167 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel-address deref) (2 offset) => 1033 tagged-value-array-address
m: (1033 tagged-value-array-address global)
sz: (1033 tagged-value-array-address global)
addr: (1033 tagged-value-array-address global)
addr: initial result: 1033
run: 1034 => (5 tagged-value-array-address)
setm: (5 tagged-value-array-address) <= 1034
sz: (5 tagged-value-array-address)
addr: (5 tagged-value-array-address)
addr: initial result: 5
addr: incrementing by 1166
setm: size of (5 tagged-value-array-address) is 1
setm: (5 tagged-value-array-address): setting 1171 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 70 read 8: ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref))
array-info: (5 tagged-value-array-address deref) (4 integer-address deref)
addr: (5 tagged-value-array-address deref)
addr: initial result: 5
addr: incrementing by 1166
addr: deref 1171 => 1034
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1166
sz: (1031 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1166
addr: deref 1170 => 1031
array-info: initial base 1034 type ((address t) (elem tagged-value-array) (size 1))
array-info: (5 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (5 tagged-value-array-address deref)
m: (5 integer-address deref)
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1166
sz: (1034 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1166
addr: deref 1171 => 1034
array-info: array-len of (5 tagged-value-array-address deref) is 2
index: (5 tagged-value-array-address deref) (4 integer-address deref) => 1035 tagged-value
m: (1035 tagged-value global)
sz: (1035 tagged-value global)
addr: (1035 tagged-value global)
addr: initial result: 1035
run: #(tagged record (integer-address 1039 . nil)) => (6 tagged-value)
setm: (6 tagged-value) <= #(tagged record (integer-address 1039 . nil))
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1166
setm: size of (6 tagged-value) is 2
setm: (6 tagged-value): setting 1172 to integer-address
setm: (6 tagged-value): setting 1173 to 1039
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 71 read 9: ((4 integer-address deref) <- add (4 integer-address deref) (1 literal))
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1166
sz: (1031 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1166
addr: deref 1170 => 1031
add: 0 1
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1166
sz: (1031 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1166
addr: deref 1170 => 1031
run: 1 => (4 integer-address deref)
setm: (4 integer-address deref) <= 1
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1166
sz: (1031 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1166
addr: deref 1170 => 1031
setm: size of (4 integer-address deref) is 1
setm: (4 integer-address deref): setting 1031 to 1
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 72 read 10: ((8 integer) <- len (5 tagged-value-array-address deref))
array-len: (5 tagged-value-array-address deref)
m: (5 integer-address deref)
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1166
sz: (1034 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1166
addr: deref 1171 => 1034
run: 2 => (8 integer)
setm: (8 integer) <= 2
sz: (8 integer)
addr: (8 integer)
addr: initial result: 8
addr: incrementing by 1166
setm: size of (8 integer) is 1
setm: (8 integer): setting 1174 to 2
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 73 read 11: ((9 boolean) <- lt (4 integer-address deref) (8 integer))
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1166
sz: (1031 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1166
addr: deref 1170 => 1031
m: (8 integer)
sz: (8 integer)
addr: (8 integer)
addr: initial result: 8
addr: incrementing by 1166
run: t => (9 boolean)
setm: (9 boolean) <= t
sz: (9 boolean)
addr: (9 boolean)
addr: initial result: 9
addr: incrementing by 1166
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1175 to t
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 74 read 12: (jump-if (9 boolean) (1 offset))
m: (9 boolean)
sz: (9 boolean)
addr: (9 boolean)
addr: initial result: 9
addr: incrementing by 1166
jump: checking that t is t
jump: jumping to 14
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 75 read 14: (reply (6 tagged-value) (1 channel-address deref))
m: (6 tagged-value)
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1166
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1166
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1166
addr: deref 1167 => 1031
reply: ((6 tagged-value) (1 channel-address deref)) (_ (1 channel-address deref))
reply: #(tagged record (1 1 1034 . nil)) => (1 channel-address deref)
setm: (1 channel-address deref) <= #(tagged record (1 1 1034 . nil))
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1031
setm: size of (1 channel-address deref) is 3
setm: (1 channel-address deref): setting 1031 to 1
setm: (1 channel-address deref): setting 1032 to 1
setm: (1 channel-address deref): setting 1033 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 76 main 6: ((4 integer) <- get (1 channel-address deref) (0 offset))
record-info: (1 channel-address deref) (0 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel-address deref) (0 offset) => 1031 integer
m: (1031 integer global)
sz: (1031 integer global)
addr: (1031 integer global)
addr: initial result: 1031
run: 1 => (4 integer)
setm: (4 integer) <= 1
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
setm: size of (4 integer) is 1
setm: (4 integer): setting 4 to 1
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 77 main 7: ((1 channel-address deref) <- write (1 channel-address) (3 tagged-value-address deref))
m: (1 channel-address)
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
m: (3 tagged-value-address deref)
sz: (3 tagged-value-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
sz: (1071 tagged-value)
addr: (3 tagged-value-address deref)
addr: initial result: 3
addr: deref 3 => 1071
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1))
run: 78 write 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1228 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30))
run: 79 write 1: ((1 channel-address) <- arg)
arg: nil 0 (1031 #(tagged record (integer-address 1039 . nil)))
run: 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1228
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1229 to 1031
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031))
run: 80 write 2: ((2 tagged-value) <- arg)
arg: nil 1 (1031 #(tagged record (integer-address 1039 . nil)))
run: #(tagged record (integer-address 1039 . nil)) => (2 tagged-value)
setm: (2 tagged-value) <= #(tagged record (integer-address 1039 . nil))
sz: (2 tagged-value)
addr: (2 tagged-value)
addr: initial result: 2
addr: incrementing by 1228
setm: size of (2 tagged-value) is 2
setm: (2 tagged-value): setting 1230 to integer-address
setm: (2 tagged-value): setting 1231 to 1039
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039))
run: 81 write 3: ((4 boolean) <- full? (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1228
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1228
addr: deref 1229 => 1031
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039))
run: 82 full? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1259 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30))
run: 83 full? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: #(tagged record (1 1 1034 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (1 1 1034 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1259
setm: size of (1 channel) is 3
setm: (1 channel): setting 1260 to 1
setm: (1 channel): setting 1261 to 1
setm: (1 channel): setting 1262 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034))
run: 84 full? 2: ((4 integer) <- get (1 channel) (1 offset))
record-info: (1 channel) (1 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1259
record-info: initial base 1260 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (1 offset) => 1261 integer
m: (1261 integer global)
sz: (1261 integer global)
addr: (1261 integer global)
addr: initial result: 1261
run: 1 => (4 integer)
setm: (4 integer) <= 1
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1259
setm: size of (4 integer) is 1
setm: (4 integer): setting 1263 to 1
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 1))
run: 85 full? 3: ((4 integer) <- add (4 integer) (1 literal))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1259
add: 1 1
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1259
run: 2 => (4 integer)
setm: (4 integer) <= 2
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1259
setm: size of (4 integer) is 1
setm: (4 integer): setting 1263 to 2
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 2))
run: 86 full? 4: ((5 integer) <- capacity (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1259
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 2))
run: 87 capacity 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1290 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 2) (1290 30))
run: 88 capacity 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (1 1 1034 . nil)))
run: #(tagged record (1 1 1034 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (1 1 1034 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1290
setm: size of (1 channel) is 3
setm: (1 channel): setting 1291 to 1
setm: (1 channel): setting 1292 to 1
setm: (1 channel): setting 1293 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 2) (1290 30) (1291 1) (1292 1) (1293 1034))
run: 89 capacity 2: ((4 tagged-value-array-address) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1290
record-info: initial base 1291 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (2 offset) => 1293 tagged-value-array-address
m: (1293 tagged-value-array-address global)
sz: (1293 tagged-value-array-address global)
addr: (1293 tagged-value-array-address global)
addr: initial result: 1293
run: 1034 => (4 tagged-value-array-address)
setm: (4 tagged-value-array-address) <= 1034
sz: (4 tagged-value-array-address)
addr: (4 tagged-value-array-address)
addr: initial result: 4
addr: incrementing by 1290
setm: size of (4 tagged-value-array-address) is 1
setm: (4 tagged-value-array-address): setting 1294 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 2) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034))
run: 90 capacity 3: ((5 integer) <- len (4 tagged-value-array-address deref))
array-len: (4 tagged-value-array-address deref)
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1290
sz: (1034 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1290
addr: deref 1294 => 1034
run: 2 => (5 integer)
setm: (5 integer) <= 2
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1290
setm: size of (5 integer) is 1
setm: (5 integer): setting 1295 to 2
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 2) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 91 capacity 4: (reply (5 integer))
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1290
reply: ((5 integer)) ((5 integer))
reply: 2 => (5 integer)
setm: (5 integer) <= 2
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1259
setm: size of (5 integer) is 1
setm: (5 integer): setting 1264 to 2
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 2) (1264 2) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 92 full? 5: ((6 boolean) <- lt (4 integer) (5 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1259
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1259
run: nil => (6 boolean)
setm: (6 boolean) <= nil
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1259
setm: size of (6 boolean) is 1
setm: (6 boolean): setting 1265 to nil
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 2) (1264 2) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 93 full? 6: (jump-if (6 boolean) (1 offset))
m: (6 boolean)
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1259
jump: checking that nil is t
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 2) (1264 2) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 94 full? 7: ((4 integer) <- copy (0 literal))
run: 0 => (4 integer)
setm: (4 integer) <= 0
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1259
setm: size of (4 integer) is 1
setm: (4 integer): setting 1263 to 0
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 95 full? 8: ((7 integer) <- get (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1259
record-info: initial base 1260 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (0 offset) => 1260 integer
m: (1260 integer global)
sz: (1260 integer global)
addr: (1260 integer global)
addr: initial result: 1260
run: 1 => (7 integer)
setm: (7 integer) <= 1
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1259
setm: size of (7 integer) is 1
setm: (7 integer): setting 1266 to 1
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 96 full? 9: ((8 boolean) <- eq (7 integer) (4 integer))
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1259
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1259
run: nil => (8 boolean)
setm: (8 boolean) <= nil
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1259
setm: size of (8 boolean) is 1
setm: (8 boolean): setting 1267 to nil
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 97 full? 10: (reply (8 boolean))
m: (8 boolean)
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1259
reply: ((8 boolean)) ((4 boolean))
reply: nil => (4 boolean)
setm: (4 boolean) <= nil
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1228
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1232 to nil
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 98 write 4: (jump-unless (4 boolean) (2 offset))
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1228
jump: checking that nil is not t
jump: jumping to 7
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 99 write 7: ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1228
addr: deref 1229 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel-address deref) (2 offset) => 1033 tagged-value-array-address
m: (1033 tagged-value-array-address global)
sz: (1033 tagged-value-array-address global)
addr: (1033 tagged-value-array-address global)
addr: initial result: 1033
run: 1034 => (6 tagged-value-array-address)
setm: (6 tagged-value-array-address) <= 1034
sz: (6 tagged-value-array-address)
addr: (6 tagged-value-array-address)
addr: initial result: 6
addr: incrementing by 1228
setm: size of (6 tagged-value-array-address) is 1
setm: (6 tagged-value-array-address): setting 1234 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 100 write 8: ((7 integer-address) <- get-address (1 channel-address deref) (1 offset))
record-info: (1 channel-address deref) (1 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1228
addr: deref 1229 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (1 offset) => 1032
run: 1032 => (7 integer-address)
setm: (7 integer-address) <= 1032
sz: (7 integer-address)
addr: (7 integer-address)
addr: initial result: 7
addr: incrementing by 1228
setm: size of (7 integer-address) is 1
setm: (7 integer-address): setting 1235 to 1032
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 101 write 9: ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref))
array-info: (6 tagged-value-array-address deref) (7 integer-address deref)
addr: (6 tagged-value-array-address deref)
addr: initial result: 6
addr: incrementing by 1228
addr: deref 1234 => 1034
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1228
sz: (1032 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1228
addr: deref 1235 => 1032
array-info: initial base 1034 type ((address t) (elem tagged-value-array) (size 1))
array-info: (6 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (6 tagged-value-array-address deref)
m: (6 integer-address deref)
sz: (6 integer-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1228
sz: (1034 integer)
addr: (6 integer-address deref)
addr: initial result: 6
addr: incrementing by 1228
addr: deref 1234 => 1034
array-info: array-len of (6 tagged-value-array-address deref) is 2
index-address: (6 tagged-value-array-address deref) (7 integer-address deref) => 1037
run: 1037 => (8 tagged-value-address)
setm: (8 tagged-value-address) <= 1037
sz: (8 tagged-value-address)
addr: (8 tagged-value-address)
addr: initial result: 8
addr: incrementing by 1228
setm: size of (8 tagged-value-address) is 1
setm: (8 tagged-value-address): setting 1236 to 1037
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 102 write 10: ((8 tagged-value-address deref) <- copy (2 tagged-value))
m: (2 tagged-value)
sz: (2 tagged-value)
addr: (2 tagged-value)
addr: initial result: 2
addr: incrementing by 1228
run: #(tagged record (integer-address 1039 . nil)) => (8 tagged-value-address deref)
setm: (8 tagged-value-address deref) <= #(tagged record (integer-address 1039 . nil))
sz: (8 tagged-value-address deref)
m: (8 location)
sz: (8 location)
addr: (8 location)
addr: initial result: 8
addr: incrementing by 1228
sz: (1037 tagged-value)
addr: (8 tagged-value-address deref)
addr: initial result: 8
addr: incrementing by 1228
addr: deref 1236 => 1037
setm: size of (8 tagged-value-address deref) is 2
setm: (8 tagged-value-address deref): setting 1037 to integer-address
setm: (8 tagged-value-address deref): setting 1038 to 1039
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 1) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 103 write 11: ((7 integer-address deref) <- add (7 integer-address deref) (1 literal))
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1228
sz: (1032 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1228
addr: deref 1235 => 1032
add: 1 1
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1228
sz: (1032 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1228
addr: deref 1235 => 1032
run: 2 => (7 integer-address deref)
setm: (7 integer-address deref) <= 2
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1228
sz: (1032 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1228
addr: deref 1235 => 1032
setm: size of (7 integer-address deref) is 1
setm: (7 integer-address deref): setting 1032 to 2
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 2) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 104 write 12: ((9 integer) <- len (6 tagged-value-array-address deref))
array-len: (6 tagged-value-array-address deref)
m: (6 integer-address deref)
sz: (6 integer-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1228
sz: (1034 integer)
addr: (6 integer-address deref)
addr: initial result: 6
addr: incrementing by 1228
addr: deref 1234 => 1034
run: 2 => (9 integer)
setm: (9 integer) <= 2
sz: (9 integer)
addr: (9 integer)
addr: initial result: 9
addr: incrementing by 1228
setm: size of (9 integer) is 1
setm: (9 integer): setting 1237 to 2
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 2) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 105 write 13: ((10 boolean) <- lt (7 integer-address deref) (9 integer))
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1228
sz: (1032 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1228
addr: deref 1235 => 1032
m: (9 integer)
sz: (9 integer)
addr: (9 integer)
addr: initial result: 9
addr: incrementing by 1228
run: nil => (10 boolean)
setm: (10 boolean) <= nil
sz: (10 boolean)
addr: (10 boolean)
addr: initial result: 10
addr: incrementing by 1228
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1238 to nil
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 2) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 106 write 14: (jump-if (10 boolean) (1 offset))
m: (10 boolean)
sz: (10 boolean)
addr: (10 boolean)
addr: initial result: 10
addr: incrementing by 1228
jump: checking that nil is t
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 2) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 107 write 15: ((7 integer-address deref) <- copy (0 literal))
run: 0 => (7 integer-address deref)
setm: (7 integer-address deref) <= 0
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1228
sz: (1032 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1228
addr: deref 1235 => 1032
setm: size of (7 integer-address deref) is 1
setm: (7 integer-address deref): setting 1032 to 0
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 108 write 16: (reply (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1228
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1228
addr: deref 1229 => 1031
reply: ((1 channel-address deref)) ((1 channel-address deref))
reply: #(tagged record (1 0 1034 . nil)) => (1 channel-address deref)
setm: (1 channel-address deref) <= #(tagged record (1 0 1034 . nil))
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1031
setm: size of (1 channel-address deref) is 3
setm: (1 channel-address deref): setting 1031 to 1
setm: (1 channel-address deref): setting 1032 to 0
setm: (1 channel-address deref): setting 1033 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 109 main 8: (_ (1 channel-address deref) <- read (1 channel-address))
m: (1 channel-address)
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2))
run: 110 read 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1321 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30))
run: 111 read 1: ((1 channel-address) <- arg)
arg: nil 0 (1031)
run: 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1321
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1322 to 1031
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031))
run: 112 read 2: ((2 boolean) <- empty? (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1321
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1321
addr: deref 1322 => 1031
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031))
run: 113 empty? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1352 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1352 30))
run: 114 empty? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (1 0 1034 . nil)))
run: #(tagged record (1 0 1034 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (1 0 1034 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1352
setm: size of (1 channel) is 3
setm: (1 channel): setting 1353 to 1
setm: (1 channel): setting 1354 to 0
setm: (1 channel): setting 1355 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1352 30) (1353 1) (1354 0) (1355 1034))
run: 115 empty? 2: ((4 integer) <- get (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1352
record-info: initial base 1353 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (0 offset) => 1353 integer
m: (1353 integer global)
sz: (1353 integer global)
addr: (1353 integer global)
addr: initial result: 1353
run: 1 => (4 integer)
setm: (4 integer) <= 1
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1352
setm: size of (4 integer) is 1
setm: (4 integer): setting 1356 to 1
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1))
run: 116 empty? 3: ((5 integer) <- get (1 channel) (1 offset))
record-info: (1 channel) (1 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1352
record-info: initial base 1353 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (1 offset) => 1354 integer
m: (1354 integer global)
sz: (1354 integer global)
addr: (1354 integer global)
addr: initial result: 1354
run: 0 => (5 integer)
setm: (5 integer) <= 0
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1352
setm: size of (5 integer) is 1
setm: (5 integer): setting 1357 to 0
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 117 empty? 4: ((6 boolean) <- eq (4 integer) (5 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1352
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1352
run: nil => (6 boolean)
setm: (6 boolean) <= nil
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1352
setm: size of (6 boolean) is 1
setm: (6 boolean): setting 1358 to nil
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 118 empty? 5: (reply (6 boolean))
m: (6 boolean)
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1352
reply: ((6 boolean)) ((2 boolean))
reply: nil => (2 boolean)
setm: (2 boolean) <= nil
sz: (2 boolean)
addr: (2 boolean)
addr: initial result: 2
addr: incrementing by 1321
setm: size of (2 boolean) is 1
setm: (2 boolean): setting 1323 to nil
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 119 read 3: (jump-unless (2 boolean) (2 offset))
m: (2 boolean)
sz: (2 boolean)
addr: (2 boolean)
addr: initial result: 2
addr: incrementing by 1321
jump: checking that nil is not t
jump: jumping to 6
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 120 read 6: ((4 integer-address) <- get-address (1 channel-address deref) (0 offset))
record-info: (1 channel-address deref) (0 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1321
addr: deref 1322 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (0 offset) => 1031
run: 1031 => (4 integer-address)
setm: (4 integer-address) <= 1031
sz: (4 integer-address)
addr: (4 integer-address)
addr: initial result: 4
addr: incrementing by 1321
setm: size of (4 integer-address) is 1
setm: (4 integer-address): setting 1325 to 1031
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1325 1031) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 121 read 7: ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1321
addr: deref 1322 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel-address deref) (2 offset) => 1033 tagged-value-array-address
m: (1033 tagged-value-array-address global)
sz: (1033 tagged-value-array-address global)
addr: (1033 tagged-value-array-address global)
addr: initial result: 1033
run: 1034 => (5 tagged-value-array-address)
setm: (5 tagged-value-array-address) <= 1034
sz: (5 tagged-value-array-address)
addr: (5 tagged-value-array-address)
addr: initial result: 5
addr: incrementing by 1321
setm: size of (5 tagged-value-array-address) is 1
setm: (5 tagged-value-array-address): setting 1326 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1325 1031) (1326 1034) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 122 read 8: ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref))
array-info: (5 tagged-value-array-address deref) (4 integer-address deref)
addr: (5 tagged-value-array-address deref)
addr: initial result: 5
addr: incrementing by 1321
addr: deref 1326 => 1034
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1321
sz: (1031 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1321
addr: deref 1325 => 1031
array-info: initial base 1034 type ((address t) (elem tagged-value-array) (size 1))
array-info: (5 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (5 tagged-value-array-address deref)
m: (5 integer-address deref)
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1321
sz: (1034 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1321
addr: deref 1326 => 1034
array-info: array-len of (5 tagged-value-array-address deref) is 2
index: (5 tagged-value-array-address deref) (4 integer-address deref) => 1037 tagged-value
m: (1037 tagged-value global)
sz: (1037 tagged-value global)
addr: (1037 tagged-value global)
addr: initial result: 1037
run: #(tagged record (integer-address 1039 . nil)) => (6 tagged-value)
setm: (6 tagged-value) <= #(tagged record (integer-address 1039 . nil))
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1321
setm: size of (6 tagged-value) is 2
setm: (6 tagged-value): setting 1327 to integer-address
setm: (6 tagged-value): setting 1328 to 1039
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 1) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1325 1031) (1326 1034) (1327 integer-address) (1328 1039) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 123 read 9: ((4 integer-address deref) <- add (4 integer-address deref) (1 literal))
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1321
sz: (1031 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1321
addr: deref 1325 => 1031
add: 1 1
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1321
sz: (1031 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1321
addr: deref 1325 => 1031
run: 2 => (4 integer-address deref)
setm: (4 integer-address deref) <= 2
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1321
sz: (1031 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1321
addr: deref 1325 => 1031
setm: size of (4 integer-address deref) is 1
setm: (4 integer-address deref): setting 1031 to 2
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 2) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1325 1031) (1326 1034) (1327 integer-address) (1328 1039) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 124 read 10: ((8 integer) <- len (5 tagged-value-array-address deref))
array-len: (5 tagged-value-array-address deref)
m: (5 integer-address deref)
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1321
sz: (1034 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1321
addr: deref 1326 => 1034
run: 2 => (8 integer)
setm: (8 integer) <= 2
sz: (8 integer)
addr: (8 integer)
addr: initial result: 8
addr: incrementing by 1321
setm: size of (8 integer) is 1
setm: (8 integer): setting 1329 to 2
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 2) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1325 1031) (1326 1034) (1327 integer-address) (1328 1039) (1329 2) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 125 read 11: ((9 boolean) <- lt (4 integer-address deref) (8 integer))
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1321
sz: (1031 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1321
addr: deref 1325 => 1031
m: (8 integer)
sz: (8 integer)
addr: (8 integer)
addr: initial result: 8
addr: incrementing by 1321
run: nil => (9 boolean)
setm: (9 boolean) <= nil
sz: (9 boolean)
addr: (9 boolean)
addr: initial result: 9
addr: incrementing by 1321
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1330 to nil
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 2) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1325 1031) (1326 1034) (1327 integer-address) (1328 1039) (1329 2) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 126 read 12: (jump-if (9 boolean) (1 offset))
m: (9 boolean)
sz: (9 boolean)
addr: (9 boolean)
addr: initial result: 9
addr: incrementing by 1321
jump: checking that nil is t
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 2) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1325 1031) (1326 1034) (1327 integer-address) (1328 1039) (1329 2) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 127 read 13: ((4 integer-address deref) <- copy (0 literal))
run: 0 => (4 integer-address deref)
setm: (4 integer-address deref) <= 0
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1321
sz: (1031 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1321
addr: deref 1325 => 1031
setm: size of (4 integer-address deref) is 1
setm: (4 integer-address deref): setting 1031 to 0
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1325 1031) (1326 1034) (1327 integer-address) (1328 1039) (1329 2) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 128 read 14: (reply (6 tagged-value) (1 channel-address deref))
m: (6 tagged-value)
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1321
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1321
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1321
addr: deref 1322 => 1031
reply: ((6 tagged-value) (1 channel-address deref)) (_ (1 channel-address deref))
reply: #(tagged record (0 0 1034 . nil)) => (1 channel-address deref)
setm: (1 channel-address deref) <= #(tagged record (0 0 1034 . nil))
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
sz: (1031 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1031
setm: size of (1 channel-address deref) is 3
setm: (1 channel-address deref): setting 1031 to 0
setm: (1 channel-address deref): setting 1032 to 0
setm: (1 channel-address deref): setting 1033 to 1034
run: -- ((1 1031) (2 1039) (3 1071) (4 1) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 2) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 2) (1035 integer-address) (1036 1039) (1037 integer-address) (1038 1039) (1039 34) (1040 30) (1041 integer-address) (1042 1) (1043 t) (1044 1071) (1045 1071) (1046 1072) (1071 integer-address) (1072 1039) (1073 30) (1074 1031) (1075 integer-address) (1076 1039) (1079 1034) (1080 1032) (1081 1035) (1082 2) (1083 t) (1104 30) (1105 0) (1106 0) (1107 1034) (1108 1) (1109 2) (1110 t) (1111 0) (1135 30) (1136 0) (1137 0) (1138 1034) (1139 1034) (1140 2) (1166 30) (1167 1031) (1170 1031) (1171 1034) (1172 integer-address) (1173 1039) (1174 2) (1175 t) (1197 30) (1198 0) (1199 1) (1200 1034) (1201 0) (1202 1) (1228 30) (1229 1031) (1230 integer-address) (1231 1039) (1234 1034) (1235 1032) (1236 1037) (1237 2) (1259 30) (1260 1) (1261 1) (1262 1034) (1263 0) (1264 2) (1266 1) (1290 30) (1291 1) (1292 1) (1293 1034) (1294 1034) (1295 2) (1321 30) (1322 1031) (1325 1031) (1326 1034) (1327 integer-address) (1328 1039) (1329 2) (1352 30) (1353 1) (1354 0) (1355 1034) (1356 1) (1357 0))
run: 129 main 9: ((5 integer) <- get (1 channel-address deref) (0 offset))
record-info: (1 channel-address deref) (0 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: deref 1 => 1031
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel-address deref) (0 offset) => 1031 integer
m: (1031 integer global)
sz: (1031 integer global)
addr: (1031 integer global)
addr: initial result: 1031
run: 0 => (5 integer)
setm: (5 integer) <= 0
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
setm: size of (5 integer) is 1
setm: (5 integer): setting 5 to 0
schedule: done with routine
