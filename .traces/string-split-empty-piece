schedule: main
run: main 0: (((1 string-address)) <- ((new)) a/b//c)
run: main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: main 1: (((2 string-address-array-address)) <- ((split)) ((1 string-address)) ((/ literal)))
mem: ((1 string-address)) => 1000
run: split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: split/main 0: 1007 => ((default-space space-address))
run: split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/)
run: split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1009 <= 1000
run: split/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/)
run: split/main 2: #\/ => ((2 character))
mem: ((2 character)): 1010 <= #\/
run: split/main 3: (((3 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 6
run: split/main 3: 6 => ((3 integer))
mem: ((3 integer)): 1011 <= 6
run: split/main 4: (((4 boolean)) <- ((equal)) ((3 integer)) ((0 literal)))
mem: ((3 integer)) => 6
run: split/main 4: nil => ((4 boolean))
mem: ((4 boolean)): 1012 <= nil
run: split/main 5: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => nil
run: split/main 8: (((6 integer)) <- ((copy)) ((1 literal)))
run: split/main 8: 1 => ((6 integer))
mem: ((6 integer)): 1014 <= 1
run: split/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: split/main 9: 0 => ((7 integer))
mem: ((7 integer)): 1015 <= 0
run: split/main 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((7 integer)) => 0
run: find-next/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/split/main 0: 1038 => ((default-space space-address))
run: find-next/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 0)
run: find-next/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1040 <= 1000
run: find-next/split/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 0)
run: find-next/split/main 2: #\/ => ((2 character))
mem: ((2 character)): 1041 <= #\/
run: find-next/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 0)
run: find-next/split/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1042 <= 0
run: find-next/split/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 6
run: find-next/split/main 4: 6 => ((4 integer))
mem: ((4 integer)): 1043 <= 6
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 0
mem: ((4 integer)) => 6
run: find-next/split/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1044 <= nil
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1001 byte) (raw)) => a
run: find-next/split/main 7: #\a => ((6 byte))
mem: ((6 byte)): 1045 <= #\a
run: find-next/split/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => a
mem: ((2 character)) => /
run: find-next/split/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1046 <= nil
run: find-next/split/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-next/split/main 10: 1 => ((3 integer))
mem: ((3 integer)): 1042 <= 1
run: find-next/split/main 11: (((jump)) ((-7 offset)))
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 6
run: find-next/split/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1044 <= nil
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1002 byte) (raw)) => /
run: find-next/split/main 7: #\/ => ((6 byte))
mem: ((6 byte)): 1045 <= #\/
run: find-next/split/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1046 <= t
run: find-next/split/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 1
run: split/main 10: 1 => ((7 integer))
mem: ((7 integer)): 1015 <= 1
run: split/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
mem: ((7 integer)) => 1
mem: ((3 integer)) => 6
run: split/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 12: (((jump-if)) ((8 boolean)) ((3 offset)))
mem: ((8 boolean)) => nil
run: split/main 13: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: split/main 13: 2 => ((7 integer))
mem: ((7 integer)): 1015 <= 2
run: split/main 14: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 1
run: split/main 14: 2 => ((6 integer))
mem: ((6 integer)): 1014 <= 2
run: split/main 15: (((jump)) ((-6 offset)))
run: split/main 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((7 integer)) => 2
run: find-next/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/split/main 0: 1069 => ((default-space space-address))
run: find-next/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 2)
run: find-next/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1071 <= 1000
run: find-next/split/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 2)
run: find-next/split/main 2: #\/ => ((2 character))
mem: ((2 character)): 1072 <= #\/
run: find-next/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 2)
run: find-next/split/main 3: 2 => ((3 integer))
mem: ((3 integer)): 1073 <= 2
run: find-next/split/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 6
run: find-next/split/main 4: 6 => ((4 integer))
mem: ((4 integer)): 1074 <= 6
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 6
run: find-next/split/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1075 <= nil
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1003 byte) (raw)) => b
run: find-next/split/main 7: #\b => ((6 byte))
mem: ((6 byte)): 1076 <= #\b
run: find-next/split/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => b
mem: ((2 character)) => /
run: find-next/split/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1077 <= nil
run: find-next/split/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-next/split/main 10: 3 => ((3 integer))
mem: ((3 integer)): 1073 <= 3
run: find-next/split/main 11: (((jump)) ((-7 offset)))
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 6
run: find-next/split/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1075 <= nil
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1004 byte) (raw)) => /
run: find-next/split/main 7: #\/ => ((6 byte))
mem: ((6 byte)): 1076 <= #\/
run: find-next/split/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1077 <= t
run: find-next/split/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 3
run: split/main 10: 3 => ((7 integer))
mem: ((7 integer)): 1015 <= 3
run: split/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
mem: ((7 integer)) => 3
mem: ((3 integer)) => 6
run: split/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 12: (((jump-if)) ((8 boolean)) ((3 offset)))
mem: ((8 boolean)) => nil
run: split/main 13: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 3
run: split/main 13: 4 => ((7 integer))
mem: ((7 integer)): 1015 <= 4
run: split/main 14: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 2
run: split/main 14: 3 => ((6 integer))
mem: ((6 integer)): 1014 <= 3
run: split/main 15: (((jump)) ((-6 offset)))
run: split/main 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((7 integer)) => 4
run: find-next/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/split/main 0: 1100 => ((default-space space-address))
run: find-next/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 4)
run: find-next/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1102 <= 1000
run: find-next/split/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 4)
run: find-next/split/main 2: #\/ => ((2 character))
mem: ((2 character)): 1103 <= #\/
run: find-next/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 4)
run: find-next/split/main 3: 4 => ((3 integer))
mem: ((3 integer)): 1104 <= 4
run: find-next/split/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 6
run: find-next/split/main 4: 6 => ((4 integer))
mem: ((4 integer)): 1105 <= 6
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 4
mem: ((4 integer)) => 6
run: find-next/split/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1106 <= nil
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 4
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1005 byte) (raw)) => /
run: find-next/split/main 7: #\/ => ((6 byte))
mem: ((6 byte)): 1107 <= #\/
run: find-next/split/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1108 <= t
run: find-next/split/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 4
run: split/main 10: 4 => ((7 integer))
mem: ((7 integer)): 1015 <= 4
run: split/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
mem: ((7 integer)) => 4
mem: ((3 integer)) => 6
run: split/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 12: (((jump-if)) ((8 boolean)) ((3 offset)))
mem: ((8 boolean)) => nil
run: split/main 13: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 4
run: split/main 13: 5 => ((7 integer))
mem: ((7 integer)): 1015 <= 5
run: split/main 14: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 3
run: split/main 14: 4 => ((6 integer))
mem: ((6 integer)): 1014 <= 4
run: split/main 15: (((jump)) ((-6 offset)))
run: split/main 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((7 integer)) => 5
run: find-next/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/split/main 0: 1131 => ((default-space space-address))
run: find-next/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 5)
run: find-next/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1133 <= 1000
run: find-next/split/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 5)
run: find-next/split/main 2: #\/ => ((2 character))
mem: ((2 character)): 1134 <= #\/
run: find-next/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 5)
run: find-next/split/main 3: 5 => ((3 integer))
mem: ((3 integer)): 1135 <= 5
run: find-next/split/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 6
run: find-next/split/main 4: 6 => ((4 integer))
mem: ((4 integer)): 1136 <= 6
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 5
mem: ((4 integer)) => 6
run: find-next/split/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1137 <= nil
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 5
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1006 byte) (raw)) => c
run: find-next/split/main 7: #\c => ((6 byte))
mem: ((6 byte)): 1138 <= #\c
run: find-next/split/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => c
mem: ((2 character)) => /
run: find-next/split/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1139 <= nil
run: find-next/split/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 5
run: find-next/split/main 10: 6 => ((3 integer))
mem: ((3 integer)): 1135 <= 6
run: find-next/split/main 11: (((jump)) ((-7 offset)))
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 6
mem: ((4 integer)) => 6
run: find-next/split/main 5: t => ((5 boolean))
mem: ((5 boolean)): 1137 <= t
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => t
run: find-next/split/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 6
run: split/main 10: 6 => ((7 integer))
mem: ((7 integer)): 1015 <= 6
run: split/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
mem: ((7 integer)) => 6
mem: ((3 integer)) => 6
run: split/main 11: t => ((8 boolean))
mem: ((8 boolean)): 1016 <= t
run: split/main 12: (((jump-if)) ((8 boolean)) ((3 offset)))
mem: ((8 boolean)) => t
run: split/main 16: (((5 string-address-array-address)) <- ((new)) ((string-address-array literal)) ((6 integer)))
mem: ((6 integer)) => 4
run: split/main 16: 1162 => ((5 string-address-array-address))
mem: ((5 string-address-array-address)): 1013 <= 1162
run: split/main 17: (((9 integer)) <- ((copy)) ((0 literal)))
run: split/main 17: 0 => ((9 integer))
mem: ((9 integer)): 1017 <= 0
run: split/main 18: (((10 integer)) <- ((copy)) ((0 literal)))
run: split/main 18: 0 => ((10 integer))
mem: ((10 integer)): 1018 <= 0
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 0
mem: ((3 integer)) => 6
run: split/main 19: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 20: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: split/main 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((10 integer)) => 0
run: find-next/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/split/main 0: 1167 => ((default-space space-address))
run: find-next/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 0)
run: find-next/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1169 <= 1000
run: find-next/split/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 0)
run: find-next/split/main 2: #\/ => ((2 character))
mem: ((2 character)): 1170 <= #\/
run: find-next/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 0)
run: find-next/split/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1171 <= 0
run: find-next/split/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 6
run: find-next/split/main 4: 6 => ((4 integer))
mem: ((4 integer)): 1172 <= 6
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 0
mem: ((4 integer)) => 6
run: find-next/split/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1173 <= nil
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1001 byte) (raw)) => a
run: find-next/split/main 7: #\a => ((6 byte))
mem: ((6 byte)): 1174 <= #\a
run: find-next/split/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => a
mem: ((2 character)) => /
run: find-next/split/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1175 <= nil
run: find-next/split/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-next/split/main 10: 1 => ((3 integer))
mem: ((3 integer)): 1171 <= 1
run: find-next/split/main 11: (((jump)) ((-7 offset)))
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 6
run: find-next/split/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1173 <= nil
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1002 byte) (raw)) => /
run: find-next/split/main 7: #\/ => ((6 byte))
mem: ((6 byte)): 1174 <= #\/
run: find-next/split/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1175 <= t
run: find-next/split/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 1
run: split/main 21: 1 => ((11 integer))
mem: ((11 integer)): 1019 <= 1
run: split/main 22: (((12 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 0
array-len: ((1162 string-address-array) (raw))
mem: ((1162 integer) (raw)) => 4
run: split/main 22: 1163 => ((12 string-address-address))
mem: ((12 string-address-address)): 1020 <= 1163
run: split/main 23: (((12 string-address-address) (deref)) <- ((string-copy)) ((1 string-address)) ((10 integer)) ((11 integer)))
mem: ((1 string-address)) => 1000
mem: ((10 integer)) => 0
mem: ((11 integer)) => 1
run: string-copy/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split/main 0: 1198 => ((default-space space-address))
run: string-copy/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 0 1)
run: string-copy/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1200 <= 1000
run: string-copy/split/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1000 0 1)
run: string-copy/split/main 2: 0 => ((2 integer))
mem: ((2 integer)): 1201 <= 0
run: string-copy/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 0 1)
run: string-copy/split/main 3: 1 => ((3 integer))
mem: ((3 integer)): 1202 <= 1
run: string-copy/split/main 4: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 1
mem: ((2 integer)) => 0
run: string-copy/split/main 4: 1 => ((4 integer))
mem: ((4 integer)): 1203 <= 1
run: string-copy/split/main 5: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 1
run: string-copy/split/main 5: 1229 => ((5 string-address))
mem: ((5 string-address)): 1204 <= 1229
run: string-copy/split/main 6: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 0
run: string-copy/split/main 6: 0 => ((6 integer))
mem: ((6 integer)): 1205 <= 0
run: string-copy/split/main 7: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split/main 7: 0 => ((7 integer))
mem: ((7 integer)): 1206 <= 0
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 0
mem: ((3 integer)) => 1
run: string-copy/split/main 8: nil => ((8 boolean))
mem: ((8 boolean)): 1207 <= nil
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split/main 10: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 0
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1001 byte) (raw)) => a
run: string-copy/split/main 10: #\a => ((9 character))
mem: ((9 character)): 1208 <= #\a
run: string-copy/split/main 11: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1229 string) (raw))
mem: ((1229 integer) (raw)) => 1
run: string-copy/split/main 11: 1230 => ((10 character-address))
mem: ((10 character-address)): 1209 <= 1230
run: string-copy/split/main 12: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => a
run: string-copy/split/main 12: #\a => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1230 <= #\a
run: string-copy/split/main 13: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 0
run: string-copy/split/main 13: 1 => ((6 integer))
mem: ((6 integer)): 1205 <= 1
run: string-copy/split/main 14: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split/main 14: 1 => ((7 integer))
mem: ((7 integer)): 1206 <= 1
run: string-copy/split/main 15: (((jump)) ((-8 offset)))
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 1
mem: ((3 integer)) => 1
run: string-copy/split/main 8: t => ((8 boolean))
mem: ((8 boolean)): 1207 <= t
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split/main 16: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1229
run: split/main 23: 1229 => ((12 string-address-address) (deref))
mem: ((12 string-address-address) (deref)): 1163 <= 1229
run: split/main 24: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
mem: ((11 integer)) => 1
run: split/main 24: 2 => ((10 integer))
mem: ((10 integer)): 1018 <= 2
run: split/main 25: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 0
run: split/main 25: 1 => ((9 integer))
mem: ((9 integer)): 1017 <= 1
run: split/main 26: (((jump)) ((-8 offset)))
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 2
mem: ((3 integer)) => 6
run: split/main 19: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 20: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: split/main 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((10 integer)) => 2
run: find-next/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/split/main 0: 1231 => ((default-space space-address))
run: find-next/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 2)
run: find-next/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1233 <= 1000
run: find-next/split/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 2)
run: find-next/split/main 2: #\/ => ((2 character))
mem: ((2 character)): 1234 <= #\/
run: find-next/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 2)
run: find-next/split/main 3: 2 => ((3 integer))
mem: ((3 integer)): 1235 <= 2
run: find-next/split/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 6
run: find-next/split/main 4: 6 => ((4 integer))
mem: ((4 integer)): 1236 <= 6
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 6
run: find-next/split/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1237 <= nil
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1003 byte) (raw)) => b
run: find-next/split/main 7: #\b => ((6 byte))
mem: ((6 byte)): 1238 <= #\b
run: find-next/split/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => b
mem: ((2 character)) => /
run: find-next/split/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1239 <= nil
run: find-next/split/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-next/split/main 10: 3 => ((3 integer))
mem: ((3 integer)): 1235 <= 3
run: find-next/split/main 11: (((jump)) ((-7 offset)))
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 6
run: find-next/split/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1237 <= nil
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1004 byte) (raw)) => /
run: find-next/split/main 7: #\/ => ((6 byte))
mem: ((6 byte)): 1238 <= #\/
run: find-next/split/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1239 <= t
run: find-next/split/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 3
run: split/main 21: 3 => ((11 integer))
mem: ((11 integer)): 1019 <= 3
run: split/main 22: (((12 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 1
array-len: ((1162 string-address-array) (raw))
mem: ((1162 integer) (raw)) => 4
run: split/main 22: 1164 => ((12 string-address-address))
mem: ((12 string-address-address)): 1020 <= 1164
run: split/main 23: (((12 string-address-address) (deref)) <- ((string-copy)) ((1 string-address)) ((10 integer)) ((11 integer)))
mem: ((1 string-address)) => 1000
mem: ((10 integer)) => 2
mem: ((11 integer)) => 3
run: string-copy/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split/main 0: 1262 => ((default-space space-address))
run: string-copy/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 2 3)
run: string-copy/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1264 <= 1000
run: string-copy/split/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1000 2 3)
run: string-copy/split/main 2: 2 => ((2 integer))
mem: ((2 integer)): 1265 <= 2
run: string-copy/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 2 3)
run: string-copy/split/main 3: 3 => ((3 integer))
mem: ((3 integer)): 1266 <= 3
run: string-copy/split/main 4: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 3
mem: ((2 integer)) => 2
run: string-copy/split/main 4: 1 => ((4 integer))
mem: ((4 integer)): 1267 <= 1
run: string-copy/split/main 5: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 1
run: string-copy/split/main 5: 1293 => ((5 string-address))
mem: ((5 string-address)): 1268 <= 1293
run: string-copy/split/main 6: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 2
run: string-copy/split/main 6: 2 => ((6 integer))
mem: ((6 integer)): 1269 <= 2
run: string-copy/split/main 7: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split/main 7: 0 => ((7 integer))
mem: ((7 integer)): 1270 <= 0
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 2
mem: ((3 integer)) => 3
run: string-copy/split/main 8: nil => ((8 boolean))
mem: ((8 boolean)): 1271 <= nil
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split/main 10: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 2
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1003 byte) (raw)) => b
run: string-copy/split/main 10: #\b => ((9 character))
mem: ((9 character)): 1272 <= #\b
run: string-copy/split/main 11: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1293 string) (raw))
mem: ((1293 integer) (raw)) => 1
run: string-copy/split/main 11: 1294 => ((10 character-address))
mem: ((10 character-address)): 1273 <= 1294
run: string-copy/split/main 12: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => b
run: string-copy/split/main 12: #\b => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1294 <= #\b
run: string-copy/split/main 13: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 2
run: string-copy/split/main 13: 3 => ((6 integer))
mem: ((6 integer)): 1269 <= 3
run: string-copy/split/main 14: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split/main 14: 1 => ((7 integer))
mem: ((7 integer)): 1270 <= 1
run: string-copy/split/main 15: (((jump)) ((-8 offset)))
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 3
mem: ((3 integer)) => 3
run: string-copy/split/main 8: t => ((8 boolean))
mem: ((8 boolean)): 1271 <= t
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split/main 16: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1293
run: split/main 23: 1293 => ((12 string-address-address) (deref))
mem: ((12 string-address-address) (deref)): 1164 <= 1293
run: split/main 24: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
mem: ((11 integer)) => 3
run: split/main 24: 4 => ((10 integer))
mem: ((10 integer)): 1018 <= 4
run: split/main 25: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 1
run: split/main 25: 2 => ((9 integer))
mem: ((9 integer)): 1017 <= 2
run: split/main 26: (((jump)) ((-8 offset)))
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 4
mem: ((3 integer)) => 6
run: split/main 19: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 20: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: split/main 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((10 integer)) => 4
run: find-next/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/split/main 0: 1295 => ((default-space space-address))
run: find-next/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 4)
run: find-next/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1297 <= 1000
run: find-next/split/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 4)
run: find-next/split/main 2: #\/ => ((2 character))
mem: ((2 character)): 1298 <= #\/
run: find-next/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 4)
run: find-next/split/main 3: 4 => ((3 integer))
mem: ((3 integer)): 1299 <= 4
run: find-next/split/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 6
run: find-next/split/main 4: 6 => ((4 integer))
mem: ((4 integer)): 1300 <= 6
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 4
mem: ((4 integer)) => 6
run: find-next/split/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1301 <= nil
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 4
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1005 byte) (raw)) => /
run: find-next/split/main 7: #\/ => ((6 byte))
mem: ((6 byte)): 1302 <= #\/
run: find-next/split/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1303 <= t
run: find-next/split/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 4
run: split/main 21: 4 => ((11 integer))
mem: ((11 integer)): 1019 <= 4
run: split/main 22: (((12 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 2
array-len: ((1162 string-address-array) (raw))
mem: ((1162 integer) (raw)) => 4
run: split/main 22: 1165 => ((12 string-address-address))
mem: ((12 string-address-address)): 1020 <= 1165
run: split/main 23: (((12 string-address-address) (deref)) <- ((string-copy)) ((1 string-address)) ((10 integer)) ((11 integer)))
mem: ((1 string-address)) => 1000
mem: ((10 integer)) => 4
mem: ((11 integer)) => 4
run: string-copy/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split/main 0: 1326 => ((default-space space-address))
run: string-copy/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 4 4)
run: string-copy/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1328 <= 1000
run: string-copy/split/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1000 4 4)
run: string-copy/split/main 2: 4 => ((2 integer))
mem: ((2 integer)): 1329 <= 4
run: string-copy/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 4 4)
run: string-copy/split/main 3: 4 => ((3 integer))
mem: ((3 integer)): 1330 <= 4
run: string-copy/split/main 4: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 4
mem: ((2 integer)) => 4
run: string-copy/split/main 4: 0 => ((4 integer))
mem: ((4 integer)): 1331 <= 0
run: string-copy/split/main 5: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 0
run: string-copy/split/main 5: 1357 => ((5 string-address))
mem: ((5 string-address)): 1332 <= 1357
run: string-copy/split/main 6: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 4
run: string-copy/split/main 6: 4 => ((6 integer))
mem: ((6 integer)): 1333 <= 4
run: string-copy/split/main 7: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split/main 7: 0 => ((7 integer))
mem: ((7 integer)): 1334 <= 0
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 4
mem: ((3 integer)) => 4
run: string-copy/split/main 8: t => ((8 boolean))
mem: ((8 boolean)): 1335 <= t
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split/main 16: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1357
run: split/main 23: 1357 => ((12 string-address-address) (deref))
mem: ((12 string-address-address) (deref)): 1165 <= 1357
run: split/main 24: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
mem: ((11 integer)) => 4
run: split/main 24: 5 => ((10 integer))
mem: ((10 integer)): 1018 <= 5
run: split/main 25: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 2
run: split/main 25: 3 => ((9 integer))
mem: ((9 integer)): 1017 <= 3
run: split/main 26: (((jump)) ((-8 offset)))
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 5
mem: ((3 integer)) => 6
run: split/main 19: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 20: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: split/main 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((10 integer)) => 5
run: find-next/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/split/main 0: 1358 => ((default-space space-address))
run: find-next/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 5)
run: find-next/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1360 <= 1000
run: find-next/split/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 5)
run: find-next/split/main 2: #\/ => ((2 character))
mem: ((2 character)): 1361 <= #\/
run: find-next/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 5)
run: find-next/split/main 3: 5 => ((3 integer))
mem: ((3 integer)): 1362 <= 5
run: find-next/split/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 6
run: find-next/split/main 4: 6 => ((4 integer))
mem: ((4 integer)): 1363 <= 6
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 5
mem: ((4 integer)) => 6
run: find-next/split/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1364 <= nil
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 5
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1006 byte) (raw)) => c
run: find-next/split/main 7: #\c => ((6 byte))
mem: ((6 byte)): 1365 <= #\c
run: find-next/split/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => c
mem: ((2 character)) => /
run: find-next/split/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1366 <= nil
run: find-next/split/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 5
run: find-next/split/main 10: 6 => ((3 integer))
mem: ((3 integer)): 1362 <= 6
run: find-next/split/main 11: (((jump)) ((-7 offset)))
run: find-next/split/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 6
mem: ((4 integer)) => 6
run: find-next/split/main 5: t => ((5 boolean))
mem: ((5 boolean)): 1364 <= t
run: find-next/split/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => t
run: find-next/split/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 6
run: split/main 21: 6 => ((11 integer))
mem: ((11 integer)): 1019 <= 6
run: split/main 22: (((12 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 3
array-len: ((1162 string-address-array) (raw))
mem: ((1162 integer) (raw)) => 4
run: split/main 22: 1166 => ((12 string-address-address))
mem: ((12 string-address-address)): 1020 <= 1166
run: split/main 23: (((12 string-address-address) (deref)) <- ((string-copy)) ((1 string-address)) ((10 integer)) ((11 integer)))
mem: ((1 string-address)) => 1000
mem: ((10 integer)) => 5
mem: ((11 integer)) => 6
run: string-copy/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split/main 0: 1389 => ((default-space space-address))
run: string-copy/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 5 6)
run: string-copy/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1391 <= 1000
run: string-copy/split/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1000 5 6)
run: string-copy/split/main 2: 5 => ((2 integer))
mem: ((2 integer)): 1392 <= 5
run: string-copy/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 5 6)
run: string-copy/split/main 3: 6 => ((3 integer))
mem: ((3 integer)): 1393 <= 6
run: string-copy/split/main 4: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 6
mem: ((2 integer)) => 5
run: string-copy/split/main 4: 1 => ((4 integer))
mem: ((4 integer)): 1394 <= 1
run: string-copy/split/main 5: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 1
run: string-copy/split/main 5: 1420 => ((5 string-address))
mem: ((5 string-address)): 1395 <= 1420
run: string-copy/split/main 6: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 5
run: string-copy/split/main 6: 5 => ((6 integer))
mem: ((6 integer)): 1396 <= 5
run: string-copy/split/main 7: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split/main 7: 0 => ((7 integer))
mem: ((7 integer)): 1397 <= 0
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 5
mem: ((3 integer)) => 6
run: string-copy/split/main 8: nil => ((8 boolean))
mem: ((8 boolean)): 1398 <= nil
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split/main 10: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 5
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1006 byte) (raw)) => c
run: string-copy/split/main 10: #\c => ((9 character))
mem: ((9 character)): 1399 <= #\c
run: string-copy/split/main 11: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1420 string) (raw))
mem: ((1420 integer) (raw)) => 1
run: string-copy/split/main 11: 1421 => ((10 character-address))
mem: ((10 character-address)): 1400 <= 1421
run: string-copy/split/main 12: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => c
run: string-copy/split/main 12: #\c => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1421 <= #\c
run: string-copy/split/main 13: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 5
run: string-copy/split/main 13: 6 => ((6 integer))
mem: ((6 integer)): 1396 <= 6
run: string-copy/split/main 14: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split/main 14: 1 => ((7 integer))
mem: ((7 integer)): 1397 <= 1
run: string-copy/split/main 15: (((jump)) ((-8 offset)))
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 6
mem: ((3 integer)) => 6
run: string-copy/split/main 8: t => ((8 boolean))
mem: ((8 boolean)): 1398 <= t
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split/main 16: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1420
run: split/main 23: 1420 => ((12 string-address-address) (deref))
mem: ((12 string-address-address) (deref)): 1166 <= 1420
run: split/main 24: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
mem: ((11 integer)) => 6
run: split/main 24: 7 => ((10 integer))
mem: ((10 integer)): 1018 <= 7
run: split/main 25: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 3
run: split/main 25: 4 => ((9 integer))
mem: ((9 integer)): 1017 <= 4
run: split/main 26: (((jump)) ((-8 offset)))
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 7
mem: ((3 integer)) => 6
run: split/main 19: t => ((8 boolean))
mem: ((8 boolean)): 1016 <= t
run: split/main 20: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: split/main 27: (((reply)) ((5 string-address-array-address)))
mem: ((5 string-address-array-address)) => 1162
run: main 1: 1162 => ((2 string-address-array-address))
mem: ((2 string-address-array-address)): 2 <= 1162
schedule: done with routine 
