schedule: main
run: main 0: (((1 string-address)) <- ((new)) a/b//c)
run: main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: main 1: (((2 string-address-array-address)) <- ((split)) ((1 string-address)) ((/ literal)))
mem: ((1 string-address)) => 1000
run: split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: split/main 0: 1007 => ((default-space space-address))
run: split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/)
run: split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1009 <= 1000
run: split/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/)
run: split/main 2: #\/ => ((2 character))
mem: ((2 character)): 1010 <= #\/
run: split/main 3: (((3 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 6
run: split/main 3: 6 => ((3 integer))
mem: ((3 integer)): 1011 <= 6
run: split/main 4: (((4 boolean)) <- ((equal)) ((3 integer)) ((0 literal)))
mem: ((3 integer)) => 6
run: split/main 4: nil => ((4 boolean))
mem: ((4 boolean)): 1012 <= nil
run: split/main 5: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => nil
run: split/main 8: (((6 integer)) <- ((copy)) ((1 literal)))
run: split/main 8: 1 => ((6 integer))
mem: ((6 integer)): 1014 <= 1
run: split/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: split/main 9: 0 => ((7 integer))
mem: ((7 integer)): 1015 <= 0
run: split/main 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((7 integer)) => 0
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 0)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 0)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 0)
run: find-next/split/main 2: 0 => ((3 integer))
mem: ((3 integer)): 3 <= 0
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 6
run: find-next/split/main 3: 6 => ((4 integer))
mem: ((4 integer)): 4 <= 6
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 0
mem: ((4 integer)) => 6
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((1000 string))
mem: ((1000 integer)) => 6
mem: ((1001 byte) (raw)) => a
run: find-next/split/main 6: #\a => ((6 byte))
mem: ((6 byte)): 6 <= #\a
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => a
mem: ((2 character)) => /
run: find-next/split/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-next/split/main 9: 1 => ((3 integer))
mem: ((3 integer)): 3 <= 1
run: find-next/split/main 10: (((jump)) ((-7 offset)))
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 6
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1000 string))
mem: ((1000 integer)) => 6
mem: ((1002 byte) (raw)) => /
run: find-next/split/main 6: #\/ => ((6 byte))
mem: ((6 byte)): 6 <= #\/
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 7: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 1
run: split/main 10: 1 => ((7 integer))
mem: ((7 integer)): 1015 <= 1
run: split/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
mem: ((7 integer)) => 1
mem: ((3 integer)) => 6
run: split/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 12: (((jump-if)) ((8 boolean)) ((3 offset)))
mem: ((8 boolean)) => nil
run: split/main 13: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: split/main 13: 2 => ((7 integer))
mem: ((7 integer)): 1015 <= 2
run: split/main 14: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 1
run: split/main 14: 2 => ((6 integer))
mem: ((6 integer)): 1014 <= 2
run: split/main 15: (((jump)) ((-6 offset)))
run: split/main 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((7 integer)) => 2
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 2)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 2)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 2)
run: find-next/split/main 2: 2 => ((3 integer))
mem: ((3 integer)): 3 <= 2
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 6
run: find-next/split/main 3: 6 => ((4 integer))
mem: ((4 integer)): 4 <= 6
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 6
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1000 string))
mem: ((1000 integer)) => 6
mem: ((1003 byte) (raw)) => b
run: find-next/split/main 6: #\b => ((6 byte))
mem: ((6 byte)): 6 <= #\b
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => b
mem: ((2 character)) => /
run: find-next/split/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-next/split/main 9: 3 => ((3 integer))
mem: ((3 integer)): 3 <= 3
run: find-next/split/main 10: (((jump)) ((-7 offset)))
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 6
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((1000 string))
mem: ((1000 integer)) => 6
mem: ((1004 byte) (raw)) => /
run: find-next/split/main 6: #\/ => ((6 byte))
mem: ((6 byte)): 6 <= #\/
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 7: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 3
run: split/main 10: 3 => ((7 integer))
mem: ((7 integer)): 1015 <= 3
run: split/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
mem: ((7 integer)) => 3
mem: ((3 integer)) => 6
run: split/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 12: (((jump-if)) ((8 boolean)) ((3 offset)))
mem: ((8 boolean)) => nil
run: split/main 13: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 3
run: split/main 13: 4 => ((7 integer))
mem: ((7 integer)): 1015 <= 4
run: split/main 14: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 2
run: split/main 14: 3 => ((6 integer))
mem: ((6 integer)): 1014 <= 3
run: split/main 15: (((jump)) ((-6 offset)))
run: split/main 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((7 integer)) => 4
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 4)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 4)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 4)
run: find-next/split/main 2: 4 => ((3 integer))
mem: ((3 integer)): 3 <= 4
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 6
run: find-next/split/main 3: 6 => ((4 integer))
mem: ((4 integer)): 4 <= 6
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 4
mem: ((4 integer)) => 6
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 4
array-len: ((1000 string))
mem: ((1000 integer)) => 6
mem: ((1005 byte) (raw)) => /
run: find-next/split/main 6: #\/ => ((6 byte))
mem: ((6 byte)): 6 <= #\/
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 7: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 4
run: split/main 10: 4 => ((7 integer))
mem: ((7 integer)): 1015 <= 4
run: split/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
mem: ((7 integer)) => 4
mem: ((3 integer)) => 6
run: split/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 12: (((jump-if)) ((8 boolean)) ((3 offset)))
mem: ((8 boolean)) => nil
run: split/main 13: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 4
run: split/main 13: 5 => ((7 integer))
mem: ((7 integer)): 1015 <= 5
run: split/main 14: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 3
run: split/main 14: 4 => ((6 integer))
mem: ((6 integer)): 1014 <= 4
run: split/main 15: (((jump)) ((-6 offset)))
run: split/main 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((7 integer)) => 5
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 5)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 5)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 5)
run: find-next/split/main 2: 5 => ((3 integer))
mem: ((3 integer)): 3 <= 5
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 6
run: find-next/split/main 3: 6 => ((4 integer))
mem: ((4 integer)): 4 <= 6
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 5
mem: ((4 integer)) => 6
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 5
array-len: ((1000 string))
mem: ((1000 integer)) => 6
mem: ((1006 byte) (raw)) => c
run: find-next/split/main 6: #\c => ((6 byte))
mem: ((6 byte)): 6 <= #\c
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => c
mem: ((2 character)) => /
run: find-next/split/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 5
run: find-next/split/main 9: 6 => ((3 integer))
mem: ((3 integer)): 3 <= 6
run: find-next/split/main 10: (((jump)) ((-7 offset)))
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 6
mem: ((4 integer)) => 6
run: find-next/split/main 4: t => ((5 boolean))
mem: ((5 boolean)): 5 <= t
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 6
run: split/main 10: 6 => ((7 integer))
mem: ((7 integer)): 1015 <= 6
run: split/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
mem: ((7 integer)) => 6
mem: ((3 integer)) => 6
run: split/main 11: t => ((8 boolean))
mem: ((8 boolean)): 1016 <= t
run: split/main 12: (((jump-if)) ((8 boolean)) ((3 offset)))
mem: ((8 boolean)) => t
run: split/main 16: (((5 string-address-array-address)) <- ((new)) ((string-address-array literal)) ((6 integer)))
mem: ((6 integer)) => 4
run: split/main 16: 1038 => ((5 string-address-array-address))
mem: ((5 string-address-array-address)): 1013 <= 1038
run: split/main 17: (((9 integer)) <- ((copy)) ((0 literal)))
run: split/main 17: 0 => ((9 integer))
mem: ((9 integer)): 1017 <= 0
run: split/main 18: (((10 integer)) <- ((copy)) ((0 literal)))
run: split/main 18: 0 => ((10 integer))
mem: ((10 integer)): 1018 <= 0
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 0
mem: ((3 integer)) => 6
run: split/main 19: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 20: (((jump-if)) ((8 boolean)) ((17 offset)))
mem: ((8 boolean)) => nil
run: split/main 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((10 integer)) => 0
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 0)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 0)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 0)
run: find-next/split/main 2: 0 => ((3 integer))
mem: ((3 integer)): 3 <= 0
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 6
run: find-next/split/main 3: 6 => ((4 integer))
mem: ((4 integer)): 4 <= 6
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 0
mem: ((4 integer)) => 6
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((1000 string))
mem: ((1000 integer)) => 6
mem: ((1001 byte) (raw)) => a
run: find-next/split/main 6: #\a => ((6 byte))
mem: ((6 byte)): 6 <= #\a
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => a
mem: ((2 character)) => /
run: find-next/split/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-next/split/main 9: 1 => ((3 integer))
mem: ((3 integer)): 3 <= 1
run: find-next/split/main 10: (((jump)) ((-7 offset)))
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 6
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1000 string))
mem: ((1000 integer)) => 6
mem: ((1002 byte) (raw)) => /
run: find-next/split/main 6: #\/ => ((6 byte))
mem: ((6 byte)): 6 <= #\/
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 7: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 1
run: split/main 21: 1 => ((11 integer))
mem: ((11 integer)): 1019 <= 1
run: split/main 22: (((12 integer)) <- ((subtract)) ((11 integer)) ((10 integer)))
mem: ((11 integer)) => 1
mem: ((10 integer)) => 0
run: split/main 22: 1 => ((12 integer))
mem: ((12 integer)): 1020 <= 1
run: split/main 23: (((13 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 0
array-len: ((1038 string-address-array) (raw))
mem: ((1038 integer) (raw)) => 4
run: split/main 23: 1039 => ((13 string-address-address))
mem: ((13 string-address-address)): 1021 <= 1039
run: split/main 24: (((13 string-address-address) (deref)) <- ((new)) ((string literal)) ((12 integer)))
mem: ((12 integer)) => 1
run: split/main 24: 1043 => ((13 string-address-address) (deref))
mem: ((13 string-address-address) (deref)): 1039 <= 1043
run: split/main 25: (((14 integer)) <- ((copy)) ((10 integer)))
mem: ((10 integer)) => 0
run: split/main 25: 0 => ((14 integer))
mem: ((14 integer)): 1022 <= 0
run: split/main 26: (((15 integer)) <- ((copy)) ((0 literal)))
run: split/main 26: 0 => ((15 integer))
mem: ((15 integer)): 1023 <= 0
run: split/main 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
mem: ((14 integer)) => 0
mem: ((11 integer)) => 1
run: split/main 27: nil => ((16 boolean))
mem: ((16 boolean)): 1024 <= nil
run: split/main 28: (((jump-if)) ((16 boolean)) ((6 offset)))
mem: ((16 boolean)) => nil
run: split/main 29: (((17 character)) <- ((index)) ((1 string-address) (deref)) ((14 integer)))
mem: ((14 integer)) => 0
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1001 byte) (raw)) => a
run: split/main 29: #\a => ((17 character))
mem: ((17 character)): 1025 <= #\a
run: split/main 30: (((18 character-address)) <- ((index-address)) ((13 string-address-address) (deref) (deref)) ((15 integer)))
mem: ((15 integer)) => 0
array-len: ((1043 string) (raw))
mem: ((1043 integer) (raw)) => 1
run: split/main 30: 1044 => ((18 character-address))
mem: ((18 character-address)): 1026 <= 1044
run: split/main 31: (((18 character-address) (deref)) <- ((copy)) ((17 character)))
mem: ((17 character)) => a
run: split/main 31: #\a => ((18 character-address) (deref))
mem: ((18 character-address) (deref)): 1044 <= #\a
run: split/main 32: (((14 integer)) <- ((add)) ((14 integer)) ((1 literal)))
mem: ((14 integer)) => 0
run: split/main 32: 1 => ((14 integer))
mem: ((14 integer)): 1022 <= 1
run: split/main 33: (((15 integer)) <- ((add)) ((15 integer)) ((1 literal)))
mem: ((15 integer)) => 0
run: split/main 33: 1 => ((15 integer))
mem: ((15 integer)): 1023 <= 1
run: split/main 34: (((jump)) ((-8 offset)))
run: split/main 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
mem: ((14 integer)) => 1
mem: ((11 integer)) => 1
run: split/main 27: t => ((16 boolean))
mem: ((16 boolean)): 1024 <= t
run: split/main 28: (((jump-if)) ((16 boolean)) ((6 offset)))
mem: ((16 boolean)) => t
run: split/main 35: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
mem: ((11 integer)) => 1
run: split/main 35: 2 => ((10 integer))
mem: ((10 integer)): 1018 <= 2
run: split/main 36: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 0
run: split/main 36: 1 => ((9 integer))
mem: ((9 integer)): 1017 <= 1
run: split/main 37: (((jump)) ((-19 offset)))
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 2
mem: ((3 integer)) => 6
run: split/main 19: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 20: (((jump-if)) ((8 boolean)) ((17 offset)))
mem: ((8 boolean)) => nil
run: split/main 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((10 integer)) => 2
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 2)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 2)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 2)
run: find-next/split/main 2: 2 => ((3 integer))
mem: ((3 integer)): 3 <= 2
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 6
run: find-next/split/main 3: 6 => ((4 integer))
mem: ((4 integer)): 4 <= 6
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 6
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1000 string))
mem: ((1000 integer)) => 6
mem: ((1003 byte) (raw)) => b
run: find-next/split/main 6: #\b => ((6 byte))
mem: ((6 byte)): 6 <= #\b
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => b
mem: ((2 character)) => /
run: find-next/split/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-next/split/main 9: 3 => ((3 integer))
mem: ((3 integer)): 3 <= 3
run: find-next/split/main 10: (((jump)) ((-7 offset)))
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 6
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((1000 string))
mem: ((1000 integer)) => 6
mem: ((1004 byte) (raw)) => /
run: find-next/split/main 6: #\/ => ((6 byte))
mem: ((6 byte)): 6 <= #\/
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 7: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 3
run: split/main 21: 3 => ((11 integer))
mem: ((11 integer)): 1019 <= 3
run: split/main 22: (((12 integer)) <- ((subtract)) ((11 integer)) ((10 integer)))
mem: ((11 integer)) => 3
mem: ((10 integer)) => 2
run: split/main 22: 1 => ((12 integer))
mem: ((12 integer)): 1020 <= 1
run: split/main 23: (((13 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 1
array-len: ((1038 string-address-array) (raw))
mem: ((1038 integer) (raw)) => 4
run: split/main 23: 1040 => ((13 string-address-address))
mem: ((13 string-address-address)): 1021 <= 1040
run: split/main 24: (((13 string-address-address) (deref)) <- ((new)) ((string literal)) ((12 integer)))
mem: ((12 integer)) => 1
run: split/main 24: 1045 => ((13 string-address-address) (deref))
mem: ((13 string-address-address) (deref)): 1040 <= 1045
run: split/main 25: (((14 integer)) <- ((copy)) ((10 integer)))
mem: ((10 integer)) => 2
run: split/main 25: 2 => ((14 integer))
mem: ((14 integer)): 1022 <= 2
run: split/main 26: (((15 integer)) <- ((copy)) ((0 literal)))
run: split/main 26: 0 => ((15 integer))
mem: ((15 integer)): 1023 <= 0
run: split/main 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
mem: ((14 integer)) => 2
mem: ((11 integer)) => 3
run: split/main 27: nil => ((16 boolean))
mem: ((16 boolean)): 1024 <= nil
run: split/main 28: (((jump-if)) ((16 boolean)) ((6 offset)))
mem: ((16 boolean)) => nil
run: split/main 29: (((17 character)) <- ((index)) ((1 string-address) (deref)) ((14 integer)))
mem: ((14 integer)) => 2
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1003 byte) (raw)) => b
run: split/main 29: #\b => ((17 character))
mem: ((17 character)): 1025 <= #\b
run: split/main 30: (((18 character-address)) <- ((index-address)) ((13 string-address-address) (deref) (deref)) ((15 integer)))
mem: ((15 integer)) => 0
array-len: ((1045 string) (raw))
mem: ((1045 integer) (raw)) => 1
run: split/main 30: 1046 => ((18 character-address))
mem: ((18 character-address)): 1026 <= 1046
run: split/main 31: (((18 character-address) (deref)) <- ((copy)) ((17 character)))
mem: ((17 character)) => b
run: split/main 31: #\b => ((18 character-address) (deref))
mem: ((18 character-address) (deref)): 1046 <= #\b
run: split/main 32: (((14 integer)) <- ((add)) ((14 integer)) ((1 literal)))
mem: ((14 integer)) => 2
run: split/main 32: 3 => ((14 integer))
mem: ((14 integer)): 1022 <= 3
run: split/main 33: (((15 integer)) <- ((add)) ((15 integer)) ((1 literal)))
mem: ((15 integer)) => 0
run: split/main 33: 1 => ((15 integer))
mem: ((15 integer)): 1023 <= 1
run: split/main 34: (((jump)) ((-8 offset)))
run: split/main 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
mem: ((14 integer)) => 3
mem: ((11 integer)) => 3
run: split/main 27: t => ((16 boolean))
mem: ((16 boolean)): 1024 <= t
run: split/main 28: (((jump-if)) ((16 boolean)) ((6 offset)))
mem: ((16 boolean)) => t
run: split/main 35: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
mem: ((11 integer)) => 3
run: split/main 35: 4 => ((10 integer))
mem: ((10 integer)): 1018 <= 4
run: split/main 36: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 1
run: split/main 36: 2 => ((9 integer))
mem: ((9 integer)): 1017 <= 2
run: split/main 37: (((jump)) ((-19 offset)))
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 4
mem: ((3 integer)) => 6
run: split/main 19: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 20: (((jump-if)) ((8 boolean)) ((17 offset)))
mem: ((8 boolean)) => nil
run: split/main 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((10 integer)) => 4
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 4)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 4)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 4)
run: find-next/split/main 2: 4 => ((3 integer))
mem: ((3 integer)): 3 <= 4
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 6
run: find-next/split/main 3: 6 => ((4 integer))
mem: ((4 integer)): 4 <= 6
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 4
mem: ((4 integer)) => 6
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 4
array-len: ((1000 string))
mem: ((1000 integer)) => 6
mem: ((1005 byte) (raw)) => /
run: find-next/split/main 6: #\/ => ((6 byte))
mem: ((6 byte)): 6 <= #\/
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 7: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 4
run: split/main 21: 4 => ((11 integer))
mem: ((11 integer)): 1019 <= 4
run: split/main 22: (((12 integer)) <- ((subtract)) ((11 integer)) ((10 integer)))
mem: ((11 integer)) => 4
mem: ((10 integer)) => 4
run: split/main 22: 0 => ((12 integer))
mem: ((12 integer)): 1020 <= 0
run: split/main 23: (((13 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 2
array-len: ((1038 string-address-array) (raw))
mem: ((1038 integer) (raw)) => 4
run: split/main 23: 1041 => ((13 string-address-address))
mem: ((13 string-address-address)): 1021 <= 1041
run: split/main 24: (((13 string-address-address) (deref)) <- ((new)) ((string literal)) ((12 integer)))
mem: ((12 integer)) => 0
run: split/main 24: 1047 => ((13 string-address-address) (deref))
mem: ((13 string-address-address) (deref)): 1041 <= 1047
run: split/main 25: (((14 integer)) <- ((copy)) ((10 integer)))
mem: ((10 integer)) => 4
run: split/main 25: 4 => ((14 integer))
mem: ((14 integer)): 1022 <= 4
run: split/main 26: (((15 integer)) <- ((copy)) ((0 literal)))
run: split/main 26: 0 => ((15 integer))
mem: ((15 integer)): 1023 <= 0
run: split/main 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
mem: ((14 integer)) => 4
mem: ((11 integer)) => 4
run: split/main 27: t => ((16 boolean))
mem: ((16 boolean)): 1024 <= t
run: split/main 28: (((jump-if)) ((16 boolean)) ((6 offset)))
mem: ((16 boolean)) => t
run: split/main 35: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
mem: ((11 integer)) => 4
run: split/main 35: 5 => ((10 integer))
mem: ((10 integer)): 1018 <= 5
run: split/main 36: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 2
run: split/main 36: 3 => ((9 integer))
mem: ((9 integer)): 1017 <= 3
run: split/main 37: (((jump)) ((-19 offset)))
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 5
mem: ((3 integer)) => 6
run: split/main 19: nil => ((8 boolean))
mem: ((8 boolean)): 1016 <= nil
run: split/main 20: (((jump-if)) ((8 boolean)) ((17 offset)))
mem: ((8 boolean)) => nil
run: split/main 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((10 integer)) => 5
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 5)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 5)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 5)
run: find-next/split/main 2: 5 => ((3 integer))
mem: ((3 integer)): 3 <= 5
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 6
run: find-next/split/main 3: 6 => ((4 integer))
mem: ((4 integer)): 4 <= 6
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 5
mem: ((4 integer)) => 6
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 5
array-len: ((1000 string))
mem: ((1000 integer)) => 6
mem: ((1006 byte) (raw)) => c
run: find-next/split/main 6: #\c => ((6 byte))
mem: ((6 byte)): 6 <= #\c
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => c
mem: ((2 character)) => /
run: find-next/split/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 5
run: find-next/split/main 9: 6 => ((3 integer))
mem: ((3 integer)): 3 <= 6
run: find-next/split/main 10: (((jump)) ((-7 offset)))
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 6
mem: ((4 integer)) => 6
run: find-next/split/main 4: t => ((5 boolean))
mem: ((5 boolean)): 5 <= t
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 6
run: split/main 21: 6 => ((11 integer))
mem: ((11 integer)): 1019 <= 6
run: split/main 22: (((12 integer)) <- ((subtract)) ((11 integer)) ((10 integer)))
mem: ((11 integer)) => 6
mem: ((10 integer)) => 5
run: split/main 22: 1 => ((12 integer))
mem: ((12 integer)): 1020 <= 1
run: split/main 23: (((13 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 3
array-len: ((1038 string-address-array) (raw))
mem: ((1038 integer) (raw)) => 4
run: split/main 23: 1042 => ((13 string-address-address))
mem: ((13 string-address-address)): 1021 <= 1042
run: split/main 24: (((13 string-address-address) (deref)) <- ((new)) ((string literal)) ((12 integer)))
mem: ((12 integer)) => 1
run: split/main 24: 1048 => ((13 string-address-address) (deref))
mem: ((13 string-address-address) (deref)): 1042 <= 1048
run: split/main 25: (((14 integer)) <- ((copy)) ((10 integer)))
mem: ((10 integer)) => 5
run: split/main 25: 5 => ((14 integer))
mem: ((14 integer)): 1022 <= 5
run: split/main 26: (((15 integer)) <- ((copy)) ((0 literal)))
run: split/main 26: 0 => ((15 integer))
mem: ((15 integer)): 1023 <= 0
run: split/main 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
mem: ((14 integer)) => 5
mem: ((11 integer)) => 6
run: split/main 27: nil => ((16 boolean))
mem: ((16 boolean)): 1024 <= nil
run: split/main 28: (((jump-if)) ((16 boolean)) ((6 offset)))
mem: ((16 boolean)) => nil
run: split/main 29: (((17 character)) <- ((index)) ((1 string-address) (deref)) ((14 integer)))
mem: ((14 integer)) => 5
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1006 byte) (raw)) => c
run: split/main 29: #\c => ((17 character))
mem: ((17 character)): 1025 <= #\c
run: split/main 30: (((18 character-address)) <- ((index-address)) ((13 string-address-address) (deref) (deref)) ((15 integer)))
mem: ((15 integer)) => 0
array-len: ((1048 string) (raw))
mem: ((1048 integer) (raw)) => 1
run: split/main 30: 1049 => ((18 character-address))
mem: ((18 character-address)): 1026 <= 1049
run: split/main 31: (((18 character-address) (deref)) <- ((copy)) ((17 character)))
mem: ((17 character)) => c
run: split/main 31: #\c => ((18 character-address) (deref))
mem: ((18 character-address) (deref)): 1049 <= #\c
run: split/main 32: (((14 integer)) <- ((add)) ((14 integer)) ((1 literal)))
mem: ((14 integer)) => 5
run: split/main 32: 6 => ((14 integer))
mem: ((14 integer)): 1022 <= 6
run: split/main 33: (((15 integer)) <- ((add)) ((15 integer)) ((1 literal)))
mem: ((15 integer)) => 0
run: split/main 33: 1 => ((15 integer))
mem: ((15 integer)): 1023 <= 1
run: split/main 34: (((jump)) ((-8 offset)))
run: split/main 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
mem: ((14 integer)) => 6
mem: ((11 integer)) => 6
run: split/main 27: t => ((16 boolean))
mem: ((16 boolean)): 1024 <= t
run: split/main 28: (((jump-if)) ((16 boolean)) ((6 offset)))
mem: ((16 boolean)) => t
run: split/main 35: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
mem: ((11 integer)) => 6
run: split/main 35: 7 => ((10 integer))
mem: ((10 integer)): 1018 <= 7
run: split/main 36: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 3
run: split/main 36: 4 => ((9 integer))
mem: ((9 integer)): 1017 <= 4
run: split/main 37: (((jump)) ((-19 offset)))
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 7
mem: ((3 integer)) => 6
run: split/main 19: t => ((8 boolean))
mem: ((8 boolean)): 1016 <= t
run: split/main 20: (((jump-if)) ((8 boolean)) ((17 offset)))
mem: ((8 boolean)) => t
run: split/main 38: (((reply)) ((5 string-address-array-address)))
mem: ((5 string-address-array-address)) => 1038
run: main 1: 1038 => ((2 string-address-array-address))
mem: ((2 string-address-array-address)): 2 <= 1038
schedule: done with routine 
