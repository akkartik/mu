parse: instruction: run
parse:   ingredient: {name: "\n    1:address:array:character <- new [a/b//c]\n    2:address:array:address:array:character <- split 1:address:array:character, 47:literal/slash\n    3:number <- length 2:address:array:address:array:character/deref\n    4:address:array:character <- index 2:address:array:address:array:character/deref, 0:literal\n    5:address:array:character <- index 2:address:array:address:array:character/deref, 1:literal\n    6:address:array:character <- index 2:address:array:address:array:character/deref, 2:literal\n    7:address:array:character <- index 2:address:array:address:array:character/deref, 3:literal\n    10:array:character <- copy 4:address:array:character/deref\n    20:array:character <- copy 5:address:array:character/deref\n    30:array:character <- copy 6:address:array:character/deref\n    40:array:character <- copy 7:address:array:character/deref\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    3 <- 4  # length of result\n    10:string <- [a]\n    20:string <- [b]\n    30:string <- []\n    40:string <- [c]\n  ", properties: [_: "literal-string"]}
after-brace: recipe string-split-empty-piece
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: string-split-empty-piece
 101 run: run [
    1:address:array:character <- new [a/b//c]
    2:address:array:address:array:character <- split 1:address:array:character, 47:literal/slash
    3:number <- length 2:address:array:address:array:character/deref
    4:address:array:character <- index 2:address:array:address:array:character/deref, 0:literal
    5:address:array:character <- index 2:address:array:address:array:character/deref, 1:literal
    6:address:array:character <- index 2:address:array:address:array:character/deref, 2:literal
    7:address:array:character <- index 2:address:array:address:array:character/deref, 3:literal
    10:array:character <- copy 4:address:array:character/deref
    20:array:character <- copy 5:address:array:character/deref
    30:array:character <- copy 6:address:array:character/deref
    40:array:character <- copy 7:address:array:character/deref
  ]
parse: instruction: new
parse:   ingredient: {name: "a/b//c", properties: [_: "literal-string"]}
parse:   product: {name: "1", properties: ["1": "address":"array":"character"]}
parse: instruction: split
parse:   ingredient: {name: "1", properties: ["1": "address":"array":"character"]}
parse:   ingredient: {name: "47", properties: ["47": "literal", "slash": ]}
parse:   product: {name: "2", properties: ["2": "address":"array":"address":"array":"character"]}
parse: instruction: length
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"address":"array":"character", "deref": ]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: index
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"address":"array":"character", "deref": ]}
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   product: {name: "4", properties: ["4": "address":"array":"character"]}
parse: instruction: index
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"address":"array":"character", "deref": ]}
parse:   ingredient: {name: "1", properties: ["1": "literal"]}
parse:   product: {name: "5", properties: ["5": "address":"array":"character"]}
parse: instruction: index
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"address":"array":"character", "deref": ]}
parse:   ingredient: {name: "2", properties: ["2": "literal"]}
parse:   product: {name: "6", properties: ["6": "address":"array":"character"]}
parse: instruction: index
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"address":"array":"character", "deref": ]}
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse:   product: {name: "7", properties: ["7": "address":"array":"character"]}
parse: instruction: copy
parse:   ingredient: {name: "4", properties: ["4": "address":"array":"character", "deref": ]}
parse:   product: {name: "10", properties: ["10": "array":"character"]}
parse: instruction: copy
parse:   ingredient: {name: "5", properties: ["5": "address":"array":"character", "deref": ]}
parse:   product: {name: "20", properties: ["20": "array":"character"]}
parse: instruction: copy
parse:   ingredient: {name: "6", properties: ["6": "address":"array":"character", "deref": ]}
parse:   product: {name: "30", properties: ["30": "array":"character"]}
parse: instruction: copy
parse:   ingredient: {name: "7", properties: ["7": "address":"array":"character", "deref": ]}
parse:   product: {name: "40", properties: ["40": "array":"character"]}
after-brace: recipe run1001
after-brace: new ...
after-brace: split ...
after-brace: length ...
after-brace: index ...
after-brace: index ...
after-brace: index ...
after-brace: index ...
after-brace: copy ...
after-brace: copy ...
after-brace: copy ...
after-brace: copy ...
 101 run: 1:address:array:character <- new [a/b//c]
9999 mem: storing 1000 in location 1
 101 run: 2:address:array:address:array:character <- split 1:address:array:character, 47:literal/slash
9999 mem: location 1 is 1000
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 13
9999 mem: new alloc: 1007
 102 run: s:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1009
 102 run: delim:character <- next-ingredient 
9999 mem: storing 47 in location 1010
 102 run: len:number <- length s:address:array:character/deref
9999 mem: location 1009 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1009 is 1000
9999 mem: storing 6 in location 1011
 102 run: empty?:boolean <- equal len:number, 0:literal
9999 mem: location 1011 is 6
9999 mem: storing 0 in location 1012
 102 run: break-unless empty?:boolean, 
9999 mem: location 1012 is 0
9999 run: jumping to instruction 9
 102 run: count:number <- copy 1:literal
9999 mem: storing 1 in location 1014
 102 run: idx:number <- copy 0:literal
9999 mem: storing 0 in location 1015
 102 run: idx:number <- find-next s:address:array:character, delim:character, idx:number
9999 mem: location 1009 is 1000
9999 mem: location 1010 is 47
9999 mem: location 1015 is 0
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1021
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1023
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1024
 103 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1025
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1023 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1023 is 1000
9999 mem: storing 6 in location 1026
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1025 is 0
9999 mem: location 1026 is 6
9999 mem: storing 0 in location 1027
 103 run: break-if eof?:boolean, 
9999 mem: location 1027 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1023 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1025 is 0
9999 mem: location 1023 is 1000
9999 mem: location 1025 is 0
9999 run: address to copy is 1001
9999 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1028
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1028 is 97
9999 mem: location 1024 is 47
9999 mem: storing 0 in location 1029
 103 run: break-if found?:boolean, 
9999 mem: location 1029 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1025 is 0
9999 mem: storing 1 in location 1025
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1025 is 1
9999 mem: location 1026 is 6
9999 mem: storing 0 in location 1027
 103 run: break-if eof?:boolean, 
9999 mem: location 1027 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1023 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1025 is 1
9999 mem: location 1023 is 1000
9999 mem: location 1025 is 1
9999 run: address to copy is 1002
9999 run: its type is character
9999 mem: location 1002 is 47
9999 mem: storing 47 in location 1028
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1028 is 47
9999 mem: location 1024 is 47
9999 mem: storing 1 in location 1029
 103 run: break-if found?:boolean, 
9999 mem: location 1029 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1025 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 1015
 102 run: done?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1015 is 1
9999 mem: location 1011 is 6
9999 mem: storing 0 in location 1016
 102 run: break-if done?:boolean, 
9999 mem: location 1016 is 0
9999 run: jump-if fell through
 102 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1015 is 1
9999 mem: storing 2 in location 1015
 102 run: count:number <- add count:number, 1:literal
9999 mem: location 1014 is 1
9999 mem: storing 2 in location 1014
 102 run: loop 
9999 run: jumping to instruction 13
 102 run: idx:number <- find-next s:address:array:character, delim:character, idx:number
9999 mem: location 1009 is 1000
9999 mem: location 1010 is 47
9999 mem: location 1015 is 2
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1030
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1032
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1033
 103 run: idx:number <- next-ingredient 
9999 mem: storing 2 in location 1034
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1032 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1032 is 1000
9999 mem: storing 6 in location 1035
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1034 is 2
9999 mem: location 1035 is 6
9999 mem: storing 0 in location 1036
 103 run: break-if eof?:boolean, 
9999 mem: location 1036 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1032 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1034 is 2
9999 mem: location 1032 is 1000
9999 mem: location 1034 is 2
9999 run: address to copy is 1003
9999 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1037
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1037 is 98
9999 mem: location 1033 is 47
9999 mem: storing 0 in location 1038
 103 run: break-if found?:boolean, 
9999 mem: location 1038 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1034 is 2
9999 mem: storing 3 in location 1034
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1034 is 3
9999 mem: location 1035 is 6
9999 mem: storing 0 in location 1036
 103 run: break-if eof?:boolean, 
9999 mem: location 1036 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1032 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1034 is 3
9999 mem: location 1032 is 1000
9999 mem: location 1034 is 3
9999 run: address to copy is 1004
9999 run: its type is character
9999 mem: location 1004 is 47
9999 mem: storing 47 in location 1037
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1037 is 47
9999 mem: location 1033 is 47
9999 mem: storing 1 in location 1038
 103 run: break-if found?:boolean, 
9999 mem: location 1038 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1034 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 1015
 102 run: done?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1015 is 3
9999 mem: location 1011 is 6
9999 mem: storing 0 in location 1016
 102 run: break-if done?:boolean, 
9999 mem: location 1016 is 0
9999 run: jump-if fell through
 102 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1015 is 3
9999 mem: storing 4 in location 1015
 102 run: count:number <- add count:number, 1:literal
9999 mem: location 1014 is 2
9999 mem: storing 3 in location 1014
 102 run: loop 
9999 run: jumping to instruction 13
 102 run: idx:number <- find-next s:address:array:character, delim:character, idx:number
9999 mem: location 1009 is 1000
9999 mem: location 1010 is 47
9999 mem: location 1015 is 4
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1039
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1041
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1042
 103 run: idx:number <- next-ingredient 
9999 mem: storing 4 in location 1043
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1041 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1041 is 1000
9999 mem: storing 6 in location 1044
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1043 is 4
9999 mem: location 1044 is 6
9999 mem: storing 0 in location 1045
 103 run: break-if eof?:boolean, 
9999 mem: location 1045 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1041 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1043 is 4
9999 mem: location 1041 is 1000
9999 mem: location 1043 is 4
9999 run: address to copy is 1005
9999 run: its type is character
9999 mem: location 1005 is 47
9999 mem: storing 47 in location 1046
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1046 is 47
9999 mem: location 1042 is 47
9999 mem: storing 1 in location 1047
 103 run: break-if found?:boolean, 
9999 mem: location 1047 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1043 is 4
9999 run: result 0 is 4
9999 mem: storing 4 in location 1015
 102 run: done?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1015 is 4
9999 mem: location 1011 is 6
9999 mem: storing 0 in location 1016
 102 run: break-if done?:boolean, 
9999 mem: location 1016 is 0
9999 run: jump-if fell through
 102 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1015 is 4
9999 mem: storing 5 in location 1015
 102 run: count:number <- add count:number, 1:literal
9999 mem: location 1014 is 3
9999 mem: storing 4 in location 1014
 102 run: loop 
9999 run: jumping to instruction 13
 102 run: idx:number <- find-next s:address:array:character, delim:character, idx:number
9999 mem: location 1009 is 1000
9999 mem: location 1010 is 47
9999 mem: location 1015 is 5
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1048
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1050
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1051
 103 run: idx:number <- next-ingredient 
9999 mem: storing 5 in location 1052
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1050 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1050 is 1000
9999 mem: storing 6 in location 1053
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1052 is 5
9999 mem: location 1053 is 6
9999 mem: storing 0 in location 1054
 103 run: break-if eof?:boolean, 
9999 mem: location 1054 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1050 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1052 is 5
9999 mem: location 1050 is 1000
9999 mem: location 1052 is 5
9999 run: address to copy is 1006
9999 run: its type is character
9999 mem: location 1006 is 99
9999 mem: storing 99 in location 1055
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1055 is 99
9999 mem: location 1051 is 47
9999 mem: storing 0 in location 1056
 103 run: break-if found?:boolean, 
9999 mem: location 1056 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1052 is 5
9999 mem: storing 6 in location 1052
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1052 is 6
9999 mem: location 1053 is 6
9999 mem: storing 1 in location 1054
 103 run: break-if eof?:boolean, 
9999 mem: location 1054 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1052 is 6
9999 run: result 0 is 6
9999 mem: storing 6 in location 1015
 102 run: done?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1015 is 6
9999 mem: location 1011 is 6
9999 mem: storing 1 in location 1016
 102 run: break-if done?:boolean, 
9999 mem: location 1016 is 1
9999 run: jumping to instruction 19
 102 run: result:address:array:address:array:character <- new location:type, count:number
9999 mem: location 1014 is 4
9999 mem: array size is 4
9999 mem: new alloc: 1057
9999 mem: storing 1057 in location 1013
 102 run: curr-result:number <- copy 0:literal
9999 mem: storing 0 in location 1017
 102 run: start:number <- copy 0:literal
9999 mem: storing 0 in location 1018
 102 run: done?:boolean <- greater-or-equal start:number, len:number
9999 mem: location 1018 is 0
9999 mem: location 1011 is 6
9999 mem: storing 0 in location 1016
 102 run: break-if done?:boolean, 
9999 mem: location 1016 is 0
9999 run: jump-if fell through
 102 run: end:number <- find-next s:address:array:character, delim:character, start:number
9999 mem: location 1009 is 1000
9999 mem: location 1010 is 47
9999 mem: location 1018 is 0
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1062
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1064
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1065
 103 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1066
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1064 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1064 is 1000
9999 mem: storing 6 in location 1067
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1066 is 0
9999 mem: location 1067 is 6
9999 mem: storing 0 in location 1068
 103 run: break-if eof?:boolean, 
9999 mem: location 1068 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1064 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1066 is 0
9999 mem: location 1064 is 1000
9999 mem: location 1066 is 0
9999 run: address to copy is 1001
9999 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1069
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1069 is 97
9999 mem: location 1065 is 47
9999 mem: storing 0 in location 1070
 103 run: break-if found?:boolean, 
9999 mem: location 1070 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1066 is 0
9999 mem: storing 1 in location 1066
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1066 is 1
9999 mem: location 1067 is 6
9999 mem: storing 0 in location 1068
 103 run: break-if eof?:boolean, 
9999 mem: location 1068 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1064 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1066 is 1
9999 mem: location 1064 is 1000
9999 mem: location 1066 is 1
9999 run: address to copy is 1002
9999 run: its type is character
9999 mem: location 1002 is 47
9999 mem: storing 47 in location 1069
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1069 is 47
9999 mem: location 1065 is 47
9999 mem: storing 1 in location 1070
 103 run: break-if found?:boolean, 
9999 mem: location 1070 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1066 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 1019
 102 run: dest:address:address:array:character <- index-address result:address:array:address:array:character/deref, curr-result:number
9999 mem: location 1013 is 1057
9999 mem: location 1057 is 4
9999 mem: location 1058 is 0
9999 mem: location 1059 is 0
9999 mem: location 1060 is 0
9999 mem: location 1061 is 0
9999 mem: location 1017 is 0
9999 mem: location 1013 is 1057
9999 mem: location 1017 is 0
9999 mem: storing 1058 in location 1020
 102 run: dest:address:address:array:character/deref <- string-copy s:address:array:character, start:number, end:number
9999 mem: location 1009 is 1000
9999 mem: location 1018 is 0
9999 mem: location 1019 is 1
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1071
 103 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1073
 103 run: start:number <- next-ingredient 
9999 mem: storing 0 in location 1074
 103 run: end:number <- next-ingredient 
9999 mem: storing 1 in location 1075
 103 run: len:number <- length buf:address:array:character/deref
9999 mem: location 1073 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1073 is 1000
9999 mem: storing 6 in location 1076
 103 run: end:number <- min len:number, end:number
9999 mem: location 1076 is 6
9999 mem: location 1075 is 1
 104 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1083
 104 run: x:number <- next-ingredient 
9999 mem: storing 6 in location 1085
 104 run: y:number <- next-ingredient 
9999 mem: storing 1 in location 1086
 104 run: return-x?:boolean <- lesser-than x:number, y:number
9999 mem: location 1085 is 6
9999 mem: location 1086 is 1
9999 mem: storing 0 in location 1087
 104 run: break-if return-x?:boolean, 
9999 mem: location 1087 is 0
9999 run: jump-if fell through
 104 run: reply y:number
9999 mem: location 1086 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 1075
 103 run: len:number <- subtract end:number, start:number
9999 mem: location 1075 is 1
9999 mem: location 1074 is 0
9999 mem: storing 1 in location 1076
 103 run: result:address:array:character <- new character:type, len:number
9999 mem: location 1076 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1088
9999 mem: storing 1088 in location 1077
 103 run: src-idx:number <- copy start:number
9999 mem: location 1074 is 0
9999 mem: storing 0 in location 1078
 103 run: dest-idx:number <- copy 0:literal
9999 mem: storing 0 in location 1079
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1078 is 0
9999 mem: location 1075 is 1
9999 mem: storing 0 in location 1080
 103 run: break-if done?:boolean, 
9999 mem: location 1080 is 0
9999 run: jump-if fell through
 103 run: src:character <- index buf:address:array:character/deref, src-idx:number
9999 mem: location 1073 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1078 is 0
9999 mem: location 1073 is 1000
9999 mem: location 1078 is 0
9999 run: address to copy is 1001
9999 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1081
 103 run: dest:address:character <- index-address result:address:array:character/deref, dest-idx:number
9999 mem: location 1077 is 1088
9999 mem: location 1088 is 1
9999 mem: location 1089 is 0
9999 mem: location 1079 is 0
9999 mem: location 1077 is 1088
9999 mem: location 1079 is 0
9999 mem: storing 1089 in location 1082
 103 run: dest:address:character/deref <- copy src:character
9999 mem: location 1081 is 97
9999 mem: location 1082 is 1089
9999 mem: storing 97 in location 1089
 103 run: src-idx:number <- add src-idx:number, 1:literal
9999 mem: location 1078 is 0
9999 mem: storing 1 in location 1078
 103 run: dest-idx:number <- add dest-idx:number, 1:literal
9999 mem: location 1079 is 0
9999 mem: storing 1 in location 1079
 103 run: loop 
9999 run: jumping to instruction 11
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1078 is 1
9999 mem: location 1075 is 1
9999 mem: storing 1 in location 1080
 103 run: break-if done?:boolean, 
9999 mem: location 1080 is 1
9999 run: jumping to instruction 19
 103 run: reply result:address:array:character
9999 mem: location 1077 is 1088
9999 run: result 0 is 1088
9999 mem: location 1020 is 1058
9999 mem: storing 1088 in location 1058
 102 run: start:number <- add end:number, 1:literal
9999 mem: location 1019 is 1
9999 mem: storing 2 in location 1018
 102 run: curr-result:number <- add curr-result:number, 1:literal
9999 mem: location 1017 is 0
9999 mem: storing 1 in location 1017
 102 run: loop 
9999 run: jumping to instruction 24
 102 run: done?:boolean <- greater-or-equal start:number, len:number
9999 mem: location 1018 is 2
9999 mem: location 1011 is 6
9999 mem: storing 0 in location 1016
 102 run: break-if done?:boolean, 
9999 mem: location 1016 is 0
9999 run: jump-if fell through
 102 run: end:number <- find-next s:address:array:character, delim:character, start:number
9999 mem: location 1009 is 1000
9999 mem: location 1010 is 47
9999 mem: location 1018 is 2
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1090
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1092
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1093
 103 run: idx:number <- next-ingredient 
9999 mem: storing 2 in location 1094
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1092 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1092 is 1000
9999 mem: storing 6 in location 1095
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1094 is 2
9999 mem: location 1095 is 6
9999 mem: storing 0 in location 1096
 103 run: break-if eof?:boolean, 
9999 mem: location 1096 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1092 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1094 is 2
9999 mem: location 1092 is 1000
9999 mem: location 1094 is 2
9999 run: address to copy is 1003
9999 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1097
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1097 is 98
9999 mem: location 1093 is 47
9999 mem: storing 0 in location 1098
 103 run: break-if found?:boolean, 
9999 mem: location 1098 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1094 is 2
9999 mem: storing 3 in location 1094
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1094 is 3
9999 mem: location 1095 is 6
9999 mem: storing 0 in location 1096
 103 run: break-if eof?:boolean, 
9999 mem: location 1096 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1092 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1094 is 3
9999 mem: location 1092 is 1000
9999 mem: location 1094 is 3
9999 run: address to copy is 1004
9999 run: its type is character
9999 mem: location 1004 is 47
9999 mem: storing 47 in location 1097
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1097 is 47
9999 mem: location 1093 is 47
9999 mem: storing 1 in location 1098
 103 run: break-if found?:boolean, 
9999 mem: location 1098 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1094 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 1019
 102 run: dest:address:address:array:character <- index-address result:address:array:address:array:character/deref, curr-result:number
9999 mem: location 1013 is 1057
9999 mem: location 1057 is 4
9999 mem: location 1058 is 1088
9999 mem: location 1059 is 0
9999 mem: location 1060 is 0
9999 mem: location 1061 is 0
9999 mem: location 1017 is 1
9999 mem: location 1013 is 1057
9999 mem: location 1017 is 1
9999 mem: storing 1059 in location 1020
 102 run: dest:address:address:array:character/deref <- string-copy s:address:array:character, start:number, end:number
9999 mem: location 1009 is 1000
9999 mem: location 1018 is 2
9999 mem: location 1019 is 3
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1099
 103 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1101
 103 run: start:number <- next-ingredient 
9999 mem: storing 2 in location 1102
 103 run: end:number <- next-ingredient 
9999 mem: storing 3 in location 1103
 103 run: len:number <- length buf:address:array:character/deref
9999 mem: location 1101 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1101 is 1000
9999 mem: storing 6 in location 1104
 103 run: end:number <- min len:number, end:number
9999 mem: location 1104 is 6
9999 mem: location 1103 is 3
 104 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1111
 104 run: x:number <- next-ingredient 
9999 mem: storing 6 in location 1113
 104 run: y:number <- next-ingredient 
9999 mem: storing 3 in location 1114
 104 run: return-x?:boolean <- lesser-than x:number, y:number
9999 mem: location 1113 is 6
9999 mem: location 1114 is 3
9999 mem: storing 0 in location 1115
 104 run: break-if return-x?:boolean, 
9999 mem: location 1115 is 0
9999 run: jump-if fell through
 104 run: reply y:number
9999 mem: location 1114 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 1103
 103 run: len:number <- subtract end:number, start:number
9999 mem: location 1103 is 3
9999 mem: location 1102 is 2
9999 mem: storing 1 in location 1104
 103 run: result:address:array:character <- new character:type, len:number
9999 mem: location 1104 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1116
9999 mem: storing 1116 in location 1105
 103 run: src-idx:number <- copy start:number
9999 mem: location 1102 is 2
9999 mem: storing 2 in location 1106
 103 run: dest-idx:number <- copy 0:literal
9999 mem: storing 0 in location 1107
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1106 is 2
9999 mem: location 1103 is 3
9999 mem: storing 0 in location 1108
 103 run: break-if done?:boolean, 
9999 mem: location 1108 is 0
9999 run: jump-if fell through
 103 run: src:character <- index buf:address:array:character/deref, src-idx:number
9999 mem: location 1101 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1106 is 2
9999 mem: location 1101 is 1000
9999 mem: location 1106 is 2
9999 run: address to copy is 1003
9999 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1109
 103 run: dest:address:character <- index-address result:address:array:character/deref, dest-idx:number
9999 mem: location 1105 is 1116
9999 mem: location 1116 is 1
9999 mem: location 1117 is 0
9999 mem: location 1107 is 0
9999 mem: location 1105 is 1116
9999 mem: location 1107 is 0
9999 mem: storing 1117 in location 1110
 103 run: dest:address:character/deref <- copy src:character
9999 mem: location 1109 is 98
9999 mem: location 1110 is 1117
9999 mem: storing 98 in location 1117
 103 run: src-idx:number <- add src-idx:number, 1:literal
9999 mem: location 1106 is 2
9999 mem: storing 3 in location 1106
 103 run: dest-idx:number <- add dest-idx:number, 1:literal
9999 mem: location 1107 is 0
9999 mem: storing 1 in location 1107
 103 run: loop 
9999 run: jumping to instruction 11
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1106 is 3
9999 mem: location 1103 is 3
9999 mem: storing 1 in location 1108
 103 run: break-if done?:boolean, 
9999 mem: location 1108 is 1
9999 run: jumping to instruction 19
 103 run: reply result:address:array:character
9999 mem: location 1105 is 1116
9999 run: result 0 is 1116
9999 mem: location 1020 is 1059
9999 mem: storing 1116 in location 1059
 102 run: start:number <- add end:number, 1:literal
9999 mem: location 1019 is 3
9999 mem: storing 4 in location 1018
 102 run: curr-result:number <- add curr-result:number, 1:literal
9999 mem: location 1017 is 1
9999 mem: storing 2 in location 1017
 102 run: loop 
9999 run: jumping to instruction 24
 102 run: done?:boolean <- greater-or-equal start:number, len:number
9999 mem: location 1018 is 4
9999 mem: location 1011 is 6
9999 mem: storing 0 in location 1016
 102 run: break-if done?:boolean, 
9999 mem: location 1016 is 0
9999 run: jump-if fell through
 102 run: end:number <- find-next s:address:array:character, delim:character, start:number
9999 mem: location 1009 is 1000
9999 mem: location 1010 is 47
9999 mem: location 1018 is 4
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1118
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1120
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1121
 103 run: idx:number <- next-ingredient 
9999 mem: storing 4 in location 1122
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1120 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1120 is 1000
9999 mem: storing 6 in location 1123
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1122 is 4
9999 mem: location 1123 is 6
9999 mem: storing 0 in location 1124
 103 run: break-if eof?:boolean, 
9999 mem: location 1124 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1120 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1122 is 4
9999 mem: location 1120 is 1000
9999 mem: location 1122 is 4
9999 run: address to copy is 1005
9999 run: its type is character
9999 mem: location 1005 is 47
9999 mem: storing 47 in location 1125
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1125 is 47
9999 mem: location 1121 is 47
9999 mem: storing 1 in location 1126
 103 run: break-if found?:boolean, 
9999 mem: location 1126 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1122 is 4
9999 run: result 0 is 4
9999 mem: storing 4 in location 1019
 102 run: dest:address:address:array:character <- index-address result:address:array:address:array:character/deref, curr-result:number
9999 mem: location 1013 is 1057
9999 mem: location 1057 is 4
9999 mem: location 1058 is 1088
9999 mem: location 1059 is 1116
9999 mem: location 1060 is 0
9999 mem: location 1061 is 0
9999 mem: location 1017 is 2
9999 mem: location 1013 is 1057
9999 mem: location 1017 is 2
9999 mem: storing 1060 in location 1020
 102 run: dest:address:address:array:character/deref <- string-copy s:address:array:character, start:number, end:number
9999 mem: location 1009 is 1000
9999 mem: location 1018 is 4
9999 mem: location 1019 is 4
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1127
 103 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1129
 103 run: start:number <- next-ingredient 
9999 mem: storing 4 in location 1130
 103 run: end:number <- next-ingredient 
9999 mem: storing 4 in location 1131
 103 run: len:number <- length buf:address:array:character/deref
9999 mem: location 1129 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1129 is 1000
9999 mem: storing 6 in location 1132
 103 run: end:number <- min len:number, end:number
9999 mem: location 1132 is 6
9999 mem: location 1131 is 4
 104 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1139
 104 run: x:number <- next-ingredient 
9999 mem: storing 6 in location 1141
 104 run: y:number <- next-ingredient 
9999 mem: storing 4 in location 1142
 104 run: return-x?:boolean <- lesser-than x:number, y:number
9999 mem: location 1141 is 6
9999 mem: location 1142 is 4
9999 mem: storing 0 in location 1143
 104 run: break-if return-x?:boolean, 
9999 mem: location 1143 is 0
9999 run: jump-if fell through
 104 run: reply y:number
9999 mem: location 1142 is 4
9999 run: result 0 is 4
9999 mem: storing 4 in location 1131
 103 run: len:number <- subtract end:number, start:number
9999 mem: location 1131 is 4
9999 mem: location 1130 is 4
9999 mem: storing 0 in location 1132
 103 run: result:address:array:character <- new character:type, len:number
9999 mem: location 1132 is 0
9999 mem: array size is 0
9999 mem: new alloc: 1144
9999 mem: storing 1144 in location 1133
 103 run: src-idx:number <- copy start:number
9999 mem: location 1130 is 4
9999 mem: storing 4 in location 1134
 103 run: dest-idx:number <- copy 0:literal
9999 mem: storing 0 in location 1135
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1134 is 4
9999 mem: location 1131 is 4
9999 mem: storing 1 in location 1136
 103 run: break-if done?:boolean, 
9999 mem: location 1136 is 1
9999 run: jumping to instruction 19
 103 run: reply result:address:array:character
9999 mem: location 1133 is 1144
9999 run: result 0 is 1144
9999 mem: location 1020 is 1060
9999 mem: storing 1144 in location 1060
 102 run: start:number <- add end:number, 1:literal
9999 mem: location 1019 is 4
9999 mem: storing 5 in location 1018
 102 run: curr-result:number <- add curr-result:number, 1:literal
9999 mem: location 1017 is 2
9999 mem: storing 3 in location 1017
 102 run: loop 
9999 run: jumping to instruction 24
 102 run: done?:boolean <- greater-or-equal start:number, len:number
9999 mem: location 1018 is 5
9999 mem: location 1011 is 6
9999 mem: storing 0 in location 1016
 102 run: break-if done?:boolean, 
9999 mem: location 1016 is 0
9999 run: jump-if fell through
 102 run: end:number <- find-next s:address:array:character, delim:character, start:number
9999 mem: location 1009 is 1000
9999 mem: location 1010 is 47
9999 mem: location 1018 is 5
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1145
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1147
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1148
 103 run: idx:number <- next-ingredient 
9999 mem: storing 5 in location 1149
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1147 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1147 is 1000
9999 mem: storing 6 in location 1150
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1149 is 5
9999 mem: location 1150 is 6
9999 mem: storing 0 in location 1151
 103 run: break-if eof?:boolean, 
9999 mem: location 1151 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1147 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1149 is 5
9999 mem: location 1147 is 1000
9999 mem: location 1149 is 5
9999 run: address to copy is 1006
9999 run: its type is character
9999 mem: location 1006 is 99
9999 mem: storing 99 in location 1152
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1152 is 99
9999 mem: location 1148 is 47
9999 mem: storing 0 in location 1153
 103 run: break-if found?:boolean, 
9999 mem: location 1153 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1149 is 5
9999 mem: storing 6 in location 1149
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1149 is 6
9999 mem: location 1150 is 6
9999 mem: storing 1 in location 1151
 103 run: break-if eof?:boolean, 
9999 mem: location 1151 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1149 is 6
9999 run: result 0 is 6
9999 mem: storing 6 in location 1019
 102 run: dest:address:address:array:character <- index-address result:address:array:address:array:character/deref, curr-result:number
9999 mem: location 1013 is 1057
9999 mem: location 1057 is 4
9999 mem: location 1058 is 1088
9999 mem: location 1059 is 1116
9999 mem: location 1060 is 1144
9999 mem: location 1061 is 0
9999 mem: location 1017 is 3
9999 mem: location 1013 is 1057
9999 mem: location 1017 is 3
9999 mem: storing 1061 in location 1020
 102 run: dest:address:address:array:character/deref <- string-copy s:address:array:character, start:number, end:number
9999 mem: location 1009 is 1000
9999 mem: location 1018 is 5
9999 mem: location 1019 is 6
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1154
 103 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1156
 103 run: start:number <- next-ingredient 
9999 mem: storing 5 in location 1157
 103 run: end:number <- next-ingredient 
9999 mem: storing 6 in location 1158
 103 run: len:number <- length buf:address:array:character/deref
9999 mem: location 1156 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1156 is 1000
9999 mem: storing 6 in location 1159
 103 run: end:number <- min len:number, end:number
9999 mem: location 1159 is 6
9999 mem: location 1158 is 6
 104 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1166
 104 run: x:number <- next-ingredient 
9999 mem: storing 6 in location 1168
 104 run: y:number <- next-ingredient 
9999 mem: storing 6 in location 1169
 104 run: return-x?:boolean <- lesser-than x:number, y:number
9999 mem: location 1168 is 6
9999 mem: location 1169 is 6
9999 mem: storing 0 in location 1170
 104 run: break-if return-x?:boolean, 
9999 mem: location 1170 is 0
9999 run: jump-if fell through
 104 run: reply y:number
9999 mem: location 1169 is 6
9999 run: result 0 is 6
9999 mem: storing 6 in location 1158
 103 run: len:number <- subtract end:number, start:number
9999 mem: location 1158 is 6
9999 mem: location 1157 is 5
9999 mem: storing 1 in location 1159
 103 run: result:address:array:character <- new character:type, len:number
9999 mem: location 1159 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1171
9999 mem: storing 1171 in location 1160
 103 run: src-idx:number <- copy start:number
9999 mem: location 1157 is 5
9999 mem: storing 5 in location 1161
 103 run: dest-idx:number <- copy 0:literal
9999 mem: storing 0 in location 1162
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1161 is 5
9999 mem: location 1158 is 6
9999 mem: storing 0 in location 1163
 103 run: break-if done?:boolean, 
9999 mem: location 1163 is 0
9999 run: jump-if fell through
 103 run: src:character <- index buf:address:array:character/deref, src-idx:number
9999 mem: location 1156 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 47
9999 mem: location 1006 is 99
9999 mem: location 1161 is 5
9999 mem: location 1156 is 1000
9999 mem: location 1161 is 5
9999 run: address to copy is 1006
9999 run: its type is character
9999 mem: location 1006 is 99
9999 mem: storing 99 in location 1164
 103 run: dest:address:character <- index-address result:address:array:character/deref, dest-idx:number
9999 mem: location 1160 is 1171
9999 mem: location 1171 is 1
9999 mem: location 1172 is 0
9999 mem: location 1162 is 0
9999 mem: location 1160 is 1171
9999 mem: location 1162 is 0
9999 mem: storing 1172 in location 1165
 103 run: dest:address:character/deref <- copy src:character
9999 mem: location 1164 is 99
9999 mem: location 1165 is 1172
9999 mem: storing 99 in location 1172
 103 run: src-idx:number <- add src-idx:number, 1:literal
9999 mem: location 1161 is 5
9999 mem: storing 6 in location 1161
 103 run: dest-idx:number <- add dest-idx:number, 1:literal
9999 mem: location 1162 is 0
9999 mem: storing 1 in location 1162
 103 run: loop 
9999 run: jumping to instruction 11
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1161 is 6
9999 mem: location 1158 is 6
9999 mem: storing 1 in location 1163
 103 run: break-if done?:boolean, 
9999 mem: location 1163 is 1
9999 run: jumping to instruction 19
 103 run: reply result:address:array:character
9999 mem: location 1160 is 1171
9999 run: result 0 is 1171
9999 mem: location 1020 is 1061
9999 mem: storing 1171 in location 1061
 102 run: start:number <- add end:number, 1:literal
9999 mem: location 1019 is 6
9999 mem: storing 7 in location 1018
 102 run: curr-result:number <- add curr-result:number, 1:literal
9999 mem: location 1017 is 3
9999 mem: storing 4 in location 1017
 102 run: loop 
9999 run: jumping to instruction 24
 102 run: done?:boolean <- greater-or-equal start:number, len:number
9999 mem: location 1018 is 7
9999 mem: location 1011 is 6
9999 mem: storing 1 in location 1016
 102 run: break-if done?:boolean, 
9999 mem: location 1016 is 1
9999 run: jumping to instruction 32
 102 run: reply result:address:array:address:array:character
9999 mem: location 1013 is 1057
9999 run: result 0 is 1057
9999 mem: storing 1057 in location 2
 101 run: 3:number <- length 2:address:array:address:array:character/deref
9999 mem: location 2 is 1057
9999 mem: location 1057 is 4
9999 mem: location 1058 is 1088
9999 mem: location 1059 is 1116
9999 mem: location 1060 is 1144
9999 mem: location 1061 is 1171
9999 mem: location 2 is 1057
9999 mem: storing 4 in location 3
 101 run: 4:address:array:character <- index 2:address:array:address:array:character/deref, 0:literal
9999 mem: location 2 is 1057
9999 mem: location 1057 is 4
9999 mem: location 1058 is 1088
9999 mem: location 1059 is 1116
9999 mem: location 1060 is 1144
9999 mem: location 1061 is 1171
9999 mem: location 2 is 1057
9999 run: address to copy is 1058
9999 run: its type is address
9999 mem: location 1058 is 1088
9999 mem: storing 1088 in location 4
 101 run: 5:address:array:character <- index 2:address:array:address:array:character/deref, 1:literal
9999 mem: location 2 is 1057
9999 mem: location 1057 is 4
9999 mem: location 1058 is 1088
9999 mem: location 1059 is 1116
9999 mem: location 1060 is 1144
9999 mem: location 1061 is 1171
9999 mem: location 2 is 1057
9999 run: address to copy is 1059
9999 run: its type is address
9999 mem: location 1059 is 1116
9999 mem: storing 1116 in location 5
 101 run: 6:address:array:character <- index 2:address:array:address:array:character/deref, 2:literal
9999 mem: location 2 is 1057
9999 mem: location 1057 is 4
9999 mem: location 1058 is 1088
9999 mem: location 1059 is 1116
9999 mem: location 1060 is 1144
9999 mem: location 1061 is 1171
9999 mem: location 2 is 1057
9999 run: address to copy is 1060
9999 run: its type is address
9999 mem: location 1060 is 1144
9999 mem: storing 1144 in location 6
 101 run: 7:address:array:character <- index 2:address:array:address:array:character/deref, 3:literal
9999 mem: location 2 is 1057
9999 mem: location 1057 is 4
9999 mem: location 1058 is 1088
9999 mem: location 1059 is 1116
9999 mem: location 1060 is 1144
9999 mem: location 1061 is 1171
9999 mem: location 2 is 1057
9999 run: address to copy is 1061
9999 run: its type is address
9999 mem: location 1061 is 1171
9999 mem: storing 1171 in location 7
 101 run: 10:array:character <- copy 4:address:array:character/deref
9999 mem: location 4 is 1088
9999 mem: location 1088 is 1
9999 mem: location 1089 is 97
9999 mem: storing 1 in location 10
9999 mem: storing 97 in location 11
 101 run: 20:array:character <- copy 5:address:array:character/deref
9999 mem: location 5 is 1116
9999 mem: location 1116 is 1
9999 mem: location 1117 is 98
9999 mem: storing 1 in location 20
9999 mem: storing 98 in location 21
 101 run: 30:array:character <- copy 6:address:array:character/deref
9999 mem: location 6 is 1144
9999 mem: location 1144 is 0
9999 mem: storing 0 in location 30
 101 run: 40:array:character <- copy 7:address:array:character/deref
9999 mem: location 7 is 1171
9999 mem: location 1171 is 1
9999 mem: location 1172 is 99
9999 mem: storing 1 in location 40
9999 mem: storing 99 in location 41
 100 run: memory-should-contain [
    3 <- 4  # length of result
    10:string <- [a]
    20:string <- [b]
    30:string <- []
    40:string <- [c]
  ]
9999 run: checking location 3
9999 run: checking string length at 10
9999 run: checking location 11
9999 run: checking string length at 20
9999 run: checking location 21
9999 run: checking string length at 30
9999 run: checking string length at 40
9999 run: checking location 41
