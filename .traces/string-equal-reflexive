parse: instruction: run
parse:   ingredient: {name: "\n    default-space:address:array:location <- new location:type, 30:literal\n    x:address:array:character <- new [abc]\n    3:boolean/raw <- string-equal x:address:array:character, x:address:array:character\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    3 <- 1  # x == x for all x\n  ", properties: [_: "literal-string"]}
after-brace: recipe scenario-string-equal-reflexive
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: scenario-string-equal-reflexive
 101 run: run [
    default-space:address:array:location <- new location:type, 30:literal
    x:address:array:character <- new [abc]
    3:boolean/raw <- string-equal x:address:array:character, x:address:array:character
  ]
parse: instruction: new
parse:   ingredient: {name: "location", properties: ["location": "type"]}
parse:   ingredient: {name: "30", properties: ["30": "literal"]}
parse:   product: {name: "default-space", properties: ["default-space": "address":"array":"location"]}
parse: instruction: new
parse:   ingredient: {name: "abc", properties: [_: "literal-string"]}
parse:   product: {name: "x", properties: ["x": "address":"array":"character"]}
parse: instruction: string-equal
parse:   ingredient: {name: "x", properties: ["x": "address":"array":"character"]}
parse:   ingredient: {name: "x", properties: ["x": "address":"array":"character"]}
parse:   product: {name: "3", properties: ["3": "boolean", "raw": ]}
9999 new: location -> location
name: assign x 1
after-brace: recipe run1001
after-brace: new ...
after-brace: new ...
after-brace: string-equal ...
 101 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1000
 101 run: x:address:array:character <- new [abc]
9999 mem: storing 1031 in location 1002
 101 run: 3:boolean/raw <- string-equal x:address:array:character, x:address:array:character
9999 mem: location 1002 is 1031
9999 mem: location 1002 is 1031
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1035
 102 run: a:address:array:character <- next-ingredient 
9999 mem: storing 1031 in location 1037
 102 run: a-len:number <- length a:address:array:character/deref
9999 mem: location 1037 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 97
9999 mem: location 1033 is 98
9999 mem: location 1034 is 99
9999 mem: location 1037 is 1031
9999 mem: storing 3 in location 1038
 102 run: b:address:array:character <- next-ingredient 
9999 mem: storing 1031 in location 1039
 102 run: b-len:number <- length b:address:array:character/deref
9999 mem: location 1039 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 97
9999 mem: location 1033 is 98
9999 mem: location 1034 is 99
9999 mem: location 1039 is 1031
9999 mem: storing 3 in location 1040
 102 run: trace [string-equal], [comparing lengths]
   1 string-equal: comparing lengths
 102 run: length-equal?:boolean <- equal a-len:number, b-len:number
9999 mem: location 1038 is 3
9999 mem: location 1040 is 3
9999 mem: storing 1 in location 1041
 102 run: break-if length-equal?:boolean, 
9999 mem: location 1041 is 1
9999 run: jumping to instruction 10
 102 run: trace [string-equal], [comparing characters]
   1 string-equal: comparing characters
 102 run: i:number <- copy 0:literal
9999 mem: storing 0 in location 1042
 102 run: done?:boolean <- greater-or-equal i:number, a-len:number
9999 mem: location 1042 is 0
9999 mem: location 1038 is 3
9999 mem: storing 0 in location 1043
 102 run: break-if done?:boolean, 
9999 mem: location 1043 is 0
9999 run: jump-if fell through
 102 run: a2:character <- index a:address:array:character/deref, i:number
9999 mem: location 1037 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 97
9999 mem: location 1033 is 98
9999 mem: location 1034 is 99
9999 mem: location 1042 is 0
9999 mem: location 1037 is 1031
9999 mem: location 1042 is 0
9999 run: address to copy is 1032
9999 run: its type is character
9999 mem: location 1032 is 97
9999 mem: storing 97 in location 1044
 102 run: b2:character <- index b:address:array:character/deref, i:number
9999 mem: location 1039 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 97
9999 mem: location 1033 is 98
9999 mem: location 1034 is 99
9999 mem: location 1042 is 0
9999 mem: location 1039 is 1031
9999 mem: location 1042 is 0
9999 run: address to copy is 1032
9999 run: its type is character
9999 mem: location 1032 is 97
9999 mem: storing 97 in location 1045
 102 run: chars-match?:boolean <- equal a2:character, b2:character
9999 mem: location 1044 is 97
9999 mem: location 1045 is 97
9999 mem: storing 1 in location 1046
 102 run: break-if chars-match?:boolean, 
9999 mem: location 1046 is 1
9999 run: jumping to instruction 22
 102 run: i:number <- add i:number, 1:literal
9999 mem: location 1042 is 0
9999 mem: storing 1 in location 1042
 102 run: loop 
9999 run: jumping to instruction 14
 102 run: done?:boolean <- greater-or-equal i:number, a-len:number
9999 mem: location 1042 is 1
9999 mem: location 1038 is 3
9999 mem: storing 0 in location 1043
 102 run: break-if done?:boolean, 
9999 mem: location 1043 is 0
9999 run: jump-if fell through
 102 run: a2:character <- index a:address:array:character/deref, i:number
9999 mem: location 1037 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 97
9999 mem: location 1033 is 98
9999 mem: location 1034 is 99
9999 mem: location 1042 is 1
9999 mem: location 1037 is 1031
9999 mem: location 1042 is 1
9999 run: address to copy is 1033
9999 run: its type is character
9999 mem: location 1033 is 98
9999 mem: storing 98 in location 1044
 102 run: b2:character <- index b:address:array:character/deref, i:number
9999 mem: location 1039 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 97
9999 mem: location 1033 is 98
9999 mem: location 1034 is 99
9999 mem: location 1042 is 1
9999 mem: location 1039 is 1031
9999 mem: location 1042 is 1
9999 run: address to copy is 1033
9999 run: its type is character
9999 mem: location 1033 is 98
9999 mem: storing 98 in location 1045
 102 run: chars-match?:boolean <- equal a2:character, b2:character
9999 mem: location 1044 is 98
9999 mem: location 1045 is 98
9999 mem: storing 1 in location 1046
 102 run: break-if chars-match?:boolean, 
9999 mem: location 1046 is 1
9999 run: jumping to instruction 22
 102 run: i:number <- add i:number, 1:literal
9999 mem: location 1042 is 1
9999 mem: storing 2 in location 1042
 102 run: loop 
9999 run: jumping to instruction 14
 102 run: done?:boolean <- greater-or-equal i:number, a-len:number
9999 mem: location 1042 is 2
9999 mem: location 1038 is 3
9999 mem: storing 0 in location 1043
 102 run: break-if done?:boolean, 
9999 mem: location 1043 is 0
9999 run: jump-if fell through
 102 run: a2:character <- index a:address:array:character/deref, i:number
9999 mem: location 1037 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 97
9999 mem: location 1033 is 98
9999 mem: location 1034 is 99
9999 mem: location 1042 is 2
9999 mem: location 1037 is 1031
9999 mem: location 1042 is 2
9999 run: address to copy is 1034
9999 run: its type is character
9999 mem: location 1034 is 99
9999 mem: storing 99 in location 1044
 102 run: b2:character <- index b:address:array:character/deref, i:number
9999 mem: location 1039 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 97
9999 mem: location 1033 is 98
9999 mem: location 1034 is 99
9999 mem: location 1042 is 2
9999 mem: location 1039 is 1031
9999 mem: location 1042 is 2
9999 run: address to copy is 1034
9999 run: its type is character
9999 mem: location 1034 is 99
9999 mem: storing 99 in location 1045
 102 run: chars-match?:boolean <- equal a2:character, b2:character
9999 mem: location 1044 is 99
9999 mem: location 1045 is 99
9999 mem: storing 1 in location 1046
 102 run: break-if chars-match?:boolean, 
9999 mem: location 1046 is 1
9999 run: jumping to instruction 22
 102 run: i:number <- add i:number, 1:literal
9999 mem: location 1042 is 2
9999 mem: storing 3 in location 1042
 102 run: loop 
9999 run: jumping to instruction 14
 102 run: done?:boolean <- greater-or-equal i:number, a-len:number
9999 mem: location 1042 is 3
9999 mem: location 1038 is 3
9999 mem: storing 1 in location 1043
 102 run: break-if done?:boolean, 
9999 mem: location 1043 is 1
9999 run: jumping to instruction 25
 102 run: reply 1:literal
9999 run: result 0 is 1
9999 mem: storing 1 in location 3
 100 run: memory-should-contain [
    3 <- 1  # x == x for all x
  ]
9999 run: checking location 3
