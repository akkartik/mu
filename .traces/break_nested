9991 parse: --- defining main
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"1": "number"}
9992 load: after rewriting: 1:number <- copy 0
9993 parse: label: {
9992 load: after rewriting: {
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- copy 0
9993 parse: instruction: break
9993 parse:   number of ingredients: 0
9992 load: after rewriting: break 
9993 parse: label: {
9992 load: after rewriting: {
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- copy 0
9993 parse: label: }
9992 load: after rewriting: }
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"4": "number"}
9992 load: after rewriting: 4:number <- copy 0
9993 parse: label: }
9992 load: after rewriting: }
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- transform braces for recipe main
9993 transform: main: push (open, 1)
9993 transform: main: push (open, 4)
9993 transform: push (close, 6)
9993 transform: push (close, 8)
9992 transform: copy ...
9992 transform: copy ...
9992 transform: jump 4:offset
9992 transform: copy ...
9992 transform: copy ...
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- parsing any uninitialized reagents as integers
