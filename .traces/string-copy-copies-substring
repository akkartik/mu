parse: instruction: run
parse:   ingredient: {name: "\n    1:address:array:character <- new [abc]\n    2:address:array:character <- string-copy 1:address:array:character, 1, 3\n    3:array:character <- copy 2:address:array:character/deref\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    3:string <- [bc]\n  ", properties: [_: "literal-string"]}
after-brace: recipe scenario-string-copy-copies-substring
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: scenario-string-copy-copies-substring
 101 run: run [
    1:address:array:character <- new [abc]
    2:address:array:character <- string-copy 1:address:array:character, 1, 3
    3:array:character <- copy 2:address:array:character/deref
  ]
parse: instruction: new
parse:   ingredient: {name: "abc", properties: [_: "literal-string"]}
parse:   product: {name: "1", properties: ["1": "address":"array":"character"]}
parse: instruction: string-copy
parse:   ingredient: {name: "1", properties: ["1": "address":"array":"character"]}
parse:   ingredient: {name: "1", properties: ["1": "literal"]}
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse:   product: {name: "2", properties: ["2": "address":"array":"character"]}
parse: instruction: copy
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"character", "deref": ]}
parse:   product: {name: "3", properties: ["3": "array":"character"]}
after-brace: recipe run1001
after-brace: new ...
after-brace: string-copy ...
after-brace: copy ...
 101 run: 1:address:array:character <- new [abc]
9999 mem: storing 1000 in location 1
 101 run: 2:address:array:character <- string-copy 1:address:array:character, 1, 3
9999 mem: location 1 is 1000
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1004
 102 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1006
 102 run: start:number <- next-ingredient 
9999 mem: storing 1 in location 1007
 102 run: end:number <- next-ingredient 
9999 mem: storing 3 in location 1008
 102 run: len:number <- length buf:address:array:character/deref
9999 mem: location 1006 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: location 1006 is 1000
9999 mem: storing 3 in location 1009
 102 run: end:number <- min len:number, end:number
9999 mem: location 1009 is 3
9999 mem: location 1008 is 3
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1016
 103 run: x:number <- next-ingredient 
9999 mem: storing 3 in location 1018
 103 run: y:number <- next-ingredient 
9999 mem: storing 3 in location 1019
 103 run: return-x?:boolean <- lesser-than x:number, y:number
9999 mem: location 1018 is 3
9999 mem: location 1019 is 3
9999 mem: storing 0 in location 1020
 103 run: break-if return-x?:boolean, 
9999 mem: location 1020 is 0
9999 run: jump-if fell through
 103 run: reply y:number
9999 mem: location 1019 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 1008
 102 run: len:number <- subtract end:number, start:number
9999 mem: location 1008 is 3
9999 mem: location 1007 is 1
9999 mem: storing 2 in location 1009
 102 run: result:address:array:character <- new character:type, len:number
9999 mem: location 1009 is 2
9999 mem: array size is 2
9999 mem: new alloc: 1021
9999 mem: storing 1021 in location 1010
 102 run: src-idx:number <- copy start:number
9999 mem: location 1007 is 1
9999 mem: storing 1 in location 1011
 102 run: dest-idx:number <- copy 0
9999 mem: storing 0 in location 1012
 102 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1011 is 1
9999 mem: location 1008 is 3
9999 mem: storing 0 in location 1013
 102 run: break-if done?:boolean, 
9999 mem: location 1013 is 0
9999 run: jump-if fell through
 102 run: src:character <- index buf:address:array:character/deref, src-idx:number
9999 mem: location 1006 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: location 1011 is 1
9999 mem: location 1006 is 1000
9999 mem: location 1011 is 1
9999 run: address to copy is 1002
9999 run: its type is character
9999 mem: location 1002 is 98
9999 mem: storing 98 in location 1014
 102 run: dest:address:character <- index-address result:address:array:character/deref, dest-idx:number
9999 mem: location 1010 is 1021
9999 mem: location 1021 is 2
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1012 is 0
9999 mem: location 1010 is 1021
9999 mem: location 1012 is 0
9999 mem: storing 1022 in location 1015
 102 run: dest:address:character/deref <- copy src:character
9999 mem: location 1014 is 98
9999 mem: location 1015 is 1022
9999 mem: storing 98 in location 1022
 102 run: src-idx:number <- add src-idx:number, 1
9999 mem: location 1011 is 1
9999 mem: storing 2 in location 1011
 102 run: dest-idx:number <- add dest-idx:number, 1
9999 mem: location 1012 is 0
9999 mem: storing 1 in location 1012
 102 run: loop 
9999 run: jumping to instruction 11
 102 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1011 is 2
9999 mem: location 1008 is 3
9999 mem: storing 0 in location 1013
 102 run: break-if done?:boolean, 
9999 mem: location 1013 is 0
9999 run: jump-if fell through
 102 run: src:character <- index buf:address:array:character/deref, src-idx:number
9999 mem: location 1006 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: location 1011 is 2
9999 mem: location 1006 is 1000
9999 mem: location 1011 is 2
9999 run: address to copy is 1003
9999 run: its type is character
9999 mem: location 1003 is 99
9999 mem: storing 99 in location 1014
 102 run: dest:address:character <- index-address result:address:array:character/deref, dest-idx:number
9999 mem: location 1010 is 1021
9999 mem: location 1021 is 2
9999 mem: location 1022 is 98
9999 mem: location 1023 is 0
9999 mem: location 1012 is 1
9999 mem: location 1010 is 1021
9999 mem: location 1012 is 1
9999 mem: storing 1023 in location 1015
 102 run: dest:address:character/deref <- copy src:character
9999 mem: location 1014 is 99
9999 mem: location 1015 is 1023
9999 mem: storing 99 in location 1023
 102 run: src-idx:number <- add src-idx:number, 1
9999 mem: location 1011 is 2
9999 mem: storing 3 in location 1011
 102 run: dest-idx:number <- add dest-idx:number, 1
9999 mem: location 1012 is 1
9999 mem: storing 2 in location 1012
 102 run: loop 
9999 run: jumping to instruction 11
 102 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1011 is 3
9999 mem: location 1008 is 3
9999 mem: storing 1 in location 1013
 102 run: break-if done?:boolean, 
9999 mem: location 1013 is 1
9999 run: jumping to instruction 19
 102 run: reply result:address:array:character
9999 mem: location 1010 is 1021
9999 run: result 0 is 1021
9999 mem: storing 1021 in location 2
 101 run: 3:array:character <- copy 2:address:array:character/deref
9999 mem: location 2 is 1021
9999 mem: location 1021 is 2
9999 mem: location 1022 is 98
9999 mem: location 1023 is 99
9999 mem: storing 2 in location 3
9999 mem: storing 98 in location 4
9999 mem: storing 99 in location 5
 100 run: memory-should-contain [
    3:string <- [bc]
  ]
9999 run: checking string length at 3
9999 run: checking location 4
9999 run: checking location 5
