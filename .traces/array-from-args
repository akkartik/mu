parse: instruction: run
parse:   ingredient: {name: "\n    1:address:array:location <- new-array 0:literal, 1:literal, 2:literal\n    2:array:location <- copy 1:address:array:location/deref\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    2 <- 3  # array length\n    3 <- 0\n    4 <- 1\n    5 <- 2\n  ", properties: [_: "literal-string"]}
after-brace: recipe scenario-array-from-args
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: scenario-array-from-args
 101 run: run [
    1:address:array:location <- new-array 0:literal, 1:literal, 2:literal
    2:array:location <- copy 1:address:array:location/deref
  ]
parse: instruction: new-array
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "literal"]}
parse:   ingredient: {name: "2", properties: ["2": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"array":"location"]}
parse: instruction: copy
parse:   ingredient: {name: "1", properties: ["1": "address":"array":"location", "deref": ]}
parse:   product: {name: "2", properties: ["2": "array":"location"]}
after-brace: recipe run1001
after-brace: new-array ...
after-brace: copy ...
 101 run: 1:address:array:location <- new-array 0:literal, 1:literal, 2:literal
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1000
 102 run: capacity:number <- copy 0:literal
9999 mem: storing 0 in location 1002
 102 run: curr-value:location, exists?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1003
9999 mem: storing 1 in location 1004
 102 run: break-unless exists?:boolean, 
9999 mem: location 1004 is 1
9999 run: jump-unless fell through
 102 run: capacity:number <- add capacity:number, 1:literal
9999 mem: location 1002 is 0
9999 mem: storing 1 in location 1002
 102 run: loop 
9999 run: jumping to instruction 3
 102 run: curr-value:location, exists?:boolean <- next-ingredient 
9999 mem: storing 1 in location 1003
9999 mem: storing 1 in location 1004
 102 run: break-unless exists?:boolean, 
9999 mem: location 1004 is 1
9999 run: jump-unless fell through
 102 run: capacity:number <- add capacity:number, 1:literal
9999 mem: location 1002 is 1
9999 mem: storing 2 in location 1002
 102 run: loop 
9999 run: jumping to instruction 3
 102 run: curr-value:location, exists?:boolean <- next-ingredient 
9999 mem: storing 2 in location 1003
9999 mem: storing 1 in location 1004
 102 run: break-unless exists?:boolean, 
9999 mem: location 1004 is 1
9999 run: jump-unless fell through
 102 run: capacity:number <- add capacity:number, 1:literal
9999 mem: location 1002 is 2
9999 mem: storing 3 in location 1002
 102 run: loop 
9999 run: jumping to instruction 3
 102 run: curr-value:location, exists?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
 102 run: break-unless exists?:boolean, 
9999 mem: location 1004 is 0
9999 run: jumping to instruction 7
 102 run: result:address:array:location <- new location:type, capacity:number
9999 mem: location 1002 is 3
9999 mem: array size is 3
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1005
 102 run: rewind-ingredients 
 102 run: i:number <- copy 0:literal
9999 mem: storing 0 in location 1006
 102 run: done?:boolean <- greater-or-equal i:number, capacity:number
9999 mem: location 1006 is 0
9999 mem: location 1002 is 3
9999 mem: storing 0 in location 1007
 102 run: break-if done?:boolean, 
9999 mem: location 1007 is 0
9999 run: jump-if fell through
 102 run: curr-value:location, exists?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1003
9999 mem: storing 1 in location 1004
 102 run: assert exists?:boolean, [error in rewinding ingredients to new-array]
9999 mem: location 1004 is 1
 102 run: tmp:address:location <- index-address result:address:array:location/deref, i:number
9999 mem: location 1005 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1006 is 0
9999 mem: location 1005 is 1009
9999 mem: location 1006 is 0
9999 mem: storing 1010 in location 1008
 102 run: tmp:address:location/deref <- copy curr-value:location
9999 mem: location 1003 is 0
9999 mem: location 1008 is 1010
9999 mem: storing 0 in location 1010
 102 run: i:number <- add i:number, 1:literal
9999 mem: location 1006 is 0
9999 mem: storing 1 in location 1006
 102 run: loop 
9999 run: jumping to instruction 12
 102 run: done?:boolean <- greater-or-equal i:number, capacity:number
9999 mem: location 1006 is 1
9999 mem: location 1002 is 3
9999 mem: storing 0 in location 1007
 102 run: break-if done?:boolean, 
9999 mem: location 1007 is 0
9999 run: jump-if fell through
 102 run: curr-value:location, exists?:boolean <- next-ingredient 
9999 mem: storing 1 in location 1003
9999 mem: storing 1 in location 1004
 102 run: assert exists?:boolean, [error in rewinding ingredients to new-array]
9999 mem: location 1004 is 1
 102 run: tmp:address:location <- index-address result:address:array:location/deref, i:number
9999 mem: location 1005 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1006 is 1
9999 mem: location 1005 is 1009
9999 mem: location 1006 is 1
9999 mem: storing 1011 in location 1008
 102 run: tmp:address:location/deref <- copy curr-value:location
9999 mem: location 1003 is 1
9999 mem: location 1008 is 1011
9999 mem: storing 1 in location 1011
 102 run: i:number <- add i:number, 1:literal
9999 mem: location 1006 is 1
9999 mem: storing 2 in location 1006
 102 run: loop 
9999 run: jumping to instruction 12
 102 run: done?:boolean <- greater-or-equal i:number, capacity:number
9999 mem: location 1006 is 2
9999 mem: location 1002 is 3
9999 mem: storing 0 in location 1007
 102 run: break-if done?:boolean, 
9999 mem: location 1007 is 0
9999 run: jump-if fell through
 102 run: curr-value:location, exists?:boolean <- next-ingredient 
9999 mem: storing 2 in location 1003
9999 mem: storing 1 in location 1004
 102 run: assert exists?:boolean, [error in rewinding ingredients to new-array]
9999 mem: location 1004 is 1
 102 run: tmp:address:location <- index-address result:address:array:location/deref, i:number
9999 mem: location 1005 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1006 is 2
9999 mem: location 1005 is 1009
9999 mem: location 1006 is 2
9999 mem: storing 1012 in location 1008
 102 run: tmp:address:location/deref <- copy curr-value:location
9999 mem: location 1003 is 2
9999 mem: location 1008 is 1012
9999 mem: storing 2 in location 1012
 102 run: i:number <- add i:number, 1:literal
9999 mem: location 1006 is 2
9999 mem: storing 3 in location 1006
 102 run: loop 
9999 run: jumping to instruction 12
 102 run: done?:boolean <- greater-or-equal i:number, capacity:number
9999 mem: location 1006 is 3
9999 mem: location 1002 is 3
9999 mem: storing 1 in location 1007
 102 run: break-if done?:boolean, 
9999 mem: location 1007 is 1
9999 run: jumping to instruction 20
 102 run: reply result:address:array:location
9999 mem: location 1005 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1
 101 run: 2:array:location <- copy 1:address:array:location/deref
9999 mem: location 1 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: storing 3 in location 2
9999 mem: storing 0 in location 3
9999 mem: storing 1 in location 4
9999 mem: storing 2 in location 5
 100 run: memory-should-contain [
    2 <- 3  # array length
    3 <- 0
    4 <- 1
    5 <- 2
  ]
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
