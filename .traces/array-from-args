parse: instruction: run
parse:   ingredient: {name: "
    1:address:array:location <- init-array 0:literal, 1:literal, 2:literal
    2:array:location <- copy 1:address:array:location/deref
  ", properties: ["
    1:address:array:location <- init-array 0:literal, 1:literal, 2:literal
    2:array:location <- copy 1:address:array:location/deref
  ": "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    2 <- 3  # array length
    3 <- 0
    4 <- 1
    5 <- 2
  ", properties: ["
    2 <- 3  # array length
    3 <- 0
    4 <- 1
    5 <- 2
  ": "literal-string"]}
after-brace: recipe array-from-args
after-brace: run ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: array-from-args
run: run [
    1:address:array:location <- init-array 0:literal, 1:literal, 2:literal
    2:array:location <- copy 1:address:array:location/deref
  ]
parse: instruction: init-array
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   ingredient: {name: "1", properties: ["1": "literal"]}
parse:   ingredient: {name: "2", properties: ["2": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"array":"location"]}
parse: instruction: copy
parse:   ingredient: {name: "1", properties: ["1": "address":"array":"location", "deref": ]}
parse:   product: {name: "2", properties: ["2": "array":"location"]}
after-brace: recipe run1001
after-brace: init-array ...
after-brace: copy ...
run: 1:address:array:location <- init-array 0:literal, 1:literal, 2:literal
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1000
run: capacity:number <- copy 0:literal
mem: storing 0 in location 1002
run: curr-value:location, exists?:boolean <- next-ingredient 
mem: storing 0 in location 1003
mem: storing 1 in location 1004
run: break-unless exists?:boolean, 
mem: location 1004 is 1
run: jump-unless fell through
run: capacity:number <- add capacity:number, 1:literal
mem: location 1002 is 0
mem: storing 1 in location 1002
run: loop 
run: jumping to instruction 3
run: curr-value:location, exists?:boolean <- next-ingredient 
mem: storing 1 in location 1003
mem: storing 1 in location 1004
run: break-unless exists?:boolean, 
mem: location 1004 is 1
run: jump-unless fell through
run: capacity:number <- add capacity:number, 1:literal
mem: location 1002 is 1
mem: storing 2 in location 1002
run: loop 
run: jumping to instruction 3
run: curr-value:location, exists?:boolean <- next-ingredient 
mem: storing 2 in location 1003
mem: storing 1 in location 1004
run: break-unless exists?:boolean, 
mem: location 1004 is 1
run: jump-unless fell through
run: capacity:number <- add capacity:number, 1:literal
mem: location 1002 is 2
mem: storing 3 in location 1002
run: loop 
run: jumping to instruction 3
run: curr-value:location, exists?:boolean <- next-ingredient 
mem: storing 0 in location 1003
mem: storing 0 in location 1004
run: break-unless exists?:boolean, 
mem: location 1004 is 0
run: jumping to instruction 7
run: result:address:array:location <- new location:type, capacity:number
mem: location 1002 is 3
mem: array size is 3
mem: new alloc: 1031
mem: storing 1031 in location 1005
run: rewind-ingredients 
run: i:number <- copy 0:literal
mem: storing 0 in location 1006
run: done?:boolean <- greater-or-equal i:number, capacity:number
mem: location 1006 is 0
mem: location 1002 is 3
mem: storing 0 in location 1007
run: break-if done?:boolean, 
mem: location 1007 is 0
run: jump-if fell through
run: curr-value:location, exists?:boolean <- next-ingredient 
mem: storing 0 in location 1003
mem: storing 1 in location 1004
run: assert exists?:boolean, [error in rewinding ingredients to init-array]
mem: location 1004 is 1
run: tmp:address:location <- index-address result:address:array:location/deref, i:number
mem: location 1005 is 1031
mem: location 1031 is 3
mem: location 1032 is 0
mem: location 1033 is 0
mem: location 1034 is 0
mem: location 1006 is 0
mem: location 1005 is 1031
mem: location 1006 is 0
mem: storing 1032 in location 1008
run: tmp:address:location/deref <- copy curr-value:location
mem: location 1003 is 0
mem: location 1008 is 1032
mem: storing 0 in location 1032
run: i:number <- add i:number, 1:literal
mem: location 1006 is 0
mem: storing 1 in location 1006
run: loop 
run: jumping to instruction 12
run: done?:boolean <- greater-or-equal i:number, capacity:number
mem: location 1006 is 1
mem: location 1002 is 3
mem: storing 0 in location 1007
run: break-if done?:boolean, 
mem: location 1007 is 0
run: jump-if fell through
run: curr-value:location, exists?:boolean <- next-ingredient 
mem: storing 1 in location 1003
mem: storing 1 in location 1004
run: assert exists?:boolean, [error in rewinding ingredients to init-array]
mem: location 1004 is 1
run: tmp:address:location <- index-address result:address:array:location/deref, i:number
mem: location 1005 is 1031
mem: location 1031 is 3
mem: location 1032 is 0
mem: location 1033 is 0
mem: location 1034 is 0
mem: location 1006 is 1
mem: location 1005 is 1031
mem: location 1006 is 1
mem: storing 1033 in location 1008
run: tmp:address:location/deref <- copy curr-value:location
mem: location 1003 is 1
mem: location 1008 is 1033
mem: storing 1 in location 1033
run: i:number <- add i:number, 1:literal
mem: location 1006 is 1
mem: storing 2 in location 1006
run: loop 
run: jumping to instruction 12
run: done?:boolean <- greater-or-equal i:number, capacity:number
mem: location 1006 is 2
mem: location 1002 is 3
mem: storing 0 in location 1007
run: break-if done?:boolean, 
mem: location 1007 is 0
run: jump-if fell through
run: curr-value:location, exists?:boolean <- next-ingredient 
mem: storing 2 in location 1003
mem: storing 1 in location 1004
run: assert exists?:boolean, [error in rewinding ingredients to init-array]
mem: location 1004 is 1
run: tmp:address:location <- index-address result:address:array:location/deref, i:number
mem: location 1005 is 1031
mem: location 1031 is 3
mem: location 1032 is 0
mem: location 1033 is 1
mem: location 1034 is 0
mem: location 1006 is 2
mem: location 1005 is 1031
mem: location 1006 is 2
mem: storing 1034 in location 1008
run: tmp:address:location/deref <- copy curr-value:location
mem: location 1003 is 2
mem: location 1008 is 1034
mem: storing 2 in location 1034
run: i:number <- add i:number, 1:literal
mem: location 1006 is 2
mem: storing 3 in location 1006
run: loop 
run: jumping to instruction 12
run: done?:boolean <- greater-or-equal i:number, capacity:number
mem: location 1006 is 3
mem: location 1002 is 3
mem: storing 1 in location 1007
run: break-if done?:boolean, 
mem: location 1007 is 1
run: jumping to instruction 20
run: reply result:address:array:location
mem: location 1005 is 1031
run: result 0 is 1031
mem: storing 1031 in location 1
run: 2:array:location <- copy 1:address:array:location/deref
mem: location 1 is 1031
mem: location 1031 is 3
mem: location 1032 is 0
mem: location 1033 is 1
mem: location 1034 is 2
mem: storing 3 in location 2
mem: storing 0 in location 3
mem: storing 1 in location 4
mem: storing 2 in location 5
run: memory-should-contain [
    2 <- 3  # array length
    3 <- 0
    4 <- 1
    5 <- 2
  ]
run: checking location 2
run: checking location 3
run: checking location 4
run: checking location 5
