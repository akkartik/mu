parse: instruction: run
parse:   ingredient: {name: "
    1:address:array:location <- init-array 0:literal, 1:literal, 2:literal
    2:array:location <- copy 1:address:array:location/deref
  ", value: 0, type: 0, properties: ["
    1:address:array:location <- init-array 0:literal, 1:literal, 2:literal
    2:array:location <- copy 1:address:array:location/deref
  ": "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    2 <- 3  # array length
    3 <- 0
    4 <- 1
    5 <- 2
  ", value: 0, type: 0, properties: ["
    2 <- 3  # array length
    3 <- 0
    4 <- 1
    5 <- 2
  ": "literal-string"]}
after-brace: recipe array-from-args
after-brace: run ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: array-from-args
run: instruction array-from-args/0
run: run/55 {name: "
    1:address:array:location <- init-array 0:literal, 1:literal, 2:literal
    2:array:location <- copy 1:address:array:location/deref
  ", value: 0, type: 0, properties: ["
    1:address:array:location <- init-array 0:literal, 1:literal, 2:literal
    2:array:location <- copy 1:address:array:location/deref
  ": "literal-string"]}
run: ingredient 0 is 
    1:address:array:location <- init-array 0:literal, 1:literal, 2:literal
    2:array:location <- copy 1:address:array:location/deref
  
parse: instruction: init-array
parse:   ingredient: {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
parse:   ingredient: {name: "1", value: 0, type: 0, properties: ["1": "literal"]}
parse:   ingredient: {name: "2", value: 0, type: 0, properties: ["2": "literal"]}
parse:   product: {name: "1", value: 0, type: 2-5-1, properties: ["1": "address":"array":"location"]}
parse: instruction: copy
parse:   ingredient: {name: "1", value: 0, type: 2-5-1, properties: ["1": "address":"array":"location", "deref": ]}
parse:   product: {name: "2", value: 0, type: 5-1, properties: ["2": "array":"location"]}
after-brace: recipe run1001
after-brace: init-array ...
after-brace: copy ...
run: instruction run1001/0
run: {name: "1", value: 1, type: 2-5-1, properties: ["1": "address":"array":"location"]} <- init-array/116 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}, {name: "2", value: 2, type: 0, properties: ["2": "literal"]}
run: ingredient 0 is 0
run: ingredient 1 is 1
run: ingredient 2 is 2
run: instruction init-array/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1000
run: product 0 is default-space
run: instruction init-array/1
run: {name: "capacity", value: 1, type: 1, properties: ["capacity": "number"]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run: ingredient 0 is 0
run: product 0 is capacity
mem: storing 0 in location 1002
run: instruction init-array/3
run: {name: "curr-value", value: 2, type: 1, properties: ["curr-value": "location"]}, {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]} <- next-ingredient/34 
run: product 0 is curr-value
mem: storing 0 in location 1003
run: product 1 is exists?
mem: storing 1 in location 1004
run: instruction init-array/4
run: break-unless/12 {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]}, {name: "", value: 2, type: 0, properties: ["": ]}
run: ingredient 0 is exists?
mem: location 1004 is 1
run: ingredient 1 is 
run: jump-unless fell through
run: instruction init-array/5
run: {name: "capacity", value: 1, type: 1, properties: ["capacity": "number"]} <- add/2 {name: "capacity", value: 1, type: 1, properties: ["capacity": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is capacity
mem: location 1002 is 0
run: ingredient 1 is 1
run: product 0 is capacity
mem: storing 1 in location 1002
run: instruction init-array/6
run: loop/10 {name: "", value: -4, type: 0, properties: ["": ]}
run: ingredient 0 is 
run: jumping to instruction 3
run: instruction init-array/3
run: {name: "curr-value", value: 2, type: 1, properties: ["curr-value": "location"]}, {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]} <- next-ingredient/34 
run: product 0 is curr-value
mem: storing 1 in location 1003
run: product 1 is exists?
mem: storing 1 in location 1004
run: instruction init-array/4
run: break-unless/12 {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]}, {name: "", value: 2, type: 0, properties: ["": ]}
run: ingredient 0 is exists?
mem: location 1004 is 1
run: ingredient 1 is 
run: jump-unless fell through
run: instruction init-array/5
run: {name: "capacity", value: 1, type: 1, properties: ["capacity": "number"]} <- add/2 {name: "capacity", value: 1, type: 1, properties: ["capacity": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is capacity
mem: location 1002 is 1
run: ingredient 1 is 1
run: product 0 is capacity
mem: storing 2 in location 1002
run: instruction init-array/6
run: loop/10 {name: "", value: -4, type: 0, properties: ["": ]}
run: ingredient 0 is 
run: jumping to instruction 3
run: instruction init-array/3
run: {name: "curr-value", value: 2, type: 1, properties: ["curr-value": "location"]}, {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]} <- next-ingredient/34 
run: product 0 is curr-value
mem: storing 2 in location 1003
run: product 1 is exists?
mem: storing 1 in location 1004
run: instruction init-array/4
run: break-unless/12 {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]}, {name: "", value: 2, type: 0, properties: ["": ]}
run: ingredient 0 is exists?
mem: location 1004 is 1
run: ingredient 1 is 
run: jump-unless fell through
run: instruction init-array/5
run: {name: "capacity", value: 1, type: 1, properties: ["capacity": "number"]} <- add/2 {name: "capacity", value: 1, type: 1, properties: ["capacity": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is capacity
mem: location 1002 is 2
run: ingredient 1 is 1
run: product 0 is capacity
mem: storing 3 in location 1002
run: instruction init-array/6
run: loop/10 {name: "", value: -4, type: 0, properties: ["": ]}
run: ingredient 0 is 
run: jumping to instruction 3
run: instruction init-array/3
run: {name: "curr-value", value: 2, type: 1, properties: ["curr-value": "location"]}, {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]} <- next-ingredient/34 
run: product 0 is curr-value
mem: storing 0 in location 1003
run: product 1 is exists?
mem: storing 0 in location 1004
run: instruction init-array/4
run: break-unless/12 {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]}, {name: "", value: 2, type: 0, properties: ["": ]}
run: ingredient 0 is exists?
mem: location 1004 is 0
run: ingredient 1 is 
run: jumping to instruction 7
run: instruction init-array/8
run: {name: "result", value: 4, type: 2-5-1, properties: ["result": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "capacity", value: 1, type: 1, properties: ["capacity": "number"]}
run: ingredient 0 is location
run: ingredient 1 is capacity
mem: location 1002 is 3
mem: array size is 3
mem: new alloc: 1031
run: product 0 is result
mem: storing 1031 in location 1005
run: instruction init-array/9
run: rewind-ingredients/35 
run: instruction init-array/10
run: {name: "i", value: 5, type: 1, properties: ["i": "number"]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run: ingredient 0 is 0
run: product 0 is i
mem: storing 0 in location 1006
run: instruction init-array/12
run: {name: "done?", value: 6, type: 3, properties: ["done?": "boolean"]} <- greater-or-equal/16 {name: "i", value: 5, type: 1, properties: ["i": "number"]}, {name: "capacity", value: 1, type: 1, properties: ["capacity": "number"]}
run: ingredient 0 is i
mem: location 1006 is 0
run: ingredient 1 is capacity
mem: location 1002 is 3
run: product 0 is done?
mem: storing 0 in location 1007
run: instruction init-array/13
run: break-if/11 {name: "done?", value: 6, type: 3, properties: ["done?": "boolean"]}, {name: "", value: 6, type: 0, properties: ["": ]}
run: ingredient 0 is done?
mem: location 1007 is 0
run: ingredient 1 is 
run: jump-if fell through
run: instruction init-array/14
run: {name: "curr-value", value: 2, type: 1, properties: ["curr-value": "location"]}, {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]} <- next-ingredient/34 
run: product 0 is curr-value
mem: storing 0 in location 1003
run: product 1 is exists?
mem: storing 1 in location 1004
run: instruction init-array/15
run: assert/20 {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]}, {name: "error in rewinding ingredients to init-array", value: 0, type: 0, properties: ["error in rewinding ingredients to init-array": "literal-string"]}
run: ingredient 0 is exists?
mem: location 1004 is 1
run: ingredient 1 is error in rewinding ingredients to init-array
run: instruction init-array/16
run: {name: "tmp", value: 7, type: 2-1, properties: ["tmp": "address":"location"]} <- index-address/31 {name: "result", value: 4, type: 2-5-1, properties: ["result": "address":"array":"location", "deref": ]}, {name: "i", value: 5, type: 1, properties: ["i": "number"]}
run: ingredient 0 is result
mem: location 1005 is 1031
mem: location 1031 is 3
mem: location 1032 is 0
mem: location 1033 is 0
mem: location 1034 is 0
run: ingredient 1 is i
mem: location 1006 is 0
mem: location 1005 is 1031
mem: location 1006 is 0
run: product 0 is tmp
mem: storing 1032 in location 1008
run: instruction init-array/17
run: {name: "tmp", value: 7, type: 2-1, properties: ["tmp": "address":"location", "deref": ]} <- copy/1 {name: "curr-value", value: 2, type: 1, properties: ["curr-value": "location"]}
run: ingredient 0 is curr-value
mem: location 1003 is 0
run: product 0 is tmp
mem: location 1008 is 1032
mem: storing 0 in location 1032
run: instruction init-array/18
run: {name: "i", value: 5, type: 1, properties: ["i": "number"]} <- add/2 {name: "i", value: 5, type: 1, properties: ["i": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is i
mem: location 1006 is 0
run: ingredient 1 is 1
run: product 0 is i
mem: storing 1 in location 1006
run: instruction init-array/19
run: loop/10 {name: "", value: -8, type: 0, properties: ["": ]}
run: ingredient 0 is 
run: jumping to instruction 12
run: instruction init-array/12
run: {name: "done?", value: 6, type: 3, properties: ["done?": "boolean"]} <- greater-or-equal/16 {name: "i", value: 5, type: 1, properties: ["i": "number"]}, {name: "capacity", value: 1, type: 1, properties: ["capacity": "number"]}
run: ingredient 0 is i
mem: location 1006 is 1
run: ingredient 1 is capacity
mem: location 1002 is 3
run: product 0 is done?
mem: storing 0 in location 1007
run: instruction init-array/13
run: break-if/11 {name: "done?", value: 6, type: 3, properties: ["done?": "boolean"]}, {name: "", value: 6, type: 0, properties: ["": ]}
run: ingredient 0 is done?
mem: location 1007 is 0
run: ingredient 1 is 
run: jump-if fell through
run: instruction init-array/14
run: {name: "curr-value", value: 2, type: 1, properties: ["curr-value": "location"]}, {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]} <- next-ingredient/34 
run: product 0 is curr-value
mem: storing 1 in location 1003
run: product 1 is exists?
mem: storing 1 in location 1004
run: instruction init-array/15
run: assert/20 {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]}, {name: "error in rewinding ingredients to init-array", value: 0, type: 0, properties: ["error in rewinding ingredients to init-array": "literal-string"]}
run: ingredient 0 is exists?
mem: location 1004 is 1
run: ingredient 1 is error in rewinding ingredients to init-array
run: instruction init-array/16
run: {name: "tmp", value: 7, type: 2-1, properties: ["tmp": "address":"location"]} <- index-address/31 {name: "result", value: 4, type: 2-5-1, properties: ["result": "address":"array":"location", "deref": ]}, {name: "i", value: 5, type: 1, properties: ["i": "number"]}
run: ingredient 0 is result
mem: location 1005 is 1031
mem: location 1031 is 3
mem: location 1032 is 0
mem: location 1033 is 0
mem: location 1034 is 0
run: ingredient 1 is i
mem: location 1006 is 1
mem: location 1005 is 1031
mem: location 1006 is 1
run: product 0 is tmp
mem: storing 1033 in location 1008
run: instruction init-array/17
run: {name: "tmp", value: 7, type: 2-1, properties: ["tmp": "address":"location", "deref": ]} <- copy/1 {name: "curr-value", value: 2, type: 1, properties: ["curr-value": "location"]}
run: ingredient 0 is curr-value
mem: location 1003 is 1
run: product 0 is tmp
mem: location 1008 is 1033
mem: storing 1 in location 1033
run: instruction init-array/18
run: {name: "i", value: 5, type: 1, properties: ["i": "number"]} <- add/2 {name: "i", value: 5, type: 1, properties: ["i": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is i
mem: location 1006 is 1
run: ingredient 1 is 1
run: product 0 is i
mem: storing 2 in location 1006
run: instruction init-array/19
run: loop/10 {name: "", value: -8, type: 0, properties: ["": ]}
run: ingredient 0 is 
run: jumping to instruction 12
run: instruction init-array/12
run: {name: "done?", value: 6, type: 3, properties: ["done?": "boolean"]} <- greater-or-equal/16 {name: "i", value: 5, type: 1, properties: ["i": "number"]}, {name: "capacity", value: 1, type: 1, properties: ["capacity": "number"]}
run: ingredient 0 is i
mem: location 1006 is 2
run: ingredient 1 is capacity
mem: location 1002 is 3
run: product 0 is done?
mem: storing 0 in location 1007
run: instruction init-array/13
run: break-if/11 {name: "done?", value: 6, type: 3, properties: ["done?": "boolean"]}, {name: "", value: 6, type: 0, properties: ["": ]}
run: ingredient 0 is done?
mem: location 1007 is 0
run: ingredient 1 is 
run: jump-if fell through
run: instruction init-array/14
run: {name: "curr-value", value: 2, type: 1, properties: ["curr-value": "location"]}, {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]} <- next-ingredient/34 
run: product 0 is curr-value
mem: storing 2 in location 1003
run: product 1 is exists?
mem: storing 1 in location 1004
run: instruction init-array/15
run: assert/20 {name: "exists?", value: 3, type: 3, properties: ["exists?": "boolean"]}, {name: "error in rewinding ingredients to init-array", value: 0, type: 0, properties: ["error in rewinding ingredients to init-array": "literal-string"]}
run: ingredient 0 is exists?
mem: location 1004 is 1
run: ingredient 1 is error in rewinding ingredients to init-array
run: instruction init-array/16
run: {name: "tmp", value: 7, type: 2-1, properties: ["tmp": "address":"location"]} <- index-address/31 {name: "result", value: 4, type: 2-5-1, properties: ["result": "address":"array":"location", "deref": ]}, {name: "i", value: 5, type: 1, properties: ["i": "number"]}
run: ingredient 0 is result
mem: location 1005 is 1031
mem: location 1031 is 3
mem: location 1032 is 0
mem: location 1033 is 1
mem: location 1034 is 0
run: ingredient 1 is i
mem: location 1006 is 2
mem: location 1005 is 1031
mem: location 1006 is 2
run: product 0 is tmp
mem: storing 1034 in location 1008
run: instruction init-array/17
run: {name: "tmp", value: 7, type: 2-1, properties: ["tmp": "address":"location", "deref": ]} <- copy/1 {name: "curr-value", value: 2, type: 1, properties: ["curr-value": "location"]}
run: ingredient 0 is curr-value
mem: location 1003 is 2
run: product 0 is tmp
mem: location 1008 is 1034
mem: storing 2 in location 1034
run: instruction init-array/18
run: {name: "i", value: 5, type: 1, properties: ["i": "number"]} <- add/2 {name: "i", value: 5, type: 1, properties: ["i": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is i
mem: location 1006 is 2
run: ingredient 1 is 1
run: product 0 is i
mem: storing 3 in location 1006
run: instruction init-array/19
run: loop/10 {name: "", value: -8, type: 0, properties: ["": ]}
run: ingredient 0 is 
run: jumping to instruction 12
run: instruction init-array/12
run: {name: "done?", value: 6, type: 3, properties: ["done?": "boolean"]} <- greater-or-equal/16 {name: "i", value: 5, type: 1, properties: ["i": "number"]}, {name: "capacity", value: 1, type: 1, properties: ["capacity": "number"]}
run: ingredient 0 is i
mem: location 1006 is 3
run: ingredient 1 is capacity
mem: location 1002 is 3
run: product 0 is done?
mem: storing 1 in location 1007
run: instruction init-array/13
run: break-if/11 {name: "done?", value: 6, type: 3, properties: ["done?": "boolean"]}, {name: "", value: 6, type: 0, properties: ["": ]}
run: ingredient 0 is done?
mem: location 1007 is 1
run: ingredient 1 is 
run: jumping to instruction 20
run: instruction init-array/21
run: reply/37 {name: "result", value: 4, type: 2-5-1, properties: ["result": "address":"array":"location"]}
run: ingredient 0 is result
mem: location 1005 is 1031
run: result 0 is 1031
run: product 0 is 1
mem: storing 1031 in location 1
run: instruction run1001/1
run: {name: "2", value: 2, type: 5-1, properties: ["2": "array":"location"]} <- copy/1 {name: "1", value: 1, type: 2-5-1, properties: ["1": "address":"array":"location", "deref": ]}
run: ingredient 0 is 1
mem: location 1 is 1031
mem: location 1031 is 3
mem: location 1032 is 0
mem: location 1033 is 1
mem: location 1034 is 2
run: product 0 is 2
mem: storing 3 in location 2
mem: storing 0 in location 3
mem: storing 1 in location 4
mem: storing 2 in location 5
run: instruction array-from-args/1
run: memory-should-contain/56 {name: "
    2 <- 3  # array length
    3 <- 0
    4 <- 1
    5 <- 2
  ", value: 0, type: 0, properties: ["
    2 <- 3  # array length
    3 <- 0
    4 <- 1
    5 <- 2
  ": "literal-string"]}
run: ingredient 0 is 
    2 <- 3  # array length
    3 <- 0
    4 <- 1
    5 <- 2
  
run: checking location 2
run: checking location 3
run: checking location 4
run: checking location 5
