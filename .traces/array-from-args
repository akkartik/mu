9991 parse: --- defining scenario-array-from-args
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:array:character <- new-array 0, 1, 2\n    2:array:character <- copy *1:address:array:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:array:character <- new-array 0, 1, 2
    2:array:character <- copy *1:address:array:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2 <- 3  # array length\n    3 <- 0\n    4 <- 1\n    5 <- 2\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2 <- 3  # array length
    3 <- 0
    4 <- 1
    5 <- 2
  ]
9999 parse: recipe scenario-array-from-args has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-array-from-args
9991 transform: --- transform braces for recipe scenario-array-from-args
9992 transform: run ...
9992 transform: memory-should-contain ...
9991 transform: --- deduce types for recipe scenario-array-from-args
9991 transform: --- resolve ambiguous calls for recipe scenario-array-from-args
9991 transform: --- collect surrounding spaces for recipe scenario-array-from-args
9991 transform: --- transform names for recipe scenario-array-from-args
9991 transform: --- compute instruction operations for recipe scenario-array-from-args
9991 transform: --- perform checks for recipe scenario-array-from-args
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-array-from-args
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-array-from-args
 102 run: run [
    1:address:array:character <- new-array 0, 1, 2
    2:array:character <- copy *1:address:array:character
  ]
9991 parse: --- defining run1001
9993 parse: instruction: new-array
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   ingredient: {"2": "literal"}
9993 parse:   product: {"1": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:array:character <- new-array 0, 1, 2
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"array" : <"character" : <>>>>, "lookup": <>}
9993 parse:   product: {"2": <"array" : <"character" : <>>>}
9992 load: after rewriting: 2:array:character <- copy *1:address:array:character
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: new-array ...
9992 transform: copy ...
9991 transform: --- deduce types for recipe run1001
9991 transform: --- resolve ambiguous calls for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:array:character <- new-array 0, 1, 2
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1000
 104 run: capacity:number <- copy 0
9999 mem: storing 0 in location 1002
 104 run: curr-value:character, exists?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1003
9999 mem: storing 1 in location 1004
 104 run: jump-unless exists?, 
9999 mem: location 1004 is 1
9998 run: jump-unless fell through
 104 run: capacity <- add capacity, 1
9999 mem: location 1002 is 0
9999 mem: storing 1 in location 1002
 104 run: jump 
9998 run: jumping to instruction 3
 104 run: curr-value:character, exists?:boolean <- next-ingredient 
9999 mem: storing 1 in location 1003
9999 mem: storing 1 in location 1004
 104 run: jump-unless exists?, 
9999 mem: location 1004 is 1
9998 run: jump-unless fell through
 104 run: capacity <- add capacity, 1
9999 mem: location 1002 is 1
9999 mem: storing 2 in location 1002
 104 run: jump 
9998 run: jumping to instruction 3
 104 run: curr-value:character, exists?:boolean <- next-ingredient 
9999 mem: storing 2 in location 1003
9999 mem: storing 1 in location 1004
 104 run: jump-unless exists?, 
9999 mem: location 1004 is 1
9998 run: jump-unless fell through
 104 run: capacity <- add capacity, 1
9999 mem: location 1002 is 2
9999 mem: storing 3 in location 1002
 104 run: jump 
9998 run: jumping to instruction 3
 104 run: curr-value:character, exists?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1003
9999 mem: storing 0 in location 1004
 104 run: jump-unless exists?, 
9999 mem: location 1004 is 0
9998 run: jumping to instruction 7
 104 run: result:address:array:character <- new character:type, capacity
9999 mem: location 1002 is 3
9999 mem: array size is 3
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1005
 104 run: rewind-ingredients 
 104 run: i:number <- copy 0
9999 mem: storing 0 in location 1006
 104 run: done?:boolean <- greater-or-equal i, capacity
9999 mem: location 1006 is 0
9999 mem: location 1002 is 3
9999 mem: storing 0 in location 1007
 104 run: jump-if done?, 
9999 mem: location 1007 is 0
9998 run: jump-if fell through
 104 run: curr-value:character, exists?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1003
9999 mem: storing 1 in location 1004
 104 run: assert exists?, [error in rewinding ingredients to new-array]
9999 mem: location 1004 is 1
 104 run: tmp:address:character <- index-address *result, i
9999 mem: location 1005 is 1009
9999 mem: location 1006 is 0
9999 mem: storing 1010 in location 1008
 104 run: *tmp <- copy curr-value
9999 mem: location 1003 is 0
9999 mem: location 1008 is 1010
9999 mem: storing 0 in location 1010
 104 run: i <- add i, 1
9999 mem: location 1006 is 0
9999 mem: storing 1 in location 1006
 104 run: jump 
9998 run: jumping to instruction 12
 104 run: done?:boolean <- greater-or-equal i, capacity
9999 mem: location 1006 is 1
9999 mem: location 1002 is 3
9999 mem: storing 0 in location 1007
 104 run: jump-if done?, 
9999 mem: location 1007 is 0
9998 run: jump-if fell through
 104 run: curr-value:character, exists?:boolean <- next-ingredient 
9999 mem: storing 1 in location 1003
9999 mem: storing 1 in location 1004
 104 run: assert exists?, [error in rewinding ingredients to new-array]
9999 mem: location 1004 is 1
 104 run: tmp:address:character <- index-address *result, i
9999 mem: location 1005 is 1009
9999 mem: location 1006 is 1
9999 mem: storing 1011 in location 1008
 104 run: *tmp <- copy curr-value
9999 mem: location 1003 is 1
9999 mem: location 1008 is 1011
9999 mem: storing 1 in location 1011
 104 run: i <- add i, 1
9999 mem: location 1006 is 1
9999 mem: storing 2 in location 1006
 104 run: jump 
9998 run: jumping to instruction 12
 104 run: done?:boolean <- greater-or-equal i, capacity
9999 mem: location 1006 is 2
9999 mem: location 1002 is 3
9999 mem: storing 0 in location 1007
 104 run: jump-if done?, 
9999 mem: location 1007 is 0
9998 run: jump-if fell through
 104 run: curr-value:character, exists?:boolean <- next-ingredient 
9999 mem: storing 2 in location 1003
9999 mem: storing 1 in location 1004
 104 run: assert exists?, [error in rewinding ingredients to new-array]
9999 mem: location 1004 is 1
 104 run: tmp:address:character <- index-address *result, i
9999 mem: location 1005 is 1009
9999 mem: location 1006 is 2
9999 mem: storing 1012 in location 1008
 104 run: *tmp <- copy curr-value
9999 mem: location 1003 is 2
9999 mem: location 1008 is 1012
9999 mem: storing 2 in location 1012
 104 run: i <- add i, 1
9999 mem: location 1006 is 2
9999 mem: storing 3 in location 1006
 104 run: jump 
9998 run: jumping to instruction 12
 104 run: done?:boolean <- greater-or-equal i, capacity
9999 mem: location 1006 is 3
9999 mem: location 1002 is 3
9999 mem: storing 1 in location 1007
 104 run: jump-if done?, 
9999 mem: location 1007 is 1
9998 run: jumping to instruction 20
 104 run: reply result
9999 mem: location 1005 is 1009
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1
 103 run: 2:array:character <- copy *1:address:array:character
9999 mem: location 1 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: storing 3 in location 2
9999 mem: storing 0 in location 3
9999 mem: storing 1 in location 4
9999 mem: storing 2 in location 5
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    2 <- 3  # array length
    3 <- 0
    4 <- 1
    5 <- 2
  ]
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 trace: fall-through: exiting scenario-array-from-args; decrementing callstack depth from 1
