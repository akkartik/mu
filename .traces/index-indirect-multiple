c{0: 0 (((1 integer)) <- ((copy)) ((4 literal))) -- nil
c{0: 1 (((2 integer)) <- ((copy)) ((23 literal))) -- nil
c{0: 2 (((3 integer)) <- ((copy)) ((24 literal))) -- nil
c{0: 3 (((4 integer)) <- ((copy)) ((25 literal))) -- nil
c{0: 4 (((5 integer)) <- ((copy)) ((26 literal))) -- nil
c{0: 5 (((6 integer-array-address)) <- ((copy)) ((1 literal))) -- nil
c{0: 6 (((7 integer-array-address-address)) <- ((copy)) ((6 literal))) -- nil
c{0: 7 (((8 integer)) <- ((index)) ((7 integer-array-address-address) (deref) (deref)) ((1 literal))) -- nil
c{1: 0 ✓ (((1 integer)) <- ((copy)) ((4 literal)))
c{1: 1 ✓ (((2 integer)) <- ((copy)) ((23 literal)))
c{1: 2 ✓ (((3 integer)) <- ((copy)) ((24 literal)))
c{1: 3 ✓ (((4 integer)) <- ((copy)) ((25 literal)))
c{1: 4 ✓ (((5 integer)) <- ((copy)) ((26 literal)))
c{1: 5 ✓ (((6 integer-array-address)) <- ((copy)) ((1 literal)))
c{1: 6 ✓ (((7 integer-array-address-address)) <- ((copy)) ((6 literal)))
c{1: 7 ✓ (((8 integer)) <- ((index)) ((7 integer-array-address-address) (deref) (deref)) ((1 literal)))
cn0: convert-names in main
cn0: (((1 integer)) <- ((copy)) ((4 literal))) nil nil
cn0: checking arg ((4 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((2 integer)) <- ((copy)) ((23 literal))) nil nil
cn0: checking arg ((23 literal))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: (((3 integer)) <- ((copy)) ((24 literal))) nil nil
cn0: checking arg ((24 literal))
cn0: checking oarg ((3 integer))
maybe-add: ((3 integer))
cn0: (((4 integer)) <- ((copy)) ((25 literal))) nil nil
cn0: checking arg ((25 literal))
cn0: checking oarg ((4 integer))
maybe-add: ((4 integer))
cn0: (((5 integer)) <- ((copy)) ((26 literal))) nil nil
cn0: checking arg ((26 literal))
cn0: checking oarg ((5 integer))
maybe-add: ((5 integer))
cn0: (((6 integer-array-address)) <- ((copy)) ((1 literal))) nil nil
cn0: checking arg ((1 literal))
cn0: checking oarg ((6 integer-array-address))
maybe-add: ((6 integer-array-address))
cn0: (((7 integer-array-address-address)) <- ((copy)) ((6 literal))) nil nil
cn0: checking arg ((6 literal))
cn0: checking oarg ((7 integer-array-address-address))
maybe-add: ((7 integer-array-address-address))
cn0: (((8 integer)) <- ((index)) ((7 integer-array-address-address) (deref) (deref)) ((1 literal))) nil nil
cn0: checking arg ((7 integer-array-address-address) (deref) (deref))
maybe-add: ((7 integer-array-address-address) (deref) (deref))
cn0: checking arg ((1 literal))
cn0: checking oarg ((8 integer))
maybe-add: ((8 integer))
cn1: (((1 integer)) <- ((copy)) ((4 literal)))
cn1: (((2 integer)) <- ((copy)) ((23 literal)))
cn1: (((3 integer)) <- ((copy)) ((24 literal)))
cn1: (((4 integer)) <- ((copy)) ((25 literal)))
cn1: (((5 integer)) <- ((copy)) ((26 literal)))
cn1: (((6 integer-array-address)) <- ((copy)) ((1 literal)))
cn1: (((7 integer-array-address-address)) <- ((copy)) ((6 literal)))
cn1: (((8 integer)) <- ((index)) ((7 integer-array-address-address) (deref) (deref)) ((1 literal)))
schedule: main
run: main 0: (((1 integer)) <- ((copy)) ((4 literal)))
run: main 0: 4 => ((1 integer))
mem: ((1 integer)): 1 <= 4
run: main 1: (((2 integer)) <- ((copy)) ((23 literal)))
run: main 1: 23 => ((2 integer))
mem: ((2 integer)): 2 <= 23
run: main 2: (((3 integer)) <- ((copy)) ((24 literal)))
run: main 2: 24 => ((3 integer))
mem: ((3 integer)): 3 <= 24
run: main 3: (((4 integer)) <- ((copy)) ((25 literal)))
run: main 3: 25 => ((4 integer))
mem: ((4 integer)): 4 <= 25
run: main 4: (((5 integer)) <- ((copy)) ((26 literal)))
run: main 4: 26 => ((5 integer))
mem: ((5 integer)): 5 <= 26
run: main 5: (((6 integer-array-address)) <- ((copy)) ((1 literal)))
run: main 5: 1 => ((6 integer-array-address))
mem: ((6 integer-array-address)): 6 <= 1
run: main 6: (((7 integer-array-address-address)) <- ((copy)) ((6 literal)))
run: main 6: 6 => ((7 integer-array-address-address))
mem: ((7 integer-array-address-address)): 7 <= 6
run: main 7: (((8 integer)) <- ((index)) ((7 integer-array-address-address) (deref) (deref)) ((1 literal)))
array-len: ((1 integer-array))
mem: ((1 integer)) => 4
mem: ((3 integer) (raw)) => 24
run: main 7: 24 => ((8 integer))
mem: ((8 integer)): 8 <= 24
schedule: done with routine nil
