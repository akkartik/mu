9991 load: --- defining scenario-remove-range-empty
9993 parse: instruction: copy
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <>>>}
9992 load: after rewriting: 1:address:duplex-list <- copy 0
9993 parse: instruction: push-duplex
9993 parse:   ingredient: {"14": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <>>>}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <>>>}
9992 load: after rewriting: 1:address:duplex-list <- push-duplex 14, 1:address:duplex-list
9993 parse: instruction: push-duplex
9993 parse:   ingredient: {"13": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <>>>}
9993 parse:   product: {"1": <"address" : <"duplex-list" : <>>>}
9992 load: after rewriting: 1:address:duplex-list <- push-duplex 13, 1:address:duplex-list
9993 parse: instruction: run
9993 parse:   ingredient: {"\n    # delete 16 onwards\n    # first pointer: to the third element\n    2:address:duplex-list <- next-duplex 1:address:duplex-list\n    remove-duplex-between 1:address:duplex-list, 2:address:duplex-list\n    # now check the list\n    4:character <- get *1:address:duplex-list, value:offset\n    5:address:duplex-list <- next-duplex 1:address:duplex-list\n    6:character <- get *5:address:duplex-list, value:offset\n    7:address:duplex-list <- next-duplex 5:address:duplex-list\n  ": "literal-string"}
9992 load: after rewriting: run [
    # delete 16 onwards
    # first pointer: to the third element
    2:address:duplex-list <- next-duplex 1:address:duplex-list
    remove-duplex-between 1:address:duplex-list, 2:address:duplex-list
    # now check the list
    4:character <- get *1:address:duplex-list, value:offset
    5:address:duplex-list <- next-duplex 1:address:duplex-list
    6:character <- get *5:address:duplex-list, value:offset
    7:address:duplex-list <- next-duplex 5:address:duplex-list
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   ingredient: {"\n    4 <- 13\n    6 <- 14\n    7 <- 0\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    4 <- 13
    6 <- 14
    7 <- 0
  ]
9990 transform: === transform_all()
9991 transform: --- transform names for recipe scenario-remove-range-empty
9991 transform: --- transform braces for recipe scenario-remove-range-empty
9991 transform: copy ...
9991 transform: push-duplex ...
9991 transform: push-duplex ...
9991 transform: run ...
9991 transform: memory-should-contain ...
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-remove-range-empty
 102 run: 1:address:duplex-list <- copy 0
9999 mem: storing 0 in location 1
 102 run: 1:address:duplex-list <- push-duplex 14, 1:address:duplex-list
9999 mem: location 1 is 0
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1000
 103 run: x:character <- next-ingredient 
9999 mem: storing 14 in location 1002
 103 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 0 in location 1003
 103 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
 103 run: val:address:character <- get-address *result, value:offset
9999 mem: location 1004 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1005
 103 run: *val <- copy x
9999 mem: location 1002 is 14
9999 mem: location 1005 is 1008
9999 mem: storing 14 in location 1008
 103 run: next:address:address:duplex-list <- get-address *result, next:offset
9999 mem: location 1004 is 1008
9999 mem: location 1008 is 14
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 103 run: *next <- copy in
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1009
9999 mem: storing 0 in location 1009
 103 run: jump-if in, 1:offset
9999 mem: location 1003 is 0
9999 run: jump-if fell through
 103 run: reply result
9999 mem: location 1004 is 1008
9999 trace: reply: decrementing callstack depth from 2
9999 run: result 0 is 1008
9999 mem: storing 1008 in location 1
 102 run: 1:address:duplex-list <- push-duplex 13, 1:address:duplex-list
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 103 run: x:character <- next-ingredient 
9999 mem: storing 13 in location 1002
 103 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1008 in location 1003
 103 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1011
9999 mem: storing 1011 in location 1004
 103 run: val:address:character <- get-address *result, value:offset
9999 mem: location 1004 is 1011
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1004 is 1011
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 103 run: *val <- copy x
9999 mem: location 1002 is 13
9999 mem: location 1005 is 1011
9999 mem: storing 13 in location 1011
 103 run: next:address:address:duplex-list <- get-address *result, next:offset
9999 mem: location 1004 is 1011
9999 mem: location 1011 is 13
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1004 is 1011
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 103 run: *next <- copy in
9999 mem: location 1003 is 1008
9999 mem: location 1006 is 1012
9999 mem: storing 1008 in location 1012
 103 run: jump-if in, 1:offset
9999 mem: location 1003 is 1008
9999 run: jumping to instruction 10
 103 run: prev:address:address:duplex-list <- get-address *in, prev:offset
9999 mem: location 1003 is 1008
9999 mem: location 1008 is 14
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1003 is 1008
9999 run: address to copy is 1010
9999 mem: storing 1010 in location 1007
 103 run: *prev <- copy result
9999 mem: location 1004 is 1011
9999 mem: location 1007 is 1010
9999 mem: storing 1011 in location 1010
 103 run: reply result
9999 mem: location 1004 is 1011
9999 trace: reply: decrementing callstack depth from 2
9999 run: result 0 is 1011
9999 mem: storing 1011 in location 1
 102 run: run [
    # delete 16 onwards
    # first pointer: to the third element
    2:address:duplex-list <- next-duplex 1:address:duplex-list
    remove-duplex-between 1:address:duplex-list, 2:address:duplex-list
    # now check the list
    4:character <- get *1:address:duplex-list, value:offset
    5:address:duplex-list <- next-duplex 1:address:duplex-list
    6:character <- get *5:address:duplex-list, value:offset
    7:address:duplex-list <- next-duplex 5:address:duplex-list
  ]
9991 load: --- defining run1001
9993 parse: instruction: next-duplex
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <>>>}
9993 parse:   product: {"2": <"address" : <"duplex-list" : <>>>}
9992 load: after rewriting: 2:address:duplex-list <- next-duplex 1:address:duplex-list
9993 parse: instruction: remove-duplex-between
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <>>>}
9993 parse:   ingredient: {"2": <"address" : <"duplex-list" : <>>>}
9992 load: after rewriting: remove-duplex-between 1:address:duplex-list, 2:address:duplex-list
9993 parse: instruction: get
9993 parse:   ingredient: {"*1": <"address" : <"duplex-list" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"value": "offset"}
9993 parse:   product: {"4": "character"}
9992 load: after rewriting: 4:character <- get *1:address:duplex-list, value:offset
9993 parse: instruction: next-duplex
9993 parse:   ingredient: {"1": <"address" : <"duplex-list" : <>>>}
9993 parse:   product: {"5": <"address" : <"duplex-list" : <>>>}
9992 load: after rewriting: 5:address:duplex-list <- next-duplex 1:address:duplex-list
9993 parse: instruction: get
9993 parse:   ingredient: {"*5": <"address" : <"duplex-list" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"value": "offset"}
9993 parse:   product: {"6": "character"}
9992 load: after rewriting: 6:character <- get *5:address:duplex-list, value:offset
9993 parse: instruction: next-duplex
9993 parse:   ingredient: {"5": <"address" : <"duplex-list" : <>>>}
9993 parse:   product: {"7": <"address" : <"duplex-list" : <>>>}
9992 load: after rewriting: 7:address:duplex-list <- next-duplex 5:address:duplex-list
9990 transform: === transform_all()
9991 transform: --- transform names for recipe run1001
9993 name: element value of type duplex-list is at offset 0
9993 name: element value of type duplex-list is at offset 0
9991 transform: --- transform braces for recipe run1001
9991 transform: next-duplex ...
9991 transform: remove-duplex-between ...
9991 transform: get ...
9991 transform: next-duplex ...
9991 transform: get ...
9991 transform: next-duplex ...
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: run: incrementing callstack depth to 2
 103 run: 2:address:duplex-list <- next-duplex 1:address:duplex-list
9999 mem: location 1 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1014
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1011 in location 1016
 104 run: jump-if in, 1:offset
9999 mem: location 1016 is 1011
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1016 is 1011
9999 mem: location 1011 is 13
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 0
9999 mem: location 1016 is 1011
9999 run: address to copy is 1012
9999 run: its type is address
9999 mem: location 1012 is 1008
9999 mem: storing 1008 in location 1017
 104 run: reply result
9999 mem: location 1017 is 1008
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1008
9999 mem: storing 1008 in location 2
 103 run: remove-duplex-between 1:address:duplex-list, 2:address:duplex-list
9999 mem: location 1 is 1011
9999 mem: location 2 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1018
 104 run: start:address:duplex-list <- next-ingredient 
9999 mem: storing 1011 in location 1020
 104 run: end:address:duplex-list <- next-ingredient 
9999 mem: storing 1008 in location 1021
 104 run: jump-if start, 1:offset
9999 mem: location 1020 is 1011
9999 run: jumping to instruction 5
 104 run: next:address:address:duplex-list <- get-address *start, next:offset
9999 mem: location 1020 is 1011
9999 mem: location 1011 is 13
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 0
9999 mem: location 1020 is 1011
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1022
 104 run: nothing-to-delete?:boolean <- equal *next, end
9999 mem: location 1022 is 1012
9999 mem: location 1012 is 1008
9999 mem: location 1021 is 1008
9999 mem: storing 1 in location 1023
 104 run: jump-unless nothing-to-delete?, 1:offset
9999 mem: location 1023 is 1
9999 run: jump-unless fell through
 104 run: reply start
9999 mem: location 1020 is 1011
9999 trace: reply: decrementing callstack depth from 3
 103 run: 4:character <- get *1:address:duplex-list, value:offset
9999 mem: location 1 is 1011
9999 mem: location 1011 is 13
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 0
9999 mem: location 1 is 1011
9999 run: address to copy is 1011
9999 run: its type is character
9999 mem: location 1011 is 13
9999 mem: storing 13 in location 4
 103 run: 5:address:duplex-list <- next-duplex 1:address:duplex-list
9999 mem: location 1 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1011 in location 1016
 104 run: jump-if in, 1:offset
9999 mem: location 1016 is 1011
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1016 is 1011
9999 mem: location 1011 is 13
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 0
9999 mem: location 1016 is 1011
9999 run: address to copy is 1012
9999 run: its type is address
9999 mem: location 1012 is 1008
9999 mem: storing 1008 in location 1017
 104 run: reply result
9999 mem: location 1017 is 1008
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1008
9999 mem: storing 1008 in location 5
 103 run: 6:character <- get *5:address:duplex-list, value:offset
9999 mem: location 5 is 1008
9999 mem: location 1008 is 14
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: location 5 is 1008
9999 run: address to copy is 1008
9999 run: its type is character
9999 mem: location 1008 is 14
9999 mem: storing 14 in location 6
 103 run: 7:address:duplex-list <- next-duplex 5:address:duplex-list
9999 mem: location 5 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1008 in location 1016
 104 run: jump-if in, 1:offset
9999 mem: location 1016 is 1008
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1016 is 1008
9999 mem: location 1008 is 14
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: location 1016 is 1008
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1017
 104 run: reply result
9999 mem: location 1017 is 0
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 0
9999 mem: storing 0 in location 7
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    4 <- 13
    6 <- 14
    7 <- 0
  ]
9999 run: checking location 4
9999 run: checking location 6
9999 run: checking location 7
9999 trace: fall-through: exiting scenario-remove-range-empty; decrementing callstack depth from 1
