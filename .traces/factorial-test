9991 parse: --- defining scenario-factorial-test
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:number <- factorial 5\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:number <- factorial 5
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1 <- 120\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    1 <- 120
  ]
9999 parse: recipe scenario-factorial-test has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-factorial-test
9991 transform: --- deduce types for recipe scenario-factorial-test
9991 transform: --- collect surrounding spaces for recipe scenario-factorial-test
9991 transform: --- transform names for recipe scenario-factorial-test
9991 transform: --- resolve ambiguous calls for recipe scenario-factorial-test
9991 transform: --- compute instruction operations for recipe scenario-factorial-test
9991 transform: --- transform braces for recipe scenario-factorial-test
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario-factorial-test
9991 transform: --- type-check 'call' instructions inside recipe scenario-factorial-test
9991 transform: --- type-check calls inside recipe scenario-factorial-test
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-factorial-test
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-factorial-test
 102 run: run [
    1:number <- factorial 5
  ]
9991 parse: --- defining run1001
9993 parse: instruction: factorial
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"5": "literal"}
9993 parse:   product: {"1": "number"}
9992 load: after rewriting: 1:number <- factorial 5
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- deduce types for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction factorial
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 1000
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 0: 1000
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: factorial ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run1001
9991 transform: --- type-check 'call' instructions inside recipe run1001
9991 transform: --- type-check calls inside recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:number <- factorial 5
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 104 run: n:number <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1002
 104 run: zero?:boolean <- equal n, 0
9999 mem: location 1002 is 5
9999 mem: storing 0 in location 1003
 104 run: jump-unless zero?, 
9999 mem: location 1003 is 0
9998 run: jumping to instruction 6
 104 run: x:number <- subtract n, 1
9999 mem: location 1002 is 5
9999 mem: storing 4 in location 1004
 104 run: subresult:number <- factorial x
9999 mem: location 1004 is 4
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1007
 105 run: n:number <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1009
 105 run: zero?:boolean <- equal n, 0
9999 mem: location 1009 is 4
9999 mem: storing 0 in location 1010
 105 run: jump-unless zero?, 
9999 mem: location 1010 is 0
9998 run: jumping to instruction 6
 105 run: x:number <- subtract n, 1
9999 mem: location 1009 is 4
9999 mem: storing 3 in location 1011
 105 run: subresult:number <- factorial x
9999 mem: location 1011 is 3
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1014
 106 run: n:number <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1016
 106 run: zero?:boolean <- equal n, 0
9999 mem: location 1016 is 3
9999 mem: storing 0 in location 1017
 106 run: jump-unless zero?, 
9999 mem: location 1017 is 0
9998 run: jumping to instruction 6
 106 run: x:number <- subtract n, 1
9999 mem: location 1016 is 3
9999 mem: storing 2 in location 1018
 106 run: subresult:number <- factorial x
9999 mem: location 1018 is 2
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1021
 107 run: n:number <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1023
 107 run: zero?:boolean <- equal n, 0
9999 mem: location 1023 is 2
9999 mem: storing 0 in location 1024
 107 run: jump-unless zero?, 
9999 mem: location 1024 is 0
9998 run: jumping to instruction 6
 107 run: x:number <- subtract n, 1
9999 mem: location 1023 is 2
9999 mem: storing 1 in location 1025
 107 run: subresult:number <- factorial x
9999 mem: location 1025 is 1
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1028
 108 run: n:number <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1030
 108 run: zero?:boolean <- equal n, 0
9999 mem: location 1030 is 1
9999 mem: storing 0 in location 1031
 108 run: jump-unless zero?, 
9999 mem: location 1031 is 0
9998 run: jumping to instruction 6
 108 run: x:number <- subtract n, 1
9999 mem: location 1030 is 1
9999 mem: storing 0 in location 1032
 108 run: subresult:number <- factorial x
9999 mem: location 1032 is 0
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1035
 109 run: n:number <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1037
 109 run: zero?:boolean <- equal n, 0
9999 mem: location 1037 is 0
9999 mem: storing 1 in location 1038
 109 run: jump-unless zero?, 
9999 mem: location 1038 is 1
9998 run: jump-unless fell through
 109 run: reply 1
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1
9999 mem: storing 1 in location 1033
 108 run: result <- multiply subresult, n
9999 mem: location 1033 is 1
9999 mem: location 1030 is 1
9999 mem: storing 1 in location 1034
 108 run: reply result:number
9999 mem: location 1034 is 1
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1
9999 mem: storing 1 in location 1026
 107 run: result <- multiply subresult, n
9999 mem: location 1026 is 1
9999 mem: location 1023 is 2
9999 mem: storing 2 in location 1027
 107 run: reply result:number
9999 mem: location 1027 is 2
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 2
9999 mem: storing 2 in location 1019
 106 run: result <- multiply subresult, n
9999 mem: location 1019 is 2
9999 mem: location 1016 is 3
9999 mem: storing 6 in location 1020
 106 run: reply result:number
9999 mem: location 1020 is 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 6
9999 mem: storing 6 in location 1012
 105 run: result <- multiply subresult, n
9999 mem: location 1012 is 6
9999 mem: location 1009 is 4
9999 mem: storing 24 in location 1013
 105 run: reply result:number
9999 mem: location 1013 is 24
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 24
9999 mem: storing 24 in location 1005
 104 run: result <- multiply subresult, n
9999 mem: location 1005 is 24
9999 mem: location 1002 is 5
9999 mem: storing 120 in location 1006
 104 run: reply result:number
9999 mem: location 1006 is 120
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 120
9999 mem: storing 120 in location 1
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    1 <- 120
  ]
9999 run: checking location 1
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
