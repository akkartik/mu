parse: instruction: run
parse:   ingredient: {name: "\n    1:number <- factorial 5:literal\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    1 <- 120\n  ", properties: [_: "literal-string"]}
after-brace: recipe factorial-test
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: factorial-test
 101 run: run [
    1:number <- factorial 5:literal
  ]
parse: instruction: factorial
parse:   ingredient: {name: "5", properties: ["5": "literal"]}
parse:   product: {name: "1", properties: ["1": "number"]}
after-brace: recipe run1001
after-brace: factorial ...
 101 run: 1:number <- factorial 5:literal
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 102 run: n:number <- next-ingredient 
9999 mem: storing 5 in location 1002
 102 run: zero?:boolean <- equal n:number, 0:literal
9999 mem: location 1002 is 5
9999 mem: storing 0 in location 1003
 102 run: break-unless zero?:boolean, 
9999 mem: location 1003 is 0
9999 run: jumping to instruction 6
 102 run: x:number <- subtract n:number, 1:literal
9999 mem: location 1002 is 5
9999 mem: storing 4 in location 1004
 102 run: subresult:number <- factorial x:number
9999 mem: location 1004 is 4
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1007
 103 run: n:number <- next-ingredient 
9999 mem: storing 4 in location 1009
 103 run: zero?:boolean <- equal n:number, 0:literal
9999 mem: location 1009 is 4
9999 mem: storing 0 in location 1010
 103 run: break-unless zero?:boolean, 
9999 mem: location 1010 is 0
9999 run: jumping to instruction 6
 103 run: x:number <- subtract n:number, 1:literal
9999 mem: location 1009 is 4
9999 mem: storing 3 in location 1011
 103 run: subresult:number <- factorial x:number
9999 mem: location 1011 is 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1014
 104 run: n:number <- next-ingredient 
9999 mem: storing 3 in location 1016
 104 run: zero?:boolean <- equal n:number, 0:literal
9999 mem: location 1016 is 3
9999 mem: storing 0 in location 1017
 104 run: break-unless zero?:boolean, 
9999 mem: location 1017 is 0
9999 run: jumping to instruction 6
 104 run: x:number <- subtract n:number, 1:literal
9999 mem: location 1016 is 3
9999 mem: storing 2 in location 1018
 104 run: subresult:number <- factorial x:number
9999 mem: location 1018 is 2
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1021
 105 run: n:number <- next-ingredient 
9999 mem: storing 2 in location 1023
 105 run: zero?:boolean <- equal n:number, 0:literal
9999 mem: location 1023 is 2
9999 mem: storing 0 in location 1024
 105 run: break-unless zero?:boolean, 
9999 mem: location 1024 is 0
9999 run: jumping to instruction 6
 105 run: x:number <- subtract n:number, 1:literal
9999 mem: location 1023 is 2
9999 mem: storing 1 in location 1025
 105 run: subresult:number <- factorial x:number
9999 mem: location 1025 is 1
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1028
 106 run: n:number <- next-ingredient 
9999 mem: storing 1 in location 1030
 106 run: zero?:boolean <- equal n:number, 0:literal
9999 mem: location 1030 is 1
9999 mem: storing 0 in location 1031
 106 run: break-unless zero?:boolean, 
9999 mem: location 1031 is 0
9999 run: jumping to instruction 6
 106 run: x:number <- subtract n:number, 1:literal
9999 mem: location 1030 is 1
9999 mem: storing 0 in location 1032
 106 run: subresult:number <- factorial x:number
9999 mem: location 1032 is 0
 107 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1035
 107 run: n:number <- next-ingredient 
9999 mem: storing 0 in location 1037
 107 run: zero?:boolean <- equal n:number, 0:literal
9999 mem: location 1037 is 0
9999 mem: storing 1 in location 1038
 107 run: break-unless zero?:boolean, 
9999 mem: location 1038 is 1
9999 run: jump-unless fell through
 107 run: reply 1:literal
9999 run: result 0 is 1
9999 mem: storing 1 in location 1033
 106 run: result:number <- multiply subresult:number, n:number
9999 mem: location 1033 is 1
9999 mem: location 1030 is 1
9999 mem: storing 1 in location 1034
 106 run: reply result:number
9999 mem: location 1034 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 1026
 105 run: result:number <- multiply subresult:number, n:number
9999 mem: location 1026 is 1
9999 mem: location 1023 is 2
9999 mem: storing 2 in location 1027
 105 run: reply result:number
9999 mem: location 1027 is 2
9999 run: result 0 is 2
9999 mem: storing 2 in location 1019
 104 run: result:number <- multiply subresult:number, n:number
9999 mem: location 1019 is 2
9999 mem: location 1016 is 3
9999 mem: storing 6 in location 1020
 104 run: reply result:number
9999 mem: location 1020 is 6
9999 run: result 0 is 6
9999 mem: storing 6 in location 1012
 103 run: result:number <- multiply subresult:number, n:number
9999 mem: location 1012 is 6
9999 mem: location 1009 is 4
9999 mem: storing 24 in location 1013
 103 run: reply result:number
9999 mem: location 1013 is 24
9999 run: result 0 is 24
9999 mem: storing 24 in location 1005
 102 run: result:number <- multiply subresult:number, n:number
9999 mem: location 1005 is 24
9999 mem: location 1002 is 5
9999 mem: storing 120 in location 1006
 102 run: reply result:number
9999 mem: location 1006 is 120
9999 run: result 0 is 120
9999 mem: storing 120 in location 1
 100 run: memory-should-contain [
    1 <- 120
  ]
9999 run: checking location 1
