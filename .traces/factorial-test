parse: instruction: run
parse:   ingredient: {name: "\n    1:number <- factorial 5:literal\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    1 <- 120\n  ", properties: [_: "literal-string"]}
after-brace: recipe factorial-test
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: factorial-test
 101 run: run [
    1:number <- factorial 5:literal
  ]
parse: instruction: factorial
parse:   ingredient: {name: "5", properties: ["5": "literal"]}
parse:   product: {name: "1", properties: ["1": "number"]}
after-brace: recipe run1001
after-brace: factorial ...
 101 run: 1:number <- factorial 5:literal
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1000
 102 run: n:number <- next-ingredient 
9999 mem: storing 5 in location 1002
 102 run: zero?:boolean <- equal n:number, 0:literal
9999 mem: location 1002 is 5
9999 mem: storing 0 in location 1003
 102 run: break-unless zero?:boolean, 
9999 mem: location 1003 is 0
9999 run: jumping to instruction 6
 102 run: x:number <- subtract n:number, 1:literal
9999 mem: location 1002 is 5
9999 mem: storing 4 in location 1004
 102 run: subresult:number <- factorial x:number
9999 mem: location 1004 is 4
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1031
 103 run: n:number <- next-ingredient 
9999 mem: storing 4 in location 1033
 103 run: zero?:boolean <- equal n:number, 0:literal
9999 mem: location 1033 is 4
9999 mem: storing 0 in location 1034
 103 run: break-unless zero?:boolean, 
9999 mem: location 1034 is 0
9999 run: jumping to instruction 6
 103 run: x:number <- subtract n:number, 1:literal
9999 mem: location 1033 is 4
9999 mem: storing 3 in location 1035
 103 run: subresult:number <- factorial x:number
9999 mem: location 1035 is 3
 104 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1062
 104 run: n:number <- next-ingredient 
9999 mem: storing 3 in location 1064
 104 run: zero?:boolean <- equal n:number, 0:literal
9999 mem: location 1064 is 3
9999 mem: storing 0 in location 1065
 104 run: break-unless zero?:boolean, 
9999 mem: location 1065 is 0
9999 run: jumping to instruction 6
 104 run: x:number <- subtract n:number, 1:literal
9999 mem: location 1064 is 3
9999 mem: storing 2 in location 1066
 104 run: subresult:number <- factorial x:number
9999 mem: location 1066 is 2
 105 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1093
 105 run: n:number <- next-ingredient 
9999 mem: storing 2 in location 1095
 105 run: zero?:boolean <- equal n:number, 0:literal
9999 mem: location 1095 is 2
9999 mem: storing 0 in location 1096
 105 run: break-unless zero?:boolean, 
9999 mem: location 1096 is 0
9999 run: jumping to instruction 6
 105 run: x:number <- subtract n:number, 1:literal
9999 mem: location 1095 is 2
9999 mem: storing 1 in location 1097
 105 run: subresult:number <- factorial x:number
9999 mem: location 1097 is 1
 106 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1124
 106 run: n:number <- next-ingredient 
9999 mem: storing 1 in location 1126
 106 run: zero?:boolean <- equal n:number, 0:literal
9999 mem: location 1126 is 1
9999 mem: storing 0 in location 1127
 106 run: break-unless zero?:boolean, 
9999 mem: location 1127 is 0
9999 run: jumping to instruction 6
 106 run: x:number <- subtract n:number, 1:literal
9999 mem: location 1126 is 1
9999 mem: storing 0 in location 1128
 106 run: subresult:number <- factorial x:number
9999 mem: location 1128 is 0
 107 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1155
 107 run: n:number <- next-ingredient 
9999 mem: storing 0 in location 1157
 107 run: zero?:boolean <- equal n:number, 0:literal
9999 mem: location 1157 is 0
9999 mem: storing 1 in location 1158
 107 run: break-unless zero?:boolean, 
9999 mem: location 1158 is 1
9999 run: jump-unless fell through
 107 run: reply 1:literal
9999 run: result 0 is 1
9999 mem: storing 1 in location 1129
 106 run: result:number <- multiply subresult:number, n:number
9999 mem: location 1129 is 1
9999 mem: location 1126 is 1
9999 mem: storing 1 in location 1130
 106 run: reply result:number
9999 mem: location 1130 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 1098
 105 run: result:number <- multiply subresult:number, n:number
9999 mem: location 1098 is 1
9999 mem: location 1095 is 2
9999 mem: storing 2 in location 1099
 105 run: reply result:number
9999 mem: location 1099 is 2
9999 run: result 0 is 2
9999 mem: storing 2 in location 1067
 104 run: result:number <- multiply subresult:number, n:number
9999 mem: location 1067 is 2
9999 mem: location 1064 is 3
9999 mem: storing 6 in location 1068
 104 run: reply result:number
9999 mem: location 1068 is 6
9999 run: result 0 is 6
9999 mem: storing 6 in location 1036
 103 run: result:number <- multiply subresult:number, n:number
9999 mem: location 1036 is 6
9999 mem: location 1033 is 4
9999 mem: storing 24 in location 1037
 103 run: reply result:number
9999 mem: location 1037 is 24
9999 run: result 0 is 24
9999 mem: storing 24 in location 1005
 102 run: result:number <- multiply subresult:number, n:number
9999 mem: location 1005 is 24
9999 mem: location 1002 is 5
9999 mem: storing 120 in location 1006
 102 run: reply result:number
9999 mem: location 1006 is 120
9999 run: result 0 is 120
9999 mem: storing 120 in location 1
 100 run: memory-should-contain [
    1 <- 120
  ]
9999 run: checking location 1
