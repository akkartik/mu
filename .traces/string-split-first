parse: instruction: run
parse:   ingredient: {name: "\n    1:address:array:character <- new [a/b]\n    2:address:array:character, 3:address:array:character <- split-first 1:address:array:character, 47/slash\n    10:array:character <- copy 2:address:array:character/deref\n    20:array:character <- copy 3:address:array:character/deref\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    10:string <- [a]\n    20:string <- [b]\n  ", properties: [_: "literal-string"]}
after-brace: recipe scenario-string-split-first
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: scenario-string-split-first
 101 run: run [
    1:address:array:character <- new [a/b]
    2:address:array:character, 3:address:array:character <- split-first 1:address:array:character, 47/slash
    10:array:character <- copy 2:address:array:character/deref
    20:array:character <- copy 3:address:array:character/deref
  ]
parse: instruction: new
parse:   ingredient: {name: "a/b", properties: [_: "literal-string"]}
parse:   product: {name: "1", properties: ["1": "address":"array":"character"]}
parse: instruction: split-first
parse:   ingredient: {name: "1", properties: ["1": "address":"array":"character"]}
parse:   ingredient: {name: "47", properties: ["47": "literal", "slash": ]}
parse:   product: {name: "2", properties: ["2": "address":"array":"character"]}
parse:   product: {name: "3", properties: ["3": "address":"array":"character"]}
parse: instruction: copy
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"character", "deref": ]}
parse:   product: {name: "10", properties: ["10": "array":"character"]}
parse: instruction: copy
parse:   ingredient: {name: "3", properties: ["3": "address":"array":"character", "deref": ]}
parse:   product: {name: "20", properties: ["20": "array":"character"]}
after-brace: recipe run1001
after-brace: new ...
after-brace: split-first ...
after-brace: copy ...
after-brace: copy ...
 101 run: 1:address:array:character <- new [a/b]
9999 mem: storing 1000 in location 1
 101 run: 2:address:array:character, 3:address:array:character <- split-first 1:address:array:character, 47/slash
9999 mem: location 1 is 1000
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1004
 102 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1006
 102 run: delim:character <- next-ingredient 
9999 mem: storing 47 in location 1007
 102 run: len:number <- length text:address:array:character/deref
9999 mem: location 1006 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1006 is 1000
9999 mem: storing 3 in location 1008
 102 run: empty?:boolean <- equal len:number, 0
9999 mem: location 1008 is 3
9999 mem: storing 0 in location 1009
 102 run: break-unless empty?:boolean, 
9999 mem: location 1009 is 0
9999 run: jumping to instruction 10
 102 run: idx:number <- find-next text:address:array:character, delim:character, 0
9999 mem: location 1006 is 1000
9999 mem: location 1007 is 47
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1013
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1015
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1016
 103 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1017
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1015 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1015 is 1000
9999 mem: storing 3 in location 1018
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1017 is 0
9999 mem: location 1018 is 3
9999 mem: storing 0 in location 1019
 103 run: break-if eof?:boolean, 
9999 mem: location 1019 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1015 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1017 is 0
9999 mem: location 1015 is 1000
9999 mem: location 1017 is 0
9999 run: address to copy is 1001
9999 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1020
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1020 is 97
9999 mem: location 1016 is 47
9999 mem: storing 0 in location 1021
 103 run: break-if found?:boolean, 
9999 mem: location 1021 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1
9999 mem: location 1017 is 0
9999 mem: storing 1 in location 1017
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1017 is 1
9999 mem: location 1018 is 3
9999 mem: storing 0 in location 1019
 103 run: break-if eof?:boolean, 
9999 mem: location 1019 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1015 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1017 is 1
9999 mem: location 1015 is 1000
9999 mem: location 1017 is 1
9999 run: address to copy is 1002
9999 run: its type is character
9999 mem: location 1002 is 47
9999 mem: storing 47 in location 1020
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1020 is 47
9999 mem: location 1016 is 47
9999 mem: storing 1 in location 1021
 103 run: break-if found?:boolean, 
9999 mem: location 1021 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1017 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 1012
 102 run: x:address:array:character <- string-copy text:address:array:character, 0, idx:number
9999 mem: location 1006 is 1000
9999 mem: location 1012 is 1
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1022
 103 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1024
 103 run: start:number <- next-ingredient 
9999 mem: storing 0 in location 1025
 103 run: end:number <- next-ingredient 
9999 mem: storing 1 in location 1026
 103 run: len:number <- length buf:address:array:character/deref
9999 mem: location 1024 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1024 is 1000
9999 mem: storing 3 in location 1027
 103 run: end:number <- min len:number, end:number
9999 mem: location 1027 is 3
9999 mem: location 1026 is 1
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1034
 104 run: x:number <- next-ingredient 
9999 mem: storing 3 in location 1036
 104 run: y:number <- next-ingredient 
9999 mem: storing 1 in location 1037
 104 run: return-x?:boolean <- lesser-than x:number, y:number
9999 mem: location 1036 is 3
9999 mem: location 1037 is 1
9999 mem: storing 0 in location 1038
 104 run: break-if return-x?:boolean, 
9999 mem: location 1038 is 0
9999 run: jump-if fell through
 104 run: reply y:number
9999 mem: location 1037 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 1026
 103 run: len:number <- subtract end:number, start:number
9999 mem: location 1026 is 1
9999 mem: location 1025 is 0
9999 mem: storing 1 in location 1027
 103 run: result:address:array:character <- new character:type, len:number
9999 mem: location 1027 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1039
9999 mem: storing 1039 in location 1028
 103 run: src-idx:number <- copy start:number
9999 mem: location 1025 is 0
9999 mem: storing 0 in location 1029
 103 run: dest-idx:number <- copy 0
9999 mem: storing 0 in location 1030
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1029 is 0
9999 mem: location 1026 is 1
9999 mem: storing 0 in location 1031
 103 run: break-if done?:boolean, 
9999 mem: location 1031 is 0
9999 run: jump-if fell through
 103 run: src:character <- index buf:address:array:character/deref, src-idx:number
9999 mem: location 1024 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1029 is 0
9999 mem: location 1024 is 1000
9999 mem: location 1029 is 0
9999 run: address to copy is 1001
9999 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1032
 103 run: dest:address:character <- index-address result:address:array:character/deref, dest-idx:number
9999 mem: location 1028 is 1039
9999 mem: location 1039 is 1
9999 mem: location 1040 is 0
9999 mem: location 1030 is 0
9999 mem: location 1028 is 1039
9999 mem: location 1030 is 0
9999 mem: storing 1040 in location 1033
 103 run: dest:address:character/deref <- copy src:character
9999 mem: location 1032 is 97
9999 mem: location 1033 is 1040
9999 mem: storing 97 in location 1040
 103 run: src-idx:number <- add src-idx:number, 1
9999 mem: location 1029 is 0
9999 mem: storing 1 in location 1029
 103 run: dest-idx:number <- add dest-idx:number, 1
9999 mem: location 1030 is 0
9999 mem: storing 1 in location 1030
 103 run: loop 
9999 run: jumping to instruction 11
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1029 is 1
9999 mem: location 1026 is 1
9999 mem: storing 1 in location 1031
 103 run: break-if done?:boolean, 
9999 mem: location 1031 is 1
9999 run: jumping to instruction 19
 103 run: reply result:address:array:character
9999 mem: location 1028 is 1039
9999 run: result 0 is 1039
9999 mem: storing 1039 in location 1010
 102 run: idx:number <- add idx:number, 1
9999 mem: location 1012 is 1
9999 mem: storing 2 in location 1012
 102 run: y:address:array:character <- string-copy text:address:array:character, idx:number, len:number
9999 mem: location 1006 is 1000
9999 mem: location 1012 is 2
9999 mem: location 1008 is 3
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
 103 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1024
 103 run: start:number <- next-ingredient 
9999 mem: storing 2 in location 1025
 103 run: end:number <- next-ingredient 
9999 mem: storing 3 in location 1026
 103 run: len:number <- length buf:address:array:character/deref
9999 mem: location 1024 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1024 is 1000
9999 mem: storing 3 in location 1027
 103 run: end:number <- min len:number, end:number
9999 mem: location 1027 is 3
9999 mem: location 1026 is 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 104 run: x:number <- next-ingredient 
9999 mem: storing 3 in location 1036
 104 run: y:number <- next-ingredient 
9999 mem: storing 3 in location 1037
 104 run: return-x?:boolean <- lesser-than x:number, y:number
9999 mem: location 1036 is 3
9999 mem: location 1037 is 3
9999 mem: storing 0 in location 1038
 104 run: break-if return-x?:boolean, 
9999 mem: location 1038 is 0
9999 run: jump-if fell through
 104 run: reply y:number
9999 mem: location 1037 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 1026
 103 run: len:number <- subtract end:number, start:number
9999 mem: location 1026 is 3
9999 mem: location 1025 is 2
9999 mem: storing 1 in location 1027
 103 run: result:address:array:character <- new character:type, len:number
9999 mem: location 1027 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1041
9999 mem: storing 1041 in location 1028
 103 run: src-idx:number <- copy start:number
9999 mem: location 1025 is 2
9999 mem: storing 2 in location 1029
 103 run: dest-idx:number <- copy 0
9999 mem: storing 0 in location 1030
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1029 is 2
9999 mem: location 1026 is 3
9999 mem: storing 0 in location 1031
 103 run: break-if done?:boolean, 
9999 mem: location 1031 is 0
9999 run: jump-if fell through
 103 run: src:character <- index buf:address:array:character/deref, src-idx:number
9999 mem: location 1024 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1029 is 2
9999 mem: location 1024 is 1000
9999 mem: location 1029 is 2
9999 run: address to copy is 1003
9999 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1032
 103 run: dest:address:character <- index-address result:address:array:character/deref, dest-idx:number
9999 mem: location 1028 is 1041
9999 mem: location 1041 is 1
9999 mem: location 1042 is 0
9999 mem: location 1030 is 0
9999 mem: location 1028 is 1041
9999 mem: location 1030 is 0
9999 mem: storing 1042 in location 1033
 103 run: dest:address:character/deref <- copy src:character
9999 mem: location 1032 is 98
9999 mem: location 1033 is 1042
9999 mem: storing 98 in location 1042
 103 run: src-idx:number <- add src-idx:number, 1
9999 mem: location 1029 is 2
9999 mem: storing 3 in location 1029
 103 run: dest-idx:number <- add dest-idx:number, 1
9999 mem: location 1030 is 0
9999 mem: storing 1 in location 1030
 103 run: loop 
9999 run: jumping to instruction 11
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1029 is 3
9999 mem: location 1026 is 3
9999 mem: storing 1 in location 1031
 103 run: break-if done?:boolean, 
9999 mem: location 1031 is 1
9999 run: jumping to instruction 19
 103 run: reply result:address:array:character
9999 mem: location 1028 is 1041
9999 run: result 0 is 1041
9999 mem: storing 1041 in location 1011
 102 run: reply x:address:array:character, y:address:array:character
9999 mem: location 1010 is 1039
9999 mem: location 1011 is 1041
9999 run: result 0 is 1039
9999 run: result 1 is 1041
9999 mem: storing 1039 in location 2
9999 mem: storing 1041 in location 3
 101 run: 10:array:character <- copy 2:address:array:character/deref
9999 mem: location 2 is 1039
9999 mem: location 1039 is 1
9999 mem: location 1040 is 97
9999 mem: storing 1 in location 10
9999 mem: storing 97 in location 11
 101 run: 20:array:character <- copy 3:address:array:character/deref
9999 mem: location 3 is 1041
9999 mem: location 1041 is 1
9999 mem: location 1042 is 98
9999 mem: storing 1 in location 20
9999 mem: storing 98 in location 21
 100 run: memory-should-contain [
    10:string <- [a]
    20:string <- [b]
  ]
9999 run: checking string length at 10
9999 run: checking location 11
9999 run: checking string length at 20
9999 run: checking location 21
