9999 parse: instruction: run
9999 parse:   ingredient: {"\n    1:address:array:character/raw <- new [abc]\n    1:address:array:character/raw <- string-replace 1:address:array:character/raw, 100/d, 122/z\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9999 parse: instruction: memory-should-contain
9999 parse:   ingredient: {"\n    2:string <- [abc]\n  ": "literal-string"}
9999 after-brace: recipe scenario-replace-character-missing
9999 after-brace: run ...
9999 after-brace: memory-should-contain ...
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9999 schedule: scenario-replace-character-missing
 102 run: run [
    1:address:array:character/raw <- new [abc]
    1:address:array:character/raw <- string-replace 1:address:array:character/raw, 100/d, 122/z
    2:array:character/raw <- copy *1:address:array:character/raw
  ]
9999 parse: instruction: new
9999 parse:   ingredient: {"abc": "literal-string"}
9999 parse:   product: {"1": <"address" : <"array" : "character">>, "raw": <>}
9999 parse: instruction: string-replace
9999 parse:   ingredient: {"1": <"address" : <"array" : "character">>, "raw": <>}
9999 parse:   ingredient: {"100": "literal", "d": <>}
9999 parse:   ingredient: {"122": "literal", "z": <>}
9999 parse:   product: {"1": <"address" : <"array" : "character">>, "raw": <>}
9999 parse: instruction: copy
9999 parse:   ingredient: {"*1": <"address" : <"array" : "character">>, "raw": <>, "lookup": <>}
9999 parse:   product: {"2": <"array" : "character">, "raw": <>}
9999 after-brace: recipe run1001
9999 after-brace: new ...
9999 after-brace: string-replace ...
9999 after-brace: copy ...
9999 trace: run: incrementing callstack depth to 2
 103 run: 1:address:array:character/raw <- new [abc]
9999 mem: storing 1000 in location 1
 103 run: 1:address:array:character/raw <- string-replace 1:address:array:character/raw, 100/d, 122/z
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1004
 104 run: s:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1006
 104 run: oldc:character <- next-ingredient 
9999 mem: storing 100 in location 1007
 104 run: newc:character <- next-ingredient 
9999 mem: storing 122 in location 1008
 104 run: from:number, _ <- next-ingredient 
9999 mem: storing 0 in location 1009
 104 run: len:number <- length *s
9999 mem: location 1006 is 1000
9999 mem: storing 3 in location 1010
 104 run: i:number <- find-next s, oldc, from
9999 mem: location 1006 is 1000
9999 mem: location 1007 is 100
9999 mem: location 1009 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1014
 105 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1016
 105 run: pattern:character <- next-ingredient 
9999 mem: storing 100 in location 1017
 105 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1018
 105 run: len:number <- length *text
9999 mem: location 1016 is 1000
9999 mem: storing 3 in location 1019
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1018 is 0
9999 mem: location 1019 is 3
9999 mem: storing 0 in location 1020
 105 run: break-if eof?, 
9999 mem: location 1020 is 0
9999 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1016 is 1000
9999 mem: location 1018 is 0
9999 run: address to copy is 1001
9999 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1021
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1021 is 97
9999 mem: location 1017 is 100
9999 mem: storing 0 in location 1022
 105 run: break-if found?, 
9999 mem: location 1022 is 0
9999 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1018 is 0
9999 mem: storing 1 in location 1018
 105 run: loop 
9999 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1018 is 1
9999 mem: location 1019 is 3
9999 mem: storing 0 in location 1020
 105 run: break-if eof?, 
9999 mem: location 1020 is 0
9999 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1016 is 1000
9999 mem: location 1018 is 1
9999 run: address to copy is 1002
9999 run: its type is character
9999 mem: location 1002 is 98
9999 mem: storing 98 in location 1021
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1021 is 98
9999 mem: location 1017 is 100
9999 mem: storing 0 in location 1022
 105 run: break-if found?, 
9999 mem: location 1022 is 0
9999 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1018 is 1
9999 mem: storing 2 in location 1018
 105 run: loop 
9999 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1018 is 2
9999 mem: location 1019 is 3
9999 mem: storing 0 in location 1020
 105 run: break-if eof?, 
9999 mem: location 1020 is 0
9999 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1016 is 1000
9999 mem: location 1018 is 2
9999 run: address to copy is 1003
9999 run: its type is character
9999 mem: location 1003 is 99
9999 mem: storing 99 in location 1021
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1021 is 99
9999 mem: location 1017 is 100
9999 mem: storing 0 in location 1022
 105 run: break-if found?, 
9999 mem: location 1022 is 0
9999 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1018 is 2
9999 mem: storing 3 in location 1018
 105 run: loop 
9999 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1018 is 3
9999 mem: location 1019 is 3
9999 mem: storing 1 in location 1020
 105 run: break-if eof?, 
9999 mem: location 1020 is 1
9999 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1018 is 3
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 3
9999 mem: storing 3 in location 1011
 104 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1011 is 3
9999 mem: location 1010 is 3
9999 mem: storing 1 in location 1012
 104 run: jump-unless done?, 1:offset
9999 mem: location 1012 is 1
9999 run: jump-unless fell through
 104 run: reply s/same-as-ingredient:0
9999 mem: location 1006 is 1000
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1000
9999 mem: storing 1000 in location 1
 103 run: 2:array:character/raw <- copy *1:address:array:character/raw
9999 mem: location 1 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: storing 3 in location 2
9999 mem: storing 97 in location 3
9999 mem: storing 98 in location 4
9999 mem: storing 99 in location 5
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    2:string <- [abc]
  ]
9999 run: checking string length at 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 trace: fall-through: exiting scenario-replace-character-missing; decrementing callstack depth from 1
