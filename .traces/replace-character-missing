9991 parse: --- defining scenario-replace-character-missing
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:array:character/raw <- new [abc]\n    1:address:array:character/raw <- replace 1:address:array:character/raw, 100/d, 122/z\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:array:character/raw <- new [abc]
    1:address:array:character/raw <- replace 1:address:array:character/raw, 100/d, 122/z
    2:array:character/raw <- copy *1:address:array:character/raw
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2:array:character <- [abc]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2:array:character <- [abc]
  ]
9999 parse: recipe scenario-replace-character-missing has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-replace-character-missing
9991 transform: --- transform braces for recipe scenario-replace-character-missing
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- deduce types for recipe scenario-replace-character-missing
9991 transform: --- resolve ambiguous calls for recipe scenario-replace-character-missing
9991 transform: --- collect surrounding spaces for recipe scenario-replace-character-missing
9991 transform: --- transform names for recipe scenario-replace-character-missing
9991 transform: --- compute instruction operations for recipe scenario-replace-character-missing
9991 transform: --- perform checks for recipe scenario-replace-character-missing
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-replace-character-missing
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-replace-character-missing
 102 run: run [
    1:address:array:character/raw <- new [abc]
    1:address:array:character/raw <- replace 1:address:array:character/raw, 100/d, 122/z
    2:array:character/raw <- copy *1:address:array:character/raw
  ]
9991 parse: --- defining run1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abc": "literal-string"}
9993 parse:   product: {"1": <"address" : <"array" : <"character" : <>>>>, "raw": <>}
9992 load: after rewriting: 1:address:array:character/raw <- new [abc]
9993 parse: instruction: replace
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"1": <"address" : <"array" : <"character" : <>>>>, "raw": <>}
9993 parse:   ingredient: {"100": "literal", "d": <>}
9993 parse:   ingredient: {"122": "literal", "z": <>}
9993 parse:   product: {"1": <"address" : <"array" : <"character" : <>>>>, "raw": <>}
9992 load: after rewriting: 1:address:array:character/raw <- replace 1:address:array:character/raw, 100/d, 122/z
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"array" : <"character" : <>>>>, "raw": <>, "lookup": <>}
9993 parse:   product: {"2": <"array" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 2:array:character/raw <- copy *1:address:array:character/raw
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: new ...
9992 transform: replace ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- deduce types for recipe run1001
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction replace
9992 transform: checking variant 0: 100
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:array:character/raw <- new [abc]
9999 mem: storing 1000 in location 1
 103 run: 1:address:array:character/raw <- replace 1:address:array:character/raw, 100/d, 122/z
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1004
 104 run: s:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1006
 104 run: oldc:character <- next-ingredient 
9999 mem: storing 100 in location 1007
 104 run: newc:character <- next-ingredient 
9999 mem: storing 122 in location 1008
 104 run: from:number, _ <- next-ingredient 
9999 mem: storing 0 in location 1009
 104 run: len:number <- length *s
9999 mem: location 1006 is 1000
9999 mem: storing 3 in location 1010
 104 run: i:number <- find-next s, oldc, from
9999 mem: location 1006 is 1000
9999 mem: location 1007 is 100
9999 mem: location 1009 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1014
 105 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1016
 105 run: pattern:character <- next-ingredient 
9999 mem: storing 100 in location 1017
 105 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1018
 105 run: len:number <- length *text
9999 mem: location 1016 is 1000
9999 mem: storing 3 in location 1019
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1018 is 0
9999 mem: location 1019 is 3
9999 mem: storing 0 in location 1020
 105 run: jump-if eof?, 
9999 mem: location 1020 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1016 is 1000
9999 mem: location 1018 is 0
9998 run: address to copy is 1001
9998 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1021
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1021 is 97
9999 mem: location 1017 is 100
9999 mem: storing 0 in location 1022
 105 run: jump-if found?, 
9999 mem: location 1022 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1018 is 0
9999 mem: storing 1 in location 1018
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1018 is 1
9999 mem: location 1019 is 3
9999 mem: storing 0 in location 1020
 105 run: jump-if eof?, 
9999 mem: location 1020 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1016 is 1000
9999 mem: location 1018 is 1
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 98
9999 mem: storing 98 in location 1021
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1021 is 98
9999 mem: location 1017 is 100
9999 mem: storing 0 in location 1022
 105 run: jump-if found?, 
9999 mem: location 1022 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1018 is 1
9999 mem: storing 2 in location 1018
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1018 is 2
9999 mem: location 1019 is 3
9999 mem: storing 0 in location 1020
 105 run: jump-if eof?, 
9999 mem: location 1020 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1016 is 1000
9999 mem: location 1018 is 2
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 99
9999 mem: storing 99 in location 1021
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1021 is 99
9999 mem: location 1017 is 100
9999 mem: storing 0 in location 1022
 105 run: jump-if found?, 
9999 mem: location 1022 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1018 is 2
9999 mem: storing 3 in location 1018
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1018 is 3
9999 mem: location 1019 is 3
9999 mem: storing 1 in location 1020
 105 run: jump-if eof?, 
9999 mem: location 1020 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1018 is 3
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 3
9999 mem: storing 3 in location 1011
 104 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1011 is 3
9999 mem: location 1010 is 3
9999 mem: storing 1 in location 1012
 104 run: jump-unless done?, 1:offset
9999 mem: location 1012 is 1
9998 run: jump-unless fell through
 104 run: reply s/same-as-ingredient:0
9999 mem: location 1006 is 1000
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1000
9999 mem: storing 1000 in location 1
 103 run: 2:array:character/raw <- copy *1:address:array:character/raw
9999 mem: location 1 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: storing 3 in location 2
9999 mem: storing 97 in location 3
9999 mem: storing 98 in location 4
9999 mem: storing 99 in location 5
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    2:array:character <- [abc]
  ]
9999 run: checking string length at 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
