9991 parse: --- defining scenario_editor-initializes-without-data
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"5": "literal", "width": <>}
9993 parse:   ingredient: {"3": "literal", "height": <>}
9992 load: after rewriting: screen:address:shared:screen <- new-fake-screen 5/width, 3/height
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:editor-data <- new-editor 0/data, screen:address:shared:screen, 2/left, 5/right\n    2:editor-data <- copy *1:address:shared:editor-data\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:shared:editor-data <- new-editor 0/data, screen:address:shared:screen, 2/left, 5/right
    2:editor-data <- copy *1:address:shared:editor-data
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    # 2 (data) <- just the § sentinel\n    # 3 (top of screen) <- the § sentinel\n    4 <- 0  # bottom-of-screen; null since text fits on screen\n    # 5 (before cursor) <- the § sentinel\n    6 <- 2  # left\n    7 <- 4  # right  (inclusive)\n    8 <- 1  # bottom\n    9 <- 1  # cursor row\n    10 <- 2  # cursor column\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    # 2 (data) <- just the § sentinel
    # 3 (top of screen) <- the § sentinel
    4 <- 0  # bottom-of-screen; null since text fits on screen
    # 5 (before cursor) <- the § sentinel
    6 <- 2  # left
    7 <- 4  # right  (inclusive)
    8 <- 1  # bottom
    9 <- 1  # cursor row
    10 <- 2  # cursor column
  ]
9993 parse: instruction: screen-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    .     .\n    .     .\n    .     .\n  ": "literal-string"}
9992 load: after rewriting: screen-should-contain [
    .     .
    .     .
    .     .
  ]
9999 parse: recipe scenario_editor-initializes-without-data has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_editor-initializes-without-data
9991 transform: --- deduce types for recipe scenario_editor-initializes-without-data
9992 transform: screen => <address : <shared : <screen : <>>>>
9991 transform: --- collect surrounding spaces for recipe scenario_editor-initializes-without-data
9991 transform: --- transform names for recipe scenario_editor-initializes-without-data
9991 transform: --- resolve ambiguous calls for recipe scenario_editor-initializes-without-data
9992 transform: instruction new-fake-screen
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for base: 100
9992 transform: checking variant 0: recipe new-fake-screen w:number h:number -> result:address:shared:screen
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 0: 100
9991 transform: --- compute instruction operations for recipe scenario_editor-initializes-without-data
9991 transform: --- transform braces for recipe scenario_editor-initializes-without-data
9992 transform: assume-screen ...
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform: screen-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_editor-initializes-without-data
9991 transform: --- type-check 'call' instructions inside recipe scenario_editor-initializes-without-data
9991 transform: --- type-check calls inside recipe scenario_editor-initializes-without-data
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_editor-initializes-without-data
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_editor-initializes-without-data
 102 run: screen:address:shared:screen <- new-fake-screen 5/width, 3/height
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1000
9999 mem: storing 10 in location 1001
 103 run: w:number <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 103 run: h:number <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1004
 103 run: result <- new screen:type
9999 mem: allocating size 6
9999 mem: new alloc: 1012
9999 mem: storing 1012 in location 1005
9999 mem: incrementing refcount of 1012: 0 -> 1
 103 run: width:address:number <- get-address *result, num-columns:offset
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1006
 103 run: *width <- copy w
9999 mem: location 1003 is 5
9999 mem: location 1006 is 1014
9999 mem: storing 5 in location 1014
 103 run: height:address:number <- get-address *result, num-rows:offset
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 0
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1007
 103 run: *height <- copy h
9999 mem: location 1004 is 3
9999 mem: location 1007 is 1013
9999 mem: storing 3 in location 1013
 103 run: row:address:number <- get-address *result, cursor-row:offset
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1008
 103 run: *row <- copy 0
9999 mem: location 1008 is 1015
9999 mem: storing 0 in location 1015
 103 run: column:address:number <- get-address *result, cursor-column:offset
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1009
 103 run: *column <- copy 0
9999 mem: location 1009 is 1016
9999 mem: storing 0 in location 1016
 103 run: bufsize:number <- multiply *width, *height
9999 mem: location 1006 is 1014
9999 mem: location 1014 is 5
9999 mem: location 1007 is 1013
9999 mem: location 1013 is 3
9999 mem: storing 15 in location 1010
 103 run: buf:address:address:shared:array:screen-cell <- get-address *result, data:offset
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1005 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9999 mem: storing 1017 in location 1011
 103 run: *buf <- new screen-cell:type, bufsize
9999 mem: location 1010 is 15
9999 mem: array size is 15
9999 mem: allocating size 32
9999 mem: new alloc: 1018
9999 mem: storing 15 in location 1019
9999 mem: location 1011 is 1017
9999 mem: storing 1018 in location 1017
9999 mem: incrementing refcount of 1018: 0 -> 1
 103 run: result <- clear-screen result
9999 mem: location 1005 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1050
9999 mem: storing 10 in location 1051
 104 run: screen:address:shared:screen <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1053
9999 mem: incrementing refcount of 1012: 1 -> 2
 104 run: jump-unless screen, 
9999 mem: location 1053 is 1012
9998 run: jump-unless fell through
 104 run: buf:address:shared:array:screen-cell <- get *screen, data:offset
9999 mem: location 1053 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1053 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1017
9998 run: its type is <address : <shared : <array : <screen-cell : <>>>>>
9999 mem: location 1017 is 1018
9999 mem: storing 1018 in location 1054
9999 mem: incrementing refcount of 1018: 1 -> 2
 104 run: max:number <- length *buf
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: storing 15 in location 1055
 104 run: i:number <- copy 0
9999 mem: storing 0 in location 1056
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 0
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 0
9999 mem: storing 1020 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1058 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1020
9999 mem: storing 0 in location 1020
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1058 is 1020
9998 run: address to copy is 1021
9999 mem: storing 1021 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1021
9999 mem: storing 7 in location 1021
 104 run: i <- add i, 1
9999 mem: location 1056 is 0
9999 mem: storing 1 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 1
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 1
9999 mem: storing 1022 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1058 is 1022
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1022
9999 mem: storing 0 in location 1022
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1058 is 1022
9998 run: address to copy is 1023
9999 mem: storing 1023 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1023
9999 mem: storing 7 in location 1023
 104 run: i <- add i, 1
9999 mem: location 1056 is 1
9999 mem: storing 2 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 2
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 2
9999 mem: storing 1024 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1058 is 1024
9998 run: address to copy is 1024
9999 mem: storing 1024 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1024
9999 mem: storing 0 in location 1024
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1058 is 1024
9998 run: address to copy is 1025
9999 mem: storing 1025 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1025
9999 mem: storing 7 in location 1025
 104 run: i <- add i, 1
9999 mem: location 1056 is 2
9999 mem: storing 3 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 3
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 3
9999 mem: storing 1026 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1026
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1058 is 1026
9998 run: address to copy is 1026
9999 mem: storing 1026 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1026
9999 mem: storing 0 in location 1026
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1026
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1058 is 1026
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1027
9999 mem: storing 7 in location 1027
 104 run: i <- add i, 1
9999 mem: location 1056 is 3
9999 mem: storing 4 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 4
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 4
9999 mem: storing 1028 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1028
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1058 is 1028
9998 run: address to copy is 1028
9999 mem: storing 1028 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1028
9999 mem: storing 0 in location 1028
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1028
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1058 is 1028
9998 run: address to copy is 1029
9999 mem: storing 1029 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1029
9999 mem: storing 7 in location 1029
 104 run: i <- add i, 1
9999 mem: location 1056 is 4
9999 mem: storing 5 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 5
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 5
9999 mem: storing 1030 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1030
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1058 is 1030
9998 run: address to copy is 1030
9999 mem: storing 1030 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1030
9999 mem: storing 0 in location 1030
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1030
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1058 is 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1031
9999 mem: storing 7 in location 1031
 104 run: i <- add i, 1
9999 mem: location 1056 is 5
9999 mem: storing 6 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 6
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 6
9999 mem: storing 1032 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1032
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1058 is 1032
9998 run: address to copy is 1032
9999 mem: storing 1032 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1032
9999 mem: storing 0 in location 1032
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1032
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1058 is 1032
9998 run: address to copy is 1033
9999 mem: storing 1033 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1033
9999 mem: storing 7 in location 1033
 104 run: i <- add i, 1
9999 mem: location 1056 is 6
9999 mem: storing 7 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 7
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 7
9999 mem: storing 1034 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1058 is 1034
9998 run: address to copy is 1034
9999 mem: storing 1034 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1034
9999 mem: storing 0 in location 1034
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1034
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1058 is 1034
9998 run: address to copy is 1035
9999 mem: storing 1035 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1035
9999 mem: storing 7 in location 1035
 104 run: i <- add i, 1
9999 mem: location 1056 is 7
9999 mem: storing 8 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 8
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 8
9999 mem: storing 1036 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1036
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1058 is 1036
9998 run: address to copy is 1036
9999 mem: storing 1036 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1036
9999 mem: storing 0 in location 1036
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1036
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1058 is 1036
9998 run: address to copy is 1037
9999 mem: storing 1037 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1037
9999 mem: storing 7 in location 1037
 104 run: i <- add i, 1
9999 mem: location 1056 is 8
9999 mem: storing 9 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 9
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 9
9999 mem: storing 1038 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1038
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1058 is 1038
9998 run: address to copy is 1038
9999 mem: storing 1038 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1038
9999 mem: storing 0 in location 1038
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1038
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1058 is 1038
9998 run: address to copy is 1039
9999 mem: storing 1039 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1039
9999 mem: storing 7 in location 1039
 104 run: i <- add i, 1
9999 mem: location 1056 is 9
9999 mem: storing 10 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 10
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 10
9999 mem: storing 1040 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1040
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1058 is 1040
9998 run: address to copy is 1040
9999 mem: storing 1040 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1040
9999 mem: storing 0 in location 1040
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1040
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1058 is 1040
9998 run: address to copy is 1041
9999 mem: storing 1041 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1041
9999 mem: storing 7 in location 1041
 104 run: i <- add i, 1
9999 mem: location 1056 is 10
9999 mem: storing 11 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 11
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 11
9999 mem: storing 1042 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1042
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1058 is 1042
9998 run: address to copy is 1042
9999 mem: storing 1042 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1042
9999 mem: storing 0 in location 1042
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1042
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1058 is 1042
9998 run: address to copy is 1043
9999 mem: storing 1043 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1043
9999 mem: storing 7 in location 1043
 104 run: i <- add i, 1
9999 mem: location 1056 is 11
9999 mem: storing 12 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 12
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 12
9999 mem: storing 1044 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1044
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1058 is 1044
9998 run: address to copy is 1044
9999 mem: storing 1044 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1044
9999 mem: storing 0 in location 1044
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1044
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1058 is 1044
9998 run: address to copy is 1045
9999 mem: storing 1045 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1045
9999 mem: storing 7 in location 1045
 104 run: i <- add i, 1
9999 mem: location 1056 is 12
9999 mem: storing 13 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 13
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 13
9999 mem: storing 1046 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1046
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: location 1058 is 1046
9998 run: address to copy is 1046
9999 mem: storing 1046 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1046
9999 mem: storing 0 in location 1046
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1046
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: location 1058 is 1046
9998 run: address to copy is 1047
9999 mem: storing 1047 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1047
9999 mem: storing 7 in location 1047
 104 run: i <- add i, 1
9999 mem: location 1056 is 13
9999 mem: storing 14 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 14
9999 mem: location 1055 is 15
9999 mem: storing 0 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1054 is 1018
9999 mem: skipping refcount at 1018
9999 mem: location 1056 is 14
9999 mem: storing 1048 in location 1058
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1058 is 1048
9999 mem: location 1048 is 0
9999 mem: location 1049 is 0
9999 mem: location 1058 is 1048
9998 run: address to copy is 1048
9999 mem: storing 1048 in location 1059
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1059 is 1048
9999 mem: storing 0 in location 1048
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1058 is 1048
9999 mem: location 1048 is 0
9999 mem: location 1049 is 0
9999 mem: location 1058 is 1048
9998 run: address to copy is 1049
9999 mem: storing 1049 in location 1060
 104 run: *curr-color <- copy 7/white
9999 mem: location 1060 is 1049
9999 mem: storing 7 in location 1049
 104 run: i <- add i, 1
9999 mem: location 1056 is 14
9999 mem: storing 15 in location 1056
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1056 is 15
9999 mem: location 1055 is 15
9999 mem: storing 1 in location 1057
 104 run: jump-if done?, 
9999 mem: location 1057 is 1
9998 run: jumping to instruction 17
 104 run: x:address:number <- get-address *screen, cursor-row:offset
9999 mem: location 1053 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1053 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1061
 104 run: *x <- copy 0
9999 mem: location 1061 is 1015
9999 mem: storing 0 in location 1015
 104 run: x <- get-address *screen, cursor-column:offset
9999 mem: location 1053 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1053 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1061
 104 run: *x <- copy 0
9999 mem: location 1061 is 1016
9999 mem: storing 0 in location 1016
 104 run: reply screen:address:shared:screen
9999 mem: location 1053 is 1012
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 2 -> 1
9999 mem: storing 1012 in location 1005
9999 mem: incrementing refcount of 1012: 1 -> 2
 103 run: reply result:address:shared:screen
9999 mem: location 1005 is 1012
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1012
9999 mem: storing 1012 in location 900
9999 mem: incrementing refcount of 1012: 2 -> 3
 102 run: run [
    1:address:shared:editor-data <- new-editor 0/data, screen:address:shared:screen, 2/left, 5/right
    2:editor-data <- copy *1:address:shared:editor-data
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: new-editor
9993 parse:   number of ingredients: 4
9993 parse:   ingredient: {"0": "literal", "data": <>}
9993 parse:   ingredient: {"screen": <"address" : <"shared" : <"screen" : <>>>>}
9993 parse:   ingredient: {"2": "literal", "left": <>}
9993 parse:   ingredient: {"5": "literal", "right": <>}
9993 parse:   product: {"1": <"address" : <"shared" : <"editor-data" : <>>>>}
9992 load: after rewriting: 1:address:shared:editor-data <- new-editor 0/data, screen:address:shared:screen, 2/left, 5/right
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"editor-data" : <>>>>, "lookup": <>}
9993 parse:   product: {"2": "editor-data"}
9992 load: after rewriting: 2:editor-data <- copy *1:address:shared:editor-data
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: screen => <address : <shared : <screen : <>>>>
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction new-editor
9993 transform: non-strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: ingredient 2
9993 transform: strict match: ingredient 3
9993 transform: strict match: product 0
9992 transform: score for base: 89
9992 transform: checking variant 0: recipe new-editor s:address:shared:array:character screen:address:shared:screen left:number right:number -> result:address:shared:editor-data screen:address:shared:screen
9993 transform: non-strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: ingredient 2
9993 transform: strict match: ingredient 3
9993 transform: strict match: product 0
9992 transform: score for variant 0: 89
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new-editor ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:editor-data <- new-editor 0/data, screen:address:shared:screen, 2/left, 5/right
9999 mem: location 900 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1062
9999 mem: storing 11 in location 1063
 104 run: s:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1065
 104 run: screen:address:shared:screen <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1066
9999 mem: incrementing refcount of 1012: 3 -> 4
 104 run: left:number <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1067
 104 run: right:number <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1068
 104 run: right <- subtract right, 1
9999 mem: location 1068 is 5
9999 mem: storing 4 in location 1068
 104 run: result <- new editor-data:type
9999 mem: allocating size 13
9999 mem: new alloc: 1075
9999 mem: storing 1075 in location 1069
9999 mem: incrementing refcount of 1075: 0 -> 1
 104 run: x:address:number <- get-address *result, left:offset
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1081 is 0
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1080
9999 mem: storing 1080 in location 1070
 104 run: *x <- copy left
9999 mem: location 1067 is 2
9999 mem: location 1070 is 1080
9999 mem: storing 2 in location 1080
 104 run: x <- get-address *result, right:offset
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 2
9999 mem: location 1081 is 0
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1081
9999 mem: storing 1081 in location 1070
 104 run: *x <- copy right
9999 mem: location 1068 is 4
9999 mem: location 1070 is 1081
9999 mem: storing 4 in location 1081
 104 run: x <- get-address *result, cursor-row:offset
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1083
9999 mem: storing 1083 in location 1070
 104 run: *x <- copy 1/top
9999 mem: location 1070 is 1083
9999 mem: storing 1 in location 1083
 104 run: x <- get-address *result, cursor-column:offset
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1084
9999 mem: storing 1084 in location 1070
 104 run: *x <- copy left
9999 mem: location 1067 is 2
9999 mem: location 1070 is 1084
9999 mem: storing 2 in location 1084
 104 run: init:address:address:shared:duplex-list:character <- get-address *result, data:offset
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1076
9999 mem: storing 1076 in location 1071
 104 run: *init <- push_3 167/§, 0/tail
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1088
9999 mem: storing 7 in location 1089
 105 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 167 in location 1091
 105 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1092
 105 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1097
9999 mem: storing 1097 in location 1093
9999 mem: incrementing refcount of 1097: 0 -> 1
 105 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1093 is 1097
9999 mem: skipping refcount at 1097
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1098 is 0
9999 mem: location 1099 is 0
9999 mem: location 1100 is 0
9999 mem: location 1093 is 1097
9999 mem: skipping refcount at 1097
9998 run: address to copy is 1098
9999 mem: storing 1098 in location 1094
 105 run: *val <- copy x
9999 mem: location 1091 is 167
9999 mem: location 1094 is 1098
9999 mem: storing 167 in location 1098
 105 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1093 is 1097
9999 mem: skipping refcount at 1097
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1098 is 167
9999 mem: location 1099 is 0
9999 mem: location 1100 is 0
9999 mem: location 1093 is 1097
9999 mem: skipping refcount at 1097
9999 type: type deduced to be character$
9998 run: address to copy is 1099
9999 mem: storing 1099 in location 1095
 105 run: *next <- copy in
9999 mem: location 1092 is 0
9999 mem: location 1095 is 1099
9999 mem: storing 0 in location 1099
 105 run: jump-unless in, 
9999 mem: location 1092 is 0
9998 run: jumping to instruction 12
 105 run: reply result
9999 mem: location 1093 is 1097
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1097
9999 mem: location 1071 is 1076
9999 mem: storing 1097 in location 1076
9999 mem: incrementing refcount of 1097: 1 -> 2
 104 run: top-of-screen:address:address:shared:duplex-list:character <- get-address *result, top-of-screen:offset
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1077
9999 mem: storing 1077 in location 1072
 104 run: *top-of-screen <- copy *init
9999 mem: location 1071 is 1076
9999 mem: location 1076 is 1097
9999 mem: location 1072 is 1077
9999 mem: storing 1097 in location 1077
9999 mem: incrementing refcount of 1097: 2 -> 3
 104 run: y:address:address:shared:duplex-list:character <- get-address *result, before-cursor:offset
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 1097
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1079
9999 mem: storing 1079 in location 1073
 104 run: *y <- copy *init
9999 mem: location 1071 is 1076
9999 mem: location 1076 is 1097
9999 mem: location 1073 is 1079
9999 mem: storing 1097 in location 1079
9999 mem: incrementing refcount of 1097: 3 -> 4
 104 run: result <- insert-text result, s
9999 mem: location 1069 is 1075
9999 mem: location 1065 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1101
9999 mem: storing 8 in location 1102
 105 run: editor:address:shared:editor-data <- next-ingredient-without-typechecking 
9999 mem: storing 1075 in location 1104
9999 mem: incrementing refcount of 1075: 1 -> 2
 105 run: text:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1105
 105 run: jump-if text, 1:offset
9999 mem: location 1105 is 0
9998 run: jump-if fell through
 105 run: reply editor/same-as-ingredient:0
9999 mem: location 1104 is 1075
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1075
9999 mem: decrementing refcount of 1075: 2 -> 1
9999 mem: storing 1075 in location 1069
9999 mem: incrementing refcount of 1075: 1 -> 2
 104 run: y <- get-address *result, before-cursor:offset
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 1097
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1097
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1079
9999 mem: storing 1079 in location 1073
 104 run: *y <- copy *init
9999 mem: location 1071 is 1076
9999 mem: location 1076 is 1097
9999 mem: location 1073 is 1079
9999 mem: decrementing refcount of 1097: 4 -> 3
9999 mem: storing 1097 in location 1079
9999 mem: incrementing refcount of 1097: 3 -> 4
 104 run: _, _, screen, result <- render screen, result
9999 mem: location 1066 is 1012
9999 mem: location 1069 is 1075
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 28
9999 mem: allocating size 30
9999 mem: new alloc: 1111
9999 mem: storing 28 in location 1112
 105 run: screen:address:shared:screen <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1114
9999 mem: incrementing refcount of 1012: 4 -> 5
 105 run: editor:address:shared:editor-data <- next-ingredient-without-typechecking 
9999 mem: storing 1075 in location 1115
9999 mem: incrementing refcount of 1075: 2 -> 3
 105 run: jump-if editor, 1:offset
9999 mem: location 1115 is 1075
9998 run: jumping to instruction 5
 105 run: left:number <- get *editor, left:offset
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 1097
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1097
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1080
9998 run: its type is number
9999 mem: location 1080 is 2
9999 mem: storing 2 in location 1116
 105 run: screen-height:number <- screen-height screen
9999 mem: location 1114 is 1012
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1141
9999 mem: storing 3 in location 1142
 106 run: screen:address:shared:screen <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1144
9999 mem: incrementing refcount of 1012: 5 -> 6
 106 run: jump-unless screen, 
9999 mem: location 1144 is 1012
9998 run: jump-unless fell through
 106 run: height <- get *screen, num-rows:offset
9999 mem: location 1144 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1144 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is number
9999 mem: location 1013 is 3
9999 mem: storing 3 in location 1145
 106 run: reply height:number
9999 mem: location 1145 is 3
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 3
9999 mem: storing 3 in location 1117
 105 run: right:number <- get *editor, right:offset
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 1097
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1097
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1081
9998 run: its type is number
9999 mem: location 1081 is 4
9999 mem: storing 4 in location 1118
 105 run: curr:address:shared:duplex-list:character <- get *editor, top-of-screen:offset
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 1097
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1097
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1077
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1077 is 1097
9999 mem: storing 1097 in location 1119
9999 mem: incrementing refcount of 1097: 4 -> 5
 105 run: prev:address:shared:duplex-list:character <- copy curr
9999 mem: location 1119 is 1097
9999 mem: storing 1097 in location 1120
9999 mem: incrementing refcount of 1097: 5 -> 6
 105 run: curr <- next_2 curr
9999 mem: location 1119 is 1097
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 106 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1097 in location 1144
9999 mem: incrementing refcount of 1097: 6 -> 7
 106 run: jump-if in, 1:offset
9999 mem: location 1144 is 1097
9998 run: jumping to instruction 4
 106 run: result <- get *in, next:offset
9999 mem: location 1144 is 1097
9999 mem: skipping refcount at 1097
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1098 is 167
9999 mem: location 1099 is 0
9999 mem: location 1100 is 0
9999 mem: location 1144 is 1097
9999 mem: skipping refcount at 1097
9999 type: type deduced to be character$
9998 run: address to copy is 1099
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1099 is 0
9999 mem: storing 0 in location 1145
 106 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1145 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: decrementing refcount of 1097: 7 -> 6
9999 mem: storing 0 in location 1119
 105 run: color:number <- copy 7/white
9999 mem: storing 7 in location 1121
 105 run: row:number <- copy 1/top
9999 mem: storing 1 in location 1122
 105 run: column:number <- copy left
9999 mem: location 1116 is 2
9999 mem: storing 2 in location 1123
 105 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 1097
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1097
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1083
9999 mem: storing 1083 in location 1124
 105 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 1097
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1097
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1084
9999 mem: storing 1084 in location 1125
 105 run: before-cursor:address:address:shared:duplex-list:character <- get-address *editor, before-cursor:offset
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 1097
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1097
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1079
9999 mem: storing 1079 in location 1126
 105 run: screen <- move-cursor screen, row, column
9999 mem: location 1114 is 1012
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1146
9999 mem: storing 6 in location 1147
 106 run: screen:address:shared:screen <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1149
9999 mem: incrementing refcount of 1012: 6 -> 7
 106 run: new-row:number <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1150
 106 run: new-column:number <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1151
 106 run: jump-unless screen, 
9999 mem: location 1149 is 1012
9998 run: jump-unless fell through
 106 run: row:address:number <- get-address *screen, cursor-row:offset
9999 mem: location 1149 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1149 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1152
 106 run: *row <- copy new-row
9999 mem: location 1150 is 1
9999 mem: location 1152 is 1015
9999 mem: storing 1 in location 1015
 106 run: column:address:number <- get-address *screen, cursor-column:offset
9999 mem: location 1149 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 3
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1
9999 mem: location 1016 is 0
9999 mem: location 1017 is 1018
9999 mem: location 1149 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1153
 106 run: *column <- copy new-column
9999 mem: location 1151 is 2
9999 mem: location 1153 is 1016
9999 mem: storing 2 in location 1016
 106 run: reply screen:address:shared:screen
9999 mem: location 1149 is 1012
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 7 -> 6
9999 mem: storing 1012 in location 1114
9999 mem: incrementing refcount of 1012: 6 -> 7
 105 run: jump-unless curr, 
9999 mem: location 1119 is 0
9998 run: jumping to instruction 68
 105 run: bottom-of-screen:address:address:shared:duplex-list:character <- get-address *editor, bottom-of-screen:offset
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 1097
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1097
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1078
9999 mem: storing 1078 in location 1135
 105 run: *bottom-of-screen <- copy curr
9999 mem: location 1119 is 0
9999 mem: location 1135 is 1078
9999 mem: storing 0 in location 1078
 105 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1122 is 1
9999 mem: location 1124 is 1083
9999 mem: location 1083 is 1
9999 mem: storing 1 in location 1128
 105 run: cursor-outside-line?:boolean <- lesser-or-equal column, *cursor-column
9999 mem: location 1123 is 2
9999 mem: location 1125 is 1084
9999 mem: location 1084 is 2
9999 mem: storing 1 in location 1136
 105 run: before-cursor-on-same-line?:boolean <- and at-cursor-row?, cursor-outside-line?
9999 mem: location 1128 is 1
9999 mem: location 1136 is 1
9999 mem: storing 1 in location 1137
 105 run: above-cursor-row?:boolean <- lesser-than row, *cursor-row
9999 mem: location 1122 is 1
9999 mem: location 1124 is 1083
9999 mem: location 1083 is 1
9999 mem: storing 0 in location 1138
 105 run: before-cursor?:boolean <- or before-cursor-on-same-line?, above-cursor-row?
9999 mem: location 1137 is 1
9999 mem: location 1138 is 0
9999 mem: storing 1 in location 1139
 105 run: jump-unless before-cursor?, 
9999 mem: location 1139 is 1
9998 run: jump-unless fell through
 105 run: *cursor-row <- copy row
9999 mem: location 1122 is 1
9999 mem: location 1124 is 1083
9999 mem: storing 1 in location 1083
 105 run: *cursor-column <- copy column
9999 mem: location 1123 is 2
9999 mem: location 1125 is 1084
9999 mem: storing 2 in location 1084
 105 run: *before-cursor <- copy prev
9999 mem: location 1120 is 1097
9999 mem: location 1126 is 1079
9999 mem: decrementing refcount of 1097: 6 -> 5
9999 mem: storing 1097 in location 1079
9999 mem: incrementing refcount of 1097: 5 -> 6
 105 run: bottom:address:number <- get-address *editor, bottom:offset
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 1097
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1097
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 0
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1115 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1082
9999 mem: storing 1082 in location 1140
 105 run: *bottom <- copy row
9999 mem: location 1122 is 1
9999 mem: location 1140 is 1082
9999 mem: storing 1 in location 1082
 105 run: reply row, column, screen/same-as-ingredient:0, editor/same-as-ingredient:1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 2
9999 mem: location 1114 is 1012
9999 mem: location 1115 is 1075
9999 abandon: saving in free-list of size 30
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9998 run: result 1 is 2
9998 run: result 2 is 1012
9998 run: result 3 is 1075
9999 mem: decrementing refcount of 1012: 7 -> 6
9999 mem: storing 1012 in location 1066
9999 mem: incrementing refcount of 1012: 6 -> 7
9999 mem: decrementing refcount of 1075: 3 -> 2
9999 mem: storing 1075 in location 1069
9999 mem: incrementing refcount of 1075: 2 -> 3
 104 run: indent?:address:boolean <- get-address *result, indent?:offset
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 1097
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1097
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 1
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1069 is 1075
9999 mem: skipping refcount at 1075
9998 run: address to copy is 1085
9999 mem: storing 1085 in location 1074
 104 run: *indent? <- copy 1/true
9999 mem: location 1074 is 1085
9999 mem: storing 1 in location 1085
 104 run: reply result:address:shared:editor-data, screen:address:shared:screen
9999 mem: location 1069 is 1075
9999 mem: location 1066 is 1012
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1075
9999 mem: storing 1075 in location 1
9999 mem: incrementing refcount of 1075: 3 -> 4
 103 run: 2:editor-data <- copy *1:address:shared:editor-data
9999 mem: location 1 is 1075
9999 mem: skipping refcount at 1075
9999 mem: location 1076 is 1097
9999 mem: location 1077 is 1097
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1097
9999 mem: location 1080 is 2
9999 mem: location 1081 is 4
9999 mem: location 1082 is 1
9999 mem: location 1083 is 1
9999 mem: location 1084 is 2
9999 mem: location 1085 is 1
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: storing 1097 in location 2
9999 mem: storing 1097 in location 3
9999 mem: storing 0 in location 4
9999 mem: storing 1097 in location 5
9999 mem: storing 2 in location 6
9999 mem: storing 4 in location 7
9999 mem: storing 1 in location 8
9999 mem: storing 1 in location 9
9999 mem: storing 2 in location 10
9999 mem: storing 1 in location 11
9999 mem: storing 0 in location 12
9999 mem: storing 0 in location 13
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    # 2 (data) <- just the § sentinel
    # 3 (top of screen) <- the § sentinel
    4 <- 0  # bottom-of-screen; null since text fits on screen
    # 5 (before cursor) <- the § sentinel
    6 <- 2  # left
    7 <- 4  # right  (inclusive)
    8 <- 1  # bottom
    9 <- 1  # cursor row
    10 <- 2  # cursor column
  ]
9999 run: checking location 4
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
 102 run: screen-should-contain [
    .     .
    .     .
    .     .
  ]
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
