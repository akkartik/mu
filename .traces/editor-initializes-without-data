parse: instruction: assume-screen
parse:   ingredient: {name: "5", properties: ["5": "literal", "width": ]}
parse:   ingredient: {name: "3", properties: ["3": "literal", "height": ]}
parse: instruction: run
parse:   ingredient: {name: "\n    1:address:editor-data <- new-editor 0/data, screen:address, 2/left, 5/right\n    2:editor-data <- copy *1:address:editor-data\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    # 2 (data) <- just the ยง sentinel\n    # 3 (top of screen) <- the ยง sentinel\n    4 <- 0  # bottom-of-screen; null since text fits on screen\n    # 5 (before cursor) <- the ยง sentinel\n    6 <- 2  # left\n    7 <- 4  # right  (inclusive)\n    8 <- 1  # cursor row\n    9 <- 2  # cursor column\n  ", properties: [_: "literal-string"]}
parse: instruction: screen-should-contain
parse:   ingredient: {name: "\n    .     .\n    .     .\n    .     .\n  ", properties: [_: "literal-string"]}
after-brace: recipe scenario-editor-initializes-without-data
after-brace: new-fake-screen ...
after-brace: run ...
after-brace: memory-should-contain ...
after-brace: screen-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: scenario-editor-initializes-without-data
 101 run: screen:address <- new-fake-screen 5/width, 3/height
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1000
 102 run: result:address:screen <- new screen:type
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1002
 102 run: width:address:number <- get-address *result, num-columns:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1010
9999 mem: storing 1010 in location 1003
 102 run: *width <- next-ingredient 
9999 mem: location 1003 is 1010
9999 mem: storing 5 in location 1010
 102 run: height:address:number <- get-address *result, num-rows:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 0
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1004
 102 run: *height <- next-ingredient 
9999 mem: location 1004 is 1009
9999 mem: storing 3 in location 1009
 102 run: row:address:number <- get-address *result, cursor-row:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 102 run: *row <- copy 0
9999 mem: location 1005 is 1011
9999 mem: location 1005 is 1011
9999 mem: storing 0 in location 1011
 102 run: column:address:number <- get-address *result, cursor-column:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 102 run: *column <- copy 0
9999 mem: location 1006 is 1012
9999 mem: location 1006 is 1012
9999 mem: storing 0 in location 1012
 102 run: bufsize:number <- multiply *width, *height
9999 mem: location 1003 is 1010
9999 mem: location 1010 is 5
9999 mem: location 1004 is 1009
9999 mem: location 1009 is 3
9999 mem: storing 15 in location 1007
 102 run: buf:address:address:array:screen-cell <- get-address *result, data:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1008
 102 run: *buf <- new screen-cell:type, bufsize
9999 mem: location 1007 is 15
9999 mem: array size is 15
9999 mem: new alloc: 1014
9999 mem: location 1008 is 1013
9999 mem: storing 1014 in location 1013
 102 run: clear-screen result
9999 mem: location 1002 is 1009
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1045
 103 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1047
 103 run: break-unless sc, 
9999 mem: location 1047 is 1009
9999 run: jump-unless fell through
 103 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1047 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1047 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1048
 103 run: max:number <- length *buf
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1048 is 1014
9999 mem: storing 15 in location 1049
 103 run: i:number <- copy 0
9999 mem: storing 0 in location 1050
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 0
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 0
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 0
9999 mem: storing 1015 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1052 is 1015
9999 run: address to copy is 1015
9999 mem: storing 1015 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1015
9999 mem: location 1053 is 1015
9999 mem: storing 0 in location 1015
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1052 is 1015
9999 run: address to copy is 1016
9999 mem: storing 1016 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1016
9999 mem: location 1054 is 1016
9999 mem: storing 7 in location 1016
 103 run: i <- add i, 1
9999 mem: location 1050 is 0
9999 mem: storing 1 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 1
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 1
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 1
9999 mem: storing 1017 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1017
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1052 is 1017
9999 run: address to copy is 1017
9999 mem: storing 1017 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1017
9999 mem: location 1053 is 1017
9999 mem: storing 0 in location 1017
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1017
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1052 is 1017
9999 run: address to copy is 1018
9999 mem: storing 1018 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1018
9999 mem: location 1054 is 1018
9999 mem: storing 7 in location 1018
 103 run: i <- add i, 1
9999 mem: location 1050 is 1
9999 mem: storing 2 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 2
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 2
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 2
9999 mem: storing 1019 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1019
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1052 is 1019
9999 run: address to copy is 1019
9999 mem: storing 1019 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1019
9999 mem: location 1053 is 1019
9999 mem: storing 0 in location 1019
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1019
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1052 is 1019
9999 run: address to copy is 1020
9999 mem: storing 1020 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1020
9999 mem: location 1054 is 1020
9999 mem: storing 7 in location 1020
 103 run: i <- add i, 1
9999 mem: location 1050 is 2
9999 mem: storing 3 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 3
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 3
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 3
9999 mem: storing 1021 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1021
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1052 is 1021
9999 run: address to copy is 1021
9999 mem: storing 1021 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1021
9999 mem: location 1053 is 1021
9999 mem: storing 0 in location 1021
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1021
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1052 is 1021
9999 run: address to copy is 1022
9999 mem: storing 1022 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1022
9999 mem: location 1054 is 1022
9999 mem: storing 7 in location 1022
 103 run: i <- add i, 1
9999 mem: location 1050 is 3
9999 mem: storing 4 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 4
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 4
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 4
9999 mem: storing 1023 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1052 is 1023
9999 run: address to copy is 1023
9999 mem: storing 1023 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1023
9999 mem: location 1053 is 1023
9999 mem: storing 0 in location 1023
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1052 is 1023
9999 run: address to copy is 1024
9999 mem: storing 1024 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1024
9999 mem: location 1054 is 1024
9999 mem: storing 7 in location 1024
 103 run: i <- add i, 1
9999 mem: location 1050 is 4
9999 mem: storing 5 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 5
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 5
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 5
9999 mem: storing 1025 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1052 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1025
9999 mem: location 1053 is 1025
9999 mem: storing 0 in location 1025
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1052 is 1025
9999 run: address to copy is 1026
9999 mem: storing 1026 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1026
9999 mem: location 1054 is 1026
9999 mem: storing 7 in location 1026
 103 run: i <- add i, 1
9999 mem: location 1050 is 5
9999 mem: storing 6 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 6
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 6
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 6
9999 mem: storing 1027 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1027
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1052 is 1027
9999 run: address to copy is 1027
9999 mem: storing 1027 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1027
9999 mem: location 1053 is 1027
9999 mem: storing 0 in location 1027
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1027
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1052 is 1027
9999 run: address to copy is 1028
9999 mem: storing 1028 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1028
9999 mem: location 1054 is 1028
9999 mem: storing 7 in location 1028
 103 run: i <- add i, 1
9999 mem: location 1050 is 6
9999 mem: storing 7 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 7
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 7
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 7
9999 mem: storing 1029 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1052 is 1029
9999 run: address to copy is 1029
9999 mem: storing 1029 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1029
9999 mem: location 1053 is 1029
9999 mem: storing 0 in location 1029
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1052 is 1029
9999 run: address to copy is 1030
9999 mem: storing 1030 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1030
9999 mem: location 1054 is 1030
9999 mem: storing 7 in location 1030
 103 run: i <- add i, 1
9999 mem: location 1050 is 7
9999 mem: storing 8 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 8
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 0
9999 mem: location 1030 is 7
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 8
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 8
9999 mem: storing 1031 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1052 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1031
9999 mem: location 1053 is 1031
9999 mem: storing 0 in location 1031
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1052 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1032
9999 mem: location 1054 is 1032
9999 mem: storing 7 in location 1032
 103 run: i <- add i, 1
9999 mem: location 1050 is 8
9999 mem: storing 9 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 9
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 0
9999 mem: location 1030 is 7
9999 mem: location 1031 is 0
9999 mem: location 1032 is 7
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 9
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 9
9999 mem: storing 1033 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1033
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1052 is 1033
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1033
9999 mem: location 1053 is 1033
9999 mem: storing 0 in location 1033
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1033
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1052 is 1033
9999 run: address to copy is 1034
9999 mem: storing 1034 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1034
9999 mem: location 1054 is 1034
9999 mem: storing 7 in location 1034
 103 run: i <- add i, 1
9999 mem: location 1050 is 9
9999 mem: storing 10 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 10
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 0
9999 mem: location 1030 is 7
9999 mem: location 1031 is 0
9999 mem: location 1032 is 7
9999 mem: location 1033 is 0
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 10
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 10
9999 mem: storing 1035 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1035
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1052 is 1035
9999 run: address to copy is 1035
9999 mem: storing 1035 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1035
9999 mem: location 1053 is 1035
9999 mem: storing 0 in location 1035
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1035
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1052 is 1035
9999 run: address to copy is 1036
9999 mem: storing 1036 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1036
9999 mem: location 1054 is 1036
9999 mem: storing 7 in location 1036
 103 run: i <- add i, 1
9999 mem: location 1050 is 10
9999 mem: storing 11 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 11
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 0
9999 mem: location 1030 is 7
9999 mem: location 1031 is 0
9999 mem: location 1032 is 7
9999 mem: location 1033 is 0
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 11
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 11
9999 mem: storing 1037 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1037
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1052 is 1037
9999 run: address to copy is 1037
9999 mem: storing 1037 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1037
9999 mem: location 1053 is 1037
9999 mem: storing 0 in location 1037
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1037
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1052 is 1037
9999 run: address to copy is 1038
9999 mem: storing 1038 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1038
9999 mem: location 1054 is 1038
9999 mem: storing 7 in location 1038
 103 run: i <- add i, 1
9999 mem: location 1050 is 11
9999 mem: storing 12 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 12
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 0
9999 mem: location 1030 is 7
9999 mem: location 1031 is 0
9999 mem: location 1032 is 7
9999 mem: location 1033 is 0
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 12
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 12
9999 mem: storing 1039 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1039
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1052 is 1039
9999 run: address to copy is 1039
9999 mem: storing 1039 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1039
9999 mem: location 1053 is 1039
9999 mem: storing 0 in location 1039
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1039
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1052 is 1039
9999 run: address to copy is 1040
9999 mem: storing 1040 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1040
9999 mem: location 1054 is 1040
9999 mem: storing 7 in location 1040
 103 run: i <- add i, 1
9999 mem: location 1050 is 12
9999 mem: storing 13 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 13
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 0
9999 mem: location 1030 is 7
9999 mem: location 1031 is 0
9999 mem: location 1032 is 7
9999 mem: location 1033 is 0
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 13
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 13
9999 mem: storing 1041 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1041
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1052 is 1041
9999 run: address to copy is 1041
9999 mem: storing 1041 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1041
9999 mem: location 1053 is 1041
9999 mem: storing 0 in location 1041
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1041
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1052 is 1041
9999 run: address to copy is 1042
9999 mem: storing 1042 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1042
9999 mem: location 1054 is 1042
9999 mem: storing 7 in location 1042
 103 run: i <- add i, 1
9999 mem: location 1050 is 13
9999 mem: storing 14 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 14
9999 mem: location 1049 is 15
9999 mem: storing 0 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 0
9999 run: jump-if fell through
 103 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1048 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 0
9999 mem: location 1030 is 7
9999 mem: location 1031 is 0
9999 mem: location 1032 is 7
9999 mem: location 1033 is 0
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1050 is 14
9999 mem: location 1048 is 1014
9999 mem: location 1050 is 14
9999 mem: storing 1043 in location 1052
 103 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1052 is 1043
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1052 is 1043
9999 run: address to copy is 1043
9999 mem: storing 1043 in location 1053
 103 run: *curr-content <- copy [ ]
9999 mem: location 1053 is 1043
9999 mem: location 1053 is 1043
9999 mem: storing 0 in location 1043
 103 run: curr-color:address:character <- get-address *curr, color:offset
9999 mem: location 1052 is 1043
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1052 is 1043
9999 run: address to copy is 1044
9999 mem: storing 1044 in location 1054
 103 run: *curr-color <- copy 7/white
9999 mem: location 1054 is 1044
9999 mem: location 1054 is 1044
9999 mem: storing 7 in location 1044
 103 run: i <- add i, 1
9999 mem: location 1050 is 14
9999 mem: storing 15 in location 1050
 103 run: loop 
9999 run: jumping to instruction 8
 103 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1050 is 15
9999 mem: location 1049 is 15
9999 mem: storing 1 in location 1051
 103 run: break-if done?, 
9999 mem: location 1051 is 1
9999 run: jumping to instruction 17
 103 run: x:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1047 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1047 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1055
 103 run: *x <- copy 0
9999 mem: location 1055 is 1011
9999 mem: location 1055 is 1011
9999 mem: storing 0 in location 1011
 103 run: x <- get-address *sc, cursor-column:offset
9999 mem: location 1047 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1047 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1055
 103 run: *x <- copy 0
9999 mem: location 1055 is 1012
9999 mem: location 1055 is 1012
9999 mem: storing 0 in location 1012
 103 run: reply sc/same-as-ingredient:0
9999 mem: location 1047 is 1009
 102 run: reply result
9999 mem: location 1002 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 900
 101 run: run [
    1:address:editor-data <- new-editor 0/data, screen:address, 2/left, 5/right
    2:editor-data <- copy *1:address:editor-data
  ]
parse: instruction: new-editor
parse:   ingredient: {name: "0", properties: ["0": "literal", "data": ]}
parse:   ingredient: {name: "screen", properties: ["screen": "address"]}
parse:   ingredient: {name: "2", properties: ["2": "literal", "left": ]}
parse:   ingredient: {name: "5", properties: ["5": "literal", "right": ]}
parse:   product: {name: "1", properties: ["1": "address":"editor-data"]}
parse: instruction: copy
parse:   ingredient: {name: "1", properties: ["*1": "address":"editor-data", "lookup": ]}
parse:   product: {name: "2", properties: ["2": "editor-data"]}
after-brace: recipe run1001
after-brace: new-editor ...
after-brace: copy ...
 101 run: 1:address:editor-data <- new-editor 0/data, screen:address, 2/left, 5/right
9999 mem: location 900 is 1009
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1056
 102 run: s:address:array:character <- next-ingredient 
9999 mem: storing 0 in location 1058
 102 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1059
 102 run: left:number <- next-ingredient 
9999 mem: storing 2 in location 1060
 102 run: right:number <- next-ingredient 
9999 mem: storing 5 in location 1061
 102 run: right <- subtract right, 1
9999 mem: location 1061 is 5
9999 mem: storing 4 in location 1061
 102 run: result:address:editor-data <- new editor-data:type
9999 mem: storing 1000 in location 1062
 102 run: x:address:number <- get-address *result, left:offset
9999 mem: location 1062 is 1000
9999 mem: location 1000 is 0
9999 mem: location 1001 is 0
9999 mem: location 1002 is 0
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 0
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1062 is 1000
9999 run: address to copy is 1004
9999 mem: storing 1004 in location 1063
 102 run: *x <- copy left
9999 mem: location 1060 is 2
9999 mem: location 1063 is 1004
9999 mem: location 1063 is 1004
9999 mem: storing 2 in location 1004
 102 run: x <- get-address *result, right:offset
9999 mem: location 1062 is 1000
9999 mem: location 1000 is 0
9999 mem: location 1001 is 0
9999 mem: location 1002 is 0
9999 mem: location 1003 is 0
9999 mem: location 1004 is 2
9999 mem: location 1005 is 0
9999 mem: location 1006 is 0
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1062 is 1000
9999 run: address to copy is 1005
9999 mem: storing 1005 in location 1063
 102 run: *x <- copy right
9999 mem: location 1061 is 4
9999 mem: location 1063 is 1005
9999 mem: location 1063 is 1005
9999 mem: storing 4 in location 1005
 102 run: x <- get-address *result, cursor-row:offset
9999 mem: location 1062 is 1000
9999 mem: location 1000 is 0
9999 mem: location 1001 is 0
9999 mem: location 1002 is 0
9999 mem: location 1003 is 0
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 0
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1062 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1063
 102 run: *x <- copy 1/top
9999 mem: location 1063 is 1006
9999 mem: location 1063 is 1006
9999 mem: storing 1 in location 1006
 102 run: x <- get-address *result, cursor-column:offset
9999 mem: location 1062 is 1000
9999 mem: location 1000 is 0
9999 mem: location 1001 is 0
9999 mem: location 1002 is 0
9999 mem: location 1003 is 0
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1062 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1063
 102 run: *x <- copy left
9999 mem: location 1060 is 2
9999 mem: location 1063 is 1007
9999 mem: location 1063 is 1007
9999 mem: storing 2 in location 1007
 102 run: init:address:address:duplex-list <- get-address *result, data:offset
9999 mem: location 1062 is 1000
9999 mem: location 1000 is 0
9999 mem: location 1001 is 0
9999 mem: location 1002 is 0
9999 mem: location 1003 is 0
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 0
9999 mem: location 1062 is 1000
9999 run: address to copy is 1000
9999 mem: storing 1000 in location 1064
 102 run: *init <- push-duplex 167/ยง, 0/tail
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1068
 103 run: x:location <- next-ingredient 
9999 mem: storing 167 in location 1070
 103 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 0 in location 1071
 103 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1076
9999 mem: storing 1076 in location 1072
 103 run: val:address:location <- get-address *result, value:offset
9999 mem: location 1072 is 1076
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1072 is 1076
9999 run: address to copy is 1076
9999 mem: storing 1076 in location 1073
 103 run: *val <- copy x
9999 mem: location 1070 is 167
9999 mem: location 1073 is 1076
9999 mem: location 1073 is 1076
9999 mem: storing 167 in location 1076
 103 run: next:address:address:duplex-list <- get-address *result, next:offset
9999 mem: location 1072 is 1076
9999 mem: location 1076 is 167
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1072 is 1076
9999 run: address to copy is 1077
9999 mem: storing 1077 in location 1074
 103 run: *next <- copy in
9999 mem: location 1071 is 0
9999 mem: location 1074 is 1077
9999 mem: location 1074 is 1077
9999 mem: storing 0 in location 1077
 103 run: jump-if in, 1:offset
9999 mem: location 1071 is 0
9999 run: jump-if fell through
 103 run: reply result
9999 mem: location 1072 is 1076
9999 run: result 0 is 1076
9999 mem: location 1064 is 1000
9999 mem: storing 1076 in location 1000
 102 run: top-of-screen:address:address:duplex-list <- get-address *result, top-of-screen:offset
9999 mem: location 1062 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1001 is 0
9999 mem: location 1002 is 0
9999 mem: location 1003 is 0
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 0
9999 mem: location 1062 is 1000
9999 run: address to copy is 1001
9999 mem: storing 1001 in location 1065
 102 run: *top-of-screen <- copy *init
9999 mem: location 1064 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1064 is 1000
9999 mem: location 1065 is 1001
9999 mem: location 1064 is 1000
9999 mem: location 1065 is 1001
9999 mem: storing 1076 in location 1001
 102 run: y:address:address:duplex-list <- get-address *result, before-cursor:offset
9999 mem: location 1062 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1001 is 1076
9999 mem: location 1002 is 0
9999 mem: location 1003 is 0
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 0
9999 mem: location 1062 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1066
 102 run: *y <- copy *init
9999 mem: location 1064 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1064 is 1000
9999 mem: location 1066 is 1003
9999 mem: location 1064 is 1000
9999 mem: location 1066 is 1003
9999 mem: storing 1076 in location 1003
 102 run: result <- insert-text result, s
9999 mem: location 1062 is 1000
9999 mem: location 1058 is 0
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1079
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1081
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 0 in location 1082
 103 run: jump-if text, 1:offset
9999 mem: location 1082 is 0
9999 run: jump-if fell through
 103 run: reply editor/same-as-ingredient:0
9999 mem: location 1081 is 1000
9999 run: result 0 is 1000
9999 mem: storing 1000 in location 1062
 102 run: y <- get-address *result, before-cursor:offset
9999 mem: location 1062 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1001 is 1076
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1076
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 0
9999 mem: location 1062 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1066
 102 run: *y <- copy *init
9999 mem: location 1064 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1064 is 1000
9999 mem: location 1066 is 1003
9999 mem: location 1064 is 1000
9999 mem: location 1066 is 1003
9999 mem: storing 1076 in location 1003
 102 run: _, screen <- render screen, result
9999 mem: location 1059 is 1009
9999 mem: location 1062 is 1000
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 28
9999 mem: new alloc: 1088
 103 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1090
 103 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1091
 103 run: jump-if editor, 1:offset
9999 mem: location 1091 is 1000
9999 run: jumping to instruction 5
 103 run: left:number <- get *editor, left:offset
9999 mem: location 1091 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1001 is 1076
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1076
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 0
9999 mem: location 1091 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 2
9999 mem: storing 2 in location 1092
 103 run: screen-height:number <- screen-height screen
9999 mem: location 1090 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1117
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1119
 104 run: break-unless sc, 
9999 mem: location 1119 is 1009
9999 run: jump-unless fell through
 104 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1119 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1119 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1120
 104 run: reply height
9999 mem: location 1120 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 1093
 103 run: right:number <- get *editor, right:offset
9999 mem: location 1091 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1001 is 1076
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1076
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 0
9999 mem: location 1091 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 4
9999 mem: storing 4 in location 1094
 103 run: hide-screen screen
9999 mem: location 1090 is 1009
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1121
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1123
 104 run: break-unless screen, 
9999 mem: location 1123 is 1009
9999 run: jump-unless fell through
 104 run: reply screen
9999 mem: location 1123 is 1009
 103 run: curr:address:duplex-list <- get *editor, top-of-screen:offset
9999 mem: location 1091 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1001 is 1076
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1076
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 0
9999 mem: location 1091 is 1000
9999 run: address to copy is 1001
9999 run: its type is address
9999 mem: location 1001 is 1076
9999 mem: storing 1076 in location 1095
 103 run: prev:address:duplex-list <- copy curr
9999 mem: location 1095 is 1076
9999 mem: storing 1076 in location 1096
 103 run: curr <- next-duplex curr
9999 mem: location 1095 is 1076
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1076 in location 1119
 104 run: jump-if in, 1:offset
9999 mem: location 1119 is 1076
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1119 is 1076
9999 mem: location 1076 is 167
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1119 is 1076
9999 run: address to copy is 1077
9999 run: its type is address
9999 mem: location 1077 is 0
9999 mem: storing 0 in location 1120
 104 run: reply result
9999 mem: location 1120 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1095
 103 run: color:number <- copy 7/white
9999 mem: storing 7 in location 1097
 103 run: row:number <- copy 1/top
9999 mem: storing 1 in location 1098
 103 run: column:number <- copy left
9999 mem: location 1092 is 2
9999 mem: storing 2 in location 1099
 103 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1091 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1001 is 1076
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1076
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 0
9999 mem: location 1091 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1100
 103 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1091 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1001 is 1076
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1076
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 0
9999 mem: location 1091 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1101
 103 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1091 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1001 is 1076
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1076
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 0
9999 mem: location 1091 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1102
 103 run: move-cursor screen, row, column
9999 mem: location 1090 is 1009
9999 mem: location 1098 is 1
9999 mem: location 1099 is 2
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1124
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1126
 104 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1127
 104 run: new-column:number <- next-ingredient 
9999 mem: storing 2 in location 1128
 104 run: break-unless sc, 
9999 mem: location 1126 is 1009
9999 run: jump-unless fell through
 104 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1126 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1126 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1129
 104 run: *row <- copy new-row
9999 mem: location 1127 is 1
9999 mem: location 1129 is 1011
9999 mem: location 1129 is 1011
9999 mem: storing 1 in location 1011
 104 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1126 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1126 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1130
 104 run: *column <- copy new-column
9999 mem: location 1128 is 2
9999 mem: location 1130 is 1012
9999 mem: location 1130 is 1012
9999 mem: storing 2 in location 1012
 104 run: reply sc/same-as-ingredient:0
9999 mem: location 1126 is 1009
 103 run: break-unless curr, 
9999 mem: location 1095 is 0
9999 run: jumping to instruction 68
 103 run: bottom-of-screen:address:address:duplex-list <- get-address *editor, bottom-of-screen:offset
9999 mem: location 1091 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1001 is 1076
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1076
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 0
9999 mem: location 1091 is 1000
9999 run: address to copy is 1002
9999 mem: storing 1002 in location 1110
 103 run: *bottom-of-screen <- copy curr
9999 mem: location 1095 is 0
9999 mem: location 1110 is 1002
9999 mem: location 1110 is 1002
9999 mem: storing 0 in location 1002
 103 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1098 is 1
9999 mem: location 1100 is 1006
9999 mem: location 1006 is 1
9999 mem: storing 1 in location 1104
 103 run: cursor-outside-line?:boolean <- lesser-or-equal column, *cursor-column
9999 mem: location 1099 is 2
9999 mem: location 1101 is 1007
9999 mem: location 1007 is 2
9999 mem: storing 1 in location 1111
 103 run: before-cursor-on-same-line?:boolean <- and at-cursor-row?, cursor-outside-line?
9999 mem: location 1104 is 1
9999 mem: location 1111 is 1
9999 mem: storing 1 in location 1112
 103 run: above-cursor-row?:boolean <- lesser-than row, *cursor-row
9999 mem: location 1098 is 1
9999 mem: location 1100 is 1006
9999 mem: location 1006 is 1
9999 mem: storing 0 in location 1113
 103 run: before-cursor?:boolean <- or before-cursor-on-same-line?, above-cursor-row?
9999 mem: location 1112 is 1
9999 mem: location 1113 is 0
9999 mem: storing 1 in location 1114
 103 run: break-unless before-cursor?, 
9999 mem: location 1114 is 1
9999 run: jump-unless fell through
 103 run: *cursor-row <- copy row
9999 mem: location 1098 is 1
9999 mem: location 1100 is 1006
9999 mem: location 1100 is 1006
9999 mem: storing 1 in location 1006
 103 run: *cursor-column <- copy column
9999 mem: location 1099 is 2
9999 mem: location 1101 is 1007
9999 mem: location 1101 is 1007
9999 mem: storing 2 in location 1007
 103 run: too-far-right?:boolean <- greater-than *cursor-column, right
9999 mem: location 1101 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1094 is 4
9999 mem: storing 0 in location 1115
 103 run: break-unless too-far-right?, 
9999 mem: location 1115 is 0
9999 run: jumping to instruction 87
 103 run: *before-cursor <- copy prev
9999 mem: location 1096 is 1076
9999 mem: location 1102 is 1003
9999 mem: location 1102 is 1003
9999 mem: storing 1076 in location 1003
 103 run: clear-line-delimited screen, column, right
9999 mem: location 1090 is 1009
9999 mem: location 1099 is 2
9999 mem: location 1094 is 4
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1126
 104 run: left:number <- next-ingredient 
9999 mem: storing 2 in location 1127
 104 run: right:number <- next-ingredient 
9999 mem: storing 4 in location 1128
 104 run: column:number <- copy left
9999 mem: location 1127 is 2
9999 mem: storing 2 in location 1129
 104 run: done?:boolean <- greater-than column, right
9999 mem: location 1129 is 2
9999 mem: location 1128 is 4
9999 mem: storing 0 in location 1130
 104 run: break-if done?, 
9999 mem: location 1130 is 0
9999 run: jump-if fell through
 104 run: print-character screen, 32/space
9999 mem: location 1126 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
9999 mem: new alloc: 1131
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1133
 105 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1134
 105 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1135
9999 mem: storing 0 in location 1136
 105 run: break-if color-found?, 
9999 mem: location 1136 is 0
9999 run: jump-if fell through
 105 run: color <- copy 7/white
9999 mem: storing 7 in location 1135
 105 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1137
9999 mem: storing 0 in location 1138
 105 run: break-if bg-color-found?, 
9999 mem: location 1138 is 0
9999 run: jump-if fell through
 105 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1137
 105 run: break-unless sc, 
9999 mem: location 1133 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1139
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1140
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1141
 105 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1142
 105 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 21
 105 run: legal? <- lesser-than *row, height
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1140 is 3
9999 mem: storing 1 in location 1142
 105 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 24
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1143
 105 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 1 in location 1142
 105 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 28
 105 run: legal? <- lesser-than *column, width
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1139 is 5
9999 mem: storing 1 in location 1142
 105 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 31
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1134 is 32
9999 mem: storing 0 in location 1144
 105 run: break-unless newline?, 
9999 mem: location 1144 is 0
9999 run: jumping to instruction 42
 105 run: index:number <- multiply *row, width
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1139 is 5
9999 mem: storing 5 in location 1147
 105 run: index <- add index, *column
9999 mem: location 1147 is 5
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 7 in location 1147
 105 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1148
 105 run: len:number <- length *buf
9999 mem: location 1148 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 0
9999 mem: location 1030 is 7
9999 mem: location 1031 is 0
9999 mem: location 1032 is 7
9999 mem: location 1033 is 0
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1148 is 1014
9999 mem: storing 15 in location 1149
 105 run: backspace?:boolean <- equal c, 8
9999 mem: location 1134 is 32
9999 mem: storing 0 in location 1150
 105 run: break-unless backspace?, 
9999 mem: location 1150 is 0
9999 run: jumping to instruction 62
 105 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1148 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 0
9999 mem: location 1030 is 7
9999 mem: location 1031 is 0
9999 mem: location 1032 is 7
9999 mem: location 1033 is 0
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1147 is 7
9999 mem: location 1148 is 1014
9999 mem: location 1147 is 7
9999 mem: storing 1029 in location 1152
 105 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1152 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 7
9999 mem: location 1152 is 1029
9999 run: address to copy is 1029
9999 mem: storing 1029 in location 1153
 105 run: *cursor-contents <- copy c
9999 mem: location 1134 is 32
9999 mem: location 1153 is 1029
9999 mem: location 1153 is 1029
9999 mem: storing 32 in location 1029
 105 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1152 is 1029
9999 mem: location 1029 is 32
9999 mem: location 1030 is 7
9999 mem: location 1152 is 1029
9999 run: address to copy is 1030
9999 mem: storing 1030 in location 1154
 105 run: *cursor-color <- copy color
9999 mem: location 1135 is 7
9999 mem: location 1154 is 1030
9999 mem: location 1154 is 1030
9999 mem: storing 7 in location 1030
 105 run: right:number <- subtract width, 1
9999 mem: location 1139 is 5
9999 mem: storing 4 in location 1155
 105 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1155 is 4
9999 mem: storing 0 in location 1156
 105 run: break-if at-right?, 
9999 mem: location 1156 is 0
9999 run: jump-if fell through
 105 run: *column <- add *column, 1
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1143 is 1012
9999 mem: storing 3 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1133 is 1009
 104 run: column <- add column, 1
9999 mem: location 1129 is 2
9999 mem: storing 3 in location 1129
 104 run: loop 
9999 run: jumping to instruction 6
 104 run: done?:boolean <- greater-than column, right
9999 mem: location 1129 is 3
9999 mem: location 1128 is 4
9999 mem: storing 0 in location 1130
 104 run: break-if done?, 
9999 mem: location 1130 is 0
9999 run: jump-if fell through
 104 run: print-character screen, 32/space
9999 mem: location 1126 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1133
 105 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1134
 105 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1135
9999 mem: storing 0 in location 1136
 105 run: break-if color-found?, 
9999 mem: location 1136 is 0
9999 run: jump-if fell through
 105 run: color <- copy 7/white
9999 mem: storing 7 in location 1135
 105 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1137
9999 mem: storing 0 in location 1138
 105 run: break-if bg-color-found?, 
9999 mem: location 1138 is 0
9999 run: jump-if fell through
 105 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1137
 105 run: break-unless sc, 
9999 mem: location 1133 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1139
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1140
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1141
 105 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1142
 105 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 21
 105 run: legal? <- lesser-than *row, height
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1140 is 3
9999 mem: storing 1 in location 1142
 105 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 24
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1143
 105 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 3
9999 mem: storing 1 in location 1142
 105 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 28
 105 run: legal? <- lesser-than *column, width
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1139 is 5
9999 mem: storing 1 in location 1142
 105 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 31
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1134 is 32
9999 mem: storing 0 in location 1144
 105 run: break-unless newline?, 
9999 mem: location 1144 is 0
9999 run: jumping to instruction 42
 105 run: index:number <- multiply *row, width
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1139 is 5
9999 mem: storing 5 in location 1147
 105 run: index <- add index, *column
9999 mem: location 1147 is 5
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 3
9999 mem: storing 8 in location 1147
 105 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1148
 105 run: len:number <- length *buf
9999 mem: location 1148 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 32
9999 mem: location 1030 is 7
9999 mem: location 1031 is 0
9999 mem: location 1032 is 7
9999 mem: location 1033 is 0
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1148 is 1014
9999 mem: storing 15 in location 1149
 105 run: backspace?:boolean <- equal c, 8
9999 mem: location 1134 is 32
9999 mem: storing 0 in location 1150
 105 run: break-unless backspace?, 
9999 mem: location 1150 is 0
9999 run: jumping to instruction 62
 105 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1148 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 32
9999 mem: location 1030 is 7
9999 mem: location 1031 is 0
9999 mem: location 1032 is 7
9999 mem: location 1033 is 0
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1147 is 8
9999 mem: location 1148 is 1014
9999 mem: location 1147 is 8
9999 mem: storing 1031 in location 1152
 105 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1152 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 7
9999 mem: location 1152 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1153
 105 run: *cursor-contents <- copy c
9999 mem: location 1134 is 32
9999 mem: location 1153 is 1031
9999 mem: location 1153 is 1031
9999 mem: storing 32 in location 1031
 105 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1152 is 1031
9999 mem: location 1031 is 32
9999 mem: location 1032 is 7
9999 mem: location 1152 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1154
 105 run: *cursor-color <- copy color
9999 mem: location 1135 is 7
9999 mem: location 1154 is 1032
9999 mem: location 1154 is 1032
9999 mem: storing 7 in location 1032
 105 run: right:number <- subtract width, 1
9999 mem: location 1139 is 5
9999 mem: storing 4 in location 1155
 105 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1155 is 4
9999 mem: storing 0 in location 1156
 105 run: break-if at-right?, 
9999 mem: location 1156 is 0
9999 run: jump-if fell through
 105 run: *column <- add *column, 1
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1143 is 1012
9999 mem: storing 4 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1133 is 1009
 104 run: column <- add column, 1
9999 mem: location 1129 is 3
9999 mem: storing 4 in location 1129
 104 run: loop 
9999 run: jumping to instruction 6
 104 run: done?:boolean <- greater-than column, right
9999 mem: location 1129 is 4
9999 mem: location 1128 is 4
9999 mem: storing 0 in location 1130
 104 run: break-if done?, 
9999 mem: location 1130 is 0
9999 run: jump-if fell through
 104 run: print-character screen, 32/space
9999 mem: location 1126 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1133
 105 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1134
 105 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1135
9999 mem: storing 0 in location 1136
 105 run: break-if color-found?, 
9999 mem: location 1136 is 0
9999 run: jump-if fell through
 105 run: color <- copy 7/white
9999 mem: storing 7 in location 1135
 105 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1137
9999 mem: storing 0 in location 1138
 105 run: break-if bg-color-found?, 
9999 mem: location 1138 is 0
9999 run: jump-if fell through
 105 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1137
 105 run: break-unless sc, 
9999 mem: location 1133 is 1009
9999 run: jump-unless fell through
 105 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1139
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1140
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1141
 105 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1142
 105 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 21
 105 run: legal? <- lesser-than *row, height
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1140 is 3
9999 mem: storing 1 in location 1142
 105 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 24
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1143
 105 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 4
9999 mem: storing 1 in location 1142
 105 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 28
 105 run: legal? <- lesser-than *column, width
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 4
9999 mem: location 1139 is 5
9999 mem: storing 1 in location 1142
 105 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 31
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1134 is 32
9999 mem: storing 0 in location 1144
 105 run: break-unless newline?, 
9999 mem: location 1144 is 0
9999 run: jumping to instruction 42
 105 run: index:number <- multiply *row, width
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1139 is 5
9999 mem: storing 5 in location 1147
 105 run: index <- add index, *column
9999 mem: location 1147 is 5
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 4
9999 mem: storing 9 in location 1147
 105 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1148
 105 run: len:number <- length *buf
9999 mem: location 1148 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 32
9999 mem: location 1030 is 7
9999 mem: location 1031 is 32
9999 mem: location 1032 is 7
9999 mem: location 1033 is 0
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1148 is 1014
9999 mem: storing 15 in location 1149
 105 run: backspace?:boolean <- equal c, 8
9999 mem: location 1134 is 32
9999 mem: storing 0 in location 1150
 105 run: break-unless backspace?, 
9999 mem: location 1150 is 0
9999 run: jumping to instruction 62
 105 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1148 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 32
9999 mem: location 1030 is 7
9999 mem: location 1031 is 32
9999 mem: location 1032 is 7
9999 mem: location 1033 is 0
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1147 is 9
9999 mem: location 1148 is 1014
9999 mem: location 1147 is 9
9999 mem: storing 1033 in location 1152
 105 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1152 is 1033
9999 mem: location 1033 is 0
9999 mem: location 1034 is 7
9999 mem: location 1152 is 1033
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1153
 105 run: *cursor-contents <- copy c
9999 mem: location 1134 is 32
9999 mem: location 1153 is 1033
9999 mem: location 1153 is 1033
9999 mem: storing 32 in location 1033
 105 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1152 is 1033
9999 mem: location 1033 is 32
9999 mem: location 1034 is 7
9999 mem: location 1152 is 1033
9999 run: address to copy is 1034
9999 mem: storing 1034 in location 1154
 105 run: *cursor-color <- copy color
9999 mem: location 1135 is 7
9999 mem: location 1154 is 1034
9999 mem: location 1154 is 1034
9999 mem: storing 7 in location 1034
 105 run: right:number <- subtract width, 1
9999 mem: location 1139 is 5
9999 mem: storing 4 in location 1155
 105 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 4
9999 mem: location 1155 is 4
9999 mem: storing 1 in location 1156
 105 run: break-if at-right?, 
9999 mem: location 1156 is 1
9999 run: jumping to instruction 73
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1133 is 1009
 104 run: column <- add column, 1
9999 mem: location 1129 is 4
9999 mem: storing 5 in location 1129
 104 run: loop 
9999 run: jumping to instruction 6
 104 run: done?:boolean <- greater-than column, right
9999 mem: location 1129 is 5
9999 mem: location 1128 is 4
9999 mem: storing 1 in location 1130
 104 run: break-if done?, 
9999 mem: location 1130 is 1
9999 run: jumping to instruction 11
 103 run: clear-rest-of-screen screen, row, left, right
9999 mem: location 1090 is 1009
9999 mem: location 1098 is 1
9999 mem: location 1092 is 2
9999 mem: location 1094 is 4
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 104 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1070
 104 run: row:number <- next-ingredient 
9999 mem: storing 1 in location 1071
 104 run: left:number <- next-ingredient 
9999 mem: storing 2 in location 1072
 104 run: right:number <- next-ingredient 
9999 mem: storing 4 in location 1073
 104 run: row <- add row, 1
9999 mem: location 1071 is 1
9999 mem: storing 2 in location 1071
 104 run: move-cursor screen, row, left
9999 mem: location 1070 is 1009
9999 mem: location 1071 is 2
9999 mem: location 1072 is 2
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1126
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 2 in location 1127
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 2 in location 1128
 105 run: break-unless sc, 
9999 mem: location 1126 is 1009
9999 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1126 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 1
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1126 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1129
 105 run: *row <- copy new-row
9999 mem: location 1127 is 2
9999 mem: location 1129 is 1011
9999 mem: location 1129 is 1011
9999 mem: storing 2 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1126 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1126 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1130
 105 run: *column <- copy new-column
9999 mem: location 1128 is 2
9999 mem: location 1130 is 1012
9999 mem: location 1130 is 1012
9999 mem: storing 2 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1126 is 1009
 104 run: screen-height:number <- screen-height screen
9999 mem: location 1070 is 1009
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1119
 105 run: break-unless sc, 
9999 mem: location 1119 is 1009
9999 run: jump-unless fell through
 105 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1119 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1119 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1120
 105 run: reply height
9999 mem: location 1120 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 1074
 104 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1071 is 2
9999 mem: location 1074 is 3
9999 mem: storing 0 in location 1075
 104 run: break-if at-bottom-of-screen?, 
9999 mem: location 1075 is 0
9999 run: jump-if fell through
 104 run: move-cursor screen, row, left
9999 mem: location 1070 is 1009
9999 mem: location 1071 is 2
9999 mem: location 1072 is 2
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1126
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 2 in location 1127
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 2 in location 1128
 105 run: break-unless sc, 
9999 mem: location 1126 is 1009
9999 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1126 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1126 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1129
 105 run: *row <- copy new-row
9999 mem: location 1127 is 2
9999 mem: location 1129 is 1011
9999 mem: location 1129 is 1011
9999 mem: storing 2 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1126 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1126 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1130
 105 run: *column <- copy new-column
9999 mem: location 1128 is 2
9999 mem: location 1130 is 1012
9999 mem: location 1130 is 1012
9999 mem: storing 2 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1126 is 1009
 104 run: clear-line-delimited screen, left, right
9999 mem: location 1070 is 1009
9999 mem: location 1072 is 2
9999 mem: location 1073 is 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1126
 105 run: left:number <- next-ingredient 
9999 mem: storing 2 in location 1127
 105 run: right:number <- next-ingredient 
9999 mem: storing 4 in location 1128
 105 run: column:number <- copy left
9999 mem: location 1127 is 2
9999 mem: storing 2 in location 1129
schedule: clear-line-delimited/clear-rest-of-screen/render/new-editor/run1001/scenario-editor-initializes-without-data
 105 run: done?:boolean <- greater-than column, right
9999 mem: location 1129 is 2
9999 mem: location 1128 is 4
9999 mem: storing 0 in location 1130
 105 run: break-if done?, 
9999 mem: location 1130 is 0
9999 run: jump-if fell through
 105 run: print-character screen, 32/space
9999 mem: location 1126 is 1009
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1133
 106 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1134
 106 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1135
9999 mem: storing 0 in location 1136
 106 run: break-if color-found?, 
9999 mem: location 1136 is 0
9999 run: jump-if fell through
 106 run: color <- copy 7/white
9999 mem: storing 7 in location 1135
 106 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1137
9999 mem: storing 0 in location 1138
 106 run: break-if bg-color-found?, 
9999 mem: location 1138 is 0
9999 run: jump-if fell through
 106 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1137
 106 run: break-unless sc, 
9999 mem: location 1133 is 1009
9999 run: jump-unless fell through
 106 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1139
 106 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1140
 106 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1141
 106 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 2
9999 mem: storing 1 in location 1142
 106 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 21
 106 run: legal? <- lesser-than *row, height
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 2
9999 mem: location 1140 is 3
9999 mem: storing 1 in location 1142
 106 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 24
 106 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1143
 106 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 1 in location 1142
 106 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 28
 106 run: legal? <- lesser-than *column, width
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1139 is 5
9999 mem: storing 1 in location 1142
 106 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 31
 106 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1134 is 32
9999 mem: storing 0 in location 1144
 106 run: break-unless newline?, 
9999 mem: location 1144 is 0
9999 run: jumping to instruction 42
 106 run: index:number <- multiply *row, width
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 2
9999 mem: location 1139 is 5
9999 mem: storing 10 in location 1147
 106 run: index <- add index, *column
9999 mem: location 1147 is 10
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 12 in location 1147
 106 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1148
 106 run: len:number <- length *buf
9999 mem: location 1148 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 32
9999 mem: location 1030 is 7
9999 mem: location 1031 is 32
9999 mem: location 1032 is 7
9999 mem: location 1033 is 32
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1148 is 1014
9999 mem: storing 15 in location 1149
 106 run: backspace?:boolean <- equal c, 8
9999 mem: location 1134 is 32
9999 mem: storing 0 in location 1150
 106 run: break-unless backspace?, 
9999 mem: location 1150 is 0
9999 run: jumping to instruction 62
 106 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1148 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 32
9999 mem: location 1030 is 7
9999 mem: location 1031 is 32
9999 mem: location 1032 is 7
9999 mem: location 1033 is 32
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1147 is 12
9999 mem: location 1148 is 1014
9999 mem: location 1147 is 12
9999 mem: storing 1039 in location 1152
 106 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1152 is 1039
9999 mem: location 1039 is 0
9999 mem: location 1040 is 7
9999 mem: location 1152 is 1039
9999 run: address to copy is 1039
9999 mem: storing 1039 in location 1153
 106 run: *cursor-contents <- copy c
9999 mem: location 1134 is 32
9999 mem: location 1153 is 1039
9999 mem: location 1153 is 1039
9999 mem: storing 32 in location 1039
 106 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1152 is 1039
9999 mem: location 1039 is 32
9999 mem: location 1040 is 7
9999 mem: location 1152 is 1039
9999 run: address to copy is 1040
9999 mem: storing 1040 in location 1154
 106 run: *cursor-color <- copy color
9999 mem: location 1135 is 7
9999 mem: location 1154 is 1040
9999 mem: location 1154 is 1040
9999 mem: storing 7 in location 1040
 106 run: right:number <- subtract width, 1
9999 mem: location 1139 is 5
9999 mem: storing 4 in location 1155
 106 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1155 is 4
9999 mem: storing 0 in location 1156
 106 run: break-if at-right?, 
9999 mem: location 1156 is 0
9999 run: jump-if fell through
 106 run: *column <- add *column, 1
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1143 is 1012
9999 mem: storing 3 in location 1012
 106 run: reply sc/same-as-ingredient:0
9999 mem: location 1133 is 1009
 105 run: column <- add column, 1
9999 mem: location 1129 is 2
9999 mem: storing 3 in location 1129
 105 run: loop 
9999 run: jumping to instruction 6
 105 run: done?:boolean <- greater-than column, right
9999 mem: location 1129 is 3
9999 mem: location 1128 is 4
9999 mem: storing 0 in location 1130
 105 run: break-if done?, 
9999 mem: location 1130 is 0
9999 run: jump-if fell through
 105 run: print-character screen, 32/space
9999 mem: location 1126 is 1009
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1133
 106 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1134
 106 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1135
9999 mem: storing 0 in location 1136
 106 run: break-if color-found?, 
9999 mem: location 1136 is 0
9999 run: jump-if fell through
 106 run: color <- copy 7/white
9999 mem: storing 7 in location 1135
 106 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1137
9999 mem: storing 0 in location 1138
 106 run: break-if bg-color-found?, 
9999 mem: location 1138 is 0
9999 run: jump-if fell through
 106 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1137
 106 run: break-unless sc, 
9999 mem: location 1133 is 1009
9999 run: jump-unless fell through
 106 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1139
 106 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1140
 106 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1141
 106 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 2
9999 mem: storing 1 in location 1142
 106 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 21
 106 run: legal? <- lesser-than *row, height
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 2
9999 mem: location 1140 is 3
9999 mem: storing 1 in location 1142
 106 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 24
 106 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1143
 106 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 3
9999 mem: storing 1 in location 1142
 106 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 28
 106 run: legal? <- lesser-than *column, width
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1139 is 5
9999 mem: storing 1 in location 1142
 106 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 31
 106 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1134 is 32
9999 mem: storing 0 in location 1144
 106 run: break-unless newline?, 
9999 mem: location 1144 is 0
9999 run: jumping to instruction 42
 106 run: index:number <- multiply *row, width
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 2
9999 mem: location 1139 is 5
9999 mem: storing 10 in location 1147
 106 run: index <- add index, *column
9999 mem: location 1147 is 10
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 3
9999 mem: storing 13 in location 1147
 106 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1148
 106 run: len:number <- length *buf
9999 mem: location 1148 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 32
9999 mem: location 1030 is 7
9999 mem: location 1031 is 32
9999 mem: location 1032 is 7
9999 mem: location 1033 is 32
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 32
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1148 is 1014
9999 mem: storing 15 in location 1149
 106 run: backspace?:boolean <- equal c, 8
9999 mem: location 1134 is 32
9999 mem: storing 0 in location 1150
 106 run: break-unless backspace?, 
9999 mem: location 1150 is 0
9999 run: jumping to instruction 62
 106 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1148 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 32
9999 mem: location 1030 is 7
9999 mem: location 1031 is 32
9999 mem: location 1032 is 7
9999 mem: location 1033 is 32
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 32
9999 mem: location 1040 is 7
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1147 is 13
9999 mem: location 1148 is 1014
9999 mem: location 1147 is 13
9999 mem: storing 1041 in location 1152
 106 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1152 is 1041
9999 mem: location 1041 is 0
9999 mem: location 1042 is 7
9999 mem: location 1152 is 1041
9999 run: address to copy is 1041
9999 mem: storing 1041 in location 1153
 106 run: *cursor-contents <- copy c
9999 mem: location 1134 is 32
9999 mem: location 1153 is 1041
9999 mem: location 1153 is 1041
9999 mem: storing 32 in location 1041
 106 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1152 is 1041
9999 mem: location 1041 is 32
9999 mem: location 1042 is 7
9999 mem: location 1152 is 1041
9999 run: address to copy is 1042
9999 mem: storing 1042 in location 1154
 106 run: *cursor-color <- copy color
9999 mem: location 1135 is 7
9999 mem: location 1154 is 1042
9999 mem: location 1154 is 1042
9999 mem: storing 7 in location 1042
 106 run: right:number <- subtract width, 1
9999 mem: location 1139 is 5
9999 mem: storing 4 in location 1155
 106 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1155 is 4
9999 mem: storing 0 in location 1156
 106 run: break-if at-right?, 
9999 mem: location 1156 is 0
9999 run: jump-if fell through
 106 run: *column <- add *column, 1
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1143 is 1012
9999 mem: storing 4 in location 1012
 106 run: reply sc/same-as-ingredient:0
9999 mem: location 1133 is 1009
 105 run: column <- add column, 1
9999 mem: location 1129 is 3
9999 mem: storing 4 in location 1129
 105 run: loop 
9999 run: jumping to instruction 6
 105 run: done?:boolean <- greater-than column, right
9999 mem: location 1129 is 4
9999 mem: location 1128 is 4
9999 mem: storing 0 in location 1130
 105 run: break-if done?, 
9999 mem: location 1130 is 0
9999 run: jump-if fell through
 105 run: print-character screen, 32/space
9999 mem: location 1126 is 1009
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 106 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1133
 106 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1134
 106 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1135
9999 mem: storing 0 in location 1136
 106 run: break-if color-found?, 
9999 mem: location 1136 is 0
9999 run: jump-if fell through
 106 run: color <- copy 7/white
9999 mem: storing 7 in location 1135
 106 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1137
9999 mem: storing 0 in location 1138
 106 run: break-if bg-color-found?, 
9999 mem: location 1138 is 0
9999 run: jump-if fell through
 106 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1137
 106 run: break-unless sc, 
9999 mem: location 1133 is 1009
9999 run: jump-unless fell through
 106 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 5
9999 mem: storing 5 in location 1139
 106 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1140
 106 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1141
 106 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 2
9999 mem: storing 1 in location 1142
 106 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 21
 106 run: legal? <- lesser-than *row, height
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 2
9999 mem: location 1140 is 3
9999 mem: storing 1 in location 1142
 106 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 24
 106 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1143
 106 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 4
9999 mem: storing 1 in location 1142
 106 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 28
 106 run: legal? <- lesser-than *column, width
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 4
9999 mem: location 1139 is 5
9999 mem: storing 1 in location 1142
 106 run: jump-if legal?, 1:offset
9999 mem: location 1142 is 1
9999 run: jumping to instruction 31
 106 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1134 is 32
9999 mem: storing 0 in location 1144
 106 run: break-unless newline?, 
9999 mem: location 1144 is 0
9999 run: jumping to instruction 42
 106 run: index:number <- multiply *row, width
9999 mem: location 1141 is 1011
9999 mem: location 1011 is 2
9999 mem: location 1139 is 5
9999 mem: storing 10 in location 1147
 106 run: index <- add index, *column
9999 mem: location 1147 is 10
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 4
9999 mem: storing 14 in location 1147
 106 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1133 is 1009
9999 mem: location 1009 is 3
9999 mem: location 1010 is 5
9999 mem: location 1011 is 2
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1014
9999 mem: location 1133 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1148
 106 run: len:number <- length *buf
9999 mem: location 1148 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 32
9999 mem: location 1030 is 7
9999 mem: location 1031 is 32
9999 mem: location 1032 is 7
9999 mem: location 1033 is 32
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 32
9999 mem: location 1040 is 7
9999 mem: location 1041 is 32
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1148 is 1014
9999 mem: storing 15 in location 1149
 106 run: backspace?:boolean <- equal c, 8
9999 mem: location 1134 is 32
9999 mem: storing 0 in location 1150
 106 run: break-unless backspace?, 
9999 mem: location 1150 is 0
9999 run: jumping to instruction 62
 106 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1148 is 1014
9999 mem: location 1014 is 15
9999 mem: location 1015 is 0
9999 mem: location 1016 is 7
9999 mem: location 1017 is 0
9999 mem: location 1018 is 7
9999 mem: location 1019 is 0
9999 mem: location 1020 is 7
9999 mem: location 1021 is 0
9999 mem: location 1022 is 7
9999 mem: location 1023 is 0
9999 mem: location 1024 is 7
9999 mem: location 1025 is 0
9999 mem: location 1026 is 7
9999 mem: location 1027 is 0
9999 mem: location 1028 is 7
9999 mem: location 1029 is 32
9999 mem: location 1030 is 7
9999 mem: location 1031 is 32
9999 mem: location 1032 is 7
9999 mem: location 1033 is 32
9999 mem: location 1034 is 7
9999 mem: location 1035 is 0
9999 mem: location 1036 is 7
9999 mem: location 1037 is 0
9999 mem: location 1038 is 7
9999 mem: location 1039 is 32
9999 mem: location 1040 is 7
9999 mem: location 1041 is 32
9999 mem: location 1042 is 7
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1147 is 14
9999 mem: location 1148 is 1014
9999 mem: location 1147 is 14
9999 mem: storing 1043 in location 1152
 106 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1152 is 1043
9999 mem: location 1043 is 0
9999 mem: location 1044 is 7
9999 mem: location 1152 is 1043
9999 run: address to copy is 1043
9999 mem: storing 1043 in location 1153
 106 run: *cursor-contents <- copy c
9999 mem: location 1134 is 32
9999 mem: location 1153 is 1043
9999 mem: location 1153 is 1043
9999 mem: storing 32 in location 1043
 106 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1152 is 1043
9999 mem: location 1043 is 32
9999 mem: location 1044 is 7
9999 mem: location 1152 is 1043
9999 run: address to copy is 1044
9999 mem: storing 1044 in location 1154
 106 run: *cursor-color <- copy color
9999 mem: location 1135 is 7
9999 mem: location 1154 is 1044
9999 mem: location 1154 is 1044
9999 mem: storing 7 in location 1044
 106 run: right:number <- subtract width, 1
9999 mem: location 1139 is 5
9999 mem: storing 4 in location 1155
 106 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1143 is 1012
9999 mem: location 1012 is 4
9999 mem: location 1155 is 4
9999 mem: storing 1 in location 1156
 106 run: break-if at-right?, 
9999 mem: location 1156 is 1
9999 run: jumping to instruction 73
 106 run: reply sc/same-as-ingredient:0
9999 mem: location 1133 is 1009
 105 run: column <- add column, 1
9999 mem: location 1129 is 4
9999 mem: storing 5 in location 1129
 105 run: loop 
9999 run: jumping to instruction 6
 105 run: done?:boolean <- greater-than column, right
9999 mem: location 1129 is 5
9999 mem: location 1128 is 4
9999 mem: storing 1 in location 1130
 105 run: break-if done?, 
9999 mem: location 1130 is 1
9999 run: jumping to instruction 11
 104 run: row <- add row, 1
9999 mem: location 1071 is 2
9999 mem: storing 3 in location 1071
 104 run: loop 
9999 run: jumping to instruction 9
 104 run: at-bottom-of-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1071 is 3
9999 mem: location 1074 is 3
9999 mem: storing 1 in location 1075
 104 run: break-if at-bottom-of-screen?, 
9999 mem: location 1075 is 1
9999 run: jumping to instruction 15
 103 run: reply row, screen/same-as-ingredient:0
9999 mem: location 1098 is 1
9999 mem: location 1090 is 1009
9999 run: result 0 is 1
9999 run: result 1 is 1009
9999 mem: storing 1009 in location 1059
 102 run: indent:address:boolean <- get-address *result, indent:offset
9999 mem: location 1062 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1001 is 1076
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1076
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 0
9999 mem: location 1062 is 1000
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1067
 102 run: *indent <- copy 1/true
9999 mem: location 1067 is 1008
9999 mem: location 1067 is 1008
9999 mem: storing 1 in location 1008
 102 run: reply result
9999 mem: location 1062 is 1000
9999 run: result 0 is 1000
9999 mem: storing 1000 in location 1
 101 run: 2:editor-data <- copy *1:address:editor-data
9999 mem: location 1 is 1000
9999 mem: location 1000 is 1076
9999 mem: location 1001 is 1076
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1076
9999 mem: location 1004 is 2
9999 mem: location 1005 is 4
9999 mem: location 1006 is 1
9999 mem: location 1007 is 2
9999 mem: location 1008 is 1
9999 mem: location 1 is 1000
9999 mem: location 1 is 1000
9999 mem: storing 1076 in location 2
9999 mem: storing 1076 in location 3
9999 mem: storing 0 in location 4
9999 mem: storing 1076 in location 5
9999 mem: storing 2 in location 6
9999 mem: storing 4 in location 7
9999 mem: storing 1 in location 8
9999 mem: storing 2 in location 9
9999 mem: storing 1 in location 10
 100 run: memory-should-contain [
    # 2 (data) <- just the ยง sentinel
    # 3 (top of screen) <- the ยง sentinel
    4 <- 0  # bottom-of-screen; null since text fits on screen
    # 5 (before cursor) <- the ยง sentinel
    6 <- 2  # left
    7 <- 4  # right  (inclusive)
    8 <- 1  # cursor row
    9 <- 2  # cursor column
  ]
9999 run: checking location 4
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
 100 run: screen-should-contain [
    .     .
    .     .
    .     .
  ]
