c{0: 0 (((1 integer)) <- ((copy)) ((2 literal))) -- nil
c{0: 1 (((2 integer)) <- ((copy)) ((23 literal))) -- nil
c{0: 2 (((3 boolean)) <- ((copy)) ((nil literal))) -- nil
c{0: 3 (((4 integer)) <- ((copy)) ((24 literal))) -- nil
c{0: 4 (((5 boolean)) <- ((copy)) ((t literal))) -- nil
c{0: 5 (((6 integer)) <- ((length)) ((1 integer-boolean-pair-array))) -- nil
c{1: 0 ✓ (((1 integer)) <- ((copy)) ((2 literal)))
c{1: 1 ✓ (((2 integer)) <- ((copy)) ((23 literal)))
c{1: 2 ✓ (((3 boolean)) <- ((copy)) ((nil literal)))
c{1: 3 ✓ (((4 integer)) <- ((copy)) ((24 literal)))
c{1: 4 ✓ (((5 boolean)) <- ((copy)) ((t literal)))
c{1: 5 ✓ (((6 integer)) <- ((length)) ((1 integer-boolean-pair-array)))
cn0: convert-names in main
cn0: (((1 integer)) <- ((copy)) ((2 literal))) nil nil
cn0: checking arg ((2 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((2 integer)) <- ((copy)) ((23 literal))) nil nil
cn0: checking arg ((23 literal))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: (((3 boolean)) <- ((copy)) ((nil literal))) nil nil
cn0: checking arg ((nil literal))
cn0: checking oarg ((3 boolean))
maybe-add: ((3 boolean))
cn0: (((4 integer)) <- ((copy)) ((24 literal))) nil nil
cn0: checking arg ((24 literal))
cn0: checking oarg ((4 integer))
maybe-add: ((4 integer))
cn0: (((5 boolean)) <- ((copy)) ((t literal))) nil nil
cn0: checking arg ((t literal))
cn0: checking oarg ((5 boolean))
maybe-add: ((5 boolean))
cn0: (((6 integer)) <- ((length)) ((1 integer-boolean-pair-array))) nil nil
cn0: checking arg ((1 integer-boolean-pair-array))
maybe-add: ((1 integer-boolean-pair-array))
cn0: checking oarg ((6 integer))
maybe-add: ((6 integer))
cn1: (((1 integer)) <- ((copy)) ((2 literal)))
cn1: (((2 integer)) <- ((copy)) ((23 literal)))
cn1: (((3 boolean)) <- ((copy)) ((nil literal)))
cn1: (((4 integer)) <- ((copy)) ((24 literal)))
cn1: (((5 boolean)) <- ((copy)) ((t literal)))
cn1: (((6 integer)) <- ((length)) ((1 integer-boolean-pair-array)))
schedule: main
run: main 0: (((1 integer)) <- ((copy)) ((2 literal)))
run: main 0: 2 => ((1 integer))
mem: ((1 integer)): 1 <= 2
run: main 1: (((2 integer)) <- ((copy)) ((23 literal)))
run: main 1: 23 => ((2 integer))
mem: ((2 integer)): 2 <= 23
run: main 2: (((3 boolean)) <- ((copy)) ((nil literal)))
run: main 2: nil => ((3 boolean))
mem: ((3 boolean)): 3 <= nil
run: main 3: (((4 integer)) <- ((copy)) ((24 literal)))
run: main 3: 24 => ((4 integer))
mem: ((4 integer)): 4 <= 24
run: main 4: (((5 boolean)) <- ((copy)) ((t literal)))
run: main 4: t => ((5 boolean))
mem: ((5 boolean)): 5 <= t
run: main 5: (((6 integer)) <- ((length)) ((1 integer-boolean-pair-array)))
array-len: ((1 integer-boolean-pair-array))
mem: ((1 integer)) => 2
run: main 5: 2 => ((6 integer))
mem: ((6 integer)): 6 <= 2
schedule: done with routine nil
