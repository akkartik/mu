parse: instruction: run
parse:   ingredient: {name: "
    1:address:array:character/raw <- new [abc _]
    2:address:array:character/raw <- new [def]
    3:address:array:character/raw <- interpolate 1:address:array:character/raw, 2:address:array:character/raw
    4:array:character/raw <- copy 3:address:array:character/raw/deref
  ", properties: ["
    1:address:array:character/raw <- new [abc _]
    2:address:array:character/raw <- new [def]
    3:address:array:character/raw <- interpolate 1:address:array:character/raw, 2:address:array:character/raw
    4:array:character/raw <- copy 3:address:array:character/raw/deref
  ": "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    4:string <- [abc def]
  ", properties: ["
    4:string <- [abc def]
  ": "literal-string"]}
after-brace: recipe interpolate-works
after-brace: run ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: interpolate-works
run: run [
    1:address:array:character/raw <- new [abc _]
    2:address:array:character/raw <- new [def]
    3:address:array:character/raw <- interpolate 1:address:array:character/raw, 2:address:array:character/raw
    4:array:character/raw <- copy 3:address:array:character/raw/deref
  ]
parse: instruction: new
parse:   ingredient: {name: "abc _", properties: ["abc _": "literal-string"]}
parse:   product: {name: "1", properties: ["1": "address":"array":"character", "raw": ]}
parse: instruction: new
parse:   ingredient: {name: "def", properties: ["def": "literal-string"]}
parse:   product: {name: "2", properties: ["2": "address":"array":"character", "raw": ]}
parse: instruction: interpolate
parse:   ingredient: {name: "1", properties: ["1": "address":"array":"character", "raw": ]}
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"character", "raw": ]}
parse:   product: {name: "3", properties: ["3": "address":"array":"character", "raw": ]}
parse: instruction: copy
parse:   ingredient: {name: "3", properties: ["3": "address":"array":"character", "raw": , "deref": ]}
parse:   product: {name: "4", properties: ["4": "array":"character", "raw": ]}
new: abc _ -> 0
new: def -> 0
after-brace: recipe run1001
after-brace: new ...
after-brace: new ...
after-brace: interpolate ...
after-brace: copy ...
run: 1:address:array:character/raw <- new [abc _]
mem: storing 1000 in location 1
run: 2:address:array:character/raw <- new [def]
mem: storing 1006 in location 2
run: 3:address:array:character/raw <- interpolate 1:address:array:character/raw, 2:address:array:character/raw
mem: location 1 is 1000
mem: location 2 is 1006
run: default-space:array:address:location <- new location:type, 60:literal
mem: array size is 60
mem: new alloc: 1010
run: template:address:array:character <- next-ingredient 
mem: storing 1000 in location 1012
run: tem-len:number <- length template:address:array:character/deref
mem: location 1012 is 1000
mem: location 1000 is 5
mem: location 1001 is 97
mem: location 1002 is 98
mem: location 1003 is 99
mem: location 1004 is 32
mem: location 1005 is 95
mem: location 1012 is 1000
mem: storing 5 in location 1013
run: result-len:number <- copy tem-len:number
mem: location 1013 is 5
mem: storing 5 in location 1014
run: a:address:array:character, arg-received?:boolean <- next-ingredient 
mem: storing 1006 in location 1015
mem: storing 1 in location 1016
run: break-unless arg-received?:boolean, 
mem: location 1016 is 1
run: jump-unless fell through
run: a-len:number <- length a:address:array:character/deref
mem: location 1015 is 1006
mem: location 1006 is 3
mem: location 1007 is 100
mem: location 1008 is 101
mem: location 1009 is 102
mem: location 1015 is 1006
mem: storing 3 in location 1017
run: result-len:number <- add result-len:number, a-len:number
mem: location 1014 is 5
mem: location 1017 is 3
mem: storing 8 in location 1014
run: result-len:number <- subtract result-len:number, 1:literal
mem: location 1014 is 8
mem: storing 7 in location 1014
run: loop 
run: jumping to instruction 5
run: a:address:array:character, arg-received?:boolean <- next-ingredient 
mem: storing 0 in location 1015
mem: storing 0 in location 1016
run: break-unless arg-received?:boolean, 
mem: location 1016 is 0
run: jumping to instruction 11
run: rewind-ingredients 
run: _ <- next-ingredient 
run: result:address:array:character <- new character:type, result-len:number
mem: location 1014 is 7
mem: array size is 7
mem: new alloc: 1071
mem: storing 1071 in location 1018
run: result-idx:number <- copy 0:literal
mem: storing 0 in location 1019
run: i:number <- copy 0:literal
mem: storing 0 in location 1020
run: a:address:array:character, arg-received?:boolean <- next-ingredient 
mem: storing 1006 in location 1015
mem: storing 1 in location 1016
run: break-unless arg-received?:boolean, 
mem: location 1016 is 1
run: jump-unless fell through
run: tem-done?:boolean <- greater-or-equal i:number, tem-len:number
mem: location 1020 is 0
mem: location 1013 is 5
mem: storing 0 in location 1021
run: break-if tem-done?:boolean, +done:label
mem: location 1021 is 0
run: jump-if fell through
run: in:character <- index template:address:array:character/deref, i:number
mem: location 1012 is 1000
mem: location 1000 is 5
mem: location 1001 is 97
mem: location 1002 is 98
mem: location 1003 is 99
mem: location 1004 is 32
mem: location 1005 is 95
mem: location 1020 is 0
mem: location 1012 is 1000
mem: location 1020 is 0
run: address to copy is 1001
run: its type is 4
mem: location 1001 is 97
mem: storing 97 in location 1022
run: underscore?:boolean <- equal in:character, 95:literal
mem: location 1022 is 97
mem: storing 0 in location 1023
run: break-if underscore?:boolean, 
mem: location 1023 is 0
run: jump-if fell through
run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
mem: location 1018 is 1071
mem: location 1071 is 7
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1077 is 0
mem: location 1078 is 0
mem: location 1019 is 0
mem: location 1018 is 1071
mem: location 1019 is 0
mem: storing 1072 in location 1024
run: out:address:character/deref <- copy in:character
mem: location 1022 is 97
mem: location 1024 is 1072
mem: storing 97 in location 1072
run: i:number <- add i:number, 1:literal
mem: location 1020 is 0
mem: storing 1 in location 1020
run: result-idx:number <- add result-idx:number, 1:literal
mem: location 1019 is 0
mem: storing 1 in location 1019
run: loop 
run: jumping to instruction 21
run: tem-done?:boolean <- greater-or-equal i:number, tem-len:number
mem: location 1020 is 1
mem: location 1013 is 5
mem: storing 0 in location 1021
run: break-if tem-done?:boolean, +done:label
mem: location 1021 is 0
run: jump-if fell through
run: in:character <- index template:address:array:character/deref, i:number
mem: location 1012 is 1000
mem: location 1000 is 5
mem: location 1001 is 97
mem: location 1002 is 98
mem: location 1003 is 99
mem: location 1004 is 32
mem: location 1005 is 95
mem: location 1020 is 1
mem: location 1012 is 1000
mem: location 1020 is 1
run: address to copy is 1002
run: its type is 4
mem: location 1002 is 98
mem: storing 98 in location 1022
run: underscore?:boolean <- equal in:character, 95:literal
mem: location 1022 is 98
mem: storing 0 in location 1023
run: break-if underscore?:boolean, 
mem: location 1023 is 0
run: jump-if fell through
run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
mem: location 1018 is 1071
mem: location 1071 is 7
mem: location 1072 is 97
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1077 is 0
mem: location 1078 is 0
mem: location 1019 is 1
mem: location 1018 is 1071
mem: location 1019 is 1
mem: storing 1073 in location 1024
run: out:address:character/deref <- copy in:character
mem: location 1022 is 98
mem: location 1024 is 1073
mem: storing 98 in location 1073
run: i:number <- add i:number, 1:literal
mem: location 1020 is 1
mem: storing 2 in location 1020
run: result-idx:number <- add result-idx:number, 1:literal
mem: location 1019 is 1
mem: storing 2 in location 1019
run: loop 
run: jumping to instruction 21
run: tem-done?:boolean <- greater-or-equal i:number, tem-len:number
mem: location 1020 is 2
mem: location 1013 is 5
mem: storing 0 in location 1021
run: break-if tem-done?:boolean, +done:label
mem: location 1021 is 0
run: jump-if fell through
run: in:character <- index template:address:array:character/deref, i:number
mem: location 1012 is 1000
mem: location 1000 is 5
mem: location 1001 is 97
mem: location 1002 is 98
mem: location 1003 is 99
mem: location 1004 is 32
mem: location 1005 is 95
mem: location 1020 is 2
mem: location 1012 is 1000
mem: location 1020 is 2
run: address to copy is 1003
run: its type is 4
mem: location 1003 is 99
mem: storing 99 in location 1022
run: underscore?:boolean <- equal in:character, 95:literal
mem: location 1022 is 99
mem: storing 0 in location 1023
run: break-if underscore?:boolean, 
mem: location 1023 is 0
run: jump-if fell through
run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
mem: location 1018 is 1071
mem: location 1071 is 7
mem: location 1072 is 97
mem: location 1073 is 98
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1077 is 0
mem: location 1078 is 0
mem: location 1019 is 2
mem: location 1018 is 1071
mem: location 1019 is 2
mem: storing 1074 in location 1024
run: out:address:character/deref <- copy in:character
mem: location 1022 is 99
mem: location 1024 is 1074
mem: storing 99 in location 1074
run: i:number <- add i:number, 1:literal
mem: location 1020 is 2
mem: storing 3 in location 1020
run: result-idx:number <- add result-idx:number, 1:literal
mem: location 1019 is 2
mem: storing 3 in location 1019
run: loop 
run: jumping to instruction 21
run: tem-done?:boolean <- greater-or-equal i:number, tem-len:number
mem: location 1020 is 3
mem: location 1013 is 5
mem: storing 0 in location 1021
run: break-if tem-done?:boolean, +done:label
mem: location 1021 is 0
run: jump-if fell through
run: in:character <- index template:address:array:character/deref, i:number
mem: location 1012 is 1000
mem: location 1000 is 5
mem: location 1001 is 97
mem: location 1002 is 98
mem: location 1003 is 99
mem: location 1004 is 32
mem: location 1005 is 95
mem: location 1020 is 3
mem: location 1012 is 1000
mem: location 1020 is 3
run: address to copy is 1004
run: its type is 4
mem: location 1004 is 32
mem: storing 32 in location 1022
run: underscore?:boolean <- equal in:character, 95:literal
mem: location 1022 is 32
mem: storing 0 in location 1023
run: break-if underscore?:boolean, 
mem: location 1023 is 0
run: jump-if fell through
run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
mem: location 1018 is 1071
mem: location 1071 is 7
mem: location 1072 is 97
mem: location 1073 is 98
mem: location 1074 is 99
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1077 is 0
mem: location 1078 is 0
mem: location 1019 is 3
mem: location 1018 is 1071
mem: location 1019 is 3
mem: storing 1075 in location 1024
run: out:address:character/deref <- copy in:character
mem: location 1022 is 32
mem: location 1024 is 1075
mem: storing 32 in location 1075
run: i:number <- add i:number, 1:literal
mem: location 1020 is 3
mem: storing 4 in location 1020
run: result-idx:number <- add result-idx:number, 1:literal
mem: location 1019 is 3
mem: storing 4 in location 1019
run: loop 
run: jumping to instruction 21
run: tem-done?:boolean <- greater-or-equal i:number, tem-len:number
mem: location 1020 is 4
mem: location 1013 is 5
mem: storing 0 in location 1021
run: break-if tem-done?:boolean, +done:label
mem: location 1021 is 0
run: jump-if fell through
run: in:character <- index template:address:array:character/deref, i:number
mem: location 1012 is 1000
mem: location 1000 is 5
mem: location 1001 is 97
mem: location 1002 is 98
mem: location 1003 is 99
mem: location 1004 is 32
mem: location 1005 is 95
mem: location 1020 is 4
mem: location 1012 is 1000
mem: location 1020 is 4
run: address to copy is 1005
run: its type is 4
mem: location 1005 is 95
mem: storing 95 in location 1022
run: underscore?:boolean <- equal in:character, 95:literal
mem: location 1022 is 95
mem: storing 1 in location 1023
run: break-if underscore?:boolean, 
mem: location 1023 is 1
run: jumping to instruction 31
run: j:number <- copy 0:literal
mem: storing 0 in location 1025
run: arg-done?:boolean <- greater-or-equal j:number, a-len:number
mem: location 1025 is 0
mem: location 1017 is 3
mem: storing 0 in location 1026
run: break-if arg-done?:boolean, 
mem: location 1026 is 0
run: jump-if fell through
run: in:character <- index a:address:array:character/deref, j:number
mem: location 1015 is 1006
mem: location 1006 is 3
mem: location 1007 is 100
mem: location 1008 is 101
mem: location 1009 is 102
mem: location 1025 is 0
mem: location 1015 is 1006
mem: location 1025 is 0
run: address to copy is 1007
run: its type is 4
mem: location 1007 is 100
mem: storing 100 in location 1022
run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
mem: location 1018 is 1071
mem: location 1071 is 7
mem: location 1072 is 97
mem: location 1073 is 98
mem: location 1074 is 99
mem: location 1075 is 32
mem: location 1076 is 0
mem: location 1077 is 0
mem: location 1078 is 0
mem: location 1019 is 4
mem: location 1018 is 1071
mem: location 1019 is 4
mem: storing 1076 in location 1024
run: out:address:character/deref <- copy in:character
mem: location 1022 is 100
mem: location 1024 is 1076
mem: storing 100 in location 1076
run: j:number <- add j:number, 1:literal
mem: location 1025 is 0
mem: storing 1 in location 1025
run: result-idx:number <- add result-idx:number, 1:literal
mem: location 1019 is 4
mem: storing 5 in location 1019
run: loop 
run: jumping to instruction 34
run: arg-done?:boolean <- greater-or-equal j:number, a-len:number
mem: location 1025 is 1
mem: location 1017 is 3
mem: storing 0 in location 1026
run: break-if arg-done?:boolean, 
mem: location 1026 is 0
run: jump-if fell through
run: in:character <- index a:address:array:character/deref, j:number
mem: location 1015 is 1006
mem: location 1006 is 3
mem: location 1007 is 100
mem: location 1008 is 101
mem: location 1009 is 102
mem: location 1025 is 1
mem: location 1015 is 1006
mem: location 1025 is 1
run: address to copy is 1008
run: its type is 4
mem: location 1008 is 101
mem: storing 101 in location 1022
run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
mem: location 1018 is 1071
mem: location 1071 is 7
mem: location 1072 is 97
mem: location 1073 is 98
mem: location 1074 is 99
mem: location 1075 is 32
mem: location 1076 is 100
mem: location 1077 is 0
mem: location 1078 is 0
mem: location 1019 is 5
mem: location 1018 is 1071
mem: location 1019 is 5
mem: storing 1077 in location 1024
run: out:address:character/deref <- copy in:character
mem: location 1022 is 101
mem: location 1024 is 1077
mem: storing 101 in location 1077
run: j:number <- add j:number, 1:literal
mem: location 1025 is 1
mem: storing 2 in location 1025
run: result-idx:number <- add result-idx:number, 1:literal
mem: location 1019 is 5
mem: storing 6 in location 1019
run: loop 
run: jumping to instruction 34
run: arg-done?:boolean <- greater-or-equal j:number, a-len:number
mem: location 1025 is 2
mem: location 1017 is 3
mem: storing 0 in location 1026
run: break-if arg-done?:boolean, 
mem: location 1026 is 0
run: jump-if fell through
run: in:character <- index a:address:array:character/deref, j:number
mem: location 1015 is 1006
mem: location 1006 is 3
mem: location 1007 is 100
mem: location 1008 is 101
mem: location 1009 is 102
mem: location 1025 is 2
mem: location 1015 is 1006
mem: location 1025 is 2
run: address to copy is 1009
run: its type is 4
mem: location 1009 is 102
mem: storing 102 in location 1022
run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
mem: location 1018 is 1071
mem: location 1071 is 7
mem: location 1072 is 97
mem: location 1073 is 98
mem: location 1074 is 99
mem: location 1075 is 32
mem: location 1076 is 100
mem: location 1077 is 101
mem: location 1078 is 0
mem: location 1019 is 6
mem: location 1018 is 1071
mem: location 1019 is 6
mem: storing 1078 in location 1024
run: out:address:character/deref <- copy in:character
mem: location 1022 is 102
mem: location 1024 is 1078
mem: storing 102 in location 1078
run: j:number <- add j:number, 1:literal
mem: location 1025 is 2
mem: storing 3 in location 1025
run: result-idx:number <- add result-idx:number, 1:literal
mem: location 1019 is 6
mem: storing 7 in location 1019
run: loop 
run: jumping to instruction 34
run: arg-done?:boolean <- greater-or-equal j:number, a-len:number
mem: location 1025 is 3
mem: location 1017 is 3
mem: storing 1 in location 1026
run: break-if arg-done?:boolean, 
mem: location 1026 is 1
run: jumping to instruction 42
run: i:number <- add i:number, 1:literal
mem: location 1020 is 4
mem: storing 5 in location 1020
run: loop 
run: jumping to instruction 18
run: a:address:array:character, arg-received?:boolean <- next-ingredient 
mem: storing 0 in location 1015
mem: storing 0 in location 1016
run: break-unless arg-received?:boolean, 
mem: location 1016 is 0
run: jumping to instruction 45
run: tem-done?:boolean <- greater-or-equal i:number, tem-len:number
mem: location 1020 is 5
mem: location 1013 is 5
mem: storing 1 in location 1021
run: break-if tem-done?:boolean, 
mem: location 1021 is 1
run: jumping to instruction 56
run: reply result:address:array:character
mem: location 1018 is 1071
run: result 0 is 1071
mem: storing 1071 in location 3
run: 4:array:character/raw <- copy 3:address:array:character/raw/deref
mem: location 3 is 1071
mem: location 1071 is 7
mem: location 1072 is 97
mem: location 1073 is 98
mem: location 1074 is 99
mem: location 1075 is 32
mem: location 1076 is 100
mem: location 1077 is 101
mem: location 1078 is 102
mem: storing 7 in location 4
mem: storing 97 in location 5
mem: storing 98 in location 6
mem: storing 99 in location 7
mem: storing 32 in location 8
mem: storing 100 in location 9
mem: storing 101 in location 10
mem: storing 102 in location 11
run: memory-should-contain [
    4:string <- [abc def]
  ]
run: checking string length at 4
run: checking location 5
run: checking location 6
run: checking location 7
run: checking location 8
run: checking location 9
run: checking location 10
run: checking location 11
