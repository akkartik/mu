parse: instruction: run
parse:   ingredient: {name: "
    1:address:array:character/raw <- new [abc _]
    2:address:array:character/raw <- new [def]
    3:address:array:character/raw <- interpolate 1:address:array:character/raw, 2:address:array:character/raw
    4:array:character/raw <- copy 3:address:array:character/raw/deref
  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    4:string <- [abc def]
  ", properties: [_: "literal-string"]}
after-brace: recipe interpolate-works
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: interpolate-works
 101 run: run [
    1:address:array:character/raw <- new [abc _]
    2:address:array:character/raw <- new [def]
    3:address:array:character/raw <- interpolate 1:address:array:character/raw, 2:address:array:character/raw
    4:array:character/raw <- copy 3:address:array:character/raw/deref
  ]
parse: instruction: new
parse:   ingredient: {name: "abc _", properties: [_: "literal-string"]}
parse:   product: {name: "1", properties: ["1": "address":"array":"character", "raw": ]}
parse: instruction: new
parse:   ingredient: {name: "def", properties: [_: "literal-string"]}
parse:   product: {name: "2", properties: ["2": "address":"array":"character", "raw": ]}
parse: instruction: interpolate
parse:   ingredient: {name: "1", properties: ["1": "address":"array":"character", "raw": ]}
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"character", "raw": ]}
parse:   product: {name: "3", properties: ["3": "address":"array":"character", "raw": ]}
parse: instruction: copy
parse:   ingredient: {name: "3", properties: ["3": "address":"array":"character", "raw": , "deref": ]}
parse:   product: {name: "4", properties: ["4": "array":"character", "raw": ]}
after-brace: recipe run1001
after-brace: new ...
after-brace: new ...
after-brace: interpolate ...
after-brace: copy ...
 101 run: 1:address:array:character/raw <- new [abc _]
9999 mem: storing 1000 in location 1
 101 run: 2:address:array:character/raw <- new [def]
9999 mem: storing 1006 in location 2
 101 run: 3:address:array:character/raw <- interpolate 1:address:array:character/raw, 2:address:array:character/raw
9999 mem: location 1 is 1000
9999 mem: location 2 is 1006
 102 run: default-space:array:address:location <- new location:type, 60:literal
9999 mem: array size is 60
9999 mem: new alloc: 1010
 102 run: template:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1012
 102 run: tem-len:number <- length template:address:array:character/deref
9999 mem: location 1012 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: location 1004 is 32
9999 mem: location 1005 is 95
9999 mem: location 1012 is 1000
9999 mem: storing 5 in location 1013
 102 run: result-len:number <- copy tem-len:number
9999 mem: location 1013 is 5
9999 mem: storing 5 in location 1014
 102 run: a:address:array:character, arg-received?:boolean <- next-ingredient 
9999 mem: storing 1006 in location 1015
9999 mem: storing 1 in location 1016
 102 run: break-unless arg-received?:boolean, 
9999 mem: location 1016 is 1
9999 run: jump-unless fell through
 102 run: a-len:number <- length a:address:array:character/deref
9999 mem: location 1015 is 1006
9999 mem: location 1006 is 3
9999 mem: location 1007 is 100
9999 mem: location 1008 is 101
9999 mem: location 1009 is 102
9999 mem: location 1015 is 1006
9999 mem: storing 3 in location 1017
 102 run: result-len:number <- add result-len:number, a-len:number
9999 mem: location 1014 is 5
9999 mem: location 1017 is 3
9999 mem: storing 8 in location 1014
 102 run: result-len:number <- subtract result-len:number, 1:literal
9999 mem: location 1014 is 8
9999 mem: storing 7 in location 1014
 102 run: loop 
9999 run: jumping to instruction 5
 102 run: a:address:array:character, arg-received?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
 102 run: break-unless arg-received?:boolean, 
9999 mem: location 1016 is 0
9999 run: jumping to instruction 11
 102 run: rewind-ingredients 
 102 run: _ <- next-ingredient 
 102 run: result:address:array:character <- new character:type, result-len:number
9999 mem: location 1014 is 7
9999 mem: array size is 7
9999 mem: new alloc: 1071
9999 mem: storing 1071 in location 1018
 102 run: result-idx:number <- copy 0:literal
9999 mem: storing 0 in location 1019
 102 run: i:number <- copy 0:literal
9999 mem: storing 0 in location 1020
 102 run: a:address:array:character, arg-received?:boolean <- next-ingredient 
9999 mem: storing 1006 in location 1015
9999 mem: storing 1 in location 1016
 102 run: break-unless arg-received?:boolean, 
9999 mem: location 1016 is 1
9999 run: jump-unless fell through
 102 run: tem-done?:boolean <- greater-or-equal i:number, tem-len:number
9999 mem: location 1020 is 0
9999 mem: location 1013 is 5
9999 mem: storing 0 in location 1021
 102 run: break-if tem-done?:boolean, +done:label
9999 mem: location 1021 is 0
9999 run: jump-if fell through
 102 run: in:character <- index template:address:array:character/deref, i:number
9999 mem: location 1012 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: location 1004 is 32
9999 mem: location 1005 is 95
9999 mem: location 1020 is 0
9999 mem: location 1012 is 1000
9999 mem: location 1020 is 0
9999 run: address to copy is 1001
9999 run: its type is 4
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1022
 102 run: underscore?:boolean <- equal in:character, 95:literal
9999 mem: location 1022 is 97
9999 mem: storing 0 in location 1023
 102 run: break-if underscore?:boolean, 
9999 mem: location 1023 is 0
9999 run: jump-if fell through
 102 run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
9999 mem: location 1018 is 1071
9999 mem: location 1071 is 7
9999 mem: location 1072 is 0
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1019 is 0
9999 mem: location 1018 is 1071
9999 mem: location 1019 is 0
9999 mem: storing 1072 in location 1024
 102 run: out:address:character/deref <- copy in:character
9999 mem: location 1022 is 97
9999 mem: location 1024 is 1072
9999 mem: storing 97 in location 1072
 102 run: i:number <- add i:number, 1:literal
9999 mem: location 1020 is 0
9999 mem: storing 1 in location 1020
 102 run: result-idx:number <- add result-idx:number, 1:literal
9999 mem: location 1019 is 0
9999 mem: storing 1 in location 1019
 102 run: loop 
9999 run: jumping to instruction 21
 102 run: tem-done?:boolean <- greater-or-equal i:number, tem-len:number
9999 mem: location 1020 is 1
9999 mem: location 1013 is 5
9999 mem: storing 0 in location 1021
 102 run: break-if tem-done?:boolean, +done:label
9999 mem: location 1021 is 0
9999 run: jump-if fell through
 102 run: in:character <- index template:address:array:character/deref, i:number
9999 mem: location 1012 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: location 1004 is 32
9999 mem: location 1005 is 95
9999 mem: location 1020 is 1
9999 mem: location 1012 is 1000
9999 mem: location 1020 is 1
9999 run: address to copy is 1002
9999 run: its type is 4
9999 mem: location 1002 is 98
9999 mem: storing 98 in location 1022
 102 run: underscore?:boolean <- equal in:character, 95:literal
9999 mem: location 1022 is 98
9999 mem: storing 0 in location 1023
 102 run: break-if underscore?:boolean, 
9999 mem: location 1023 is 0
9999 run: jump-if fell through
 102 run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
9999 mem: location 1018 is 1071
9999 mem: location 1071 is 7
9999 mem: location 1072 is 97
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1019 is 1
9999 mem: location 1018 is 1071
9999 mem: location 1019 is 1
9999 mem: storing 1073 in location 1024
 102 run: out:address:character/deref <- copy in:character
9999 mem: location 1022 is 98
9999 mem: location 1024 is 1073
9999 mem: storing 98 in location 1073
 102 run: i:number <- add i:number, 1:literal
9999 mem: location 1020 is 1
9999 mem: storing 2 in location 1020
 102 run: result-idx:number <- add result-idx:number, 1:literal
9999 mem: location 1019 is 1
9999 mem: storing 2 in location 1019
 102 run: loop 
9999 run: jumping to instruction 21
 102 run: tem-done?:boolean <- greater-or-equal i:number, tem-len:number
9999 mem: location 1020 is 2
9999 mem: location 1013 is 5
9999 mem: storing 0 in location 1021
 102 run: break-if tem-done?:boolean, +done:label
9999 mem: location 1021 is 0
9999 run: jump-if fell through
 102 run: in:character <- index template:address:array:character/deref, i:number
9999 mem: location 1012 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: location 1004 is 32
9999 mem: location 1005 is 95
9999 mem: location 1020 is 2
9999 mem: location 1012 is 1000
9999 mem: location 1020 is 2
9999 run: address to copy is 1003
9999 run: its type is 4
9999 mem: location 1003 is 99
9999 mem: storing 99 in location 1022
 102 run: underscore?:boolean <- equal in:character, 95:literal
9999 mem: location 1022 is 99
9999 mem: storing 0 in location 1023
 102 run: break-if underscore?:boolean, 
9999 mem: location 1023 is 0
9999 run: jump-if fell through
 102 run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
9999 mem: location 1018 is 1071
9999 mem: location 1071 is 7
9999 mem: location 1072 is 97
9999 mem: location 1073 is 98
9999 mem: location 1074 is 0
9999 mem: location 1075 is 0
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1019 is 2
9999 mem: location 1018 is 1071
9999 mem: location 1019 is 2
9999 mem: storing 1074 in location 1024
 102 run: out:address:character/deref <- copy in:character
9999 mem: location 1022 is 99
9999 mem: location 1024 is 1074
9999 mem: storing 99 in location 1074
 102 run: i:number <- add i:number, 1:literal
9999 mem: location 1020 is 2
9999 mem: storing 3 in location 1020
 102 run: result-idx:number <- add result-idx:number, 1:literal
9999 mem: location 1019 is 2
9999 mem: storing 3 in location 1019
 102 run: loop 
9999 run: jumping to instruction 21
 102 run: tem-done?:boolean <- greater-or-equal i:number, tem-len:number
9999 mem: location 1020 is 3
9999 mem: location 1013 is 5
9999 mem: storing 0 in location 1021
 102 run: break-if tem-done?:boolean, +done:label
9999 mem: location 1021 is 0
9999 run: jump-if fell through
 102 run: in:character <- index template:address:array:character/deref, i:number
9999 mem: location 1012 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: location 1004 is 32
9999 mem: location 1005 is 95
9999 mem: location 1020 is 3
9999 mem: location 1012 is 1000
9999 mem: location 1020 is 3
9999 run: address to copy is 1004
9999 run: its type is 4
9999 mem: location 1004 is 32
9999 mem: storing 32 in location 1022
 102 run: underscore?:boolean <- equal in:character, 95:literal
9999 mem: location 1022 is 32
9999 mem: storing 0 in location 1023
 102 run: break-if underscore?:boolean, 
9999 mem: location 1023 is 0
9999 run: jump-if fell through
 102 run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
9999 mem: location 1018 is 1071
9999 mem: location 1071 is 7
9999 mem: location 1072 is 97
9999 mem: location 1073 is 98
9999 mem: location 1074 is 99
9999 mem: location 1075 is 0
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1019 is 3
9999 mem: location 1018 is 1071
9999 mem: location 1019 is 3
9999 mem: storing 1075 in location 1024
 102 run: out:address:character/deref <- copy in:character
9999 mem: location 1022 is 32
9999 mem: location 1024 is 1075
9999 mem: storing 32 in location 1075
 102 run: i:number <- add i:number, 1:literal
9999 mem: location 1020 is 3
9999 mem: storing 4 in location 1020
 102 run: result-idx:number <- add result-idx:number, 1:literal
9999 mem: location 1019 is 3
9999 mem: storing 4 in location 1019
 102 run: loop 
9999 run: jumping to instruction 21
 102 run: tem-done?:boolean <- greater-or-equal i:number, tem-len:number
9999 mem: location 1020 is 4
9999 mem: location 1013 is 5
9999 mem: storing 0 in location 1021
 102 run: break-if tem-done?:boolean, +done:label
9999 mem: location 1021 is 0
9999 run: jump-if fell through
 102 run: in:character <- index template:address:array:character/deref, i:number
9999 mem: location 1012 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: location 1004 is 32
9999 mem: location 1005 is 95
9999 mem: location 1020 is 4
9999 mem: location 1012 is 1000
9999 mem: location 1020 is 4
9999 run: address to copy is 1005
9999 run: its type is 4
9999 mem: location 1005 is 95
9999 mem: storing 95 in location 1022
 102 run: underscore?:boolean <- equal in:character, 95:literal
9999 mem: location 1022 is 95
9999 mem: storing 1 in location 1023
 102 run: break-if underscore?:boolean, 
9999 mem: location 1023 is 1
9999 run: jumping to instruction 31
 102 run: j:number <- copy 0:literal
9999 mem: storing 0 in location 1025
 102 run: arg-done?:boolean <- greater-or-equal j:number, a-len:number
9999 mem: location 1025 is 0
9999 mem: location 1017 is 3
9999 mem: storing 0 in location 1026
 102 run: break-if arg-done?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 102 run: in:character <- index a:address:array:character/deref, j:number
9999 mem: location 1015 is 1006
9999 mem: location 1006 is 3
9999 mem: location 1007 is 100
9999 mem: location 1008 is 101
9999 mem: location 1009 is 102
9999 mem: location 1025 is 0
9999 mem: location 1015 is 1006
9999 mem: location 1025 is 0
9999 run: address to copy is 1007
9999 run: its type is 4
9999 mem: location 1007 is 100
9999 mem: storing 100 in location 1022
 102 run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
9999 mem: location 1018 is 1071
9999 mem: location 1071 is 7
9999 mem: location 1072 is 97
9999 mem: location 1073 is 98
9999 mem: location 1074 is 99
9999 mem: location 1075 is 32
9999 mem: location 1076 is 0
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1019 is 4
9999 mem: location 1018 is 1071
9999 mem: location 1019 is 4
9999 mem: storing 1076 in location 1024
 102 run: out:address:character/deref <- copy in:character
9999 mem: location 1022 is 100
9999 mem: location 1024 is 1076
9999 mem: storing 100 in location 1076
 102 run: j:number <- add j:number, 1:literal
9999 mem: location 1025 is 0
9999 mem: storing 1 in location 1025
 102 run: result-idx:number <- add result-idx:number, 1:literal
9999 mem: location 1019 is 4
9999 mem: storing 5 in location 1019
 102 run: loop 
9999 run: jumping to instruction 34
 102 run: arg-done?:boolean <- greater-or-equal j:number, a-len:number
9999 mem: location 1025 is 1
9999 mem: location 1017 is 3
9999 mem: storing 0 in location 1026
 102 run: break-if arg-done?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 102 run: in:character <- index a:address:array:character/deref, j:number
9999 mem: location 1015 is 1006
9999 mem: location 1006 is 3
9999 mem: location 1007 is 100
9999 mem: location 1008 is 101
9999 mem: location 1009 is 102
9999 mem: location 1025 is 1
9999 mem: location 1015 is 1006
9999 mem: location 1025 is 1
9999 run: address to copy is 1008
9999 run: its type is 4
9999 mem: location 1008 is 101
9999 mem: storing 101 in location 1022
 102 run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
9999 mem: location 1018 is 1071
9999 mem: location 1071 is 7
9999 mem: location 1072 is 97
9999 mem: location 1073 is 98
9999 mem: location 1074 is 99
9999 mem: location 1075 is 32
9999 mem: location 1076 is 100
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1019 is 5
9999 mem: location 1018 is 1071
9999 mem: location 1019 is 5
9999 mem: storing 1077 in location 1024
 102 run: out:address:character/deref <- copy in:character
9999 mem: location 1022 is 101
9999 mem: location 1024 is 1077
9999 mem: storing 101 in location 1077
 102 run: j:number <- add j:number, 1:literal
9999 mem: location 1025 is 1
9999 mem: storing 2 in location 1025
 102 run: result-idx:number <- add result-idx:number, 1:literal
9999 mem: location 1019 is 5
9999 mem: storing 6 in location 1019
 102 run: loop 
9999 run: jumping to instruction 34
 102 run: arg-done?:boolean <- greater-or-equal j:number, a-len:number
9999 mem: location 1025 is 2
9999 mem: location 1017 is 3
9999 mem: storing 0 in location 1026
 102 run: break-if arg-done?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 102 run: in:character <- index a:address:array:character/deref, j:number
9999 mem: location 1015 is 1006
9999 mem: location 1006 is 3
9999 mem: location 1007 is 100
9999 mem: location 1008 is 101
9999 mem: location 1009 is 102
9999 mem: location 1025 is 2
9999 mem: location 1015 is 1006
9999 mem: location 1025 is 2
9999 run: address to copy is 1009
9999 run: its type is 4
9999 mem: location 1009 is 102
9999 mem: storing 102 in location 1022
 102 run: out:address:character <- index-address result:address:array:character/deref, result-idx:number
9999 mem: location 1018 is 1071
9999 mem: location 1071 is 7
9999 mem: location 1072 is 97
9999 mem: location 1073 is 98
9999 mem: location 1074 is 99
9999 mem: location 1075 is 32
9999 mem: location 1076 is 100
9999 mem: location 1077 is 101
9999 mem: location 1078 is 0
9999 mem: location 1019 is 6
9999 mem: location 1018 is 1071
9999 mem: location 1019 is 6
9999 mem: storing 1078 in location 1024
 102 run: out:address:character/deref <- copy in:character
9999 mem: location 1022 is 102
9999 mem: location 1024 is 1078
9999 mem: storing 102 in location 1078
 102 run: j:number <- add j:number, 1:literal
9999 mem: location 1025 is 2
9999 mem: storing 3 in location 1025
 102 run: result-idx:number <- add result-idx:number, 1:literal
9999 mem: location 1019 is 6
9999 mem: storing 7 in location 1019
 102 run: loop 
9999 run: jumping to instruction 34
 102 run: arg-done?:boolean <- greater-or-equal j:number, a-len:number
9999 mem: location 1025 is 3
9999 mem: location 1017 is 3
9999 mem: storing 1 in location 1026
 102 run: break-if arg-done?:boolean, 
9999 mem: location 1026 is 1
9999 run: jumping to instruction 42
 102 run: i:number <- add i:number, 1:literal
9999 mem: location 1020 is 4
9999 mem: storing 5 in location 1020
 102 run: loop 
9999 run: jumping to instruction 18
 102 run: a:address:array:character, arg-received?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1015
9999 mem: storing 0 in location 1016
 102 run: break-unless arg-received?:boolean, 
9999 mem: location 1016 is 0
9999 run: jumping to instruction 45
 102 run: tem-done?:boolean <- greater-or-equal i:number, tem-len:number
9999 mem: location 1020 is 5
9999 mem: location 1013 is 5
9999 mem: storing 1 in location 1021
 102 run: break-if tem-done?:boolean, 
9999 mem: location 1021 is 1
9999 run: jumping to instruction 56
 102 run: reply result:address:array:character
9999 mem: location 1018 is 1071
9999 run: result 0 is 1071
9999 mem: storing 1071 in location 3
 101 run: 4:array:character/raw <- copy 3:address:array:character/raw/deref
9999 mem: location 3 is 1071
9999 mem: location 1071 is 7
9999 mem: location 1072 is 97
9999 mem: location 1073 is 98
9999 mem: location 1074 is 99
9999 mem: location 1075 is 32
9999 mem: location 1076 is 100
9999 mem: location 1077 is 101
9999 mem: location 1078 is 102
9999 mem: storing 7 in location 4
9999 mem: storing 97 in location 5
9999 mem: storing 98 in location 6
9999 mem: storing 99 in location 7
9999 mem: storing 32 in location 8
9999 mem: storing 100 in location 9
9999 mem: storing 101 in location 10
9999 mem: storing 102 in location 11
 100 run: memory-should-contain [
    4:string <- [abc def]
  ]
9999 run: checking string length at 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
9999 run: checking location 11
