9991 parse: --- defining scenario-text-split-first
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:array:character <- new [a/b]\n    2:address:array:character, 3:address:array:character <- split-first 1:address:array:character, 47/slash\n    10:array:character <- copy *2:address:array:character\n    20:array:character <- copy *3:address:array:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:array:character <- new [a/b]
    2:address:array:character, 3:address:array:character <- split-first 1:address:array:character, 47/slash
    10:array:character <- copy *2:address:array:character
    20:array:character <- copy *3:address:array:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    10:array:character <- [a]\n    20:array:character <- [b]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    10:array:character <- [a]
    20:array:character <- [b]
  ]
9999 parse: recipe scenario-text-split-first has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-text-split-first
9991 transform: --- deduce types for recipe scenario-text-split-first
9991 transform: --- resolve ambiguous calls for recipe scenario-text-split-first
9991 transform: --- compute instruction operations for recipe scenario-text-split-first
9991 transform: --- transform braces for recipe scenario-text-split-first
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe scenario-text-split-first
9991 transform: --- transform names for recipe scenario-text-split-first
9991 transform: --- perform checks for recipe scenario-text-split-first
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-text-split-first
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-text-split-first
 102 run: run [
    1:address:array:character <- new [a/b]
    2:address:array:character, 3:address:array:character <- split-first 1:address:array:character, 47/slash
    10:array:character <- copy *2:address:array:character
    20:array:character <- copy *3:address:array:character
  ]
9991 parse: --- defining run1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"a/b": "literal-string"}
9993 parse:   product: {"1": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:array:character <- new [a/b]
9993 parse: instruction: split-first
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   ingredient: {"47": "literal", "slash": <>}
9993 parse:   product: {"2": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   product: {"3": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: 2:address:array:character, 3:address:array:character <- split-first 1:address:array:character, 47/slash
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"array" : <"character" : <>>>>, "lookup": <>}
9993 parse:   product: {"10": <"array" : <"character" : <>>>}
9992 load: after rewriting: 10:array:character <- copy *2:address:array:character
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": <"address" : <"array" : <"character" : <>>>>, "lookup": <>}
9993 parse:   product: {"20": <"array" : <"character" : <>>>}
9992 load: after rewriting: 20:array:character <- copy *3:address:array:character
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- deduce types for recipe run1001
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction split-first
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9993 transform: strict match: product 1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9993 transform: strict match: product 1
9992 transform: checking variant 0: 100
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: new ...
9992 transform: split-first ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:array:character <- new [a/b]
9999 mem: storing 1000 in location 1
 103 run: 2:address:array:character, 3:address:array:character <- split-first 1:address:array:character, 47/slash
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1004
 104 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1006
 104 run: delim:character <- next-ingredient 
9999 mem: storing 47 in location 1007
 104 run: len:number <- length *text
9999 mem: location 1006 is 1000
9999 mem: storing 3 in location 1008
 104 run: empty?:boolean <- equal len, 0
9999 mem: location 1008 is 3
9999 mem: storing 0 in location 1009
 104 run: jump-unless empty?, 
9999 mem: location 1009 is 0
9998 run: jumping to instruction 10
 104 run: idx:number <- find-next text, delim, 0
9999 mem: location 1006 is 1000
9999 mem: location 1007 is 47
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1013
 105 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1015
 105 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1016
 105 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1017
 105 run: len:number <- length *text
9999 mem: location 1015 is 1000
9999 mem: storing 3 in location 1018
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1017 is 0
9999 mem: location 1018 is 3
9999 mem: storing 0 in location 1019
 105 run: jump-if eof?, 
9999 mem: location 1019 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1015 is 1000
9999 mem: location 1017 is 0
9998 run: address to copy is 1001
9998 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1020
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1020 is 97
9999 mem: location 1016 is 47
9999 mem: storing 0 in location 1021
 105 run: jump-if found?, 
9999 mem: location 1021 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1017 is 0
9999 mem: storing 1 in location 1017
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1017 is 1
9999 mem: location 1018 is 3
9999 mem: storing 0 in location 1019
 105 run: jump-if eof?, 
9999 mem: location 1019 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1015 is 1000
9999 mem: location 1017 is 1
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 47
9999 mem: storing 47 in location 1020
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1020 is 47
9999 mem: location 1016 is 47
9999 mem: storing 1 in location 1021
 105 run: jump-if found?, 
9999 mem: location 1021 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1017 is 1
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1012
 104 run: x:address:array:character <- copy_2 text, 0, idx
9999 mem: location 1006 is 1000
9999 mem: location 1012 is 1
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1022
 105 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1024
 105 run: start:number <- next-ingredient 
9999 mem: storing 0 in location 1025
 105 run: end:number <- next-ingredient 
9999 mem: storing 1 in location 1026
 105 run: len:number <- length *buf
9999 mem: location 1024 is 1000
9999 mem: storing 3 in location 1027
 105 run: end:number <- min len, end
9999 mem: location 1027 is 3
9999 mem: location 1026 is 1
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1034
 106 run: x:number <- next-ingredient 
9999 mem: storing 3 in location 1036
 106 run: y:number <- next-ingredient 
9999 mem: storing 1 in location 1037
 106 run: return-x?:boolean <- lesser-than x, y
9999 mem: location 1036 is 3
9999 mem: location 1037 is 1
9999 mem: storing 0 in location 1038
 106 run: jump-if return-x?, 
9999 mem: location 1038 is 0
9998 run: jump-if fell through
 106 run: reply y
9999 mem: location 1037 is 1
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 1026
 105 run: len <- subtract end, start
9999 mem: location 1026 is 1
9999 mem: location 1025 is 0
9999 mem: storing 1 in location 1027
 105 run: result:address:array:character <- new character:type, len
9999 mem: location 1027 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1039
9999 mem: storing 1039 in location 1028
 105 run: src-idx:number <- copy start
9999 mem: location 1025 is 0
9999 mem: storing 0 in location 1029
 105 run: dest-idx:number <- copy 0
9999 mem: storing 0 in location 1030
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1029 is 0
9999 mem: location 1026 is 1
9999 mem: storing 0 in location 1031
 105 run: jump-if done?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *buf, src-idx
9999 mem: location 1024 is 1000
9999 mem: location 1029 is 0
9998 run: address to copy is 1001
9998 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1032
 105 run: dest:address:character <- index-address *result, dest-idx
9999 mem: location 1028 is 1039
9999 mem: location 1030 is 0
9999 mem: storing 1040 in location 1033
 105 run: *dest <- copy src
9999 mem: location 1032 is 97
9999 mem: location 1033 is 1040
9999 mem: storing 97 in location 1040
 105 run: src-idx <- add src-idx, 1
9999 mem: location 1029 is 0
9999 mem: storing 1 in location 1029
 105 run: dest-idx <- add dest-idx, 1
9999 mem: location 1030 is 0
9999 mem: storing 1 in location 1030
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1029 is 1
9999 mem: location 1026 is 1
9999 mem: storing 1 in location 1031
 105 run: jump-if done?, 
9999 mem: location 1031 is 1
9998 run: jumping to instruction 19
 105 run: reply result:address:array:character
9999 mem: location 1028 is 1039
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1039
9999 mem: storing 1039 in location 1010
 104 run: idx <- add idx, 1
9999 mem: location 1012 is 1
9999 mem: storing 2 in location 1012
 104 run: y:address:array:character <- copy_2 text, idx, len
9999 mem: location 1006 is 1000
9999 mem: location 1012 is 2
9999 mem: location 1008 is 3
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
 105 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1024
 105 run: start:number <- next-ingredient 
9999 mem: storing 2 in location 1025
 105 run: end:number <- next-ingredient 
9999 mem: storing 3 in location 1026
 105 run: len:number <- length *buf
9999 mem: location 1024 is 1000
9999 mem: storing 3 in location 1027
 105 run: end:number <- min len, end
9999 mem: location 1027 is 3
9999 mem: location 1026 is 3
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
 106 run: x:number <- next-ingredient 
9999 mem: storing 3 in location 1036
 106 run: y:number <- next-ingredient 
9999 mem: storing 3 in location 1037
 106 run: return-x?:boolean <- lesser-than x, y
9999 mem: location 1036 is 3
9999 mem: location 1037 is 3
9999 mem: storing 0 in location 1038
 106 run: jump-if return-x?, 
9999 mem: location 1038 is 0
9998 run: jump-if fell through
 106 run: reply y
9999 mem: location 1037 is 3
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 3
9999 mem: storing 3 in location 1026
 105 run: len <- subtract end, start
9999 mem: location 1026 is 3
9999 mem: location 1025 is 2
9999 mem: storing 1 in location 1027
 105 run: result:address:array:character <- new character:type, len
9999 mem: location 1027 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1041
9999 mem: storing 1041 in location 1028
 105 run: src-idx:number <- copy start
9999 mem: location 1025 is 2
9999 mem: storing 2 in location 1029
 105 run: dest-idx:number <- copy 0
9999 mem: storing 0 in location 1030
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1029 is 2
9999 mem: location 1026 is 3
9999 mem: storing 0 in location 1031
 105 run: jump-if done?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *buf, src-idx
9999 mem: location 1024 is 1000
9999 mem: location 1029 is 2
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1032
 105 run: dest:address:character <- index-address *result, dest-idx
9999 mem: location 1028 is 1041
9999 mem: location 1030 is 0
9999 mem: storing 1042 in location 1033
 105 run: *dest <- copy src
9999 mem: location 1032 is 98
9999 mem: location 1033 is 1042
9999 mem: storing 98 in location 1042
 105 run: src-idx <- add src-idx, 1
9999 mem: location 1029 is 2
9999 mem: storing 3 in location 1029
 105 run: dest-idx <- add dest-idx, 1
9999 mem: location 1030 is 0
9999 mem: storing 1 in location 1030
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1029 is 3
9999 mem: location 1026 is 3
9999 mem: storing 1 in location 1031
 105 run: jump-if done?, 
9999 mem: location 1031 is 1
9998 run: jumping to instruction 19
 105 run: reply result:address:array:character
9999 mem: location 1028 is 1041
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1041
9999 mem: storing 1041 in location 1011
 104 run: reply x:address:array:character, y:address:array:character
9999 mem: location 1010 is 1039
9999 mem: location 1011 is 1041
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1039
9998 run: result 1 is 1041
9999 mem: storing 1039 in location 2
9999 mem: storing 1041 in location 3
 103 run: 10:array:character <- copy *2:address:array:character
9999 mem: location 2 is 1039
9999 mem: location 1039 is 1
9999 mem: location 1040 is 97
9999 mem: storing 1 in location 10
9999 mem: storing 97 in location 11
 103 run: 20:array:character <- copy *3:address:array:character
9999 mem: location 3 is 1041
9999 mem: location 1041 is 1
9999 mem: location 1042 is 98
9999 mem: storing 1 in location 20
9999 mem: storing 98 in location 21
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    10:array:character <- [a]
    20:array:character <- [b]
  ]
9999 run: checking string length at 10
9999 run: checking location 11
9999 run: checking string length at 20
9999 run: checking location 21
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
