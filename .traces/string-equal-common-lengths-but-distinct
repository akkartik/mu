parse: instruction: run
parse:   ingredient: {name: "
    default-space:address:array:location <- new location:type, 30:literal
    x:address:array:character <- new [abc]
    y:address:array:character <- new [abd]
    3:boolean/raw <- string-equal x:address:array:character, y:address:array:character
  ", properties: ["
    default-space:address:array:location <- new location:type, 30:literal
    x:address:array:character <- new [abc]
    y:address:array:character <- new [abd]
    3:boolean/raw <- string-equal x:address:array:character, y:address:array:character
  ": "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    3 <- 0  # abc != abd
  ", properties: ["
    3 <- 0  # abc != abd
  ": "literal-string"]}
after-brace: recipe string-equal-common-lengths-but-distinct
after-brace: run ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: string-equal-common-lengths-but-distinct
run: run [
    default-space:address:array:location <- new location:type, 30:literal
    x:address:array:character <- new [abc]
    y:address:array:character <- new [abd]
    3:boolean/raw <- string-equal x:address:array:character, y:address:array:character
  ]
parse: instruction: new
parse:   ingredient: {name: "location", properties: ["location": "type"]}
parse:   ingredient: {name: "30", properties: ["30": "literal"]}
parse:   product: {name: "default-space", properties: ["default-space": "address":"array":"location"]}
parse: instruction: new
parse:   ingredient: {name: "abc", properties: ["abc": "literal-string"]}
parse:   product: {name: "x", properties: ["x": "address":"array":"character"]}
parse: instruction: new
parse:   ingredient: {name: "abd", properties: ["abd": "literal-string"]}
parse:   product: {name: "y", properties: ["y": "address":"array":"character"]}
parse: instruction: string-equal
parse:   ingredient: {name: "x", properties: ["x": "address":"array":"character"]}
parse:   ingredient: {name: "y", properties: ["y": "address":"array":"character"]}
parse:   product: {name: "3", properties: ["3": "boolean", "raw": ]}
new: location -> 1
new: abc -> 0
name: assign x 1
new: abd -> 0
name: assign y 2
after-brace: recipe run1001
after-brace: new ...
after-brace: new ...
after-brace: new ...
after-brace: string-equal ...
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1000
run: x:address:array:character <- new [abc]
mem: storing 1031 in location 1002
run: y:address:array:character <- new [abd]
mem: storing 1035 in location 1003
run: 3:boolean/raw <- string-equal x:address:array:character, y:address:array:character
mem: location 1002 is 1031
mem: location 1003 is 1035
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1039
run: a:address:array:character <- next-ingredient 
mem: storing 1031 in location 1041
run: a-len:number <- length a:address:array:character/deref
mem: location 1041 is 1031
mem: location 1031 is 3
mem: location 1032 is 97
mem: location 1033 is 98
mem: location 1034 is 99
mem: location 1041 is 1031
mem: storing 3 in location 1042
run: b:address:array:character <- next-ingredient 
mem: storing 1035 in location 1043
run: b-len:number <- length b:address:array:character/deref
mem: location 1043 is 1035
mem: location 1035 is 3
mem: location 1036 is 97
mem: location 1037 is 98
mem: location 1038 is 100
mem: location 1043 is 1035
mem: storing 3 in location 1044
run: trace [string-equal], [comparing lengths]
string-equal: comparing lengths
run: length-equal?:boolean <- equal a-len:number, b-len:number
mem: location 1042 is 3
mem: location 1044 is 3
mem: storing 1 in location 1045
run: break-if length-equal?:boolean, 
mem: location 1045 is 1
run: jumping to instruction 10
run: trace [string-equal], [comparing characters]
string-equal: comparing characters
run: i:number <- copy 0:literal
mem: storing 0 in location 1046
run: done?:boolean <- greater-or-equal i:number, a-len:number
mem: location 1046 is 0
mem: location 1042 is 3
mem: storing 0 in location 1047
run: break-if done?:boolean, 
mem: location 1047 is 0
run: jump-if fell through
run: a2:character <- index a:address:array:character/deref, i:number
mem: location 1041 is 1031
mem: location 1031 is 3
mem: location 1032 is 97
mem: location 1033 is 98
mem: location 1034 is 99
mem: location 1046 is 0
mem: location 1041 is 1031
mem: location 1046 is 0
run: address to copy is 1032
run: its type is 4
mem: location 1032 is 97
mem: storing 97 in location 1048
run: b2:character <- index b:address:array:character/deref, i:number
mem: location 1043 is 1035
mem: location 1035 is 3
mem: location 1036 is 97
mem: location 1037 is 98
mem: location 1038 is 100
mem: location 1046 is 0
mem: location 1043 is 1035
mem: location 1046 is 0
run: address to copy is 1036
run: its type is 4
mem: location 1036 is 97
mem: storing 97 in location 1049
run: chars-match?:boolean <- equal a2:character, b2:character
mem: location 1048 is 97
mem: location 1049 is 97
mem: storing 1 in location 1050
run: break-if chars-match?:boolean, 
mem: location 1050 is 1
run: jumping to instruction 22
run: i:number <- add i:number, 1:literal
mem: location 1046 is 0
mem: storing 1 in location 1046
run: loop 
run: jumping to instruction 14
run: done?:boolean <- greater-or-equal i:number, a-len:number
mem: location 1046 is 1
mem: location 1042 is 3
mem: storing 0 in location 1047
run: break-if done?:boolean, 
mem: location 1047 is 0
run: jump-if fell through
run: a2:character <- index a:address:array:character/deref, i:number
mem: location 1041 is 1031
mem: location 1031 is 3
mem: location 1032 is 97
mem: location 1033 is 98
mem: location 1034 is 99
mem: location 1046 is 1
mem: location 1041 is 1031
mem: location 1046 is 1
run: address to copy is 1033
run: its type is 4
mem: location 1033 is 98
mem: storing 98 in location 1048
run: b2:character <- index b:address:array:character/deref, i:number
mem: location 1043 is 1035
mem: location 1035 is 3
mem: location 1036 is 97
mem: location 1037 is 98
mem: location 1038 is 100
mem: location 1046 is 1
mem: location 1043 is 1035
mem: location 1046 is 1
run: address to copy is 1037
run: its type is 4
mem: location 1037 is 98
mem: storing 98 in location 1049
run: chars-match?:boolean <- equal a2:character, b2:character
mem: location 1048 is 98
mem: location 1049 is 98
mem: storing 1 in location 1050
run: break-if chars-match?:boolean, 
mem: location 1050 is 1
run: jumping to instruction 22
run: i:number <- add i:number, 1:literal
mem: location 1046 is 1
mem: storing 2 in location 1046
run: loop 
run: jumping to instruction 14
run: done?:boolean <- greater-or-equal i:number, a-len:number
mem: location 1046 is 2
mem: location 1042 is 3
mem: storing 0 in location 1047
run: break-if done?:boolean, 
mem: location 1047 is 0
run: jump-if fell through
run: a2:character <- index a:address:array:character/deref, i:number
mem: location 1041 is 1031
mem: location 1031 is 3
mem: location 1032 is 97
mem: location 1033 is 98
mem: location 1034 is 99
mem: location 1046 is 2
mem: location 1041 is 1031
mem: location 1046 is 2
run: address to copy is 1034
run: its type is 4
mem: location 1034 is 99
mem: storing 99 in location 1048
run: b2:character <- index b:address:array:character/deref, i:number
mem: location 1043 is 1035
mem: location 1035 is 3
mem: location 1036 is 97
mem: location 1037 is 98
mem: location 1038 is 100
mem: location 1046 is 2
mem: location 1043 is 1035
mem: location 1046 is 2
run: address to copy is 1038
run: its type is 4
mem: location 1038 is 100
mem: storing 100 in location 1049
run: chars-match?:boolean <- equal a2:character, b2:character
mem: location 1048 is 99
mem: location 1049 is 100
mem: storing 0 in location 1050
run: break-if chars-match?:boolean, 
mem: location 1050 is 0
run: jump-if fell through
run: reply 0:literal
run: result 0 is 0
mem: storing 0 in location 3
run: memory-should-contain [
    3 <- 0  # abc != abd
  ]
run: checking location 3
