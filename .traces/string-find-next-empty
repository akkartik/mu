schedule: main
run: main 0: (((1 string-address)) <- ((new)) )
run: main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: main 1: (((2 integer)) <- ((find-next)) ((1 string-address)) ((/ literal)) ((0 literal)))
mem: ((1 string-address)) => 1000
run: find-next/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 0)
run: find-next/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 0)
run: find-next/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 0)
run: find-next/main 2: 0 => ((3 integer))
mem: ((3 integer)): 3 <= 0
run: find-next/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 0
run: find-next/main 3: 0 => ((4 integer))
mem: ((4 integer)): 4 <= 0
run: find-next/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 0
mem: ((4 integer)) => 0
run: find-next/main 4: t => ((5 boolean))
mem: ((5 boolean)): 5 <= t
run: find-next/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => t
run: find-next/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 0
run: main 1: 0 => ((2 integer))
mem: ((2 integer)): 2 <= 0
schedule: done with routine 
