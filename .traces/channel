9991 parse: --- defining scenario_channel
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:channel <- new-channel 3/capacity\n    1:address:shared:channel <- write 1:address:shared:channel, 34\n    2:character, 1:address:shared:channel <- read 1:address:shared:channel\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:shared:channel <- new-channel 3/capacity
    1:address:shared:channel <- write 1:address:shared:channel, 34
    2:character, 1:address:shared:channel <- read 1:address:shared:channel
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2 <- 34\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2 <- 34
  ]
9999 parse: recipe scenario_channel has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_channel
9991 transform: --- deduce types for recipe scenario_channel
9991 transform: --- collect surrounding spaces for recipe scenario_channel
9991 transform: --- transform names for recipe scenario_channel
9991 transform: --- resolve ambiguous calls for recipe scenario_channel
9991 transform: --- compute instruction operations for recipe scenario_channel
9991 transform: --- transform braces for recipe scenario_channel
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_channel
9991 transform: --- type-check 'call' instructions inside recipe scenario_channel
9991 transform: --- type-check calls inside recipe scenario_channel
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_channel
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_channel
 102 run: run [
    1:address:shared:channel <- new-channel 3/capacity
    1:address:shared:channel <- write 1:address:shared:channel, 34
    2:character, 1:address:shared:channel <- read 1:address:shared:channel
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": "literal", "capacity": <>}
9993 parse:   product: {"1": <"address" : <"shared" : <"channel" : <>>>>}
9992 load: after rewriting: 1:address:shared:channel <- new-channel 3/capacity
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"channel" : <>>>>}
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"1": <"address" : <"shared" : <"channel" : <>>>>}
9992 load: after rewriting: 1:address:shared:channel <- write 1:address:shared:channel, 34
9993 parse: instruction: read
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"channel" : <>>>>}
9993 parse:   product: {"2": "character"}
9993 parse:   product: {"1": <"address" : <"shared" : <"channel" : <>>>>}
9992 load: after rewriting: 2:character, 1:address:shared:channel <- read 1:address:shared:channel
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction new-channel
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 1000
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 0: 1000
9992 transform: instruction write
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for base: 990
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 0: 990
9992 transform: instruction read
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9993 transform: strict match: product 1
9992 transform: score for base: 1000
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9993 transform: strict match: product 1
9992 transform: score for variant 0: 1000
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new-channel ...
9992 transform: write ...
9992 transform: read ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:channel <- new-channel 3/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 104 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1003
 104 run: result <- new channel:type
9999 mem: allocating size 4
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
9999 mem: incrementing refcount of 1008: 0 -> 1
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1005
 104 run: *full <- copy 0
9999 mem: location 1005 is 1009
9999 mem: storing 0 in location 1009
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1006
 104 run: *free <- copy 0
9999 mem: location 1006 is 1010
9999 mem: storing 0 in location 1010
 104 run: capacity <- add capacity, 1
9999 mem: location 1003 is 3
9999 mem: storing 4 in location 1003
 104 run: dest:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1007
 104 run: *dest <- new character:type, capacity
9999 mem: location 1003 is 4
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1012
9999 mem: storing 4 in location 1013
9999 mem: location 1007 is 1011
9999 mem: storing 1012 in location 1011
9999 mem: incrementing refcount of 1012: 0 -> 1
 104 run: reply result:address:shared:channel
9999 mem: location 1004 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1
9999 mem: incrementing refcount of 1008: 1 -> 2
 103 run: 1:address:shared:channel <- write 1:address:shared:channel, 34
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1018
9999 mem: storing 10 in location 1019
 104 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1021
9999 mem: incrementing refcount of 1008: 2 -> 3
 104 run: val:character <- next-ingredient-without-typechecking 
9999 mem: storing 34 in location 1022
 104 run: full:boolean <- channel-full? chan
9999 mem: location 1021 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1030
9999 mem: storing 7 in location 1031
 105 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1033
9999 mem: incrementing refcount of 1008: 3 -> 4
 105 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1033 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1033 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 0
9999 mem: storing 0 in location 1034
 105 run: tmp <- add tmp, 1
9999 mem: location 1034 is 0
9999 mem: storing 1 in location 1034
 105 run: len:number <- channel-capacity chan
9999 mem: location 1033 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1039
9999 mem: storing 4 in location 1040
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1042
9999 mem: incrementing refcount of 1008: 4 -> 5
 106 run: q:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1042 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1042 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1043
9999 mem: incrementing refcount of 1012: 1 -> 2
 106 run: result <- length *q
9999 mem: location 1043 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 4 in location 1044
 106 run: reply result:number
9999 mem: location 1044 is 4
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 4
9999 mem: storing 4 in location 1035
 105 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1034 is 1
9999 mem: location 1035 is 4
9999 mem: storing 0 in location 1036
 105 run: jump-unless at-end?, 
9999 mem: location 1036 is 0
9998 run: jumping to instruction 9
 105 run: full:number <- get *chan, first-full:offset
9999 mem: location 1033 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1033 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1037
 105 run: result <- equal full, tmp
9999 mem: location 1037 is 0
9999 mem: location 1034 is 1
9999 mem: storing 0 in location 1038
 105 run: reply result:boolean
9999 mem: location 1038 is 0
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1023
 104 run: jump-unless full, 
9999 mem: location 1023 is 0
9998 run: jumping to instruction 8
 104 run: circular-buffer:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1025
9999 mem: incrementing refcount of 1012: 2 -> 3
 104 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1026
 104 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1025 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1026 is 1010
9999 mem: location 1010 is 0
9999 mem: storing 1014 in location 1027
 104 run: *dest <- copy val
9999 mem: location 1022 is 34
9999 mem: location 1027 is 1014
9999 mem: storing 34 in location 1014
 104 run: *free <- add *free, 1
9999 mem: location 1026 is 1010
9999 mem: location 1010 is 0
9999 mem: location 1026 is 1010
9999 mem: storing 1 in location 1010
 104 run: len:number <- length *circular-buffer
9999 mem: location 1025 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 4 in location 1028
 104 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1026 is 1010
9999 mem: location 1010 is 1
9999 mem: location 1028 is 4
9999 mem: storing 0 in location 1029
 104 run: jump-unless at-end?, 
9999 mem: location 1029 is 0
9998 run: jumping to instruction 19
 104 run: reply chan:address:shared:channel
9999 mem: location 1021 is 1008
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 5 -> 4
9999 mem: storing 1008 in location 1
9999 mem: incrementing refcount of 1008: 4 -> 5
 103 run: 2:character, 1:address:shared:channel <- read 1:address:shared:channel
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 mem: new alloc: 1045
9999 mem: storing 9 in location 1046
 104 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1048
9999 mem: incrementing refcount of 1008: 5 -> 6
 104 run: empty?:boolean <- channel-empty? chan
9999 mem: location 1048 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1056
9999 mem: storing 5 in location 1057
 105 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1059
9999 mem: incrementing refcount of 1008: 6 -> 7
 105 run: full:number <- get *chan, first-full:offset
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1060
 105 run: free:number <- get *chan, first-free:offset
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1059 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 1
9999 mem: storing 1 in location 1061
 105 run: result <- equal full, free
9999 mem: location 1060 is 0
9999 mem: location 1061 is 1
9999 mem: storing 0 in location 1062
 105 run: reply result:boolean
9999 mem: location 1062 is 0
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1049
 104 run: jump-unless empty?, 
9999 mem: location 1049 is 0
9998 run: jumping to instruction 7
 104 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 1048 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1048 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1051
 104 run: circular-buffer:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1048 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1048 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1052
9999 mem: incrementing refcount of 1012: 3 -> 4
 104 run: result <- index *circular-buffer, *full
9999 mem: location 1052 is 1012
9999 mem: skipping refcount at 1012
9998 run: base address is 1013
9999 mem: location 1051 is 1009
9999 mem: location 1009 is 0
9998 run: address to copy is 1014
9998 run: its type is character
9999 mem: location 1014 is 34
9999 mem: storing 34 in location 1053
 104 run: *full <- add *full, 1
9999 mem: location 1051 is 1009
9999 mem: location 1009 is 0
9999 mem: location 1051 is 1009
9999 mem: storing 1 in location 1009
 104 run: len:number <- length *circular-buffer
9999 mem: location 1052 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 4 in location 1054
 104 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 1051 is 1009
9999 mem: location 1009 is 1
9999 mem: location 1054 is 4
9999 mem: storing 0 in location 1055
 104 run: jump-unless at-end?, 
9999 mem: location 1055 is 0
9998 run: jumping to instruction 17
 104 run: reply result:character, chan:address:shared:channel
9999 mem: location 1053 is 34
9999 mem: location 1048 is 1008
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 34
9998 run: result 1 is 1008
9999 mem: storing 34 in location 2
9999 mem: decrementing refcount of 1008: 7 -> 6
9999 mem: storing 1008 in location 1
9999 mem: incrementing refcount of 1008: 6 -> 7
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    2 <- 34
  ]
9999 run: checking location 2
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
