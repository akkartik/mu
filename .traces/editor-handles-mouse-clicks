 102 run: assume-console [
    left-click 1, 1  # on the 'b'
  ]
9993 parse: instruction: left-click
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   ingredient: {"1": "literal"}
9992 load: after rewriting: left-click 1, 1
 102 run: run [
    editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data
    3:number <- get *2:address:editor-data, cursor-row:offset
    4:number <- get *2:address:editor-data, cursor-column:offset
  ]
9991 parse: --- defining run1001
9993 parse: instruction: editor-event-loop
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"screen": <"address" : <"screen" : <>>>}
9993 parse:   ingredient: {"console": <"address" : <"console" : <>>>}
9993 parse:   ingredient: {"2": <"address" : <"editor-data" : <>>>}
9992 load: after rewriting: editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": <"address" : <"editor-data" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"cursor-row": "offset"}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- get *2:address:editor-data, cursor-row:offset
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": <"address" : <"editor-data" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"cursor-column": "offset"}
9993 parse:   product: {"4": "number"}
9992 load: after rewriting: 4:number <- get *2:address:editor-data, cursor-column:offset
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: editor-event-loop ...
9992 transform: get ...
9992 transform: get ...
9991 transform: --- deduce types for recipe run1001
9992 transform: screen => <address : <screen : <>>>
9992 transform: console => <address : <console : <>>>
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction editor-event-loop
9992 transform: checking variant 0: 100
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9993 name: element cursor-row of type editor-data is at offset 6
9993 name: element cursor-column of type editor-data is at offset 7
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9991 transform: --- checking type and type_name pointers for recipe string-equal
9991 transform: --- checking type and type_name pointers for recipe new-buffer
9991 transform: --- checking type and type_name pointers for recipe grow-buffer
9991 transform: --- checking type and type_name pointers for recipe buffer-full?
9991 transform: --- checking type and type_name pointers for recipe buffer-append
9991 transform: --- checking type and type_name pointers for recipe integer-to-decimal-string
9991 transform: --- checking type and type_name pointers for recipe buffer-to-array
9991 transform: --- checking type and type_name pointers for recipe string-append
9991 transform: --- checking type and type_name pointers for recipe string-replace
9991 transform: --- checking type and type_name pointers for recipe interpolate
9991 transform: --- checking type and type_name pointers for recipe space?
9991 transform: --- checking type and type_name pointers for recipe trim
9991 transform: --- checking type and type_name pointers for recipe find-next
9991 transform: --- checking type and type_name pointers for recipe find-substring
9991 transform: --- checking type and type_name pointers for recipe match-at
9991 transform: --- checking type and type_name pointers for recipe split
9991 transform: --- checking type and type_name pointers for recipe split-first
9991 transform: --- checking type and type_name pointers for recipe string-copy
9991 transform: --- checking type and type_name pointers for recipe min
9991 transform: --- checking type and type_name pointers for recipe max
9991 transform: --- checking type and type_name pointers for recipe new-channel
9991 transform: --- checking type and type_name pointers for recipe write
9991 transform: --- checking type and type_name pointers for recipe read
9991 transform: --- checking type and type_name pointers for recipe clear-channel
9991 transform: --- checking type and type_name pointers for recipe channel-empty?
9991 transform: --- checking type and type_name pointers for recipe channel-full?
9991 transform: --- checking type and type_name pointers for recipe channel-capacity
9991 transform: --- checking type and type_name pointers for recipe buffer-lines
9991 transform: --- checking type and type_name pointers for recipe new-array
9991 transform: --- checking type and type_name pointers for recipe force-specialization-list-number
9991 transform: --- checking type and type_name pointers for recipe force-specialization-duplex-list-character
9991 transform: --- checking type and type_name pointers for recipe new-stream
9991 transform: --- checking type and type_name pointers for recipe rewind-stream
9991 transform: --- checking type and type_name pointers for recipe read-line
9991 transform: --- checking type and type_name pointers for recipe end-of-stream?
9991 transform: --- checking type and type_name pointers for recipe new-fake-screen
9991 transform: --- checking type and type_name pointers for recipe clear-screen
9991 transform: --- checking type and type_name pointers for recipe sync-screen
9991 transform: --- checking type and type_name pointers for recipe fake-screen-is-empty?
9991 transform: --- checking type and type_name pointers for recipe print-character
9991 transform: --- checking type and type_name pointers for recipe clear-line
9991 transform: --- checking type and type_name pointers for recipe cursor-position
9991 transform: --- checking type and type_name pointers for recipe move-cursor
9991 transform: --- checking type and type_name pointers for recipe cursor-down
9991 transform: --- checking type and type_name pointers for recipe cursor-up
9991 transform: --- checking type and type_name pointers for recipe cursor-right
9991 transform: --- checking type and type_name pointers for recipe cursor-left
9991 transform: --- checking type and type_name pointers for recipe cursor-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe cursor-to-next-line
9991 transform: --- checking type and type_name pointers for recipe screen-width
9991 transform: --- checking type and type_name pointers for recipe screen-height
9991 transform: --- checking type and type_name pointers for recipe hide-cursor
9991 transform: --- checking type and type_name pointers for recipe show-cursor
9991 transform: --- checking type and type_name pointers for recipe hide-screen
9991 transform: --- checking type and type_name pointers for recipe show-screen
9991 transform: --- checking type and type_name pointers for recipe print-string
9991 transform: --- checking type and type_name pointers for recipe print-integer
9991 transform: --- checking type and type_name pointers for recipe new-fake-console
9991 transform: --- checking type and type_name pointers for recipe read-event
9991 transform: --- checking type and type_name pointers for recipe read-key
9991 transform: --- checking type and type_name pointers for recipe send-keys-to-channel
9991 transform: --- checking type and type_name pointers for recipe wait-for-event
9991 transform: --- checking type and type_name pointers for recipe has-more-events?
9991 transform: --- checking type and type_name pointers for recipe push_2
9991 transform: --- checking type and type_name pointers for recipe first_2
9991 transform: --- checking type and type_name pointers for recipe rest_2
9991 transform: --- checking type and type_name pointers for recipe push-duplex_2
9991 transform: --- checking type and type_name pointers for recipe first-duplex_2
9991 transform: --- checking type and type_name pointers for recipe next-duplex_2
9991 transform: --- checking type and type_name pointers for recipe prev-duplex_2
9991 transform: --- checking type and type_name pointers for recipe insert-duplex_2
9991 transform: --- checking type and type_name pointers for recipe remove-duplex_2
9991 transform: --- checking type and type_name pointers for recipe remove-duplex-between_2
9991 transform: --- checking type and type_name pointers for recipe insert-duplex-range_2
9991 transform: --- checking type and type_name pointers for recipe append-duplex_2
9991 transform: --- checking type and type_name pointers for recipe last-duplex_2
9991 transform: --- checking type and type_name pointers for recipe sandbox
9991 transform: --- checking type and type_name pointers for recipe main_2
9991 transform: --- checking type and type_name pointers for recipe new-editor
9991 transform: --- checking type and type_name pointers for recipe insert-text
9991 transform: --- checking type and type_name pointers for recipe render
9991 transform: --- checking type and type_name pointers for recipe clear-line-delimited
9991 transform: --- checking type and type_name pointers for recipe clear-screen-from
9991 transform: --- checking type and type_name pointers for recipe clear-rest-of-screen
9991 transform: --- checking type and type_name pointers for recipe get-color
9991 transform: --- checking type and type_name pointers for recipe editor-event-loop
9991 transform: --- checking type and type_name pointers for recipe move-cursor-in-editor
9991 transform: --- checking type and type_name pointers for recipe snap-cursor
9991 transform: --- checking type and type_name pointers for recipe handle-keyboard-event
9991 transform: --- checking type and type_name pointers for recipe insert-at-cursor
9991 transform: --- checking type and type_name pointers for recipe editor-render
9991 transform: --- checking type and type_name pointers for recipe insert-new-line-and-indent
9991 transform: --- checking type and type_name pointers for recipe line-indent
9991 transform: --- checking type and type_name pointers for recipe draw-horizontal
9991 transform: --- checking type and type_name pointers for recipe delete-before-cursor
9991 transform: --- checking type and type_name pointers for recipe move-cursor-coordinates-left
9991 transform: --- checking type and type_name pointers for recipe previous-line-length
9991 transform: --- checking type and type_name pointers for recipe delete-at-cursor
9991 transform: --- checking type and type_name pointers for recipe move-cursor-coordinates-right
9991 transform: --- checking type and type_name pointers for recipe move-to-previous-line
9991 transform: --- checking type and type_name pointers for recipe move-to-next-line
9991 transform: --- checking type and type_name pointers for recipe move-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe move-to-end-of-line
9991 transform: --- checking type and type_name pointers for recipe delete-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe delete-to-end-of-line
9991 transform: --- checking type and type_name pointers for recipe before-start-of-next-line
9991 transform: --- checking type and type_name pointers for recipe before-previous-line
9991 transform: --- checking type and type_name pointers for recipe page-down
9991 transform: --- checking type and type_name pointers for recipe page-up
9991 transform: --- checking type and type_name pointers for recipe new-programming-environment
9991 transform: --- checking type and type_name pointers for recipe event-loop
9991 transform: --- checking type and type_name pointers for recipe resize
9991 transform: --- checking type and type_name pointers for recipe render-all
9991 transform: --- checking type and type_name pointers for recipe render-recipes
9991 transform: --- checking type and type_name pointers for recipe render-sandbox-side
9991 transform: --- checking type and type_name pointers for recipe update-cursor
9991 transform: --- checking type and type_name pointers for recipe render-string
9991 transform: --- checking type and type_name pointers for recipe render-code-string
9991 transform: --- checking type and type_name pointers for recipe maximize
9991 transform: --- checking type and type_name pointers for recipe draw-vertical
9991 transform: --- checking type and type_name pointers for recipe run-sandboxes
9991 transform: --- checking type and type_name pointers for recipe update-recipes
9991 transform: --- checking type and type_name pointers for recipe update-sandbox
9991 transform: --- checking type and type_name pointers for recipe update-status
9991 transform: --- checking type and type_name pointers for recipe save-sandboxes
9991 transform: --- checking type and type_name pointers for recipe render-sandboxes
9991 transform: --- checking type and type_name pointers for recipe restore-sandboxes
9991 transform: --- checking type and type_name pointers for recipe render-screen
9991 transform: --- checking type and type_name pointers for recipe editor-contents
9991 transform: --- checking type and type_name pointers for recipe empty-editor?
9991 transform: --- checking type and type_name pointers for recipe extract-sandbox
9991 transform: --- checking type and type_name pointers for recipe delete-sandbox
9991 transform: --- checking type and type_name pointers for recipe find-click-in-sandbox-output
9991 transform: --- checking type and type_name pointers for recipe toggle-expected-response
9991 transform: --- checking type and type_name pointers for recipe find-click-in-sandbox-code
9991 transform: --- checking type and type_name pointers for recipe add-operation
9991 transform: --- checking type and type_name pointers for recipe first_3
9991 transform: --- checking type and type_name pointers for recipe rest_3
9991 transform: --- checking type and type_name pointers for recipe push_3
9991 transform: --- checking type and type_name pointers for recipe scenario-editor-handles-mouse-clicks
9991 transform: --- checking type and type_name pointers for recipe run1001
9998 trace: run: incrementing callstack depth to 2
 103 run: editor-event-loop screen:address:screen, console:address:console, 2:address:editor-data
9999 mem: location 900 is 1009
9999 mem: location 901 is 1276
9999 mem: location 2 is 1115
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 14
9999 mem: new alloc: 1278
 104 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1280
 104 run: console:address:console <- next-ingredient 
9999 mem: storing 1276 in location 1281
 104 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1282
 104 run: cursor-row:number <- get *editor, cursor-row:offset
9999 mem: location 1282 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1282 is 1115
9998 run: address to copy is 1121
9998 run: its type is number
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1283
 104 run: cursor-column:number <- get *editor, cursor-column:offset
9999 mem: location 1282 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1282 is 1115
9998 run: address to copy is 1122
9998 run: its type is number
9999 mem: location 1122 is 0
9999 mem: storing 0 in location 1284
 104 run: screen <- move-cursor screen, cursor-row, cursor-column
9999 mem: location 1280 is 1009
9999 mem: location 1283 is 1
9999 mem: location 1284 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1195
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1196
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 0 in location 1197
 105 run: jump-unless sc, 
9999 mem: location 1195 is 1009
9998 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1195 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 4
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1195 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1198
 105 run: *row <- copy new-row
9999 mem: location 1196 is 1
9999 mem: location 1198 is 1011
9999 mem: storing 1 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1195 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 9
9999 mem: location 1013 is 1014
9999 mem: location 1195 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1199
 105 run: *column <- copy new-column
9999 mem: location 1197 is 0
9999 mem: location 1199 is 1012
9999 mem: storing 0 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1195 is 1009
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1280
 104 run: e:event, console:address:console, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1281 is 1276
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 12
 105 run: x:address:console <- next-ingredient 
9999 mem: storing 1276 in location 1245
 105 run: jump-unless x, 
9999 mem: location 1245 is 1276
9998 run: jump-unless fell through
 105 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1245 is 1276
9999 mem: location 1276 is 0
9999 mem: location 1277 is 1271
9999 mem: location 1245 is 1276
9998 run: address to copy is 1276
9999 mem: storing 1276 in location 1246
 105 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1245 is 1276
9999 mem: location 1276 is 0
9999 mem: location 1277 is 1271
9999 mem: location 1245 is 1276
9998 run: address to copy is 1277
9998 run: its type is <address : <array : <event : <>>>>
9999 mem: location 1277 is 1271
9999 mem: storing 1271 in location 1247
 105 run: max:number <- length *buf
9999 mem: location 1247 is 1271
9999 mem: storing 1 in location 1248
 105 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1246 is 1276
9999 mem: location 1276 is 0
9999 mem: location 1248 is 1
9999 mem: storing 0 in location 1249
 105 run: jump-unless done?, 
9999 mem: location 1249 is 0
9998 run: jumping to instruction 12
 105 run: result:event <- index *buf, *idx
9999 mem: location 1247 is 1271
9999 mem: location 1246 is 1276
9999 mem: location 1276 is 0
9998 run: address to copy is 1272
9998 run: its type is event
9999 mem: location 1272 is 2
9999 mem: location 1273 is 65513
9999 mem: location 1274 is 1
9999 mem: location 1275 is 1
9999 mem: storing 2 in location 1251
9999 mem: storing 65513 in location 1252
9999 mem: storing 1 in location 1253
9999 mem: storing 1 in location 1254
 105 run: *idx <- add *idx, 1
9999 mem: location 1246 is 1276
9999 mem: location 1276 is 0
9999 mem: location 1246 is 1276
9999 mem: storing 1 in location 1276
 105 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1251 is 2
9999 mem: location 1252 is 65513
9999 mem: location 1253 is 1
9999 mem: location 1254 is 1
9999 mem: location 1245 is 1276
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [2, 65513, 1, 1]
9998 run: result 1 is 1276
9998 run: result 2 is 1
9998 run: result 3 is 0
9999 mem: storing 2 in location 1285
9999 mem: storing 65513 in location 1286
9999 mem: storing 1 in location 1287
9999 mem: storing 1 in location 1288
9999 mem: storing 1276 in location 1281
9999 mem: storing 1 in location 1289
9999 mem: storing 0 in location 1290
 104 run: jump-unless found?, 
9999 mem: location 1289 is 1
9998 run: jump-unless fell through
 104 run: jump-if quit?, 
9999 mem: location 1290 is 0
9998 run: jump-if fell through
 104 run: trace 10, [app], [next-event]
  10 app: next-event 
 104 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1285 is 2
9999 mem: location 1286 is 65513
9999 mem: location 1287 is 1
9999 mem: location 1288 is 1
9999 mem: storing 1286 in location 1291
 104 run: jump-unless t, 
9999 mem: location 1291 is 1286
9998 run: jump-unless fell through
 104 run: move-cursor-in-editor screen, editor, *t
9999 mem: location 1280 is 1009
9999 mem: location 1282 is 1115
9999 mem: location 1291 is 1286
9999 mem: location 1286 is 65513
9999 mem: location 1287 is 1
9999 mem: location 1288 is 1
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 27
9999 mem: new alloc: 1293
 105 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1295
 105 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1296
 105 run: t:touch-event <- next-ingredient 
9999 mem: storing 65513 in location 1297
9999 mem: storing 1 in location 1298
9999 mem: storing 1 in location 1299
 105 run: jump-if editor, 1:offset
9999 mem: location 1296 is 1115
9998 run: jumping to instruction 6
 105 run: click-row:number <- get t, row:offset
9999 mem: location 1297 is 65513
9999 mem: location 1298 is 1
9999 mem: location 1299 is 1
9998 run: address to copy is 1298
9998 run: its type is number
9999 mem: location 1298 is 1
9999 mem: storing 1 in location 1300
 105 run: jump-if click-row, 1:offset
9999 mem: location 1300 is 1
9998 run: jumping to instruction 9
 105 run: click-column:number <- get t, column:offset
9999 mem: location 1297 is 65513
9999 mem: location 1298 is 1
9999 mem: location 1299 is 1
9998 run: address to copy is 1299
9998 run: its type is number
9999 mem: location 1299 is 1
9999 mem: storing 1 in location 1301
 105 run: left:number <- get *editor, left:offset
9999 mem: location 1296 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1296 is 1115
9998 run: address to copy is 1119
9998 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1302
 105 run: too-far-left?:boolean <- lesser-than click-column, left
9999 mem: location 1301 is 1
9999 mem: location 1302 is 0
9999 mem: storing 0 in location 1303
 105 run: jump-unless too-far-left?, 1:offset
9999 mem: location 1303 is 0
9998 run: jumping to instruction 14
 105 run: right:number <- get *editor, right:offset
9999 mem: location 1296 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1296 is 1115
9998 run: address to copy is 1120
9998 run: its type is number
9999 mem: location 1120 is 9
9999 mem: storing 9 in location 1304
 105 run: too-far-right?:boolean <- greater-than click-column, right
9999 mem: location 1301 is 1
9999 mem: location 1304 is 9
9999 mem: storing 0 in location 1305
 105 run: jump-unless too-far-right?, 1:offset
9999 mem: location 1305 is 0
9998 run: jumping to instruction 18
 105 run: before-cursor-row:number <- get *editor, cursor-row:offset
9999 mem: location 1296 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1296 is 1115
9998 run: address to copy is 1121
9998 run: its type is number
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1306
 105 run: before-cursor-column:number <- get *editor, cursor-column:offset
9999 mem: location 1296 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1296 is 1115
9998 run: address to copy is 1122
9998 run: its type is number
9999 mem: location 1122 is 0
9999 mem: storing 0 in location 1307
 105 run: before-top-of-screen:address:duplex-list:character <- get *editor, top-of-screen:offset
9999 mem: location 1296 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1296 is 1115
9998 run: address to copy is 1116
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1116 is 1150
9999 mem: storing 1150 in location 1308
 105 run: editor <- snap-cursor screen, editor, click-row, click-column
9999 mem: location 1295 is 1009
9999 mem: location 1296 is 1115
9999 mem: location 1300 is 1
9999 mem: location 1301 is 1
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 26
 106 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1168
 106 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1169
 106 run: target-row:number <- next-ingredient 
9999 mem: storing 1 in location 1170
 106 run: target-column:number <- next-ingredient 
9999 mem: storing 1 in location 1171
 106 run: jump-if editor, 1:offset
9999 mem: location 1169 is 1115
9998 run: jumping to instruction 7
 106 run: left:number <- get *editor, left:offset
9999 mem: location 1169 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1169 is 1115
9998 run: address to copy is 1119
9998 run: its type is number
9999 mem: location 1119 is 0
9999 mem: storing 0 in location 1172
 106 run: right:number <- get *editor, right:offset
9999 mem: location 1169 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1169 is 1115
9998 run: address to copy is 1120
9998 run: its type is number
9999 mem: location 1120 is 9
9999 mem: storing 9 in location 1173
 106 run: screen-height:number <- screen-height screen
9999 mem: location 1168 is 1009
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1158
 107 run: jump-unless sc, 
9999 mem: location 1158 is 1009
9998 run: jump-unless fell through
 107 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1158 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1158 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1159
 107 run: reply height
9999 mem: location 1159 is 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 5
9999 mem: storing 5 in location 1174
 106 run: curr:address:duplex-list:character <- get *editor, top-of-screen:offset
9999 mem: location 1169 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1169 is 1115
9998 run: address to copy is 1116
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1116 is 1150
9999 mem: storing 1150 in location 1175
 106 run: prev:address:duplex-list:character <- copy curr
9999 mem: location 1175 is 1150
9999 mem: storing 1150 in location 1176
 106 run: curr <- next-duplex_2 curr
9999 mem: location 1175 is 1150
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1150 in location 1158
 107 run: jump-if in, 1:offset
9999 mem: location 1158 is 1150
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1158 is 1150
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1150 is 167
9999 mem: location 1151 is 1153
9999 mem: location 1152 is 0
9999 mem: location 1158 is 1150
9999 type: type deduced to be character$
9998 run: address to copy is 1151
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1151 is 1153
9999 mem: storing 1153 in location 1159
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1159 is 1153
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1153
9999 mem: storing 1153 in location 1175
 106 run: row:number <- copy 1/top
9999 mem: storing 1 in location 1177
 106 run: column:number <- copy left
9999 mem: location 1172 is 0
9999 mem: storing 0 in location 1178
 106 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1169 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1169 is 1115
9998 run: address to copy is 1121
9999 mem: storing 1121 in location 1179
 106 run: *cursor-row <- copy target-row
9999 mem: location 1170 is 1
9999 mem: location 1179 is 1121
9999 mem: storing 1 in location 1121
 106 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1169 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 0
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1169 is 1115
9998 run: address to copy is 1122
9999 mem: storing 1122 in location 1180
 106 run: *cursor-column <- copy target-column
9999 mem: location 1171 is 1
9999 mem: location 1180 is 1122
9999 mem: storing 1 in location 1122
 106 run: before-cursor:address:address:duplex-list:character <- get-address *editor, before-cursor:offset
9999 mem: location 1169 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1150
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1169 is 1115
9998 run: address to copy is 1118
9999 mem: storing 1118 in location 1181
 106 run: jump-unless curr, 
9999 mem: location 1175 is 1153
9998 run: jump-unless fell through
 106 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1177 is 1
9999 mem: location 1174 is 5
9999 mem: storing 0 in location 1182
 106 run: jump-if off-screen?, 
9999 mem: location 1182 is 0
9998 run: jump-if fell through
 106 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1177 is 1
9999 mem: location 1179 is 1121
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1183
 106 run: jump-unless at-cursor-row?, 
9999 mem: location 1183 is 1
9998 run: jump-unless fell through
 106 run: at-cursor?:boolean <- equal column, *cursor-column
9999 mem: location 1178 is 0
9999 mem: location 1180 is 1122
9999 mem: location 1122 is 1
9999 mem: storing 0 in location 1184
 106 run: jump-unless at-cursor?, 
9999 mem: location 1184 is 0
9998 run: jumping to instruction 31
 106 run: c:character <- get *curr, value:offset
9999 mem: location 1175 is 1153
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1153 is 97
9999 mem: location 1154 is 1160
9999 mem: location 1155 is 1150
9999 mem: location 1175 is 1153
9998 run: address to copy is 1153
9999 transform:  === before replace: ?2000
9999 transform:  === after replace: character
9998 run: its type is character
9999 mem: location 1153 is 97
9999 mem: storing 97 in location 1185
 106 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1185 is 97
9999 mem: storing 0 in location 1186
 106 run: jump-unless newline?, 
9999 mem: location 1186 is 0
9998 run: jumping to instruction 49
 106 run: at-right?:boolean <- equal column, right
9999 mem: location 1178 is 0
9999 mem: location 1173 is 9
9999 mem: storing 0 in location 1188
 106 run: jump-unless at-right?, 
9999 mem: location 1188 is 0
9998 run: jumping to instruction 56
 106 run: curr <- next-duplex_2 curr
9999 mem: location 1175 is 1153
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1153 in location 1158
 107 run: jump-if in, 1:offset
9999 mem: location 1158 is 1153
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1158 is 1153
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1153 is 97
9999 mem: location 1154 is 1160
9999 mem: location 1155 is 1150
9999 mem: location 1158 is 1153
9999 type: type deduced to be character$
9998 run: address to copy is 1154
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1154 is 1160
9999 mem: storing 1160 in location 1159
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1159 is 1160
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1160
9999 mem: storing 1160 in location 1175
 106 run: prev <- next-duplex_2 prev
9999 mem: location 1176 is 1150
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1150 in location 1158
 107 run: jump-if in, 1:offset
9999 mem: location 1158 is 1150
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1158 is 1150
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1150 is 167
9999 mem: location 1151 is 1153
9999 mem: location 1152 is 0
9999 mem: location 1158 is 1150
9999 type: type deduced to be character$
9998 run: address to copy is 1151
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1151 is 1153
9999 mem: storing 1153 in location 1159
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1159 is 1153
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1153
9999 mem: storing 1153 in location 1176
 106 run: column <- add column, 1
9999 mem: location 1178 is 0
9999 mem: storing 1 in location 1178
 106 run: jump 
9998 run: jumping to instruction 21
 106 run: jump-unless curr, 
9999 mem: location 1175 is 1160
9998 run: jump-unless fell through
 106 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1177 is 1
9999 mem: location 1174 is 5
9999 mem: storing 0 in location 1182
 106 run: jump-if off-screen?, 
9999 mem: location 1182 is 0
9998 run: jump-if fell through
 106 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1177 is 1
9999 mem: location 1179 is 1121
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1183
 106 run: jump-unless at-cursor-row?, 
9999 mem: location 1183 is 1
9998 run: jump-unless fell through
 106 run: at-cursor?:boolean <- equal column, *cursor-column
9999 mem: location 1178 is 1
9999 mem: location 1180 is 1122
9999 mem: location 1122 is 1
9999 mem: storing 1 in location 1184
 106 run: jump-unless at-cursor?, 
9999 mem: location 1184 is 1
9998 run: jump-unless fell through
 106 run: *before-cursor <- copy prev
9999 mem: location 1176 is 1153
9999 mem: location 1181 is 1118
9999 mem: storing 1153 in location 1118
 106 run: c:character <- get *curr, value:offset
9999 mem: location 1175 is 1160
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1160 is 98
9999 mem: location 1161 is 1163
9999 mem: location 1162 is 1153
9999 mem: location 1175 is 1160
9998 run: address to copy is 1160
9999 transform:  === before replace: ?2000
9999 transform:  === after replace: character
9998 run: its type is character
9999 mem: location 1160 is 98
9999 mem: storing 98 in location 1185
 106 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1185 is 98
9999 mem: storing 0 in location 1186
 106 run: jump-unless newline?, 
9999 mem: location 1186 is 0
9998 run: jumping to instruction 49
 106 run: at-right?:boolean <- equal column, right
9999 mem: location 1178 is 1
9999 mem: location 1173 is 9
9999 mem: storing 0 in location 1188
 106 run: jump-unless at-right?, 
9999 mem: location 1188 is 0
9998 run: jumping to instruction 56
 106 run: curr <- next-duplex_2 curr
9999 mem: location 1175 is 1160
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1160 in location 1158
 107 run: jump-if in, 1:offset
9999 mem: location 1158 is 1160
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1158 is 1160
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1160 is 98
9999 mem: location 1161 is 1163
9999 mem: location 1162 is 1153
9999 mem: location 1158 is 1160
9999 type: type deduced to be character$
9998 run: address to copy is 1161
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1161 is 1163
9999 mem: storing 1163 in location 1159
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1159 is 1163
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1163
9999 mem: storing 1163 in location 1175
 106 run: prev <- next-duplex_2 prev
9999 mem: location 1176 is 1153
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1153 in location 1158
 107 run: jump-if in, 1:offset
9999 mem: location 1158 is 1153
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1158 is 1153
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1153 is 97
9999 mem: location 1154 is 1160
9999 mem: location 1155 is 1150
9999 mem: location 1158 is 1153
9999 type: type deduced to be character$
9998 run: address to copy is 1154
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1154 is 1160
9999 mem: storing 1160 in location 1159
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1159 is 1160
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1160
9999 mem: storing 1160 in location 1176
 106 run: column <- add column, 1
9999 mem: location 1178 is 1
9999 mem: storing 2 in location 1178
 106 run: jump 
9998 run: jumping to instruction 21
 106 run: jump-unless curr, 
9999 mem: location 1175 is 1163
9998 run: jump-unless fell through
 106 run: off-screen?:boolean <- greater-or-equal row, screen-height
9999 mem: location 1177 is 1
9999 mem: location 1174 is 5
9999 mem: storing 0 in location 1182
 106 run: jump-if off-screen?, 
9999 mem: location 1182 is 0
9998 run: jump-if fell through
 106 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1177 is 1
9999 mem: location 1179 is 1121
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1183
 106 run: jump-unless at-cursor-row?, 
9999 mem: location 1183 is 1
9998 run: jump-unless fell through
 106 run: at-cursor?:boolean <- equal column, *cursor-column
9999 mem: location 1178 is 2
9999 mem: location 1180 is 1122
9999 mem: location 1122 is 1
9999 mem: storing 0 in location 1184
 106 run: jump-unless at-cursor?, 
9999 mem: location 1184 is 0
9998 run: jumping to instruction 31
 106 run: c:character <- get *curr, value:offset
9999 mem: location 1175 is 1163
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1163 is 99
9999 mem: location 1164 is 0
9999 mem: location 1165 is 1160
9999 mem: location 1175 is 1163
9998 run: address to copy is 1163
9999 transform:  === before replace: ?2000
9999 transform:  === after replace: character
9998 run: its type is character
9999 mem: location 1163 is 99
9999 mem: storing 99 in location 1185
 106 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1185 is 99
9999 mem: storing 0 in location 1186
 106 run: jump-unless newline?, 
9999 mem: location 1186 is 0
9998 run: jumping to instruction 49
 106 run: at-right?:boolean <- equal column, right
9999 mem: location 1178 is 2
9999 mem: location 1173 is 9
9999 mem: storing 0 in location 1188
 106 run: jump-unless at-right?, 
9999 mem: location 1188 is 0
9998 run: jumping to instruction 56
 106 run: curr <- next-duplex_2 curr
9999 mem: location 1175 is 1163
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1163 in location 1158
 107 run: jump-if in, 1:offset
9999 mem: location 1158 is 1163
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1158 is 1163
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1163 is 99
9999 mem: location 1164 is 0
9999 mem: location 1165 is 1160
9999 mem: location 1158 is 1163
9999 type: type deduced to be character$
9998 run: address to copy is 1164
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1164 is 0
9999 mem: storing 0 in location 1159
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1159 is 0
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1175
 106 run: prev <- next-duplex_2 prev
9999 mem: location 1176 is 1160
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1160 in location 1158
 107 run: jump-if in, 1:offset
9999 mem: location 1158 is 1160
9998 run: jumping to instruction 4
 107 run: result <- get *in, next:offset
9999 mem: location 1158 is 1160
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1160 is 98
9999 mem: location 1161 is 1163
9999 mem: location 1162 is 1153
9999 mem: location 1158 is 1160
9999 type: type deduced to be character$
9998 run: address to copy is 1161
9999 transform:  === before replace: <address : <duplex-list : <?2000 : <>>>>
9999 transform:  === after replace: <address : <duplex-list : <character : <>>>>
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1161 is 1163
9999 mem: storing 1163 in location 1159
 107 run: reply result:address:duplex-list:_elem
9999 mem: location 1159 is 1163
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1163
9999 mem: storing 1163 in location 1176
 106 run: column <- add column, 1
9999 mem: location 1178 is 2
9999 mem: storing 3 in location 1178
 106 run: jump 
9998 run: jumping to instruction 21
 106 run: jump-unless curr, 
9999 mem: location 1175 is 0
9998 run: jumping to instruction 61
 106 run: at-cursor-row?:boolean <- equal row, *cursor-row
9999 mem: location 1177 is 1
9999 mem: location 1179 is 1121
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1183
 106 run: cursor-outside-line?:boolean <- lesser-or-equal column, *cursor-column
9999 mem: location 1178 is 3
9999 mem: location 1180 is 1122
9999 mem: location 1122 is 1
9999 mem: storing 0 in location 1189
 106 run: before-cursor-on-same-line?:boolean <- and at-cursor-row?, cursor-outside-line?
9999 mem: location 1183 is 1
9999 mem: location 1189 is 0
9999 mem: storing 0 in location 1190
 106 run: above-cursor-row?:boolean <- lesser-than row, *cursor-row
9999 mem: location 1177 is 1
9999 mem: location 1179 is 1121
9999 mem: location 1121 is 1
9999 mem: storing 0 in location 1191
 106 run: before-cursor?:boolean <- or before-cursor-on-same-line?, above-cursor-row?
9999 mem: location 1190 is 0
9999 mem: location 1191 is 0
9999 mem: storing 0 in location 1192
 106 run: jump-unless before-cursor?, 
9999 mem: location 1192 is 0
9998 run: jumping to instruction 72
 106 run: reply editor:address:editor-data
9999 mem: location 1169 is 1115
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1115
9999 mem: storing 1115 in location 1296
 105 run: undo-coalesce-tag:number <- copy 0/never
9999 mem: storing 0 in location 1309
 105 run: after-cursor-row:number <- get *editor, cursor-row:offset
9999 mem: location 1296 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1153
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1296 is 1115
9998 run: address to copy is 1121
9998 run: its type is number
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1310
 105 run: after-cursor-column:number <- get *editor, cursor-column:offset
9999 mem: location 1296 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1153
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1296 is 1115
9998 run: address to copy is 1122
9998 run: its type is number
9999 mem: location 1122 is 1
9999 mem: storing 1 in location 1311
 105 run: after-top-of-screen:address:duplex-list:character <- get *editor, top-of-screen:offset
9999 mem: location 1296 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1153
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1296 is 1115
9998 run: address to copy is 1116
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1116 is 1150
9999 mem: storing 1150 in location 1312
 105 run: jump-unless undo-coalesce-tag, 
9999 mem: location 1309 is 0
9998 run: jumping to instruction 44
 105 run: op:address:operation <- new operation:type
9999 mem: storing 1200 in location 1314
 105 run: *op <- merge 1/move-operation, before-cursor-row, before-cursor-column, before-top-of-screen, after-cursor-row, after-cursor-column, after-top-of-screen, undo-coalesce-tag
9999 mem: location 1306 is 1
9999 mem: location 1307 is 0
9999 mem: location 1308 is 1150
9999 mem: location 1310 is 1
9999 mem: location 1311 is 1
9999 mem: location 1312 is 1150
9999 mem: location 1309 is 0
9999 mem: location 1314 is 1200
9999 mem: location 1314 is 1200
9999 mem: storing 1 in location 1200
9999 mem: storing 1 in location 1201
9999 mem: storing 0 in location 1202
9999 mem: storing 1150 in location 1203
9999 mem: storing 1 in location 1204
9999 mem: storing 1 in location 1205
9999 mem: storing 1150 in location 1206
9999 mem: storing 0 in location 1207
 105 run: editor <- add-operation editor, op
9999 mem: location 1296 is 1115
9999 mem: location 1314 is 1200
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 106 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1115 in location 1239
 106 run: op:address:operation <- next-ingredient 
9999 mem: storing 1200 in location 1240
 106 run: undo:address:address:list:address:operation <- get-address *editor, undo:offset
9999 mem: location 1239 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1153
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 0
9999 mem: location 1125 is 0
9999 mem: location 1239 is 1115
9998 run: address to copy is 1124
9999 mem: storing 1124 in location 1241
 106 run: *undo <- push_3 op, *undo
9999 mem: location 1240 is 1200
9999 mem: location 1241 is 1124
9999 mem: location 1124 is 0
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 107 run: x:_elem <- next-ingredient 
9999 mem: storing 1200 in location 1195
 107 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 0 in location 1196
 107 run: result <- new {(list _elem): type}
9999 mem: new alloc: 1321
9999 mem: storing 1321 in location 1197
 107 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1197 is 1321
9999 type: checking size of type ingredient

9999 type: type deduced to be address$
9999 mem: location 1321 is 0
9999 mem: location 1322 is 0
9999 mem: location 1197 is 1321
9998 run: address to copy is 1321
9999 mem: storing 1321 in location 1198
 107 run: *val <- copy x
9999 mem: location 1195 is 1200
9999 mem: location 1198 is 1321
9999 mem: storing 1200 in location 1321
 107 run: next:address:address:list:_elem <- get-address *result, next:offset
9999 mem: location 1197 is 1321
9999 type: checking size of type ingredient

9999 type: type deduced to be address$
9999 mem: location 1321 is 1200
9999 mem: location 1322 is 0
9999 mem: location 1197 is 1321
9999 type: type deduced to be address$
9998 run: address to copy is 1322
9999 mem: storing 1322 in location 1199
 107 run: *next <- copy in
9999 mem: location 1196 is 0
9999 mem: location 1199 is 1322
9999 mem: storing 0 in location 1322
 107 run: reply result
9999 mem: location 1197 is 1321
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1321
9999 mem: location 1241 is 1124
9999 mem: storing 1321 in location 1124
 106 run: redo:address:address:list:address:operation <- get-address *editor, redo:offset
9999 mem: location 1239 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1153
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1321
9999 mem: location 1125 is 0
9999 mem: location 1239 is 1115
9998 run: address to copy is 1125
9999 mem: storing 1125 in location 1242
 106 run: *redo <- copy 0
9999 mem: location 1242 is 1125
9999 mem: storing 0 in location 1125
 106 run: reply editor/same-as-ingredient:0
9999 mem: location 1239 is 1115
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1115
9999 mem: storing 1115 in location 1296
 105 run: reply 1/true
9999 trace: reply: decrementing callstack depth from 4
 104 run: jump +next-event:label
9998 run: jumping to instruction 6
 104 run: cursor-row:number <- get *editor, cursor-row:offset
9999 mem: location 1282 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1153
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1321
9999 mem: location 1125 is 0
9999 mem: location 1282 is 1115
9998 run: address to copy is 1121
9998 run: its type is number
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 1283
 104 run: cursor-column:number <- get *editor, cursor-column:offset
9999 mem: location 1282 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1153
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1321
9999 mem: location 1125 is 0
9999 mem: location 1282 is 1115
9998 run: address to copy is 1122
9998 run: its type is number
9999 mem: location 1122 is 1
9999 mem: storing 1 in location 1284
 104 run: screen <- move-cursor screen, cursor-row, cursor-column
9999 mem: location 1280 is 1009
9999 mem: location 1283 is 1
9999 mem: location 1284 is 1
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1195
 105 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1196
 105 run: new-column:number <- next-ingredient 
9999 mem: storing 1 in location 1197
 105 run: jump-unless sc, 
9999 mem: location 1195 is 1009
9998 run: jump-unless fell through
 105 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1195 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1195 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1198
 105 run: *row <- copy new-row
9999 mem: location 1196 is 1
9999 mem: location 1198 is 1011
9999 mem: storing 1 in location 1011
 105 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1195 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1195 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1199
 105 run: *column <- copy new-column
9999 mem: location 1197 is 1
9999 mem: location 1199 is 1012
9999 mem: storing 1 in location 1012
 105 run: reply sc/same-as-ingredient:0
9999 mem: location 1195 is 1009
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1280
 104 run: e:event, console:address:console, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1281 is 1276
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 12
 105 run: x:address:console <- next-ingredient 
9999 mem: storing 1276 in location 1245
 105 run: jump-unless x, 
9999 mem: location 1245 is 1276
9998 run: jump-unless fell through
 105 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1245 is 1276
9999 mem: location 1276 is 1
9999 mem: location 1277 is 1271
9999 mem: location 1245 is 1276
9998 run: address to copy is 1276
9999 mem: storing 1276 in location 1246
 105 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1245 is 1276
9999 mem: location 1276 is 1
9999 mem: location 1277 is 1271
9999 mem: location 1245 is 1276
9998 run: address to copy is 1277
9998 run: its type is <address : <array : <event : <>>>>
9999 mem: location 1277 is 1271
9999 mem: storing 1271 in location 1247
 105 run: max:number <- length *buf
9999 mem: location 1247 is 1271
9999 mem: storing 1 in location 1248
 105 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1246 is 1276
9999 mem: location 1276 is 1
9999 mem: location 1248 is 1
9999 mem: storing 1 in location 1249
 105 run: jump-unless done?, 
9999 mem: location 1249 is 1
9998 run: jump-unless fell through
 105 run: dummy:address:event <- new event:type
9999 mem: storing 1156 in location 1250
 105 run: reply *dummy, x/same-as-ingredient:0, 1/found, 1/quit
9999 mem: location 1250 is 1156
9999 mem: location 1156 is 0
9999 mem: location 1157 is 0
9999 mem: location 1158 is 0
9999 mem: location 1159 is 0
9999 mem: location 1245 is 1276
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is [0, 0, 0, 0]
9998 run: result 1 is 1276
9998 run: result 2 is 1
9998 run: result 3 is 1
9999 mem: storing 0 in location 1285
9999 mem: storing 0 in location 1286
9999 mem: storing 0 in location 1287
9999 mem: storing 0 in location 1288
9999 mem: storing 1276 in location 1281
9999 mem: storing 1 in location 1289
9999 mem: storing 1 in location 1290
 104 run: jump-unless found?, 
9999 mem: location 1289 is 1
9998 run: jump-unless fell through
 104 run: jump-if quit?, 
9999 mem: location 1290 is 1
9998 run: jumping to instruction 28
9999 trace: fall-through: exiting editor-event-loop; decrementing callstack depth from 3
 103 run: 3:number <- get *2:address:editor-data, cursor-row:offset
9999 mem: location 2 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1153
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1321
9999 mem: location 1125 is 0
9999 mem: location 2 is 1115
9998 run: address to copy is 1121
9998 run: its type is number
9999 mem: location 1121 is 1
9999 mem: storing 1 in location 3
 103 run: 4:number <- get *2:address:editor-data, cursor-column:offset
9999 mem: location 2 is 1115
9999 mem: location 1115 is 1150
9999 mem: location 1116 is 1150
9999 mem: location 1117 is 0
9999 mem: location 1118 is 1153
9999 mem: location 1119 is 0
9999 mem: location 1120 is 9
9999 mem: location 1121 is 1
9999 mem: location 1122 is 1
9999 mem: location 1123 is 1
9999 mem: location 1124 is 1321
9999 mem: location 1125 is 0
9999 mem: location 2 is 1115
9998 run: address to copy is 1122
9998 run: its type is number
9999 mem: location 1122 is 1
9999 mem: storing 1 in location 4
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: screen-should-contain [
    .          .
    .abc       .
    .┈┈┈┈┈┈┈┈┈┈.
    .          .
  ]
 102 run: memory-should-contain [
    3 <- 1  # cursor is at row 0..
    4 <- 1  # ..and column 1
  ]
9999 run: checking location 3
9999 run: checking location 4
 102 run: check-trace-count-for-label 0, [print-character]
9999 trace: fall-through: exiting scenario-editor-handles-mouse-clicks; decrementing callstack depth from 1
