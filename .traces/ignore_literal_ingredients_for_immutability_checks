9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"d1": "type"}
9993 parse:   product: {"p": <"address" : <"shared" : <"d1" : <>>>>}
9992 load: after rewriting: p:address:shared:d1 <- new d1:type
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"p": <>}
9993 parse:   product: {"q": "number"}
9992 load: after rewriting: q:number <- foo p
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: p:address:shared:d1
9999 parse: header product: q:number
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"d1": "type"}
9993 parse:   product: {"x": <"address" : <"shared" : <"d1" : <>>>>}
9992 load: after rewriting: x:address:shared:d1 <- new d1:type
9993 parse: instruction: get-address
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <>, "lookup": <>}
9993 parse:   ingredient: {"p": "offset"}
9993 parse:   product: {"y": <"address" : <"number" : <>>>}
9992 load: after rewriting: y:address:number <- get-address *x, p:offset
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"q": <>}
9992 load: after rewriting: q <- copy 34
9999 parse: recipe foo has a header
9991 parse: --- defining container d1
9999 parse: type number: 1000
9993 parse:   element name: p
9993 parse:   type: 1
9993 parse:   element name: q
9993 parse:   type: 1
9990 transform: === transform_all()
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe main
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: p => <address : <shared : <?-1 : <>>>>
9992 transform: p <= <address : <shared : <?-1 : <>>>>
9992 transform: q => number
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: p => <address : <shared : <?-1 : <>>>>
9992 transform: x => <address : <shared : <?-1 : <>>>>
9992 transform: x <= <address : <shared : <?-1 : <>>>>
9992 transform: y => <address : <number : <>>>
9992 transform: q => number
9991 transform: --- deduce types from header for foo
9993 transform: type of p is <address : <shared : <?-1 : <>>>>
9993 transform: type of q is number
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: p:address:shared:d1 <- next-ingredient-without-typechecking 
9993 transform:   product: p: <address : <shared : <?-1 : <>>>> -- {"p": <"address" : <"shared" : <"d1" : <>>>>}
9992 transform: instruction: x:address:shared:d1 <- new d1:type
9993 transform:   product: x: <address : <shared : <?-1 : <>>>> -- {"x": <"address" : <"shared" : <"d1" : <>>>>}
9992 transform: instruction: y:address:number <- get-address *x, p:offset
9993 transform:   product: y: <address : <number : <>>> -- {"y": <"address" : <"number" : <>>>}
9992 transform: instruction: q <- copy 34
9993 transform:   product: q: NULLNULLNULL -- {"q": <>}
9993 transform: type of q is number
9992 transform: instruction: reply q:number
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9993 name: assign p 1
9993 name: assign q 2
9991 transform: --- transform names for recipe foo
9993 name: assign p 1
9993 name: assign x 2
9993 name: element p of type d1 is at offset 0
9993 name: assign y 3
9993 name: assign q 4
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 1000
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 55: 1000
9991 transform: --- resolve ambiguous calls for recipe foo
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9992 new: size of "d1" is 2
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9992 new: size of "d1" is 2
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1000
9999 mem: storing 3 in location 1001
 102 run: p:address:shared:d1 <- new d1:type
9999 mem: allocating size 3
9999 mem: new alloc: 1005
9999 mem: storing 1005 in location 1003
9999 mem: incrementing refcount of 1005: 0 -> 1
 102 run: q:number <- foo p
9999 mem: location 1003 is 1005
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1008
9999 mem: storing 5 in location 1009
 103 run: p:address:shared:d1 <- next-ingredient-without-typechecking 
9999 mem: storing 1005 in location 1011
9999 mem: incrementing refcount of 1005: 1 -> 2
 103 run: x:address:shared:d1 <- new d1:type
9999 mem: allocating size 3
9999 mem: new alloc: 1015
9999 mem: storing 1015 in location 1012
9999 mem: incrementing refcount of 1015: 0 -> 1
 103 run: y:address:number <- get-address *x, p:offset
9999 mem: location 1012 is 1015
9999 mem: skipping refcount at 1015
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1012 is 1015
9999 mem: skipping refcount at 1015
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1013
 103 run: q <- copy 34
9999 mem: storing 34 in location 1014
 103 run: reply q:number
9999 mem: location 1014 is 34
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 34
9999 mem: storing 34 in location 1004
 102 run: reply 
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 1
