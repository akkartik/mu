schedule: main
run: main 0: (((1 string-address)) <- ((new)) a/b/c)
run: main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: main 1: (((2 string-address-array-address)) <- ((split)) ((1 string-address)) ((/ literal)))
mem: ((1 string-address)) => 1000
run: split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: split/main 0: 1006 => ((default-space space-address))
run: split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/)
run: split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1008 <= 1000
run: split/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/)
run: split/main 2: #\/ => ((2 character))
mem: ((2 character)): 1009 <= #\/
run: split/main 3: (((3 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 5
run: split/main 3: 5 => ((3 integer))
mem: ((3 integer)): 1010 <= 5
run: split/main 4: (((4 boolean)) <- ((equal)) ((3 integer)) ((0 literal)))
mem: ((3 integer)) => 5
run: split/main 4: nil => ((4 boolean))
mem: ((4 boolean)): 1011 <= nil
run: split/main 5: (((jump-unless)) ((4 boolean)) ((2 offset)))
mem: ((4 boolean)) => nil
run: split/main 8: (((6 integer)) <- ((copy)) ((1 literal)))
run: split/main 8: 1 => ((6 integer))
mem: ((6 integer)): 1013 <= 1
run: split/main 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: split/main 9: 0 => ((7 integer))
mem: ((7 integer)): 1014 <= 0
run: split/main 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((7 integer)) => 0
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 0)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 0)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 0)
run: find-next/split/main 2: 0 => ((3 integer))
mem: ((3 integer)): 3 <= 0
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 5
run: find-next/split/main 3: 5 => ((4 integer))
mem: ((4 integer)): 4 <= 5
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 0
mem: ((4 integer)) => 5
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((1000 string))
mem: ((1000 integer)) => 5
mem: ((1001 byte) (raw)) => a
run: find-next/split/main 6: #\a => ((6 byte))
mem: ((6 byte)): 6 <= #\a
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => a
mem: ((2 character)) => /
run: find-next/split/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-next/split/main 9: 1 => ((3 integer))
mem: ((3 integer)): 3 <= 1
run: find-next/split/main 10: (((jump)) ((-7 offset)))
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 5
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1000 string))
mem: ((1000 integer)) => 5
mem: ((1002 byte) (raw)) => /
run: find-next/split/main 6: #\/ => ((6 byte))
mem: ((6 byte)): 6 <= #\/
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 7: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 1
run: split/main 10: 1 => ((7 integer))
mem: ((7 integer)): 1014 <= 1
run: split/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
mem: ((7 integer)) => 1
mem: ((3 integer)) => 5
run: split/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1015 <= nil
run: split/main 12: (((jump-if)) ((8 boolean)) ((3 offset)))
mem: ((8 boolean)) => nil
run: split/main 13: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: split/main 13: 2 => ((7 integer))
mem: ((7 integer)): 1014 <= 2
run: split/main 14: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 1
run: split/main 14: 2 => ((6 integer))
mem: ((6 integer)): 1013 <= 2
run: split/main 15: (((jump)) ((-6 offset)))
run: split/main 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((7 integer)) => 2
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 2)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 2)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 2)
run: find-next/split/main 2: 2 => ((3 integer))
mem: ((3 integer)): 3 <= 2
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 5
run: find-next/split/main 3: 5 => ((4 integer))
mem: ((4 integer)): 4 <= 5
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 5
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1000 string))
mem: ((1000 integer)) => 5
mem: ((1003 byte) (raw)) => b
run: find-next/split/main 6: #\b => ((6 byte))
mem: ((6 byte)): 6 <= #\b
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => b
mem: ((2 character)) => /
run: find-next/split/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-next/split/main 9: 3 => ((3 integer))
mem: ((3 integer)): 3 <= 3
run: find-next/split/main 10: (((jump)) ((-7 offset)))
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 5
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((1000 string))
mem: ((1000 integer)) => 5
mem: ((1004 byte) (raw)) => /
run: find-next/split/main 6: #\/ => ((6 byte))
mem: ((6 byte)): 6 <= #\/
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 7: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 3
run: split/main 10: 3 => ((7 integer))
mem: ((7 integer)): 1014 <= 3
run: split/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
mem: ((7 integer)) => 3
mem: ((3 integer)) => 5
run: split/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1015 <= nil
run: split/main 12: (((jump-if)) ((8 boolean)) ((3 offset)))
mem: ((8 boolean)) => nil
run: split/main 13: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 3
run: split/main 13: 4 => ((7 integer))
mem: ((7 integer)): 1014 <= 4
run: split/main 14: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 2
run: split/main 14: 3 => ((6 integer))
mem: ((6 integer)): 1013 <= 3
run: split/main 15: (((jump)) ((-6 offset)))
run: split/main 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((7 integer)) => 4
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 4)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 4)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 4)
run: find-next/split/main 2: 4 => ((3 integer))
mem: ((3 integer)): 3 <= 4
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 5
run: find-next/split/main 3: 5 => ((4 integer))
mem: ((4 integer)): 4 <= 5
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 4
mem: ((4 integer)) => 5
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 4
array-len: ((1000 string))
mem: ((1000 integer)) => 5
mem: ((1005 byte) (raw)) => c
run: find-next/split/main 6: #\c => ((6 byte))
mem: ((6 byte)): 6 <= #\c
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => c
mem: ((2 character)) => /
run: find-next/split/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 4
run: find-next/split/main 9: 5 => ((3 integer))
mem: ((3 integer)): 3 <= 5
run: find-next/split/main 10: (((jump)) ((-7 offset)))
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 5
mem: ((4 integer)) => 5
run: find-next/split/main 4: t => ((5 boolean))
mem: ((5 boolean)): 5 <= t
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 5
run: split/main 10: 5 => ((7 integer))
mem: ((7 integer)): 1014 <= 5
run: split/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
mem: ((7 integer)) => 5
mem: ((3 integer)) => 5
run: split/main 11: t => ((8 boolean))
mem: ((8 boolean)): 1015 <= t
run: split/main 12: (((jump-if)) ((8 boolean)) ((3 offset)))
mem: ((8 boolean)) => t
run: split/main 16: (((5 string-address-array-address)) <- ((new)) ((string-address-array literal)) ((6 integer)))
mem: ((6 integer)) => 3
run: split/main 16: 1037 => ((5 string-address-array-address))
mem: ((5 string-address-array-address)): 1012 <= 1037
run: split/main 17: (((9 integer)) <- ((copy)) ((0 literal)))
run: split/main 17: 0 => ((9 integer))
mem: ((9 integer)): 1016 <= 0
run: split/main 18: (((10 integer)) <- ((copy)) ((0 literal)))
run: split/main 18: 0 => ((10 integer))
mem: ((10 integer)): 1017 <= 0
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 0
mem: ((3 integer)) => 5
run: split/main 19: nil => ((8 boolean))
mem: ((8 boolean)): 1015 <= nil
run: split/main 20: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: split/main 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((10 integer)) => 0
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 0)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 0)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 0)
run: find-next/split/main 2: 0 => ((3 integer))
mem: ((3 integer)): 3 <= 0
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 5
run: find-next/split/main 3: 5 => ((4 integer))
mem: ((4 integer)): 4 <= 5
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 0
mem: ((4 integer)) => 5
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((1000 string))
mem: ((1000 integer)) => 5
mem: ((1001 byte) (raw)) => a
run: find-next/split/main 6: #\a => ((6 byte))
mem: ((6 byte)): 6 <= #\a
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => a
mem: ((2 character)) => /
run: find-next/split/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-next/split/main 9: 1 => ((3 integer))
mem: ((3 integer)): 3 <= 1
run: find-next/split/main 10: (((jump)) ((-7 offset)))
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 5
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1000 string))
mem: ((1000 integer)) => 5
mem: ((1002 byte) (raw)) => /
run: find-next/split/main 6: #\/ => ((6 byte))
mem: ((6 byte)): 6 <= #\/
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 7: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 1
run: split/main 21: 1 => ((11 integer))
mem: ((11 integer)): 1018 <= 1
run: split/main 22: (((12 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 0
array-len: ((1037 string-address-array) (raw))
mem: ((1037 integer) (raw)) => 3
run: split/main 22: 1038 => ((12 string-address-address))
mem: ((12 string-address-address)): 1019 <= 1038
run: split/main 23: (((12 string-address-address) (deref)) <- ((string-copy)) ((1 string-address)) ((10 integer)) ((11 integer)))
mem: ((1 string-address)) => 1000
mem: ((10 integer)) => 0
mem: ((11 integer)) => 1
run: string-copy/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split/main 0: 1041 => ((default-space space-address))
run: string-copy/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 0 1)
run: string-copy/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1043 <= 1000
run: string-copy/split/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1000 0 1)
run: string-copy/split/main 2: 0 => ((2 integer))
mem: ((2 integer)): 1044 <= 0
run: string-copy/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 0 1)
run: string-copy/split/main 3: 1 => ((3 integer))
mem: ((3 integer)): 1045 <= 1
run: string-copy/split/main 4: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 1
mem: ((2 integer)) => 0
run: string-copy/split/main 4: 1 => ((4 integer))
mem: ((4 integer)): 1046 <= 1
run: string-copy/split/main 5: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 1
run: string-copy/split/main 5: 1072 => ((5 string-address))
mem: ((5 string-address)): 1047 <= 1072
run: string-copy/split/main 6: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 0
run: string-copy/split/main 6: 0 => ((6 integer))
mem: ((6 integer)): 1048 <= 0
run: string-copy/split/main 7: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split/main 7: 0 => ((7 integer))
mem: ((7 integer)): 1049 <= 0
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 0
mem: ((3 integer)) => 1
run: string-copy/split/main 8: nil => ((8 boolean))
mem: ((8 boolean)): 1050 <= nil
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split/main 10: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 0
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 5
mem: ((1001 byte) (raw)) => a
run: string-copy/split/main 10: #\a => ((9 character))
mem: ((9 character)): 1051 <= #\a
run: string-copy/split/main 11: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1072 string) (raw))
mem: ((1072 integer) (raw)) => 1
run: string-copy/split/main 11: 1073 => ((10 character-address))
mem: ((10 character-address)): 1052 <= 1073
run: string-copy/split/main 12: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => a
run: string-copy/split/main 12: #\a => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1073 <= #\a
run: string-copy/split/main 13: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 0
run: string-copy/split/main 13: 1 => ((6 integer))
mem: ((6 integer)): 1048 <= 1
run: string-copy/split/main 14: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split/main 14: 1 => ((7 integer))
mem: ((7 integer)): 1049 <= 1
run: string-copy/split/main 15: (((jump)) ((-8 offset)))
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 1
mem: ((3 integer)) => 1
run: string-copy/split/main 8: t => ((8 boolean))
mem: ((8 boolean)): 1050 <= t
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split/main 16: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1072
run: split/main 23: 1072 => ((12 string-address-address) (deref))
mem: ((12 string-address-address) (deref)): 1038 <= 1072
run: split/main 24: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
mem: ((11 integer)) => 1
run: split/main 24: 2 => ((10 integer))
mem: ((10 integer)): 1017 <= 2
run: split/main 25: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 0
run: split/main 25: 1 => ((9 integer))
mem: ((9 integer)): 1016 <= 1
run: split/main 26: (((jump)) ((-8 offset)))
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 2
mem: ((3 integer)) => 5
run: split/main 19: nil => ((8 boolean))
mem: ((8 boolean)): 1015 <= nil
run: split/main 20: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: split/main 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((10 integer)) => 2
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 2)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 2)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 2)
run: find-next/split/main 2: 2 => ((3 integer))
mem: ((3 integer)): 3 <= 2
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 5
run: find-next/split/main 3: 5 => ((4 integer))
mem: ((4 integer)): 4 <= 5
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 5
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1000 string))
mem: ((1000 integer)) => 5
mem: ((1003 byte) (raw)) => b
run: find-next/split/main 6: #\b => ((6 byte))
mem: ((6 byte)): 6 <= #\b
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => b
mem: ((2 character)) => /
run: find-next/split/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-next/split/main 9: 3 => ((3 integer))
mem: ((3 integer)): 3 <= 3
run: find-next/split/main 10: (((jump)) ((-7 offset)))
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 5
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 3
array-len: ((1000 string))
mem: ((1000 integer)) => 5
mem: ((1004 byte) (raw)) => /
run: find-next/split/main 6: #\/ => ((6 byte))
mem: ((6 byte)): 6 <= #\/
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => /
mem: ((2 character)) => /
run: find-next/split/main 7: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 3
run: split/main 21: 3 => ((11 integer))
mem: ((11 integer)): 1018 <= 3
run: split/main 22: (((12 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 1
array-len: ((1037 string-address-array) (raw))
mem: ((1037 integer) (raw)) => 3
run: split/main 22: 1039 => ((12 string-address-address))
mem: ((12 string-address-address)): 1019 <= 1039
run: split/main 23: (((12 string-address-address) (deref)) <- ((string-copy)) ((1 string-address)) ((10 integer)) ((11 integer)))
mem: ((1 string-address)) => 1000
mem: ((10 integer)) => 2
mem: ((11 integer)) => 3
run: string-copy/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split/main 0: 1074 => ((default-space space-address))
run: string-copy/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 2 3)
run: string-copy/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1076 <= 1000
run: string-copy/split/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1000 2 3)
run: string-copy/split/main 2: 2 => ((2 integer))
mem: ((2 integer)): 1077 <= 2
run: string-copy/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 2 3)
run: string-copy/split/main 3: 3 => ((3 integer))
mem: ((3 integer)): 1078 <= 3
run: string-copy/split/main 4: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 3
mem: ((2 integer)) => 2
run: string-copy/split/main 4: 1 => ((4 integer))
mem: ((4 integer)): 1079 <= 1
run: string-copy/split/main 5: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 1
run: string-copy/split/main 5: 1105 => ((5 string-address))
mem: ((5 string-address)): 1080 <= 1105
run: string-copy/split/main 6: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 2
run: string-copy/split/main 6: 2 => ((6 integer))
mem: ((6 integer)): 1081 <= 2
run: string-copy/split/main 7: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split/main 7: 0 => ((7 integer))
mem: ((7 integer)): 1082 <= 0
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 2
mem: ((3 integer)) => 3
run: string-copy/split/main 8: nil => ((8 boolean))
mem: ((8 boolean)): 1083 <= nil
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split/main 10: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 2
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 5
mem: ((1003 byte) (raw)) => b
run: string-copy/split/main 10: #\b => ((9 character))
mem: ((9 character)): 1084 <= #\b
run: string-copy/split/main 11: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1105 string) (raw))
mem: ((1105 integer) (raw)) => 1
run: string-copy/split/main 11: 1106 => ((10 character-address))
mem: ((10 character-address)): 1085 <= 1106
run: string-copy/split/main 12: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => b
run: string-copy/split/main 12: #\b => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1106 <= #\b
run: string-copy/split/main 13: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 2
run: string-copy/split/main 13: 3 => ((6 integer))
mem: ((6 integer)): 1081 <= 3
run: string-copy/split/main 14: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split/main 14: 1 => ((7 integer))
mem: ((7 integer)): 1082 <= 1
run: string-copy/split/main 15: (((jump)) ((-8 offset)))
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 3
mem: ((3 integer)) => 3
run: string-copy/split/main 8: t => ((8 boolean))
mem: ((8 boolean)): 1083 <= t
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split/main 16: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1105
run: split/main 23: 1105 => ((12 string-address-address) (deref))
mem: ((12 string-address-address) (deref)): 1039 <= 1105
run: split/main 24: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
mem: ((11 integer)) => 3
run: split/main 24: 4 => ((10 integer))
mem: ((10 integer)): 1017 <= 4
run: split/main 25: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 1
run: split/main 25: 2 => ((9 integer))
mem: ((9 integer)): 1016 <= 2
run: split/main 26: (((jump)) ((-8 offset)))
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 4
mem: ((3 integer)) => 5
run: split/main 19: nil => ((8 boolean))
mem: ((8 boolean)): 1015 <= nil
run: split/main 20: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: split/main 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 character)) => /
mem: ((10 integer)) => 4
run: find-next/split/main 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 4)
run: find-next/split/main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: find-next/split/main 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 4)
run: find-next/split/main 1: #\/ => ((2 character))
mem: ((2 character)): 2 <= #\/
run: find-next/split/main 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 4)
run: find-next/split/main 2: 4 => ((3 integer))
mem: ((3 integer)): 3 <= 4
run: find-next/split/main 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer)) => 5
run: find-next/split/main 3: 5 => ((4 integer))
mem: ((4 integer)): 4 <= 5
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 4
mem: ((4 integer)) => 5
run: find-next/split/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/split/main 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 4
array-len: ((1000 string))
mem: ((1000 integer)) => 5
mem: ((1005 byte) (raw)) => c
run: find-next/split/main 6: #\c => ((6 byte))
mem: ((6 byte)): 6 <= #\c
run: find-next/split/main 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => c
mem: ((2 character)) => /
run: find-next/split/main 7: nil => ((7 boolean))
mem: ((7 boolean)): 7 <= nil
run: find-next/split/main 8: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/split/main 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 4
run: find-next/split/main 9: 5 => ((3 integer))
mem: ((3 integer)): 3 <= 5
run: find-next/split/main 10: (((jump)) ((-7 offset)))
run: find-next/split/main 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 5
mem: ((4 integer)) => 5
run: find-next/split/main 4: t => ((5 boolean))
mem: ((5 boolean)): 5 <= t
run: find-next/split/main 5: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => t
run: find-next/split/main 11: (((reply)) ((3 integer)))
mem: ((3 integer)) => 5
run: split/main 21: 5 => ((11 integer))
mem: ((11 integer)): 1018 <= 5
run: split/main 22: (((12 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 2
array-len: ((1037 string-address-array) (raw))
mem: ((1037 integer) (raw)) => 3
run: split/main 22: 1040 => ((12 string-address-address))
mem: ((12 string-address-address)): 1019 <= 1040
run: split/main 23: (((12 string-address-address) (deref)) <- ((string-copy)) ((1 string-address)) ((10 integer)) ((11 integer)))
mem: ((1 string-address)) => 1000
mem: ((10 integer)) => 4
mem: ((11 integer)) => 5
run: string-copy/split/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: string-copy/split/main 0: 1107 => ((default-space space-address))
run: string-copy/split/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 4 5)
run: string-copy/split/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1109 <= 1000
run: string-copy/split/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (1000 4 5)
run: string-copy/split/main 2: 4 => ((2 integer))
mem: ((2 integer)): 1110 <= 4
run: string-copy/split/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 4 5)
run: string-copy/split/main 3: 5 => ((3 integer))
mem: ((3 integer)): 1111 <= 5
run: string-copy/split/main 4: (((4 integer)) <- ((subtract)) ((3 integer)) ((2 integer)))
mem: ((3 integer)) => 5
mem: ((2 integer)) => 4
run: string-copy/split/main 4: 1 => ((4 integer))
mem: ((4 integer)): 1112 <= 1
run: string-copy/split/main 5: (((5 string-address)) <- ((new)) ((string literal)) ((4 integer)))
mem: ((4 integer)) => 1
run: string-copy/split/main 5: 1138 => ((5 string-address))
mem: ((5 string-address)): 1113 <= 1138
run: string-copy/split/main 6: (((6 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 4
run: string-copy/split/main 6: 4 => ((6 integer))
mem: ((6 integer)): 1114 <= 4
run: string-copy/split/main 7: (((7 integer)) <- ((copy)) ((0 literal)))
run: string-copy/split/main 7: 0 => ((7 integer))
mem: ((7 integer)): 1115 <= 0
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 4
mem: ((3 integer)) => 5
run: string-copy/split/main 8: nil => ((8 boolean))
mem: ((8 boolean)): 1116 <= nil
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => nil
run: string-copy/split/main 10: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((6 integer)))
mem: ((6 integer)) => 4
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 5
mem: ((1005 byte) (raw)) => c
run: string-copy/split/main 10: #\c => ((9 character))
mem: ((9 character)): 1117 <= #\c
run: string-copy/split/main 11: (((10 character-address)) <- ((index-address)) ((5 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1138 string) (raw))
mem: ((1138 integer) (raw)) => 1
run: string-copy/split/main 11: 1139 => ((10 character-address))
mem: ((10 character-address)): 1118 <= 1139
run: string-copy/split/main 12: (((10 character-address) (deref)) <- ((copy)) ((9 character)))
mem: ((9 character)) => c
run: string-copy/split/main 12: #\c => ((10 character-address) (deref))
mem: ((10 character-address) (deref)): 1139 <= #\c
run: string-copy/split/main 13: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
mem: ((6 integer)) => 4
run: string-copy/split/main 13: 5 => ((6 integer))
mem: ((6 integer)): 1114 <= 5
run: string-copy/split/main 14: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: string-copy/split/main 14: 1 => ((7 integer))
mem: ((7 integer)): 1115 <= 1
run: string-copy/split/main 15: (((jump)) ((-8 offset)))
run: string-copy/split/main 8: (((8 boolean)) <- ((greater-or-equal)) ((6 integer)) ((3 integer)))
mem: ((6 integer)) => 5
mem: ((3 integer)) => 5
run: string-copy/split/main 8: t => ((8 boolean))
mem: ((8 boolean)): 1116 <= t
run: string-copy/split/main 9: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: string-copy/split/main 16: (((reply)) ((5 string-address)))
mem: ((5 string-address)) => 1138
run: split/main 23: 1138 => ((12 string-address-address) (deref))
mem: ((12 string-address-address) (deref)): 1040 <= 1138
run: split/main 24: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
mem: ((11 integer)) => 5
run: split/main 24: 6 => ((10 integer))
mem: ((10 integer)): 1017 <= 6
run: split/main 25: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 2
run: split/main 25: 3 => ((9 integer))
mem: ((9 integer)): 1016 <= 3
run: split/main 26: (((jump)) ((-8 offset)))
run: split/main 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
mem: ((10 integer)) => 6
mem: ((3 integer)) => 5
run: split/main 19: t => ((8 boolean))
mem: ((8 boolean)): 1015 <= t
run: split/main 20: (((jump-if)) ((8 boolean)) ((6 offset)))
mem: ((8 boolean)) => t
run: split/main 27: (((reply)) ((5 string-address-array-address)))
mem: ((5 string-address-array-address)) => 1037
run: main 1: 1037 => ((2 string-address-array-address))
mem: ((2 string-address-array-address)): 2 <= 1037
schedule: done with routine 
