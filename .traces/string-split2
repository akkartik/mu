schedule: main
run: -- nil
run: 1 main 0: (((1 string-address)) <- ((new)) a/b/c)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: -- ((1 1000) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c))
run: 2 main 1: (((2 string-address-array-address)) <- ((split)) ((1 string-address)) ((/ literal)))
m: ((1 string-address))
sizeof: ((1 string-address))
run: -- ((1 1000) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c))
run: 3 split 0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal)))
sizeof: ((_ location))
run: 1006 => ((default-scope scope-address))
sizeof: ((default-scope scope-address))
run: -- ((1 1000) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30))
run: 4 split 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 /)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1007 to 1000
run: -- ((1 1000) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000))
run: 5 split 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 /)
run: / => ((2 character))
setm: ((2 character)) <= /
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 1008 to /
run: -- ((1 1000) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /))
run: 6 split 3: (((3 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer) (raw))
sizeof: ((1000 integer) (raw))
run: 5 => ((3 integer))
setm: ((3 integer)) <= 5
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 1009 to 5
run: -- ((1 1000) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5))
run: 7 split 4: (((4 boolean)) <- ((equal)) ((3 integer)) ((0 literal)))
m: ((3 integer))
sizeof: ((3 integer))
run: nil => ((4 boolean))
setm: ((4 boolean)) <= nil
setm: size of ((4 boolean)) is 1
setm: ((4 boolean)): setting 1010 to nil
run: -- ((1 1000) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5))
run: 8 split 5: (((jump-unless)) ((4 boolean)) ((2 offset)))
m: ((4 boolean))
sizeof: ((4 boolean))
jump: checking that nil is not t
jump: jumping to 8
run: -- ((1 1000) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5))
run: 9 split 8: (((6 integer)) <- ((copy)) ((1 literal)))
run: 1 => ((6 integer))
setm: ((6 integer)) <= 1
setm: size of ((6 integer)) is 1
setm: ((6 integer)): setting 1012 to 1
run: -- ((1 1000) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1))
run: 10 split 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: 0 => ((7 integer))
setm: ((7 integer)) <= 0
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 1013 to 0
run: -- ((1 1000) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 11 split 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
m: ((1 string-address))
sizeof: ((1 string-address))
m: ((2 character))
sizeof: ((2 character))
m: ((7 integer))
sizeof: ((7 integer))
run: -- ((1 1000) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 12 find-next 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 / 0)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: -- ((1 1000) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 13 find-next 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 / 0)
run: / => ((2 character))
setm: ((2 character)) <= /
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 2 to /
run: -- ((1 1000) (2 /) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 14 find-next 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 / 0)
run: 0 => ((3 integer))
setm: ((3 integer)) <= 0
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 0
run: -- ((1 1000) (2 /) (3 0) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 15 find-next 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer))
sizeof: ((1000 integer))
run: 5 => ((4 integer))
setm: ((4 integer)) <= 5
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 4 to 5
run: -- ((1 1000) (2 /) (3 0) (4 5) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 16 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: -- ((1 1000) (2 /) (3 0) (4 5) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 17 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 0) (4 5) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 18 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1001 byte) (raw))
sizeof: ((1001 byte) (raw))
run: a => ((6 byte))
setm: ((6 byte)) <= a
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to a
run: -- ((1 1000) (2 /) (3 0) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 19 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: nil => ((7 boolean))
setm: ((7 boolean)) <= nil
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to nil
run: -- ((1 1000) (2 /) (3 0) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 20 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 0) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 21 find-next 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
m: ((3 integer))
sizeof: ((3 integer))
add: 0 1
m: ((3 integer))
sizeof: ((3 integer))
run: 1 => ((3 integer))
setm: ((3 integer)) <= 1
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 1
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 22 find-next 10: (((jump)) ((-7 offset)))
jump: jumping to 4
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 23 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 24 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 25 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1002 byte) (raw))
sizeof: ((1002 byte) (raw))
run: / => ((6 byte))
setm: ((6 byte)) <= /
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to /
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 26 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: t => ((7 boolean))
setm: ((7 boolean)) <= t
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to t
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 27 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
jump: checking that t is t
jump: jumping to 11
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 0))
run: 28 find-next 11: (((reply)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
reply: (((3 integer))) (((7 integer)))
reply: 1 => ((7 integer))
setm: ((7 integer)) <= 1
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 1013 to 1
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 1))
run: 29 split 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
m: ((7 integer))
sizeof: ((7 integer))
m: ((3 integer))
sizeof: ((3 integer))
run: nil => ((8 boolean))
setm: ((8 boolean)) <= nil
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1014 to nil
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 1))
run: 30 split 12: (((jump-if)) ((8 boolean)) ((3 offset)))
m: ((8 boolean))
sizeof: ((8 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 1))
run: 31 split 13: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
m: ((7 integer))
sizeof: ((7 integer))
add: 1 1
m: ((7 integer))
sizeof: ((7 integer))
run: 2 => ((7 integer))
setm: ((7 integer)) <= 2
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 1013 to 2
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 1) (1013 2))
run: 32 split 14: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
m: ((6 integer))
sizeof: ((6 integer))
add: 1 1
m: ((6 integer))
sizeof: ((6 integer))
run: 2 => ((6 integer))
setm: ((6 integer)) <= 2
setm: size of ((6 integer)) is 1
setm: ((6 integer)): setting 1012 to 2
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 33 split 15: (((jump)) ((-6 offset)))
jump: jumping to 10
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 34 split 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
m: ((1 string-address))
sizeof: ((1 string-address))
m: ((2 character))
sizeof: ((2 character))
m: ((7 integer))
sizeof: ((7 integer))
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 35 find-next 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 / 2)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 36 find-next 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 / 2)
run: / => ((2 character))
setm: ((2 character)) <= /
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 2 to /
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 37 find-next 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 / 2)
run: 2 => ((3 integer))
setm: ((3 integer)) <= 2
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 2
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 38 find-next 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer))
sizeof: ((1000 integer))
run: 5 => ((4 integer))
setm: ((4 integer)) <= 5
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 4 to 5
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 39 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 40 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 41 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1003 byte) (raw))
sizeof: ((1003 byte) (raw))
run: b => ((6 byte))
setm: ((6 byte)) <= b
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to b
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 b) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 42 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: nil => ((7 boolean))
setm: ((7 boolean)) <= nil
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to nil
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 b) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 43 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 b) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 44 find-next 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
m: ((3 integer))
sizeof: ((3 integer))
add: 2 1
m: ((3 integer))
sizeof: ((3 integer))
run: 3 => ((3 integer))
setm: ((3 integer)) <= 3
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 3
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 b) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 45 find-next 10: (((jump)) ((-7 offset)))
jump: jumping to 4
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 b) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 46 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 b) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 47 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 b) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 48 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1004 byte) (raw))
sizeof: ((1004 byte) (raw))
run: / => ((6 byte))
setm: ((6 byte)) <= /
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to /
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 49 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: t => ((7 boolean))
setm: ((7 boolean)) <= t
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to t
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 50 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
jump: checking that t is t
jump: jumping to 11
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 2))
run: 51 find-next 11: (((reply)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
reply: (((3 integer))) (((7 integer)))
reply: 3 => ((7 integer))
setm: ((7 integer)) <= 3
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 1013 to 3
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 3))
run: 52 split 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
m: ((7 integer))
sizeof: ((7 integer))
m: ((3 integer))
sizeof: ((3 integer))
run: nil => ((8 boolean))
setm: ((8 boolean)) <= nil
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1014 to nil
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 3))
run: 53 split 12: (((jump-if)) ((8 boolean)) ((3 offset)))
m: ((8 boolean))
sizeof: ((8 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 3))
run: 54 split 13: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
m: ((7 integer))
sizeof: ((7 integer))
add: 3 1
m: ((7 integer))
sizeof: ((7 integer))
run: 4 => ((7 integer))
setm: ((7 integer)) <= 4
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 1013 to 4
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 2) (1013 4))
run: 55 split 14: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
m: ((6 integer))
sizeof: ((6 integer))
add: 2 1
m: ((6 integer))
sizeof: ((6 integer))
run: 3 => ((6 integer))
setm: ((6 integer)) <= 3
setm: size of ((6 integer)) is 1
setm: ((6 integer)): setting 1012 to 3
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 56 split 15: (((jump)) ((-6 offset)))
jump: jumping to 10
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 57 split 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
m: ((1 string-address))
sizeof: ((1 string-address))
m: ((2 character))
sizeof: ((2 character))
m: ((7 integer))
sizeof: ((7 integer))
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 58 find-next 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 / 4)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 59 find-next 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 / 4)
run: / => ((2 character))
setm: ((2 character)) <= /
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 2 to /
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 60 find-next 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 / 4)
run: 4 => ((3 integer))
setm: ((3 integer)) <= 4
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 4
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 61 find-next 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer))
sizeof: ((1000 integer))
run: 5 => ((4 integer))
setm: ((4 integer)) <= 5
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 4 to 5
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 62 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 63 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 64 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1005 byte) (raw))
sizeof: ((1005 byte) (raw))
run: c => ((6 byte))
setm: ((6 byte)) <= c
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to c
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 c) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 65 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: nil => ((7 boolean))
setm: ((7 boolean)) <= nil
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to nil
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 66 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 67 find-next 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
m: ((3 integer))
sizeof: ((3 integer))
add: 4 1
m: ((3 integer))
sizeof: ((3 integer))
run: 5 => ((3 integer))
setm: ((3 integer)) <= 5
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 5
run: -- ((1 1000) (2 /) (3 5) (4 5) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 68 find-next 10: (((jump)) ((-7 offset)))
jump: jumping to 4
run: -- ((1 1000) (2 /) (3 5) (4 5) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 69 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: t => ((5 boolean))
setm: ((5 boolean)) <= t
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to t
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 70 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking that t is t
jump: jumping to 11
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 4))
run: 71 find-next 11: (((reply)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
reply: (((3 integer))) (((7 integer)))
reply: 5 => ((7 integer))
setm: ((7 integer)) <= 5
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 1013 to 5
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 5))
run: 72 split 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
m: ((7 integer))
sizeof: ((7 integer))
m: ((3 integer))
sizeof: ((3 integer))
run: t => ((8 boolean))
setm: ((8 boolean)) <= t
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1014 to t
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 5) (1014 t))
run: 73 split 12: (((jump-if)) ((8 boolean)) ((3 offset)))
m: ((8 boolean))
sizeof: ((8 boolean))
jump: checking that t is t
jump: jumping to 16
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1012 3) (1013 5) (1014 t))
run: 74 split 16: (((5 string-address-array-address)) <- ((new)) ((string-address-array literal)) ((6 integer)))
m: ((6 integer))
sizeof: ((6 integer))
sizeof: ((_ string-address))
run: 1037 => ((5 string-address-array-address))
setm: ((5 string-address-array-address)) <= 1037
setm: size of ((5 string-address-array-address)) is 1
setm: ((5 string-address-array-address)): setting 1011 to 1037
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1014 t) (1037 3))
run: 75 split 17: (((9 integer)) <- ((copy)) ((0 literal)))
run: 0 => ((9 integer))
setm: ((9 integer)) <= 0
setm: size of ((9 integer)) is 1
setm: ((9 integer)): setting 1015 to 0
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1014 t) (1015 0) (1037 3))
run: 76 split 18: (((10 integer)) <- ((copy)) ((0 literal)))
run: 0 => ((10 integer))
setm: ((10 integer)) <= 0
setm: size of ((10 integer)) is 1
setm: ((10 integer)): setting 1016 to 0
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1014 t) (1015 0) (1016 0) (1037 3))
run: 77 split 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
m: ((10 integer))
sizeof: ((10 integer))
m: ((3 integer))
sizeof: ((3 integer))
run: nil => ((8 boolean))
setm: ((8 boolean)) <= nil
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1014 to nil
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 78 split 20: (((jump-if)) ((8 boolean)) ((17 offset)))
m: ((8 boolean))
sizeof: ((8 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 79 split 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
m: ((1 string-address))
sizeof: ((1 string-address))
m: ((2 character))
sizeof: ((2 character))
m: ((10 integer))
sizeof: ((10 integer))
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 80 find-next 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 / 0)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 81 find-next 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 / 0)
run: / => ((2 character))
setm: ((2 character)) <= /
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 2 to /
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 82 find-next 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 / 0)
run: 0 => ((3 integer))
setm: ((3 integer)) <= 0
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 0
run: -- ((1 1000) (2 /) (3 0) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 83 find-next 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer))
sizeof: ((1000 integer))
run: 5 => ((4 integer))
setm: ((4 integer)) <= 5
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 4 to 5
run: -- ((1 1000) (2 /) (3 0) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 84 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: -- ((1 1000) (2 /) (3 0) (4 5) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 85 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 0) (4 5) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 86 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1001 byte) (raw))
sizeof: ((1001 byte) (raw))
run: a => ((6 byte))
setm: ((6 byte)) <= a
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to a
run: -- ((1 1000) (2 /) (3 0) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 87 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: nil => ((7 boolean))
setm: ((7 boolean)) <= nil
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to nil
run: -- ((1 1000) (2 /) (3 0) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 88 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 0) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 89 find-next 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
m: ((3 integer))
sizeof: ((3 integer))
add: 0 1
m: ((3 integer))
sizeof: ((3 integer))
run: 1 => ((3 integer))
setm: ((3 integer)) <= 1
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 1
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 90 find-next 10: (((jump)) ((-7 offset)))
jump: jumping to 4
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 91 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 92 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 a) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 93 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1002 byte) (raw))
sizeof: ((1002 byte) (raw))
run: / => ((6 byte))
setm: ((6 byte)) <= /
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to /
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 94 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: t => ((7 boolean))
setm: ((7 boolean)) <= t
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to t
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 95 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
jump: checking that t is t
jump: jumping to 11
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1037 3))
run: 96 find-next 11: (((reply)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
reply: (((3 integer))) (((11 integer)))
reply: 1 => ((11 integer))
setm: ((11 integer)) <= 1
setm: size of ((11 integer)) is 1
setm: ((11 integer)): setting 1017 to 1
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1037 3))
run: 97 split 22: (((12 integer)) <- ((subtract)) ((11 integer)) ((10 integer)))
m: ((11 integer))
sizeof: ((11 integer))
m: ((10 integer))
sizeof: ((10 integer))
run: 1 => ((12 integer))
setm: ((12 integer)) <= 1
setm: size of ((12 integer)) is 1
setm: ((12 integer)): setting 1018 to 1
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1037 3))
run: 98 split 23: (((13 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
m: ((9 integer))
sizeof: ((9 integer))
array-len: ((1037 string-address-array) (raw))
m: ((1037 integer) (raw))
sizeof: ((1037 integer) (raw))
sizeof: ((_ string-address))
run: 1038 => ((13 string-address-address))
setm: ((13 string-address-address)) <= 1038
setm: size of ((13 string-address-address)) is 1
setm: ((13 string-address-address)): setting 1019 to 1038
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1037 3))
run: 99 split 24: (((13 string-address-address) (deref)) <- ((new)) ((string literal)) ((12 integer)))
m: ((12 integer))
sizeof: ((12 integer))
sizeof: ((_ byte))
run: 1041 => ((13 string-address-address) (deref))
setm: ((13 string-address-address) (deref)) <= 1041
setm: size of ((13 string-address-address) (deref)) is 1
setm: ((13 string-address-address) (deref)): setting 1038 to 1041
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1037 3) (1038 1041) (1041 1))
run: 100 split 25: (((14 integer)) <- ((copy)) ((10 integer)))
m: ((10 integer))
sizeof: ((10 integer))
run: 0 => ((14 integer))
setm: ((14 integer)) <= 0
setm: size of ((14 integer)) is 1
setm: ((14 integer)): setting 1020 to 0
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1020 0) (1037 3) (1038 1041) (1041 1))
run: 101 split 26: (((15 integer)) <- ((copy)) ((0 literal)))
run: 0 => ((15 integer))
setm: ((15 integer)) <= 0
setm: size of ((15 integer)) is 1
setm: ((15 integer)): setting 1021 to 0
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1020 0) (1021 0) (1037 3) (1038 1041) (1041 1))
run: 102 split 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
m: ((14 integer))
sizeof: ((14 integer))
m: ((11 integer))
sizeof: ((11 integer))
run: nil => ((16 boolean))
setm: ((16 boolean)) <= nil
setm: size of ((16 boolean)) is 1
setm: ((16 boolean)): setting 1022 to nil
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1020 0) (1021 0) (1037 3) (1038 1041) (1041 1))
run: 103 split 28: (((jump-if)) ((16 boolean)) ((6 offset)))
m: ((16 boolean))
sizeof: ((16 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1020 0) (1021 0) (1037 3) (1038 1041) (1041 1))
run: 104 split 29: (((17 character)) <- ((index)) ((1 string-address) (deref)) ((14 integer)))
m: ((14 integer))
sizeof: ((14 integer))
array-len: ((1000 string) (raw))
m: ((1000 integer) (raw))
sizeof: ((1000 integer) (raw))
sizeof: ((_ byte))
m: ((1001 byte) (raw))
sizeof: ((1001 byte) (raw))
run: a => ((17 character))
setm: ((17 character)) <= a
setm: size of ((17 character)) is 1
setm: ((17 character)): setting 1023 to a
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1020 0) (1021 0) (1023 a) (1037 3) (1038 1041) (1041 1))
run: 105 split 30: (((18 character-address)) <- ((index-address)) ((13 string-address-address) (deref) (deref)) ((15 integer)))
m: ((15 integer))
sizeof: ((15 integer))
array-len: ((1041 string) (raw))
m: ((1041 integer) (raw))
sizeof: ((1041 integer) (raw))
sizeof: ((_ byte))
run: 1042 => ((18 character-address))
setm: ((18 character-address)) <= 1042
setm: size of ((18 character-address)) is 1
setm: ((18 character-address)): setting 1024 to 1042
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1020 0) (1021 0) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1))
run: 106 split 31: (((18 character-address) (deref)) <- ((copy)) ((17 character)))
m: ((17 character))
sizeof: ((17 character))
run: a => ((18 character-address) (deref))
setm: ((18 character-address) (deref)) <= a
setm: size of ((18 character-address) (deref)) is 1
setm: ((18 character-address) (deref)): setting 1042 to a
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1020 0) (1021 0) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 107 split 32: (((14 integer)) <- ((add)) ((14 integer)) ((1 literal)))
m: ((14 integer))
sizeof: ((14 integer))
add: 0 1
m: ((14 integer))
sizeof: ((14 integer))
run: 1 => ((14 integer))
setm: ((14 integer)) <= 1
setm: size of ((14 integer)) is 1
setm: ((14 integer)): setting 1020 to 1
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 0) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 108 split 33: (((15 integer)) <- ((add)) ((15 integer)) ((1 literal)))
m: ((15 integer))
sizeof: ((15 integer))
add: 0 1
m: ((15 integer))
sizeof: ((15 integer))
run: 1 => ((15 integer))
setm: ((15 integer)) <= 1
setm: size of ((15 integer)) is 1
setm: ((15 integer)): setting 1021 to 1
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 109 split 34: (((jump)) ((-8 offset)))
jump: jumping to 27
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 110 split 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
m: ((14 integer))
sizeof: ((14 integer))
m: ((11 integer))
sizeof: ((11 integer))
run: t => ((16 boolean))
setm: ((16 boolean)) <= t
setm: size of ((16 boolean)) is 1
setm: ((16 boolean)): setting 1022 to t
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 111 split 28: (((jump-if)) ((16 boolean)) ((6 offset)))
m: ((16 boolean))
sizeof: ((16 boolean))
jump: checking that t is t
jump: jumping to 35
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 0) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 112 split 35: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
m: ((11 integer))
sizeof: ((11 integer))
add: 1 1
m: ((11 integer))
sizeof: ((11 integer))
run: 2 => ((10 integer))
setm: ((10 integer)) <= 2
setm: size of ((10 integer)) is 1
setm: ((10 integer)): setting 1016 to 2
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 0) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 113 split 36: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
m: ((9 integer))
sizeof: ((9 integer))
add: 0 1
m: ((9 integer))
sizeof: ((9 integer))
run: 1 => ((9 integer))
setm: ((9 integer)) <= 1
setm: size of ((9 integer)) is 1
setm: ((9 integer)): setting 1015 to 1
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 114 split 37: (((jump)) ((-19 offset)))
jump: jumping to 19
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 115 split 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
m: ((10 integer))
sizeof: ((10 integer))
m: ((3 integer))
sizeof: ((3 integer))
run: nil => ((8 boolean))
setm: ((8 boolean)) <= nil
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1014 to nil
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 116 split 20: (((jump-if)) ((8 boolean)) ((17 offset)))
m: ((8 boolean))
sizeof: ((8 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 117 split 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
m: ((1 string-address))
sizeof: ((1 string-address))
m: ((2 character))
sizeof: ((2 character))
m: ((10 integer))
sizeof: ((10 integer))
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 118 find-next 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 / 2)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 119 find-next 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 / 2)
run: / => ((2 character))
setm: ((2 character)) <= /
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 2 to /
run: -- ((1 1000) (2 /) (3 1) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 120 find-next 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 / 2)
run: 2 => ((3 integer))
setm: ((3 integer)) <= 2
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 2
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 121 find-next 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer))
sizeof: ((1000 integer))
run: 5 => ((4 integer))
setm: ((4 integer)) <= 5
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 4 to 5
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 122 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 123 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 124 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1003 byte) (raw))
sizeof: ((1003 byte) (raw))
run: b => ((6 byte))
setm: ((6 byte)) <= b
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to b
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 b) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 125 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: nil => ((7 boolean))
setm: ((7 boolean)) <= nil
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to nil
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 b) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 126 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 2) (4 5) (6 b) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 127 find-next 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
m: ((3 integer))
sizeof: ((3 integer))
add: 2 1
m: ((3 integer))
sizeof: ((3 integer))
run: 3 => ((3 integer))
setm: ((3 integer)) <= 3
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 3
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 b) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 128 find-next 10: (((jump)) ((-7 offset)))
jump: jumping to 4
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 b) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 129 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 b) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 130 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 b) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 131 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1004 byte) (raw))
sizeof: ((1004 byte) (raw))
run: / => ((6 byte))
setm: ((6 byte)) <= /
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to /
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 132 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: t => ((7 boolean))
setm: ((7 boolean)) <= t
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to t
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 133 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
jump: checking that t is t
jump: jumping to 11
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 1) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 134 find-next 11: (((reply)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
reply: (((3 integer))) (((11 integer)))
reply: 3 => ((11 integer))
setm: ((11 integer)) <= 3
setm: size of ((11 integer)) is 1
setm: ((11 integer)): setting 1017 to 3
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 135 split 22: (((12 integer)) <- ((subtract)) ((11 integer)) ((10 integer)))
m: ((11 integer))
sizeof: ((11 integer))
m: ((10 integer))
sizeof: ((10 integer))
run: 1 => ((12 integer))
setm: ((12 integer)) <= 1
setm: size of ((12 integer)) is 1
setm: ((12 integer)): setting 1018 to 1
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1038) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 136 split 23: (((13 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
m: ((9 integer))
sizeof: ((9 integer))
array-len: ((1037 string-address-array) (raw))
m: ((1037 integer) (raw))
sizeof: ((1037 integer) (raw))
sizeof: ((_ string-address))
run: 1039 => ((13 string-address-address))
setm: ((13 string-address-address)) <= 1039
setm: size of ((13 string-address-address)) is 1
setm: ((13 string-address-address)): setting 1019 to 1039
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1041 1) (1042 a))
run: 137 split 24: (((13 string-address-address) (deref)) <- ((new)) ((string literal)) ((12 integer)))
m: ((12 integer))
sizeof: ((12 integer))
sizeof: ((_ byte))
run: 1043 => ((13 string-address-address) (deref))
setm: ((13 string-address-address) (deref)) <= 1043
setm: size of ((13 string-address-address) (deref)) is 1
setm: ((13 string-address-address) (deref)): setting 1039 to 1043
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 1) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1))
run: 138 split 25: (((14 integer)) <- ((copy)) ((10 integer)))
m: ((10 integer))
sizeof: ((10 integer))
run: 2 => ((14 integer))
setm: ((14 integer)) <= 2
setm: size of ((14 integer)) is 1
setm: ((14 integer)): setting 1020 to 2
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 2) (1021 1) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1))
run: 139 split 26: (((15 integer)) <- ((copy)) ((0 literal)))
run: 0 => ((15 integer))
setm: ((15 integer)) <= 0
setm: size of ((15 integer)) is 1
setm: ((15 integer)): setting 1021 to 0
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 2) (1021 0) (1022 t) (1023 a) (1024 1042) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1))
run: 140 split 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
m: ((14 integer))
sizeof: ((14 integer))
m: ((11 integer))
sizeof: ((11 integer))
run: nil => ((16 boolean))
setm: ((16 boolean)) <= nil
setm: size of ((16 boolean)) is 1
setm: ((16 boolean)): setting 1022 to nil
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 2) (1021 0) (1023 a) (1024 1042) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1))
run: 141 split 28: (((jump-if)) ((16 boolean)) ((6 offset)))
m: ((16 boolean))
sizeof: ((16 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 2) (1021 0) (1023 a) (1024 1042) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1))
run: 142 split 29: (((17 character)) <- ((index)) ((1 string-address) (deref)) ((14 integer)))
m: ((14 integer))
sizeof: ((14 integer))
array-len: ((1000 string) (raw))
m: ((1000 integer) (raw))
sizeof: ((1000 integer) (raw))
sizeof: ((_ byte))
m: ((1003 byte) (raw))
sizeof: ((1003 byte) (raw))
run: b => ((17 character))
setm: ((17 character)) <= b
setm: size of ((17 character)) is 1
setm: ((17 character)): setting 1023 to b
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 2) (1021 0) (1023 b) (1024 1042) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1))
run: 143 split 30: (((18 character-address)) <- ((index-address)) ((13 string-address-address) (deref) (deref)) ((15 integer)))
m: ((15 integer))
sizeof: ((15 integer))
array-len: ((1043 string) (raw))
m: ((1043 integer) (raw))
sizeof: ((1043 integer) (raw))
sizeof: ((_ byte))
run: 1044 => ((18 character-address))
setm: ((18 character-address)) <= 1044
setm: size of ((18 character-address)) is 1
setm: ((18 character-address)): setting 1024 to 1044
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 2) (1021 0) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1))
run: 144 split 31: (((18 character-address) (deref)) <- ((copy)) ((17 character)))
m: ((17 character))
sizeof: ((17 character))
run: b => ((18 character-address) (deref))
setm: ((18 character-address) (deref)) <= b
setm: size of ((18 character-address) (deref)) is 1
setm: ((18 character-address) (deref)): setting 1044 to b
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 2) (1021 0) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 145 split 32: (((14 integer)) <- ((add)) ((14 integer)) ((1 literal)))
m: ((14 integer))
sizeof: ((14 integer))
add: 2 1
m: ((14 integer))
sizeof: ((14 integer))
run: 3 => ((14 integer))
setm: ((14 integer)) <= 3
setm: size of ((14 integer)) is 1
setm: ((14 integer)): setting 1020 to 3
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 0) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 146 split 33: (((15 integer)) <- ((add)) ((15 integer)) ((1 literal)))
m: ((15 integer))
sizeof: ((15 integer))
add: 0 1
m: ((15 integer))
sizeof: ((15 integer))
run: 1 => ((15 integer))
setm: ((15 integer)) <= 1
setm: size of ((15 integer)) is 1
setm: ((15 integer)): setting 1021 to 1
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 147 split 34: (((jump)) ((-8 offset)))
jump: jumping to 27
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 148 split 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
m: ((14 integer))
sizeof: ((14 integer))
m: ((11 integer))
sizeof: ((11 integer))
run: t => ((16 boolean))
setm: ((16 boolean)) <= t
setm: size of ((16 boolean)) is 1
setm: ((16 boolean)): setting 1022 to t
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 149 split 28: (((jump-if)) ((16 boolean)) ((6 offset)))
m: ((16 boolean))
sizeof: ((16 boolean))
jump: checking that t is t
jump: jumping to 35
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 2) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 150 split 35: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
m: ((11 integer))
sizeof: ((11 integer))
add: 3 1
m: ((11 integer))
sizeof: ((11 integer))
run: 4 => ((10 integer))
setm: ((10 integer)) <= 4
setm: size of ((10 integer)) is 1
setm: ((10 integer)): setting 1016 to 4
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 1) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 151 split 36: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
m: ((9 integer))
sizeof: ((9 integer))
add: 1 1
m: ((9 integer))
sizeof: ((9 integer))
run: 2 => ((9 integer))
setm: ((9 integer)) <= 2
setm: size of ((9 integer)) is 1
setm: ((9 integer)): setting 1015 to 2
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 152 split 37: (((jump)) ((-19 offset)))
jump: jumping to 19
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 153 split 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
m: ((10 integer))
sizeof: ((10 integer))
m: ((3 integer))
sizeof: ((3 integer))
run: nil => ((8 boolean))
setm: ((8 boolean)) <= nil
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1014 to nil
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 154 split 20: (((jump-if)) ((8 boolean)) ((17 offset)))
m: ((8 boolean))
sizeof: ((8 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 155 split 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
m: ((1 string-address))
sizeof: ((1 string-address))
m: ((2 character))
sizeof: ((2 character))
m: ((10 integer))
sizeof: ((10 integer))
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 156 find-next 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 / 4)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 157 find-next 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 / 4)
run: / => ((2 character))
setm: ((2 character)) <= /
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 2 to /
run: -- ((1 1000) (2 /) (3 3) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 158 find-next 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 / 4)
run: 4 => ((3 integer))
setm: ((3 integer)) <= 4
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 4
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 159 find-next 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer))
sizeof: ((1000 integer))
run: 5 => ((4 integer))
setm: ((4 integer)) <= 5
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 4 to 5
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 160 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 161 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 /) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 162 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1005 byte) (raw))
sizeof: ((1005 byte) (raw))
run: c => ((6 byte))
setm: ((6 byte)) <= c
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to c
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 c) (7 t) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 163 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: nil => ((7 boolean))
setm: ((7 boolean)) <= nil
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to nil
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 164 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 4) (4 5) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 165 find-next 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
m: ((3 integer))
sizeof: ((3 integer))
add: 4 1
m: ((3 integer))
sizeof: ((3 integer))
run: 5 => ((3 integer))
setm: ((3 integer)) <= 5
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 5
run: -- ((1 1000) (2 /) (3 5) (4 5) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 166 find-next 10: (((jump)) ((-7 offset)))
jump: jumping to 4
run: -- ((1 1000) (2 /) (3 5) (4 5) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 167 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: t => ((5 boolean))
setm: ((5 boolean)) <= t
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to t
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 168 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
jump: checking that t is t
jump: jumping to 11
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 3) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 169 find-next 11: (((reply)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
reply: (((3 integer))) (((11 integer)))
reply: 5 => ((11 integer))
setm: ((11 integer)) <= 5
setm: size of ((11 integer)) is 1
setm: ((11 integer)): setting 1017 to 5
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 170 split 22: (((12 integer)) <- ((subtract)) ((11 integer)) ((10 integer)))
m: ((11 integer))
sizeof: ((11 integer))
m: ((10 integer))
sizeof: ((10 integer))
run: 1 => ((12 integer))
setm: ((12 integer)) <= 1
setm: size of ((12 integer)) is 1
setm: ((12 integer)): setting 1018 to 1
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1039) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 171 split 23: (((13 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
m: ((9 integer))
sizeof: ((9 integer))
array-len: ((1037 string-address-array) (raw))
m: ((1037 integer) (raw))
sizeof: ((1037 integer) (raw))
sizeof: ((_ string-address))
run: 1040 => ((13 string-address-address))
setm: ((13 string-address-address)) <= 1040
setm: size of ((13 string-address-address)) is 1
setm: ((13 string-address-address)): setting 1019 to 1040
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1041 1) (1042 a) (1043 1) (1044 b))
run: 172 split 24: (((13 string-address-address) (deref)) <- ((new)) ((string literal)) ((12 integer)))
m: ((12 integer))
sizeof: ((12 integer))
sizeof: ((_ byte))
run: 1045 => ((13 string-address-address) (deref))
setm: ((13 string-address-address) (deref)) <= 1045
setm: size of ((13 string-address-address) (deref)) is 1
setm: ((13 string-address-address) (deref)): setting 1040 to 1045
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 3) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1))
run: 173 split 25: (((14 integer)) <- ((copy)) ((10 integer)))
m: ((10 integer))
sizeof: ((10 integer))
run: 4 => ((14 integer))
setm: ((14 integer)) <= 4
setm: size of ((14 integer)) is 1
setm: ((14 integer)): setting 1020 to 4
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 4) (1021 1) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1))
run: 174 split 26: (((15 integer)) <- ((copy)) ((0 literal)))
run: 0 => ((15 integer))
setm: ((15 integer)) <= 0
setm: size of ((15 integer)) is 1
setm: ((15 integer)): setting 1021 to 0
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 4) (1021 0) (1022 t) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1))
run: 175 split 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
m: ((14 integer))
sizeof: ((14 integer))
m: ((11 integer))
sizeof: ((11 integer))
run: nil => ((16 boolean))
setm: ((16 boolean)) <= nil
setm: size of ((16 boolean)) is 1
setm: ((16 boolean)): setting 1022 to nil
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 4) (1021 0) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1))
run: 176 split 28: (((jump-if)) ((16 boolean)) ((6 offset)))
m: ((16 boolean))
sizeof: ((16 boolean))
jump: checking that nil is t
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 4) (1021 0) (1023 b) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1))
run: 177 split 29: (((17 character)) <- ((index)) ((1 string-address) (deref)) ((14 integer)))
m: ((14 integer))
sizeof: ((14 integer))
array-len: ((1000 string) (raw))
m: ((1000 integer) (raw))
sizeof: ((1000 integer) (raw))
sizeof: ((_ byte))
m: ((1005 byte) (raw))
sizeof: ((1005 byte) (raw))
run: c => ((17 character))
setm: ((17 character)) <= c
setm: size of ((17 character)) is 1
setm: ((17 character)): setting 1023 to c
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 4) (1021 0) (1023 c) (1024 1044) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1))
run: 178 split 30: (((18 character-address)) <- ((index-address)) ((13 string-address-address) (deref) (deref)) ((15 integer)))
m: ((15 integer))
sizeof: ((15 integer))
array-len: ((1045 string) (raw))
m: ((1045 integer) (raw))
sizeof: ((1045 integer) (raw))
sizeof: ((_ byte))
run: 1046 => ((18 character-address))
setm: ((18 character-address)) <= 1046
setm: size of ((18 character-address)) is 1
setm: ((18 character-address)): setting 1024 to 1046
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 4) (1021 0) (1023 c) (1024 1046) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1))
run: 179 split 31: (((18 character-address) (deref)) <- ((copy)) ((17 character)))
m: ((17 character))
sizeof: ((17 character))
run: c => ((18 character-address) (deref))
setm: ((18 character-address) (deref)) <= c
setm: size of ((18 character-address) (deref)) is 1
setm: ((18 character-address) (deref)): setting 1046 to c
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 4) (1021 0) (1023 c) (1024 1046) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1) (1046 c))
run: 180 split 32: (((14 integer)) <- ((add)) ((14 integer)) ((1 literal)))
m: ((14 integer))
sizeof: ((14 integer))
add: 4 1
m: ((14 integer))
sizeof: ((14 integer))
run: 5 => ((14 integer))
setm: ((14 integer)) <= 5
setm: size of ((14 integer)) is 1
setm: ((14 integer)): setting 1020 to 5
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 5) (1021 0) (1023 c) (1024 1046) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1) (1046 c))
run: 181 split 33: (((15 integer)) <- ((add)) ((15 integer)) ((1 literal)))
m: ((15 integer))
sizeof: ((15 integer))
add: 0 1
m: ((15 integer))
sizeof: ((15 integer))
run: 1 => ((15 integer))
setm: ((15 integer)) <= 1
setm: size of ((15 integer)) is 1
setm: ((15 integer)): setting 1021 to 1
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 5) (1021 1) (1023 c) (1024 1046) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1) (1046 c))
run: 182 split 34: (((jump)) ((-8 offset)))
jump: jumping to 27
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 5) (1021 1) (1023 c) (1024 1046) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1) (1046 c))
run: 183 split 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
m: ((14 integer))
sizeof: ((14 integer))
m: ((11 integer))
sizeof: ((11 integer))
run: t => ((16 boolean))
setm: ((16 boolean)) <= t
setm: size of ((16 boolean)) is 1
setm: ((16 boolean)): setting 1022 to t
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 5) (1021 1) (1022 t) (1023 c) (1024 1046) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1) (1046 c))
run: 184 split 28: (((jump-if)) ((16 boolean)) ((6 offset)))
m: ((16 boolean))
sizeof: ((16 boolean))
jump: checking that t is t
jump: jumping to 35
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 4) (1017 5) (1018 1) (1019 1040) (1020 5) (1021 1) (1022 t) (1023 c) (1024 1046) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1) (1046 c))
run: 185 split 35: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
m: ((11 integer))
sizeof: ((11 integer))
add: 5 1
m: ((11 integer))
sizeof: ((11 integer))
run: 6 => ((10 integer))
setm: ((10 integer)) <= 6
setm: size of ((10 integer)) is 1
setm: ((10 integer)): setting 1016 to 6
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 2) (1016 6) (1017 5) (1018 1) (1019 1040) (1020 5) (1021 1) (1022 t) (1023 c) (1024 1046) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1) (1046 c))
run: 186 split 36: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
m: ((9 integer))
sizeof: ((9 integer))
add: 2 1
m: ((9 integer))
sizeof: ((9 integer))
run: 3 => ((9 integer))
setm: ((9 integer)) <= 3
setm: size of ((9 integer)) is 1
setm: ((9 integer)): setting 1015 to 3
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 3) (1016 6) (1017 5) (1018 1) (1019 1040) (1020 5) (1021 1) (1022 t) (1023 c) (1024 1046) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1) (1046 c))
run: 187 split 37: (((jump)) ((-19 offset)))
jump: jumping to 19
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1015 3) (1016 6) (1017 5) (1018 1) (1019 1040) (1020 5) (1021 1) (1022 t) (1023 c) (1024 1046) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1) (1046 c))
run: 188 split 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
m: ((10 integer))
sizeof: ((10 integer))
m: ((3 integer))
sizeof: ((3 integer))
run: t => ((8 boolean))
setm: ((8 boolean)) <= t
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1014 to t
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1014 t) (1015 3) (1016 6) (1017 5) (1018 1) (1019 1040) (1020 5) (1021 1) (1022 t) (1023 c) (1024 1046) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1) (1046 c))
run: 189 split 20: (((jump-if)) ((8 boolean)) ((17 offset)))
m: ((8 boolean))
sizeof: ((8 boolean))
jump: checking that t is t
jump: jumping to 38
run: -- ((1 1000) (2 /) (3 5) (4 5) (5 t) (6 c) (1000 5) (1001 a) (1002 /) (1003 b) (1004 /) (1005 c) (1006 30) (1007 1000) (1008 /) (1009 5) (1011 1037) (1012 3) (1013 5) (1014 t) (1015 3) (1016 6) (1017 5) (1018 1) (1019 1040) (1020 5) (1021 1) (1022 t) (1023 c) (1024 1046) (1037 3) (1038 1041) (1039 1043) (1040 1045) (1041 1) (1042 a) (1043 1) (1044 b) (1045 1) (1046 c))
run: 190 split 38: (((reply)) ((5 string-address-array-address)))
m: ((5 string-address-array-address))
sizeof: ((5 string-address-array-address))
reply: (((5 string-address-array-address))) (((2 string-address-array-address)))
reply: 1037 => ((2 string-address-array-address))
setm: ((2 string-address-array-address)) <= 1037
setm: size of ((2 string-address-array-address)) is 1
setm: ((2 string-address-array-address)): setting 2 to 1037
schedule: done with routine
