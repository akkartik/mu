c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) -- nil
c{0: 1 (((x tagged-value-address)) <- ((new)) ((tagged-value literal))) -- nil
c{0: 2 (((x tagged-value-address) (deref)) <- ((next-input))) -- nil
c{0: 3 (((p type)) <- ((next-input))) -- nil
c{0: 4 (((xtype type)) <- ((get)) ((x tagged-value-address) (deref)) ((0 offset))) -- nil
c{0: 5 (((match? boolean)) <- ((equal)) ((xtype type)) ((p type))) -- nil
c{0: 6 (((break-if)) ((match? boolean))) -- ((open 6))
c{0: 7 (((reply)) ((0 literal)) ((nil literal))) -- ((open 6))
c{0: 8 (((xvalue location)) <- ((get)) ((x tagged-value-address) (deref)) ((1 offset))) -- ((close 8) (open 6))
c{0: 9 (((reply)) ((xvalue location)) ((match? boolean))) -- ((close 8) (open 6))
c{1: 0 new (((default-scope scope-address)))
c{1: 1 new (((x tagged-value-address)))
c{1: 2 next-input (((x tagged-value-address) (deref)))
c{1: 3 next-input (((p type)))
c{1: 4 get (((xtype type)))
c{1: 5 equal (((match? boolean)))
c{1: 6 break-if nil
c{1: 7 reply nil
c{1: 8 get (((xvalue location)))
c{1: 9 reply nil
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((30 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((x tagged-value-address)) <- ((new)) ((tagged-value literal))) nil nil
maybe-add: ((tagged-value literal))
cn0: checking ((x tagged-value-address))
maybe-add: ((x tagged-value-address))
cn0: location for arg ((x tagged-value-address)): 1
sizeof: tagged-value-address
cn0: (((x tagged-value-address) (deref)) <- ((next-input))) ((x 1)) nil
cn0: checking ((x tagged-value-address) (deref))
maybe-add: ((x tagged-value-address) (deref))
cn0: (((p type)) <- ((next-input))) ((x 1)) nil
cn0: checking ((p type))
maybe-add: ((p type))
cn0: location for arg ((p type)): 2
sizeof: type
cn0: (((xtype type)) <- ((get)) ((x tagged-value-address) (deref)) ((0 offset))) ((p 2) (x 1)) nil
cn0: field-access 0
cn0: field-access deref
cn0: checking ((xtype type))
maybe-add: ((xtype type))
cn0: location for arg ((xtype type)): 3
sizeof: type
cn0: (((match? boolean)) <- ((equal)) ((xtype type)) ((p type))) ((p 2) (x 1) (xtype 3)) nil
maybe-add: ((xtype type))
maybe-add: ((p type))
cn0: checking ((match? boolean))
maybe-add: ((match? boolean))
cn0: location for arg ((match? boolean)): 4
sizeof: boolean
cn0: (((jump-if)) ((match? boolean)) ((1 offset))) ((match? 4) (p 2) (x 1) (xtype 3)) nil
maybe-add: ((match? boolean))
maybe-add: ((1 offset))
cn0: (((reply)) ((0 literal)) ((nil literal))) ((match? 4) (p 2) (x 1) (xtype 3)) nil
maybe-add: ((0 literal))
maybe-add: ((nil literal))
cn0: (((xvalue location)) <- ((get)) ((x tagged-value-address) (deref)) ((1 offset))) ((match? 4) (p 2) (x 1) (xtype 3)) nil
cn0: field-access 1
cn0: field-access deref
cn0: checking ((xvalue location))
maybe-add: ((xvalue location))
cn0: location for arg ((xvalue location)): 5
sizeof: location
cn0: (((reply)) ((xvalue location)) ((match? boolean))) ((match? 4) (p 2) (x 1) (xtype 3) (xvalue 5)) nil
maybe-add: ((xvalue location))
maybe-add: ((match? boolean))
cn1: update names ((match? 4) (p 2) (x 1) (xtype 3) (xvalue 5)) nil
c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) -- nil
c{0: 1 (((xtype type)) <- ((next-input))) -- nil
c{0: 2 (((xtypesize integer)) <- ((sizeof)) ((xtype type))) -- nil
c{0: 3 (((xcheck boolean)) <- ((equal)) ((xtypesize integer)) ((1 literal))) -- nil
c{0: 4 (((assert)) ((xcheck boolean))) -- nil
c{0: 5 (((result tagged-value-address)) <- ((new)) ((tagged-value literal))) -- nil
c{0: 6 (((resulttype location)) <- ((get-address)) ((result tagged-value-address) (deref)) ((type offset))) -- nil
c{0: 7 (((resulttype location) (deref)) <- ((copy)) ((xtype type))) -- nil
c{0: 8 (((locaddr location)) <- ((get-address)) ((result tagged-value-address) (deref)) ((payload offset))) -- nil
c{0: 9 (((locaddr location) (deref)) <- ((next-input))) -- nil
c{0: 10 (((reply)) ((result tagged-value-address))) -- nil
c{1: 0 new (((default-scope scope-address)))
c{1: 1 next-input (((xtype type)))
c{1: 2 sizeof (((xtypesize integer)))
c{1: 3 equal (((xcheck boolean)))
c{1: 4 assert nil
c{1: 5 new (((result tagged-value-address)))
c{1: 6 get-address (((resulttype location)))
c{1: 7 copy (((resulttype location) (deref)))
c{1: 8 get-address (((locaddr location)))
c{1: 9 next-input (((locaddr location) (deref)))
c{1: 10 reply nil
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((30 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((xtype type)) <- ((next-input))) nil nil
cn0: checking ((xtype type))
maybe-add: ((xtype type))
cn0: location for arg ((xtype type)): 1
sizeof: type
cn0: (((xtypesize integer)) <- ((sizeof)) ((xtype type))) ((xtype 1)) nil
maybe-add: ((xtype type))
cn0: checking ((xtypesize integer))
maybe-add: ((xtypesize integer))
cn0: location for arg ((xtypesize integer)): 2
sizeof: integer
cn0: (((xcheck boolean)) <- ((equal)) ((xtypesize integer)) ((1 literal))) ((xtype 1) (xtypesize 2)) nil
maybe-add: ((xtypesize integer))
maybe-add: ((1 literal))
cn0: checking ((xcheck boolean))
maybe-add: ((xcheck boolean))
cn0: location for arg ((xcheck boolean)): 3
sizeof: boolean
cn0: (((assert)) ((xcheck boolean))) ((xcheck 3) (xtype 1) (xtypesize 2)) nil
maybe-add: ((xcheck boolean))
cn0: (((result tagged-value-address)) <- ((new)) ((tagged-value literal))) ((xcheck 3) (xtype 1) (xtypesize 2)) nil
maybe-add: ((tagged-value literal))
cn0: checking ((result tagged-value-address))
maybe-add: ((result tagged-value-address))
cn0: location for arg ((result tagged-value-address)): 4
sizeof: tagged-value-address
cn0: (((resulttype location)) <- ((get-address)) ((result tagged-value-address) (deref)) ((type offset))) ((result 4) (xcheck 3) (xtype 1) (xtypesize 2)) nil
cn0: field-access type
cn0: field-access deref
cn0: new field; computing location
cn0: field location 0
cn0: checking ((resulttype location))
maybe-add: ((resulttype location))
cn0: location for arg ((resulttype location)): 5
sizeof: location
cn0: (((resulttype location) (deref)) <- ((copy)) ((xtype type))) ((result 4) (resulttype 5) (type 0) (xcheck 3) (xtype 1) (xtypesize 2)) ((type t))
maybe-add: ((xtype type))
cn0: checking ((resulttype location) (deref))
maybe-add: ((resulttype location) (deref))
cn0: (((locaddr location)) <- ((get-address)) ((result tagged-value-address) (deref)) ((payload offset))) ((result 4) (resulttype 5) (type 0) (xcheck 3) (xtype 1) (xtypesize 2)) ((type t))
cn0: field-access payload
cn0: field-access deref
cn0: new field; computing location
cn0: field location 1
cn0: checking ((locaddr location))
maybe-add: ((locaddr location))
cn0: location for arg ((locaddr location)): 6
sizeof: location
cn0: (((locaddr location) (deref)) <- ((next-input))) ((locaddr 6) (payload 1) (result 4) (resulttype 5) (type 0) (xcheck 3) (xtype 1) (xtypesize 2)) ((payload t) (type t))
cn0: checking ((locaddr location) (deref))
maybe-add: ((locaddr location) (deref))
cn0: (((reply)) ((result tagged-value-address))) ((locaddr 6) (payload 1) (result 4) (resulttype 5) (type 0) (xcheck 3) (xtype 1) (xtypesize 2)) ((payload t) (type t))
maybe-add: ((result tagged-value-address))
cn1: update names ((locaddr 6) (payload 1) (result 4) (resulttype 5) (type 0) (xcheck 3) (xtype 1) (xtypesize 2)) ((payload t) (type t))
c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) -- nil
c{0: 1 (((base list-address)) <- ((next-input))) -- nil
c{0: 2 (((result list-address)) <- ((get)) ((base list-address) (deref)) ((cdr offset))) -- nil
c{0: 3 (((reply)) ((result list-address))) -- nil
c{1: 0 new (((default-scope scope-address)))
c{1: 1 next-input (((base list-address)))
c{1: 2 get (((result list-address)))
c{1: 3 reply nil
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((30 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((base list-address)) <- ((next-input))) nil nil
cn0: checking ((base list-address))
maybe-add: ((base list-address))
cn0: location for arg ((base list-address)): 1
sizeof: list-address
cn0: (((result list-address)) <- ((get)) ((base list-address) (deref)) ((cdr offset))) ((base 1)) nil
cn0: field-access cdr
cn0: field-access deref
cn0: new field; computing location
cn0: field location 1
cn0: checking ((result list-address))
maybe-add: ((result list-address))
cn0: location for arg ((result list-address)): 2
sizeof: list-address
cn0: (((reply)) ((result list-address))) ((base 1) (cdr 1) (result 2)) ((cdr t))
maybe-add: ((result list-address))
cn1: update names ((base 1) (cdr 1) (result 2)) ((cdr t))
c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) -- nil
c{0: 1 (((base list-address)) <- ((next-input))) -- nil
c{0: 2 (((result tagged-value-address)) <- ((get-address)) ((base list-address) (deref)) ((car offset))) -- nil
c{0: 3 (((reply)) ((result tagged-value-address))) -- nil
c{1: 0 new (((default-scope scope-address)))
c{1: 1 next-input (((base list-address)))
c{1: 2 get-address (((result tagged-value-address)))
c{1: 3 reply nil
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((30 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((base list-address)) <- ((next-input))) nil nil
cn0: checking ((base list-address))
maybe-add: ((base list-address))
cn0: location for arg ((base list-address)): 1
sizeof: list-address
cn0: (((result tagged-value-address)) <- ((get-address)) ((base list-address) (deref)) ((car offset))) ((base 1)) nil
cn0: field-access car
cn0: field-access deref
cn0: new field; computing location
cn0: field location 0
cn0: checking ((result tagged-value-address))
maybe-add: ((result tagged-value-address))
cn0: location for arg ((result tagged-value-address)): 2
sizeof: tagged-value-address
cn0: (((reply)) ((result tagged-value-address))) ((base 1) (car 0) (result 2)) ((car t))
maybe-add: ((result tagged-value-address))
cn1: update names ((base 1) (car 0) (result 2)) ((car t))
c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) -- nil
c{0: 1 (((new-list-result list-address)) <- ((new)) ((list literal))) -- nil
c{0: 2 (((curr list-address)) <- ((copy)) ((new-list-result list-address))) -- nil
c{0: 3 (((curr-value integer)) ((exists? boolean)) <- ((next-input))) -- ((open 3))
c{0: 4 (((break-unless)) ((exists? boolean))) -- ((open 3))
c{0: 5 (((next list-address-address)) <- ((get-address)) ((curr list-address) (deref)) ((cdr offset))) -- ((open 3))
c{0: 6 (((next list-address-address) (deref)) <- ((new)) ((list literal))) -- ((open 3))
c{0: 7 (((curr list-address)) <- ((list-next)) ((curr list-address))) -- ((open 3))
c{0: 8 (((dest tagged-value-address)) <- ((list-value-address)) ((curr list-address))) -- ((open 3))
c{0: 9 (((dest tagged-value-address) (deref)) <- ((save-type)) ((curr-value integer))) -- ((open 3))
c{0: 10 (((loop))) -- ((open 3))
c{0: 11 (((new-list-result list-address)) <- ((list-next)) ((new-list-result list-address))) -- ((close 11) (open 3))
c{0: 12 (((reply)) ((new-list-result list-address))) -- ((close 11) (open 3))
c{1: 0 new (((default-scope scope-address)))
c{1: 1 new (((new-list-result list-address)))
c{1: 2 copy (((curr list-address)))
c{1: 3 next-input (((curr-value integer)) ((exists? boolean)))
c{1: 4 break-unless nil
c{1: 5 get-address (((next list-address-address)))
c{1: 6 new (((next list-address-address) (deref)))
c{1: 7 list-next (((curr list-address)))
c{1: 8 list-value-address (((dest tagged-value-address)))
c{1: 9 save-type (((dest tagged-value-address) (deref)))
c{1: 10 loop nil
c{1: 11 list-next (((new-list-result list-address)))
c{1: 12 reply nil
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((30 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((new-list-result list-address)) <- ((new)) ((list literal))) nil nil
maybe-add: ((list literal))
cn0: checking ((new-list-result list-address))
maybe-add: ((new-list-result list-address))
cn0: location for arg ((new-list-result list-address)): 1
sizeof: list-address
cn0: (((curr list-address)) <- ((copy)) ((new-list-result list-address))) ((new-list-result 1)) nil
maybe-add: ((new-list-result list-address))
cn0: checking ((curr list-address))
maybe-add: ((curr list-address))
cn0: location for arg ((curr list-address)): 2
sizeof: list-address
cn0: (((curr-value integer)) ((exists? boolean)) <- ((next-input))) ((curr 2) (new-list-result 1)) nil
cn0: checking ((curr-value integer))
maybe-add: ((curr-value integer))
cn0: location for arg ((curr-value integer)): 3
sizeof: integer
cn0: checking ((exists? boolean))
maybe-add: ((exists? boolean))
cn0: location for arg ((exists? boolean)): 4
sizeof: boolean
cn0: (((jump-unless)) ((exists? boolean)) ((6 offset))) ((curr 2) (curr-value 3) (exists? 4) (new-list-result 1)) nil
maybe-add: ((exists? boolean))
maybe-add: ((6 offset))
cn0: (((next list-address-address)) <- ((get-address)) ((curr list-address) (deref)) ((cdr offset))) ((curr 2) (curr-value 3) (exists? 4) (new-list-result 1)) nil
cn0: field-access cdr
cn0: field-access deref
cn0: new field; computing location
cn0: field location 1
cn0: checking ((next list-address-address))
maybe-add: ((next list-address-address))
cn0: location for arg ((next list-address-address)): 5
sizeof: list-address-address
cn0: (((next list-address-address) (deref)) <- ((new)) ((list literal))) ((cdr 1) (curr 2) (curr-value 3) (exists? 4) (new-list-result 1) (next 5)) ((cdr t))
maybe-add: ((list literal))
cn0: checking ((next list-address-address) (deref))
maybe-add: ((next list-address-address) (deref))
cn0: (((curr list-address)) <- ((list-next)) ((curr list-address))) ((cdr 1) (curr 2) (curr-value 3) (exists? 4) (new-list-result 1) (next 5)) ((cdr t))
maybe-add: ((curr list-address))
cn0: checking ((curr list-address))
maybe-add: ((curr list-address))
cn0: (((dest tagged-value-address)) <- ((list-value-address)) ((curr list-address))) ((cdr 1) (curr 2) (curr-value 3) (exists? 4) (new-list-result 1) (next 5)) ((cdr t))
maybe-add: ((curr list-address))
cn0: checking ((dest tagged-value-address))
maybe-add: ((dest tagged-value-address))
cn0: location for arg ((dest tagged-value-address)): 6
sizeof: tagged-value-address
cn0: (((dest tagged-value-address) (deref)) <- ((save-type)) ((curr-value integer))) ((cdr 1) (curr 2) (curr-value 3) (dest 6) (exists? 4) (new-list-result 1) (next 5)) ((cdr t))
maybe-add: ((curr-value integer))
cn0: checking ((dest tagged-value-address) (deref))
maybe-add: ((dest tagged-value-address) (deref))
cn0: (((jump)) ((-8 offset))) ((cdr 1) (curr 2) (curr-value 3) (dest 6) (exists? 4) (new-list-result 1) (next 5)) ((cdr t))
maybe-add: ((-8 offset))
cn0: (((new-list-result list-address)) <- ((list-next)) ((new-list-result list-address))) ((cdr 1) (curr 2) (curr-value 3) (dest 6) (exists? 4) (new-list-result 1) (next 5)) ((cdr t))
maybe-add: ((new-list-result list-address))
cn0: checking ((new-list-result list-address))
maybe-add: ((new-list-result list-address))
cn0: (((reply)) ((new-list-result list-address))) ((cdr 1) (curr 2) (curr-value 3) (dest 6) (exists? 4) (new-list-result 1) (next 5)) ((cdr t))
maybe-add: ((new-list-result list-address))
cn1: update names ((cdr 1) (curr 2) (curr-value 3) (dest 6) (exists? 4) (new-list-result 1) (next 5)) ((cdr t))
c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) -- nil
c{0: 1 (((result channel-address)) <- ((new)) ((channel literal))) -- nil
c{0: 2 (((full integer-address)) <- ((get-address)) ((result channel-address) (deref)) ((first-full offset))) -- nil
c{0: 3 (((full integer-address) (deref)) <- ((copy)) ((0 literal))) -- nil
c{0: 4 (((free integer-address)) <- ((get-address)) ((result channel-address) (deref)) ((first-free offset))) -- nil
c{0: 5 (((free integer-address) (deref)) <- ((copy)) ((0 literal))) -- nil
c{0: 6 (((capacity integer)) <- ((next-input))) -- nil
c{0: 7 (((capacity integer)) <- ((add)) ((capacity integer)) ((1 literal))) -- nil
c{0: 8 (((channel-buffer-address tagged-value-array-address-address)) <- ((get-address)) ((result channel-address) (deref)) ((circular-buffer offset))) -- nil
c{0: 9 (((channel-buffer-address tagged-value-array-address-address) (deref)) <- ((new)) ((tagged-value-array literal)) ((capacity integer))) -- nil
c{0: 10 (((reply)) ((result channel-address))) -- nil
c{1: 0 new (((default-scope scope-address)))
c{1: 1 new (((result channel-address)))
c{1: 2 get-address (((full integer-address)))
c{1: 3 copy (((full integer-address) (deref)))
c{1: 4 get-address (((free integer-address)))
c{1: 5 copy (((free integer-address) (deref)))
c{1: 6 next-input (((capacity integer)))
c{1: 7 add (((capacity integer)))
c{1: 8 get-address (((channel-buffer-address tagged-value-array-address-address)))
c{1: 9 new (((channel-buffer-address tagged-value-array-address-address) (deref)))
c{1: 10 reply nil
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((30 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((result channel-address)) <- ((new)) ((channel literal))) nil nil
maybe-add: ((channel literal))
cn0: checking ((result channel-address))
maybe-add: ((result channel-address))
cn0: location for arg ((result channel-address)): 1
sizeof: channel-address
cn0: (((full integer-address)) <- ((get-address)) ((result channel-address) (deref)) ((first-full offset))) ((result 1)) nil
cn0: field-access first-full
cn0: field-access deref
cn0: new field; computing location
cn0: field location 0
cn0: checking ((full integer-address))
maybe-add: ((full integer-address))
cn0: location for arg ((full integer-address)): 2
sizeof: integer-address
cn0: (((full integer-address) (deref)) <- ((copy)) ((0 literal))) ((first-full 0) (full 2) (result 1)) ((first-full t))
maybe-add: ((0 literal))
cn0: checking ((full integer-address) (deref))
maybe-add: ((full integer-address) (deref))
cn0: (((free integer-address)) <- ((get-address)) ((result channel-address) (deref)) ((first-free offset))) ((first-full 0) (full 2) (result 1)) ((first-full t))
cn0: field-access first-free
cn0: field-access deref
cn0: new field; computing location
cn0: field location 1
cn0: checking ((free integer-address))
maybe-add: ((free integer-address))
cn0: location for arg ((free integer-address)): 3
sizeof: integer-address
cn0: (((free integer-address) (deref)) <- ((copy)) ((0 literal))) ((first-free 1) (first-full 0) (free 3) (full 2) (result 1)) ((first-free t) (first-full t))
maybe-add: ((0 literal))
cn0: checking ((free integer-address) (deref))
maybe-add: ((free integer-address) (deref))
cn0: (((capacity integer)) <- ((next-input))) ((first-free 1) (first-full 0) (free 3) (full 2) (result 1)) ((first-free t) (first-full t))
cn0: checking ((capacity integer))
maybe-add: ((capacity integer))
cn0: location for arg ((capacity integer)): 4
sizeof: integer
cn0: (((capacity integer)) <- ((add)) ((capacity integer)) ((1 literal))) ((capacity 4) (first-free 1) (first-full 0) (free 3) (full 2) (result 1)) ((first-free t) (first-full t))
maybe-add: ((capacity integer))
maybe-add: ((1 literal))
cn0: checking ((capacity integer))
maybe-add: ((capacity integer))
cn0: (((channel-buffer-address tagged-value-array-address-address)) <- ((get-address)) ((result channel-address) (deref)) ((circular-buffer offset))) ((capacity 4) (first-free 1) (first-full 0) (free 3) (full 2) (result 1)) ((first-free t) (first-full t))
cn0: field-access circular-buffer
cn0: field-access deref
cn0: new field; computing location
cn0: field location 2
cn0: checking ((channel-buffer-address tagged-value-array-address-address))
maybe-add: ((channel-buffer-address tagged-value-array-address-address))
cn0: location for arg ((channel-buffer-address tagged-value-array-address-address)): 5
sizeof: tagged-value-array-address-address
cn0: (((channel-buffer-address tagged-value-array-address-address) (deref)) <- ((new)) ((tagged-value-array literal)) ((capacity integer))) ((capacity 4) (channel-buffer-address 5) (circular-buffer 2) (first-free 1) (first-full 0) (free 3) (full 2) (result 1)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((tagged-value-array literal))
maybe-add: ((capacity integer))
cn0: checking ((channel-buffer-address tagged-value-array-address-address) (deref))
maybe-add: ((channel-buffer-address tagged-value-array-address-address) (deref))
cn0: (((reply)) ((result channel-address))) ((capacity 4) (channel-buffer-address 5) (circular-buffer 2) (first-free 1) (first-full 0) (free 3) (full 2) (result 1)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((result channel-address))
cn1: update names ((capacity 4) (channel-buffer-address 5) (circular-buffer 2) (first-free 1) (first-full 0) (free 3) (full 2) (result 1)) ((circular-buffer t) (first-free t) (first-full t))
c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) -- nil
c{0: 1 (((chan channel)) <- ((next-input))) -- nil
c{0: 2 (((q tagged-value-array-address)) <- ((get)) ((chan channel)) ((circular-buffer offset))) -- nil
c{0: 3 (((qlen integer)) <- ((length)) ((q tagged-value-array-address) (deref))) -- nil
c{0: 4 (((reply)) ((qlen integer))) -- nil
c{1: 0 new (((default-scope scope-address)))
c{1: 1 next-input (((chan channel)))
c{1: 2 get (((q tagged-value-array-address)))
c{1: 3 length (((qlen integer)))
c{1: 4 reply nil
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((30 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((chan channel)) <- ((next-input))) nil nil
cn0: checking ((chan channel))
maybe-add: ((chan channel))
cn0: location for arg ((chan channel)): 1
sizeof: channel
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
cn0: (((q tagged-value-array-address)) <- ((get)) ((chan channel)) ((circular-buffer offset))) ((chan 1)) nil
cn0: field-access circular-buffer
cn0: new field; computing location
cn0: field location 2
cn0: checking ((q tagged-value-array-address))
maybe-add: ((q tagged-value-array-address))
cn0: location for arg ((q tagged-value-array-address)): 4
sizeof: tagged-value-array-address
cn0: (((qlen integer)) <- ((length)) ((q tagged-value-array-address) (deref))) ((chan 1) (circular-buffer 2) (q 4)) ((circular-buffer t))
maybe-add: ((q tagged-value-array-address) (deref))
cn0: checking ((qlen integer))
maybe-add: ((qlen integer))
cn0: location for arg ((qlen integer)): 5
sizeof: integer
cn0: (((reply)) ((qlen integer))) ((chan 1) (circular-buffer 2) (q 4) (qlen 5)) ((circular-buffer t))
maybe-add: ((qlen integer))
cn1: update names ((chan 1) (circular-buffer 2) (q 4) (qlen 5)) ((circular-buffer t))
c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) -- nil
c{0: 1 (((chan channel-address)) <- ((next-input))) -- nil
c{0: 2 (((val tagged-value)) <- ((next-input))) -- nil
c{0: 3 (((full boolean)) <- ((full?)) ((chan channel-address) (deref))) -- ((open 3))
c{0: 4 (((break-unless)) ((full boolean))) -- ((open 3))
c{0: 5 (((full-address integer-address)) <- ((get-address)) ((chan channel-address) (deref)) ((first-full offset))) -- ((open 3))
c{0: 6 (((sleep)) ((full-address integer-address) (deref))) -- ((open 3))
c{0: 7 (((q tagged-value-array-address)) <- ((get)) ((chan channel-address) (deref)) ((circular-buffer offset))) -- ((close 7) (open 3))
c{0: 8 (((free integer-address)) <- ((get-address)) ((chan channel-address) (deref)) ((first-free offset))) -- ((close 7) (open 3))
c{0: 9 (((dest tagged-value-address)) <- ((index-address)) ((q tagged-value-array-address) (deref)) ((free integer-address) (deref))) -- ((close 7) (open 3))
c{0: 10 (((dest tagged-value-address) (deref)) <- ((copy)) ((val tagged-value))) -- ((close 7) (open 3))
c{0: 11 (((free integer-address) (deref)) <- ((add)) ((free integer-address) (deref)) ((1 literal))) -- ((close 7) (open 3))
c{0: 12 (((qlen integer)) <- ((length)) ((q tagged-value-array-address) (deref))) -- ((open 12) (close 7) (open 3))
c{0: 13 (((remaining? boolean)) <- ((less-than)) ((free integer-address) (deref)) ((qlen integer))) -- ((open 12) (close 7) (open 3))
c{0: 14 (((break-if)) ((remaining? boolean))) -- ((open 12) (close 7) (open 3))
c{0: 15 (((free integer-address) (deref)) <- ((copy)) ((0 literal))) -- ((open 12) (close 7) (open 3))
c{0: 16 reply:chan:channel-address/deref -- ((close 16) (open 12) (close 7) (open 3))
c{1: 0 new (((default-scope scope-address)))
c{1: 1 next-input (((chan channel-address)))
c{1: 2 next-input (((val tagged-value)))
c{1: 3 full? (((full boolean)))
c{1: 4 break-unless nil
c{1: 5 get-address (((full-address integer-address)))
c{1: 6 sleep nil
c{1: 7 get (((q tagged-value-array-address)))
c{1: 8 get-address (((free integer-address)))
c{1: 9 index-address (((dest tagged-value-address)))
c{1: 10 copy (((dest tagged-value-address) (deref)))
c{1: 11 add (((free integer-address) (deref)))
c{1: 12 length (((qlen integer)))
c{1: 13 less-than (((remaining? boolean)))
c{1: 14 break-if nil
c{1: 15 copy (((free integer-address) (deref)))
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((30 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((chan channel-address)) <- ((next-input))) nil nil
cn0: checking ((chan channel-address))
maybe-add: ((chan channel-address))
cn0: location for arg ((chan channel-address)): 1
sizeof: channel-address
cn0: (((val tagged-value)) <- ((next-input))) ((chan 1)) nil
cn0: checking ((val tagged-value))
maybe-add: ((val tagged-value))
cn0: location for arg ((val tagged-value)): 2
sizeof: tagged-value
sizeof: type
sizeof: location
cn0: (((full boolean)) <- ((full?)) ((chan channel-address) (deref))) ((chan 1) (val 2)) nil
maybe-add: ((chan channel-address) (deref))
cn0: checking ((full boolean))
maybe-add: ((full boolean))
cn0: location for arg ((full boolean)): 4
sizeof: boolean
cn0: (((jump-unless)) ((full boolean)) ((2 offset))) ((chan 1) (full 4) (val 2)) nil
maybe-add: ((full boolean))
maybe-add: ((2 offset))
cn0: (((full-address integer-address)) <- ((get-address)) ((chan channel-address) (deref)) ((first-full offset))) ((chan 1) (full 4) (val 2)) nil
cn0: field-access first-full
cn0: field-access deref
cn0: new field; computing location
cn0: field location 0
cn0: checking ((full-address integer-address))
maybe-add: ((full-address integer-address))
cn0: location for arg ((full-address integer-address)): 5
sizeof: integer-address
cn0: (((sleep)) ((full-address integer-address) (deref))) ((chan 1) (first-full 0) (full 4) (full-address 5) (val 2)) ((first-full t))
maybe-add: ((full-address integer-address) (deref))
cn0: (((q tagged-value-array-address)) <- ((get)) ((chan channel-address) (deref)) ((circular-buffer offset))) ((chan 1) (first-full 0) (full 4) (full-address 5) (val 2)) ((first-full t))
cn0: field-access circular-buffer
cn0: field-access deref
cn0: new field; computing location
cn0: field location 2
cn0: checking ((q tagged-value-array-address))
maybe-add: ((q tagged-value-array-address))
cn0: location for arg ((q tagged-value-array-address)): 6
sizeof: tagged-value-array-address
cn0: (((free integer-address)) <- ((get-address)) ((chan channel-address) (deref)) ((first-free offset))) ((chan 1) (circular-buffer 2) (first-full 0) (full 4) (full-address 5) (q 6) (val 2)) ((circular-buffer t) (first-full t))
cn0: field-access first-free
cn0: field-access deref
cn0: new field; computing location
cn0: field location 1
cn0: checking ((free integer-address))
maybe-add: ((free integer-address))
cn0: location for arg ((free integer-address)): 7
sizeof: integer-address
cn0: (((dest tagged-value-address)) <- ((index-address)) ((q tagged-value-array-address) (deref)) ((free integer-address) (deref))) ((chan 1) (circular-buffer 2) (first-free 1) (first-full 0) (free 7) (full 4) (full-address 5) (q 6) (val 2)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((q tagged-value-array-address) (deref))
maybe-add: ((free integer-address) (deref))
cn0: checking ((dest tagged-value-address))
maybe-add: ((dest tagged-value-address))
cn0: location for arg ((dest tagged-value-address)): 8
sizeof: tagged-value-address
cn0: (((dest tagged-value-address) (deref)) <- ((copy)) ((val tagged-value))) ((chan 1) (circular-buffer 2) (dest 8) (first-free 1) (first-full 0) (free 7) (full 4) (full-address 5) (q 6) (val 2)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((val tagged-value))
cn0: checking ((dest tagged-value-address) (deref))
maybe-add: ((dest tagged-value-address) (deref))
cn0: (((free integer-address) (deref)) <- ((add)) ((free integer-address) (deref)) ((1 literal))) ((chan 1) (circular-buffer 2) (dest 8) (first-free 1) (first-full 0) (free 7) (full 4) (full-address 5) (q 6) (val 2)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((free integer-address) (deref))
maybe-add: ((1 literal))
cn0: checking ((free integer-address) (deref))
maybe-add: ((free integer-address) (deref))
cn0: (((qlen integer)) <- ((length)) ((q tagged-value-array-address) (deref))) ((chan 1) (circular-buffer 2) (dest 8) (first-free 1) (first-full 0) (free 7) (full 4) (full-address 5) (q 6) (val 2)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((q tagged-value-array-address) (deref))
cn0: checking ((qlen integer))
maybe-add: ((qlen integer))
cn0: location for arg ((qlen integer)): 9
sizeof: integer
cn0: (((remaining? boolean)) <- ((less-than)) ((free integer-address) (deref)) ((qlen integer))) ((chan 1) (circular-buffer 2) (dest 8) (first-free 1) (first-full 0) (free 7) (full 4) (full-address 5) (q 6) (qlen 9) (val 2)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((free integer-address) (deref))
maybe-add: ((qlen integer))
cn0: checking ((remaining? boolean))
maybe-add: ((remaining? boolean))
cn0: location for arg ((remaining? boolean)): 10
sizeof: boolean
cn0: (((jump-if)) ((remaining? boolean)) ((1 offset))) ((chan 1) (circular-buffer 2) (dest 8) (first-free 1) (first-full 0) (free 7) (full 4) (full-address 5) (q 6) (qlen 9) (remaining? 10) (val 2)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((remaining? boolean))
maybe-add: ((1 offset))
cn0: (((free integer-address) (deref)) <- ((copy)) ((0 literal))) ((chan 1) (circular-buffer 2) (dest 8) (first-free 1) (first-full 0) (free 7) (full 4) (full-address 5) (q 6) (qlen 9) (remaining? 10) (val 2)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((0 literal))
cn0: checking ((free integer-address) (deref))
maybe-add: ((free integer-address) (deref))
cn1: update names ((chan 1) (circular-buffer 2) (dest 8) (first-free 1) (first-full 0) (free 7) (full 4) (full-address 5) (q 6) (qlen 9) (remaining? 10) (val 2)) ((circular-buffer t) (first-free t) (first-full t))
c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) -- nil
c{0: 1 (((chan channel-address)) <- ((next-input))) -- nil
c{0: 2 (((empty boolean)) <- ((empty?)) ((chan channel-address) (deref))) -- ((open 2))
c{0: 3 (((break-unless)) ((empty boolean))) -- ((open 2))
c{0: 4 (((free-address integer-address)) <- ((get-address)) ((chan channel-address) (deref)) ((first-free offset))) -- ((open 2))
c{0: 5 (((sleep)) ((free-address integer-address) (deref))) -- ((open 2))
c{0: 6 (((full integer-address)) <- ((get-address)) ((chan channel-address) (deref)) ((first-full offset))) -- ((close 6) (open 2))
c{0: 7 (((q tagged-value-array-address)) <- ((get)) ((chan channel-address) (deref)) ((circular-buffer offset))) -- ((close 6) (open 2))
c{0: 8 (((result tagged-value)) <- ((index)) ((q tagged-value-array-address) (deref)) ((full integer-address) (deref))) -- ((close 6) (open 2))
c{0: 9 (((full integer-address) (deref)) <- ((add)) ((full integer-address) (deref)) ((1 literal))) -- ((close 6) (open 2))
c{0: 10 (((qlen integer)) <- ((length)) ((q tagged-value-array-address) (deref))) -- ((open 10) (close 6) (open 2))
c{0: 11 (((remaining? boolean)) <- ((less-than)) ((full integer-address) (deref)) ((qlen integer))) -- ((open 10) (close 6) (open 2))
c{0: 12 (((break-if)) ((remaining? boolean))) -- ((open 10) (close 6) (open 2))
c{0: 13 (((full integer-address) (deref)) <- ((copy)) ((0 literal))) -- ((open 10) (close 6) (open 2))
c{0: 14 (((reply)) ((result tagged-value)) ((chan channel-address) (deref))) -- ((close 14) (open 10) (close 6) (open 2))
c{1: 0 new (((default-scope scope-address)))
c{1: 1 next-input (((chan channel-address)))
c{1: 2 empty? (((empty boolean)))
c{1: 3 break-unless nil
c{1: 4 get-address (((free-address integer-address)))
c{1: 5 sleep nil
c{1: 6 get-address (((full integer-address)))
c{1: 7 get (((q tagged-value-array-address)))
c{1: 8 index (((result tagged-value)))
c{1: 9 add (((full integer-address) (deref)))
c{1: 10 length (((qlen integer)))
c{1: 11 less-than (((remaining? boolean)))
c{1: 12 break-if nil
c{1: 13 copy (((full integer-address) (deref)))
c{1: 14 reply nil
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((30 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((chan channel-address)) <- ((next-input))) nil nil
cn0: checking ((chan channel-address))
maybe-add: ((chan channel-address))
cn0: location for arg ((chan channel-address)): 1
sizeof: channel-address
cn0: (((empty boolean)) <- ((empty?)) ((chan channel-address) (deref))) ((chan 1)) nil
maybe-add: ((chan channel-address) (deref))
cn0: checking ((empty boolean))
maybe-add: ((empty boolean))
cn0: location for arg ((empty boolean)): 2
sizeof: boolean
cn0: (((jump-unless)) ((empty boolean)) ((2 offset))) ((chan 1) (empty 2)) nil
maybe-add: ((empty boolean))
maybe-add: ((2 offset))
cn0: (((free-address integer-address)) <- ((get-address)) ((chan channel-address) (deref)) ((first-free offset))) ((chan 1) (empty 2)) nil
cn0: field-access first-free
cn0: field-access deref
cn0: new field; computing location
cn0: field location 1
cn0: checking ((free-address integer-address))
maybe-add: ((free-address integer-address))
cn0: location for arg ((free-address integer-address)): 3
sizeof: integer-address
cn0: (((sleep)) ((free-address integer-address) (deref))) ((chan 1) (empty 2) (first-free 1) (free-address 3)) ((first-free t))
maybe-add: ((free-address integer-address) (deref))
cn0: (((full integer-address)) <- ((get-address)) ((chan channel-address) (deref)) ((first-full offset))) ((chan 1) (empty 2) (first-free 1) (free-address 3)) ((first-free t))
cn0: field-access first-full
cn0: field-access deref
cn0: new field; computing location
cn0: field location 0
cn0: checking ((full integer-address))
maybe-add: ((full integer-address))
cn0: location for arg ((full integer-address)): 4
sizeof: integer-address
cn0: (((q tagged-value-array-address)) <- ((get)) ((chan channel-address) (deref)) ((circular-buffer offset))) ((chan 1) (empty 2) (first-free 1) (first-full 0) (free-address 3) (full 4)) ((first-free t) (first-full t))
cn0: field-access circular-buffer
cn0: field-access deref
cn0: new field; computing location
cn0: field location 2
cn0: checking ((q tagged-value-array-address))
maybe-add: ((q tagged-value-array-address))
cn0: location for arg ((q tagged-value-array-address)): 5
sizeof: tagged-value-array-address
cn0: (((result tagged-value)) <- ((index)) ((q tagged-value-array-address) (deref)) ((full integer-address) (deref))) ((chan 1) (circular-buffer 2) (empty 2) (first-free 1) (first-full 0) (free-address 3) (full 4) (q 5)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((q tagged-value-array-address) (deref))
maybe-add: ((full integer-address) (deref))
cn0: checking ((result tagged-value))
maybe-add: ((result tagged-value))
cn0: location for arg ((result tagged-value)): 6
sizeof: tagged-value
sizeof: type
sizeof: location
cn0: (((full integer-address) (deref)) <- ((add)) ((full integer-address) (deref)) ((1 literal))) ((chan 1) (circular-buffer 2) (empty 2) (first-free 1) (first-full 0) (free-address 3) (full 4) (q 5) (result 6)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((full integer-address) (deref))
maybe-add: ((1 literal))
cn0: checking ((full integer-address) (deref))
maybe-add: ((full integer-address) (deref))
cn0: (((qlen integer)) <- ((length)) ((q tagged-value-array-address) (deref))) ((chan 1) (circular-buffer 2) (empty 2) (first-free 1) (first-full 0) (free-address 3) (full 4) (q 5) (result 6)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((q tagged-value-array-address) (deref))
cn0: checking ((qlen integer))
maybe-add: ((qlen integer))
cn0: location for arg ((qlen integer)): 8
sizeof: integer
cn0: (((remaining? boolean)) <- ((less-than)) ((full integer-address) (deref)) ((qlen integer))) ((chan 1) (circular-buffer 2) (empty 2) (first-free 1) (first-full 0) (free-address 3) (full 4) (q 5) (qlen 8) (result 6)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((full integer-address) (deref))
maybe-add: ((qlen integer))
cn0: checking ((remaining? boolean))
maybe-add: ((remaining? boolean))
cn0: location for arg ((remaining? boolean)): 9
sizeof: boolean
cn0: (((jump-if)) ((remaining? boolean)) ((1 offset))) ((chan 1) (circular-buffer 2) (empty 2) (first-free 1) (first-full 0) (free-address 3) (full 4) (q 5) (qlen 8) (remaining? 9) (result 6)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((remaining? boolean))
maybe-add: ((1 offset))
cn0: (((full integer-address) (deref)) <- ((copy)) ((0 literal))) ((chan 1) (circular-buffer 2) (empty 2) (first-free 1) (first-full 0) (free-address 3) (full 4) (q 5) (qlen 8) (remaining? 9) (result 6)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((0 literal))
cn0: checking ((full integer-address) (deref))
maybe-add: ((full integer-address) (deref))
cn0: (((reply)) ((result tagged-value)) ((chan channel-address) (deref))) ((chan 1) (circular-buffer 2) (empty 2) (first-free 1) (first-full 0) (free-address 3) (full 4) (q 5) (qlen 8) (remaining? 9) (result 6)) ((circular-buffer t) (first-free t) (first-full t))
maybe-add: ((result tagged-value))
maybe-add: ((chan channel-address) (deref))
cn1: update names ((chan 1) (circular-buffer 2) (empty 2) (first-free 1) (first-full 0) (free-address 3) (full 4) (q 5) (qlen 8) (remaining? 9) (result 6)) ((circular-buffer t) (first-free t) (first-full t))
c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) -- nil
c{0: 1 (((chan channel)) <- ((next-input))) -- nil
c{0: 2 (((full integer)) <- ((get)) ((chan channel)) ((first-full offset))) -- nil
c{0: 3 (((free integer)) <- ((get)) ((chan channel)) ((first-free offset))) -- nil
c{0: 4 (((result boolean)) <- ((equal)) ((full integer)) ((free integer))) -- nil
c{0: 5 (((reply)) ((result boolean))) -- nil
c{1: 0 new (((default-scope scope-address)))
c{1: 1 next-input (((chan channel)))
c{1: 2 get (((full integer)))
c{1: 3 get (((free integer)))
c{1: 4 equal (((result boolean)))
c{1: 5 reply nil
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((30 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((chan channel)) <- ((next-input))) nil nil
cn0: checking ((chan channel))
maybe-add: ((chan channel))
cn0: location for arg ((chan channel)): 1
sizeof: channel
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
cn0: (((full integer)) <- ((get)) ((chan channel)) ((first-full offset))) ((chan 1)) nil
cn0: field-access first-full
cn0: new field; computing location
cn0: field location 0
cn0: checking ((full integer))
maybe-add: ((full integer))
cn0: location for arg ((full integer)): 4
sizeof: integer
cn0: (((free integer)) <- ((get)) ((chan channel)) ((first-free offset))) ((chan 1) (first-full 0) (full 4)) ((first-full t))
cn0: field-access first-free
cn0: new field; computing location
cn0: field location 1
cn0: checking ((free integer))
maybe-add: ((free integer))
cn0: location for arg ((free integer)): 5
sizeof: integer
cn0: (((result boolean)) <- ((equal)) ((full integer)) ((free integer))) ((chan 1) (first-free 1) (first-full 0) (free 5) (full 4)) ((first-free t) (first-full t))
maybe-add: ((full integer))
maybe-add: ((free integer))
cn0: checking ((result boolean))
maybe-add: ((result boolean))
cn0: location for arg ((result boolean)): 6
sizeof: boolean
cn0: (((reply)) ((result boolean))) ((chan 1) (first-free 1) (first-full 0) (free 5) (full 4) (result 6)) ((first-free t) (first-full t))
maybe-add: ((result boolean))
cn1: update names ((chan 1) (first-free 1) (first-full 0) (free 5) (full 4) (result 6)) ((first-free t) (first-full t))
c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) -- nil
c{0: 1 (((chan channel)) <- ((next-input))) -- nil
c{0: 2 (((curr integer)) <- ((get)) ((chan channel)) ((first-free offset))) -- nil
c{0: 3 (((curr integer)) <- ((add)) ((curr integer)) ((1 literal))) -- nil
c{0: 4 (((qlen integer)) <- ((capacity)) ((chan channel))) -- ((open 4))
c{0: 5 (((remaining? boolean)) <- ((less-than)) ((curr integer)) ((qlen integer))) -- ((open 4))
c{0: 6 (((break-if)) ((remaining? boolean))) -- ((open 4))
c{0: 7 (((curr integer)) <- ((copy)) ((0 literal))) -- ((open 4))
c{0: 8 (((full integer)) <- ((get)) ((chan channel)) ((first-full offset))) -- ((close 8) (open 4))
c{0: 9 (((result boolean)) <- ((equal)) ((full integer)) ((curr integer))) -- ((close 8) (open 4))
c{0: 10 (((reply)) ((result boolean))) -- ((close 8) (open 4))
c{1: 0 new (((default-scope scope-address)))
c{1: 1 next-input (((chan channel)))
c{1: 2 get (((curr integer)))
c{1: 3 add (((curr integer)))
c{1: 4 capacity (((qlen integer)))
c{1: 5 less-than (((remaining? boolean)))
c{1: 6 break-if nil
c{1: 7 copy (((curr integer)))
c{1: 8 get (((full integer)))
c{1: 9 equal (((result boolean)))
c{1: 10 reply nil
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((30 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((chan channel)) <- ((next-input))) nil nil
cn0: checking ((chan channel))
maybe-add: ((chan channel))
cn0: location for arg ((chan channel)): 1
sizeof: channel
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
cn0: (((curr integer)) <- ((get)) ((chan channel)) ((first-free offset))) ((chan 1)) nil
cn0: field-access first-free
cn0: new field; computing location
cn0: field location 1
cn0: checking ((curr integer))
maybe-add: ((curr integer))
cn0: location for arg ((curr integer)): 4
sizeof: integer
cn0: (((curr integer)) <- ((add)) ((curr integer)) ((1 literal))) ((chan 1) (curr 4) (first-free 1)) ((first-free t))
maybe-add: ((curr integer))
maybe-add: ((1 literal))
cn0: checking ((curr integer))
maybe-add: ((curr integer))
cn0: (((qlen integer)) <- ((capacity)) ((chan channel))) ((chan 1) (curr 4) (first-free 1)) ((first-free t))
maybe-add: ((chan channel))
cn0: checking ((qlen integer))
maybe-add: ((qlen integer))
cn0: location for arg ((qlen integer)): 5
sizeof: integer
cn0: (((remaining? boolean)) <- ((less-than)) ((curr integer)) ((qlen integer))) ((chan 1) (curr 4) (first-free 1) (qlen 5)) ((first-free t))
maybe-add: ((curr integer))
maybe-add: ((qlen integer))
cn0: checking ((remaining? boolean))
maybe-add: ((remaining? boolean))
cn0: location for arg ((remaining? boolean)): 6
sizeof: boolean
cn0: (((jump-if)) ((remaining? boolean)) ((1 offset))) ((chan 1) (curr 4) (first-free 1) (qlen 5) (remaining? 6)) ((first-free t))
maybe-add: ((remaining? boolean))
maybe-add: ((1 offset))
cn0: (((curr integer)) <- ((copy)) ((0 literal))) ((chan 1) (curr 4) (first-free 1) (qlen 5) (remaining? 6)) ((first-free t))
maybe-add: ((0 literal))
cn0: checking ((curr integer))
maybe-add: ((curr integer))
cn0: (((full integer)) <- ((get)) ((chan channel)) ((first-full offset))) ((chan 1) (curr 4) (first-free 1) (qlen 5) (remaining? 6)) ((first-free t))
cn0: field-access first-full
cn0: new field; computing location
cn0: field location 0
cn0: checking ((full integer))
maybe-add: ((full integer))
cn0: location for arg ((full integer)): 7
sizeof: integer
cn0: (((result boolean)) <- ((equal)) ((full integer)) ((curr integer))) ((chan 1) (curr 4) (first-free 1) (first-full 0) (full 7) (qlen 5) (remaining? 6)) ((first-free t) (first-full t))
maybe-add: ((full integer))
maybe-add: ((curr integer))
cn0: checking ((result boolean))
maybe-add: ((result boolean))
cn0: location for arg ((result boolean)): 8
sizeof: boolean
cn0: (((reply)) ((result boolean))) ((chan 1) (curr 4) (first-free 1) (first-full 0) (full 7) (qlen 5) (remaining? 6) (result 8)) ((first-free t) (first-full t))
maybe-add: ((result boolean))
cn1: update names ((chan 1) (curr 4) (first-free 1) (first-full 0) (full 7) (qlen 5) (remaining? 6) (result 8)) ((first-free t) (first-full t))
c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) -- nil
c{0: 1 (((a string-address)) <- ((next-input))) -- nil
c{0: 2 (((a-len integer)) <- ((length)) ((a string-address) (deref))) -- nil
c{0: 3 (((b string-address)) <- ((next-input))) -- nil
c{0: 4 (((b-len integer)) <- ((length)) ((b string-address) (deref))) -- nil
c{0: 5 (((result-len integer)) <- ((add)) ((a-len integer)) ((b-len integer))) -- nil
c{0: 6 (((result string-address)) <- ((new)) ((string literal)) ((result-len integer))) -- nil
c{0: 7 (((result-idx integer)) <- ((copy)) ((0 literal))) -- nil
c{0: 8 (((i integer)) <- ((copy)) ((0 literal))) -- nil
c{0: 9 (((a-done? boolean)) <- ((less-than)) ((i integer)) ((a-len integer))) -- ((open 9))
c{0: 10 (((break-unless)) ((a-done? boolean))) -- ((open 9))
c{0: 11 (((out byte-address)) <- ((index-address)) ((result string-address) (deref)) ((result-idx integer))) -- ((open 9))
c{0: 12 (((in byte)) <- ((index)) ((a string-address) (deref)) ((i integer))) -- ((open 9))
c{0: 13 (((out byte-address) (deref)) <- ((copy)) ((in byte))) -- ((open 9))
c{0: 14 (((i integer)) <- ((add)) ((i integer)) ((1 literal))) -- ((open 9))
c{0: 15 (((result-idx integer)) <- ((add)) ((result-idx integer)) ((1 literal))) -- ((open 9))
c{0: 16 (((loop))) -- ((open 9))
c{0: 17 (((i integer)) <- ((copy)) ((0 literal))) -- ((close 17) (open 9))
c{0: 18 (((b-done? boolean)) <- ((less-than)) ((i integer)) ((b-len integer))) -- ((open 18) (close 17) (open 9))
c{0: 19 (((break-unless)) ((b-done? boolean))) -- ((open 18) (close 17) (open 9))
c{0: 20 (((out byte-address)) <- ((index-address)) ((result string-address) (deref)) ((result-idx integer))) -- ((open 18) (close 17) (open 9))
c{0: 21 (((in byte)) <- ((index)) ((b string-address) (deref)) ((i integer))) -- ((open 18) (close 17) (open 9))
c{0: 22 (((out byte-address) (deref)) <- ((copy)) ((in byte))) -- ((open 18) (close 17) (open 9))
c{0: 23 (((i integer)) <- ((add)) ((i integer)) ((1 literal))) -- ((open 18) (close 17) (open 9))
c{0: 24 (((result-idx integer)) <- ((add)) ((result-idx integer)) ((1 literal))) -- ((open 18) (close 17) (open 9))
c{0: 25 (((loop))) -- ((open 18) (close 17) (open 9))
c{0: 26 (((reply)) ((result string-address))) -- ((close 26) (open 18) (close 17) (open 9))
c{1: 0 new (((default-scope scope-address)))
c{1: 1 next-input (((a string-address)))
c{1: 2 length (((a-len integer)))
c{1: 3 next-input (((b string-address)))
c{1: 4 length (((b-len integer)))
c{1: 5 add (((result-len integer)))
c{1: 6 new (((result string-address)))
c{1: 7 copy (((result-idx integer)))
c{1: 8 copy (((i integer)))
c{1: 9 less-than (((a-done? boolean)))
c{1: 10 break-unless nil
c{1: 11 index-address (((out byte-address)))
c{1: 12 index (((in byte)))
c{1: 13 copy (((out byte-address) (deref)))
c{1: 14 add (((i integer)))
c{1: 15 add (((result-idx integer)))
c{1: 16 loop nil
c{1: 17 copy (((i integer)))
c{1: 18 less-than (((b-done? boolean)))
c{1: 19 break-unless nil
c{1: 20 index-address (((out byte-address)))
c{1: 21 index (((in byte)))
c{1: 22 copy (((out byte-address) (deref)))
c{1: 23 add (((i integer)))
c{1: 24 add (((result-idx integer)))
c{1: 25 loop nil
c{1: 26 reply nil
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((30 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((a string-address)) <- ((next-input))) nil nil
cn0: checking ((a string-address))
maybe-add: ((a string-address))
cn0: location for arg ((a string-address)): 1
sizeof: string-address
cn0: (((a-len integer)) <- ((length)) ((a string-address) (deref))) ((a 1)) nil
maybe-add: ((a string-address) (deref))
cn0: checking ((a-len integer))
maybe-add: ((a-len integer))
cn0: location for arg ((a-len integer)): 2
sizeof: integer
cn0: (((b string-address)) <- ((next-input))) ((a 1) (a-len 2)) nil
cn0: checking ((b string-address))
maybe-add: ((b string-address))
cn0: location for arg ((b string-address)): 3
sizeof: string-address
cn0: (((b-len integer)) <- ((length)) ((b string-address) (deref))) ((a 1) (a-len 2) (b 3)) nil
maybe-add: ((b string-address) (deref))
cn0: checking ((b-len integer))
maybe-add: ((b-len integer))
cn0: location for arg ((b-len integer)): 4
sizeof: integer
cn0: (((result-len integer)) <- ((add)) ((a-len integer)) ((b-len integer))) ((a 1) (a-len 2) (b 3) (b-len 4)) nil
maybe-add: ((a-len integer))
maybe-add: ((b-len integer))
cn0: checking ((result-len integer))
maybe-add: ((result-len integer))
cn0: location for arg ((result-len integer)): 5
sizeof: integer
cn0: (((result string-address)) <- ((new)) ((string literal)) ((result-len integer))) ((a 1) (a-len 2) (b 3) (b-len 4) (result-len 5)) nil
maybe-add: ((string literal))
maybe-add: ((result-len integer))
cn0: checking ((result string-address))
maybe-add: ((result string-address))
cn0: location for arg ((result string-address)): 6
sizeof: string-address
cn0: (((result-idx integer)) <- ((copy)) ((0 literal))) ((a 1) (a-len 2) (b 3) (b-len 4) (result 6) (result-len 5)) nil
maybe-add: ((0 literal))
cn0: checking ((result-idx integer))
maybe-add: ((result-idx integer))
cn0: location for arg ((result-idx integer)): 7
sizeof: integer
cn0: (((i integer)) <- ((copy)) ((0 literal))) ((a 1) (a-len 2) (b 3) (b-len 4) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((0 literal))
cn0: checking ((i integer))
maybe-add: ((i integer))
cn0: location for arg ((i integer)): 8
sizeof: integer
cn0: (((a-done? boolean)) <- ((less-than)) ((i integer)) ((a-len integer))) ((a 1) (a-len 2) (b 3) (b-len 4) (i 8) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((i integer))
maybe-add: ((a-len integer))
cn0: checking ((a-done? boolean))
maybe-add: ((a-done? boolean))
cn0: location for arg ((a-done? boolean)): 9
sizeof: boolean
cn0: (((jump-unless)) ((a-done? boolean)) ((6 offset))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-len 4) (i 8) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((a-done? boolean))
maybe-add: ((6 offset))
cn0: (((out byte-address)) <- ((index-address)) ((result string-address) (deref)) ((result-idx integer))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-len 4) (i 8) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((result string-address) (deref))
maybe-add: ((result-idx integer))
cn0: checking ((out byte-address))
maybe-add: ((out byte-address))
cn0: location for arg ((out byte-address)): 10
sizeof: byte-address
cn0: (((in byte)) <- ((index)) ((a string-address) (deref)) ((i integer))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-len 4) (i 8) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((a string-address) (deref))
maybe-add: ((i integer))
cn0: checking ((in byte))
maybe-add: ((in byte))
cn0: location for arg ((in byte)): 11
sizeof: byte
cn0: (((out byte-address) (deref)) <- ((copy)) ((in byte))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((in byte))
cn0: checking ((out byte-address) (deref))
maybe-add: ((out byte-address) (deref))
cn0: (((i integer)) <- ((add)) ((i integer)) ((1 literal))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((i integer))
maybe-add: ((1 literal))
cn0: checking ((i integer))
maybe-add: ((i integer))
cn0: (((result-idx integer)) <- ((add)) ((result-idx integer)) ((1 literal))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((result-idx integer))
maybe-add: ((1 literal))
cn0: checking ((result-idx integer))
maybe-add: ((result-idx integer))
cn0: (((jump)) ((-8 offset))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((-8 offset))
cn0: (((i integer)) <- ((copy)) ((0 literal))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((0 literal))
cn0: checking ((i integer))
maybe-add: ((i integer))
cn0: (((b-done? boolean)) <- ((less-than)) ((i integer)) ((b-len integer))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((i integer))
maybe-add: ((b-len integer))
cn0: checking ((b-done? boolean))
maybe-add: ((b-done? boolean))
cn0: location for arg ((b-done? boolean)): 12
sizeof: boolean
cn0: (((jump-unless)) ((b-done? boolean)) ((6 offset))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-done? 12) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((b-done? boolean))
maybe-add: ((6 offset))
cn0: (((out byte-address)) <- ((index-address)) ((result string-address) (deref)) ((result-idx integer))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-done? 12) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((result string-address) (deref))
maybe-add: ((result-idx integer))
cn0: checking ((out byte-address))
maybe-add: ((out byte-address))
cn0: (((in byte)) <- ((index)) ((b string-address) (deref)) ((i integer))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-done? 12) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((b string-address) (deref))
maybe-add: ((i integer))
cn0: checking ((in byte))
maybe-add: ((in byte))
cn0: (((out byte-address) (deref)) <- ((copy)) ((in byte))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-done? 12) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((in byte))
cn0: checking ((out byte-address) (deref))
maybe-add: ((out byte-address) (deref))
cn0: (((i integer)) <- ((add)) ((i integer)) ((1 literal))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-done? 12) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((i integer))
maybe-add: ((1 literal))
cn0: checking ((i integer))
maybe-add: ((i integer))
cn0: (((result-idx integer)) <- ((add)) ((result-idx integer)) ((1 literal))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-done? 12) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((result-idx integer))
maybe-add: ((1 literal))
cn0: checking ((result-idx integer))
maybe-add: ((result-idx integer))
cn0: (((jump)) ((-8 offset))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-done? 12) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((-8 offset))
cn0: (((reply)) ((result string-address))) ((a 1) (a-done? 9) (a-len 2) (b 3) (b-done? 12) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
maybe-add: ((result string-address))
cn1: update names ((a 1) (a-done? 9) (a-len 2) (b 3) (b-done? 12) (b-len 4) (i 8) (in 11) (out 10) (result 6) (result-idx 7) (result-len 5)) nil
c{0: 0 (((default-scope scope-address)) <- ((new)) ((scope literal)) ((60 literal))) -- nil
c{0: 1 (((template string-address)) <- ((next-input))) -- nil
c{0: 2 (((tem-len integer)) <- ((length)) ((template string-address) (deref))) -- nil
c{0: 3 (((result-len integer)) <- ((copy)) ((tem-len integer))) -- nil
c{0: 4 (((a string-address)) ((arg-received? boolean)) <- ((next-input))) -- ((open 4))
c{0: 5 (((break-unless)) ((arg-received? boolean))) -- ((open 4))
c{0: 6 (((a-len integer)) <- ((length)) ((a string-address) (deref))) -- ((open 4))
c{0: 7 (((result-len integer)) <- ((add)) ((result-len integer)) ((a-len integer))) -- ((open 4))
c{0: 8 (((result-len integer)) <- ((subtract)) ((result-len integer)) ((1 literal))) -- ((open 4))
c{0: 9 (((loop))) -- ((open 4))
c{0: 10 (_ <- ((input)) ((0 literal))) -- ((close 10) (open 4))
c{0: 11 (((result string-address)) <- ((new)) ((string literal)) ((result-len integer))) -- ((close 10) (open 4))
c{0: 12 (((result-idx integer)) <- ((copy)) ((0 literal))) -- ((close 10) (open 4))
c{0: 13 (((i integer)) <- ((copy)) ((0 literal))) -- ((close 10) (open 4))
c{0: 14 (((a string-address)) ((arg-received? boolean)) <- ((next-input))) -- ((open 14) (close 10) (open 4))
c{0: 15 (((break-unless)) ((arg-received? boolean))) -- ((open 14) (close 10) (open 4))
c{0: 16 (((tem-done? boolean)) <- ((less-than)) ((i integer)) ((tem-len integer))) -- ((open 16) (open 14) (close 10) (open 4))
c{0: 17 (((break-unless)) ((tem-done? boolean)) ((2 blocks))) -- ((open 16) (open 14) (close 10) (open 4))
c{0: 18 (((in byte)) <- ((index)) ((template string-address) (deref)) ((i integer))) -- ((open 16) (open 14) (close 10) (open 4))
c{0: 19 (((underscore? boolean)) <- ((equal)) ((in byte)) ((_ literal))) -- ((open 16) (open 14) (close 10) (open 4))
c{0: 20 (((break-if)) ((underscore? boolean))) -- ((open 16) (open 14) (close 10) (open 4))
c{0: 21 (((out byte-address)) <- ((index-address)) ((result string-address) (deref)) ((result-idx integer))) -- ((open 16) (open 14) (close 10) (open 4))
c{0: 22 (((out byte-address) (deref)) <- ((copy)) ((in byte))) -- ((open 16) (open 14) (close 10) (open 4))
c{0: 23 (((i integer)) <- ((add)) ((i integer)) ((1 literal))) -- ((open 16) (open 14) (close 10) (open 4))
c{0: 24 (((result-idx integer)) <- ((add)) ((result-idx integer)) ((1 literal))) -- ((open 16) (open 14) (close 10) (open 4))
c{0: 25 (((loop))) -- ((open 16) (open 14) (close 10) (open 4))
c{0: 26 (((j integer)) <- ((copy)) ((0 literal))) -- ((close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 27 (((arg-done? boolean)) <- ((less-than)) ((j integer)) ((a-len integer))) -- ((open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 28 (((break-unless)) ((arg-done? boolean))) -- ((open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 29 (((in byte)) <- ((index)) ((a string-address) (deref)) ((j integer))) -- ((open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 30 (((out byte-address)) <- ((index-address)) ((result string-address) (deref)) ((result-idx integer))) -- ((open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 31 (((out byte-address) (deref)) <- ((copy)) ((in byte))) -- ((open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 32 (((j integer)) <- ((add)) ((j integer)) ((1 literal))) -- ((open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 33 (((result-idx integer)) <- ((add)) ((result-idx integer)) ((1 literal))) -- ((open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 34 (((loop))) -- ((open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 35 (((i integer)) <- ((add)) ((i integer)) ((1 literal))) -- ((close 35) (open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 36 (((loop))) -- ((close 35) (open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 37 (((tem-done? boolean)) <- ((less-than)) ((i integer)) ((tem-len integer))) -- ((open 37) (close 37) (close 35) (open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 38 (((break-unless)) ((tem-done? boolean))) -- ((open 37) (close 37) (close 35) (open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 39 (((in byte)) <- ((index)) ((template string-address) (deref)) ((i integer))) -- ((open 37) (close 37) (close 35) (open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 40 (((out byte-address)) <- ((index-address)) ((result string-address) (deref)) ((result-idx integer))) -- ((open 37) (close 37) (close 35) (open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 41 (((out byte-address) (deref)) <- ((copy)) ((in byte))) -- ((open 37) (close 37) (close 35) (open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 42 (((i integer)) <- ((add)) ((i integer)) ((1 literal))) -- ((open 37) (close 37) (close 35) (open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 43 (((result-idx integer)) <- ((add)) ((result-idx integer)) ((1 literal))) -- ((open 37) (close 37) (close 35) (open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 44 (((loop))) -- ((open 37) (close 37) (close 35) (open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{0: 45 (((reply)) ((result string-address))) -- ((close 45) (open 37) (close 37) (close 35) (open 27) (close 26) (open 16) (open 14) (close 10) (open 4))
c{1: 0 new (((default-scope scope-address)))
c{1: 1 next-input (((template string-address)))
c{1: 2 length (((tem-len integer)))
c{1: 3 copy (((result-len integer)))
c{1: 4 next-input (((a string-address)) ((arg-received? boolean)))
c{1: 5 break-unless nil
c{1: 6 length (((a-len integer)))
c{1: 7 add (((result-len integer)))
c{1: 8 subtract (((result-len integer)))
c{1: 9 loop nil
c{1: 10 input (_)
c{1: 11 new (((result string-address)))
c{1: 12 copy (((result-idx integer)))
c{1: 13 copy (((i integer)))
c{1: 14 next-input (((a string-address)) ((arg-received? boolean)))
c{1: 15 break-unless nil
c{1: 16 less-than (((tem-done? boolean)))
c{1: 17 break-unless nil
c{1: 18 index (((in byte)))
c{1: 19 equal (((underscore? boolean)))
c{1: 20 break-if nil
c{1: 21 index-address (((out byte-address)))
c{1: 22 copy (((out byte-address) (deref)))
c{1: 23 add (((i integer)))
c{1: 24 add (((result-idx integer)))
c{1: 25 loop nil
c{1: 26 copy (((j integer)))
c{1: 27 less-than (((arg-done? boolean)))
c{1: 28 break-unless nil
c{1: 29 index (((in byte)))
c{1: 30 index-address (((out byte-address)))
c{1: 31 copy (((out byte-address) (deref)))
c{1: 32 add (((j integer)))
c{1: 33 add (((result-idx integer)))
c{1: 34 loop nil
c{1: 35 add (((i integer)))
c{1: 36 loop nil
c{1: 37 less-than (((tem-done? boolean)))
c{1: 38 break-unless nil
c{1: 39 index (((in byte)))
c{1: 40 index-address (((out byte-address)))
c{1: 41 copy (((out byte-address) (deref)))
c{1: 42 add (((i integer)))
c{1: 43 add (((result-idx integer)))
c{1: 44 loop nil
c{1: 45 reply nil
cn0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((60 literal))) nil nil
maybe-add: ((scope literal))
maybe-add: ((60 literal))
cn0: checking ((default-scope scope-address))
maybe-add: ((default-scope scope-address))
cn0: (((template string-address)) <- ((next-input))) nil nil
cn0: checking ((template string-address))
maybe-add: ((template string-address))
cn0: location for arg ((template string-address)): 1
sizeof: string-address
cn0: (((tem-len integer)) <- ((length)) ((template string-address) (deref))) ((template 1)) nil
maybe-add: ((template string-address) (deref))
cn0: checking ((tem-len integer))
maybe-add: ((tem-len integer))
cn0: location for arg ((tem-len integer)): 2
sizeof: integer
cn0: (((result-len integer)) <- ((copy)) ((tem-len integer))) ((tem-len 2) (template 1)) nil
maybe-add: ((tem-len integer))
cn0: checking ((result-len integer))
maybe-add: ((result-len integer))
cn0: location for arg ((result-len integer)): 3
sizeof: integer
cn0: (((a string-address)) ((arg-received? boolean)) <- ((next-input))) ((result-len 3) (tem-len 2) (template 1)) nil
cn0: checking ((a string-address))
maybe-add: ((a string-address))
cn0: location for arg ((a string-address)): 4
sizeof: string-address
cn0: checking ((arg-received? boolean))
maybe-add: ((arg-received? boolean))
cn0: location for arg ((arg-received? boolean)): 5
sizeof: boolean
cn0: (((jump-unless)) ((arg-received? boolean)) ((4 offset))) ((a 4) (arg-received? 5) (result-len 3) (tem-len 2) (template 1)) nil
maybe-add: ((arg-received? boolean))
maybe-add: ((4 offset))
cn0: (((a-len integer)) <- ((length)) ((a string-address) (deref))) ((a 4) (arg-received? 5) (result-len 3) (tem-len 2) (template 1)) nil
maybe-add: ((a string-address) (deref))
cn0: checking ((a-len integer))
maybe-add: ((a-len integer))
cn0: location for arg ((a-len integer)): 6
sizeof: integer
cn0: (((result-len integer)) <- ((add)) ((result-len integer)) ((a-len integer))) ((a 4) (a-len 6) (arg-received? 5) (result-len 3) (tem-len 2) (template 1)) nil
maybe-add: ((result-len integer))
maybe-add: ((a-len integer))
cn0: checking ((result-len integer))
maybe-add: ((result-len integer))
cn0: (((result-len integer)) <- ((subtract)) ((result-len integer)) ((1 literal))) ((a 4) (a-len 6) (arg-received? 5) (result-len 3) (tem-len 2) (template 1)) nil
maybe-add: ((result-len integer))
maybe-add: ((1 literal))
cn0: checking ((result-len integer))
maybe-add: ((result-len integer))
cn0: (((jump)) ((-6 offset))) ((a 4) (a-len 6) (arg-received? 5) (result-len 3) (tem-len 2) (template 1)) nil
maybe-add: ((-6 offset))
cn0: (_ <- ((input)) ((0 literal))) ((a 4) (a-len 6) (arg-received? 5) (result-len 3) (tem-len 2) (template 1)) nil
maybe-add: ((0 literal))
cn0: checking _
cn0: (((result string-address)) <- ((new)) ((string literal)) ((result-len integer))) ((a 4) (a-len 6) (arg-received? 5) (result-len 3) (tem-len 2) (template 1)) nil
maybe-add: ((string literal))
maybe-add: ((result-len integer))
cn0: checking ((result string-address))
maybe-add: ((result string-address))
cn0: location for arg ((result string-address)): 7
sizeof: string-address
cn0: (((result-idx integer)) <- ((copy)) ((0 literal))) ((a 4) (a-len 6) (arg-received? 5) (result 7) (result-len 3) (tem-len 2) (template 1)) nil
maybe-add: ((0 literal))
cn0: checking ((result-idx integer))
maybe-add: ((result-idx integer))
cn0: location for arg ((result-idx integer)): 8
sizeof: integer
cn0: (((i integer)) <- ((copy)) ((0 literal))) ((a 4) (a-len 6) (arg-received? 5) (result 7) (result-idx 8) (result-len 3) (tem-len 2) (template 1)) nil
maybe-add: ((0 literal))
cn0: checking ((i integer))
maybe-add: ((i integer))
cn0: location for arg ((i integer)): 9
sizeof: integer
cn0: (((a string-address)) ((arg-received? boolean)) <- ((next-input))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (result 7) (result-idx 8) (result-len 3) (tem-len 2) (template 1)) nil
cn0: checking ((a string-address))
maybe-add: ((a string-address))
cn0: checking ((arg-received? boolean))
maybe-add: ((arg-received? boolean))
cn0: (((jump-unless)) ((arg-received? boolean)) ((21 offset))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (result 7) (result-idx 8) (result-len 3) (tem-len 2) (template 1)) nil
maybe-add: ((arg-received? boolean))
maybe-add: ((21 offset))
cn0: (((tem-done? boolean)) <- ((less-than)) ((i integer)) ((tem-len integer))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (result 7) (result-idx 8) (result-len 3) (tem-len 2) (template 1)) nil
maybe-add: ((i integer))
maybe-add: ((tem-len integer))
cn0: checking ((tem-done? boolean))
maybe-add: ((tem-done? boolean))
cn0: location for arg ((tem-done? boolean)): 10
sizeof: boolean
cn0: (((jump-unless)) ((tem-done? boolean)) ((19 offset))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1)) nil
maybe-add: ((tem-done? boolean))
maybe-add: ((19 offset))
cn0: (((in byte)) <- ((index)) ((template string-address) (deref)) ((i integer))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1)) nil
maybe-add: ((template string-address) (deref))
maybe-add: ((i integer))
cn0: checking ((in byte))
maybe-add: ((in byte))
cn0: location for arg ((in byte)): 11
sizeof: byte
cn0: (((underscore? boolean)) <- ((equal)) ((in byte)) ((_ literal))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (in 11) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1)) nil
maybe-add: ((in byte))
maybe-add: ((_ literal))
cn0: checking ((underscore? boolean))
maybe-add: ((underscore? boolean))
cn0: location for arg ((underscore? boolean)): 12
sizeof: boolean
cn0: (((jump-if)) ((underscore? boolean)) ((5 offset))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (in 11) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((underscore? boolean))
maybe-add: ((5 offset))
cn0: (((out byte-address)) <- ((index-address)) ((result string-address) (deref)) ((result-idx integer))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (in 11) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((result string-address) (deref))
maybe-add: ((result-idx integer))
cn0: checking ((out byte-address))
maybe-add: ((out byte-address))
cn0: location for arg ((out byte-address)): 13
sizeof: byte-address
cn0: (((out byte-address) (deref)) <- ((copy)) ((in byte))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (in 11) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((in byte))
cn0: checking ((out byte-address) (deref))
maybe-add: ((out byte-address) (deref))
cn0: (((i integer)) <- ((add)) ((i integer)) ((1 literal))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (in 11) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((i integer))
maybe-add: ((1 literal))
cn0: checking ((i integer))
maybe-add: ((i integer))
cn0: (((result-idx integer)) <- ((add)) ((result-idx integer)) ((1 literal))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (in 11) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((result-idx integer))
maybe-add: ((1 literal))
cn0: checking ((result-idx integer))
maybe-add: ((result-idx integer))
cn0: (((jump)) ((-10 offset))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (in 11) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((-10 offset))
cn0: (((j integer)) <- ((copy)) ((0 literal))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (in 11) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((0 literal))
cn0: checking ((j integer))
maybe-add: ((j integer))
cn0: location for arg ((j integer)): 14
sizeof: integer
cn0: (((arg-done? boolean)) <- ((less-than)) ((j integer)) ((a-len integer))) ((a 4) (a-len 6) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((j integer))
maybe-add: ((a-len integer))
cn0: checking ((arg-done? boolean))
maybe-add: ((arg-done? boolean))
cn0: location for arg ((arg-done? boolean)): 15
sizeof: boolean
cn0: (((jump-unless)) ((arg-done? boolean)) ((6 offset))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((arg-done? boolean))
maybe-add: ((6 offset))
cn0: (((in byte)) <- ((index)) ((a string-address) (deref)) ((j integer))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((a string-address) (deref))
maybe-add: ((j integer))
cn0: checking ((in byte))
maybe-add: ((in byte))
cn0: (((out byte-address)) <- ((index-address)) ((result string-address) (deref)) ((result-idx integer))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((result string-address) (deref))
maybe-add: ((result-idx integer))
cn0: checking ((out byte-address))
maybe-add: ((out byte-address))
cn0: (((out byte-address) (deref)) <- ((copy)) ((in byte))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((in byte))
cn0: checking ((out byte-address) (deref))
maybe-add: ((out byte-address) (deref))
cn0: (((j integer)) <- ((add)) ((j integer)) ((1 literal))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((j integer))
maybe-add: ((1 literal))
cn0: checking ((j integer))
maybe-add: ((j integer))
cn0: (((result-idx integer)) <- ((add)) ((result-idx integer)) ((1 literal))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((result-idx integer))
maybe-add: ((1 literal))
cn0: checking ((result-idx integer))
maybe-add: ((result-idx integer))
cn0: (((jump)) ((-8 offset))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((-8 offset))
cn0: (((i integer)) <- ((add)) ((i integer)) ((1 literal))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((i integer))
maybe-add: ((1 literal))
cn0: checking ((i integer))
maybe-add: ((i integer))
cn0: (((jump)) ((-23 offset))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((-23 offset))
cn0: (((tem-done? boolean)) <- ((less-than)) ((i integer)) ((tem-len integer))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((i integer))
maybe-add: ((tem-len integer))
cn0: checking ((tem-done? boolean))
maybe-add: ((tem-done? boolean))
cn0: (((jump-unless)) ((tem-done? boolean)) ((6 offset))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((tem-done? boolean))
maybe-add: ((6 offset))
cn0: (((in byte)) <- ((index)) ((template string-address) (deref)) ((i integer))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((template string-address) (deref))
maybe-add: ((i integer))
cn0: checking ((in byte))
maybe-add: ((in byte))
cn0: (((out byte-address)) <- ((index-address)) ((result string-address) (deref)) ((result-idx integer))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((result string-address) (deref))
maybe-add: ((result-idx integer))
cn0: checking ((out byte-address))
maybe-add: ((out byte-address))
cn0: (((out byte-address) (deref)) <- ((copy)) ((in byte))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((in byte))
cn0: checking ((out byte-address) (deref))
maybe-add: ((out byte-address) (deref))
cn0: (((i integer)) <- ((add)) ((i integer)) ((1 literal))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((i integer))
maybe-add: ((1 literal))
cn0: checking ((i integer))
maybe-add: ((i integer))
cn0: (((result-idx integer)) <- ((add)) ((result-idx integer)) ((1 literal))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((result-idx integer))
maybe-add: ((1 literal))
cn0: checking ((result-idx integer))
maybe-add: ((result-idx integer))
cn0: (((jump)) ((-8 offset))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((-8 offset))
cn0: (((reply)) ((result string-address))) ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
maybe-add: ((result string-address))
cn1: update names ((a 4) (a-len 6) (arg-done? 15) (arg-received? 5) (i 9) (in 11) (j 14) (out 13) (result 7) (result-idx 8) (result-len 3) (tem-done? 10) (tem-len 2) (template 1) (underscore? 12)) nil
cn0: (((1 integer-address)) <- ((new)) foo) nil nil
cn0: checking ((1 integer-address))
maybe-add: ((1 integer-address))
cn1: update names nil nil
