9991 parse: --- defining scenario_match-at-empty-pattern-outside-bound
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:array:character <- new [abc]\n    2:address:shared:array:character <- new []\n    3:boolean <- match-at 1:address:shared:array:character, 2:address:shared:array:character, 4\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:shared:array:character <- new [abc]
    2:address:shared:array:character <- new []
    3:boolean <- match-at 1:address:shared:array:character, 2:address:shared:array:character, 4
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3 <- 0  # no match\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    3 <- 0  # no match
  ]
9999 parse: recipe scenario_match-at-empty-pattern-outside-bound has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_match-at-empty-pattern-outside-bound
9991 transform: --- deduce types for recipe scenario_match-at-empty-pattern-outside-bound
9991 transform: --- collect surrounding spaces for recipe scenario_match-at-empty-pattern-outside-bound
9991 transform: --- transform names for recipe scenario_match-at-empty-pattern-outside-bound
9991 transform: --- resolve ambiguous calls for recipe scenario_match-at-empty-pattern-outside-bound
9991 transform: --- compute instruction operations for recipe scenario_match-at-empty-pattern-outside-bound
9991 transform: --- transform braces for recipe scenario_match-at-empty-pattern-outside-bound
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_match-at-empty-pattern-outside-bound
9991 transform: --- type-check 'call' instructions inside recipe scenario_match-at-empty-pattern-outside-bound
9991 transform: --- type-check calls inside recipe scenario_match-at-empty-pattern-outside-bound
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_match-at-empty-pattern-outside-bound
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_match-at-empty-pattern-outside-bound
 102 run: run [
    1:address:shared:array:character <- new [abc]
    2:address:shared:array:character <- new []
    3:boolean <- match-at 1:address:shared:array:character, 2:address:shared:array:character, 4
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abc": "literal-string"}
9993 parse:   product: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 load: after rewriting: 1:address:shared:array:character <- new [abc]
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"": "literal-string"}
9993 parse:   product: {"2": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 load: after rewriting: 2:address:shared:array:character <- new []
9993 parse: instruction: match-at
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9993 parse:   ingredient: {"4": "literal"}
9993 parse:   product: {"3": "boolean"}
9992 load: after rewriting: 3:boolean <- match-at 1:address:shared:array:character, 2:address:shared:array:character, 4
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction 3:boolean <- match-at 1:address:shared:array:character, 2:address:shared:array:character, 4
9992 transform: checking variant (strict) 0: recipe match-at {"text": <"address" : <"shared" : <"array" : <"character" : <>>>>>} {"pattern": <"address" : <"shared" : <"array" : <"character" : <>>>>>} {"idx": "number"} -> {"result": "boolean"}
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new ...
9992 transform: new ...
9992 transform: match-at ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:array:character <- new [abc]
9999 mem: storing 1000 in location 1
9999 mem: incrementing refcount of 1000: 0 -> 1
 103 run: 2:address:shared:array:character <- new []
9999 mem: storing 1005 in location 2
9999 mem: incrementing refcount of 1005: 0 -> 1
 103 run: 3:boolean <- match-at 1:address:shared:array:character, 2:address:shared:array:character, 4
9999 mem: location 1 is 1000
9999 mem: location 2 is 1005
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 12
9999 mem: allocating size 14
9999 mem: new alloc: 1007
9999 mem: storing 12 in location 1008
 104 run: text:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1010
9999 mem: incrementing refcount of 1000: 1 -> 2
 104 run: pattern:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1005 in location 1011
9999 mem: incrementing refcount of 1005: 1 -> 2
 104 run: idx:number <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1012
 104 run: pattern-len:number <- length *pattern
9999 mem: location 1011 is 1005
9999 mem: skipping refcount at 1005
9999 mem: storing 0 in location 1013
 104 run: x:number <- length *text
9999 mem: location 1010 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 3 in location 1014
 104 run: x <- subtract x, pattern-len
9999 mem: location 1014 is 3
9999 mem: location 1013 is 0
9999 mem: storing 3 in location 1014
 104 run: enough-room?:boolean <- lesser-or-equal idx, x
9999 mem: location 1012 is 4
9999 mem: location 1014 is 3
9999 mem: storing 0 in location 1015
 104 run: jump-if enough-room?, 
9999 mem: location 1015 is 0
9998 run: jump-if fell through
 104 run: reply 0/not-found
9999 abandon: saving in free-list of size 14
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 3
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    3 <- 0  # no match
  ]
9999 run: checking location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
