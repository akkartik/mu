schedule: main
run: -- nil
run: 1 main 0: ((1 integer-address) <- copy (34 literal))
run: 34 => (1 integer-address)
setm: (1 integer-address) <= 34
sizeof: (1 integer-address)
setm: size of (1 integer-address) is 1
setm: (1 integer-address): setting 1 to 34
run: -- ((1 34))
run: 2 main 1: ((2 tagged-value-address) <- new-tagged-value (integer-address literal) (1 integer-address))
m: (1 integer-address)
sizeof: (1 integer-address)
run: -- ((1 34))
run: 3 new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1000 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1 34) (1000 30))
run: 4 new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer-address 34)
run: integer-address => (1 type)
setm: (1 type) <= integer-address
sizeof: (1 type)
setm: size of (1 type) is 1
setm: (1 type): setting 1001 to integer-address
run: -- ((1 34) (1000 30) (1001 integer-address))
run: 5 new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sizeof: (1 type)
sizeof: integer-address
run: 1 => (2 integer)
setm: (2 integer) <= 1
sizeof: (2 integer)
setm: size of (2 integer) is 1
setm: (2 integer): setting 1002 to 1
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1))
run: 6 new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sizeof: (2 integer)
run: t => (3 boolean)
setm: (3 boolean) <= t
sizeof: (3 boolean)
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 1003 to t
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t))
run: 7 new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sizeof: (3 boolean)
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t))
run: 8 new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1031 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1031
sizeof: (4 tagged-value-address)
setm: size of (4 tagged-value-address) is 1
setm: (4 tagged-value-address): setting 1004 to 1031
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031))
run: 9 new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
record-info: (4 tagged-value-address deref) (0 offset)
record-info: initial base 1031 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (0 offset) => 1031
run: 1031 => (5 location)
setm: (5 location) <= 1031
sizeof: (5 location)
setm: size of (5 location) is 1
setm: (5 location): setting 1005 to 1031
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031))
run: 10 new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sizeof: (1 type)
run: integer-address => (5 location deref)
setm: (5 location deref) <= integer-address
sizeof: (5 location deref)
sizeof: (nil location)
setm: size of (5 location deref) is 1
setm: (5 location deref): setting 1031 to integer-address
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1031 integer-address))
run: 11 new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
record-info: (4 tagged-value-address deref) (1 offset)
record-info: initial base 1031 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
sizeof: type
get-address: (4 tagged-value-address deref) (1 offset) => 1032
run: 1032 => (6 location)
setm: (6 location) <= 1032
sizeof: (6 location)
setm: size of (6 location) is 1
setm: (6 location): setting 1006 to 1032
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address))
run: 12 new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer-address 34)
run: 34 => (6 location deref)
setm: (6 location deref) <= 34
sizeof: (6 location deref)
sizeof: (nil location)
setm: size of (6 location deref) is 1
setm: (6 location deref): setting 1032 to 34
run: -- ((1 34) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34))
run: 13 new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sizeof: (4 tagged-value-address)
reply: ((4 tagged-value-address)) ((2 tagged-value-address))
reply: 1031 => (2 tagged-value-address)
setm: (2 tagged-value-address) <= 1031
sizeof: (2 tagged-value-address)
setm: size of (2 tagged-value-address) is 1
setm: (2 tagged-value-address): setting 2 to 1031
run: -- ((1 34) (2 1031) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34))
run: 14 main 2: ((3 integer-address) (4 boolean) <- maybe-coerce (2 tagged-value-address deref) (integer-address literal))
m: (2 tagged-value-address deref)
sizeof: (2 tagged-value-address deref)
sizeof: (1031 tagged-value)
sizeof: type
sizeof: location
run: -- ((1 34) (2 1031) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34))
run: 15 maybe-coerce 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1033 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1 34) (2 1031) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30))
run: 16 maybe-coerce 1: ((1 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1064 => (1 tagged-value-address)
setm: (1 tagged-value-address) <= 1064
sizeof: (1 tagged-value-address)
setm: size of (1 tagged-value-address) is 1
setm: (1 tagged-value-address): setting 1034 to 1064
run: -- ((1 34) (2 1031) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064))
run: 17 maybe-coerce 2: ((1 tagged-value-address deref) <- arg)
arg: nil 0 (#(tagged record (integer-address 34 . nil)) integer-address)
run: #(tagged record (integer-address 34 . nil)) => (1 tagged-value-address deref)
setm: (1 tagged-value-address deref) <= #(tagged record (integer-address 34 . nil))
sizeof: (1 tagged-value-address deref)
sizeof: (34 tagged-value)
sizeof: type
sizeof: location
setm: size of (1 tagged-value-address deref) is 2
setm: (1 tagged-value-address deref): setting 1064 to integer-address
setm: (1 tagged-value-address deref): setting 1065 to 34
run: -- ((1 34) (2 1031) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (1064 integer-address) (1065 34))
run: 18 maybe-coerce 3: ((2 type) <- arg)
arg: nil 1 (#(tagged record (integer-address 34 . nil)) integer-address)
run: integer-address => (2 type)
setm: (2 type) <= integer-address
sizeof: (2 type)
setm: size of (2 type) is 1
setm: (2 type): setting 1035 to integer-address
run: -- ((1 34) (2 1031) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (1035 integer-address) (1064 integer-address) (1065 34))
run: 19 maybe-coerce 4: ((3 type) <- get (1 tagged-value-address deref) (0 offset))
record-info: (1 tagged-value-address deref) (0 offset)
record-info: initial base 1064 type ((address t) (elem tagged-value) (size 1))
record-info: (1 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get: (1 tagged-value-address deref) (0 offset) => 1064 type
m: (1064 type global)
sizeof: (1064 type global)
run: integer-address => (3 type)
setm: (3 type) <= integer-address
sizeof: (3 type)
setm: size of (3 type) is 1
setm: (3 type): setting 1036 to integer-address
run: -- ((1 34) (2 1031) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (1035 integer-address) (1036 integer-address) (1064 integer-address) (1065 34))
run: 20 maybe-coerce 5: ((4 boolean) <- eq (3 type) (2 type))
m: (3 type)
sizeof: (3 type)
m: (2 type)
sizeof: (2 type)
run: t => (4 boolean)
setm: (4 boolean) <= t
sizeof: (4 boolean)
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1037 to t
run: -- ((1 34) (2 1031) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (1035 integer-address) (1036 integer-address) (1037 t) (1064 integer-address) (1065 34))
run: 21 maybe-coerce 6: (jump-if (4 boolean) (1 offset))
m: (4 boolean)
sizeof: (4 boolean)
jump: checking that t is t
jump: jumping to 8
run: -- ((1 34) (2 1031) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (1035 integer-address) (1036 integer-address) (1037 t) (1064 integer-address) (1065 34))
run: 22 maybe-coerce 8: ((5 location) <- get (1 tagged-value-address deref) (1 offset))
record-info: (1 tagged-value-address deref) (1 offset)
record-info: initial base 1064 type ((address t) (elem tagged-value) (size 1))
record-info: (1 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
sizeof: type
get: (1 tagged-value-address deref) (1 offset) => 1065 location
m: (1065 location global)
sizeof: (1065 location global)
run: 34 => (5 location)
setm: (5 location) <= 34
sizeof: (5 location)
setm: size of (5 location) is 1
setm: (5 location): setting 1038 to 34
run: -- ((1 34) (2 1031) (1000 30) (1001 integer-address) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer-address) (1032 34) (1033 30) (1034 1064) (1035 integer-address) (1036 integer-address) (1037 t) (1038 34) (1064 integer-address) (1065 34))
run: 23 maybe-coerce 9: (reply (5 location) (4 boolean))
m: (5 location)
sizeof: (5 location)
m: (4 boolean)
sizeof: (4 boolean)
reply: ((5 location) (4 boolean)) ((3 integer-address) (4 boolean))
reply: 34 => (3 integer-address)
setm: (3 integer-address) <= 34
sizeof: (3 integer-address)
setm: size of (3 integer-address) is 1
setm: (3 integer-address): setting 3 to 34
reply: t => (4 boolean)
setm: (4 boolean) <= t
sizeof: (4 boolean)
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 4 to t
schedule: done with routine
