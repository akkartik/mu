9991 parse: --- defining main
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": "literal"}
9992 load: after rewriting: foo 3
9999 parse: recipe main has a header
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: next-ingredient
9993 parse:   number of ingredients: 0
9993 parse:   product: {"x": "number"}
9992 load: after rewriting: x:number <- next-ingredient 
9993 parse: instruction: bar
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"x": <>}
9993 parse:   product: {"1": "number", "raw": <>}
9992 load: after rewriting: 1:number/raw <- bar x
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: x:_elem
9999 parse: header product: y:_elem
9991 parse: --- defining bar
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: add
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <>}
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   product: {"y": <>}
9992 load: after rewriting: y <- add x, 1
9999 parse: recipe bar has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- deduce types for recipe main
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: x => number
9992 transform: x <= number
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9991 transform: --- transform names for recipe foo
9993 name: assign x 1
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo
9992 transform: score for base: 99
9991 transform: --- resolve ambiguous calls for recipe foo
9992 transform: instruction bar
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: checking variant 10: recipe bar x:_elem -> y:_elem
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 10: -1
9992 transform: no variant found; checking for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 10: recipe bar x:_elem -> y:_elem
9992 transform: final score: 100
9992 transform: matches
9992 transform: found variant to specialize: 1002 bar
9993 transform: switching bar to bar_2
9993 transform: compute type names: bar_2
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"y": "_elem"}: "_elem"
9993 transform: type of y is "_elem"
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: x:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: y <- add x, 1
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"1": "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {"y": <>}: <>
9994 transform:     deducing type to "_elem"
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient y:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'y <- add x, 1'
9993 transform: replacing in ingredient x
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient 1
9993 transform:   after: ?0
9993 transform: replacing in ingredient y
9993 transform: _elem => "number"
9993 transform:   after: number
9992 transform: transforming new specialization: bar_2
9991 transform: --- checking reply instructions against header for bar_2
9991 transform: --- fill in reply ingredients from header for recipe bar_2
9991 transform: --- deduce types for recipe bar_2
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: x => number
9992 transform: y => number
9991 transform: --- deduce types from header for bar_2
9993 transform: type of x is number
9993 transform: type of y is number
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: x:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: x: number -- {"x": "number"}
9992 transform: instruction: y <- add x, 1
9993 transform:   product: y: number -- {"y": "number"}
9992 transform: instruction: reply y:_elem
9991 transform: --- collect surrounding spaces for recipe bar_2
9991 transform: --- transform names for recipe bar_2
9993 name: assign x 1
9993 name: assign y 2
9991 transform: --- resolve ambiguous calls for recipe bar_2
9991 transform: --- compute instruction operations for recipe bar_2
9991 transform: --- transform braces for recipe bar_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: add ...
9992 transform:  ...
9991 transform: --- perform checks for recipe bar_2
9991 transform: --- type-check 'call' instructions inside recipe bar_2
9991 transform: --- type-check calls inside recipe bar_2
9991 transform: --- convert 'new' to 'allocate' for recipe bar_2
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for bar_2
9992 transform: new specialization: bar_2
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform: next-ingredient ...
9992 transform: bar ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: foo 3
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1000
9999 mem: storing 2 in location 1001
 103 run: x:number <- next-ingredient 
9999 mem: storing 3 in location 1003
 103 run: 1:number/raw <- bar_2 x
9999 mem: location 1003 is 3
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1004
9999 mem: storing 3 in location 1005
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1007
 104 run: y <- add x, 1
9999 mem: location 1007 is 3
9999 mem: storing 4 in location 1008
 104 run: reply y:_elem
9999 mem: location 1008 is 4
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9999 mem: storing 4 in location 1
9999 abandon: saving in free-list of size 4
9999 trace: fall-through: exiting foo; decrementing callstack depth from 2
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
