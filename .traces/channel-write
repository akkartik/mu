schedule: main
run: -- nil
run: 1 main 0: ((1 channel-address) <- new-channel (3 literal))
run: -- nil
run: 2 new-channel 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1000 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1000 30))
run: 3 new-channel 1: ((1 channel-address) <- new (channel literal))
sizeof: channel
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1001 to 1031
run: -- ((1000 30) (1001 1031))
run: 4 new-channel 2: ((2 integer-address) <- get-address (1 channel-address deref) (0 offset))
record-info: (1 channel-address deref) (0 offset)
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (0 offset) => 1031
run: 1031 => (2 integer-address)
setm: (2 integer-address) <= 1031
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 1002 to 1031
run: -- ((1000 30) (1001 1031) (1002 1031))
run: 5 new-channel 3: ((2 integer-address deref) <- copy (0 literal))
run: 0 => (2 integer-address deref)
setm: (2 integer-address deref) <= 0
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1031 to 0
run: -- ((1000 30) (1001 1031) (1002 1031) (1031 0))
run: 6 new-channel 4: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset))
record-info: (1 channel-address deref) (1 offset)
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
sizeof: integer
get-address: (1 channel-address deref) (1 offset) => 1032
run: 1032 => (3 integer-address)
setm: (3 integer-address) <= 1032
setm: size of (3 integer-address) is 1
setm: (3 integer-address): setting 1003 to 1032
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 1032) (1031 0))
run: 7 new-channel 5: ((3 integer-address deref) <- copy (0 literal))
run: 0 => (3 integer-address deref)
setm: (3 integer-address deref) <= 0
setm: size of (3 integer-address deref) is 1
setm: (3 integer-address deref): setting 1032 to 0
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 1032) (1031 0) (1032 0))
run: 8 new-channel 6: ((4 integer) <- arg)
arg: nil 0 (3)
run: 3 => (4 integer)
setm: (4 integer) <= 3
setm: size of (4 integer) is 1
setm: (4 integer): setting 1004 to 3
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 3) (1031 0) (1032 0))
run: 9 new-channel 7: ((4 integer) <- add (4 integer) (1 literal))
m: (4 integer)
sizeof: (4 integer)
add: 3 1
m: (4 integer)
sizeof: (4 integer)
run: 4 => (4 integer)
setm: (4 integer) <= 4
setm: size of (4 integer) is 1
setm: (4 integer): setting 1004 to 4
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1031 0) (1032 0))
run: 10 new-channel 8: ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
sizeof: integer
sizeof: integer
get-address: (1 channel-address deref) (2 offset) => 1033
run: 1033 => (5 tagged-value-array-address-address)
setm: (5 tagged-value-array-address-address) <= 1033
setm: size of (5 tagged-value-array-address-address) is 1
setm: (5 tagged-value-array-address-address): setting 1005 to 1033
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0))
run: 11 new-channel 9: ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer))
m: (4 integer)
sizeof: (4 integer)
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1034 => (5 tagged-value-array-address-address deref)
setm: (5 tagged-value-array-address-address deref) <= 1034
setm: size of (5 tagged-value-array-address-address deref) is 1
setm: (5 tagged-value-array-address-address deref): setting 1033 to 1034
run: -- ((1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4))
run: 12 new-channel 10: (reply (1 channel-address))
m: (1 channel-address)
sizeof: (1 channel-address)
reply: ((1 channel-address)) ((1 channel-address))
reply: 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1 to 1031
run: -- ((1 1031) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4))
run: 13 main 1: ((2 integer-address) <- new (integer literal))
sizeof: integer
run: 1043 => (2 integer-address)
setm: (2 integer-address) <= 1043
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 2 to 1043
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4))
run: 14 main 2: ((2 integer-address deref) <- copy (34 literal))
run: 34 => (2 integer-address deref)
setm: (2 integer-address deref) <= 34
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1043 to 34
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34))
run: 15 main 3: ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (2 integer-address))
m: (2 integer-address)
sizeof: (2 integer-address)
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34))
run: 16 new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1044 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30))
run: 17 new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer-address 1043)
run: integer-address => (1 type)
setm: (1 type) <= integer-address
setm: size of (1 type) is 1
setm: (1 type): setting 1045 to integer-address
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address))
run: 18 new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sizeof: (1 type)
sizeof: integer-address
run: 1 => (2 integer)
setm: (2 integer) <= 1
setm: size of (2 integer) is 1
setm: (2 integer): setting 1046 to 1
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1))
run: 19 new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sizeof: (2 integer)
run: t => (3 boolean)
setm: (3 boolean) <= t
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 1047 to t
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t))
run: 20 new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sizeof: (3 boolean)
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t))
run: 21 new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1075 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1075
setm: size of (4 tagged-value-address) is 1
setm: (4 tagged-value-address): setting 1048 to 1075
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075))
run: 22 new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
record-info: (4 tagged-value-address deref) (0 offset)
record-info: initial base 1075 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (0 offset) => 1075
run: 1075 => (5 location)
setm: (5 location) <= 1075
setm: size of (5 location) is 1
setm: (5 location): setting 1049 to 1075
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075))
run: 23 new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sizeof: (1 type)
run: integer-address => (5 location deref)
setm: (5 location deref) <= integer-address
setm: size of (5 location deref) is 1
setm: (5 location deref): setting 1075 to integer-address
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1075 integer-address))
run: 24 new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
record-info: (4 tagged-value-address deref) (1 offset)
record-info: initial base 1075 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
sizeof: type
get-address: (4 tagged-value-address deref) (1 offset) => 1076
run: 1076 => (6 location)
setm: (6 location) <= 1076
setm: size of (6 location) is 1
setm: (6 location): setting 1050 to 1076
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address))
run: 25 new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer-address 1043)
run: 1043 => (6 location deref)
setm: (6 location deref) <= 1043
setm: size of (6 location deref) is 1
setm: (6 location deref): setting 1076 to 1043
run: -- ((1 1031) (2 1043) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043))
run: 26 new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sizeof: (4 tagged-value-address)
reply: ((4 tagged-value-address)) ((3 tagged-value-address))
reply: 1075 => (3 tagged-value-address)
setm: (3 tagged-value-address) <= 1075
setm: size of (3 tagged-value-address) is 1
setm: (3 tagged-value-address): setting 3 to 1075
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043))
run: 27 main 4: ((1 channel-address deref) <- write (1 channel-address) (3 tagged-value-address deref))
m: (1 channel-address)
sizeof: (1 channel-address)
m: (3 tagged-value-address deref)
sizeof: (3 tagged-value-address deref)
sizeof: (1075 tagged-value)
sizeof: type
sizeof: location
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043))
run: 28 write 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1077 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30))
run: 29 write 1: ((1 channel-address) <- arg)
arg: nil 0 (1031 #(tagged record (integer-address 1043 . nil)))
run: 1031 => (1 channel-address)
setm: (1 channel-address) <= 1031
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1078 to 1031
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031))
run: 30 write 2: ((2 tagged-value) <- arg)
arg: nil 1 (1031 #(tagged record (integer-address 1043 . nil)))
run: #(tagged record (integer-address 1043 . nil)) => (2 tagged-value)
setm: (2 tagged-value) <= #(tagged record (integer-address 1043 . nil))
setm: size of (2 tagged-value) is 2
sizeof: (2 tagged-value)
sizeof: type
sizeof: location
setm: (2 tagged-value): setting 1079 to integer-address
setm: (2 tagged-value): setting 1080 to 1043
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043))
run: 31 write 3: ((4 boolean) <- full? (1 channel-address deref))
m: (1 channel-address deref)
sizeof: (1 channel-address deref)
sizeof: (1031 channel)
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043))
run: 32 full? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1108 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30))
run: 33 full? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (0 0 1034 . nil)))
run: #(tagged record (0 0 1034 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (0 0 1034 . nil))
setm: size of (1 channel) is 3
sizeof: (1 channel)
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
setm: (1 channel): setting 1109 to 0
setm: (1 channel): setting 1110 to 0
setm: (1 channel): setting 1111 to 1034
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034))
run: 34 full? 2: ((4 integer) <- get (1 channel) (1 offset))
record-info: (1 channel) (1 offset)
record-info: initial base 1109 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
sizeof: integer
get: (1 channel) (1 offset) => 1110 integer
m: (1110 integer global)
sizeof: (1110 integer global)
run: 0 => (4 integer)
setm: (4 integer) <= 0
setm: size of (4 integer) is 1
setm: (4 integer): setting 1112 to 0
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 0))
run: 35 full? 3: ((4 integer) <- add (4 integer) (1 literal))
m: (4 integer)
sizeof: (4 integer)
add: 0 1
m: (4 integer)
sizeof: (4 integer)
run: 1 => (4 integer)
setm: (4 integer) <= 1
setm: size of (4 integer) is 1
setm: (4 integer): setting 1112 to 1
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1))
run: 36 full? 4: ((5 integer) <- capacity (1 channel))
m: (1 channel)
sizeof: (1 channel)
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1))
run: 37 capacity 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1139 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1139 30))
run: 38 capacity 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (0 0 1034 . nil)))
run: #(tagged record (0 0 1034 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (0 0 1034 . nil))
setm: size of (1 channel) is 3
sizeof: (1 channel)
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
setm: (1 channel): setting 1140 to 0
setm: (1 channel): setting 1141 to 0
setm: (1 channel): setting 1142 to 1034
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1139 30) (1140 0) (1141 0) (1142 1034))
run: 39 capacity 2: ((4 tagged-value-array-address) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
record-info: initial base 1140 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
sizeof: integer
sizeof: integer
get: (1 channel) (2 offset) => 1142 tagged-value-array-address
m: (1142 tagged-value-array-address global)
sizeof: (1142 tagged-value-array-address global)
run: 1034 => (4 tagged-value-array-address)
setm: (4 tagged-value-array-address) <= 1034
setm: size of (4 tagged-value-array-address) is 1
setm: (4 tagged-value-array-address): setting 1143 to 1034
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034))
run: 40 capacity 3: ((5 integer) <- len (4 tagged-value-array-address deref))
array-len: (4 tagged-value-array-address deref)
m: (4 integer-address deref)
sizeof: (4 integer-address deref)
sizeof: (nil integer)
run: 4 => (5 integer)
setm: (5 integer) <= 4
setm: size of (5 integer) is 1
setm: (5 integer): setting 1144 to 4
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 41 capacity 4: (reply (5 integer))
m: (5 integer)
sizeof: (5 integer)
reply: ((5 integer)) ((5 integer))
reply: 4 => (5 integer)
setm: (5 integer) <= 4
setm: size of (5 integer) is 1
setm: (5 integer): setting 1113 to 4
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 42 full? 5: ((6 boolean) <- lt (4 integer) (5 integer))
m: (4 integer)
sizeof: (4 integer)
m: (5 integer)
sizeof: (5 integer)
run: t => (6 boolean)
setm: (6 boolean) <= t
setm: size of (6 boolean) is 1
setm: (6 boolean): setting 1114 to t
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 43 full? 6: (jump-if (6 boolean) (1 offset))
m: (6 boolean)
sizeof: (6 boolean)
jump: checking that t is t
jump: jumping to 8
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 44 full? 8: ((7 integer) <- get (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
record-info: initial base 1109 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (0 offset) => 1109 integer
m: (1109 integer global)
sizeof: (1109 integer global)
run: 0 => (7 integer)
setm: (7 integer) <= 0
setm: size of (7 integer) is 1
setm: (7 integer): setting 1115 to 0
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 45 full? 9: ((8 boolean) <- eq (7 integer) (4 integer))
m: (7 integer)
sizeof: (7 integer)
m: (4 integer)
sizeof: (4 integer)
run: nil => (8 boolean)
setm: (8 boolean) <= nil
setm: size of (8 boolean) is 1
setm: (8 boolean): setting 1116 to nil
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 46 full? 10: (reply (8 boolean))
m: (8 boolean)
sizeof: (8 boolean)
reply: ((8 boolean)) ((4 boolean))
reply: nil => (4 boolean)
setm: (4 boolean) <= nil
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1081 to nil
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 47 write 4: (jump-unless (4 boolean) (2 offset))
m: (4 boolean)
sizeof: (4 boolean)
jump: checking that nil is not t
jump: jumping to 7
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 48 write 7: ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
sizeof: integer
sizeof: integer
get: (1 channel-address deref) (2 offset) => 1033 tagged-value-array-address
m: (1033 tagged-value-array-address global)
sizeof: (1033 tagged-value-array-address global)
run: 1034 => (6 tagged-value-array-address)
setm: (6 tagged-value-array-address) <= 1034
setm: size of (6 tagged-value-array-address) is 1
setm: (6 tagged-value-array-address): setting 1083 to 1034
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1083 1034) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 49 write 8: ((7 integer-address) <- get-address (1 channel-address deref) (1 offset))
record-info: (1 channel-address deref) (1 offset)
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
sizeof: integer
get-address: (1 channel-address deref) (1 offset) => 1032
run: 1032 => (7 integer-address)
setm: (7 integer-address) <= 1032
setm: size of (7 integer-address) is 1
setm: (7 integer-address): setting 1084 to 1032
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1083 1034) (1084 1032) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 50 write 9: ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref))
m: (7 integer-address deref)
sizeof: (7 integer-address deref)
sizeof: (nil integer)
array-info: (6 tagged-value-array-address deref) 0
array-info: initial base 1034 type ((address t) (elem tagged-value-array) (size 1))
array-info: (6 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (6 tagged-value-array-address deref)
m: (6 integer-address deref)
sizeof: (6 integer-address deref)
sizeof: (nil integer)
array-info: array-len of (6 tagged-value-array-address deref) is 4
sizeof: tagged-value
sizeof: type
sizeof: location
index-address: (6 tagged-value-array-address deref) (7 integer-address deref) => 1035
run: 1035 => (8 tagged-value-address)
setm: (8 tagged-value-address) <= 1035
setm: size of (8 tagged-value-address) is 1
setm: (8 tagged-value-address): setting 1085 to 1035
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1083 1034) (1084 1032) (1085 1035) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 51 write 10: ((8 tagged-value-address deref) <- copy (2 tagged-value))
m: (2 tagged-value)
sizeof: (2 tagged-value)
sizeof: type
sizeof: location
run: #(tagged record (integer-address 1043 . nil)) => (8 tagged-value-address deref)
setm: (8 tagged-value-address deref) <= #(tagged record (integer-address 1043 . nil))
setm: size of (8 tagged-value-address deref) is 2
sizeof: (8 tagged-value-address deref)
sizeof: (nil tagged-value)
sizeof: type
sizeof: location
setm: (8 tagged-value-address deref): setting 1035 to integer-address
setm: (8 tagged-value-address deref): setting 1036 to 1043
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 0) (1033 1034) (1034 4) (1035 integer-address) (1036 1043) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1083 1034) (1084 1032) (1085 1035) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 52 write 11: ((7 integer-address deref) <- add (7 integer-address deref) (1 literal))
m: (7 integer-address deref)
sizeof: (7 integer-address deref)
sizeof: (nil integer)
add: 0 1
m: (7 integer-address deref)
sizeof: (7 integer-address deref)
sizeof: (nil integer)
run: 1 => (7 integer-address deref)
setm: (7 integer-address deref) <= 1
setm: size of (7 integer-address deref) is 1
setm: (7 integer-address deref): setting 1032 to 1
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 4) (1035 integer-address) (1036 1043) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1083 1034) (1084 1032) (1085 1035) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 53 write 12: ((9 integer) <- len (6 tagged-value-array-address deref))
array-len: (6 tagged-value-array-address deref)
m: (6 integer-address deref)
sizeof: (6 integer-address deref)
sizeof: (nil integer)
run: 4 => (9 integer)
setm: (9 integer) <= 4
setm: size of (9 integer) is 1
setm: (9 integer): setting 1086 to 4
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 4) (1035 integer-address) (1036 1043) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1083 1034) (1084 1032) (1085 1035) (1086 4) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 54 write 13: ((10 boolean) <- lt (7 integer-address deref) (9 integer))
m: (7 integer-address deref)
sizeof: (7 integer-address deref)
sizeof: (nil integer)
m: (9 integer)
sizeof: (9 integer)
run: t => (10 boolean)
setm: (10 boolean) <= t
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1087 to t
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 4) (1035 integer-address) (1036 1043) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1083 1034) (1084 1032) (1085 1035) (1086 4) (1087 t) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 55 write 14: (jump-if (10 boolean) (1 offset))
m: (10 boolean)
sizeof: (10 boolean)
jump: checking that t is t
jump: jumping to 16
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 4) (1035 integer-address) (1036 1043) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1083 1034) (1084 1032) (1085 1035) (1086 4) (1087 t) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 56 write 16: (reply (1 channel-address deref))
m: (1 channel-address deref)
sizeof: (1 channel-address deref)
sizeof: (1031 channel)
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
reply: ((1 channel-address deref)) ((1 channel-address deref))
reply: #(tagged record (0 1 1034 . nil)) => (1 channel-address deref)
setm: (1 channel-address deref) <= #(tagged record (0 1 1034 . nil))
setm: size of (1 channel-address deref) is 3
sizeof: (1 channel-address deref)
sizeof: (1031 channel)
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
setm: (1 channel-address deref): setting 1031 to 0
setm: (1 channel-address deref): setting 1032 to 1
setm: (1 channel-address deref): setting 1033 to 1034
run: -- ((1 1031) (2 1043) (3 1075) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 4) (1035 integer-address) (1036 1043) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1083 1034) (1084 1032) (1085 1035) (1086 4) (1087 t) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 57 main 5: ((4 integer) <- get (1 channel-address deref) (0 offset))
record-info: (1 channel-address deref) (0 offset)
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel-address deref) (0 offset) => 1031 integer
m: (1031 integer global)
sizeof: (1031 integer global)
run: 0 => (4 integer)
setm: (4 integer) <= 0
setm: size of (4 integer) is 1
setm: (4 integer): setting 4 to 0
run: -- ((1 1031) (2 1043) (3 1075) (4 0) (1000 30) (1001 1031) (1002 1031) (1003 1032) (1004 4) (1005 1033) (1031 0) (1032 1) (1033 1034) (1034 4) (1035 integer-address) (1036 1043) (1043 34) (1044 30) (1045 integer-address) (1046 1) (1047 t) (1048 1075) (1049 1075) (1050 1076) (1075 integer-address) (1076 1043) (1077 30) (1078 1031) (1079 integer-address) (1080 1043) (1083 1034) (1084 1032) (1085 1035) (1086 4) (1087 t) (1108 30) (1109 0) (1110 0) (1111 1034) (1112 1) (1113 4) (1114 t) (1115 0) (1139 30) (1140 0) (1141 0) (1142 1034) (1143 1034) (1144 4))
run: 58 main 6: ((5 integer) <- get (1 channel-address deref) (1 offset))
record-info: (1 channel-address deref) (1 offset)
record-info: initial base 1031 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
sizeof: integer
get: (1 channel-address deref) (1 offset) => 1032 integer
m: (1032 integer global)
sizeof: (1032 integer global)
run: 1 => (5 integer)
setm: (5 integer) <= 1
setm: size of (5 integer) is 1
setm: (5 integer): setting 5 to 1
schedule: done with routine
