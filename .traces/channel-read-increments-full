9999 parse: instruction: run
9999 parse:   ingredient: {name: "\n    1:address:channel <- new-channel 3/capacity\n    1:address:channel <- write 1:address:channel, 34\n    _, 1:address:channel <- read 1:address:channel\n    2:number <- get *1:address:channel, first-full:offset\n    3:number <- get *1:address:channel, first-free:offset\n  ", properties: [_: "literal-string"]}
9999 parse: instruction: memory-should-contain
9999 parse:   ingredient: {name: "\n    2 <- 1  # first-full\n    3 <- 1  # first-free\n  ", properties: [_: "literal-string"]}
9999 after-brace: recipe scenario-channel-read-increments-full
9999 after-brace: run ...
9999 after-brace: memory-should-contain ...
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9999 schedule: scenario-channel-read-increments-full
 102 run: run [
    1:address:channel <- new-channel 3/capacity
    1:address:channel <- write 1:address:channel, 34
    _, 1:address:channel <- read 1:address:channel
    2:number <- get *1:address:channel, first-full:offset
    3:number <- get *1:address:channel, first-free:offset
  ]
9999 parse: instruction: new-channel
9999 parse:   ingredient: {name: "3", properties: ["3": "literal", "capacity": ]}
9999 parse:   product: {name: "1", properties: ["1": "address":"channel"]}
9999 parse: instruction: write
9999 parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
9999 parse:   ingredient: {name: "34", properties: ["34": "literal"]}
9999 parse:   product: {name: "1", properties: ["1": "address":"channel"]}
9999 parse: instruction: read
9999 parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
9999 parse:   product: {name: "_", properties: ["_": "dummy"]}
9999 parse:   product: {name: "1", properties: ["1": "address":"channel"]}
9999 parse: instruction: get
9999 parse:   ingredient: {name: "1", properties: ["*1": "address":"channel", "lookup": ]}
9999 parse:   ingredient: {name: "first-full", properties: ["first-full": "offset"]}
9999 parse:   product: {name: "2", properties: ["2": "number"]}
9999 parse: instruction: get
9999 parse:   ingredient: {name: "1", properties: ["*1": "address":"channel", "lookup": ]}
9999 parse:   ingredient: {name: "first-free", properties: ["first-free": "offset"]}
9999 parse:   product: {name: "3", properties: ["3": "number"]}
9999 name: element first-full of type channel is at offset 0
9999 name: element first-free of type channel is at offset 1
9999 after-brace: recipe run1001
9999 after-brace: new-channel ...
9999 after-brace: write ...
9999 after-brace: read ...
9999 after-brace: get ...
9999 after-brace: get ...
9999 trace: run: incrementing callstack depth to 2
 103 run: 1:address:channel <- new-channel 3/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 104 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1002
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1003
 104 run: *full <- copy 0
9999 mem: location 1003 is 1007
9999 mem: storing 0 in location 1007
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1004
 104 run: *free <- copy 0
9999 mem: location 1004 is 1008
9999 mem: storing 0 in location 1008
 104 run: capacity:number <- next-ingredient 
9999 mem: storing 3 in location 1005
 104 run: capacity <- add capacity, 1
9999 mem: location 1005 is 3
9999 mem: storing 4 in location 1005
 104 run: dest:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 104 run: *dest <- new character:type, capacity
9999 mem: location 1005 is 4
9999 mem: array size is 4
9999 mem: new alloc: 1010
9999 mem: location 1006 is 1009
9999 mem: storing 1010 in location 1009
 104 run: reply result
9999 mem: location 1002 is 1007
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: 1:address:channel <- write 1:address:channel, 34
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1015
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1017
 104 run: val:character <- next-ingredient 
9999 mem: storing 34 in location 1018
 104 run: full:boolean <- channel-full? chan
9999 mem: location 1017 is 1007
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1026
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1028
 105 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1028 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1028 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1029
 105 run: tmp <- add tmp, 1
9999 mem: location 1029 is 0
9999 mem: storing 1 in location 1029
 105 run: len:number <- channel-capacity chan
9999 mem: location 1028 is 1007
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1034
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1036
 106 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1036 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1036 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1037
 106 run: result:number <- length *q
9999 mem: location 1037 is 1010
9999 mem: storing 4 in location 1038
 106 run: reply result
9999 mem: location 1038 is 4
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 4
9999 mem: storing 4 in location 1030
 105 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1029 is 1
9999 mem: location 1030 is 4
9999 mem: storing 0 in location 1031
 105 run: break-unless at-end?, 
9999 mem: location 1031 is 0
9999 run: jumping to instruction 9
 105 run: full:number <- get *chan, first-full:offset
9999 mem: location 1028 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1028 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1032
 105 run: result:boolean <- equal full, tmp
9999 mem: location 1032 is 0
9999 mem: location 1029 is 1
9999 mem: storing 0 in location 1033
 105 run: reply result
9999 mem: location 1033 is 0
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 0
9999 mem: storing 0 in location 1019
 104 run: break-unless full, 
9999 mem: location 1019 is 0
9999 run: jumping to instruction 8
 104 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1017 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1017 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1021
 104 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1017 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1017 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1022
 104 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1021 is 1010
9999 mem: location 1022 is 1008
9999 mem: location 1008 is 0
9999 mem: storing 1011 in location 1023
 104 run: *dest <- copy val
9999 mem: location 1018 is 34
9999 mem: location 1023 is 1011
9999 mem: storing 34 in location 1011
 104 run: *free <- add *free, 1
9999 mem: location 1022 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1022 is 1008
9999 mem: storing 1 in location 1008
 104 run: len:number <- length *circular-buffer
9999 mem: location 1021 is 1010
9999 mem: storing 4 in location 1024
 104 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1022 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1024 is 4
9999 mem: storing 0 in location 1025
 104 run: break-unless at-end?, 
9999 mem: location 1025 is 0
9999 run: jumping to instruction 19
 104 run: reply chan/same-as-ingredient:0
9999 mem: location 1017 is 1007
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: _, 1:address:channel <- read 1:address:channel
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1039
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1041
 104 run: empty?:boolean <- channel-empty? chan
9999 mem: location 1041 is 1007
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1049
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1051
 105 run: full:number <- get *chan, first-full:offset
9999 mem: location 1051 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1051 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1052
 105 run: free:number <- get *chan, first-free:offset
9999 mem: location 1051 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1051 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 1053
 105 run: result:boolean <- equal full, free
9999 mem: location 1052 is 0
9999 mem: location 1053 is 1
9999 mem: storing 0 in location 1054
 105 run: reply result
9999 mem: location 1054 is 0
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 0
9999 mem: storing 0 in location 1042
 104 run: break-unless empty?, 
9999 mem: location 1042 is 0
9999 run: jumping to instruction 7
 104 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 1041 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1041 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1044
 104 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1041 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1041 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1045
 104 run: result:character <- index *circular-buffer, *full
9999 mem: location 1045 is 1010
9999 mem: location 1044 is 1007
9999 mem: location 1007 is 0
9999 run: address to copy is 1011
9999 run: its type is character
9999 mem: location 1011 is 34
9999 mem: storing 34 in location 1046
 104 run: *full <- add *full, 1
9999 mem: location 1044 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1044 is 1007
9999 mem: storing 1 in location 1007
 104 run: len:number <- length *circular-buffer
9999 mem: location 1045 is 1010
9999 mem: storing 4 in location 1047
 104 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 1044 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1047 is 4
9999 mem: storing 0 in location 1048
 104 run: break-unless at-end?, 
9999 mem: location 1048 is 0
9999 run: jumping to instruction 17
 104 run: reply result, chan/same-as-ingredient:0
9999 mem: location 1046 is 34
9999 mem: location 1041 is 1007
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 34
9999 run: result 1 is 1007
9999 mem: storing 1007 in location 1
 103 run: 2:number <- get *1:address:channel, first-full:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 1
9999 mem: storing 1 in location 2
 103 run: 3:number <- get *1:address:channel, first-free:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 3
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    2 <- 1  # first-full
    3 <- 1  # first-free
  ]
9999 run: checking location 2
9999 run: checking location 3
9999 trace: fall-through: exiting scenario-channel-read-increments-full; decrementing callstack depth from 1
