schedule: main
run: -- nil
run: 1 main 0: (((1 string-address)) <- ((new)) )
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: -- ((1 1000) (1000 0))
run: 2 main 1: (((2 string-address-array-address)) <- ((split)) ((1 string-address)) ((/ literal)))
m: ((1 string-address))
sizeof: ((1 string-address))
run: -- ((1 1000) (1000 0))
run: 3 split 0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal)))
sizeof: ((_ location))
run: 1001 => ((default-scope scope-address))
sizeof: ((default-scope scope-address))
run: -- ((1 1000) (1000 0) (1001 30))
run: 4 split 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 /)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1002 to 1000
run: -- ((1 1000) (1000 0) (1001 30) (1002 1000))
run: 5 split 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 /)
run: / => ((2 character))
setm: ((2 character)) <= /
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 1003 to /
run: -- ((1 1000) (1000 0) (1001 30) (1002 1000) (1003 /))
run: 6 split 3: (((3 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer) (raw))
sizeof: ((1000 integer) (raw))
run: 0 => ((3 integer))
setm: ((3 integer)) <= 0
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 1004 to 0
run: -- ((1 1000) (1000 0) (1001 30) (1002 1000) (1003 /) (1004 0))
run: 7 split 4: (((4 boolean)) <- ((equal)) ((3 integer)) ((0 literal)))
m: ((3 integer))
sizeof: ((3 integer))
run: t => ((4 boolean))
setm: ((4 boolean)) <= t
setm: size of ((4 boolean)) is 1
setm: ((4 boolean)): setting 1005 to t
run: -- ((1 1000) (1000 0) (1001 30) (1002 1000) (1003 /) (1004 0) (1005 t))
run: 8 split 5: (((jump-unless)) ((4 boolean)) ((2 offset)))
m: ((4 boolean))
sizeof: ((4 boolean))
jump: checking that t is not t
run: -- ((1 1000) (1000 0) (1001 30) (1002 1000) (1003 /) (1004 0) (1005 t))
run: 9 split 6: (((5 string-address-array-address)) <- ((new)) ((string-address-array literal)) ((0 literal)))
sizeof: ((_ string-address))
run: 1032 => ((5 string-address-array-address))
setm: ((5 string-address-array-address)) <= 1032
setm: size of ((5 string-address-array-address)) is 1
setm: ((5 string-address-array-address)): setting 1006 to 1032
run: -- ((1 1000) (1000 0) (1001 30) (1002 1000) (1003 /) (1004 0) (1005 t) (1006 1032) (1032 0))
run: 10 split 7: (((reply)) ((5 string-address-array-address)))
m: ((5 string-address-array-address))
sizeof: ((5 string-address-array-address))
reply: (((5 string-address-array-address))) (((2 string-address-array-address)))
reply: 1032 => ((2 string-address-array-address))
setm: ((2 string-address-array-address)) <= 1032
setm: size of ((2 string-address-array-address)) is 1
setm: ((2 string-address-array-address)): setting 2 to 1032
schedule: done with routine
