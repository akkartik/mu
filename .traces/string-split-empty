9999 parse: instruction: run
9999 parse:   ingredient: {"\n    1:address:array:character <- new []\n    2:address:array:address:array:character <- split 1:address:array:character, 47/slash\n    3:number <- length *2:address:array:address:array:character\n  ": "literal-string"}
9999 parse: instruction: memory-should-contain
9999 parse:   ingredient: {"\n    3 <- 0  # empty result\n  ": "literal-string"}
9999 after-brace: recipe scenario-string-split-empty
9999 after-brace: run ...
9999 after-brace: memory-should-contain ...
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9999 schedule: scenario-string-split-empty
 102 run: run [
    1:address:array:character <- new []
    2:address:array:address:array:character <- split 1:address:array:character, 47/slash
    3:number <- length *2:address:array:address:array:character
  ]
9999 parse: instruction: new
9999 parse:   ingredient: {"": "literal-string"}
9999 parse:   product: {"1": <"address" : "array" : "character">}
9999 parse: instruction: split
9999 parse:   ingredient: {"1": <"address" : "array" : "character">}
9999 parse:   ingredient: {"47": "literal", "slash": ""}
9999 parse:   product: {"2": <"address" : "array" : "address" : "array" : "character">}
9999 parse: instruction: length
9999 parse:   ingredient: {"*2": <"address" : "array" : "address" : "array" : "character">, "lookup": ""}
9999 parse:   product: {"3": "number"}
9999 after-brace: recipe run1001
9999 after-brace: new ...
9999 after-brace: split ...
9999 after-brace: length ...
9999 trace: run: incrementing callstack depth to 2
 103 run: 1:address:array:character <- new []
9999 mem: storing 1000 in location 1
 103 run: 2:address:array:address:array:character <- split 1:address:array:character, 47/slash
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 13
9999 mem: new alloc: 1001
 104 run: s:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1003
 104 run: delim:character <- next-ingredient 
9999 mem: storing 47 in location 1004
 104 run: len:number <- length *s
9999 mem: location 1003 is 1000
9999 mem: storing 0 in location 1005
 104 run: empty?:boolean <- equal len, 0
9999 mem: location 1005 is 0
9999 mem: storing 1 in location 1006
 104 run: break-unless empty?, 
9999 mem: location 1006 is 1
9999 run: jump-unless fell through
 104 run: result:address:array:address:array:character <- new location:type, 0
9999 mem: array size is 0
9999 mem: new alloc: 1015
9999 mem: storing 1015 in location 1007
 104 run: reply result
9999 mem: location 1007 is 1015
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1015
9999 mem: storing 1015 in location 2
 103 run: 3:number <- length *2:address:array:address:array:character
9999 mem: location 2 is 1015
9999 mem: storing 0 in location 3
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    3 <- 0  # empty result
  ]
9999 run: checking location 3
9999 trace: fall-through: exiting scenario-string-split-empty; decrementing callstack depth from 1
