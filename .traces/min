c{0: 0 (((1 integer)) <- ((min)) ((3 literal)) ((4 literal))) -- nil
c{1: 0 âœ“ (((1 integer)) <- ((min)) ((3 literal)) ((4 literal)))
cn0: convert-names in main
cn0: (((1 integer)) <- ((min)) ((3 literal)) ((4 literal))) nil nil
cn0: checking arg ((3 literal))
cn0: checking arg ((4 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn1: (((1 integer)) <- ((min)) ((3 literal)) ((4 literal)))
schedule: main
run: main 0: (((1 integer)) <- ((min)) ((3 literal)) ((4 literal)))
run: min/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: min/main 0: 1000 => ((default-space space-address))
run: min/main 1: (((1 integer)) <- ((next-input)))
arg: nil 0 (3 4)
run: min/main 1: 3 => ((1 integer))
mem: ((1 integer)): 1002 <= 3
run: min/main 2: (((2 integer)) <- ((next-input)))
arg: nil 1 (3 4)
run: min/main 2: 4 => ((2 integer))
mem: ((2 integer)): 1003 <= 4
run: min/main 3: (((3 boolean)) <- ((less-than)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 3
mem: ((2 integer)) => 4
run: min/main 3: t => ((3 boolean))
mem: ((3 boolean)): 1004 <= t
run: min/main 4: (((jump-if)) ((3 boolean)) ((1 offset)))
mem: ((3 boolean)) => t
run: min/main 6: (((reply)) ((1 integer)))
mem: ((1 integer)) => 3
run: main 0: 3 => ((1 integer))
mem: ((1 integer)): 1 <= 3
schedule: done with routine nil
