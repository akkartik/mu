parse: instruction: run
parse:   ingredient: {name: "\n    # channel with just 1 slot\n    1:address:channel <- new-channel 1/capacity\n    # write and read a value\n    1:address:channel <- write 1:address:channel, 34\n    _, 1:address:channel <- read 1:address:channel\n    # first-free will now be 1\n    2:number <- get 1:address:channel/lookup, first-free:offset\n    3:number <- get 1:address:channel/lookup, first-free:offset\n    # write second value, verify that first-free wraps\n    1:address:channel <- write 1:address:channel, 34\n    4:number <- get 1:address:channel/lookup, first-free:offset\n    # read second value, verify that first-full wraps\n    _, 1:address:channel <- read 1:address:channel\n    5:number <- get 1:address:channel/lookup, first-full:offset\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    2 <- 1  # first-free after first write\n    3 <- 1  # first-full after first read\n    4 <- 0  # first-free after second write, wrapped\n    5 <- 0  # first-full after second read, wrapped\n  ", properties: [_: "literal-string"]}
after-brace: recipe scenario-channel-wrap
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: scenario-channel-wrap
 101 run: run [
    # channel with just 1 slot
    1:address:channel <- new-channel 1/capacity
    # write and read a value
    1:address:channel <- write 1:address:channel, 34
    _, 1:address:channel <- read 1:address:channel
    # first-free will now be 1
    2:number <- get 1:address:channel/lookup, first-free:offset
    3:number <- get 1:address:channel/lookup, first-free:offset
    # write second value, verify that first-free wraps
    1:address:channel <- write 1:address:channel, 34
    4:number <- get 1:address:channel/lookup, first-free:offset
    # read second value, verify that first-full wraps
    _, 1:address:channel <- read 1:address:channel
    5:number <- get 1:address:channel/lookup, first-full:offset
  ]
parse: instruction: new-channel
parse:   ingredient: {name: "1", properties: ["1": "literal", "capacity": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "34", properties: ["34": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: read
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   product: {name: "_", properties: ["_": "dummy"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "lookup": ]}
parse:   ingredient: {name: "first-free", properties: ["first-free": "offset"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "lookup": ]}
parse:   ingredient: {name: "first-free", properties: ["first-free": "offset"]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "34", properties: ["34": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "lookup": ]}
parse:   ingredient: {name: "first-free", properties: ["first-free": "offset"]}
parse:   product: {name: "4", properties: ["4": "number"]}
parse: instruction: read
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   product: {name: "_", properties: ["_": "dummy"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "lookup": ]}
parse:   ingredient: {name: "first-full", properties: ["first-full": "offset"]}
parse:   product: {name: "5", properties: ["5": "number"]}
name: element first-free of type channel is at offset 1
name: element first-free of type channel is at offset 1
name: element first-free of type channel is at offset 1
name: element first-full of type channel is at offset 0
after-brace: recipe run1001
after-brace: new-channel ...
after-brace: write ...
after-brace: read ...
after-brace: get ...
after-brace: get ...
after-brace: write ...
after-brace: get ...
after-brace: read ...
after-brace: get ...
 101 run: 1:address:channel <- new-channel 1/capacity
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 102 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1002
 102 run: full:address:number <- get-address result:address:channel/lookup, first-full:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1003
 102 run: full:address:number/lookup <- copy 0
9999 mem: location 1003 is 1007
9999 mem: storing 0 in location 1007
 102 run: free:address:number <- get-address result:address:channel/lookup, first-free:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1004
 102 run: free:address:number/lookup <- copy 0
9999 mem: location 1004 is 1008
9999 mem: storing 0 in location 1008
 102 run: capacity:number <- next-ingredient 
9999 mem: storing 1 in location 1005
 102 run: capacity:number <- add capacity:number, 1
9999 mem: location 1005 is 1
9999 mem: storing 2 in location 1005
 102 run: dest:address:address:array:location <- get-address result:address:channel/lookup, data:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 102 run: dest:address:address:array:location/lookup <- new location:type, capacity:number
9999 mem: location 1005 is 2
9999 mem: array size is 2
9999 mem: new alloc: 1010
9999 mem: location 1006 is 1009
9999 mem: storing 1010 in location 1009
 102 run: reply result:address:channel
9999 mem: location 1002 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 101 run: 1:address:channel <- write 1:address:channel, 34
9999 mem: location 1 is 1007
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1013
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1015
 102 run: val:location <- next-ingredient 
9999 mem: storing 34 in location 1016
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1015 is 1007
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1024
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1026
 103 run: tmp:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1026 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1026 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1027
 103 run: tmp:number <- add tmp:number, 1
9999 mem: location 1027 is 0
9999 mem: storing 1 in location 1027
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1026 is 1007
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1032
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1034
 104 run: q:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1034 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1034 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1035
 104 run: result:number <- length q:address:array:location/lookup
9999 mem: location 1035 is 1010
9999 mem: location 1010 is 2
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1035 is 1010
9999 mem: storing 2 in location 1036
 104 run: reply result:number
9999 mem: location 1036 is 2
9999 run: result 0 is 2
9999 mem: storing 2 in location 1028
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1027 is 1
9999 mem: location 1028 is 2
9999 mem: storing 0 in location 1029
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1029 is 0
9999 run: jumping to instruction 9
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1026 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1026 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1030
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1030 is 0
9999 mem: location 1027 is 1
9999 mem: storing 0 in location 1031
 103 run: reply result:boolean
9999 mem: location 1031 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1017
 102 run: break-unless full:boolean, 
9999 mem: location 1017 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1015 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1015 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1019
 102 run: free:address:number <- get-address chan:address:channel/lookup, first-free:offset
9999 mem: location 1015 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1015 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1020
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/lookup, free:address:number/lookup
9999 mem: location 1019 is 1010
9999 mem: location 1010 is 2
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1019 is 1010
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 0
9999 mem: storing 1011 in location 1021
 102 run: dest:address:location/lookup <- copy val:location
9999 mem: location 1016 is 34
9999 mem: location 1021 is 1011
9999 mem: storing 34 in location 1011
 102 run: free:address:number/lookup <- add free:address:number/lookup, 1
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1020 is 1008
9999 mem: storing 1 in location 1008
 102 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 1019 is 1010
9999 mem: location 1010 is 2
9999 mem: location 1011 is 34
9999 mem: location 1012 is 0
9999 mem: location 1019 is 1010
9999 mem: storing 2 in location 1022
 102 run: at-end?:boolean <- greater-or-equal free:address:number/lookup, len:number
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1022 is 2
9999 mem: storing 0 in location 1023
 102 run: break-unless at-end?:boolean, 
9999 mem: location 1023 is 0
9999 run: jumping to instruction 19
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1015 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 101 run: _, 1:address:channel <- read 1:address:channel
9999 mem: location 1 is 1007
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1037
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1039
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 1039 is 1007
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1047
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1049
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1049 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1049 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1050
 103 run: free:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1049 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1049 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 1051
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1050 is 0
9999 mem: location 1051 is 1
9999 mem: storing 0 in location 1052
 103 run: reply result:boolean
9999 mem: location 1052 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1040
 102 run: break-unless empty:boolean, 
9999 mem: location 1040 is 0
9999 run: jumping to instruction 7
 102 run: full:address:number <- get-address chan:address:channel/lookup, first-full:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1042
 102 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1043
 102 run: result:location <- index circular-buffer:address:array:location/lookup, full:address:number/lookup
9999 mem: location 1043 is 1010
9999 mem: location 1010 is 2
9999 mem: location 1011 is 34
9999 mem: location 1012 is 0
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1043 is 1010
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 0
9999 run: address to copy is 1011
9999 run: its type is number
9999 mem: location 1011 is 34
9999 mem: storing 34 in location 1044
 102 run: full:address:number/lookup <- add full:address:number/lookup, 1
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1042 is 1007
9999 mem: storing 1 in location 1007
 102 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 1043 is 1010
9999 mem: location 1010 is 2
9999 mem: location 1011 is 34
9999 mem: location 1012 is 0
9999 mem: location 1043 is 1010
9999 mem: storing 2 in location 1045
 102 run: at-end?:boolean <- greater-or-equal full:address:number/lookup, len:number
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1045 is 2
9999 mem: storing 0 in location 1046
 102 run: break-unless at-end?:boolean, 
9999 mem: location 1046 is 0
9999 run: jumping to instruction 17
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 1044 is 34
9999 mem: location 1039 is 1007
9999 run: result 0 is 34
9999 run: result 1 is 1007
9999 mem: storing 1007 in location 1
 101 run: 2:number <- get 1:address:channel/lookup, first-free:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 2
 101 run: 3:number <- get 1:address:channel/lookup, first-free:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 3
 101 run: 1:address:channel <- write 1:address:channel, 34
9999 mem: location 1 is 1007
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1015
 102 run: val:location <- next-ingredient 
9999 mem: storing 34 in location 1016
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1015 is 1007
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1026
 103 run: tmp:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1026 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1026 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 1027
 103 run: tmp:number <- add tmp:number, 1
9999 mem: location 1027 is 1
9999 mem: storing 2 in location 1027
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1026 is 1007
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1034
 104 run: q:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1034 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1034 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1035
 104 run: result:number <- length q:address:array:location/lookup
9999 mem: location 1035 is 1010
9999 mem: location 1010 is 2
9999 mem: location 1011 is 34
9999 mem: location 1012 is 0
9999 mem: location 1035 is 1010
9999 mem: storing 2 in location 1036
 104 run: reply result:number
9999 mem: location 1036 is 2
9999 run: result 0 is 2
9999 mem: storing 2 in location 1028
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1027 is 2
9999 mem: location 1028 is 2
9999 mem: storing 1 in location 1029
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1029 is 1
9999 run: jump-unless fell through
 103 run: tmp:number <- copy 0
9999 mem: storing 0 in location 1027
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1026 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1026 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 1
9999 mem: storing 1 in location 1030
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1030 is 1
9999 mem: location 1027 is 0
9999 mem: storing 0 in location 1031
 103 run: reply result:boolean
9999 mem: location 1031 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1017
 102 run: break-unless full:boolean, 
9999 mem: location 1017 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1015 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1015 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1019
 102 run: free:address:number <- get-address chan:address:channel/lookup, first-free:offset
9999 mem: location 1015 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1015 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1020
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/lookup, free:address:number/lookup
9999 mem: location 1019 is 1010
9999 mem: location 1010 is 2
9999 mem: location 1011 is 34
9999 mem: location 1012 is 0
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1019 is 1010
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 1
9999 mem: storing 1012 in location 1021
 102 run: dest:address:location/lookup <- copy val:location
9999 mem: location 1016 is 34
9999 mem: location 1021 is 1012
9999 mem: storing 34 in location 1012
 102 run: free:address:number/lookup <- add free:address:number/lookup, 1
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1020 is 1008
9999 mem: storing 2 in location 1008
 102 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 1019 is 1010
9999 mem: location 1010 is 2
9999 mem: location 1011 is 34
9999 mem: location 1012 is 34
9999 mem: location 1019 is 1010
9999 mem: storing 2 in location 1022
 102 run: at-end?:boolean <- greater-or-equal free:address:number/lookup, len:number
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 2
9999 mem: location 1022 is 2
9999 mem: storing 1 in location 1023
 102 run: break-unless at-end?:boolean, 
9999 mem: location 1023 is 1
9999 run: jump-unless fell through
 102 run: free:address:number/lookup <- copy 0
9999 mem: location 1020 is 1008
9999 mem: storing 0 in location 1008
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1015 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 101 run: 4:number <- get 1:address:channel/lookup, first-free:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 4
 101 run: _, 1:address:channel <- read 1:address:channel
9999 mem: location 1 is 1007
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1039
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 1039 is 1007
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1049
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1049 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1049 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 1
9999 mem: storing 1 in location 1050
 103 run: free:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1049 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1049 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1051
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1050 is 1
9999 mem: location 1051 is 0
9999 mem: storing 0 in location 1052
 103 run: reply result:boolean
9999 mem: location 1052 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1040
 102 run: break-unless empty:boolean, 
9999 mem: location 1040 is 0
9999 run: jumping to instruction 7
 102 run: full:address:number <- get-address chan:address:channel/lookup, first-full:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1042
 102 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1043
 102 run: result:location <- index circular-buffer:address:array:location/lookup, full:address:number/lookup
9999 mem: location 1043 is 1010
9999 mem: location 1010 is 2
9999 mem: location 1011 is 34
9999 mem: location 1012 is 34
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1043 is 1010
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 1
9999 run: address to copy is 1012
9999 run: its type is number
9999 mem: location 1012 is 34
9999 mem: storing 34 in location 1044
 102 run: full:address:number/lookup <- add full:address:number/lookup, 1
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1042 is 1007
9999 mem: storing 2 in location 1007
 102 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 1043 is 1010
9999 mem: location 1010 is 2
9999 mem: location 1011 is 34
9999 mem: location 1012 is 34
9999 mem: location 1043 is 1010
9999 mem: storing 2 in location 1045
 102 run: at-end?:boolean <- greater-or-equal full:address:number/lookup, len:number
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1045 is 2
9999 mem: storing 1 in location 1046
 102 run: break-unless at-end?:boolean, 
9999 mem: location 1046 is 1
9999 run: jump-unless fell through
 102 run: full:address:number/lookup <- copy 0
9999 mem: location 1042 is 1007
9999 mem: storing 0 in location 1007
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 1044 is 34
9999 mem: location 1039 is 1007
9999 run: result 0 is 34
9999 run: result 1 is 1007
9999 mem: storing 1007 in location 1
 101 run: 5:number <- get 1:address:channel/lookup, first-full:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 5
 100 run: memory-should-contain [
    2 <- 1  # first-free after first write
    3 <- 1  # first-full after first read
    4 <- 0  # first-free after second write, wrapped
    5 <- 0  # first-full after second read, wrapped
  ]
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
