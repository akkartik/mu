parse: instruction: run
parse:   ingredient: {name: "
    # channel with just 1 slot
    1:address:channel <- init-channel 1:literal/capacity
    # write and read a value
    1:address:channel <- write 1:address:channel, 34:literal
    _, 1:address:channel <- read 1:address:channel
    # first-free will now be 1
    2:number <- get 1:address:channel/deref, first-free:offset
    3:number <- get 1:address:channel/deref, first-free:offset
    # write second value, verify that first-free wraps
    1:address:channel <- write 1:address:channel, 34:literal
    4:number <- get 1:address:channel/deref, first-free:offset
    # read second value, verify that first-full wraps
    _, 1:address:channel <- read 1:address:channel
    5:number <- get 1:address:channel/deref, first-full:offset
  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    2 <- 1  # first-free after first write
    3 <- 1  # first-full after first read
    4 <- 0  # first-free after second write, wrapped
    5 <- 0  # first-full after second read, wrapped
  ", properties: [_: "literal-string"]}
after-brace: recipe channel-wrap
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: channel-wrap
 101 run: run [
    # channel with just 1 slot
    1:address:channel <- init-channel 1:literal/capacity
    # write and read a value
    1:address:channel <- write 1:address:channel, 34:literal
    _, 1:address:channel <- read 1:address:channel
    # first-free will now be 1
    2:number <- get 1:address:channel/deref, first-free:offset
    3:number <- get 1:address:channel/deref, first-free:offset
    # write second value, verify that first-free wraps
    1:address:channel <- write 1:address:channel, 34:literal
    4:number <- get 1:address:channel/deref, first-free:offset
    # read second value, verify that first-full wraps
    _, 1:address:channel <- read 1:address:channel
    5:number <- get 1:address:channel/deref, first-full:offset
  ]
parse: instruction: init-channel
parse:   ingredient: {name: "1", properties: ["1": "literal", "capacity": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "34", properties: ["34": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: read
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   product: {name: "_", properties: ["_": "dummy"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "deref": ]}
parse:   ingredient: {name: "first-free", properties: ["first-free": "offset"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "deref": ]}
parse:   ingredient: {name: "first-free", properties: ["first-free": "offset"]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "34", properties: ["34": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "deref": ]}
parse:   ingredient: {name: "first-free", properties: ["first-free": "offset"]}
parse:   product: {name: "4", properties: ["4": "number"]}
parse: instruction: read
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   product: {name: "_", properties: ["_": "dummy"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: get
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "deref": ]}
parse:   ingredient: {name: "first-full", properties: ["first-full": "offset"]}
parse:   product: {name: "5", properties: ["5": "number"]}
name: element first-free of type channel is at offset 1
name: element first-free of type channel is at offset 1
name: element first-free of type channel is at offset 1
name: element first-full of type channel is at offset 0
after-brace: recipe run1001
after-brace: init-channel ...
after-brace: write ...
after-brace: read ...
after-brace: get ...
after-brace: get ...
after-brace: write ...
after-brace: get ...
after-brace: read ...
after-brace: get ...
 101 run: 1:address:channel <- init-channel 1:literal/capacity
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1000
 102 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1031
9999 mem: storing 1031 in location 1002
 102 run: full:address:number <- get-address result:address:channel/deref, first-full:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1003
 102 run: full:address:number/deref <- copy 0:literal
9999 mem: location 1003 is 1031
9999 mem: storing 0 in location 1031
 102 run: free:address:number <- get-address result:address:channel/deref, first-free:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1004
 102 run: free:address:number/deref <- copy 0:literal
9999 mem: location 1004 is 1032
9999 mem: storing 0 in location 1032
 102 run: capacity:number <- next-ingredient 
9999 mem: storing 1 in location 1005
 102 run: capacity:number <- add capacity:number, 1:literal
9999 mem: location 1005 is 1
9999 mem: storing 2 in location 1005
 102 run: dest:address:address:array:location <- get-address result:address:channel/deref, data:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1006
 102 run: dest:address:address:array:location/deref <- new location:type, capacity:number
9999 mem: location 1005 is 2
9999 mem: array size is 2
9999 mem: new alloc: 1034
9999 mem: location 1006 is 1033
9999 mem: storing 1034 in location 1033
 102 run: reply result:address:channel
9999 mem: location 1002 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 1
 101 run: 1:address:channel <- write 1:address:channel, 34:literal
9999 mem: location 1 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1037
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1039
 102 run: val:location <- next-ingredient 
9999 mem: storing 34 in location 1040
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1039 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1068
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1070
 103 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1070 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1070 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 0
9999 mem: storing 0 in location 1071
 103 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 1071 is 0
9999 mem: storing 1 in location 1071
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1070 is 1031
 104 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1099
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1101
 104 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1101 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1101 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 1102
 104 run: result:number <- length q:address:array:location/deref
9999 mem: location 1102 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1102 is 1034
9999 mem: storing 2 in location 1103
 104 run: reply result:number
9999 mem: location 1103 is 2
9999 run: result 0 is 2
9999 mem: storing 2 in location 1072
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1071 is 1
9999 mem: location 1072 is 2
9999 mem: storing 0 in location 1073
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1073 is 0
9999 run: jumping to instruction 9
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1070 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1070 is 1031
9999 run: address to copy is 1031
9999 run: its type is 1
9999 mem: location 1031 is 0
9999 mem: storing 0 in location 1074
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1074 is 0
9999 mem: location 1071 is 1
9999 mem: storing 0 in location 1075
 103 run: reply result:boolean
9999 mem: location 1075 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1041
 102 run: break-unless full:boolean, 
9999 mem: location 1041 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1039 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1039 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 1043
 102 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 1039 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1039 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1044
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 1043 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1044 is 1032
9999 mem: location 1032 is 0
9999 mem: location 1043 is 1034
9999 mem: location 1044 is 1032
9999 mem: location 1032 is 0
9999 mem: storing 1035 in location 1045
 102 run: dest:address:location/deref <- copy val:location
9999 mem: location 1040 is 34
9999 mem: location 1045 is 1035
9999 mem: storing 34 in location 1035
 102 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 1044 is 1032
9999 mem: location 1032 is 0
9999 mem: location 1044 is 1032
9999 mem: storing 1 in location 1032
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 1043 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1035 is 34
9999 mem: location 1036 is 0
9999 mem: location 1043 is 1034
9999 mem: storing 2 in location 1046
 102 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 1044 is 1032
9999 mem: location 1032 is 1
9999 mem: location 1046 is 2
9999 mem: storing 0 in location 1047
 102 run: break-unless at-end?:boolean, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 19
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1039 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 1
 101 run: _, 1:address:channel <- read 1:address:channel
9999 mem: location 1 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1130
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1132
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 1132 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1161
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1163
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1163 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1163 is 1031
9999 run: address to copy is 1031
9999 run: its type is 1
9999 mem: location 1031 is 0
9999 mem: storing 0 in location 1164
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1163 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1163 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 1
9999 mem: storing 1 in location 1165
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1164 is 0
9999 mem: location 1165 is 1
9999 mem: storing 0 in location 1166
 103 run: reply result:boolean
9999 mem: location 1166 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1133
 102 run: break-unless empty:boolean, 
9999 mem: location 1133 is 0
9999 run: jumping to instruction 7
 102 run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
9999 mem: location 1132 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1132 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1135
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1132 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1132 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 1136
 102 run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
9999 mem: location 1136 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1035 is 34
9999 mem: location 1036 is 0
9999 mem: location 1135 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1136 is 1034
9999 mem: location 1135 is 1031
9999 mem: location 1031 is 0
9999 run: address to copy is 1035
9999 run: its type is 1
9999 mem: location 1035 is 34
9999 mem: storing 34 in location 1137
 102 run: full:address:number/deref <- add full:address:number/deref, 1:literal
9999 mem: location 1135 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1135 is 1031
9999 mem: storing 1 in location 1031
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 1136 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1035 is 34
9999 mem: location 1036 is 0
9999 mem: location 1136 is 1034
9999 mem: storing 2 in location 1138
 102 run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
9999 mem: location 1135 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1138 is 2
9999 mem: storing 0 in location 1139
 102 run: break-unless at-end?:boolean, 
9999 mem: location 1139 is 0
9999 run: jumping to instruction 17
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 1137 is 34
9999 mem: location 1132 is 1031
9999 run: result 0 is 34
9999 run: result 1 is 1031
9999 mem: storing 1031 in location 1
 101 run: 2:number <- get 1:address:channel/deref, first-free:offset
9999 mem: location 1 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 1
9999 mem: storing 1 in location 2
 101 run: 3:number <- get 1:address:channel/deref, first-free:offset
9999 mem: location 1 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 1
9999 mem: storing 1 in location 3
 101 run: 1:address:channel <- write 1:address:channel, 34:literal
9999 mem: location 1 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1192
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1194
 102 run: val:location <- next-ingredient 
9999 mem: storing 34 in location 1195
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1194 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1223
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1225
 103 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1225 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1225 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 1
9999 mem: storing 1 in location 1226
 103 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 1226 is 1
9999 mem: storing 2 in location 1226
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1225 is 1031
 104 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1254
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1256
 104 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1256 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1256 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 1257
 104 run: result:number <- length q:address:array:location/deref
9999 mem: location 1257 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1035 is 34
9999 mem: location 1036 is 0
9999 mem: location 1257 is 1034
9999 mem: storing 2 in location 1258
 104 run: reply result:number
9999 mem: location 1258 is 2
9999 run: result 0 is 2
9999 mem: storing 2 in location 1227
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1226 is 2
9999 mem: location 1227 is 2
9999 mem: storing 1 in location 1228
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1228 is 1
9999 run: jump-unless fell through
 103 run: tmp:number <- copy 0:literal
9999 mem: storing 0 in location 1226
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1225 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1225 is 1031
9999 run: address to copy is 1031
9999 run: its type is 1
9999 mem: location 1031 is 1
9999 mem: storing 1 in location 1229
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1229 is 1
9999 mem: location 1226 is 0
9999 mem: storing 0 in location 1230
 103 run: reply result:boolean
9999 mem: location 1230 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1196
 102 run: break-unless full:boolean, 
9999 mem: location 1196 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1194 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1194 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 1198
 102 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 1194 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1194 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1199
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 1198 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1035 is 34
9999 mem: location 1036 is 0
9999 mem: location 1199 is 1032
9999 mem: location 1032 is 1
9999 mem: location 1198 is 1034
9999 mem: location 1199 is 1032
9999 mem: location 1032 is 1
9999 mem: storing 1036 in location 1200
 102 run: dest:address:location/deref <- copy val:location
9999 mem: location 1195 is 34
9999 mem: location 1200 is 1036
9999 mem: storing 34 in location 1036
 102 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 1199 is 1032
9999 mem: location 1032 is 1
9999 mem: location 1199 is 1032
9999 mem: storing 2 in location 1032
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 1198 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1035 is 34
9999 mem: location 1036 is 34
9999 mem: location 1198 is 1034
9999 mem: storing 2 in location 1201
 102 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 1199 is 1032
9999 mem: location 1032 is 2
9999 mem: location 1201 is 2
9999 mem: storing 1 in location 1202
 102 run: break-unless at-end?:boolean, 
9999 mem: location 1202 is 1
9999 run: jump-unless fell through
 102 run: free:address:number/deref <- copy 0:literal
9999 mem: location 1199 is 1032
9999 mem: storing 0 in location 1032
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1194 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 1
 101 run: 4:number <- get 1:address:channel/deref, first-free:offset
9999 mem: location 1 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 0
9999 mem: storing 0 in location 4
 101 run: _, 1:address:channel <- read 1:address:channel
9999 mem: location 1 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1285
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1287
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 1287 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1316
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1318
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1318 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1318 is 1031
9999 run: address to copy is 1031
9999 run: its type is 1
9999 mem: location 1031 is 1
9999 mem: storing 1 in location 1319
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1318 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1318 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 0
9999 mem: storing 0 in location 1320
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1319 is 1
9999 mem: location 1320 is 0
9999 mem: storing 0 in location 1321
 103 run: reply result:boolean
9999 mem: location 1321 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1288
 102 run: break-unless empty:boolean, 
9999 mem: location 1288 is 0
9999 run: jumping to instruction 7
 102 run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
9999 mem: location 1287 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1287 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1290
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1287 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1287 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 1291
 102 run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
9999 mem: location 1291 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1035 is 34
9999 mem: location 1036 is 34
9999 mem: location 1290 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1291 is 1034
9999 mem: location 1290 is 1031
9999 mem: location 1031 is 1
9999 run: address to copy is 1036
9999 run: its type is 1
9999 mem: location 1036 is 34
9999 mem: storing 34 in location 1292
 102 run: full:address:number/deref <- add full:address:number/deref, 1:literal
9999 mem: location 1290 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1290 is 1031
9999 mem: storing 2 in location 1031
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 1291 is 1034
9999 mem: location 1034 is 2
9999 mem: location 1035 is 34
9999 mem: location 1036 is 34
9999 mem: location 1291 is 1034
9999 mem: storing 2 in location 1293
 102 run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
9999 mem: location 1290 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1293 is 2
9999 mem: storing 1 in location 1294
 102 run: break-unless at-end?:boolean, 
9999 mem: location 1294 is 1
9999 run: jump-unless fell through
 102 run: full:address:number/deref <- copy 0:literal
9999 mem: location 1290 is 1031
9999 mem: storing 0 in location 1031
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 1292 is 34
9999 mem: location 1287 is 1031
9999 run: result 0 is 34
9999 run: result 1 is 1031
9999 mem: storing 1031 in location 1
 101 run: 5:number <- get 1:address:channel/deref, first-full:offset
9999 mem: location 1 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1 is 1031
9999 run: address to copy is 1031
9999 run: its type is 1
9999 mem: location 1031 is 0
9999 mem: storing 0 in location 5
 100 run: memory-should-contain [
    2 <- 1  # first-free after first write
    3 <- 1  # first-full after first read
    4 <- 0  # first-free after second write, wrapped
    5 <- 0  # first-full after second read, wrapped
  ]
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
