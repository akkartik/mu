9991 parse: --- defining scenario-channel-wrap
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    # channel with just 1 slot\n    1:address:channel <- new-channel 1/capacity\n    # write and read a value\n    1:address:channel <- write 1:address:channel, 34\n    _, 1:address:channel <- read 1:address:channel\n    # first-free will now be 1\n    2:number <- get *1:address:channel, first-free:offset\n    3:number <- get *1:address:channel, first-free:offset\n    # write second value, verify that first-free wraps\n    1:address:channel <- write 1:address:channel, 34\n    4:number <- get *1:address:channel, first-free:offset\n    # read second value, verify that first-full wraps\n    _, 1:address:channel <- read 1:address:channel\n    5:number <- get *1:address:channel, first-full:offset\n  ": "literal-string"}
9992 load: after rewriting: run [
    # channel with just 1 slot
    1:address:channel <- new-channel 1/capacity
    # write and read a value
    1:address:channel <- write 1:address:channel, 34
    _, 1:address:channel <- read 1:address:channel
    # first-free will now be 1
    2:number <- get *1:address:channel, first-free:offset
    3:number <- get *1:address:channel, first-free:offset
    # write second value, verify that first-free wraps
    1:address:channel <- write 1:address:channel, 34
    4:number <- get *1:address:channel, first-free:offset
    # read second value, verify that first-full wraps
    _, 1:address:channel <- read 1:address:channel
    5:number <- get *1:address:channel, first-full:offset
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2 <- 1  # first-free after first write\n    3 <- 1  # first-full after first read\n    4 <- 0  # first-free after second write, wrapped\n    5 <- 0  # first-full after second read, wrapped\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2 <- 1  # first-free after first write
    3 <- 1  # first-full after first read
    4 <- 0  # first-free after second write, wrapped
    5 <- 0  # first-full after second read, wrapped
  ]
9999 parse: recipe scenario-channel-wrap has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-channel-wrap
9991 transform: --- transform braces for recipe scenario-channel-wrap
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- deduce types for recipe scenario-channel-wrap
9991 transform: --- resolve ambiguous calls for recipe scenario-channel-wrap
9991 transform: --- collect surrounding spaces for recipe scenario-channel-wrap
9991 transform: --- transform names for recipe scenario-channel-wrap
9991 transform: --- compute instruction operations for recipe scenario-channel-wrap
9991 transform: --- perform checks for recipe scenario-channel-wrap
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-channel-wrap
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-channel-wrap
 102 run: run [
    # channel with just 1 slot
    1:address:channel <- new-channel 1/capacity
    # write and read a value
    1:address:channel <- write 1:address:channel, 34
    _, 1:address:channel <- read 1:address:channel
    # first-free will now be 1
    2:number <- get *1:address:channel, first-free:offset
    3:number <- get *1:address:channel, first-free:offset
    # write second value, verify that first-free wraps
    1:address:channel <- write 1:address:channel, 34
    4:number <- get *1:address:channel, first-free:offset
    # read second value, verify that first-full wraps
    _, 1:address:channel <- read 1:address:channel
    5:number <- get *1:address:channel, first-full:offset
  ]
9991 parse: --- defining run1001
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": "literal", "capacity": <>}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- new-channel 1/capacity
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- write 1:address:channel, 34
9993 parse: instruction: read
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   product: {"_": "dummy"}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: _, 1:address:channel <- read 1:address:channel
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"first-free": "offset"}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- get *1:address:channel, first-free:offset
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"first-free": "offset"}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- get *1:address:channel, first-free:offset
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- write 1:address:channel, 34
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"first-free": "offset"}
9993 parse:   product: {"4": "number"}
9992 load: after rewriting: 4:number <- get *1:address:channel, first-free:offset
9993 parse: instruction: read
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   product: {"_": "dummy"}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: _, 1:address:channel <- read 1:address:channel
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"first-full": "offset"}
9993 parse:   product: {"5": "number"}
9992 load: after rewriting: 5:number <- get *1:address:channel, first-full:offset
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: new-channel ...
9992 transform: write ...
9992 transform: read ...
9992 transform: get ...
9992 transform: get ...
9992 transform: write ...
9992 transform: get ...
9992 transform: read ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- deduce types for recipe run1001
9991 transform: --- resolve ambiguous calls for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9993 name: element first-free of type channel is at offset 1
9993 name: element first-free of type channel is at offset 1
9993 name: element first-free of type channel is at offset 1
9993 name: element first-full of type channel is at offset 0
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:channel <- new-channel 1/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 104 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1002
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9998 run: address to copy is 1007
9999 mem: storing 1007 in location 1003
 104 run: *full <- copy 0
9999 mem: location 1003 is 1007
9999 mem: storing 0 in location 1007
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1004
 104 run: *free <- copy 0
9999 mem: location 1004 is 1008
9999 mem: storing 0 in location 1008
 104 run: capacity:number <- next-ingredient 
9999 mem: storing 1 in location 1005
 104 run: capacity <- add capacity, 1
9999 mem: location 1005 is 1
9999 mem: storing 2 in location 1005
 104 run: dest:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 104 run: *dest <- new character:type, capacity
9999 mem: location 1005 is 2
9999 mem: array size is 2
9999 mem: new alloc: 1010
9999 mem: location 1006 is 1009
9999 mem: storing 1010 in location 1009
 104 run: reply result
9999 mem: location 1002 is 1007
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: 1:address:channel <- write 1:address:channel, 34
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1013
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1015
 104 run: val:character <- next-ingredient 
9999 mem: storing 34 in location 1016
 104 run: full:boolean <- channel-full? chan
9999 mem: location 1015 is 1007
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1024
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1026
 105 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1026 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1026 is 1007
9998 run: address to copy is 1008
9998 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1027
 105 run: tmp <- add tmp, 1
9999 mem: location 1027 is 0
9999 mem: storing 1 in location 1027
 105 run: len:number <- channel-capacity chan
9999 mem: location 1026 is 1007
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1032
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1034
 106 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1034 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1034 is 1007
9998 run: address to copy is 1009
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1035
 106 run: result:number <- length *q
9999 mem: location 1035 is 1010
9999 mem: storing 2 in location 1036
 106 run: reply result
9999 mem: location 1036 is 2
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 2
9999 mem: storing 2 in location 1028
 105 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1027 is 1
9999 mem: location 1028 is 2
9999 mem: storing 0 in location 1029
 105 run: jump-unless at-end?, 
9999 mem: location 1029 is 0
9998 run: jumping to instruction 9
 105 run: full:number <- get *chan, first-full:offset
9999 mem: location 1026 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1026 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1030
 105 run: result:boolean <- equal full, tmp
9999 mem: location 1030 is 0
9999 mem: location 1027 is 1
9999 mem: storing 0 in location 1031
 105 run: reply result
9999 mem: location 1031 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1017
 104 run: jump-unless full, 
9999 mem: location 1017 is 0
9998 run: jumping to instruction 8
 104 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1015 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1015 is 1007
9998 run: address to copy is 1009
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1019
 104 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1015 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1015 is 1007
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1020
 104 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1019 is 1010
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 0
9999 mem: storing 1011 in location 1021
 104 run: *dest <- copy val
9999 mem: location 1016 is 34
9999 mem: location 1021 is 1011
9999 mem: storing 34 in location 1011
 104 run: *free <- add *free, 1
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1020 is 1008
9999 mem: storing 1 in location 1008
 104 run: len:number <- length *circular-buffer
9999 mem: location 1019 is 1010
9999 mem: storing 2 in location 1022
 104 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1022 is 2
9999 mem: storing 0 in location 1023
 104 run: jump-unless at-end?, 
9999 mem: location 1023 is 0
9998 run: jumping to instruction 19
 104 run: reply chan/same-as-ingredient:0
9999 mem: location 1015 is 1007
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: _, 1:address:channel <- read 1:address:channel
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1037
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1039
 104 run: empty?:boolean <- channel-empty? chan
9999 mem: location 1039 is 1007
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1047
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1049
 105 run: full:number <- get *chan, first-full:offset
9999 mem: location 1049 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1049 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1050
 105 run: free:number <- get *chan, first-free:offset
9999 mem: location 1049 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1049 is 1007
9998 run: address to copy is 1008
9998 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 1051
 105 run: result:boolean <- equal full, free
9999 mem: location 1050 is 0
9999 mem: location 1051 is 1
9999 mem: storing 0 in location 1052
 105 run: reply result
9999 mem: location 1052 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1040
 104 run: jump-unless empty?, 
9999 mem: location 1040 is 0
9998 run: jumping to instruction 7
 104 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9998 run: address to copy is 1007
9999 mem: storing 1007 in location 1042
 104 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9998 run: address to copy is 1009
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1043
 104 run: result:character <- index *circular-buffer, *full
9999 mem: location 1043 is 1010
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 0
9998 run: address to copy is 1011
9998 run: its type is character
9999 mem: location 1011 is 34
9999 mem: storing 34 in location 1044
 104 run: *full <- add *full, 1
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1042 is 1007
9999 mem: storing 1 in location 1007
 104 run: len:number <- length *circular-buffer
9999 mem: location 1043 is 1010
9999 mem: storing 2 in location 1045
 104 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1045 is 2
9999 mem: storing 0 in location 1046
 104 run: jump-unless at-end?, 
9999 mem: location 1046 is 0
9998 run: jumping to instruction 17
 104 run: reply result, chan/same-as-ingredient:0
9999 mem: location 1044 is 34
9999 mem: location 1039 is 1007
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 34
9998 run: result 1 is 1007
9999 mem: storing 1007 in location 1
 103 run: 2:number <- get *1:address:channel, first-free:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9998 run: address to copy is 1008
9998 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 2
 103 run: 3:number <- get *1:address:channel, first-free:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9998 run: address to copy is 1008
9998 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 3
 103 run: 1:address:channel <- write 1:address:channel, 34
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1015
 104 run: val:character <- next-ingredient 
9999 mem: storing 34 in location 1016
 104 run: full:boolean <- channel-full? chan
9999 mem: location 1015 is 1007
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1026
 105 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1026 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1026 is 1007
9998 run: address to copy is 1008
9998 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 1027
 105 run: tmp <- add tmp, 1
9999 mem: location 1027 is 1
9999 mem: storing 2 in location 1027
 105 run: len:number <- channel-capacity chan
9999 mem: location 1026 is 1007
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1034
 106 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1034 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1034 is 1007
9998 run: address to copy is 1009
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1035
 106 run: result:number <- length *q
9999 mem: location 1035 is 1010
9999 mem: storing 2 in location 1036
 106 run: reply result
9999 mem: location 1036 is 2
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 2
9999 mem: storing 2 in location 1028
 105 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1027 is 2
9999 mem: location 1028 is 2
9999 mem: storing 1 in location 1029
 105 run: jump-unless at-end?, 
9999 mem: location 1029 is 1
9998 run: jump-unless fell through
 105 run: tmp <- copy 0
9999 mem: storing 0 in location 1027
 105 run: full:number <- get *chan, first-full:offset
9999 mem: location 1026 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1026 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 1
9999 mem: storing 1 in location 1030
 105 run: result:boolean <- equal full, tmp
9999 mem: location 1030 is 1
9999 mem: location 1027 is 0
9999 mem: storing 0 in location 1031
 105 run: reply result
9999 mem: location 1031 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1017
 104 run: jump-unless full, 
9999 mem: location 1017 is 0
9998 run: jumping to instruction 8
 104 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1015 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1015 is 1007
9998 run: address to copy is 1009
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1019
 104 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1015 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1015 is 1007
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1020
 104 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1019 is 1010
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 1
9999 mem: storing 1012 in location 1021
 104 run: *dest <- copy val
9999 mem: location 1016 is 34
9999 mem: location 1021 is 1012
9999 mem: storing 34 in location 1012
 104 run: *free <- add *free, 1
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1020 is 1008
9999 mem: storing 2 in location 1008
 104 run: len:number <- length *circular-buffer
9999 mem: location 1019 is 1010
9999 mem: storing 2 in location 1022
 104 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1020 is 1008
9999 mem: location 1008 is 2
9999 mem: location 1022 is 2
9999 mem: storing 1 in location 1023
 104 run: jump-unless at-end?, 
9999 mem: location 1023 is 1
9998 run: jump-unless fell through
 104 run: *free <- copy 0
9999 mem: location 1020 is 1008
9999 mem: storing 0 in location 1008
 104 run: reply chan/same-as-ingredient:0
9999 mem: location 1015 is 1007
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: 4:number <- get *1:address:channel, first-free:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9998 run: address to copy is 1008
9998 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 4
 103 run: _, 1:address:channel <- read 1:address:channel
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1039
 104 run: empty?:boolean <- channel-empty? chan
9999 mem: location 1039 is 1007
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1049
 105 run: full:number <- get *chan, first-full:offset
9999 mem: location 1049 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1049 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 1
9999 mem: storing 1 in location 1050
 105 run: free:number <- get *chan, first-free:offset
9999 mem: location 1049 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1049 is 1007
9998 run: address to copy is 1008
9998 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1051
 105 run: result:boolean <- equal full, free
9999 mem: location 1050 is 1
9999 mem: location 1051 is 0
9999 mem: storing 0 in location 1052
 105 run: reply result
9999 mem: location 1052 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1040
 104 run: jump-unless empty?, 
9999 mem: location 1040 is 0
9998 run: jumping to instruction 7
 104 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9998 run: address to copy is 1007
9999 mem: storing 1007 in location 1042
 104 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9998 run: address to copy is 1009
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1043
 104 run: result:character <- index *circular-buffer, *full
9999 mem: location 1043 is 1010
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 1
9998 run: address to copy is 1012
9998 run: its type is character
9999 mem: location 1012 is 34
9999 mem: storing 34 in location 1044
 104 run: *full <- add *full, 1
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1042 is 1007
9999 mem: storing 2 in location 1007
 104 run: len:number <- length *circular-buffer
9999 mem: location 1043 is 1010
9999 mem: storing 2 in location 1045
 104 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 1042 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1045 is 2
9999 mem: storing 1 in location 1046
 104 run: jump-unless at-end?, 
9999 mem: location 1046 is 1
9998 run: jump-unless fell through
 104 run: *full <- copy 0
9999 mem: location 1042 is 1007
9999 mem: storing 0 in location 1007
 104 run: reply result, chan/same-as-ingredient:0
9999 mem: location 1044 is 34
9999 mem: location 1039 is 1007
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 34
9998 run: result 1 is 1007
9999 mem: storing 1007 in location 1
 103 run: 5:number <- get *1:address:channel, first-full:offset
9999 mem: location 1 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 5
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    2 <- 1  # first-free after first write
    3 <- 1  # first-full after first read
    4 <- 0  # first-free after second write, wrapped
    5 <- 0  # first-full after second read, wrapped
  ]
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
