parse: instruction: run
parse:   ingredient: {name: "
    # channel with just 1 slot
    1:address:channel <- init-channel 1:literal/capacity
    # write and read a value
    1:address:channel <- write 1:address:channel, 34:literal
    _, 1:address:channel <- read 1:address:channel
    # first-free will now be 1
    2:number <- get 1:address:channel/deref, first-free:offset
    3:number <- get 1:address:channel/deref, first-free:offset
    # write second value, verify that first-free wraps
    1:address:channel <- write 1:address:channel, 34:literal
    4:number <- get 1:address:channel/deref, first-free:offset
    # read second value, verify that first-full wraps
    _, 1:address:channel <- read 1:address:channel
    5:number <- get 1:address:channel/deref, first-full:offset
  ", value: 0, type: 0, properties: ["
    # channel with just 1 slot
    1:address:channel <- init-channel 1:literal/capacity
    # write and read a value
    1:address:channel <- write 1:address:channel, 34:literal
    _, 1:address:channel <- read 1:address:channel
    # first-free will now be 1
    2:number <- get 1:address:channel/deref, first-free:offset
    3:number <- get 1:address:channel/deref, first-free:offset
    # write second value, verify that first-free wraps
    1:address:channel <- write 1:address:channel, 34:literal
    4:number <- get 1:address:channel/deref, first-free:offset
    # read second value, verify that first-full wraps
    _, 1:address:channel <- read 1:address:channel
    5:number <- get 1:address:channel/deref, first-full:offset
  ": "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    2 <- 1  # first-free after first write
    3 <- 1  # first-full after first read
    4 <- 0  # first-free after second write, wrapped
    5 <- 0  # first-full after second read, wrapped
  ", value: 0, type: 0, properties: ["
    2 <- 1  # first-free after first write
    3 <- 1  # first-full after first read
    4 <- 0  # first-free after second write, wrapped
    5 <- 0  # first-full after second read, wrapped
  ": "literal-string"]}
after-brace: recipe channel-wrap
after-brace: run ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: channel-wrap
run: instruction channel-wrap/0
run: run/55 {name: "
    # channel with just 1 slot
    1:address:channel <- init-channel 1:literal/capacity
    # write and read a value
    1:address:channel <- write 1:address:channel, 34:literal
    _, 1:address:channel <- read 1:address:channel
    # first-free will now be 1
    2:number <- get 1:address:channel/deref, first-free:offset
    3:number <- get 1:address:channel/deref, first-free:offset
    # write second value, verify that first-free wraps
    1:address:channel <- write 1:address:channel, 34:literal
    4:number <- get 1:address:channel/deref, first-free:offset
    # read second value, verify that first-full wraps
    _, 1:address:channel <- read 1:address:channel
    5:number <- get 1:address:channel/deref, first-full:offset
  ", value: 0, type: 0, properties: ["
    # channel with just 1 slot
    1:address:channel <- init-channel 1:literal/capacity
    # write and read a value
    1:address:channel <- write 1:address:channel, 34:literal
    _, 1:address:channel <- read 1:address:channel
    # first-free will now be 1
    2:number <- get 1:address:channel/deref, first-free:offset
    3:number <- get 1:address:channel/deref, first-free:offset
    # write second value, verify that first-free wraps
    1:address:channel <- write 1:address:channel, 34:literal
    4:number <- get 1:address:channel/deref, first-free:offset
    # read second value, verify that first-full wraps
    _, 1:address:channel <- read 1:address:channel
    5:number <- get 1:address:channel/deref, first-full:offset
  ": "literal-string"]}
run: ingredient 0 is 
    # channel with just 1 slot
    1:address:channel <- init-channel 1:literal/capacity
    # write and read a value
    1:address:channel <- write 1:address:channel, 34:literal
    _, 1:address:channel <- read 1:address:channel
    # first-free will now be 1
    2:number <- get 1:address:channel/deref, first-free:offset
    3:number <- get 1:address:channel/deref, first-free:offset
    # write second value, verify that first-free wraps
    1:address:channel <- write 1:address:channel, 34:literal
    4:number <- get 1:address:channel/deref, first-free:offset
    # read second value, verify that first-full wraps
    _, 1:address:channel <- read 1:address:channel
    5:number <- get 1:address:channel/deref, first-full:offset
  
parse: instruction: init-channel
parse:   ingredient: {name: "1", value: 0, type: 0, properties: ["1": "literal", "capacity": ]}
parse:   product: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel"]}
parse: instruction: write
parse:   ingredient: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "34", value: 0, type: 0, properties: ["34": "literal"]}
parse:   product: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel"]}
parse: instruction: read
parse:   ingredient: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel"]}
parse:   product: {name: "_", value: 0, type: 0, properties: ["_": "dummy"]}
parse:   product: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel"]}
parse: instruction: get
parse:   ingredient: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel", "deref": ]}
parse:   ingredient: {name: "first-free", value: 0, type: 0, properties: ["first-free": "offset"]}
parse:   product: {name: "2", value: 0, type: 1, properties: ["2": "number"]}
parse: instruction: get
parse:   ingredient: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel", "deref": ]}
parse:   ingredient: {name: "first-free", value: 0, type: 0, properties: ["first-free": "offset"]}
parse:   product: {name: "3", value: 0, type: 1, properties: ["3": "number"]}
parse: instruction: write
parse:   ingredient: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "34", value: 0, type: 0, properties: ["34": "literal"]}
parse:   product: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel"]}
parse: instruction: get
parse:   ingredient: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel", "deref": ]}
parse:   ingredient: {name: "first-free", value: 0, type: 0, properties: ["first-free": "offset"]}
parse:   product: {name: "4", value: 0, type: 1, properties: ["4": "number"]}
parse: instruction: read
parse:   ingredient: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel"]}
parse:   product: {name: "_", value: 0, type: 0, properties: ["_": "dummy"]}
parse:   product: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel"]}
parse: instruction: get
parse:   ingredient: {name: "1", value: 0, type: 2-11, properties: ["1": "address":"channel", "deref": ]}
parse:   ingredient: {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
parse:   product: {name: "5", value: 0, type: 1, properties: ["5": "number"]}
name: element first-free of type channel is at offset 1
name: element first-free of type channel is at offset 1
name: element first-free of type channel is at offset 1
name: element first-full of type channel is at offset 0
after-brace: recipe run1001
after-brace: init-channel ...
after-brace: write ...
after-brace: read ...
after-brace: get ...
after-brace: get ...
after-brace: write ...
after-brace: get ...
after-brace: read ...
after-brace: get ...
run: instruction run1001/0
run: {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel"]} <- init-channel/108 {name: "1", value: 1, type: 0, properties: ["1": "literal", "capacity": ]}
run: ingredient 0 is 1
run: instruction init-channel/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1000
run: product 0 is default-space
run: instruction init-channel/1
run: {name: "result", value: 1, type: 2-11, properties: ["result": "address":"channel"]} <- new/52 {name: "channel", value: 11, type: 0, properties: ["channel": "type"]}
run: ingredient 0 is channel
mem: new alloc: 1031
run: product 0 is result
mem: storing 1031 in location 1002
run: instruction init-channel/2
run: {name: "full", value: 2, type: 2-1, properties: ["full": "address":"number"]} <- get-address/29 {name: "result", value: 1, type: 2-11, properties: ["result": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run: ingredient 0 is result
mem: location 1002 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 0
run: ingredient 1 is first-full
mem: location 1002 is 1031
run: address to copy is 1031
run: product 0 is full
mem: storing 1031 in location 1003
run: instruction init-channel/3
run: {name: "full", value: 2, type: 2-1, properties: ["full": "address":"number", "deref": ]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run: ingredient 0 is 0
run: product 0 is full
mem: location 1003 is 1031
mem: storing 0 in location 1031
run: instruction init-channel/4
run: {name: "free", value: 3, type: 2-1, properties: ["free": "address":"number"]} <- get-address/29 {name: "result", value: 1, type: 2-11, properties: ["result": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run: ingredient 0 is result
mem: location 1002 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 0
run: ingredient 1 is first-free
mem: location 1002 is 1031
run: address to copy is 1032
run: product 0 is free
mem: storing 1032 in location 1004
run: instruction init-channel/5
run: {name: "free", value: 3, type: 2-1, properties: ["free": "address":"number", "deref": ]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run: ingredient 0 is 0
run: product 0 is free
mem: location 1004 is 1032
mem: storing 0 in location 1032
run: instruction init-channel/6
run: {name: "capacity", value: 4, type: 1, properties: ["capacity": "number"]} <- next-ingredient/34 
run: product 0 is capacity
mem: storing 1 in location 1005
run: instruction init-channel/7
run: {name: "capacity", value: 4, type: 1, properties: ["capacity": "number"]} <- add/2 {name: "capacity", value: 4, type: 1, properties: ["capacity": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is capacity
mem: location 1005 is 1
run: ingredient 1 is 1
run: product 0 is capacity
mem: storing 2 in location 1005
run: instruction init-channel/8
run: {name: "dest", value: 5, type: 2-2-5-1, properties: ["dest": "address":"address":"array":"location"]} <- get-address/29 {name: "result", value: 1, type: 2-11, properties: ["result": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run: ingredient 0 is result
mem: location 1002 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 0
run: ingredient 1 is data
mem: location 1002 is 1031
run: address to copy is 1033
run: product 0 is dest
mem: storing 1033 in location 1006
run: instruction init-channel/9
run: {name: "dest", value: 5, type: 2-2-5-1, properties: ["dest": "address":"address":"array":"location", "deref": ]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "capacity", value: 4, type: 1, properties: ["capacity": "number"]}
run: ingredient 0 is location
run: ingredient 1 is capacity
mem: location 1005 is 2
mem: array size is 2
mem: new alloc: 1034
run: product 0 is dest
mem: location 1006 is 1033
mem: storing 1034 in location 1033
run: instruction init-channel/10
run: reply/37 {name: "result", value: 1, type: 2-11, properties: ["result": "address":"channel"]}
run: ingredient 0 is result
mem: location 1002 is 1031
run: result 0 is 1031
run: product 0 is 1
mem: storing 1031 in location 1
run: instruction run1001/1
run: {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel"]} <- write/109 {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel"]}, {name: "34", value: 34, type: 0, properties: ["34": "literal"]}
run: ingredient 0 is 1
mem: location 1 is 1031
run: ingredient 1 is 34
run: instruction write/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1037
run: product 0 is default-space
run: instruction write/1
run: {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]} <- next-ingredient/34 
run: product 0 is chan
mem: storing 1031 in location 1039
run: instruction write/2
run: {name: "val", value: 2, type: 1, properties: ["val": "location"]} <- next-ingredient/34 
run: product 0 is val
mem: storing 34 in location 1040
run: instruction write/4
run: {name: "full", value: 3, type: 3, properties: ["full": "boolean"]} <- channel-full?/110 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]}
run: ingredient 0 is chan
mem: location 1039 is 1031
run: instruction channel-full?/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1068
run: product 0 is default-space
run: instruction channel-full?/1
run: {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]} <- next-ingredient/34 
run: product 0 is chan
mem: storing 1031 in location 1070
run: instruction channel-full?/2
run: {name: "tmp", value: 2, type: 1, properties: ["tmp": "number"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run: ingredient 0 is chan
mem: location 1070 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 1034
run: ingredient 1 is first-free
mem: location 1070 is 1031
run: address to copy is 1032
run: its type is 1
mem: location 1032 is 0
run: product 0 is tmp
mem: storing 0 in location 1071
run: instruction channel-full?/3
run: {name: "tmp", value: 2, type: 1, properties: ["tmp": "number"]} <- add/2 {name: "tmp", value: 2, type: 1, properties: ["tmp": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is tmp
mem: location 1071 is 0
run: ingredient 1 is 1
run: product 0 is tmp
mem: storing 1 in location 1071
run: instruction channel-full?/5
run: {name: "len", value: 3, type: 1, properties: ["len": "number"]} <- channel-capacity/114 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]}
run: ingredient 0 is chan
mem: location 1070 is 1031
run: instruction channel-capacity/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1099
run: product 0 is default-space
run: instruction channel-capacity/1
run: {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]} <- next-ingredient/34 
run: product 0 is chan
mem: storing 1031 in location 1101
run: instruction channel-capacity/2
run: {name: "q", value: 2, type: 2-5-1, properties: ["q": "address":"array":"location"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run: ingredient 0 is chan
mem: location 1101 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 1034
run: ingredient 1 is data
mem: location 1101 is 1031
run: address to copy is 1033
run: its type is 2
mem: location 1033 is 1034
run: product 0 is q
mem: storing 1034 in location 1102
run: instruction channel-capacity/3
run: {name: "result", value: 3, type: 1, properties: ["result": "number"]} <- length/32 {name: "q", value: 2, type: 2-5-1, properties: ["q": "address":"array":"location", "deref": ]}
run: ingredient 0 is q
mem: location 1102 is 1034
mem: location 1034 is 2
mem: location 1035 is 0
mem: location 1036 is 0
mem: location 1102 is 1034
run: product 0 is result
mem: storing 2 in location 1103
run: instruction channel-capacity/4
run: reply/37 {name: "result", value: 3, type: 1, properties: ["result": "number"]}
run: ingredient 0 is result
mem: location 1103 is 2
run: result 0 is 2
run: product 0 is len
mem: storing 2 in location 1072
run: instruction channel-full?/6
run: {name: "at-end?", value: 4, type: 3, properties: ["at-end?": "boolean"]} <- greater-or-equal/16 {name: "tmp", value: 2, type: 1, properties: ["tmp": "number"]}, {name: "len", value: 3, type: 1, properties: ["len": "number"]}
run: ingredient 0 is tmp
mem: location 1071 is 1
run: ingredient 1 is len
mem: location 1072 is 2
run: product 0 is at-end?
mem: storing 0 in location 1073
run: instruction channel-full?/7
run: break-unless/12 {name: "at-end?", value: 4, type: 3, properties: ["at-end?": "boolean"]}, {name: "", value: 1, type: 0, properties: ["": ]}
run: ingredient 0 is at-end?
mem: location 1073 is 0
run: ingredient 1 is 
run: jumping to instruction 9
run: instruction channel-full?/10
run: {name: "full", value: 5, type: 1, properties: ["full": "number"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run: ingredient 0 is chan
mem: location 1070 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 1034
run: ingredient 1 is first-full
mem: location 1070 is 1031
run: address to copy is 1031
run: its type is 1
mem: location 1031 is 0
run: product 0 is full
mem: storing 0 in location 1074
run: instruction channel-full?/11
run: {name: "result", value: 6, type: 3, properties: ["result": "boolean"]} <- equal/13 {name: "full", value: 5, type: 1, properties: ["full": "number"]}, {name: "tmp", value: 2, type: 1, properties: ["tmp": "number"]}
run: ingredient 0 is full
mem: location 1074 is 0
run: ingredient 1 is tmp
mem: location 1071 is 1
run: product 0 is result
mem: storing 0 in location 1075
run: instruction channel-full?/12
run: reply/37 {name: "result", value: 6, type: 3, properties: ["result": "boolean"]}
run: ingredient 0 is result
mem: location 1075 is 0
run: result 0 is 0
run: product 0 is full
mem: storing 0 in location 1041
run: instruction write/5
run: break-unless/12 {name: "full", value: 3, type: 3, properties: ["full": "boolean"]}, {name: "", value: 2, type: 0, properties: ["": ]}
run: ingredient 0 is full
mem: location 1041 is 0
run: ingredient 1 is 
run: jumping to instruction 8
run: instruction write/9
run: {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run: ingredient 0 is chan
mem: location 1039 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 1034
run: ingredient 1 is data
mem: location 1039 is 1031
run: address to copy is 1033
run: its type is 2
mem: location 1033 is 1034
run: product 0 is circular-buffer
mem: storing 1034 in location 1043
run: instruction write/10
run: {name: "free", value: 6, type: 2-1, properties: ["free": "address":"number"]} <- get-address/29 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run: ingredient 0 is chan
mem: location 1039 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 1034
run: ingredient 1 is first-free
mem: location 1039 is 1031
run: address to copy is 1032
run: product 0 is free
mem: storing 1032 in location 1044
run: instruction write/11
run: {name: "dest", value: 7, type: 2-1, properties: ["dest": "address":"location"]} <- index-address/31 {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location", "deref": ]}, {name: "free", value: 6, type: 2-1, properties: ["free": "address":"number", "deref": ]}
run: ingredient 0 is circular-buffer
mem: location 1043 is 1034
mem: location 1034 is 2
mem: location 1035 is 0
mem: location 1036 is 0
run: ingredient 1 is free
mem: location 1044 is 1032
mem: location 1032 is 0
mem: location 1043 is 1034
mem: location 1044 is 1032
mem: location 1032 is 0
run: product 0 is dest
mem: storing 1035 in location 1045
run: instruction write/12
run: {name: "dest", value: 7, type: 2-1, properties: ["dest": "address":"location", "deref": ]} <- copy/1 {name: "val", value: 2, type: 1, properties: ["val": "location"]}
run: ingredient 0 is val
mem: location 1040 is 34
run: product 0 is dest
mem: location 1045 is 1035
mem: storing 34 in location 1035
run: instruction write/13
run: {name: "free", value: 6, type: 2-1, properties: ["free": "address":"number", "deref": ]} <- add/2 {name: "free", value: 6, type: 2-1, properties: ["free": "address":"number", "deref": ]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is free
mem: location 1044 is 1032
mem: location 1032 is 0
run: ingredient 1 is 1
run: product 0 is free
mem: location 1044 is 1032
mem: storing 1 in location 1032
run: instruction write/15
run: {name: "len", value: 8, type: 1, properties: ["len": "number"]} <- length/32 {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location", "deref": ]}
run: ingredient 0 is circular-buffer
mem: location 1043 is 1034
mem: location 1034 is 2
mem: location 1035 is 34
mem: location 1036 is 0
mem: location 1043 is 1034
run: product 0 is len
mem: storing 2 in location 1046
run: instruction write/16
run: {name: "at-end?", value: 9, type: 3, properties: ["at-end?": "boolean"]} <- greater-or-equal/16 {name: "free", value: 6, type: 2-1, properties: ["free": "address":"number", "deref": ]}, {name: "len", value: 8, type: 1, properties: ["len": "number"]}
run: ingredient 0 is free
mem: location 1044 is 1032
mem: location 1032 is 1
run: ingredient 1 is len
mem: location 1046 is 2
run: product 0 is at-end?
mem: storing 0 in location 1047
run: instruction write/17
run: break-unless/12 {name: "at-end?", value: 9, type: 3, properties: ["at-end?": "boolean"]}, {name: "", value: 1, type: 0, properties: ["": ]}
run: ingredient 0 is at-end?
mem: location 1047 is 0
run: ingredient 1 is 
run: jumping to instruction 19
run: instruction write/20
run: reply/37 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "same-as-ingredient": "0"]}
run: ingredient 0 is chan
mem: location 1039 is 1031
run: result 0 is 1031
run: product 0 is 1
mem: storing 1031 in location 1
run: instruction run1001/2
run: {name: "_", value: 0, type: 0, properties: ["_": "dummy"]}, {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel"]} <- read/111 {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel"]}
run: ingredient 0 is 1
mem: location 1 is 1031
run: instruction read/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1130
run: product 0 is default-space
run: instruction read/1
run: {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]} <- next-ingredient/34 
run: product 0 is chan
mem: storing 1031 in location 1132
run: instruction read/3
run: {name: "empty", value: 2, type: 3, properties: ["empty": "boolean"]} <- channel-empty?/112 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]}
run: ingredient 0 is chan
mem: location 1132 is 1031
run: instruction channel-empty?/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1161
run: product 0 is default-space
run: instruction channel-empty?/1
run: {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]} <- next-ingredient/34 
run: product 0 is chan
mem: storing 1031 in location 1163
run: instruction channel-empty?/2
run: {name: "full", value: 2, type: 1, properties: ["full": "number"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run: ingredient 0 is chan
mem: location 1163 is 1031
mem: location 1031 is 0
mem: location 1032 is 1
mem: location 1033 is 1034
run: ingredient 1 is first-full
mem: location 1163 is 1031
run: address to copy is 1031
run: its type is 1
mem: location 1031 is 0
run: product 0 is full
mem: storing 0 in location 1164
run: instruction channel-empty?/3
run: {name: "free", value: 3, type: 1, properties: ["free": "number"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run: ingredient 0 is chan
mem: location 1163 is 1031
mem: location 1031 is 0
mem: location 1032 is 1
mem: location 1033 is 1034
run: ingredient 1 is first-free
mem: location 1163 is 1031
run: address to copy is 1032
run: its type is 1
mem: location 1032 is 1
run: product 0 is free
mem: storing 1 in location 1165
run: instruction channel-empty?/4
run: {name: "result", value: 4, type: 3, properties: ["result": "boolean"]} <- equal/13 {name: "full", value: 2, type: 1, properties: ["full": "number"]}, {name: "free", value: 3, type: 1, properties: ["free": "number"]}
run: ingredient 0 is full
mem: location 1164 is 0
run: ingredient 1 is free
mem: location 1165 is 1
run: product 0 is result
mem: storing 0 in location 1166
run: instruction channel-empty?/5
run: reply/37 {name: "result", value: 4, type: 3, properties: ["result": "boolean"]}
run: ingredient 0 is result
mem: location 1166 is 0
run: result 0 is 0
run: product 0 is empty
mem: storing 0 in location 1133
run: instruction read/4
run: break-unless/12 {name: "empty", value: 2, type: 3, properties: ["empty": "boolean"]}, {name: "", value: 2, type: 0, properties: ["": ]}
run: ingredient 0 is empty
mem: location 1133 is 0
run: ingredient 1 is 
run: jumping to instruction 7
run: instruction read/8
run: {name: "full", value: 4, type: 2-1, properties: ["full": "address":"number"]} <- get-address/29 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run: ingredient 0 is chan
mem: location 1132 is 1031
mem: location 1031 is 0
mem: location 1032 is 1
mem: location 1033 is 1034
run: ingredient 1 is first-full
mem: location 1132 is 1031
run: address to copy is 1031
run: product 0 is full
mem: storing 1031 in location 1135
run: instruction read/9
run: {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run: ingredient 0 is chan
mem: location 1132 is 1031
mem: location 1031 is 0
mem: location 1032 is 1
mem: location 1033 is 1034
run: ingredient 1 is data
mem: location 1132 is 1031
run: address to copy is 1033
run: its type is 2
mem: location 1033 is 1034
run: product 0 is circular-buffer
mem: storing 1034 in location 1136
run: instruction read/10
run: {name: "result", value: 6, type: 1, properties: ["result": "location"]} <- index/30 {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location", "deref": ]}, {name: "full", value: 4, type: 2-1, properties: ["full": "address":"number", "deref": ]}
run: ingredient 0 is circular-buffer
mem: location 1136 is 1034
mem: location 1034 is 2
mem: location 1035 is 34
mem: location 1036 is 0
run: ingredient 1 is full
mem: location 1135 is 1031
mem: location 1031 is 0
mem: location 1136 is 1034
mem: location 1135 is 1031
mem: location 1031 is 0
run: address to copy is 1035
run: its type is 1
mem: location 1035 is 34
run: product 0 is result
mem: storing 34 in location 1137
run: instruction read/11
run: {name: "full", value: 4, type: 2-1, properties: ["full": "address":"number", "deref": ]} <- add/2 {name: "full", value: 4, type: 2-1, properties: ["full": "address":"number", "deref": ]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is full
mem: location 1135 is 1031
mem: location 1031 is 0
run: ingredient 1 is 1
run: product 0 is full
mem: location 1135 is 1031
mem: storing 1 in location 1031
run: instruction read/13
run: {name: "len", value: 7, type: 1, properties: ["len": "number"]} <- length/32 {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location", "deref": ]}
run: ingredient 0 is circular-buffer
mem: location 1136 is 1034
mem: location 1034 is 2
mem: location 1035 is 34
mem: location 1036 is 0
mem: location 1136 is 1034
run: product 0 is len
mem: storing 2 in location 1138
run: instruction read/14
run: {name: "at-end?", value: 8, type: 3, properties: ["at-end?": "boolean"]} <- greater-or-equal/16 {name: "full", value: 4, type: 2-1, properties: ["full": "address":"number", "deref": ]}, {name: "len", value: 7, type: 1, properties: ["len": "number"]}
run: ingredient 0 is full
mem: location 1135 is 1031
mem: location 1031 is 1
run: ingredient 1 is len
mem: location 1138 is 2
run: product 0 is at-end?
mem: storing 0 in location 1139
run: instruction read/15
run: break-unless/12 {name: "at-end?", value: 8, type: 3, properties: ["at-end?": "boolean"]}, {name: "", value: 1, type: 0, properties: ["": ]}
run: ingredient 0 is at-end?
mem: location 1139 is 0
run: ingredient 1 is 
run: jumping to instruction 17
run: instruction read/18
run: reply/37 {name: "result", value: 6, type: 1, properties: ["result": "location"]}, {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "same-as-ingredient": "0"]}
run: ingredient 0 is result
mem: location 1137 is 34
run: ingredient 1 is chan
mem: location 1132 is 1031
run: result 0 is 34
run: result 1 is 1031
run: product 0 is _
run: product 1 is 1
mem: storing 1031 in location 1
run: instruction run1001/3
run: {name: "2", value: 2, type: 1, properties: ["2": "number"]} <- get/28 {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run: ingredient 0 is 1
mem: location 1 is 1031
mem: location 1031 is 1
mem: location 1032 is 1
mem: location 1033 is 1034
run: ingredient 1 is first-free
mem: location 1 is 1031
run: address to copy is 1032
run: its type is 1
mem: location 1032 is 1
run: product 0 is 2
mem: storing 1 in location 2
run: instruction run1001/4
run: {name: "3", value: 3, type: 1, properties: ["3": "number"]} <- get/28 {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run: ingredient 0 is 1
mem: location 1 is 1031
mem: location 1031 is 1
mem: location 1032 is 1
mem: location 1033 is 1034
run: ingredient 1 is first-free
mem: location 1 is 1031
run: address to copy is 1032
run: its type is 1
mem: location 1032 is 1
run: product 0 is 3
mem: storing 1 in location 3
run: instruction run1001/5
run: {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel"]} <- write/109 {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel"]}, {name: "34", value: 34, type: 0, properties: ["34": "literal"]}
run: ingredient 0 is 1
mem: location 1 is 1031
run: ingredient 1 is 34
run: instruction write/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1192
run: product 0 is default-space
run: instruction write/1
run: {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]} <- next-ingredient/34 
run: product 0 is chan
mem: storing 1031 in location 1194
run: instruction write/2
run: {name: "val", value: 2, type: 1, properties: ["val": "location"]} <- next-ingredient/34 
run: product 0 is val
mem: storing 34 in location 1195
run: instruction write/4
run: {name: "full", value: 3, type: 3, properties: ["full": "boolean"]} <- channel-full?/110 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]}
run: ingredient 0 is chan
mem: location 1194 is 1031
run: instruction channel-full?/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1223
run: product 0 is default-space
run: instruction channel-full?/1
run: {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]} <- next-ingredient/34 
run: product 0 is chan
mem: storing 1031 in location 1225
run: instruction channel-full?/2
run: {name: "tmp", value: 2, type: 1, properties: ["tmp": "number"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run: ingredient 0 is chan
mem: location 1225 is 1031
mem: location 1031 is 1
mem: location 1032 is 1
mem: location 1033 is 1034
run: ingredient 1 is first-free
mem: location 1225 is 1031
run: address to copy is 1032
run: its type is 1
mem: location 1032 is 1
run: product 0 is tmp
mem: storing 1 in location 1226
run: instruction channel-full?/3
run: {name: "tmp", value: 2, type: 1, properties: ["tmp": "number"]} <- add/2 {name: "tmp", value: 2, type: 1, properties: ["tmp": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is tmp
mem: location 1226 is 1
run: ingredient 1 is 1
run: product 0 is tmp
mem: storing 2 in location 1226
run: instruction channel-full?/5
run: {name: "len", value: 3, type: 1, properties: ["len": "number"]} <- channel-capacity/114 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]}
run: ingredient 0 is chan
mem: location 1225 is 1031
run: instruction channel-capacity/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1254
run: product 0 is default-space
run: instruction channel-capacity/1
run: {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]} <- next-ingredient/34 
run: product 0 is chan
mem: storing 1031 in location 1256
run: instruction channel-capacity/2
run: {name: "q", value: 2, type: 2-5-1, properties: ["q": "address":"array":"location"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run: ingredient 0 is chan
mem: location 1256 is 1031
mem: location 1031 is 1
mem: location 1032 is 1
mem: location 1033 is 1034
run: ingredient 1 is data
mem: location 1256 is 1031
run: address to copy is 1033
run: its type is 2
mem: location 1033 is 1034
run: product 0 is q
mem: storing 1034 in location 1257
run: instruction channel-capacity/3
run: {name: "result", value: 3, type: 1, properties: ["result": "number"]} <- length/32 {name: "q", value: 2, type: 2-5-1, properties: ["q": "address":"array":"location", "deref": ]}
run: ingredient 0 is q
mem: location 1257 is 1034
mem: location 1034 is 2
mem: location 1035 is 34
mem: location 1036 is 0
mem: location 1257 is 1034
run: product 0 is result
mem: storing 2 in location 1258
run: instruction channel-capacity/4
run: reply/37 {name: "result", value: 3, type: 1, properties: ["result": "number"]}
run: ingredient 0 is result
mem: location 1258 is 2
run: result 0 is 2
run: product 0 is len
mem: storing 2 in location 1227
run: instruction channel-full?/6
run: {name: "at-end?", value: 4, type: 3, properties: ["at-end?": "boolean"]} <- greater-or-equal/16 {name: "tmp", value: 2, type: 1, properties: ["tmp": "number"]}, {name: "len", value: 3, type: 1, properties: ["len": "number"]}
run: ingredient 0 is tmp
mem: location 1226 is 2
run: ingredient 1 is len
mem: location 1227 is 2
run: product 0 is at-end?
mem: storing 1 in location 1228
run: instruction channel-full?/7
run: break-unless/12 {name: "at-end?", value: 4, type: 3, properties: ["at-end?": "boolean"]}, {name: "", value: 1, type: 0, properties: ["": ]}
run: ingredient 0 is at-end?
mem: location 1228 is 1
run: ingredient 1 is 
run: jump-unless fell through
run: instruction channel-full?/8
run: {name: "tmp", value: 2, type: 1, properties: ["tmp": "number"]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run: ingredient 0 is 0
run: product 0 is tmp
mem: storing 0 in location 1226
run: instruction channel-full?/10
run: {name: "full", value: 5, type: 1, properties: ["full": "number"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run: ingredient 0 is chan
mem: location 1225 is 1031
mem: location 1031 is 1
mem: location 1032 is 1
mem: location 1033 is 1034
run: ingredient 1 is first-full
mem: location 1225 is 1031
run: address to copy is 1031
run: its type is 1
mem: location 1031 is 1
run: product 0 is full
mem: storing 1 in location 1229
run: instruction channel-full?/11
run: {name: "result", value: 6, type: 3, properties: ["result": "boolean"]} <- equal/13 {name: "full", value: 5, type: 1, properties: ["full": "number"]}, {name: "tmp", value: 2, type: 1, properties: ["tmp": "number"]}
run: ingredient 0 is full
mem: location 1229 is 1
run: ingredient 1 is tmp
mem: location 1226 is 0
run: product 0 is result
mem: storing 0 in location 1230
run: instruction channel-full?/12
run: reply/37 {name: "result", value: 6, type: 3, properties: ["result": "boolean"]}
run: ingredient 0 is result
mem: location 1230 is 0
run: result 0 is 0
run: product 0 is full
mem: storing 0 in location 1196
run: instruction write/5
run: break-unless/12 {name: "full", value: 3, type: 3, properties: ["full": "boolean"]}, {name: "", value: 2, type: 0, properties: ["": ]}
run: ingredient 0 is full
mem: location 1196 is 0
run: ingredient 1 is 
run: jumping to instruction 8
run: instruction write/9
run: {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run: ingredient 0 is chan
mem: location 1194 is 1031
mem: location 1031 is 1
mem: location 1032 is 1
mem: location 1033 is 1034
run: ingredient 1 is data
mem: location 1194 is 1031
run: address to copy is 1033
run: its type is 2
mem: location 1033 is 1034
run: product 0 is circular-buffer
mem: storing 1034 in location 1198
run: instruction write/10
run: {name: "free", value: 6, type: 2-1, properties: ["free": "address":"number"]} <- get-address/29 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run: ingredient 0 is chan
mem: location 1194 is 1031
mem: location 1031 is 1
mem: location 1032 is 1
mem: location 1033 is 1034
run: ingredient 1 is first-free
mem: location 1194 is 1031
run: address to copy is 1032
run: product 0 is free
mem: storing 1032 in location 1199
run: instruction write/11
run: {name: "dest", value: 7, type: 2-1, properties: ["dest": "address":"location"]} <- index-address/31 {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location", "deref": ]}, {name: "free", value: 6, type: 2-1, properties: ["free": "address":"number", "deref": ]}
run: ingredient 0 is circular-buffer
mem: location 1198 is 1034
mem: location 1034 is 2
mem: location 1035 is 34
mem: location 1036 is 0
run: ingredient 1 is free
mem: location 1199 is 1032
mem: location 1032 is 1
mem: location 1198 is 1034
mem: location 1199 is 1032
mem: location 1032 is 1
run: product 0 is dest
mem: storing 1036 in location 1200
run: instruction write/12
run: {name: "dest", value: 7, type: 2-1, properties: ["dest": "address":"location", "deref": ]} <- copy/1 {name: "val", value: 2, type: 1, properties: ["val": "location"]}
run: ingredient 0 is val
mem: location 1195 is 34
run: product 0 is dest
mem: location 1200 is 1036
mem: storing 34 in location 1036
run: instruction write/13
run: {name: "free", value: 6, type: 2-1, properties: ["free": "address":"number", "deref": ]} <- add/2 {name: "free", value: 6, type: 2-1, properties: ["free": "address":"number", "deref": ]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is free
mem: location 1199 is 1032
mem: location 1032 is 1
run: ingredient 1 is 1
run: product 0 is free
mem: location 1199 is 1032
mem: storing 2 in location 1032
run: instruction write/15
run: {name: "len", value: 8, type: 1, properties: ["len": "number"]} <- length/32 {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location", "deref": ]}
run: ingredient 0 is circular-buffer
mem: location 1198 is 1034
mem: location 1034 is 2
mem: location 1035 is 34
mem: location 1036 is 34
mem: location 1198 is 1034
run: product 0 is len
mem: storing 2 in location 1201
run: instruction write/16
run: {name: "at-end?", value: 9, type: 3, properties: ["at-end?": "boolean"]} <- greater-or-equal/16 {name: "free", value: 6, type: 2-1, properties: ["free": "address":"number", "deref": ]}, {name: "len", value: 8, type: 1, properties: ["len": "number"]}
run: ingredient 0 is free
mem: location 1199 is 1032
mem: location 1032 is 2
run: ingredient 1 is len
mem: location 1201 is 2
run: product 0 is at-end?
mem: storing 1 in location 1202
run: instruction write/17
run: break-unless/12 {name: "at-end?", value: 9, type: 3, properties: ["at-end?": "boolean"]}, {name: "", value: 1, type: 0, properties: ["": ]}
run: ingredient 0 is at-end?
mem: location 1202 is 1
run: ingredient 1 is 
run: jump-unless fell through
run: instruction write/18
run: {name: "free", value: 6, type: 2-1, properties: ["free": "address":"number", "deref": ]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run: ingredient 0 is 0
run: product 0 is free
mem: location 1199 is 1032
mem: storing 0 in location 1032
run: instruction write/20
run: reply/37 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "same-as-ingredient": "0"]}
run: ingredient 0 is chan
mem: location 1194 is 1031
run: result 0 is 1031
run: product 0 is 1
mem: storing 1031 in location 1
run: instruction run1001/6
run: {name: "4", value: 4, type: 1, properties: ["4": "number"]} <- get/28 {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run: ingredient 0 is 1
mem: location 1 is 1031
mem: location 1031 is 1
mem: location 1032 is 0
mem: location 1033 is 1034
run: ingredient 1 is first-free
mem: location 1 is 1031
run: address to copy is 1032
run: its type is 1
mem: location 1032 is 0
run: product 0 is 4
mem: storing 0 in location 4
run: instruction run1001/7
run: {name: "_", value: 0, type: 0, properties: ["_": "dummy"]}, {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel"]} <- read/111 {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel"]}
run: ingredient 0 is 1
mem: location 1 is 1031
run: instruction read/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1285
run: product 0 is default-space
run: instruction read/1
run: {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]} <- next-ingredient/34 
run: product 0 is chan
mem: storing 1031 in location 1287
run: instruction read/3
run: {name: "empty", value: 2, type: 3, properties: ["empty": "boolean"]} <- channel-empty?/112 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]}
run: ingredient 0 is chan
mem: location 1287 is 1031
run: instruction channel-empty?/0
run: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/52 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
run: ingredient 0 is location
run: ingredient 1 is 30
mem: array size is 30
mem: new alloc: 1316
run: product 0 is default-space
run: instruction channel-empty?/1
run: {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel"]} <- next-ingredient/34 
run: product 0 is chan
mem: storing 1031 in location 1318
run: instruction channel-empty?/2
run: {name: "full", value: 2, type: 1, properties: ["full": "number"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run: ingredient 0 is chan
mem: location 1318 is 1031
mem: location 1031 is 1
mem: location 1032 is 0
mem: location 1033 is 1034
run: ingredient 1 is first-full
mem: location 1318 is 1031
run: address to copy is 1031
run: its type is 1
mem: location 1031 is 1
run: product 0 is full
mem: storing 1 in location 1319
run: instruction channel-empty?/3
run: {name: "free", value: 3, type: 1, properties: ["free": "number"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run: ingredient 0 is chan
mem: location 1318 is 1031
mem: location 1031 is 1
mem: location 1032 is 0
mem: location 1033 is 1034
run: ingredient 1 is first-free
mem: location 1318 is 1031
run: address to copy is 1032
run: its type is 1
mem: location 1032 is 0
run: product 0 is free
mem: storing 0 in location 1320
run: instruction channel-empty?/4
run: {name: "result", value: 4, type: 3, properties: ["result": "boolean"]} <- equal/13 {name: "full", value: 2, type: 1, properties: ["full": "number"]}, {name: "free", value: 3, type: 1, properties: ["free": "number"]}
run: ingredient 0 is full
mem: location 1319 is 1
run: ingredient 1 is free
mem: location 1320 is 0
run: product 0 is result
mem: storing 0 in location 1321
run: instruction channel-empty?/5
run: reply/37 {name: "result", value: 4, type: 3, properties: ["result": "boolean"]}
run: ingredient 0 is result
mem: location 1321 is 0
run: result 0 is 0
run: product 0 is empty
mem: storing 0 in location 1288
run: instruction read/4
run: break-unless/12 {name: "empty", value: 2, type: 3, properties: ["empty": "boolean"]}, {name: "", value: 2, type: 0, properties: ["": ]}
run: ingredient 0 is empty
mem: location 1288 is 0
run: ingredient 1 is 
run: jumping to instruction 7
run: instruction read/8
run: {name: "full", value: 4, type: 2-1, properties: ["full": "address":"number"]} <- get-address/29 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run: ingredient 0 is chan
mem: location 1287 is 1031
mem: location 1031 is 1
mem: location 1032 is 0
mem: location 1033 is 1034
run: ingredient 1 is first-full
mem: location 1287 is 1031
run: address to copy is 1031
run: product 0 is full
mem: storing 1031 in location 1290
run: instruction read/9
run: {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location"]} <- get/28 {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run: ingredient 0 is chan
mem: location 1287 is 1031
mem: location 1031 is 1
mem: location 1032 is 0
mem: location 1033 is 1034
run: ingredient 1 is data
mem: location 1287 is 1031
run: address to copy is 1033
run: its type is 2
mem: location 1033 is 1034
run: product 0 is circular-buffer
mem: storing 1034 in location 1291
run: instruction read/10
run: {name: "result", value: 6, type: 1, properties: ["result": "location"]} <- index/30 {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location", "deref": ]}, {name: "full", value: 4, type: 2-1, properties: ["full": "address":"number", "deref": ]}
run: ingredient 0 is circular-buffer
mem: location 1291 is 1034
mem: location 1034 is 2
mem: location 1035 is 34
mem: location 1036 is 34
run: ingredient 1 is full
mem: location 1290 is 1031
mem: location 1031 is 1
mem: location 1291 is 1034
mem: location 1290 is 1031
mem: location 1031 is 1
run: address to copy is 1036
run: its type is 1
mem: location 1036 is 34
run: product 0 is result
mem: storing 34 in location 1292
run: instruction read/11
run: {name: "full", value: 4, type: 2-1, properties: ["full": "address":"number", "deref": ]} <- add/2 {name: "full", value: 4, type: 2-1, properties: ["full": "address":"number", "deref": ]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is full
mem: location 1290 is 1031
mem: location 1031 is 1
run: ingredient 1 is 1
run: product 0 is full
mem: location 1290 is 1031
mem: storing 2 in location 1031
run: instruction read/13
run: {name: "len", value: 7, type: 1, properties: ["len": "number"]} <- length/32 {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location", "deref": ]}
run: ingredient 0 is circular-buffer
mem: location 1291 is 1034
mem: location 1034 is 2
mem: location 1035 is 34
mem: location 1036 is 34
mem: location 1291 is 1034
run: product 0 is len
mem: storing 2 in location 1293
run: instruction read/14
run: {name: "at-end?", value: 8, type: 3, properties: ["at-end?": "boolean"]} <- greater-or-equal/16 {name: "full", value: 4, type: 2-1, properties: ["full": "address":"number", "deref": ]}, {name: "len", value: 7, type: 1, properties: ["len": "number"]}
run: ingredient 0 is full
mem: location 1290 is 1031
mem: location 1031 is 2
run: ingredient 1 is len
mem: location 1293 is 2
run: product 0 is at-end?
mem: storing 1 in location 1294
run: instruction read/15
run: break-unless/12 {name: "at-end?", value: 8, type: 3, properties: ["at-end?": "boolean"]}, {name: "", value: 1, type: 0, properties: ["": ]}
run: ingredient 0 is at-end?
mem: location 1294 is 1
run: ingredient 1 is 
run: jump-unless fell through
run: instruction read/16
run: {name: "full", value: 4, type: 2-1, properties: ["full": "address":"number", "deref": ]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run: ingredient 0 is 0
run: product 0 is full
mem: location 1290 is 1031
mem: storing 0 in location 1031
run: instruction read/18
run: reply/37 {name: "result", value: 6, type: 1, properties: ["result": "location"]}, {name: "chan", value: 1, type: 2-11, properties: ["chan": "address":"channel", "same-as-ingredient": "0"]}
run: ingredient 0 is result
mem: location 1292 is 34
run: ingredient 1 is chan
mem: location 1287 is 1031
run: result 0 is 34
run: result 1 is 1031
run: product 0 is _
run: product 1 is 1
mem: storing 1031 in location 1
run: instruction run1001/8
run: {name: "5", value: 5, type: 1, properties: ["5": "number"]} <- get/28 {name: "1", value: 1, type: 2-11, properties: ["1": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run: ingredient 0 is 1
mem: location 1 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 1034
run: ingredient 1 is first-full
mem: location 1 is 1031
run: address to copy is 1031
run: its type is 1
mem: location 1031 is 0
run: product 0 is 5
mem: storing 0 in location 5
run: instruction channel-wrap/1
run: memory-should-contain/56 {name: "
    2 <- 1  # first-free after first write
    3 <- 1  # first-full after first read
    4 <- 0  # first-free after second write, wrapped
    5 <- 0  # first-full after second read, wrapped
  ", value: 0, type: 0, properties: ["
    2 <- 1  # first-free after first write
    3 <- 1  # first-full after first read
    4 <- 0  # first-free after second write, wrapped
    5 <- 0  # first-full after second read, wrapped
  ": "literal-string"]}
run: ingredient 0 is 
    2 <- 1  # first-free after first write
    3 <- 1  # first-full after first read
    4 <- 0  # first-free after second write, wrapped
    5 <- 0  # first-full after second read, wrapped
  
run: checking location 2
run: checking location 3
run: checking location 4
run: checking location 5
