c{0: 0 (((1 integer) (raw)) <- ((copy)) ((2 integer) (space global))) -- nil
c{1: 0 ✓ (((1 integer) (raw)) <- ((copy)) ((2 integer) (space global)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal))) -- nil
c{0: 1 (((2 integer)) <- ((copy)) ((4 literal))) -- nil
c{0: 2 (((fork)) ((f1 fn)) ((default-space space-address) (globals)) ((nil literal) (limit))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal)))
c{1: 1 ✓ (((2 integer)) <- ((copy)) ((4 literal)))
c{1: 2 ✓ (((fork)) ((f1 fn)) ((default-space space-address) (globals)) ((nil literal) (limit)))
cn0: convert-names in f1
cn0: (((1 integer) (raw)) <- ((copy)) ((2 integer) (space global))) nil nil
cn0: checking arg ((2 integer) (space global))
maybe-add: ((2 integer) (space global))
cn0: checking oarg ((1 integer) (raw))
maybe-add: ((1 integer) (raw))
cn0: convert-names in main
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((5 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((2 integer)) <- ((copy)) ((4 literal))) nil nil
cn0: checking arg ((4 literal))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: (((fork)) ((f1 fn)) ((default-space space-address) (globals)) ((nil literal) (limit))) nil nil
cn0: checking arg ((f1 fn))
cn0: checking arg ((default-space space-address) (globals))
maybe-add: ((default-space space-address) (globals))
cn0: checking arg ((nil literal) (limit))
cn1: (((1 integer) (raw)) <- ((copy)) ((2 integer) (space global)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal)))
cn1: (((2 integer)) <- ((copy)) ((4 literal)))
cn1: (((fork)) ((f1 fn)) ((default-space space-address) (globals)) ((nil literal) (limit)))
schedule: main
run: main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal)))
run: main 0: 1000 => ((default-space space-address))
run: main 1: (((2 integer)) <- ((copy)) ((4 literal)))
run: main 1: 4 => ((2 integer))
mem: ((2 integer)): 1003 <= 4
run: main 2: (((fork)) ((f1 fn)) ((default-space space-address) (globals)) ((nil literal) (limit)))
schedule: done with routine nil
schedule: f1
run: f1 0: (((1 integer) (raw)) <- ((copy)) ((2 integer) (space global)))
mem: ((2 integer) (space global)) => 4
run: f1 0: 4 => ((1 integer) (raw))
mem: ((1 integer) (raw)): 1 <= 4
schedule: done with routine nil
