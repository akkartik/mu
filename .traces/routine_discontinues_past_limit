parse: instruction: start-running
parse:   ingredient: {name: "f2", properties: ["f2": "recipe"]}
parse:   product: {name: "1", properties: ["1": "number", "child-id": ]}
parse: instruction: limit-time
parse:   ingredient: {name: "1", properties: ["1": "number", "child-id": ]}
parse:   ingredient: {name: "10", properties: ["10": "literal"]}
parse: instruction: copy
parse:   ingredient: {name: "20", properties: ["20": "literal"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: instruction: subtract
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse:   ingredient: {name: "1", properties: ["1": "literal"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: instruction: jump-if
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse:   ingredient: {name: "-2", properties: ["-2": "offset"]}
parse: instruction: jump
parse:   ingredient: {name: "-1", properties: ["-1": "offset"]}
parse: instruction: $print
parse:   ingredient: {name: "should never get here", properties: [_: "literal-string"]}
parse:   ingredient: {name: "10", properties: ["10": "literal", "newline": ]}
after-brace: recipe f1
after-brace: start-running ...
after-brace: limit-time ...
after-brace: copy ...
after-brace: subtract ...
after-brace: jump-if ...
after-brace: recipe f2
after-brace: jump ...
after-brace: $print ...
9999 new: routine allocated memory from 1000 to 101000
schedule: f1
 101 run: 1:number/child-id <- start-running f2:recipe
9999 new: routine allocated memory from 101000 to 201000
9999 mem: storing 2 in location 1
 101 run: limit-time 1:number/child-id, 10
9999 mem: location 1 is 2
schedule: f2
 101 run: jump -1:offset
9999 run: jumping to instruction 0
 101 run: jump -1:offset
9999 run: jumping to instruction 0
schedule: f1
 101 run: 2:number <- copy 20
9999 mem: storing 20 in location 2
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 20
9999 mem: storing 19 in location 2
schedule: f2
 101 run: jump -1:offset
9999 run: jumping to instruction 0
 101 run: jump -1:offset
9999 run: jumping to instruction 0
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 19
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 19
9999 mem: storing 18 in location 2
schedule: f2
 101 run: jump -1:offset
9999 run: jumping to instruction 0
 101 run: jump -1:offset
9999 run: jumping to instruction 0
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 18
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 18
9999 mem: storing 17 in location 2
schedule: f2
 101 run: jump -1:offset
9999 run: jumping to instruction 0
 101 run: jump -1:offset
9999 run: jumping to instruction 0
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 17
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 17
9999 mem: storing 16 in location 2
schedule: f2
 101 run: jump -1:offset
9999 run: jumping to instruction 0
 101 run: jump -1:offset
9999 run: jumping to instruction 0
schedule: discontinuing routine 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 16
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 16
9999 mem: storing 15 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 15
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 15
9999 mem: storing 14 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 14
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 14
9999 mem: storing 13 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 13
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 13
9999 mem: storing 12 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 12
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 12
9999 mem: storing 11 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 11
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 11
9999 mem: storing 10 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 10
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 10
9999 mem: storing 9 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 9
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 9
9999 mem: storing 8 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 8
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 8
9999 mem: storing 7 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 7
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 7
9999 mem: storing 6 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 6
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 6
9999 mem: storing 5 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 5
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 5
9999 mem: storing 4 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 4
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 4
9999 mem: storing 3 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 3
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 3
9999 mem: storing 2 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 2
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 2
9999 mem: storing 1 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 1
9999 run: jumping to instruction 3
 101 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 1
9999 mem: storing 0 in location 2
schedule: f1
 101 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 0
9999 run: jump-if fell through
