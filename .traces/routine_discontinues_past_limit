9991 parse: --- defining f1
9993 parse: instruction: start-running
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"f2": "recipe"}
9993 parse:   product: {"1": "number", "child-id": <>}
9992 load: after rewriting: 1:number/child-id <- start-running f2:recipe
9993 parse: instruction: limit-time
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": "number", "child-id": <>}
9993 parse:   ingredient: {"10": "literal"}
9992 load: after rewriting: limit-time 1:number/child-id, 10
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"20": "literal"}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- copy 20
9993 parse: instruction: subtract
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": "number"}
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- subtract 2:number, 1
9993 parse: instruction: jump-if
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": "number"}
9993 parse:   ingredient: {"-2": "offset"}
9992 load: after rewriting: jump-if 2:number, -2:offset
9999 parse: recipe f1 has a header
9991 parse: --- defining f2
9993 parse: instruction: jump
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"-1": "offset"}
9992 load: after rewriting: jump -1:offset
9993 parse: instruction: $print
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"should never get here": "literal-string"}
9993 parse:   ingredient: {"10": "literal", "newline": <>}
9992 load: after rewriting: $print [should never get here], 10/newline
9999 parse: recipe f2 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe f1
9991 transform: --- fill in reply ingredients from header for recipe f2
9991 transform: --- deduce types for recipe f1
9991 transform: --- deduce types for recipe f2
9991 transform: --- collect surrounding spaces for recipe f1
9991 transform: --- collect surrounding spaces for recipe f2
9991 transform: --- transform names for recipe f1
9991 transform: --- transform names for recipe f2
9991 transform: --- resolve ambiguous calls for recipe f1
9992 transform: instruction copy
9992 transform: score for base: -1
9993 transform: too few ingredients
9992 transform: score for variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9991 transform: --- resolve ambiguous calls for recipe f2
9991 transform: --- compute instruction operations for recipe f1
9991 transform: --- compute instruction operations for recipe f2
9991 transform: --- transform braces for recipe f1
9992 transform: start-running ...
9992 transform: limit-time ...
9992 transform: copy ...
9992 transform: subtract ...
9992 transform: jump-if ...
9992 transform:  ...
9991 transform: --- transform braces for recipe f2
9992 transform: jump ...
9992 transform: $print ...
9992 transform:  ...
9991 transform: --- perform checks for recipe f1
9991 transform: --- perform checks for recipe f2
9991 transform: --- type-check calls inside recipe f1
9991 transform: --- type-check calls inside recipe f2
9991 transform: --- convert 'new' to 'allocate' for recipe f1
9991 transform: --- convert 'new' to 'allocate' for recipe f2
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: f1
 102 run: 1:number/child-id <- start-running f2:recipe
9999 trace: new routine; incrementing callstack depth to 2
9999 new: routine allocated memory from 101000 to 201000
9999 mem: storing 2 in location 1
 103 run: limit-time 1:number/child-id, 10
9999 mem: location 1 is 2
9990 schedule: f2
 103 run: jump -1:offset
9998 run: jumping to instruction 0
 103 run: jump -1:offset
9998 run: jumping to instruction 0
9990 schedule: f1
 103 run: 2:number <- copy 20
9999 mem: storing 20 in location 2
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 20
9999 mem: storing 19 in location 2
9990 schedule: f2
 103 run: jump -1:offset
9998 run: jumping to instruction 0
 103 run: jump -1:offset
9998 run: jumping to instruction 0
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 19
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 19
9999 mem: storing 18 in location 2
9990 schedule: f2
 103 run: jump -1:offset
9998 run: jumping to instruction 0
 103 run: jump -1:offset
9998 run: jumping to instruction 0
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 18
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 18
9999 mem: storing 17 in location 2
9990 schedule: f2
 103 run: jump -1:offset
9998 run: jumping to instruction 0
 103 run: jump -1:offset
9998 run: jumping to instruction 0
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 17
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 17
9999 mem: storing 16 in location 2
9990 schedule: f2
 103 run: jump -1:offset
9998 run: jumping to instruction 0
 103 run: jump -1:offset
9998 run: jumping to instruction 0
9999 schedule: discontinuing routine 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 16
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 16
9999 mem: storing 15 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 15
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 15
9999 mem: storing 14 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 14
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 14
9999 mem: storing 13 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 13
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 13
9999 mem: storing 12 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 12
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 12
9999 mem: storing 11 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 11
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 11
9999 mem: storing 10 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 10
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 10
9999 mem: storing 9 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 9
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 9
9999 mem: storing 8 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 8
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 8
9999 mem: storing 7 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 7
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 7
9999 mem: storing 6 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 6
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 6
9999 mem: storing 5 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 5
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 5
9999 mem: storing 4 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 4
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 4
9999 mem: storing 3 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 3
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 3
9999 mem: storing 2 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 2
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 2
9999 mem: storing 1 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 1
9998 run: jumping to instruction 3
 103 run: 2:number <- subtract 2:number, 1
9999 mem: location 2 is 1
9999 mem: storing 0 in location 2
9990 schedule: f1
 103 run: jump-if 2:number, -2:offset
9999 mem: location 2 is 0
9998 run: jump-if fell through
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
