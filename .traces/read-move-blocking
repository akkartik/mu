9991 parse: --- defining scenario-read-move-blocking
9993 parse: instruction: assume-screen
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"20": "literal", "width": <>}
9993 parse:   ingredient: {"2": "literal", "height": <>}
9992 load: after rewriting: screen:address:screen <- new-fake-screen 20/width, 2/height
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:channel <- new-channel 2\n    2:number/routine <- start-running read-move:recipe, 1:address:channel, screen:address:screen\n    # 'read-move' is waiting for input\n    wait-for-routine 2:number\n    3:number <- routine-state 2:number/id\n    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting\n    assert 4:boolean/waiting?, [\nF read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]\n    # press 'a'\n    1:address:channel <- write 1:address:channel, 97/a\n    restart 2:number/routine\n    # 'read-move' still waiting for input\n    wait-for-routine 2:number\n    3:number <- routine-state 2:number/id\n    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting\n    assert 4:boolean/waiting?, [\nF read-move-blocking: routine failed to pause after rank 'a']\n    # press '2'\n    1:address:channel <- write 1:address:channel, 50/'2'\n    restart 2:number/routine\n    # 'read-move' still waiting for input\n    wait-for-routine 2:number\n    3:number <- routine-state 2:number/id\n    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting\n    assert 4:boolean/waiting?, [\nF read-move-blocking: routine failed to pause after file 'a2']\n    # press '-'\n    1:address:channel <- write 1:address:channel, 45/'-'\n    restart 2:number/routine\n    # 'read-move' still waiting for input\n    wait-for-routine 2:number\n    3:number <- routine-state 2:number\n    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting\n    assert 4:boolean/waiting?/routine-state, [\nF read-move-blocking: routine failed to pause after hyphen 'a2-']\n    # press 'a'\n    1:address:channel <- write 1:address:channel, 97/a\n    restart 2:number/routine\n    # 'read-move' still waiting for input\n    wait-for-routine 2:number\n    3:number <- routine-state 2:number\n    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting\n    assert 4:boolean/waiting?/routine-state, [\nF read-move-blocking: routine failed to pause after rank 'a2-a']\n    # press '4'\n    1:address:channel <- write 1:address:channel, 52/'4'\n    restart 2:number/routine\n    # 'read-move' still waiting for input\n    wait-for-routine 2:number\n    3:number <- routine-state 2:number\n    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting\n    assert 4:boolean/waiting?, [\nF read-move-blocking: routine failed to pause after file 'a2-a4']\n    # press 'newline'\n    1:address:channel <- write 1:address:channel, 10  # newline\n    restart 2:number/routine\n    # 'read-move' now completes\n    wait-for-routine 2:number\n    3:number <- routine-state 2:number\n    4:boolean/completed? <- equal 3:number/routine-state, 1/completed\n    assert 4:boolean/completed?, [\nF read-move-blocking: routine failed to terminate on newline]\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:channel <- new-channel 2
    2:number/routine <- start-running read-move:recipe, 1:address:channel, screen:address:screen
    # 'read-move' is waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number/id
    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]
    # press 'a'
    1:address:channel <- write 1:address:channel, 97/a
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number/id
    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after rank 'a']
    # press '2'
    1:address:channel <- write 1:address:channel, 50/'2'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number/id
    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2']
    # press '-'
    1:address:channel <- write 1:address:channel, 45/'-'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
    assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after hyphen 'a2-']
    # press 'a'
    1:address:channel <- write 1:address:channel, 97/a
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
    assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a2-a']
    # press '4'
    1:address:channel <- write 1:address:channel, 52/'4'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2-a4']
    # press 'newline'
    1:address:channel <- write 1:address:channel, 10  # newline
    restart 2:number/routine
    # 'read-move' now completes
    wait-for-routine 2:number
    3:number <- routine-state 2:number
    4:boolean/completed? <- equal 3:number/routine-state, 1/completed
    assert 4:boolean/completed?, [
F read-move-blocking: routine failed to terminate on newline]
    trace 1, [test], [reached end]
  ]
9993 parse: instruction: trace-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    test: reached end\n  ": "literal-string"}
9992 load: after rewriting: trace-should-contain [
    test: reached end
  ]
9999 parse: recipe scenario-read-move-blocking has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe scenario-read-move-blocking
9991 transform: --- deduce types for recipe scenario-read-move-blocking
9992 transform: screen => <address : <screen : <>>>
9991 transform: --- collect surrounding spaces for recipe scenario-read-move-blocking
9991 transform: --- transform names for recipe scenario-read-move-blocking
9991 transform: --- transform braces for recipe scenario-read-move-blocking
9992 transform: assume-screen ...
9992 transform: run ...
9992 transform: trace-should-contain ...
9991 transform: --- compute instruction operations for recipe scenario-read-move-blocking
9991 transform: --- perform checks for recipe scenario-read-move-blocking
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-read-move-blocking
 102 run: screen:address:screen <- new-fake-screen 20/width, 2/height
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1000
 103 run: result:address:screen <- new screen:type
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1002
 103 run: width:address:number <- get-address *result, num-columns:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1003
 103 run: *width <- next-ingredient 
9999 mem: location 1003 is 1010
9999 mem: storing 20 in location 1010
 103 run: height:address:number <- get-address *result, num-rows:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 0
9999 mem: location 1010 is 20
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1004
 103 run: *height <- next-ingredient 
9999 mem: location 1004 is 1009
9999 mem: storing 2 in location 1009
 103 run: row:address:number <- get-address *result, cursor-row:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 20
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 103 run: *row <- copy 0
9999 mem: location 1005 is 1011
9999 mem: storing 0 in location 1011
 103 run: column:address:number <- get-address *result, cursor-column:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 20
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 103 run: *column <- copy 0
9999 mem: location 1006 is 1012
9999 mem: storing 0 in location 1012
 103 run: bufsize:number <- multiply *width, *height
9999 mem: location 1003 is 1010
9999 mem: location 1010 is 20
9999 mem: location 1004 is 1009
9999 mem: location 1009 is 2
9999 mem: storing 40 in location 1007
 103 run: buf:address:address:array:screen-cell <- get-address *result, data:offset
9999 mem: location 1002 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 20
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1002 is 1009
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1008
 103 run: *buf <- new screen-cell:type, bufsize
9999 mem: location 1007 is 40
9999 mem: array size is 40
9999 mem: new alloc: 1014
9999 mem: location 1008 is 1013
9999 mem: storing 1014 in location 1013
 103 run: clear-screen result
9999 mem: location 1002 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1095
 104 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1097
 104 run: jump-unless sc, 
9999 mem: location 1097 is 1009
9998 run: jump-unless fell through
 104 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1097 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 20
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 1009
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <screen-cell : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1098
 104 run: max:number <- length *buf
9999 mem: location 1098 is 1014
9999 mem: storing 40 in location 1099
 104 run: i:number <- copy 0
9999 mem: storing 0 in location 1100
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 0
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 0
9999 mem: storing 1015 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1102 is 1015
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1015
9999 mem: storing 0 in location 1015
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1015
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1102 is 1015
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1016
9999 mem: storing 7 in location 1016
 104 run: i <- add i, 1
9999 mem: location 1100 is 0
9999 mem: storing 1 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 1
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 1
9999 mem: storing 1017 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1017
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1102 is 1017
9998 run: address to copy is 1017
9999 mem: storing 1017 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1017
9999 mem: storing 0 in location 1017
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1017
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1102 is 1017
9998 run: address to copy is 1018
9999 mem: storing 1018 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1018
9999 mem: storing 7 in location 1018
 104 run: i <- add i, 1
9999 mem: location 1100 is 1
9999 mem: storing 2 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 2
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 2
9999 mem: storing 1019 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1019
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1102 is 1019
9998 run: address to copy is 1019
9999 mem: storing 1019 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1019
9999 mem: storing 0 in location 1019
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1019
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1102 is 1019
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1020
9999 mem: storing 7 in location 1020
 104 run: i <- add i, 1
9999 mem: location 1100 is 2
9999 mem: storing 3 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 3
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 3
9999 mem: storing 1021 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1021
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1102 is 1021
9998 run: address to copy is 1021
9999 mem: storing 1021 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1021
9999 mem: storing 0 in location 1021
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1021
9999 mem: location 1021 is 0
9999 mem: location 1022 is 0
9999 mem: location 1102 is 1021
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1022
9999 mem: storing 7 in location 1022
 104 run: i <- add i, 1
9999 mem: location 1100 is 3
9999 mem: storing 4 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 4
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 4
9999 mem: storing 1023 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1102 is 1023
9998 run: address to copy is 1023
9999 mem: storing 1023 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1023
9999 mem: storing 0 in location 1023
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1102 is 1023
9998 run: address to copy is 1024
9999 mem: storing 1024 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1024
9999 mem: storing 7 in location 1024
 104 run: i <- add i, 1
9999 mem: location 1100 is 4
9999 mem: storing 5 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 5
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 5
9999 mem: storing 1025 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1102 is 1025
9998 run: address to copy is 1025
9999 mem: storing 1025 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1025
9999 mem: storing 0 in location 1025
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 0
9999 mem: location 1102 is 1025
9998 run: address to copy is 1026
9999 mem: storing 1026 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1026
9999 mem: storing 7 in location 1026
 104 run: i <- add i, 1
9999 mem: location 1100 is 5
9999 mem: storing 6 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 6
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 6
9999 mem: storing 1027 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1027
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1102 is 1027
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1027
9999 mem: storing 0 in location 1027
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1027
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1102 is 1027
9998 run: address to copy is 1028
9999 mem: storing 1028 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1028
9999 mem: storing 7 in location 1028
 104 run: i <- add i, 1
9999 mem: location 1100 is 6
9999 mem: storing 7 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 7
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 7
9999 mem: storing 1029 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1102 is 1029
9998 run: address to copy is 1029
9999 mem: storing 1029 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1029
9999 mem: storing 0 in location 1029
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1102 is 1029
9998 run: address to copy is 1030
9999 mem: storing 1030 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1030
9999 mem: storing 7 in location 1030
 104 run: i <- add i, 1
9999 mem: location 1100 is 7
9999 mem: storing 8 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 8
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 8
9999 mem: storing 1031 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1102 is 1031
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1031
9999 mem: storing 0 in location 1031
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1102 is 1031
9998 run: address to copy is 1032
9999 mem: storing 1032 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1032
9999 mem: storing 7 in location 1032
 104 run: i <- add i, 1
9999 mem: location 1100 is 8
9999 mem: storing 9 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 9
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 9
9999 mem: storing 1033 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1033
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1102 is 1033
9998 run: address to copy is 1033
9999 mem: storing 1033 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1033
9999 mem: storing 0 in location 1033
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1033
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1102 is 1033
9998 run: address to copy is 1034
9999 mem: storing 1034 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1034
9999 mem: storing 7 in location 1034
 104 run: i <- add i, 1
9999 mem: location 1100 is 9
9999 mem: storing 10 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 10
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 10
9999 mem: storing 1035 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1035
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1102 is 1035
9998 run: address to copy is 1035
9999 mem: storing 1035 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1035
9999 mem: storing 0 in location 1035
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1035
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1102 is 1035
9998 run: address to copy is 1036
9999 mem: storing 1036 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1036
9999 mem: storing 7 in location 1036
 104 run: i <- add i, 1
9999 mem: location 1100 is 10
9999 mem: storing 11 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 11
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 11
9999 mem: storing 1037 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1037
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1102 is 1037
9998 run: address to copy is 1037
9999 mem: storing 1037 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1037
9999 mem: storing 0 in location 1037
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1037
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1102 is 1037
9998 run: address to copy is 1038
9999 mem: storing 1038 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1038
9999 mem: storing 7 in location 1038
 104 run: i <- add i, 1
9999 mem: location 1100 is 11
9999 mem: storing 12 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 12
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 12
9999 mem: storing 1039 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1039
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1102 is 1039
9998 run: address to copy is 1039
9999 mem: storing 1039 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1039
9999 mem: storing 0 in location 1039
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1039
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1102 is 1039
9998 run: address to copy is 1040
9999 mem: storing 1040 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1040
9999 mem: storing 7 in location 1040
 104 run: i <- add i, 1
9999 mem: location 1100 is 12
9999 mem: storing 13 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 13
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 13
9999 mem: storing 1041 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1041
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1102 is 1041
9998 run: address to copy is 1041
9999 mem: storing 1041 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1041
9999 mem: storing 0 in location 1041
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1041
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1102 is 1041
9998 run: address to copy is 1042
9999 mem: storing 1042 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1042
9999 mem: storing 7 in location 1042
 104 run: i <- add i, 1
9999 mem: location 1100 is 13
9999 mem: storing 14 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 14
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 14
9999 mem: storing 1043 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1043
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1102 is 1043
9998 run: address to copy is 1043
9999 mem: storing 1043 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1043
9999 mem: storing 0 in location 1043
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1043
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1102 is 1043
9998 run: address to copy is 1044
9999 mem: storing 1044 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1044
9999 mem: storing 7 in location 1044
 104 run: i <- add i, 1
9999 mem: location 1100 is 14
9999 mem: storing 15 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 15
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 15
9999 mem: storing 1045 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1045
9999 mem: location 1045 is 0
9999 mem: location 1046 is 0
9999 mem: location 1102 is 1045
9998 run: address to copy is 1045
9999 mem: storing 1045 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1045
9999 mem: storing 0 in location 1045
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1045
9999 mem: location 1045 is 0
9999 mem: location 1046 is 0
9999 mem: location 1102 is 1045
9998 run: address to copy is 1046
9999 mem: storing 1046 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1046
9999 mem: storing 7 in location 1046
 104 run: i <- add i, 1
9999 mem: location 1100 is 15
9999 mem: storing 16 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 16
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 16
9999 mem: storing 1047 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1047
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1102 is 1047
9998 run: address to copy is 1047
9999 mem: storing 1047 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1047
9999 mem: storing 0 in location 1047
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1047
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: location 1102 is 1047
9998 run: address to copy is 1048
9999 mem: storing 1048 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1048
9999 mem: storing 7 in location 1048
 104 run: i <- add i, 1
9999 mem: location 1100 is 16
9999 mem: storing 17 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 17
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 17
9999 mem: storing 1049 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1049
9999 mem: location 1049 is 0
9999 mem: location 1050 is 0
9999 mem: location 1102 is 1049
9998 run: address to copy is 1049
9999 mem: storing 1049 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1049
9999 mem: storing 0 in location 1049
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1049
9999 mem: location 1049 is 0
9999 mem: location 1050 is 0
9999 mem: location 1102 is 1049
9998 run: address to copy is 1050
9999 mem: storing 1050 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1050
9999 mem: storing 7 in location 1050
 104 run: i <- add i, 1
9999 mem: location 1100 is 17
9999 mem: storing 18 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 18
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 18
9999 mem: storing 1051 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1051
9999 mem: location 1051 is 0
9999 mem: location 1052 is 0
9999 mem: location 1102 is 1051
9998 run: address to copy is 1051
9999 mem: storing 1051 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1051
9999 mem: storing 0 in location 1051
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1051
9999 mem: location 1051 is 0
9999 mem: location 1052 is 0
9999 mem: location 1102 is 1051
9998 run: address to copy is 1052
9999 mem: storing 1052 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1052
9999 mem: storing 7 in location 1052
 104 run: i <- add i, 1
9999 mem: location 1100 is 18
9999 mem: storing 19 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 19
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 19
9999 mem: storing 1053 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1053
9999 mem: location 1053 is 0
9999 mem: location 1054 is 0
9999 mem: location 1102 is 1053
9998 run: address to copy is 1053
9999 mem: storing 1053 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1053
9999 mem: storing 0 in location 1053
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1053
9999 mem: location 1053 is 0
9999 mem: location 1054 is 0
9999 mem: location 1102 is 1053
9998 run: address to copy is 1054
9999 mem: storing 1054 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1054
9999 mem: storing 7 in location 1054
 104 run: i <- add i, 1
9999 mem: location 1100 is 19
9999 mem: storing 20 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 20
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 20
9999 mem: storing 1055 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1055
9999 mem: location 1055 is 0
9999 mem: location 1056 is 0
9999 mem: location 1102 is 1055
9998 run: address to copy is 1055
9999 mem: storing 1055 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1055
9999 mem: storing 0 in location 1055
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1055
9999 mem: location 1055 is 0
9999 mem: location 1056 is 0
9999 mem: location 1102 is 1055
9998 run: address to copy is 1056
9999 mem: storing 1056 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1056
9999 mem: storing 7 in location 1056
 104 run: i <- add i, 1
9999 mem: location 1100 is 20
9999 mem: storing 21 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 21
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 21
9999 mem: storing 1057 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1057
9999 mem: location 1057 is 0
9999 mem: location 1058 is 0
9999 mem: location 1102 is 1057
9998 run: address to copy is 1057
9999 mem: storing 1057 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1057
9999 mem: storing 0 in location 1057
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1057
9999 mem: location 1057 is 0
9999 mem: location 1058 is 0
9999 mem: location 1102 is 1057
9998 run: address to copy is 1058
9999 mem: storing 1058 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1058
9999 mem: storing 7 in location 1058
 104 run: i <- add i, 1
9999 mem: location 1100 is 21
9999 mem: storing 22 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 22
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 22
9999 mem: storing 1059 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1059
9999 mem: location 1059 is 0
9999 mem: location 1060 is 0
9999 mem: location 1102 is 1059
9998 run: address to copy is 1059
9999 mem: storing 1059 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1059
9999 mem: storing 0 in location 1059
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1059
9999 mem: location 1059 is 0
9999 mem: location 1060 is 0
9999 mem: location 1102 is 1059
9998 run: address to copy is 1060
9999 mem: storing 1060 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1060
9999 mem: storing 7 in location 1060
 104 run: i <- add i, 1
9999 mem: location 1100 is 22
9999 mem: storing 23 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 23
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 23
9999 mem: storing 1061 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1061
9999 mem: location 1061 is 0
9999 mem: location 1062 is 0
9999 mem: location 1102 is 1061
9998 run: address to copy is 1061
9999 mem: storing 1061 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1061
9999 mem: storing 0 in location 1061
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1061
9999 mem: location 1061 is 0
9999 mem: location 1062 is 0
9999 mem: location 1102 is 1061
9998 run: address to copy is 1062
9999 mem: storing 1062 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1062
9999 mem: storing 7 in location 1062
 104 run: i <- add i, 1
9999 mem: location 1100 is 23
9999 mem: storing 24 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 24
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 24
9999 mem: storing 1063 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1063
9999 mem: location 1063 is 0
9999 mem: location 1064 is 0
9999 mem: location 1102 is 1063
9998 run: address to copy is 1063
9999 mem: storing 1063 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1063
9999 mem: storing 0 in location 1063
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1063
9999 mem: location 1063 is 0
9999 mem: location 1064 is 0
9999 mem: location 1102 is 1063
9998 run: address to copy is 1064
9999 mem: storing 1064 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1064
9999 mem: storing 7 in location 1064
 104 run: i <- add i, 1
9999 mem: location 1100 is 24
9999 mem: storing 25 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 25
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 25
9999 mem: storing 1065 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1065
9999 mem: location 1065 is 0
9999 mem: location 1066 is 0
9999 mem: location 1102 is 1065
9998 run: address to copy is 1065
9999 mem: storing 1065 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1065
9999 mem: storing 0 in location 1065
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1065
9999 mem: location 1065 is 0
9999 mem: location 1066 is 0
9999 mem: location 1102 is 1065
9998 run: address to copy is 1066
9999 mem: storing 1066 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1066
9999 mem: storing 7 in location 1066
 104 run: i <- add i, 1
9999 mem: location 1100 is 25
9999 mem: storing 26 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 26
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 26
9999 mem: storing 1067 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1067
9999 mem: location 1067 is 0
9999 mem: location 1068 is 0
9999 mem: location 1102 is 1067
9998 run: address to copy is 1067
9999 mem: storing 1067 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1067
9999 mem: storing 0 in location 1067
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1067
9999 mem: location 1067 is 0
9999 mem: location 1068 is 0
9999 mem: location 1102 is 1067
9998 run: address to copy is 1068
9999 mem: storing 1068 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1068
9999 mem: storing 7 in location 1068
 104 run: i <- add i, 1
9999 mem: location 1100 is 26
9999 mem: storing 27 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 27
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 27
9999 mem: storing 1069 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1069
9999 mem: location 1069 is 0
9999 mem: location 1070 is 0
9999 mem: location 1102 is 1069
9998 run: address to copy is 1069
9999 mem: storing 1069 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1069
9999 mem: storing 0 in location 1069
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1069
9999 mem: location 1069 is 0
9999 mem: location 1070 is 0
9999 mem: location 1102 is 1069
9998 run: address to copy is 1070
9999 mem: storing 1070 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1070
9999 mem: storing 7 in location 1070
 104 run: i <- add i, 1
9999 mem: location 1100 is 27
9999 mem: storing 28 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 28
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 28
9999 mem: storing 1071 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1071
9999 mem: location 1071 is 0
9999 mem: location 1072 is 0
9999 mem: location 1102 is 1071
9998 run: address to copy is 1071
9999 mem: storing 1071 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1071
9999 mem: storing 0 in location 1071
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1071
9999 mem: location 1071 is 0
9999 mem: location 1072 is 0
9999 mem: location 1102 is 1071
9998 run: address to copy is 1072
9999 mem: storing 1072 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1072
9999 mem: storing 7 in location 1072
 104 run: i <- add i, 1
9999 mem: location 1100 is 28
9999 mem: storing 29 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 29
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 29
9999 mem: storing 1073 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1073
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1102 is 1073
9998 run: address to copy is 1073
9999 mem: storing 1073 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1073
9999 mem: storing 0 in location 1073
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1073
9999 mem: location 1073 is 0
9999 mem: location 1074 is 0
9999 mem: location 1102 is 1073
9998 run: address to copy is 1074
9999 mem: storing 1074 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1074
9999 mem: storing 7 in location 1074
 104 run: i <- add i, 1
9999 mem: location 1100 is 29
9999 mem: storing 30 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 30
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 30
9999 mem: storing 1075 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1075
9999 mem: location 1075 is 0
9999 mem: location 1076 is 0
9999 mem: location 1102 is 1075
9998 run: address to copy is 1075
9999 mem: storing 1075 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1075
9999 mem: storing 0 in location 1075
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1075
9999 mem: location 1075 is 0
9999 mem: location 1076 is 0
9999 mem: location 1102 is 1075
9998 run: address to copy is 1076
9999 mem: storing 1076 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1076
9999 mem: storing 7 in location 1076
 104 run: i <- add i, 1
9999 mem: location 1100 is 30
9999 mem: storing 31 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 31
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 31
9999 mem: storing 1077 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1102 is 1077
9998 run: address to copy is 1077
9999 mem: storing 1077 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1077
9999 mem: storing 0 in location 1077
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1102 is 1077
9998 run: address to copy is 1078
9999 mem: storing 1078 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1078
9999 mem: storing 7 in location 1078
 104 run: i <- add i, 1
9999 mem: location 1100 is 31
9999 mem: storing 32 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 32
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 32
9999 mem: storing 1079 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1079
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1102 is 1079
9998 run: address to copy is 1079
9999 mem: storing 1079 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1079
9999 mem: storing 0 in location 1079
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1079
9999 mem: location 1079 is 0
9999 mem: location 1080 is 0
9999 mem: location 1102 is 1079
9998 run: address to copy is 1080
9999 mem: storing 1080 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1080
9999 mem: storing 7 in location 1080
 104 run: i <- add i, 1
9999 mem: location 1100 is 32
9999 mem: storing 33 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 33
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 33
9999 mem: storing 1081 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1081
9999 mem: location 1081 is 0
9999 mem: location 1082 is 0
9999 mem: location 1102 is 1081
9998 run: address to copy is 1081
9999 mem: storing 1081 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1081
9999 mem: storing 0 in location 1081
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1081
9999 mem: location 1081 is 0
9999 mem: location 1082 is 0
9999 mem: location 1102 is 1081
9998 run: address to copy is 1082
9999 mem: storing 1082 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1082
9999 mem: storing 7 in location 1082
 104 run: i <- add i, 1
9999 mem: location 1100 is 33
9999 mem: storing 34 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 34
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 34
9999 mem: storing 1083 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1083
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1102 is 1083
9998 run: address to copy is 1083
9999 mem: storing 1083 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1083
9999 mem: storing 0 in location 1083
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1083
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1102 is 1083
9998 run: address to copy is 1084
9999 mem: storing 1084 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1084
9999 mem: storing 7 in location 1084
 104 run: i <- add i, 1
9999 mem: location 1100 is 34
9999 mem: storing 35 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 35
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 35
9999 mem: storing 1085 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1085
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1102 is 1085
9998 run: address to copy is 1085
9999 mem: storing 1085 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1085
9999 mem: storing 0 in location 1085
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1085
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1102 is 1085
9998 run: address to copy is 1086
9999 mem: storing 1086 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1086
9999 mem: storing 7 in location 1086
 104 run: i <- add i, 1
9999 mem: location 1100 is 35
9999 mem: storing 36 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 36
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 36
9999 mem: storing 1087 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1087
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1102 is 1087
9998 run: address to copy is 1087
9999 mem: storing 1087 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1087
9999 mem: storing 0 in location 1087
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1087
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1102 is 1087
9998 run: address to copy is 1088
9999 mem: storing 1088 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1088
9999 mem: storing 7 in location 1088
 104 run: i <- add i, 1
9999 mem: location 1100 is 36
9999 mem: storing 37 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 37
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 37
9999 mem: storing 1089 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1089
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1102 is 1089
9998 run: address to copy is 1089
9999 mem: storing 1089 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1089
9999 mem: storing 0 in location 1089
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1089
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1102 is 1089
9998 run: address to copy is 1090
9999 mem: storing 1090 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1090
9999 mem: storing 7 in location 1090
 104 run: i <- add i, 1
9999 mem: location 1100 is 37
9999 mem: storing 38 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 38
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 38
9999 mem: storing 1091 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1091
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1102 is 1091
9998 run: address to copy is 1091
9999 mem: storing 1091 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1091
9999 mem: storing 0 in location 1091
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1091
9999 mem: location 1091 is 0
9999 mem: location 1092 is 0
9999 mem: location 1102 is 1091
9998 run: address to copy is 1092
9999 mem: storing 1092 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1092
9999 mem: storing 7 in location 1092
 104 run: i <- add i, 1
9999 mem: location 1100 is 38
9999 mem: storing 39 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 39
9999 mem: location 1099 is 40
9999 mem: storing 0 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 0
9998 run: jump-if fell through
 104 run: curr:address:screen-cell <- index-address *buf, i
9999 mem: location 1098 is 1014
9999 mem: location 1100 is 39
9999 mem: storing 1093 in location 1102
 104 run: curr-content:address:character <- get-address *curr, contents:offset
9999 mem: location 1102 is 1093
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1102 is 1093
9998 run: address to copy is 1093
9999 mem: storing 1093 in location 1103
 104 run: *curr-content <- copy 0/empty
9999 mem: location 1103 is 1093
9999 mem: storing 0 in location 1093
 104 run: curr-color:address:number <- get-address *curr, color:offset
9999 mem: location 1102 is 1093
9999 mem: location 1093 is 0
9999 mem: location 1094 is 0
9999 mem: location 1102 is 1093
9998 run: address to copy is 1094
9999 mem: storing 1094 in location 1104
 104 run: *curr-color <- copy 7/white
9999 mem: location 1104 is 1094
9999 mem: storing 7 in location 1094
 104 run: i <- add i, 1
9999 mem: location 1100 is 39
9999 mem: storing 40 in location 1100
 104 run: jump 
9998 run: jumping to instruction 8
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 1100 is 40
9999 mem: location 1099 is 40
9999 mem: storing 1 in location 1101
 104 run: jump-if done?, 
9999 mem: location 1101 is 1
9998 run: jumping to instruction 17
 104 run: x:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1097 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 20
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 1009
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1105
 104 run: *x <- copy 0
9999 mem: location 1105 is 1011
9999 mem: storing 0 in location 1011
 104 run: x <- get-address *sc, cursor-column:offset
9999 mem: location 1097 is 1009
9999 mem: location 1009 is 2
9999 mem: location 1010 is 20
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1097 is 1009
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1105
 104 run: *x <- copy 0
9999 mem: location 1105 is 1012
9999 mem: storing 0 in location 1012
 104 run: reply sc/same-as-ingredient:0
9999 mem: location 1097 is 1009
9999 trace: reply: decrementing callstack depth from 3
 103 run: reply result
9999 mem: location 1002 is 1009
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 900
 102 run: run [
    1:address:channel <- new-channel 2
    2:number/routine <- start-running read-move:recipe, 1:address:channel, screen:address:screen
    # 'read-move' is waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number/id
    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]
    # press 'a'
    1:address:channel <- write 1:address:channel, 97/a
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number/id
    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after rank 'a']
    # press '2'
    1:address:channel <- write 1:address:channel, 50/'2'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number/id
    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2']
    # press '-'
    1:address:channel <- write 1:address:channel, 45/'-'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
    assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after hyphen 'a2-']
    # press 'a'
    1:address:channel <- write 1:address:channel, 97/a
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
    assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a2-a']
    # press '4'
    1:address:channel <- write 1:address:channel, 52/'4'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
    4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2-a4']
    # press 'newline'
    1:address:channel <- write 1:address:channel, 10  # newline
    restart 2:number/routine
    # 'read-move' now completes
    wait-for-routine 2:number
    3:number <- routine-state 2:number
    4:boolean/completed? <- equal 3:number/routine-state, 1/completed
    assert 4:boolean/completed?, [
F read-move-blocking: routine failed to terminate on newline]
    trace 1, [test], [reached end]
  ]
9991 parse: --- defining run1001
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "literal"}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- new-channel 2
9993 parse: instruction: start-running
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"read-move": "recipe"}
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"screen": <"address" : <"screen" : <>>>}
9993 parse:   product: {"2": "number", "routine": <>}
9992 load: after rewriting: 2:number/routine <- start-running read-move:recipe, 1:address:channel, screen:address:screen
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number"}
9992 load: after rewriting: wait-for-routine 2:number
9993 parse: instruction: routine-state
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number", "id": <>}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- routine-state 2:number/id
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "number", "routine-state": <>}
9993 parse:   ingredient: {"3": "literal", "waiting": <>}
9993 parse:   product: {"4": "boolean", "waiting?": <>}
9992 load: after rewriting: 4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "boolean", "waiting?": <>}
9993 parse:   ingredient: {"\nF read-move-blocking: routine failed to pause after coming up (before any keys were pressed)": "literal-string"}
9992 load: after rewriting: assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"97": "literal", "a": <>}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- write 1:address:channel, 97/a
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number", "routine": <>}
9992 load: after rewriting: restart 2:number/routine
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number"}
9992 load: after rewriting: wait-for-routine 2:number
9993 parse: instruction: routine-state
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number", "id": <>}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- routine-state 2:number/id
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "number", "routine-state": <>}
9993 parse:   ingredient: {"3": "literal", "waiting": <>}
9993 parse:   product: {"4": "boolean", "waiting?": <>}
9992 load: after rewriting: 4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "boolean", "waiting?": <>}
9993 parse:   ingredient: {"\nF read-move-blocking: routine failed to pause after rank 'a'": "literal-string"}
9992 load: after rewriting: assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after rank 'a']
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"50": "literal", "'2'": <>}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- write 1:address:channel, 50/'2'
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number", "routine": <>}
9992 load: after rewriting: restart 2:number/routine
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number"}
9992 load: after rewriting: wait-for-routine 2:number
9993 parse: instruction: routine-state
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number", "id": <>}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- routine-state 2:number/id
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "number", "routine-state": <>}
9993 parse:   ingredient: {"3": "literal", "waiting": <>}
9993 parse:   product: {"4": "boolean", "waiting?": <>}
9992 load: after rewriting: 4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "boolean", "waiting?": <>}
9993 parse:   ingredient: {"\nF read-move-blocking: routine failed to pause after file 'a2'": "literal-string"}
9992 load: after rewriting: assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2']
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"45": "literal", "'-'": <>}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- write 1:address:channel, 45/'-'
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number", "routine": <>}
9992 load: after rewriting: restart 2:number/routine
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number"}
9992 load: after rewriting: wait-for-routine 2:number
9993 parse: instruction: routine-state
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number"}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- routine-state 2:number
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "number", "routine-state": <>}
9993 parse:   ingredient: {"3": "literal", "waiting": <>}
9993 parse:   product: {"4": "boolean", "waiting?": <>}
9992 load: after rewriting: 4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "boolean", "waiting?": <>, "routine-state": <>}
9993 parse:   ingredient: {"\nF read-move-blocking: routine failed to pause after hyphen 'a2-'": "literal-string"}
9992 load: after rewriting: assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after hyphen 'a2-']
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"97": "literal", "a": <>}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- write 1:address:channel, 97/a
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number", "routine": <>}
9992 load: after rewriting: restart 2:number/routine
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number"}
9992 load: after rewriting: wait-for-routine 2:number
9993 parse: instruction: routine-state
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number"}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- routine-state 2:number
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "number", "routine-state": <>}
9993 parse:   ingredient: {"3": "literal", "waiting": <>}
9993 parse:   product: {"4": "boolean", "waiting?": <>}
9992 load: after rewriting: 4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "boolean", "waiting?": <>, "routine-state": <>}
9993 parse:   ingredient: {"\nF read-move-blocking: routine failed to pause after rank 'a2-a'": "literal-string"}
9992 load: after rewriting: assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a2-a']
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"52": "literal", "'4'": <>}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- write 1:address:channel, 52/'4'
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number", "routine": <>}
9992 load: after rewriting: restart 2:number/routine
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number"}
9992 load: after rewriting: wait-for-routine 2:number
9993 parse: instruction: routine-state
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number"}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- routine-state 2:number
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "number", "routine-state": <>}
9993 parse:   ingredient: {"3": "literal", "waiting": <>}
9993 parse:   product: {"4": "boolean", "waiting?": <>}
9992 load: after rewriting: 4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "boolean", "waiting?": <>}
9993 parse:   ingredient: {"\nF read-move-blocking: routine failed to pause after file 'a2-a4'": "literal-string"}
9992 load: after rewriting: assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2-a4']
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"10": "literal"}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- write 1:address:channel, 10
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number", "routine": <>}
9992 load: after rewriting: restart 2:number/routine
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number"}
9992 load: after rewriting: wait-for-routine 2:number
9993 parse: instruction: routine-state
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "number"}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- routine-state 2:number
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "number", "routine-state": <>}
9993 parse:   ingredient: {"1": "literal", "completed": <>}
9993 parse:   product: {"4": "boolean", "completed?": <>}
9992 load: after rewriting: 4:boolean/completed? <- equal 3:number/routine-state, 1/completed
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "boolean", "completed?": <>}
9993 parse:   ingredient: {"\nF read-move-blocking: routine failed to terminate on newline": "literal-string"}
9992 load: after rewriting: assert 4:boolean/completed?, [
F read-move-blocking: routine failed to terminate on newline]
9993 parse: instruction: trace
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   ingredient: {"test": "literal-string"}
9993 parse:   ingredient: {"reached end": "literal-string"}
9992 load: after rewriting: trace 1, [test], [reached end]
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe run1001
9991 transform: --- deduce types for recipe run1001
9992 transform: screen => <address : <screen : <>>>
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: new-channel ...
9992 transform: start-running ...
9992 transform: wait-for-routine ...
9992 transform: routine-state ...
9992 transform: equal ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: routine-state ...
9992 transform: equal ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: routine-state ...
9992 transform: equal ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: routine-state ...
9992 transform: equal ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: routine-state ...
9992 transform: equal ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: routine-state ...
9992 transform: equal ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: routine-state ...
9992 transform: equal ...
9992 transform: assert ...
9992 transform: trace ...
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:channel <- new-channel 2
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1106
 104 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1113
9999 mem: storing 1113 in location 1108
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1108 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 0
9999 mem: location 1108 is 1113
9998 run: address to copy is 1113
9999 mem: storing 1113 in location 1109
 104 run: *full <- copy 0
9999 mem: location 1109 is 1113
9999 mem: storing 0 in location 1113
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1108 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 0
9999 mem: location 1108 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 1110
 104 run: *free <- copy 0
9999 mem: location 1110 is 1114
9999 mem: storing 0 in location 1114
 104 run: capacity:number <- next-ingredient 
9999 mem: storing 2 in location 1111
 104 run: capacity <- add capacity, 1
9999 mem: location 1111 is 2
9999 mem: storing 3 in location 1111
 104 run: dest:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1108 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 0
9999 mem: location 1108 is 1113
9998 run: address to copy is 1115
9999 mem: storing 1115 in location 1112
 104 run: *dest <- new character:type, capacity
9999 mem: location 1111 is 3
9999 mem: array size is 3
9999 mem: new alloc: 1116
9999 mem: location 1112 is 1115
9999 mem: storing 1116 in location 1115
 104 run: reply result
9999 mem: location 1108 is 1113
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1113
9999 mem: storing 1113 in location 1
 103 run: 2:number/routine <- start-running read-move:recipe, 1:address:channel, screen:address:screen
9999 mem: location 1 is 1113
9999 mem: location 900 is 1009
9999 trace: new routine; incrementing callstack depth to 3
9999 new: routine allocated memory from 101000 to 201000
9999 mem: storing 2 in location 2
 104 run: wait-for-routine 2:number
9999 mem: location 2 is 2
9998 run: waiting for routine 2
9990 schedule: read-move
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 104 run: stdin:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1002
 104 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1003
 104 run: from-file:number, quit?:boolean, error?:boolean <- read-file stdin, screen
9999 mem: location 1002 is 1113
9999 mem: location 1003 is 1009
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 101000
 105 run: stdin:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101002
 105 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 101003
 105 run: c:character, stdin <- read stdin
9999 mem: location 101002 is 1113
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 101012
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101014
 106 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101014 is 1113
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 101022
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101024
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 101024 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 101024 is 1113
9998 run: address to copy is 1113
9998 run: its type is number
9999 mem: location 1113 is 0
9999 mem: storing 0 in location 101025
 107 run: free:number <- get *chan, first-free:offset
9999 mem: location 101024 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 101024 is 1113
9998 run: address to copy is 1114
9998 run: its type is number
9999 mem: location 1114 is 0
9999 mem: storing 0 in location 101026
 107 run: result:boolean <- equal full, free
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: storing 1 in location 101027
 107 run: reply result
9999 mem: location 101027 is 1
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1
9999 mem: storing 1 in location 101015
 106 run: jump-unless empty?, 
9999 mem: location 101015 is 1
9998 run: jump-unless fell through
 106 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 101016
 106 run: wait-for-location *free-address
9999 mem: location 101016 is 1114
9999 mem: location 1114 is 0
9999 mem: location 101016 is 1114
9998 run: waiting for location 1114 to change from 0
9999 schedule: waking up routine 1
9990 schedule: run1001/scenario-read-move-blocking
 106 run: 3:number <- routine-state 2:number/id
9999 mem: location 2 is 2
9999 mem: storing 3 in location 3
 106 run: 4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
9999 mem: location 3 is 3
9999 mem: storing 1 in location 4
 106 run: assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]
9999 mem: location 4 is 1
 106 run: 1:address:channel <- write 1:address:channel, 97/a
9999 mem: location 1 is 1113
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1097
 107 run: val:character <- next-ingredient 
9999 mem: storing 97 in location 1098
 107 run: full:boolean <- channel-full? chan
9999 mem: location 1097 is 1113
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1120
 108 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1122
 108 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1122 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 1122 is 1113
9998 run: address to copy is 1114
9998 run: its type is number
9999 mem: location 1114 is 0
9999 mem: storing 0 in location 1123
 108 run: tmp <- add tmp, 1
9999 mem: location 1123 is 0
9999 mem: storing 1 in location 1123
 108 run: len:number <- channel-capacity chan
9999 mem: location 1122 is 1113
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1128
 109 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1130
 109 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1130 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 1130 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 1131
 109 run: result:number <- length *q
9999 mem: location 1131 is 1116
9999 mem: storing 3 in location 1132
 109 run: reply result
9999 mem: location 1132 is 3
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 3
9999 mem: storing 3 in location 1124
 108 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1123 is 1
9999 mem: location 1124 is 3
9999 mem: storing 0 in location 1125
 108 run: jump-unless at-end?, 
9999 mem: location 1125 is 0
9998 run: jumping to instruction 9
 108 run: full:number <- get *chan, first-full:offset
9999 mem: location 1122 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 1122 is 1113
9998 run: address to copy is 1113
9998 run: its type is number
9999 mem: location 1113 is 0
9999 mem: storing 0 in location 1126
 108 run: result:boolean <- equal full, tmp
9999 mem: location 1126 is 0
9999 mem: location 1123 is 1
9999 mem: storing 0 in location 1127
 108 run: reply result
9999 mem: location 1127 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1099
 107 run: jump-unless full, 
9999 mem: location 1099 is 0
9998 run: jumping to instruction 8
 107 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1097 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 1097 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 1101
 107 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1097 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 1097 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 1102
 107 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1101 is 1116
9999 mem: location 1102 is 1114
9999 mem: location 1114 is 0
9999 mem: storing 1117 in location 1103
 107 run: *dest <- copy val
9999 mem: location 1098 is 97
9999 mem: location 1103 is 1117
9999 mem: storing 97 in location 1117
 107 run: *free <- add *free, 1
9999 mem: location 1102 is 1114
9999 mem: location 1114 is 0
9999 mem: location 1102 is 1114
9999 mem: storing 1 in location 1114
 107 run: len:number <- length *circular-buffer
9999 mem: location 1101 is 1116
9999 mem: storing 3 in location 1104
 107 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1102 is 1114
9999 mem: location 1114 is 1
9999 mem: location 1104 is 3
9999 mem: storing 0 in location 1105
 107 run: jump-unless at-end?, 
9999 mem: location 1105 is 0
9998 run: jumping to instruction 19
 107 run: reply chan/same-as-ingredient:0
9999 mem: location 1097 is 1113
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1113
9999 mem: storing 1113 in location 1
 106 run: restart 2:number/routine
9999 mem: location 2 is 2
 106 run: wait-for-routine 2:number
9999 mem: location 2 is 2
9998 run: waiting for routine 2
9990 schedule: read/read-file/read-move
 106 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1113
9999 mem: storing 1113 in location 101017
 106 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 101018
 106 run: result:character <- index *circular-buffer, *full
9999 mem: location 101018 is 1116
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 0
9998 run: address to copy is 1117
9998 run: its type is character
9999 mem: location 1117 is 97
9999 mem: storing 97 in location 101019
 106 run: *full <- add *full, 1
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 0
9999 mem: location 101017 is 1113
9999 mem: storing 1 in location 1113
 106 run: len:number <- length *circular-buffer
9999 mem: location 101018 is 1116
9999 mem: storing 3 in location 101020
 106 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 1
9999 mem: location 101020 is 3
9999 mem: storing 0 in location 101021
 106 run: jump-unless at-end?, 
9999 mem: location 101021 is 0
9998 run: jumping to instruction 17
 106 run: reply result, chan/same-as-ingredient:0
9999 mem: location 101019 is 97
9999 mem: location 101014 is 1113
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 97
9998 run: result 1 is 1113
9999 mem: storing 97 in location 101004
9999 mem: storing 1113 in location 101002
 105 run: q-pressed?:boolean <- equal c, 81/Q
9999 mem: location 101004 is 97
9999 mem: storing 0 in location 101005
 105 run: jump-unless q-pressed?, 
9999 mem: location 101005 is 0
9998 run: jumping to instruction 8
 105 run: q-pressed? <- equal c, 113/q
9999 mem: location 101004 is 97
9999 mem: storing 0 in location 101005
 105 run: jump-unless q-pressed?, 
9999 mem: location 101005 is 0
9998 run: jumping to instruction 13
 105 run: empty-fake-keyboard?:boolean <- equal c, 0/eof
9999 mem: location 101004 is 97
9999 mem: storing 0 in location 101006
 105 run: jump-unless empty-fake-keyboard?, 
9999 mem: location 101006 is 0
9998 run: jumping to instruction 18
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 101004 is 97
9999 mem: storing 0 in location 101007
 105 run: jump-unless newline?, 
9999 mem: location 101007 is 0
9998 run: jumping to instruction 25
 105 run: file:number <- subtract c, 97/a
9999 mem: location 101004 is 97
9999 mem: storing 0 in location 101009
 105 run: above-min:boolean <- greater-or-equal file, 0
9999 mem: location 101009 is 0
9999 mem: storing 1 in location 101010
 105 run: jump-if above-min, 
9999 mem: location 101010 is 1
9998 run: jumping to instruction 35
 105 run: below-max:boolean <- lesser-than file, 8
9999 mem: location 101009 is 0
9999 mem: storing 1 in location 101011
 105 run: jump-if below-max, 
9999 mem: location 101011 is 1
9998 run: jumping to instruction 43
 105 run: reply file, 0/quit, 0/error
9999 mem: location 101009 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9998 run: result 1 is 0
9998 run: result 2 is 0
9999 mem: storing 0 in location 1004
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
 104 run: jump-unless quit?, 1:offset
9999 mem: location 1005 is 0
9998 run: jumping to instruction 6
 104 run: jump-unless error?, 1:offset
9999 mem: location 1006 is 0
9998 run: jumping to instruction 8
 104 run: result:address:move <- new move:type
9999 mem: new alloc: 101028
9999 mem: storing 101028 in location 1007
 104 run: x:address:number <- get-address *result, from-file:offset
9999 mem: location 1007 is 101028
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 1007 is 101028
9998 run: address to copy is 101028
9999 mem: storing 101028 in location 1008
 104 run: *x <- copy from-file
9999 mem: location 1004 is 0
9999 mem: location 1008 is 101028
9999 mem: storing 0 in location 101028
 104 run: x <- get-address *result, from-rank:offset
9999 mem: location 1007 is 101028
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 1007 is 101028
9998 run: address to copy is 101029
9999 mem: storing 101029 in location 1008
 104 run: *x, quit?, error? <- read-rank stdin, screen
9999 mem: location 1002 is 1113
9999 mem: location 1003 is 1009
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
 105 run: stdin:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1097
 105 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1098
 105 run: c:character, stdin <- read stdin
9999 mem: location 1097 is 1113
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101014
 106 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101014 is 1113
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101024
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 101024 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 101024 is 1113
9998 run: address to copy is 1113
9998 run: its type is number
9999 mem: location 1113 is 1
9999 mem: storing 1 in location 101025
 107 run: free:number <- get *chan, first-free:offset
9999 mem: location 101024 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 101024 is 1113
9998 run: address to copy is 1114
9998 run: its type is number
9999 mem: location 1114 is 1
9999 mem: storing 1 in location 101026
 107 run: result:boolean <- equal full, free
9999 mem: location 101025 is 1
9999 mem: location 101026 is 1
9999 mem: storing 1 in location 101027
 107 run: reply result
9999 mem: location 101027 is 1
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1
9999 mem: storing 1 in location 101015
 106 run: jump-unless empty?, 
9999 mem: location 101015 is 1
9998 run: jump-unless fell through
 106 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 101016
 106 run: wait-for-location *free-address
9999 mem: location 101016 is 1114
9999 mem: location 1114 is 1
9999 mem: location 101016 is 1114
9998 run: waiting for location 1114 to change from 1
9999 schedule: waking up routine 1
9990 schedule: run1001/scenario-read-move-blocking
 106 run: 3:number <- routine-state 2:number/id
9999 mem: location 2 is 2
9999 mem: storing 3 in location 3
 106 run: 4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
9999 mem: location 3 is 3
9999 mem: storing 1 in location 4
 106 run: assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after rank 'a']
9999 mem: location 4 is 1
 106 run: 1:address:channel <- write 1:address:channel, 50/'2'
9999 mem: location 1 is 1113
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1133
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1135
 107 run: val:character <- next-ingredient 
9999 mem: storing 50 in location 1136
 107 run: full:boolean <- channel-full? chan
9999 mem: location 1135 is 1113
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 108 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1122
 108 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1122 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 1122 is 1113
9998 run: address to copy is 1114
9998 run: its type is number
9999 mem: location 1114 is 1
9999 mem: storing 1 in location 1123
 108 run: tmp <- add tmp, 1
9999 mem: location 1123 is 1
9999 mem: storing 2 in location 1123
 108 run: len:number <- channel-capacity chan
9999 mem: location 1122 is 1113
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
 109 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1130
 109 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1130 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 1130 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 1131
 109 run: result:number <- length *q
9999 mem: location 1131 is 1116
9999 mem: storing 3 in location 1132
 109 run: reply result
9999 mem: location 1132 is 3
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 3
9999 mem: storing 3 in location 1124
 108 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1123 is 2
9999 mem: location 1124 is 3
9999 mem: storing 0 in location 1125
 108 run: jump-unless at-end?, 
9999 mem: location 1125 is 0
9998 run: jumping to instruction 9
 108 run: full:number <- get *chan, first-full:offset
9999 mem: location 1122 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 1122 is 1113
9998 run: address to copy is 1113
9998 run: its type is number
9999 mem: location 1113 is 1
9999 mem: storing 1 in location 1126
 108 run: result:boolean <- equal full, tmp
9999 mem: location 1126 is 1
9999 mem: location 1123 is 2
9999 mem: storing 0 in location 1127
 108 run: reply result
9999 mem: location 1127 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1137
 107 run: jump-unless full, 
9999 mem: location 1137 is 0
9998 run: jumping to instruction 8
 107 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1135 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 1135 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 1139
 107 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1135 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 1135 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 1140
 107 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1139 is 1116
9999 mem: location 1140 is 1114
9999 mem: location 1114 is 1
9999 mem: storing 1118 in location 1141
 107 run: *dest <- copy val
9999 mem: location 1136 is 50
9999 mem: location 1141 is 1118
9999 mem: storing 50 in location 1118
 107 run: *free <- add *free, 1
9999 mem: location 1140 is 1114
9999 mem: location 1114 is 1
9999 mem: location 1140 is 1114
9999 mem: storing 2 in location 1114
 107 run: len:number <- length *circular-buffer
9999 mem: location 1139 is 1116
9999 mem: storing 3 in location 1142
 107 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1140 is 1114
9999 mem: location 1114 is 2
9999 mem: location 1142 is 3
9999 mem: storing 0 in location 1143
 107 run: jump-unless at-end?, 
9999 mem: location 1143 is 0
9998 run: jumping to instruction 19
 107 run: reply chan/same-as-ingredient:0
9999 mem: location 1135 is 1113
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1113
9999 mem: storing 1113 in location 1
 106 run: restart 2:number/routine
9999 mem: location 2 is 2
 106 run: wait-for-routine 2:number
9999 mem: location 2 is 2
9998 run: waiting for routine 2
9990 schedule: read/read-rank/read-move
 106 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1113
9999 mem: storing 1113 in location 101017
 106 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 101018
 106 run: result:character <- index *circular-buffer, *full
9999 mem: location 101018 is 1116
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 1
9998 run: address to copy is 1118
9998 run: its type is character
9999 mem: location 1118 is 50
9999 mem: storing 50 in location 101019
 106 run: *full <- add *full, 1
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 1
9999 mem: location 101017 is 1113
9999 mem: storing 2 in location 1113
 106 run: len:number <- length *circular-buffer
9999 mem: location 101018 is 1116
9999 mem: storing 3 in location 101020
 106 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 2
9999 mem: location 101020 is 3
9999 mem: storing 0 in location 101021
 106 run: jump-unless at-end?, 
9999 mem: location 101021 is 0
9998 run: jumping to instruction 17
 106 run: reply result, chan/same-as-ingredient:0
9999 mem: location 101019 is 50
9999 mem: location 101014 is 1113
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 50
9998 run: result 1 is 1113
9999 mem: storing 50 in location 1099
9999 mem: storing 1113 in location 1097
 105 run: q-pressed?:boolean <- equal c, 8/Q
9999 mem: location 1099 is 50
9999 mem: storing 0 in location 1100
 105 run: jump-unless q-pressed?, 
9999 mem: location 1100 is 0
9998 run: jumping to instruction 8
 105 run: q-pressed? <- equal c, 113/q
9999 mem: location 1099 is 50
9999 mem: storing 0 in location 1100
 105 run: jump-unless q-pressed?, 
9999 mem: location 1100 is 0
9998 run: jumping to instruction 13
 105 run: newline?:boolean <- equal c, 10
9999 mem: location 1099 is 50
9999 mem: storing 0 in location 1101
 105 run: jump-unless newline?, 
9999 mem: location 1101 is 0
9998 run: jumping to instruction 20
 105 run: rank:number <- subtract c, 49/'1'
9999 mem: location 1099 is 50
9999 mem: storing 1 in location 1103
 105 run: above-min:boolean <- greater-or-equal rank, 0
9999 mem: location 1103 is 1
9999 mem: storing 1 in location 1104
 105 run: jump-if above-min, 
9999 mem: location 1104 is 1
9998 run: jumping to instruction 29
 105 run: below-max:boolean <- lesser-or-equal rank, 7
9999 mem: location 1103 is 1
9999 mem: storing 1 in location 1105
 105 run: jump-if below-max, 
9999 mem: location 1105 is 1
9998 run: jumping to instruction 37
 105 run: reply rank, 0/quit, 0/error
9999 mem: location 1103 is 1
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9998 run: result 1 is 0
9998 run: result 2 is 0
9999 mem: location 1008 is 101029
9999 mem: storing 1 in location 101029
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
 104 run: jump-unless quit?, 1:offset
9999 mem: location 1005 is 0
9998 run: jumping to instruction 15
 104 run: jump-unless error?, 1:offset
9999 mem: location 1006 is 0
9998 run: jumping to instruction 17
 104 run: error? <- expect-from-channel stdin, 45/dash, screen
9999 mem: location 1002 is 1113
9999 mem: location 1003 is 1009
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 101032
 105 run: stdin:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101034
 105 run: expected:character <- next-ingredient 
9999 mem: storing 45 in location 101035
 105 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 101036
 105 run: c:character, stdin <- read stdin
9999 mem: location 101034 is 1113
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101014
 106 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101014 is 1113
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101024
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 101024 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 101024 is 1113
9998 run: address to copy is 1113
9998 run: its type is number
9999 mem: location 1113 is 2
9999 mem: storing 2 in location 101025
 107 run: free:number <- get *chan, first-free:offset
9999 mem: location 101024 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 101024 is 1113
9998 run: address to copy is 1114
9998 run: its type is number
9999 mem: location 1114 is 2
9999 mem: storing 2 in location 101026
 107 run: result:boolean <- equal full, free
9999 mem: location 101025 is 2
9999 mem: location 101026 is 2
9999 mem: storing 1 in location 101027
 107 run: reply result
9999 mem: location 101027 is 1
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1
9999 mem: storing 1 in location 101015
 106 run: jump-unless empty?, 
9999 mem: location 101015 is 1
9998 run: jump-unless fell through
 106 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 101016
 106 run: wait-for-location *free-address
9999 mem: location 101016 is 1114
9999 mem: location 1114 is 2
9999 mem: location 101016 is 1114
9998 run: waiting for location 1114 to change from 2
9999 schedule: waking up routine 1
9990 schedule: run1001/scenario-read-move-blocking
 106 run: 3:number <- routine-state 2:number/id
9999 mem: location 2 is 2
9999 mem: storing 3 in location 3
 106 run: 4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
9999 mem: location 3 is 3
9999 mem: storing 1 in location 4
 106 run: assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2']
9999 mem: location 4 is 1
 106 run: 1:address:channel <- write 1:address:channel, 45/'-'
9999 mem: location 1 is 1113
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1097
 107 run: val:character <- next-ingredient 
9999 mem: storing 45 in location 1098
 107 run: full:boolean <- channel-full? chan
9999 mem: location 1097 is 1113
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 108 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1122
 108 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1122 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 1122 is 1113
9998 run: address to copy is 1114
9998 run: its type is number
9999 mem: location 1114 is 2
9999 mem: storing 2 in location 1123
 108 run: tmp <- add tmp, 1
9999 mem: location 1123 is 2
9999 mem: storing 3 in location 1123
 108 run: len:number <- channel-capacity chan
9999 mem: location 1122 is 1113
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
 109 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1130
 109 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1130 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 1130 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 1131
 109 run: result:number <- length *q
9999 mem: location 1131 is 1116
9999 mem: storing 3 in location 1132
 109 run: reply result
9999 mem: location 1132 is 3
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 3
9999 mem: storing 3 in location 1124
 108 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1123 is 3
9999 mem: location 1124 is 3
9999 mem: storing 1 in location 1125
 108 run: jump-unless at-end?, 
9999 mem: location 1125 is 1
9998 run: jump-unless fell through
 108 run: tmp <- copy 0
9999 mem: storing 0 in location 1123
 108 run: full:number <- get *chan, first-full:offset
9999 mem: location 1122 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 1122 is 1113
9998 run: address to copy is 1113
9998 run: its type is number
9999 mem: location 1113 is 2
9999 mem: storing 2 in location 1126
 108 run: result:boolean <- equal full, tmp
9999 mem: location 1126 is 2
9999 mem: location 1123 is 0
9999 mem: storing 0 in location 1127
 108 run: reply result
9999 mem: location 1127 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1099
 107 run: jump-unless full, 
9999 mem: location 1099 is 0
9998 run: jumping to instruction 8
 107 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1097 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 1097 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 1101
 107 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1097 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 1097 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 1102
 107 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1101 is 1116
9999 mem: location 1102 is 1114
9999 mem: location 1114 is 2
9999 mem: storing 1119 in location 1103
 107 run: *dest <- copy val
9999 mem: location 1098 is 45
9999 mem: location 1103 is 1119
9999 mem: storing 45 in location 1119
 107 run: *free <- add *free, 1
9999 mem: location 1102 is 1114
9999 mem: location 1114 is 2
9999 mem: location 1102 is 1114
9999 mem: storing 3 in location 1114
 107 run: len:number <- length *circular-buffer
9999 mem: location 1101 is 1116
9999 mem: storing 3 in location 1104
 107 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1102 is 1114
9999 mem: location 1114 is 3
9999 mem: location 1104 is 3
9999 mem: storing 1 in location 1105
 107 run: jump-unless at-end?, 
9999 mem: location 1105 is 1
9998 run: jump-unless fell through
 107 run: *free <- copy 0
9999 mem: location 1102 is 1114
9999 mem: storing 0 in location 1114
 107 run: reply chan/same-as-ingredient:0
9999 mem: location 1097 is 1113
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1113
9999 mem: storing 1113 in location 1
 106 run: restart 2:number/routine
9999 mem: location 2 is 2
 106 run: wait-for-routine 2:number
9999 mem: location 2 is 2
9998 run: waiting for routine 2
9990 schedule: read/expect-from-channel/read-move
 106 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1113
9999 mem: storing 1113 in location 101017
 106 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 101018
 106 run: result:character <- index *circular-buffer, *full
9999 mem: location 101018 is 1116
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 2
9998 run: address to copy is 1119
9998 run: its type is character
9999 mem: location 1119 is 45
9999 mem: storing 45 in location 101019
 106 run: *full <- add *full, 1
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 2
9999 mem: location 101017 is 1113
9999 mem: storing 3 in location 1113
 106 run: len:number <- length *circular-buffer
9999 mem: location 101018 is 1116
9999 mem: storing 3 in location 101020
 106 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 3
9999 mem: location 101020 is 3
9999 mem: storing 1 in location 101021
 106 run: jump-unless at-end?, 
9999 mem: location 101021 is 1
9998 run: jump-unless fell through
 106 run: *full <- copy 0
9999 mem: location 101017 is 1113
9999 mem: storing 0 in location 1113
 106 run: reply result, chan/same-as-ingredient:0
9999 mem: location 101019 is 45
9999 mem: location 101014 is 1113
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 45
9998 run: result 1 is 1113
9999 mem: storing 45 in location 101037
9999 mem: storing 1113 in location 101034
 105 run: match?:boolean <- equal c, expected
9999 mem: location 101037 is 45
9999 mem: location 101035 is 45
9999 mem: storing 1 in location 101038
 105 run: jump-if match?, 
9999 mem: location 101038 is 1
9998 run: jumping to instruction 10
 105 run: result:boolean <- not match?
9999 mem: location 101038 is 1
9999 mem: storing 0 in location 101040
 105 run: reply result
9999 mem: location 101040 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1006
 104 run: jump-unless error?, 1:offset
9999 mem: location 1006 is 0
9998 run: jumping to instruction 20
 104 run: x <- get-address *result, to-file:offset
9999 mem: location 1007 is 101028
9999 mem: location 101028 is 0
9999 mem: location 101029 is 1
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 1007 is 101028
9998 run: address to copy is 101030
9999 mem: storing 101030 in location 1008
 104 run: *x, quit?, error? <- read-file stdin, screen
9999 mem: location 1002 is 1113
9999 mem: location 1003 is 1009
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
 105 run: stdin:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101002
 105 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 101003
 105 run: c:character, stdin <- read stdin
9999 mem: location 101002 is 1113
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101014
 106 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101014 is 1113
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101024
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 101024 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 101024 is 1113
9998 run: address to copy is 1113
9998 run: its type is number
9999 mem: location 1113 is 0
9999 mem: storing 0 in location 101025
 107 run: free:number <- get *chan, first-free:offset
9999 mem: location 101024 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 101024 is 1113
9998 run: address to copy is 1114
9998 run: its type is number
9999 mem: location 1114 is 0
9999 mem: storing 0 in location 101026
 107 run: result:boolean <- equal full, free
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: storing 1 in location 101027
 107 run: reply result
9999 mem: location 101027 is 1
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1
9999 mem: storing 1 in location 101015
 106 run: jump-unless empty?, 
9999 mem: location 101015 is 1
9998 run: jump-unless fell through
 106 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 101016
 106 run: wait-for-location *free-address
9999 mem: location 101016 is 1114
9999 mem: location 1114 is 0
9999 mem: location 101016 is 1114
9998 run: waiting for location 1114 to change from 0
9999 schedule: waking up routine 1
9990 schedule: run1001/scenario-read-move-blocking
 106 run: 3:number <- routine-state 2:number
9999 mem: location 2 is 2
9999 mem: storing 3 in location 3
 106 run: 4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
9999 mem: location 3 is 3
9999 mem: storing 1 in location 4
 106 run: assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after hyphen 'a2-']
9999 mem: location 4 is 1
 106 run: 1:address:channel <- write 1:address:channel, 97/a
9999 mem: location 1 is 1113
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1097
 107 run: val:character <- next-ingredient 
9999 mem: storing 97 in location 1098
 107 run: full:boolean <- channel-full? chan
9999 mem: location 1097 is 1113
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 108 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1122
 108 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1122 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 1122 is 1113
9998 run: address to copy is 1114
9998 run: its type is number
9999 mem: location 1114 is 0
9999 mem: storing 0 in location 1123
 108 run: tmp <- add tmp, 1
9999 mem: location 1123 is 0
9999 mem: storing 1 in location 1123
 108 run: len:number <- channel-capacity chan
9999 mem: location 1122 is 1113
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
 109 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1130
 109 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1130 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 1130 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 1131
 109 run: result:number <- length *q
9999 mem: location 1131 is 1116
9999 mem: storing 3 in location 1132
 109 run: reply result
9999 mem: location 1132 is 3
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 3
9999 mem: storing 3 in location 1124
 108 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1123 is 1
9999 mem: location 1124 is 3
9999 mem: storing 0 in location 1125
 108 run: jump-unless at-end?, 
9999 mem: location 1125 is 0
9998 run: jumping to instruction 9
 108 run: full:number <- get *chan, first-full:offset
9999 mem: location 1122 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 1122 is 1113
9998 run: address to copy is 1113
9998 run: its type is number
9999 mem: location 1113 is 0
9999 mem: storing 0 in location 1126
 108 run: result:boolean <- equal full, tmp
9999 mem: location 1126 is 0
9999 mem: location 1123 is 1
9999 mem: storing 0 in location 1127
 108 run: reply result
9999 mem: location 1127 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1099
 107 run: jump-unless full, 
9999 mem: location 1099 is 0
9998 run: jumping to instruction 8
 107 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1097 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 1097 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 1101
 107 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1097 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 1097 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 1102
 107 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1101 is 1116
9999 mem: location 1102 is 1114
9999 mem: location 1114 is 0
9999 mem: storing 1117 in location 1103
 107 run: *dest <- copy val
9999 mem: location 1098 is 97
9999 mem: location 1103 is 1117
9999 mem: storing 97 in location 1117
 107 run: *free <- add *free, 1
9999 mem: location 1102 is 1114
9999 mem: location 1114 is 0
9999 mem: location 1102 is 1114
9999 mem: storing 1 in location 1114
 107 run: len:number <- length *circular-buffer
9999 mem: location 1101 is 1116
9999 mem: storing 3 in location 1104
 107 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1102 is 1114
9999 mem: location 1114 is 1
9999 mem: location 1104 is 3
9999 mem: storing 0 in location 1105
 107 run: jump-unless at-end?, 
9999 mem: location 1105 is 0
9998 run: jumping to instruction 19
 107 run: reply chan/same-as-ingredient:0
9999 mem: location 1097 is 1113
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1113
9999 mem: storing 1113 in location 1
 106 run: restart 2:number/routine
9999 mem: location 2 is 2
 106 run: wait-for-routine 2:number
9999 mem: location 2 is 2
9998 run: waiting for routine 2
9990 schedule: read/read-file/read-move
 106 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1113
9999 mem: storing 1113 in location 101017
 106 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 0
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 101018
 106 run: result:character <- index *circular-buffer, *full
9999 mem: location 101018 is 1116
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 0
9998 run: address to copy is 1117
9998 run: its type is character
9999 mem: location 1117 is 97
9999 mem: storing 97 in location 101019
 106 run: *full <- add *full, 1
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 0
9999 mem: location 101017 is 1113
9999 mem: storing 1 in location 1113
 106 run: len:number <- length *circular-buffer
9999 mem: location 101018 is 1116
9999 mem: storing 3 in location 101020
 106 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 1
9999 mem: location 101020 is 3
9999 mem: storing 0 in location 101021
 106 run: jump-unless at-end?, 
9999 mem: location 101021 is 0
9998 run: jumping to instruction 17
 106 run: reply result, chan/same-as-ingredient:0
9999 mem: location 101019 is 97
9999 mem: location 101014 is 1113
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 97
9998 run: result 1 is 1113
9999 mem: storing 97 in location 101004
9999 mem: storing 1113 in location 101002
 105 run: q-pressed?:boolean <- equal c, 81/Q
9999 mem: location 101004 is 97
9999 mem: storing 0 in location 101005
 105 run: jump-unless q-pressed?, 
9999 mem: location 101005 is 0
9998 run: jumping to instruction 8
 105 run: q-pressed? <- equal c, 113/q
9999 mem: location 101004 is 97
9999 mem: storing 0 in location 101005
 105 run: jump-unless q-pressed?, 
9999 mem: location 101005 is 0
9998 run: jumping to instruction 13
 105 run: empty-fake-keyboard?:boolean <- equal c, 0/eof
9999 mem: location 101004 is 97
9999 mem: storing 0 in location 101006
 105 run: jump-unless empty-fake-keyboard?, 
9999 mem: location 101006 is 0
9998 run: jumping to instruction 18
 105 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 101004 is 97
9999 mem: storing 0 in location 101007
 105 run: jump-unless newline?, 
9999 mem: location 101007 is 0
9998 run: jumping to instruction 25
 105 run: file:number <- subtract c, 97/a
9999 mem: location 101004 is 97
9999 mem: storing 0 in location 101009
 105 run: above-min:boolean <- greater-or-equal file, 0
9999 mem: location 101009 is 0
9999 mem: storing 1 in location 101010
 105 run: jump-if above-min, 
9999 mem: location 101010 is 1
9998 run: jumping to instruction 35
 105 run: below-max:boolean <- lesser-than file, 8
9999 mem: location 101009 is 0
9999 mem: storing 1 in location 101011
 105 run: jump-if below-max, 
9999 mem: location 101011 is 1
9998 run: jumping to instruction 43
 105 run: reply file, 0/quit, 0/error
9999 mem: location 101009 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9998 run: result 1 is 0
9998 run: result 2 is 0
9999 mem: location 1008 is 101030
9999 mem: storing 0 in location 101030
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
 104 run: jump-unless quit?:boolean, 1:offset
9999 mem: location 1005 is 0
9998 run: jumping to instruction 24
 104 run: jump-unless error?:boolean, 1:offset
9999 mem: location 1006 is 0
9998 run: jumping to instruction 26
 104 run: x:address:number <- get-address *result, to-rank:offset
9999 mem: location 1007 is 101028
9999 mem: location 101028 is 0
9999 mem: location 101029 is 1
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 1007 is 101028
9998 run: address to copy is 101031
9999 mem: storing 101031 in location 1008
 104 run: *x, quit?, error? <- read-rank stdin, screen
9999 mem: location 1002 is 1113
9999 mem: location 1003 is 1009
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
 105 run: stdin:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1097
 105 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1098
 105 run: c:character, stdin <- read stdin
9999 mem: location 1097 is 1113
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101014
 106 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101014 is 1113
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101024
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 101024 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 101024 is 1113
9998 run: address to copy is 1113
9998 run: its type is number
9999 mem: location 1113 is 1
9999 mem: storing 1 in location 101025
 107 run: free:number <- get *chan, first-free:offset
9999 mem: location 101024 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 101024 is 1113
9998 run: address to copy is 1114
9998 run: its type is number
9999 mem: location 1114 is 1
9999 mem: storing 1 in location 101026
 107 run: result:boolean <- equal full, free
9999 mem: location 101025 is 1
9999 mem: location 101026 is 1
9999 mem: storing 1 in location 101027
 107 run: reply result
9999 mem: location 101027 is 1
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1
9999 mem: storing 1 in location 101015
 106 run: jump-unless empty?, 
9999 mem: location 101015 is 1
9998 run: jump-unless fell through
 106 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 101016
 106 run: wait-for-location *free-address
9999 mem: location 101016 is 1114
9999 mem: location 1114 is 1
9999 mem: location 101016 is 1114
9998 run: waiting for location 1114 to change from 1
9999 schedule: waking up routine 1
9990 schedule: run1001/scenario-read-move-blocking
 106 run: 3:number <- routine-state 2:number
9999 mem: location 2 is 2
9999 mem: storing 3 in location 3
 106 run: 4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
9999 mem: location 3 is 3
9999 mem: storing 1 in location 4
 106 run: assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a2-a']
9999 mem: location 4 is 1
 106 run: 1:address:channel <- write 1:address:channel, 52/'4'
9999 mem: location 1 is 1113
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1135
 107 run: val:character <- next-ingredient 
9999 mem: storing 52 in location 1136
 107 run: full:boolean <- channel-full? chan
9999 mem: location 1135 is 1113
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 108 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1122
 108 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1122 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 1122 is 1113
9998 run: address to copy is 1114
9998 run: its type is number
9999 mem: location 1114 is 1
9999 mem: storing 1 in location 1123
 108 run: tmp <- add tmp, 1
9999 mem: location 1123 is 1
9999 mem: storing 2 in location 1123
 108 run: len:number <- channel-capacity chan
9999 mem: location 1122 is 1113
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
 109 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1130
 109 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1130 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 1130 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 1131
 109 run: result:number <- length *q
9999 mem: location 1131 is 1116
9999 mem: storing 3 in location 1132
 109 run: reply result
9999 mem: location 1132 is 3
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 3
9999 mem: storing 3 in location 1124
 108 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1123 is 2
9999 mem: location 1124 is 3
9999 mem: storing 0 in location 1125
 108 run: jump-unless at-end?, 
9999 mem: location 1125 is 0
9998 run: jumping to instruction 9
 108 run: full:number <- get *chan, first-full:offset
9999 mem: location 1122 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 1122 is 1113
9998 run: address to copy is 1113
9998 run: its type is number
9999 mem: location 1113 is 1
9999 mem: storing 1 in location 1126
 108 run: result:boolean <- equal full, tmp
9999 mem: location 1126 is 1
9999 mem: location 1123 is 2
9999 mem: storing 0 in location 1127
 108 run: reply result
9999 mem: location 1127 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1137
 107 run: jump-unless full, 
9999 mem: location 1137 is 0
9998 run: jumping to instruction 8
 107 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1135 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 1135 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 1139
 107 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1135 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 1
9999 mem: location 1115 is 1116
9999 mem: location 1135 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 1140
 107 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1139 is 1116
9999 mem: location 1140 is 1114
9999 mem: location 1114 is 1
9999 mem: storing 1118 in location 1141
 107 run: *dest <- copy val
9999 mem: location 1136 is 52
9999 mem: location 1141 is 1118
9999 mem: storing 52 in location 1118
 107 run: *free <- add *free, 1
9999 mem: location 1140 is 1114
9999 mem: location 1114 is 1
9999 mem: location 1140 is 1114
9999 mem: storing 2 in location 1114
 107 run: len:number <- length *circular-buffer
9999 mem: location 1139 is 1116
9999 mem: storing 3 in location 1142
 107 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1140 is 1114
9999 mem: location 1114 is 2
9999 mem: location 1142 is 3
9999 mem: storing 0 in location 1143
 107 run: jump-unless at-end?, 
9999 mem: location 1143 is 0
9998 run: jumping to instruction 19
 107 run: reply chan/same-as-ingredient:0
9999 mem: location 1135 is 1113
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1113
9999 mem: storing 1113 in location 1
 106 run: restart 2:number/routine
9999 mem: location 2 is 2
 106 run: wait-for-routine 2:number
9999 mem: location 2 is 2
9998 run: waiting for routine 2
9990 schedule: read/read-rank/read-move
 106 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1113
9999 mem: storing 1113 in location 101017
 106 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 1
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 101018
 106 run: result:character <- index *circular-buffer, *full
9999 mem: location 101018 is 1116
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 1
9998 run: address to copy is 1118
9998 run: its type is character
9999 mem: location 1118 is 52
9999 mem: storing 52 in location 101019
 106 run: *full <- add *full, 1
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 1
9999 mem: location 101017 is 1113
9999 mem: storing 2 in location 1113
 106 run: len:number <- length *circular-buffer
9999 mem: location 101018 is 1116
9999 mem: storing 3 in location 101020
 106 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 2
9999 mem: location 101020 is 3
9999 mem: storing 0 in location 101021
 106 run: jump-unless at-end?, 
9999 mem: location 101021 is 0
9998 run: jumping to instruction 17
 106 run: reply result, chan/same-as-ingredient:0
9999 mem: location 101019 is 52
9999 mem: location 101014 is 1113
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 52
9998 run: result 1 is 1113
9999 mem: storing 52 in location 1099
9999 mem: storing 1113 in location 1097
 105 run: q-pressed?:boolean <- equal c, 8/Q
9999 mem: location 1099 is 52
9999 mem: storing 0 in location 1100
 105 run: jump-unless q-pressed?, 
9999 mem: location 1100 is 0
9998 run: jumping to instruction 8
 105 run: q-pressed? <- equal c, 113/q
9999 mem: location 1099 is 52
9999 mem: storing 0 in location 1100
 105 run: jump-unless q-pressed?, 
9999 mem: location 1100 is 0
9998 run: jumping to instruction 13
 105 run: newline?:boolean <- equal c, 10
9999 mem: location 1099 is 52
9999 mem: storing 0 in location 1101
 105 run: jump-unless newline?, 
9999 mem: location 1101 is 0
9998 run: jumping to instruction 20
 105 run: rank:number <- subtract c, 49/'1'
9999 mem: location 1099 is 52
9999 mem: storing 3 in location 1103
 105 run: above-min:boolean <- greater-or-equal rank, 0
9999 mem: location 1103 is 3
9999 mem: storing 1 in location 1104
 105 run: jump-if above-min, 
9999 mem: location 1104 is 1
9998 run: jumping to instruction 29
 105 run: below-max:boolean <- lesser-or-equal rank, 7
9999 mem: location 1103 is 3
9999 mem: storing 1 in location 1105
 105 run: jump-if below-max, 
9999 mem: location 1105 is 1
9998 run: jumping to instruction 37
 105 run: reply rank, 0/quit, 0/error
9999 mem: location 1103 is 3
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 3
9998 run: result 1 is 0
9998 run: result 2 is 0
9999 mem: location 1008 is 101031
9999 mem: storing 3 in location 101031
9999 mem: storing 0 in location 1005
9999 mem: storing 0 in location 1006
 104 run: jump-unless quit?, 1:offset
9999 mem: location 1005 is 0
9998 run: jumping to instruction 30
 104 run: jump-unless error?, 1:offset
9999 mem: location 1006 is 0
9998 run: jumping to instruction 32
 104 run: error? <- expect-from-channel stdin, 10/newline, screen
9999 mem: location 1002 is 1113
9999 mem: location 1003 is 1009
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 105 run: stdin:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101034
 105 run: expected:character <- next-ingredient 
9999 mem: storing 10 in location 101035
 105 run: screen:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 101036
 105 run: c:character, stdin <- read stdin
9999 mem: location 101034 is 1113
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101014
 106 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101014 is 1113
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 101024
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 101024 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 101024 is 1113
9998 run: address to copy is 1113
9998 run: its type is number
9999 mem: location 1113 is 2
9999 mem: storing 2 in location 101025
 107 run: free:number <- get *chan, first-free:offset
9999 mem: location 101024 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 101024 is 1113
9998 run: address to copy is 1114
9998 run: its type is number
9999 mem: location 1114 is 2
9999 mem: storing 2 in location 101026
 107 run: result:boolean <- equal full, free
9999 mem: location 101025 is 2
9999 mem: location 101026 is 2
9999 mem: storing 1 in location 101027
 107 run: reply result
9999 mem: location 101027 is 1
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1
9999 mem: storing 1 in location 101015
 106 run: jump-unless empty?, 
9999 mem: location 101015 is 1
9998 run: jump-unless fell through
 106 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 101016
 106 run: wait-for-location *free-address
9999 mem: location 101016 is 1114
9999 mem: location 1114 is 2
9999 mem: location 101016 is 1114
9998 run: waiting for location 1114 to change from 2
9999 schedule: waking up routine 1
9990 schedule: run1001/scenario-read-move-blocking
 106 run: 3:number <- routine-state 2:number
9999 mem: location 2 is 2
9999 mem: storing 3 in location 3
 106 run: 4:boolean/waiting? <- equal 3:number/routine-state, 3/waiting
9999 mem: location 3 is 3
9999 mem: storing 1 in location 4
 106 run: assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2-a4']
9999 mem: location 4 is 1
 106 run: 1:address:channel <- write 1:address:channel, 10
9999 mem: location 1 is 1113
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1097
 107 run: val:character <- next-ingredient 
9999 mem: storing 10 in location 1098
 107 run: full:boolean <- channel-full? chan
9999 mem: location 1097 is 1113
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 108 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1122
 108 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1122 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 1122 is 1113
9998 run: address to copy is 1114
9998 run: its type is number
9999 mem: location 1114 is 2
9999 mem: storing 2 in location 1123
 108 run: tmp <- add tmp, 1
9999 mem: location 1123 is 2
9999 mem: storing 3 in location 1123
 108 run: len:number <- channel-capacity chan
9999 mem: location 1122 is 1113
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
 109 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1113 in location 1130
 109 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1130 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 1130 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 1131
 109 run: result:number <- length *q
9999 mem: location 1131 is 1116
9999 mem: storing 3 in location 1132
 109 run: reply result
9999 mem: location 1132 is 3
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 3
9999 mem: storing 3 in location 1124
 108 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1123 is 3
9999 mem: location 1124 is 3
9999 mem: storing 1 in location 1125
 108 run: jump-unless at-end?, 
9999 mem: location 1125 is 1
9998 run: jump-unless fell through
 108 run: tmp <- copy 0
9999 mem: storing 0 in location 1123
 108 run: full:number <- get *chan, first-full:offset
9999 mem: location 1122 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 1122 is 1113
9998 run: address to copy is 1113
9998 run: its type is number
9999 mem: location 1113 is 2
9999 mem: storing 2 in location 1126
 108 run: result:boolean <- equal full, tmp
9999 mem: location 1126 is 2
9999 mem: location 1123 is 0
9999 mem: storing 0 in location 1127
 108 run: reply result
9999 mem: location 1127 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1099
 107 run: jump-unless full, 
9999 mem: location 1099 is 0
9998 run: jumping to instruction 8
 107 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1097 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 1097 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 1101
 107 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1097 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 2
9999 mem: location 1115 is 1116
9999 mem: location 1097 is 1113
9998 run: address to copy is 1114
9999 mem: storing 1114 in location 1102
 107 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1101 is 1116
9999 mem: location 1102 is 1114
9999 mem: location 1114 is 2
9999 mem: storing 1119 in location 1103
 107 run: *dest <- copy val
9999 mem: location 1098 is 10
9999 mem: location 1103 is 1119
9999 mem: storing 10 in location 1119
 107 run: *free <- add *free, 1
9999 mem: location 1102 is 1114
9999 mem: location 1114 is 2
9999 mem: location 1102 is 1114
9999 mem: storing 3 in location 1114
 107 run: len:number <- length *circular-buffer
9999 mem: location 1101 is 1116
9999 mem: storing 3 in location 1104
 107 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1102 is 1114
9999 mem: location 1114 is 3
9999 mem: location 1104 is 3
9999 mem: storing 1 in location 1105
 107 run: jump-unless at-end?, 
9999 mem: location 1105 is 1
9998 run: jump-unless fell through
 107 run: *free <- copy 0
9999 mem: location 1102 is 1114
9999 mem: storing 0 in location 1114
 107 run: reply chan/same-as-ingredient:0
9999 mem: location 1097 is 1113
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1113
9999 mem: storing 1113 in location 1
 106 run: restart 2:number/routine
9999 mem: location 2 is 2
 106 run: wait-for-routine 2:number
9999 mem: location 2 is 2
9998 run: waiting for routine 2
9990 schedule: read/expect-from-channel/read-move
 106 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1113
9999 mem: storing 1113 in location 101017
 106 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 101014 is 1113
9999 mem: location 1113 is 2
9999 mem: location 1114 is 0
9999 mem: location 1115 is 1116
9999 mem: location 101014 is 1113
9998 run: address to copy is 1115
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1115 is 1116
9999 mem: storing 1116 in location 101018
 106 run: result:character <- index *circular-buffer, *full
9999 mem: location 101018 is 1116
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 2
9998 run: address to copy is 1119
9998 run: its type is character
9999 mem: location 1119 is 10
9999 mem: storing 10 in location 101019
 106 run: *full <- add *full, 1
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 2
9999 mem: location 101017 is 1113
9999 mem: storing 3 in location 1113
 106 run: len:number <- length *circular-buffer
9999 mem: location 101018 is 1116
9999 mem: storing 3 in location 101020
 106 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101017 is 1113
9999 mem: location 1113 is 3
9999 mem: location 101020 is 3
9999 mem: storing 1 in location 101021
 106 run: jump-unless at-end?, 
9999 mem: location 101021 is 1
9998 run: jump-unless fell through
 106 run: *full <- copy 0
9999 mem: location 101017 is 1113
9999 mem: storing 0 in location 1113
 106 run: reply result, chan/same-as-ingredient:0
9999 mem: location 101019 is 10
9999 mem: location 101014 is 1113
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 10
9998 run: result 1 is 1113
9999 mem: storing 10 in location 101037
9999 mem: storing 1113 in location 101034
 105 run: match?:boolean <- equal c, expected
9999 mem: location 101037 is 10
9999 mem: location 101035 is 10
9999 mem: storing 1 in location 101038
 105 run: jump-if match?, 
9999 mem: location 101038 is 1
9998 run: jumping to instruction 10
 105 run: result:boolean <- not match?
9999 mem: location 101038 is 1
9999 mem: storing 0 in location 101040
 105 run: reply result
9999 mem: location 101040 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1006
 104 run: jump-unless error?, 1:offset
9999 mem: location 1006 is 0
9998 run: jumping to instruction 35
 104 run: reply result, quit?, error?
9999 mem: location 1007 is 101028
9999 mem: location 1005 is 0
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 3
9999 schedule: waking up routine 1
9990 schedule: run1001/scenario-read-move-blocking
 103 run: 3:number <- routine-state 2:number
9999 mem: location 2 is 2
9999 mem: storing 1 in location 3
 103 run: 4:boolean/completed? <- equal 3:number/routine-state, 1/completed
9999 mem: location 3 is 1
9999 mem: storing 1 in location 4
 103 run: assert 4:boolean/completed?, [
F read-move-blocking: routine failed to terminate on newline]
9999 mem: location 4 is 1
 103 run: trace 1, [test], [reached end]
   1 test: reached end 
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: trace-should-contain [
    test: reached end
  ]
9999 trace: fall-through: exiting scenario-read-move-blocking; decrementing callstack depth from 1
