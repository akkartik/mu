parse: instruction: assume-screen
parse:   ingredient: {name: "20", properties: ["20": "literal", "width": ]}
parse:   ingredient: {name: "2", properties: ["2": "literal", "height": ]}
parse: instruction: run
parse:   ingredient: {name: "
#?     $start-tracing #? 1
    1:address:channel <- init-channel 2:literal
#?     $print [aaa channel address: ], 1:address:channel, [ 
#? ] #? 1
    2:number/routine <- start-running read-move:recipe, 1:address:channel, screen:address
    # 'read-move' is waiting for input
    wait-for-routine 2:number
#?     $print [bbb channel address: ], 1:address:channel, [ 
#? ] #? 1
    3:number <- routine-state 2:number/id
#?     $print [I: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]
    # press 'a'
#?     $print [ccc channel address: ], 1:address:channel, [ 
#? ] #? 1
#?     $exit #? 1
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number/id
#?     $print [II: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after rank 'a']
    # press '2'
    1:address:channel <- write 1:address:channel, 50:literal  # '2'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number/id
#?     $print [III: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2']
    # press '-'
    1:address:channel <- write 1:address:channel, 45:literal  # '-'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
#?     $print [IV: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after hyphen 'a2-']
    # press 'a'
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
#?     $print [V: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a2-a']
    # press '4'
    1:address:channel <- write 1:address:channel, 52:literal  # '4'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
#?     $print [VI: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2-a4']
    # press 'newline'
    1:address:channel <- write 1:address:channel, 10:literal  # newline
    restart 2:number/routine
    # 'read-move' now completes
    wait-for-routine 2:number
    3:number <- routine-state 2:number
#?     $print [VII: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/completed? <- equal 3:number/routine-state, 1:literal/completed
    assert 4:boolean/completed?, [
F read-move-blocking: routine failed to terminate on newline]
    trace [test], [reached end]
  ", properties: ["
#?     $start-tracing #? 1
    1:address:channel <- init-channel 2:literal
#?     $print [aaa channel address: ], 1:address:channel, [ 
#? ] #? 1
    2:number/routine <- start-running read-move:recipe, 1:address:channel, screen:address
    # 'read-move' is waiting for input
    wait-for-routine 2:number
#?     $print [bbb channel address: ], 1:address:channel, [ 
#? ] #? 1
    3:number <- routine-state 2:number/id
#?     $print [I: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]
    # press 'a'
#?     $print [ccc channel address: ], 1:address:channel, [ 
#? ] #? 1
#?     $exit #? 1
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number/id
#?     $print [II: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after rank 'a']
    # press '2'
    1:address:channel <- write 1:address:channel, 50:literal  # '2'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number/id
#?     $print [III: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2']
    # press '-'
    1:address:channel <- write 1:address:channel, 45:literal  # '-'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
#?     $print [IV: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after hyphen 'a2-']
    # press 'a'
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
#?     $print [V: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a2-a']
    # press '4'
    1:address:channel <- write 1:address:channel, 52:literal  # '4'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
#?     $print [VI: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2-a4']
    # press 'newline'
    1:address:channel <- write 1:address:channel, 10:literal  # newline
    restart 2:number/routine
    # 'read-move' now completes
    wait-for-routine 2:number
    3:number <- routine-state 2:number
#?     $print [VII: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/completed? <- equal 3:number/routine-state, 1:literal/completed
    assert 4:boolean/completed?, [
F read-move-blocking: routine failed to terminate on newline]
    trace [test], [reached end]
  ": "literal-string"]}
parse: instruction: trace-should-contain
parse:   ingredient: {name: "
    test: reached end
  ", properties: ["
    test: reached end
  ": "literal-string"]}
after-brace: recipe read-move-blocking
after-brace: assume-screen ...
after-brace: run ...
after-brace: trace-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: read-move-blocking
run: screen:address <- assume-screen 20:literal/width, 2:literal/height
run: default-space:address:array:location <- new location:type, 30:literal/capacity
mem: array size is 30
mem: new alloc: 1000
run: result:address:screen <- new screen:type
mem: new alloc: 1031
mem: storing 1031 in location 1002
run: width:address:number <- get-address result:address:screen/deref, num-columns:offset
mem: location 1002 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 0
mem: location 1034 is 0
mem: location 1035 is 0
mem: location 1002 is 1031
run: address to copy is 1032
mem: storing 1032 in location 1003
run: width:address:number/deref <- next-ingredient 
mem: location 1003 is 1032
mem: storing 20 in location 1032
run: height:address:number <- get-address result:address:screen/deref, num-rows:offset
mem: location 1002 is 1031
mem: location 1031 is 0
mem: location 1032 is 20
mem: location 1033 is 0
mem: location 1034 is 0
mem: location 1035 is 0
mem: location 1002 is 1031
run: address to copy is 1031
mem: storing 1031 in location 1004
run: height:address:number/deref <- next-ingredient 
mem: location 1004 is 1031
mem: storing 2 in location 1031
run: row:address:number <- get-address result:address:screen/deref, cursor-row:offset
mem: location 1002 is 1031
mem: location 1031 is 2
mem: location 1032 is 20
mem: location 1033 is 0
mem: location 1034 is 0
mem: location 1035 is 0
mem: location 1002 is 1031
run: address to copy is 1033
mem: storing 1033 in location 1005
run: row:address:number/deref <- copy 0:literal
mem: location 1005 is 1033
mem: storing 0 in location 1033
run: column:address:number <- get-address result:address:screen/deref, cursor-column:offset
mem: location 1002 is 1031
mem: location 1031 is 2
mem: location 1032 is 20
mem: location 1033 is 0
mem: location 1034 is 0
mem: location 1035 is 0
mem: location 1002 is 1031
run: address to copy is 1034
mem: storing 1034 in location 1006
run: column:address:number/deref <- copy 0:literal
mem: location 1006 is 1034
mem: storing 0 in location 1034
run: bufsize:number <- multiply width:address:number/deref, height:address:number/deref
mem: location 1003 is 1032
mem: location 1032 is 20
mem: location 1004 is 1031
mem: location 1031 is 2
mem: storing 40 in location 1007
run: buf:address:address:array:character <- get-address result:address:screen/deref, data:offset
mem: location 1002 is 1031
mem: location 1031 is 2
mem: location 1032 is 20
mem: location 1033 is 0
mem: location 1034 is 0
mem: location 1035 is 0
mem: location 1002 is 1031
run: address to copy is 1035
mem: storing 1035 in location 1008
run: buf:address:address:array:character/deref <- new character:literal, bufsize:number
mem: location 1007 is 40
mem: array size is 40
mem: new alloc: 1036
mem: location 1008 is 1035
mem: storing 1036 in location 1035
run: clear-screen result:address:screen
mem: location 1002 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1077
run: x:address:screen <- next-ingredient 
mem: storing 1031 in location 1079
run: break-unless x:address:screen, 
mem: location 1079 is 1031
run: jump-unless fell through
run: buf:address:array:character <- get x:address:screen/deref, data:offset
mem: location 1079 is 1031
mem: location 1031 is 2
mem: location 1032 is 20
mem: location 1033 is 0
mem: location 1034 is 0
mem: location 1035 is 1036
mem: location 1079 is 1031
run: address to copy is 1035
run: its type is 2
mem: location 1035 is 1036
mem: storing 1036 in location 1080
run: max:number <- length buf:address:array:character/deref
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1080 is 1036
mem: storing 40 in location 1081
run: i:number <- copy 0:literal
mem: storing 0 in location 1082
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 0
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 0
mem: location 1080 is 1036
mem: location 1082 is 0
mem: storing 1037 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1037
mem: storing 0 in location 1037
run: i:number <- add i:number, 1:literal
mem: location 1082 is 0
mem: storing 1 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 1
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 1
mem: location 1080 is 1036
mem: location 1082 is 1
mem: storing 1038 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1038
mem: storing 0 in location 1038
run: i:number <- add i:number, 1:literal
mem: location 1082 is 1
mem: storing 2 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 2
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 2
mem: location 1080 is 1036
mem: location 1082 is 2
mem: storing 1039 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1039
mem: storing 0 in location 1039
run: i:number <- add i:number, 1:literal
mem: location 1082 is 2
mem: storing 3 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 3
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 3
mem: location 1080 is 1036
mem: location 1082 is 3
mem: storing 1040 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1040
mem: storing 0 in location 1040
run: i:number <- add i:number, 1:literal
mem: location 1082 is 3
mem: storing 4 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 4
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 4
mem: location 1080 is 1036
mem: location 1082 is 4
mem: storing 1041 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1041
mem: storing 0 in location 1041
run: i:number <- add i:number, 1:literal
mem: location 1082 is 4
mem: storing 5 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 5
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 5
mem: location 1080 is 1036
mem: location 1082 is 5
mem: storing 1042 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1042
mem: storing 0 in location 1042
run: i:number <- add i:number, 1:literal
mem: location 1082 is 5
mem: storing 6 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 6
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 6
mem: location 1080 is 1036
mem: location 1082 is 6
mem: storing 1043 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1043
mem: storing 0 in location 1043
run: i:number <- add i:number, 1:literal
mem: location 1082 is 6
mem: storing 7 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 7
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 7
mem: location 1080 is 1036
mem: location 1082 is 7
mem: storing 1044 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1044
mem: storing 0 in location 1044
run: i:number <- add i:number, 1:literal
mem: location 1082 is 7
mem: storing 8 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 8
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 8
mem: location 1080 is 1036
mem: location 1082 is 8
mem: storing 1045 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1045
mem: storing 0 in location 1045
run: i:number <- add i:number, 1:literal
mem: location 1082 is 8
mem: storing 9 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 9
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 9
mem: location 1080 is 1036
mem: location 1082 is 9
mem: storing 1046 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1046
mem: storing 0 in location 1046
run: i:number <- add i:number, 1:literal
mem: location 1082 is 9
mem: storing 10 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 10
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 10
mem: location 1080 is 1036
mem: location 1082 is 10
mem: storing 1047 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1047
mem: storing 0 in location 1047
run: i:number <- add i:number, 1:literal
mem: location 1082 is 10
mem: storing 11 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 11
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 11
mem: location 1080 is 1036
mem: location 1082 is 11
mem: storing 1048 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1048
mem: storing 0 in location 1048
run: i:number <- add i:number, 1:literal
mem: location 1082 is 11
mem: storing 12 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 12
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 12
mem: location 1080 is 1036
mem: location 1082 is 12
mem: storing 1049 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1049
mem: storing 0 in location 1049
run: i:number <- add i:number, 1:literal
mem: location 1082 is 12
mem: storing 13 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 13
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 13
mem: location 1080 is 1036
mem: location 1082 is 13
mem: storing 1050 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1050
mem: storing 0 in location 1050
run: i:number <- add i:number, 1:literal
mem: location 1082 is 13
mem: storing 14 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 14
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 14
mem: location 1080 is 1036
mem: location 1082 is 14
mem: storing 1051 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1051
mem: storing 0 in location 1051
run: i:number <- add i:number, 1:literal
mem: location 1082 is 14
mem: storing 15 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 15
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 15
mem: location 1080 is 1036
mem: location 1082 is 15
mem: storing 1052 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1052
mem: storing 0 in location 1052
run: i:number <- add i:number, 1:literal
mem: location 1082 is 15
mem: storing 16 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 16
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 16
mem: location 1080 is 1036
mem: location 1082 is 16
mem: storing 1053 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1053
mem: storing 0 in location 1053
run: i:number <- add i:number, 1:literal
mem: location 1082 is 16
mem: storing 17 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 17
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 17
mem: location 1080 is 1036
mem: location 1082 is 17
mem: storing 1054 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1054
mem: storing 0 in location 1054
run: i:number <- add i:number, 1:literal
mem: location 1082 is 17
mem: storing 18 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 18
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 18
mem: location 1080 is 1036
mem: location 1082 is 18
mem: storing 1055 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1055
mem: storing 0 in location 1055
run: i:number <- add i:number, 1:literal
mem: location 1082 is 18
mem: storing 19 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 19
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 19
mem: location 1080 is 1036
mem: location 1082 is 19
mem: storing 1056 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1056
mem: storing 0 in location 1056
run: i:number <- add i:number, 1:literal
mem: location 1082 is 19
mem: storing 20 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 20
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 20
mem: location 1080 is 1036
mem: location 1082 is 20
mem: storing 1057 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1057
mem: storing 0 in location 1057
run: i:number <- add i:number, 1:literal
mem: location 1082 is 20
mem: storing 21 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 21
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 21
mem: location 1080 is 1036
mem: location 1082 is 21
mem: storing 1058 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1058
mem: storing 0 in location 1058
run: i:number <- add i:number, 1:literal
mem: location 1082 is 21
mem: storing 22 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 22
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 22
mem: location 1080 is 1036
mem: location 1082 is 22
mem: storing 1059 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1059
mem: storing 0 in location 1059
run: i:number <- add i:number, 1:literal
mem: location 1082 is 22
mem: storing 23 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 23
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 23
mem: location 1080 is 1036
mem: location 1082 is 23
mem: storing 1060 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1060
mem: storing 0 in location 1060
run: i:number <- add i:number, 1:literal
mem: location 1082 is 23
mem: storing 24 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 24
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 24
mem: location 1080 is 1036
mem: location 1082 is 24
mem: storing 1061 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1061
mem: storing 0 in location 1061
run: i:number <- add i:number, 1:literal
mem: location 1082 is 24
mem: storing 25 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 25
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 25
mem: location 1080 is 1036
mem: location 1082 is 25
mem: storing 1062 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1062
mem: storing 0 in location 1062
run: i:number <- add i:number, 1:literal
mem: location 1082 is 25
mem: storing 26 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 26
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 26
mem: location 1080 is 1036
mem: location 1082 is 26
mem: storing 1063 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1063
mem: storing 0 in location 1063
run: i:number <- add i:number, 1:literal
mem: location 1082 is 26
mem: storing 27 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 27
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 27
mem: location 1080 is 1036
mem: location 1082 is 27
mem: storing 1064 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1064
mem: storing 0 in location 1064
run: i:number <- add i:number, 1:literal
mem: location 1082 is 27
mem: storing 28 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 28
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 28
mem: location 1080 is 1036
mem: location 1082 is 28
mem: storing 1065 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1065
mem: storing 0 in location 1065
run: i:number <- add i:number, 1:literal
mem: location 1082 is 28
mem: storing 29 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 29
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 29
mem: location 1080 is 1036
mem: location 1082 is 29
mem: storing 1066 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1066
mem: storing 0 in location 1066
run: i:number <- add i:number, 1:literal
mem: location 1082 is 29
mem: storing 30 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 30
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 30
mem: location 1080 is 1036
mem: location 1082 is 30
mem: storing 1067 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1067
mem: storing 0 in location 1067
run: i:number <- add i:number, 1:literal
mem: location 1082 is 30
mem: storing 31 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 31
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 31
mem: location 1080 is 1036
mem: location 1082 is 31
mem: storing 1068 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1068
mem: storing 0 in location 1068
run: i:number <- add i:number, 1:literal
mem: location 1082 is 31
mem: storing 32 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 32
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 32
mem: location 1080 is 1036
mem: location 1082 is 32
mem: storing 1069 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1069
mem: storing 0 in location 1069
run: i:number <- add i:number, 1:literal
mem: location 1082 is 32
mem: storing 33 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 33
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 33
mem: location 1080 is 1036
mem: location 1082 is 33
mem: storing 1070 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1070
mem: storing 0 in location 1070
run: i:number <- add i:number, 1:literal
mem: location 1082 is 33
mem: storing 34 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 34
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 34
mem: location 1080 is 1036
mem: location 1082 is 34
mem: storing 1071 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1071
mem: storing 0 in location 1071
run: i:number <- add i:number, 1:literal
mem: location 1082 is 34
mem: storing 35 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 35
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 35
mem: location 1080 is 1036
mem: location 1082 is 35
mem: storing 1072 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1072
mem: storing 0 in location 1072
run: i:number <- add i:number, 1:literal
mem: location 1082 is 35
mem: storing 36 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 36
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 36
mem: location 1080 is 1036
mem: location 1082 is 36
mem: storing 1073 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1073
mem: storing 0 in location 1073
run: i:number <- add i:number, 1:literal
mem: location 1082 is 36
mem: storing 37 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 37
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 37
mem: location 1080 is 1036
mem: location 1082 is 37
mem: storing 1074 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1074
mem: storing 0 in location 1074
run: i:number <- add i:number, 1:literal
mem: location 1082 is 37
mem: storing 38 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 38
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 38
mem: location 1080 is 1036
mem: location 1082 is 38
mem: storing 1075 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1075
mem: storing 0 in location 1075
run: i:number <- add i:number, 1:literal
mem: location 1082 is 38
mem: storing 39 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 39
mem: location 1081 is 40
mem: storing 0 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 0
run: jump-if fell through
run: c:address:character <- index-address buf:address:array:character/deref, i:number
mem: location 1080 is 1036
mem: location 1036 is 40
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1039 is 0
mem: location 1040 is 0
mem: location 1041 is 0
mem: location 1042 is 0
mem: location 1043 is 0
mem: location 1044 is 0
mem: location 1045 is 0
mem: location 1046 is 0
mem: location 1047 is 0
mem: location 1048 is 0
mem: location 1049 is 0
mem: location 1050 is 0
mem: location 1051 is 0
mem: location 1052 is 0
mem: location 1053 is 0
mem: location 1054 is 0
mem: location 1055 is 0
mem: location 1056 is 0
mem: location 1057 is 0
mem: location 1058 is 0
mem: location 1059 is 0
mem: location 1060 is 0
mem: location 1061 is 0
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1064 is 0
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1082 is 39
mem: location 1080 is 1036
mem: location 1082 is 39
mem: storing 1076 in location 1084
run: c:address:character/deref <- copy [ ]
mem: location 1084 is 1076
mem: storing 0 in location 1076
run: i:number <- add i:number, 1:literal
mem: location 1082 is 39
mem: storing 40 in location 1082
run: loop 
run: jumping to instruction 8
run: done?:boolean <- greater-or-equal i:number, max:number
mem: location 1082 is 40
mem: location 1081 is 40
mem: storing 1 in location 1083
run: break-if done?:boolean, 
mem: location 1083 is 1
run: jumping to instruction 14
run: cur:address:number <- get-address x:address:screen/deref, cursor-row:offset
mem: location 1079 is 1031
mem: location 1031 is 2
mem: location 1032 is 20
mem: location 1033 is 0
mem: location 1034 is 0
mem: location 1035 is 1036
mem: location 1079 is 1031
run: address to copy is 1033
mem: storing 1033 in location 1085
run: cur:address:number/deref <- copy 0:literal
mem: location 1085 is 1033
mem: storing 0 in location 1033
run: cur:address:number <- get-address x:address:screen/deref, cursor-column:offset
mem: location 1079 is 1031
mem: location 1031 is 2
mem: location 1032 is 20
mem: location 1033 is 0
mem: location 1034 is 0
mem: location 1035 is 1036
mem: location 1079 is 1031
run: address to copy is 1034
mem: storing 1034 in location 1085
run: cur:address:number/deref <- copy 0:literal
mem: location 1085 is 1034
mem: storing 0 in location 1034
run: reply x:address:screen/same-as-ingredient:0
mem: location 1079 is 1031
run: reply result:address:screen
mem: location 1002 is 1031
run: result 0 is 1031
mem: storing 1031 in location 900
run: run [
#?     $start-tracing #? 1
    1:address:channel <- init-channel 2:literal
#?     $print [aaa channel address: ], 1:address:channel, [ 
#? ] #? 1
    2:number/routine <- start-running read-move:recipe, 1:address:channel, screen:address
    # 'read-move' is waiting for input
    wait-for-routine 2:number
#?     $print [bbb channel address: ], 1:address:channel, [ 
#? ] #? 1
    3:number <- routine-state 2:number/id
#?     $print [I: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]
    # press 'a'
#?     $print [ccc channel address: ], 1:address:channel, [ 
#? ] #? 1
#?     $exit #? 1
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number/id
#?     $print [II: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after rank 'a']
    # press '2'
    1:address:channel <- write 1:address:channel, 50:literal  # '2'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number/id
#?     $print [III: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2']
    # press '-'
    1:address:channel <- write 1:address:channel, 45:literal  # '-'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
#?     $print [IV: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after hyphen 'a2-']
    # press 'a'
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
#?     $print [V: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a2-a']
    # press '4'
    1:address:channel <- write 1:address:channel, 52:literal  # '4'
    restart 2:number/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:number
    3:number <- routine-state 2:number
#?     $print [VI: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
    assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2-a4']
    # press 'newline'
    1:address:channel <- write 1:address:channel, 10:literal  # newline
    restart 2:number/routine
    # 'read-move' now completes
    wait-for-routine 2:number
    3:number <- routine-state 2:number
#?     $print [VII: routine ], 2:number, [ state ], 3:number [ 
#? ] #? 1
    4:boolean/completed? <- equal 3:number/routine-state, 1:literal/completed
    assert 4:boolean/completed?, [
F read-move-blocking: routine failed to terminate on newline]
    trace [test], [reached end]
  ]
parse: instruction: init-channel
parse:   ingredient: {name: "2", properties: ["2": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: start-running
parse:   ingredient: {name: "read-move", properties: ["read-move": "recipe"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "screen", properties: ["screen": "address"]}
parse:   product: {name: "2", properties: ["2": "number", "routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse: instruction: routine-state
parse:   ingredient: {name: "2", properties: ["2": "number", "id": ]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: equal
parse:   ingredient: {name: "3", properties: ["3": "number", "routine-state": ]}
parse:   ingredient: {name: "2", properties: ["2": "literal", "waiting": ]}
parse:   product: {name: "4", properties: ["4": "boolean", "waiting?": ]}
parse: instruction: assert
parse:   ingredient: {name: "4", properties: ["4": "boolean", "waiting?": ]}
parse:   ingredient: {name: "
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)", properties: ["
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)": "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "97", properties: ["97": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "2", properties: ["2": "number", "routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse: instruction: routine-state
parse:   ingredient: {name: "2", properties: ["2": "number", "id": ]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: equal
parse:   ingredient: {name: "3", properties: ["3": "number", "routine-state": ]}
parse:   ingredient: {name: "2", properties: ["2": "literal", "waiting": ]}
parse:   product: {name: "4", properties: ["4": "boolean", "waiting?": ]}
parse: instruction: assert
parse:   ingredient: {name: "4", properties: ["4": "boolean", "waiting?": ]}
parse:   ingredient: {name: "
F read-move-blocking: routine failed to pause after rank 'a'", properties: ["
F read-move-blocking: routine failed to pause after rank 'a'": "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "50", properties: ["50": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "2", properties: ["2": "number", "routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse: instruction: routine-state
parse:   ingredient: {name: "2", properties: ["2": "number", "id": ]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: equal
parse:   ingredient: {name: "3", properties: ["3": "number", "routine-state": ]}
parse:   ingredient: {name: "2", properties: ["2": "literal", "waiting": ]}
parse:   product: {name: "4", properties: ["4": "boolean", "waiting?": ]}
parse: instruction: assert
parse:   ingredient: {name: "4", properties: ["4": "boolean", "waiting?": ]}
parse:   ingredient: {name: "
F read-move-blocking: routine failed to pause after file 'a2'", properties: ["
F read-move-blocking: routine failed to pause after file 'a2'": "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "45", properties: ["45": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "2", properties: ["2": "number", "routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse: instruction: routine-state
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: equal
parse:   ingredient: {name: "3", properties: ["3": "number", "routine-state": ]}
parse:   ingredient: {name: "2", properties: ["2": "literal", "waiting": ]}
parse:   product: {name: "4", properties: ["4": "boolean", "waiting?": ]}
parse: instruction: assert
parse:   ingredient: {name: "4", properties: ["4": "boolean", "waiting?": , "routine-state": ]}
parse:   ingredient: {name: "
F read-move-blocking: routine failed to pause after hyphen 'a2-'", properties: ["
F read-move-blocking: routine failed to pause after hyphen 'a2-'": "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "97", properties: ["97": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "2", properties: ["2": "number", "routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse: instruction: routine-state
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: equal
parse:   ingredient: {name: "3", properties: ["3": "number", "routine-state": ]}
parse:   ingredient: {name: "2", properties: ["2": "literal", "waiting": ]}
parse:   product: {name: "4", properties: ["4": "boolean", "waiting?": ]}
parse: instruction: assert
parse:   ingredient: {name: "4", properties: ["4": "boolean", "waiting?": , "routine-state": ]}
parse:   ingredient: {name: "
F read-move-blocking: routine failed to pause after rank 'a2-a'", properties: ["
F read-move-blocking: routine failed to pause after rank 'a2-a'": "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "52", properties: ["52": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "2", properties: ["2": "number", "routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse: instruction: routine-state
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: equal
parse:   ingredient: {name: "3", properties: ["3": "number", "routine-state": ]}
parse:   ingredient: {name: "2", properties: ["2": "literal", "waiting": ]}
parse:   product: {name: "4", properties: ["4": "boolean", "waiting?": ]}
parse: instruction: assert
parse:   ingredient: {name: "4", properties: ["4": "boolean", "waiting?": ]}
parse:   ingredient: {name: "
F read-move-blocking: routine failed to pause after file 'a2-a4'", properties: ["
F read-move-blocking: routine failed to pause after file 'a2-a4'": "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "10", properties: ["10": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "2", properties: ["2": "number", "routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse: instruction: routine-state
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: equal
parse:   ingredient: {name: "3", properties: ["3": "number", "routine-state": ]}
parse:   ingredient: {name: "1", properties: ["1": "literal", "completed": ]}
parse:   product: {name: "4", properties: ["4": "boolean", "completed?": ]}
parse: instruction: assert
parse:   ingredient: {name: "4", properties: ["4": "boolean", "completed?": ]}
parse:   ingredient: {name: "
F read-move-blocking: routine failed to terminate on newline", properties: ["
F read-move-blocking: routine failed to terminate on newline": "literal-string"]}
parse: instruction: trace
parse:   ingredient: {name: "test", properties: ["test": "literal-string"]}
parse:   ingredient: {name: "reached end", properties: ["reached end": "literal-string"]}
after-brace: recipe run1001
after-brace: init-channel ...
after-brace: start-running ...
after-brace: wait-for-routine ...
after-brace: routine-state ...
after-brace: equal ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: routine-state ...
after-brace: equal ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: routine-state ...
after-brace: equal ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: routine-state ...
after-brace: equal ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: routine-state ...
after-brace: equal ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: routine-state ...
after-brace: equal ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: routine-state ...
after-brace: equal ...
after-brace: assert ...
after-brace: trace ...
run: 1:address:channel <- init-channel 2:literal
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1108
run: result:address:channel <- new channel:type
mem: new alloc: 1139
mem: storing 1139 in location 1110
run: full:address:number <- get-address result:address:channel/deref, first-full:offset
mem: location 1110 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 0
mem: location 1110 is 1139
run: address to copy is 1139
mem: storing 1139 in location 1111
run: full:address:number/deref <- copy 0:literal
mem: location 1111 is 1139
mem: storing 0 in location 1139
run: free:address:number <- get-address result:address:channel/deref, first-free:offset
mem: location 1110 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 0
mem: location 1110 is 1139
run: address to copy is 1140
mem: storing 1140 in location 1112
run: free:address:number/deref <- copy 0:literal
mem: location 1112 is 1140
mem: storing 0 in location 1140
run: capacity:number <- next-ingredient 
mem: storing 2 in location 1113
run: capacity:number <- add capacity:number, 1:literal
mem: location 1113 is 2
mem: storing 3 in location 1113
run: dest:address:address:array:location <- get-address result:address:channel/deref, data:offset
mem: location 1110 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 0
mem: location 1110 is 1139
run: address to copy is 1141
mem: storing 1141 in location 1114
run: dest:address:address:array:location/deref <- new location:type, capacity:number
mem: location 1113 is 3
mem: array size is 3
mem: new alloc: 1142
mem: location 1114 is 1141
mem: storing 1142 in location 1141
run: reply result:address:channel
mem: location 1110 is 1139
run: result 0 is 1139
mem: storing 1139 in location 1
run: 2:number/routine <- start-running read-move:recipe, 1:address:channel, screen:address
mem: location 1 is 1139
mem: location 900 is 1031
new: routine allocated memory from 101000 to 201000
mem: storing 2 in location 2
run: wait-for-routine 2:number
mem: location 2 is 2
run: waiting for routine 2
schedule: read-move
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101000
run: stdin:address:channel <- next-ingredient 
mem: storing 1139 in location 101002
run: screen:address <- next-ingredient 
mem: storing 1031 in location 101003
run: from-file:number, quit?:boolean, error?:boolean <- read-file stdin:address:channel, screen:address
mem: location 101002 is 1139
mem: location 101003 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101031
run: stdin:address:channel <- next-ingredient 
mem: storing 1139 in location 101033
run: screen:address <- next-ingredient 
mem: storing 1031 in location 101034
run: c:character, stdin:address:channel <- read stdin:address:channel
mem: location 101033 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101062
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 101064
run: empty:boolean <- channel-empty? chan:address:channel
mem: location 101064 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101093
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 101095
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 101095 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 101095 is 1139
run: address to copy is 1139
run: its type is 1
mem: location 1139 is 0
mem: storing 0 in location 101096
run: free:number <- get chan:address:channel/deref, first-free:offset
mem: location 101095 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 101095 is 1139
run: address to copy is 1140
run: its type is 1
mem: location 1140 is 0
mem: storing 0 in location 101097
run: result:boolean <- equal full:number, free:number
mem: location 101096 is 0
mem: location 101097 is 0
mem: storing 1 in location 101098
run: reply result:boolean
mem: location 101098 is 1
run: result 0 is 1
mem: storing 1 in location 101065
run: break-unless empty:boolean, 
mem: location 101065 is 1
run: jump-unless fell through
run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 101064 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 101064 is 1139
run: address to copy is 1140
mem: storing 1140 in location 101066
run: wait-for-location free-address:address:number/deref
mem: location 101066 is 1140
mem: location 1140 is 0
mem: location 101066 is 1140
run: waiting for location 1140 to change from 0
schedule: waking up routine 1
schedule: run1001/read-move-blocking
run: 3:number <- routine-state 2:number/id
mem: location 2 is 2
mem: storing 2 in location 3
run: 4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
mem: location 3 is 2
mem: storing 1 in location 4
run: assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]
mem: location 4 is 1
run: 1:address:channel <- write 1:address:channel, 97:literal
mem: location 1 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1146
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1148
run: val:location <- next-ingredient 
mem: storing 97 in location 1149
run: full:boolean <- channel-full? chan:address:channel
mem: location 1148 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1177
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1179
run: tmp:number <- get chan:address:channel/deref, first-free:offset
mem: location 1179 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 1179 is 1139
run: address to copy is 1140
run: its type is 1
mem: location 1140 is 0
mem: storing 0 in location 1180
run: tmp:number <- add tmp:number, 1:literal
mem: location 1180 is 0
mem: storing 1 in location 1180
run: len:number <- channel-capacity chan:address:channel
mem: location 1179 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1208
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1210
run: q:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1210 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 1210 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 1211
run: result:number <- length q:address:array:location/deref
mem: location 1211 is 1142
mem: location 1142 is 3
mem: location 1143 is 0
mem: location 1144 is 0
mem: location 1145 is 0
mem: location 1211 is 1142
mem: storing 3 in location 1212
run: reply result:number
mem: location 1212 is 3
run: result 0 is 3
mem: storing 3 in location 1181
run: at-end?:boolean <- greater-or-equal tmp:number, len:number
mem: location 1180 is 1
mem: location 1181 is 3
mem: storing 0 in location 1182
run: break-unless at-end?:boolean, 
mem: location 1182 is 0
run: jumping to instruction 9
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 1179 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 1179 is 1139
run: address to copy is 1139
run: its type is 1
mem: location 1139 is 0
mem: storing 0 in location 1183
run: result:boolean <- equal full:number, tmp:number
mem: location 1183 is 0
mem: location 1180 is 1
mem: storing 0 in location 1184
run: reply result:boolean
mem: location 1184 is 0
run: result 0 is 0
mem: storing 0 in location 1150
run: break-unless full:boolean, 
mem: location 1150 is 0
run: jumping to instruction 8
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1148 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 1148 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 1152
run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 1148 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 1148 is 1139
run: address to copy is 1140
mem: storing 1140 in location 1153
run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
mem: location 1152 is 1142
mem: location 1142 is 3
mem: location 1143 is 0
mem: location 1144 is 0
mem: location 1145 is 0
mem: location 1153 is 1140
mem: location 1140 is 0
mem: location 1152 is 1142
mem: location 1153 is 1140
mem: location 1140 is 0
mem: storing 1143 in location 1154
run: dest:address:location/deref <- copy val:location
mem: location 1149 is 97
mem: location 1154 is 1143
mem: storing 97 in location 1143
run: free:address:number/deref <- add free:address:number/deref, 1:literal
mem: location 1153 is 1140
mem: location 1140 is 0
mem: location 1153 is 1140
mem: storing 1 in location 1140
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 1152 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 0
mem: location 1145 is 0
mem: location 1152 is 1142
mem: storing 3 in location 1155
run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
mem: location 1153 is 1140
mem: location 1140 is 1
mem: location 1155 is 3
mem: storing 0 in location 1156
run: break-unless at-end?:boolean, 
mem: location 1156 is 0
run: jumping to instruction 19
run: reply chan:address:channel/same-as-ingredient:0
mem: location 1148 is 1139
run: result 0 is 1139
mem: storing 1139 in location 1
run: restart 2:number/routine
mem: location 2 is 2
run: wait-for-routine 2:number
mem: location 2 is 2
run: waiting for routine 2
schedule: read/read-file/read-move
run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
mem: location 101064 is 1139
mem: location 1139 is 0
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 101064 is 1139
run: address to copy is 1139
mem: storing 1139 in location 101067
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 101064 is 1139
mem: location 1139 is 0
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 101064 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 101068
run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
mem: location 101068 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 0
mem: location 1145 is 0
mem: location 101067 is 1139
mem: location 1139 is 0
mem: location 101068 is 1142
mem: location 101067 is 1139
mem: location 1139 is 0
run: address to copy is 1143
run: its type is 1
mem: location 1143 is 97
mem: storing 97 in location 101069
run: full:address:number/deref <- add full:address:number/deref, 1:literal
mem: location 101067 is 1139
mem: location 1139 is 0
mem: location 101067 is 1139
mem: storing 1 in location 1139
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 101068 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 0
mem: location 1145 is 0
mem: location 101068 is 1142
mem: storing 3 in location 101070
run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
mem: location 101067 is 1139
mem: location 1139 is 1
mem: location 101070 is 3
mem: storing 0 in location 101071
run: break-unless at-end?:boolean, 
mem: location 101071 is 0
run: jumping to instruction 17
run: reply result:location, chan:address:channel/same-as-ingredient:0
mem: location 101069 is 97
mem: location 101064 is 1139
run: result 0 is 97
run: result 1 is 1139
mem: storing 97 in location 101035
mem: storing 1139 in location 101033
run: q-pressed?:boolean <- equal c:character, 81:literal
mem: location 101035 is 97
mem: storing 0 in location 101036
run: break-unless q-pressed?:boolean, 
mem: location 101036 is 0
run: jumping to instruction 8
run: q-pressed?:boolean <- equal c:character, 113:literal
mem: location 101035 is 97
mem: storing 0 in location 101036
run: break-unless q-pressed?:boolean, 
mem: location 101036 is 0
run: jumping to instruction 13
run: empty-fake-keyboard?:boolean <- equal c:character, 0:literal/eof
mem: location 101035 is 97
mem: storing 0 in location 101037
run: break-unless empty-fake-keyboard?:boolean, 
mem: location 101037 is 0
run: jumping to instruction 18
run: newline?:boolean <- equal c:character, 10:literal/newline
mem: location 101035 is 97
mem: storing 0 in location 101038
run: break-unless newline?:boolean, 
mem: location 101038 is 0
run: jumping to instruction 25
run: file:number <- subtract c:character, 97:literal
mem: location 101035 is 97
mem: storing 0 in location 101040
run: above-min:boolean <- greater-or-equal file:number, 0:literal
mem: location 101040 is 0
mem: storing 1 in location 101041
run: break-if above-min:boolean, 
mem: location 101041 is 1
run: jumping to instruction 35
run: below-max:boolean <- lesser-than file:number, 8:literal
mem: location 101040 is 0
mem: storing 1 in location 101042
run: break-if below-max:boolean, 
mem: location 101042 is 1
run: jumping to instruction 43
run: reply file:number, 0:literal/quit, 0:literal/error
mem: location 101040 is 0
run: result 0 is 0
run: result 1 is 0
run: result 2 is 0
mem: storing 0 in location 101004
mem: storing 0 in location 101005
mem: storing 0 in location 101006
run: reply-if quit?:boolean, 1:offset
mem: location 101005 is 0
run: jumping to instruction 6
run: reply-if error?:boolean, 1:offset
mem: location 101006 is 0
run: jumping to instruction 8
run: result:address:move <- new move:literal
mem: new alloc: 101124
mem: storing 101124 in location 101007
run: x:address:number <- get-address result:address:move/deref, from-file:offset
mem: location 101007 is 101124
mem: location 101124 is 0
mem: location 101125 is 0
mem: location 101126 is 0
mem: location 101127 is 0
mem: location 101007 is 101124
run: address to copy is 101124
mem: storing 101124 in location 101008
run: x:address:number/deref <- copy from-file:number
mem: location 101004 is 0
mem: location 101008 is 101124
mem: storing 0 in location 101124
run: x:address:number <- get-address result:address:move/deref, from-rank:offset
mem: location 101007 is 101124
mem: location 101124 is 0
mem: location 101125 is 0
mem: location 101126 is 0
mem: location 101127 is 0
mem: location 101007 is 101124
run: address to copy is 101125
mem: storing 101125 in location 101008
run: x:address:number/deref, quit?:boolean, error?:boolean <- read-rank stdin:address:channel, screen:address
mem: location 101002 is 1139
mem: location 101003 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101125
run: stdin:address:channel <- next-ingredient 
mem: storing 1139 in location 101127
run: screen:address <- next-ingredient 
mem: storing 1031 in location 101128
run: c:character, stdin:address:channel <- read stdin:address:channel
mem: location 101127 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101156
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 101158
run: empty:boolean <- channel-empty? chan:address:channel
mem: location 101158 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101187
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 101189
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 101189 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 101189 is 1139
run: address to copy is 1139
run: its type is 1
mem: location 1139 is 1
mem: storing 1 in location 101190
run: free:number <- get chan:address:channel/deref, first-free:offset
mem: location 101189 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 101189 is 1139
run: address to copy is 1140
run: its type is 1
mem: location 1140 is 1
mem: storing 1 in location 101191
run: result:boolean <- equal full:number, free:number
mem: location 101190 is 1
mem: location 101191 is 1
mem: storing 1 in location 101192
run: reply result:boolean
mem: location 101192 is 1
run: result 0 is 1
mem: storing 1 in location 101159
run: break-unless empty:boolean, 
mem: location 101159 is 1
run: jump-unless fell through
run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 101158 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 101158 is 1139
run: address to copy is 1140
mem: storing 1140 in location 101160
run: wait-for-location free-address:address:number/deref
mem: location 101160 is 1140
mem: location 1140 is 1
mem: location 101160 is 1140
run: waiting for location 1140 to change from 1
schedule: waking up routine 1
schedule: run1001/read-move-blocking
run: 3:number <- routine-state 2:number/id
mem: location 2 is 2
mem: storing 2 in location 3
run: 4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
mem: location 3 is 2
mem: storing 1 in location 4
run: assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after rank 'a']
mem: location 4 is 1
run: 1:address:channel <- write 1:address:channel, 50:literal
mem: location 1 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1239
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1241
run: val:location <- next-ingredient 
mem: storing 50 in location 1242
run: full:boolean <- channel-full? chan:address:channel
mem: location 1241 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1270
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1272
run: tmp:number <- get chan:address:channel/deref, first-free:offset
mem: location 1272 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 1272 is 1139
run: address to copy is 1140
run: its type is 1
mem: location 1140 is 1
mem: storing 1 in location 1273
run: tmp:number <- add tmp:number, 1:literal
mem: location 1273 is 1
mem: storing 2 in location 1273
run: len:number <- channel-capacity chan:address:channel
mem: location 1272 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1301
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1303
run: q:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1303 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 1303 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 1304
run: result:number <- length q:address:array:location/deref
mem: location 1304 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 0
mem: location 1145 is 0
mem: location 1304 is 1142
mem: storing 3 in location 1305
run: reply result:number
mem: location 1305 is 3
run: result 0 is 3
mem: storing 3 in location 1274
run: at-end?:boolean <- greater-or-equal tmp:number, len:number
mem: location 1273 is 2
mem: location 1274 is 3
mem: storing 0 in location 1275
run: break-unless at-end?:boolean, 
mem: location 1275 is 0
run: jumping to instruction 9
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 1272 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 1272 is 1139
run: address to copy is 1139
run: its type is 1
mem: location 1139 is 1
mem: storing 1 in location 1276
run: result:boolean <- equal full:number, tmp:number
mem: location 1276 is 1
mem: location 1273 is 2
mem: storing 0 in location 1277
run: reply result:boolean
mem: location 1277 is 0
run: result 0 is 0
mem: storing 0 in location 1243
run: break-unless full:boolean, 
mem: location 1243 is 0
run: jumping to instruction 8
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1241 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 1241 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 1245
run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 1241 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 1241 is 1139
run: address to copy is 1140
mem: storing 1140 in location 1246
run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
mem: location 1245 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 0
mem: location 1145 is 0
mem: location 1246 is 1140
mem: location 1140 is 1
mem: location 1245 is 1142
mem: location 1246 is 1140
mem: location 1140 is 1
mem: storing 1144 in location 1247
run: dest:address:location/deref <- copy val:location
mem: location 1242 is 50
mem: location 1247 is 1144
mem: storing 50 in location 1144
run: free:address:number/deref <- add free:address:number/deref, 1:literal
mem: location 1246 is 1140
mem: location 1140 is 1
mem: location 1246 is 1140
mem: storing 2 in location 1140
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 1245 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 0
mem: location 1245 is 1142
mem: storing 3 in location 1248
run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
mem: location 1246 is 1140
mem: location 1140 is 2
mem: location 1248 is 3
mem: storing 0 in location 1249
run: break-unless at-end?:boolean, 
mem: location 1249 is 0
run: jumping to instruction 19
run: reply chan:address:channel/same-as-ingredient:0
mem: location 1241 is 1139
run: result 0 is 1139
mem: storing 1139 in location 1
run: restart 2:number/routine
mem: location 2 is 2
run: wait-for-routine 2:number
mem: location 2 is 2
run: waiting for routine 2
schedule: read/read-rank/read-move
run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
mem: location 101158 is 1139
mem: location 1139 is 1
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 101158 is 1139
run: address to copy is 1139
mem: storing 1139 in location 101161
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 101158 is 1139
mem: location 1139 is 1
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 101158 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 101162
run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
mem: location 101162 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 0
mem: location 101161 is 1139
mem: location 1139 is 1
mem: location 101162 is 1142
mem: location 101161 is 1139
mem: location 1139 is 1
run: address to copy is 1144
run: its type is 1
mem: location 1144 is 50
mem: storing 50 in location 101163
run: full:address:number/deref <- add full:address:number/deref, 1:literal
mem: location 101161 is 1139
mem: location 1139 is 1
mem: location 101161 is 1139
mem: storing 2 in location 1139
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 101162 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 0
mem: location 101162 is 1142
mem: storing 3 in location 101164
run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
mem: location 101161 is 1139
mem: location 1139 is 2
mem: location 101164 is 3
mem: storing 0 in location 101165
run: break-unless at-end?:boolean, 
mem: location 101165 is 0
run: jumping to instruction 17
run: reply result:location, chan:address:channel/same-as-ingredient:0
mem: location 101163 is 50
mem: location 101158 is 1139
run: result 0 is 50
run: result 1 is 1139
mem: storing 50 in location 101129
mem: storing 1139 in location 101127
run: q-pressed?:boolean <- equal c:character, 81:literal
mem: location 101129 is 50
mem: storing 0 in location 101130
run: break-unless q-pressed?:boolean, 
mem: location 101130 is 0
run: jumping to instruction 8
run: q-pressed?:boolean <- equal c:character, 113:literal
mem: location 101129 is 50
mem: storing 0 in location 101130
run: break-unless q-pressed?:boolean, 
mem: location 101130 is 0
run: jumping to instruction 13
run: newline?:boolean <- equal c:character, 10:literal
mem: location 101129 is 50
mem: storing 0 in location 101131
run: break-unless newline?:boolean, 
mem: location 101131 is 0
run: jumping to instruction 20
run: rank:number <- subtract c:character, 49:literal
mem: location 101129 is 50
mem: storing 1 in location 101133
run: above-min:boolean <- greater-or-equal rank:number, 0:literal
mem: location 101133 is 1
mem: storing 1 in location 101134
run: break-if above-min:boolean, 
mem: location 101134 is 1
run: jumping to instruction 29
run: below-max:boolean <- lesser-or-equal rank:number, 7:literal
mem: location 101133 is 1
mem: storing 1 in location 101135
run: break-if below-max:boolean, 
mem: location 101135 is 1
run: jumping to instruction 37
run: reply rank:number, 0:literal/quit, 0:literal/error
mem: location 101133 is 1
run: result 0 is 1
run: result 1 is 0
run: result 2 is 0
mem: location 101008 is 101125
mem: storing 1 in location 101125
mem: storing 0 in location 101005
mem: storing 0 in location 101006
run: reply-if quit?:boolean, 1:offset
mem: location 101005 is 0
run: jumping to instruction 15
run: reply-if error?:boolean, 1:offset
mem: location 101006 is 0
run: jumping to instruction 17
run: error?:boolean <- expect-from-channel stdin:address:channel, 45:literal/dash, screen:address
mem: location 101002 is 1139
mem: location 101003 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101218
run: stdin:address:channel <- next-ingredient 
mem: storing 1139 in location 101220
run: expected:character <- next-ingredient 
mem: storing 45 in location 101221
run: screen:address <- next-ingredient 
mem: storing 1031 in location 101222
run: c:character, stdin:address:channel <- read stdin:address:channel
mem: location 101220 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101249
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 101251
run: empty:boolean <- channel-empty? chan:address:channel
mem: location 101251 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101280
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 101282
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 101282 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 101282 is 1139
run: address to copy is 1139
run: its type is 1
mem: location 1139 is 2
mem: storing 2 in location 101283
run: free:number <- get chan:address:channel/deref, first-free:offset
mem: location 101282 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 101282 is 1139
run: address to copy is 1140
run: its type is 1
mem: location 1140 is 2
mem: storing 2 in location 101284
run: result:boolean <- equal full:number, free:number
mem: location 101283 is 2
mem: location 101284 is 2
mem: storing 1 in location 101285
run: reply result:boolean
mem: location 101285 is 1
run: result 0 is 1
mem: storing 1 in location 101252
run: break-unless empty:boolean, 
mem: location 101252 is 1
run: jump-unless fell through
run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 101251 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 101251 is 1139
run: address to copy is 1140
mem: storing 1140 in location 101253
run: wait-for-location free-address:address:number/deref
mem: location 101253 is 1140
mem: location 1140 is 2
mem: location 101253 is 1140
run: waiting for location 1140 to change from 2
schedule: waking up routine 1
schedule: run1001/read-move-blocking
run: 3:number <- routine-state 2:number/id
mem: location 2 is 2
mem: storing 2 in location 3
run: 4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
mem: location 3 is 2
mem: storing 1 in location 4
run: assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2']
mem: location 4 is 1
run: 1:address:channel <- write 1:address:channel, 45:literal
mem: location 1 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1332
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1334
run: val:location <- next-ingredient 
mem: storing 45 in location 1335
run: full:boolean <- channel-full? chan:address:channel
mem: location 1334 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1363
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1365
run: tmp:number <- get chan:address:channel/deref, first-free:offset
mem: location 1365 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 1365 is 1139
run: address to copy is 1140
run: its type is 1
mem: location 1140 is 2
mem: storing 2 in location 1366
run: tmp:number <- add tmp:number, 1:literal
mem: location 1366 is 2
mem: storing 3 in location 1366
run: len:number <- channel-capacity chan:address:channel
mem: location 1365 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1394
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1396
run: q:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1396 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 1396 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 1397
run: result:number <- length q:address:array:location/deref
mem: location 1397 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 0
mem: location 1397 is 1142
mem: storing 3 in location 1398
run: reply result:number
mem: location 1398 is 3
run: result 0 is 3
mem: storing 3 in location 1367
run: at-end?:boolean <- greater-or-equal tmp:number, len:number
mem: location 1366 is 3
mem: location 1367 is 3
mem: storing 1 in location 1368
run: break-unless at-end?:boolean, 
mem: location 1368 is 1
run: jump-unless fell through
run: tmp:number <- copy 0:literal
mem: storing 0 in location 1366
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 1365 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 1365 is 1139
run: address to copy is 1139
run: its type is 1
mem: location 1139 is 2
mem: storing 2 in location 1369
run: result:boolean <- equal full:number, tmp:number
mem: location 1369 is 2
mem: location 1366 is 0
mem: storing 0 in location 1370
run: reply result:boolean
mem: location 1370 is 0
run: result 0 is 0
mem: storing 0 in location 1336
run: break-unless full:boolean, 
mem: location 1336 is 0
run: jumping to instruction 8
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1334 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 1334 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 1338
run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 1334 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 1334 is 1139
run: address to copy is 1140
mem: storing 1140 in location 1339
run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
mem: location 1338 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 0
mem: location 1339 is 1140
mem: location 1140 is 2
mem: location 1338 is 1142
mem: location 1339 is 1140
mem: location 1140 is 2
mem: storing 1145 in location 1340
run: dest:address:location/deref <- copy val:location
mem: location 1335 is 45
mem: location 1340 is 1145
mem: storing 45 in location 1145
run: free:address:number/deref <- add free:address:number/deref, 1:literal
mem: location 1339 is 1140
mem: location 1140 is 2
mem: location 1339 is 1140
mem: storing 3 in location 1140
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 1338 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 45
mem: location 1338 is 1142
mem: storing 3 in location 1341
run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
mem: location 1339 is 1140
mem: location 1140 is 3
mem: location 1341 is 3
mem: storing 1 in location 1342
run: break-unless at-end?:boolean, 
mem: location 1342 is 1
run: jump-unless fell through
run: free:address:number/deref <- copy 0:literal
mem: location 1339 is 1140
mem: storing 0 in location 1140
run: reply chan:address:channel/same-as-ingredient:0
mem: location 1334 is 1139
run: result 0 is 1139
mem: storing 1139 in location 1
run: restart 2:number/routine
mem: location 2 is 2
run: wait-for-routine 2:number
mem: location 2 is 2
run: waiting for routine 2
schedule: read/expect-from-channel/read-move
run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
mem: location 101251 is 1139
mem: location 1139 is 2
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 101251 is 1139
run: address to copy is 1139
mem: storing 1139 in location 101254
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 101251 is 1139
mem: location 1139 is 2
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 101251 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 101255
run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
mem: location 101255 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 45
mem: location 101254 is 1139
mem: location 1139 is 2
mem: location 101255 is 1142
mem: location 101254 is 1139
mem: location 1139 is 2
run: address to copy is 1145
run: its type is 1
mem: location 1145 is 45
mem: storing 45 in location 101256
run: full:address:number/deref <- add full:address:number/deref, 1:literal
mem: location 101254 is 1139
mem: location 1139 is 2
mem: location 101254 is 1139
mem: storing 3 in location 1139
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 101255 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 45
mem: location 101255 is 1142
mem: storing 3 in location 101257
run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
mem: location 101254 is 1139
mem: location 1139 is 3
mem: location 101257 is 3
mem: storing 1 in location 101258
run: break-unless at-end?:boolean, 
mem: location 101258 is 1
run: jump-unless fell through
run: full:address:number/deref <- copy 0:literal
mem: location 101254 is 1139
mem: storing 0 in location 1139
run: reply result:location, chan:address:channel/same-as-ingredient:0
mem: location 101256 is 45
mem: location 101251 is 1139
run: result 0 is 45
run: result 1 is 1139
mem: storing 45 in location 101223
mem: storing 1139 in location 101220
run: match?:boolean <- equal c:character, expected:character
mem: location 101223 is 45
mem: location 101221 is 45
mem: storing 1 in location 101224
run: break-if match?:boolean, 
mem: location 101224 is 1
run: jumping to instruction 10
run: result:boolean <- not match?:boolean
mem: location 101224 is 1
mem: storing 0 in location 101226
run: reply result:boolean
mem: location 101226 is 0
run: result 0 is 0
mem: storing 0 in location 101006
run: reply-if error?:boolean, 1:offset
mem: location 101006 is 0
run: jumping to instruction 20
run: x:address:number <- get-address result:address:move/deref, to-file:offset
mem: location 101007 is 101124
mem: location 101124 is 0
mem: location 101125 is 1
mem: location 101126 is 0
mem: location 101127 is 1139
mem: location 101007 is 101124
run: address to copy is 101126
mem: storing 101126 in location 101008
run: x:address:number/deref, quit?:boolean, error?:boolean <- read-file stdin:address:channel, screen:address
mem: location 101002 is 1139
mem: location 101003 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101311
run: stdin:address:channel <- next-ingredient 
mem: storing 1139 in location 101313
run: screen:address <- next-ingredient 
mem: storing 1031 in location 101314
run: c:character, stdin:address:channel <- read stdin:address:channel
mem: location 101313 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101342
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 101344
run: empty:boolean <- channel-empty? chan:address:channel
mem: location 101344 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101373
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 101375
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 101375 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 101375 is 1139
run: address to copy is 1139
run: its type is 1
mem: location 1139 is 0
mem: storing 0 in location 101376
run: free:number <- get chan:address:channel/deref, first-free:offset
mem: location 101375 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 101375 is 1139
run: address to copy is 1140
run: its type is 1
mem: location 1140 is 0
mem: storing 0 in location 101377
run: result:boolean <- equal full:number, free:number
mem: location 101376 is 0
mem: location 101377 is 0
mem: storing 1 in location 101378
run: reply result:boolean
mem: location 101378 is 1
run: result 0 is 1
mem: storing 1 in location 101345
run: break-unless empty:boolean, 
mem: location 101345 is 1
run: jump-unless fell through
run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 101344 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 101344 is 1139
run: address to copy is 1140
mem: storing 1140 in location 101346
run: wait-for-location free-address:address:number/deref
mem: location 101346 is 1140
mem: location 1140 is 0
mem: location 101346 is 1140
run: waiting for location 1140 to change from 0
schedule: waking up routine 1
schedule: run1001/read-move-blocking
run: 3:number <- routine-state 2:number
mem: location 2 is 2
mem: storing 2 in location 3
run: 4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
mem: location 3 is 2
mem: storing 1 in location 4
run: assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after hyphen 'a2-']
mem: location 4 is 1
run: 1:address:channel <- write 1:address:channel, 97:literal
mem: location 1 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1425
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1427
run: val:location <- next-ingredient 
mem: storing 97 in location 1428
run: full:boolean <- channel-full? chan:address:channel
mem: location 1427 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1456
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1458
run: tmp:number <- get chan:address:channel/deref, first-free:offset
mem: location 1458 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 1458 is 1139
run: address to copy is 1140
run: its type is 1
mem: location 1140 is 0
mem: storing 0 in location 1459
run: tmp:number <- add tmp:number, 1:literal
mem: location 1459 is 0
mem: storing 1 in location 1459
run: len:number <- channel-capacity chan:address:channel
mem: location 1458 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1487
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1489
run: q:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1489 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 1489 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 1490
run: result:number <- length q:address:array:location/deref
mem: location 1490 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 45
mem: location 1490 is 1142
mem: storing 3 in location 1491
run: reply result:number
mem: location 1491 is 3
run: result 0 is 3
mem: storing 3 in location 1460
run: at-end?:boolean <- greater-or-equal tmp:number, len:number
mem: location 1459 is 1
mem: location 1460 is 3
mem: storing 0 in location 1461
run: break-unless at-end?:boolean, 
mem: location 1461 is 0
run: jumping to instruction 9
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 1458 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 1458 is 1139
run: address to copy is 1139
run: its type is 1
mem: location 1139 is 0
mem: storing 0 in location 1462
run: result:boolean <- equal full:number, tmp:number
mem: location 1462 is 0
mem: location 1459 is 1
mem: storing 0 in location 1463
run: reply result:boolean
mem: location 1463 is 0
run: result 0 is 0
mem: storing 0 in location 1429
run: break-unless full:boolean, 
mem: location 1429 is 0
run: jumping to instruction 8
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1427 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 1427 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 1431
run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 1427 is 1139
mem: location 1139 is 0
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 1427 is 1139
run: address to copy is 1140
mem: storing 1140 in location 1432
run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
mem: location 1431 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 45
mem: location 1432 is 1140
mem: location 1140 is 0
mem: location 1431 is 1142
mem: location 1432 is 1140
mem: location 1140 is 0
mem: storing 1143 in location 1433
run: dest:address:location/deref <- copy val:location
mem: location 1428 is 97
mem: location 1433 is 1143
mem: storing 97 in location 1143
run: free:address:number/deref <- add free:address:number/deref, 1:literal
mem: location 1432 is 1140
mem: location 1140 is 0
mem: location 1432 is 1140
mem: storing 1 in location 1140
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 1431 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 45
mem: location 1431 is 1142
mem: storing 3 in location 1434
run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
mem: location 1432 is 1140
mem: location 1140 is 1
mem: location 1434 is 3
mem: storing 0 in location 1435
run: break-unless at-end?:boolean, 
mem: location 1435 is 0
run: jumping to instruction 19
run: reply chan:address:channel/same-as-ingredient:0
mem: location 1427 is 1139
run: result 0 is 1139
mem: storing 1139 in location 1
run: restart 2:number/routine
mem: location 2 is 2
run: wait-for-routine 2:number
mem: location 2 is 2
run: waiting for routine 2
schedule: read/read-file/read-move
run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
mem: location 101344 is 1139
mem: location 1139 is 0
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 101344 is 1139
run: address to copy is 1139
mem: storing 1139 in location 101347
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 101344 is 1139
mem: location 1139 is 0
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 101344 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 101348
run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
mem: location 101348 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 45
mem: location 101347 is 1139
mem: location 1139 is 0
mem: location 101348 is 1142
mem: location 101347 is 1139
mem: location 1139 is 0
run: address to copy is 1143
run: its type is 1
mem: location 1143 is 97
mem: storing 97 in location 101349
run: full:address:number/deref <- add full:address:number/deref, 1:literal
mem: location 101347 is 1139
mem: location 1139 is 0
mem: location 101347 is 1139
mem: storing 1 in location 1139
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 101348 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 45
mem: location 101348 is 1142
mem: storing 3 in location 101350
run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
mem: location 101347 is 1139
mem: location 1139 is 1
mem: location 101350 is 3
mem: storing 0 in location 101351
run: break-unless at-end?:boolean, 
mem: location 101351 is 0
run: jumping to instruction 17
run: reply result:location, chan:address:channel/same-as-ingredient:0
mem: location 101349 is 97
mem: location 101344 is 1139
run: result 0 is 97
run: result 1 is 1139
mem: storing 97 in location 101315
mem: storing 1139 in location 101313
run: q-pressed?:boolean <- equal c:character, 81:literal
mem: location 101315 is 97
mem: storing 0 in location 101316
run: break-unless q-pressed?:boolean, 
mem: location 101316 is 0
run: jumping to instruction 8
run: q-pressed?:boolean <- equal c:character, 113:literal
mem: location 101315 is 97
mem: storing 0 in location 101316
run: break-unless q-pressed?:boolean, 
mem: location 101316 is 0
run: jumping to instruction 13
run: empty-fake-keyboard?:boolean <- equal c:character, 0:literal/eof
mem: location 101315 is 97
mem: storing 0 in location 101317
run: break-unless empty-fake-keyboard?:boolean, 
mem: location 101317 is 0
run: jumping to instruction 18
run: newline?:boolean <- equal c:character, 10:literal/newline
mem: location 101315 is 97
mem: storing 0 in location 101318
run: break-unless newline?:boolean, 
mem: location 101318 is 0
run: jumping to instruction 25
run: file:number <- subtract c:character, 97:literal
mem: location 101315 is 97
mem: storing 0 in location 101320
run: above-min:boolean <- greater-or-equal file:number, 0:literal
mem: location 101320 is 0
mem: storing 1 in location 101321
run: break-if above-min:boolean, 
mem: location 101321 is 1
run: jumping to instruction 35
run: below-max:boolean <- lesser-than file:number, 8:literal
mem: location 101320 is 0
mem: storing 1 in location 101322
run: break-if below-max:boolean, 
mem: location 101322 is 1
run: jumping to instruction 43
run: reply file:number, 0:literal/quit, 0:literal/error
mem: location 101320 is 0
run: result 0 is 0
run: result 1 is 0
run: result 2 is 0
mem: location 101008 is 101126
mem: storing 0 in location 101126
mem: storing 0 in location 101005
mem: storing 0 in location 101006
run: reply-if quit?:boolean, 1:offset
mem: location 101005 is 0
run: jumping to instruction 24
run: reply-if error?:boolean, 1:offset
mem: location 101006 is 0
run: jumping to instruction 26
run: x:address:number <- get-address result:address:move/deref, to-rank:offset
mem: location 101007 is 101124
mem: location 101124 is 0
mem: location 101125 is 1
mem: location 101126 is 0
mem: location 101127 is 1139
mem: location 101007 is 101124
run: address to copy is 101127
mem: storing 101127 in location 101008
run: x:address:number/deref, quit?:boolean, error?:boolean <- read-rank stdin:address:channel, screen:address
mem: location 101002 is 1139
mem: location 101003 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101404
run: stdin:address:channel <- next-ingredient 
mem: storing 1139 in location 101406
run: screen:address <- next-ingredient 
mem: storing 1031 in location 101407
run: c:character, stdin:address:channel <- read stdin:address:channel
mem: location 101406 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101435
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 101437
run: empty:boolean <- channel-empty? chan:address:channel
mem: location 101437 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101466
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 101468
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 101468 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 101468 is 1139
run: address to copy is 1139
run: its type is 1
mem: location 1139 is 1
mem: storing 1 in location 101469
run: free:number <- get chan:address:channel/deref, first-free:offset
mem: location 101468 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 101468 is 1139
run: address to copy is 1140
run: its type is 1
mem: location 1140 is 1
mem: storing 1 in location 101470
run: result:boolean <- equal full:number, free:number
mem: location 101469 is 1
mem: location 101470 is 1
mem: storing 1 in location 101471
run: reply result:boolean
mem: location 101471 is 1
run: result 0 is 1
mem: storing 1 in location 101438
run: break-unless empty:boolean, 
mem: location 101438 is 1
run: jump-unless fell through
run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 101437 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 101437 is 1139
run: address to copy is 1140
mem: storing 1140 in location 101439
run: wait-for-location free-address:address:number/deref
mem: location 101439 is 1140
mem: location 1140 is 1
mem: location 101439 is 1140
run: waiting for location 1140 to change from 1
schedule: waking up routine 1
schedule: run1001/read-move-blocking
run: 3:number <- routine-state 2:number
mem: location 2 is 2
mem: storing 2 in location 3
run: 4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
mem: location 3 is 2
mem: storing 1 in location 4
run: assert 4:boolean/waiting?/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a2-a']
mem: location 4 is 1
run: 1:address:channel <- write 1:address:channel, 52:literal
mem: location 1 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1518
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1520
run: val:location <- next-ingredient 
mem: storing 52 in location 1521
run: full:boolean <- channel-full? chan:address:channel
mem: location 1520 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1549
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1551
run: tmp:number <- get chan:address:channel/deref, first-free:offset
mem: location 1551 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 1551 is 1139
run: address to copy is 1140
run: its type is 1
mem: location 1140 is 1
mem: storing 1 in location 1552
run: tmp:number <- add tmp:number, 1:literal
mem: location 1552 is 1
mem: storing 2 in location 1552
run: len:number <- channel-capacity chan:address:channel
mem: location 1551 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1580
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1582
run: q:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1582 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 1582 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 1583
run: result:number <- length q:address:array:location/deref
mem: location 1583 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 45
mem: location 1583 is 1142
mem: storing 3 in location 1584
run: reply result:number
mem: location 1584 is 3
run: result 0 is 3
mem: storing 3 in location 1553
run: at-end?:boolean <- greater-or-equal tmp:number, len:number
mem: location 1552 is 2
mem: location 1553 is 3
mem: storing 0 in location 1554
run: break-unless at-end?:boolean, 
mem: location 1554 is 0
run: jumping to instruction 9
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 1551 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 1551 is 1139
run: address to copy is 1139
run: its type is 1
mem: location 1139 is 1
mem: storing 1 in location 1555
run: result:boolean <- equal full:number, tmp:number
mem: location 1555 is 1
mem: location 1552 is 2
mem: storing 0 in location 1556
run: reply result:boolean
mem: location 1556 is 0
run: result 0 is 0
mem: storing 0 in location 1522
run: break-unless full:boolean, 
mem: location 1522 is 0
run: jumping to instruction 8
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1520 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 1520 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 1524
run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 1520 is 1139
mem: location 1139 is 1
mem: location 1140 is 1
mem: location 1141 is 1142
mem: location 1520 is 1139
run: address to copy is 1140
mem: storing 1140 in location 1525
run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
mem: location 1524 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 50
mem: location 1145 is 45
mem: location 1525 is 1140
mem: location 1140 is 1
mem: location 1524 is 1142
mem: location 1525 is 1140
mem: location 1140 is 1
mem: storing 1144 in location 1526
run: dest:address:location/deref <- copy val:location
mem: location 1521 is 52
mem: location 1526 is 1144
mem: storing 52 in location 1144
run: free:address:number/deref <- add free:address:number/deref, 1:literal
mem: location 1525 is 1140
mem: location 1140 is 1
mem: location 1525 is 1140
mem: storing 2 in location 1140
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 1524 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 52
mem: location 1145 is 45
mem: location 1524 is 1142
mem: storing 3 in location 1527
run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
mem: location 1525 is 1140
mem: location 1140 is 2
mem: location 1527 is 3
mem: storing 0 in location 1528
run: break-unless at-end?:boolean, 
mem: location 1528 is 0
run: jumping to instruction 19
run: reply chan:address:channel/same-as-ingredient:0
mem: location 1520 is 1139
run: result 0 is 1139
mem: storing 1139 in location 1
run: restart 2:number/routine
mem: location 2 is 2
run: wait-for-routine 2:number
mem: location 2 is 2
run: waiting for routine 2
schedule: read/read-rank/read-move
run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
mem: location 101437 is 1139
mem: location 1139 is 1
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 101437 is 1139
run: address to copy is 1139
mem: storing 1139 in location 101440
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 101437 is 1139
mem: location 1139 is 1
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 101437 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 101441
run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
mem: location 101441 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 52
mem: location 1145 is 45
mem: location 101440 is 1139
mem: location 1139 is 1
mem: location 101441 is 1142
mem: location 101440 is 1139
mem: location 1139 is 1
run: address to copy is 1144
run: its type is 1
mem: location 1144 is 52
mem: storing 52 in location 101442
run: full:address:number/deref <- add full:address:number/deref, 1:literal
mem: location 101440 is 1139
mem: location 1139 is 1
mem: location 101440 is 1139
mem: storing 2 in location 1139
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 101441 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 52
mem: location 1145 is 45
mem: location 101441 is 1142
mem: storing 3 in location 101443
run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
mem: location 101440 is 1139
mem: location 1139 is 2
mem: location 101443 is 3
mem: storing 0 in location 101444
run: break-unless at-end?:boolean, 
mem: location 101444 is 0
run: jumping to instruction 17
run: reply result:location, chan:address:channel/same-as-ingredient:0
mem: location 101442 is 52
mem: location 101437 is 1139
run: result 0 is 52
run: result 1 is 1139
mem: storing 52 in location 101408
mem: storing 1139 in location 101406
run: q-pressed?:boolean <- equal c:character, 81:literal
mem: location 101408 is 52
mem: storing 0 in location 101409
run: break-unless q-pressed?:boolean, 
mem: location 101409 is 0
run: jumping to instruction 8
run: q-pressed?:boolean <- equal c:character, 113:literal
mem: location 101408 is 52
mem: storing 0 in location 101409
run: break-unless q-pressed?:boolean, 
mem: location 101409 is 0
run: jumping to instruction 13
run: newline?:boolean <- equal c:character, 10:literal
mem: location 101408 is 52
mem: storing 0 in location 101410
run: break-unless newline?:boolean, 
mem: location 101410 is 0
run: jumping to instruction 20
run: rank:number <- subtract c:character, 49:literal
mem: location 101408 is 52
mem: storing 3 in location 101412
run: above-min:boolean <- greater-or-equal rank:number, 0:literal
mem: location 101412 is 3
mem: storing 1 in location 101413
run: break-if above-min:boolean, 
mem: location 101413 is 1
run: jumping to instruction 29
run: below-max:boolean <- lesser-or-equal rank:number, 7:literal
mem: location 101412 is 3
mem: storing 1 in location 101414
run: break-if below-max:boolean, 
mem: location 101414 is 1
run: jumping to instruction 37
run: reply rank:number, 0:literal/quit, 0:literal/error
mem: location 101412 is 3
run: result 0 is 3
run: result 1 is 0
run: result 2 is 0
mem: location 101008 is 101127
mem: storing 3 in location 101127
mem: storing 0 in location 101005
mem: storing 0 in location 101006
run: reply-if quit?:boolean, 1:offset
mem: location 101005 is 0
run: jumping to instruction 30
run: reply-if error?:boolean, 1:offset
mem: location 101006 is 0
run: jumping to instruction 32
run: error?:boolean <- expect-from-channel stdin:address:channel, 10:literal/newline, screen:address
mem: location 101002 is 1139
mem: location 101003 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101497
run: stdin:address:channel <- next-ingredient 
mem: storing 1139 in location 101499
run: expected:character <- next-ingredient 
mem: storing 10 in location 101500
run: screen:address <- next-ingredient 
mem: storing 1031 in location 101501
run: c:character, stdin:address:channel <- read stdin:address:channel
mem: location 101499 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101528
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 101530
run: empty:boolean <- channel-empty? chan:address:channel
mem: location 101530 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 101559
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 101561
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 101561 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 101561 is 1139
run: address to copy is 1139
run: its type is 1
mem: location 1139 is 2
mem: storing 2 in location 101562
run: free:number <- get chan:address:channel/deref, first-free:offset
mem: location 101561 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 101561 is 1139
run: address to copy is 1140
run: its type is 1
mem: location 1140 is 2
mem: storing 2 in location 101563
run: result:boolean <- equal full:number, free:number
mem: location 101562 is 2
mem: location 101563 is 2
mem: storing 1 in location 101564
run: reply result:boolean
mem: location 101564 is 1
run: result 0 is 1
mem: storing 1 in location 101531
run: break-unless empty:boolean, 
mem: location 101531 is 1
run: jump-unless fell through
run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 101530 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 101530 is 1139
run: address to copy is 1140
mem: storing 1140 in location 101532
run: wait-for-location free-address:address:number/deref
mem: location 101532 is 1140
mem: location 1140 is 2
mem: location 101532 is 1140
run: waiting for location 1140 to change from 2
schedule: waking up routine 1
schedule: run1001/read-move-blocking
run: 3:number <- routine-state 2:number
mem: location 2 is 2
mem: storing 2 in location 3
run: 4:boolean/waiting? <- equal 3:number/routine-state, 2:literal/waiting
mem: location 3 is 2
mem: storing 1 in location 4
run: assert 4:boolean/waiting?, [
F read-move-blocking: routine failed to pause after file 'a2-a4']
mem: location 4 is 1
run: 1:address:channel <- write 1:address:channel, 10:literal
mem: location 1 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1611
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1613
run: val:location <- next-ingredient 
mem: storing 10 in location 1614
run: full:boolean <- channel-full? chan:address:channel
mem: location 1613 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1642
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1644
run: tmp:number <- get chan:address:channel/deref, first-free:offset
mem: location 1644 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 1644 is 1139
run: address to copy is 1140
run: its type is 1
mem: location 1140 is 2
mem: storing 2 in location 1645
run: tmp:number <- add tmp:number, 1:literal
mem: location 1645 is 2
mem: storing 3 in location 1645
run: len:number <- channel-capacity chan:address:channel
mem: location 1644 is 1139
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1673
run: chan:address:channel <- next-ingredient 
mem: storing 1139 in location 1675
run: q:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1675 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 1675 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 1676
run: result:number <- length q:address:array:location/deref
mem: location 1676 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 52
mem: location 1145 is 45
mem: location 1676 is 1142
mem: storing 3 in location 1677
run: reply result:number
mem: location 1677 is 3
run: result 0 is 3
mem: storing 3 in location 1646
run: at-end?:boolean <- greater-or-equal tmp:number, len:number
mem: location 1645 is 3
mem: location 1646 is 3
mem: storing 1 in location 1647
run: break-unless at-end?:boolean, 
mem: location 1647 is 1
run: jump-unless fell through
run: tmp:number <- copy 0:literal
mem: storing 0 in location 1645
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 1644 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 1644 is 1139
run: address to copy is 1139
run: its type is 1
mem: location 1139 is 2
mem: storing 2 in location 1648
run: result:boolean <- equal full:number, tmp:number
mem: location 1648 is 2
mem: location 1645 is 0
mem: storing 0 in location 1649
run: reply result:boolean
mem: location 1649 is 0
run: result 0 is 0
mem: storing 0 in location 1615
run: break-unless full:boolean, 
mem: location 1615 is 0
run: jumping to instruction 8
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1613 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 1613 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 1617
run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 1613 is 1139
mem: location 1139 is 2
mem: location 1140 is 2
mem: location 1141 is 1142
mem: location 1613 is 1139
run: address to copy is 1140
mem: storing 1140 in location 1618
run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
mem: location 1617 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 52
mem: location 1145 is 45
mem: location 1618 is 1140
mem: location 1140 is 2
mem: location 1617 is 1142
mem: location 1618 is 1140
mem: location 1140 is 2
mem: storing 1145 in location 1619
run: dest:address:location/deref <- copy val:location
mem: location 1614 is 10
mem: location 1619 is 1145
mem: storing 10 in location 1145
run: free:address:number/deref <- add free:address:number/deref, 1:literal
mem: location 1618 is 1140
mem: location 1140 is 2
mem: location 1618 is 1140
mem: storing 3 in location 1140
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 1617 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 52
mem: location 1145 is 10
mem: location 1617 is 1142
mem: storing 3 in location 1620
run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
mem: location 1618 is 1140
mem: location 1140 is 3
mem: location 1620 is 3
mem: storing 1 in location 1621
run: break-unless at-end?:boolean, 
mem: location 1621 is 1
run: jump-unless fell through
run: free:address:number/deref <- copy 0:literal
mem: location 1618 is 1140
mem: storing 0 in location 1140
run: reply chan:address:channel/same-as-ingredient:0
mem: location 1613 is 1139
run: result 0 is 1139
mem: storing 1139 in location 1
run: restart 2:number/routine
mem: location 2 is 2
run: wait-for-routine 2:number
mem: location 2 is 2
run: waiting for routine 2
schedule: read/expect-from-channel/read-move
run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
mem: location 101530 is 1139
mem: location 1139 is 2
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 101530 is 1139
run: address to copy is 1139
mem: storing 1139 in location 101533
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 101530 is 1139
mem: location 1139 is 2
mem: location 1140 is 0
mem: location 1141 is 1142
mem: location 101530 is 1139
run: address to copy is 1141
run: its type is 2
mem: location 1141 is 1142
mem: storing 1142 in location 101534
run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
mem: location 101534 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 52
mem: location 1145 is 10
mem: location 101533 is 1139
mem: location 1139 is 2
mem: location 101534 is 1142
mem: location 101533 is 1139
mem: location 1139 is 2
run: address to copy is 1145
run: its type is 1
mem: location 1145 is 10
mem: storing 10 in location 101535
run: full:address:number/deref <- add full:address:number/deref, 1:literal
mem: location 101533 is 1139
mem: location 1139 is 2
mem: location 101533 is 1139
mem: storing 3 in location 1139
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 101534 is 1142
mem: location 1142 is 3
mem: location 1143 is 97
mem: location 1144 is 52
mem: location 1145 is 10
mem: location 101534 is 1142
mem: storing 3 in location 101536
run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
mem: location 101533 is 1139
mem: location 1139 is 3
mem: location 101536 is 3
mem: storing 1 in location 101537
run: break-unless at-end?:boolean, 
mem: location 101537 is 1
run: jump-unless fell through
run: full:address:number/deref <- copy 0:literal
mem: location 101533 is 1139
mem: storing 0 in location 1139
run: reply result:location, chan:address:channel/same-as-ingredient:0
mem: location 101535 is 10
mem: location 101530 is 1139
run: result 0 is 10
run: result 1 is 1139
mem: storing 10 in location 101502
mem: storing 1139 in location 101499
run: match?:boolean <- equal c:character, expected:character
mem: location 101502 is 10
mem: location 101500 is 10
mem: storing 1 in location 101503
run: break-if match?:boolean, 
mem: location 101503 is 1
run: jumping to instruction 10
run: result:boolean <- not match?:boolean
mem: location 101503 is 1
mem: storing 0 in location 101505
run: reply result:boolean
mem: location 101505 is 0
run: result 0 is 0
mem: storing 0 in location 101006
run: reply-if error?:boolean, 1:offset
mem: location 101006 is 0
run: jumping to instruction 35
run: reply result:address:move, quit?:boolean, error?:boolean
mem: location 101007 is 101124
mem: location 101005 is 0
mem: location 101006 is 0
schedule: waking up routine 1
schedule: run1001/read-move-blocking
run: 3:number <- routine-state 2:number
mem: location 2 is 2
mem: storing 1 in location 3
run: 4:boolean/completed? <- equal 3:number/routine-state, 1:literal/completed
mem: location 3 is 1
mem: storing 1 in location 4
run: assert 4:boolean/completed?, [
F read-move-blocking: routine failed to terminate on newline]
mem: location 4 is 1
run: trace [test], [reached end]
test: reached end
run: trace-should-contain [
    test: reached end
  ]
