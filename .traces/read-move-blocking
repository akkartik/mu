parse/0: instruction: run
parse/0:   ingredient: {name: "
#?     $start-tracing #? 2
    1:address:channel <- init-channel 1:literal
    2:integer/routine <- start-running read-move:recipe, 1:address:channel
    # 'read-move' is waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer/id
    $print [routine ]
    $print 2:integer/routine
    $print [ state ]
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]
    # press 'a'
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer/id
    $print [routine ]
    $print 2:integer/routine
    $print [ state ]
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    $print [=======
]
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a']
    # press '2'
    1:address:channel <- write 1:address:channel, 50:literal  # '2'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer/id
    $print [aaa: ]
    $print [routine ]
    $print 2:integer/routine
    $print [ state ]
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after file 'a2']
    # press '-'
    1:address:channel <- write 1:address:channel, 45:literal  # '-'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after hyphen 'a2-']
    # press 'a'
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a2-a']
    # press '4'
    1:address:channel <- write 1:address:channel, 52:literal  # '4'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after file 'a2-a4']
    # press 'newline'
    1:address:channel <- write 1:address:channel, 10:literal  # newline
    restart 2:integer/routine
    # 'read-move' now completes
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    completed?:integer <- equal 3:integer/routine-state, 1:literal/completed
    assert completed?:integer/routine-state, [
F read-move-blocking: routine failed to terminate on newline]
  ", value: 0, type: 0, properties: ["
#?     $start-tracing #? 2
    1:address:channel <- init-channel 1:literal
    2:integer/routine <- start-running read-move:recipe, 1:address:channel
    # 'read-move' is waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer/id
    $print [routine ]
    $print 2:integer/routine
    $print [ state ]
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]
    # press 'a'
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer/id
    $print [routine ]
    $print 2:integer/routine
    $print [ state ]
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    $print [=======
]
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a']
    # press '2'
    1:address:channel <- write 1:address:channel, 50:literal  # '2'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer/id
    $print [aaa: ]
    $print [routine ]
    $print 2:integer/routine
    $print [ state ]
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after file 'a2']
    # press '-'
    1:address:channel <- write 1:address:channel, 45:literal  # '-'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after hyphen 'a2-']
    # press 'a'
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a2-a']
    # press '4'
    1:address:channel <- write 1:address:channel, 52:literal  # '4'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after file 'a2-a4']
    # press 'newline'
    1:address:channel <- write 1:address:channel, 10:literal  # newline
    restart 2:integer/routine
    # 'read-move' now completes
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    completed?:integer <- equal 3:integer/routine-state, 1:literal/completed
    assert completed?:integer/routine-state, [
F read-move-blocking: routine failed to terminate on newline]
  ": "literal-string"]}
after-brace/0: recipe read-move-blocking
after-brace/0: run ...
new/0: routine allocated memory from 1000 to 101000
schedule/0: switching to 1: read-move-blocking
run/0: instruction read-move-blocking/0
run/0: run/46 {name: "
#?     $start-tracing #? 2
    1:address:channel <- init-channel 1:literal
    2:integer/routine <- start-running read-move:recipe, 1:address:channel
    # 'read-move' is waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer/id
    $print [routine ]
    $print 2:integer/routine
    $print [ state ]
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]
    # press 'a'
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer/id
    $print [routine ]
    $print 2:integer/routine
    $print [ state ]
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    $print [=======
]
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a']
    # press '2'
    1:address:channel <- write 1:address:channel, 50:literal  # '2'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer/id
    $print [aaa: ]
    $print [routine ]
    $print 2:integer/routine
    $print [ state ]
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after file 'a2']
    # press '-'
    1:address:channel <- write 1:address:channel, 45:literal  # '-'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after hyphen 'a2-']
    # press 'a'
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a2-a']
    # press '4'
    1:address:channel <- write 1:address:channel, 52:literal  # '4'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after file 'a2-a4']
    # press 'newline'
    1:address:channel <- write 1:address:channel, 10:literal  # newline
    restart 2:integer/routine
    # 'read-move' now completes
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    completed?:integer <- equal 3:integer/routine-state, 1:literal/completed
    assert completed?:integer/routine-state, [
F read-move-blocking: routine failed to terminate on newline]
  ", value: 0, type: 0, properties: ["
#?     $start-tracing #? 2
    1:address:channel <- init-channel 1:literal
    2:integer/routine <- start-running read-move:recipe, 1:address:channel
    # 'read-move' is waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer/id
    $print [routine ]
    $print 2:integer/routine
    $print [ state ]
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)]
    # press 'a'
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer/id
    $print [routine ]
    $print 2:integer/routine
    $print [ state ]
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    $print [=======
]
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a']
    # press '2'
    1:address:channel <- write 1:address:channel, 50:literal  # '2'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer/id
    $print [aaa: ]
    $print [routine ]
    $print 2:integer/routine
    $print [ state ]
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after file 'a2']
    # press '-'
    1:address:channel <- write 1:address:channel, 45:literal  # '-'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after hyphen 'a2-']
    # press 'a'
    1:address:channel <- write 1:address:channel, 97:literal  # 'a'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after rank 'a2-a']
    # press '4'
    1:address:channel <- write 1:address:channel, 52:literal  # '4'
    restart 2:integer/routine
    # 'read-move' still waiting for input
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    waiting?:integer <- equal 3:integer/routine-state, 2:literal/waiting
    assert waiting?:integer/routine-state, [
F read-move-blocking: routine failed to pause after file 'a2-a4']
    # press 'newline'
    1:address:channel <- write 1:address:channel, 10:literal  # newline
    restart 2:integer/routine
    # 'read-move' now completes
    wait-for-routine 2:integer
    3:integer <- routine-state 2:integer
    $print 3:integer
    $print [
]
    completed?:integer <- equal 3:integer/routine-state, 1:literal/completed
    assert completed?:integer/routine-state, [
F read-move-blocking: routine failed to terminate on newline]
  ": "literal-string"]}
parse/0: instruction: init-channel
parse/0:   ingredient: {name: "1", value: 0, type: 0, properties: ["1": "literal"]}
parse/0:   product: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0: instruction: start-running
parse/0:   ingredient: {name: "read-move", value: 0, type: 0, properties: ["read-move": "recipe"]}
parse/0:   ingredient: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0:   product: {name: "2", value: 0, type: 1, properties: ["2": "integer", "routine": ]}
parse/0: instruction: wait-for-routine
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer"]}
parse/0: instruction: routine-state
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer", "id": ]}
parse/0:   product: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "routine ", value: 0, type: 0, properties: ["routine ": "literal-string"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer", "routine": ]}
parse/0: instruction: $print
parse/0:   ingredient: {name: " state ", value: 0, type: 0, properties: [" state ": "literal-string"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "
", value: 0, type: 0, properties: ["
": "literal-string"]}
parse/0: instruction: equal
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "2", value: 0, type: 0, properties: ["2": "literal", "waiting": ]}
parse/0:   product: {name: "waiting?", value: 0, type: 1, properties: ["waiting?": "integer"]}
parse/0: instruction: assert
parse/0:   ingredient: {name: "waiting?", value: 0, type: 1, properties: ["waiting?": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)", value: 0, type: 0, properties: ["
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)": "literal-string"]}
parse/0: instruction: write
parse/0:   ingredient: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0:   ingredient: {name: "97", value: 0, type: 0, properties: ["97": "literal"]}
parse/0:   product: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0: instruction: restart
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer", "routine": ]}
parse/0: instruction: wait-for-routine
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer"]}
parse/0: instruction: routine-state
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer", "id": ]}
parse/0:   product: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "routine ", value: 0, type: 0, properties: ["routine ": "literal-string"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer", "routine": ]}
parse/0: instruction: $print
parse/0:   ingredient: {name: " state ", value: 0, type: 0, properties: [" state ": "literal-string"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "
", value: 0, type: 0, properties: ["
": "literal-string"]}
parse/0: instruction: equal
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "2", value: 0, type: 0, properties: ["2": "literal", "waiting": ]}
parse/0:   product: {name: "waiting?", value: 0, type: 1, properties: ["waiting?": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "=======
", value: 0, type: 0, properties: ["=======
": "literal-string"]}
parse/0: instruction: assert
parse/0:   ingredient: {name: "waiting?", value: 0, type: 1, properties: ["waiting?": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "
F read-move-blocking: routine failed to pause after rank 'a'", value: 0, type: 0, properties: ["
F read-move-blocking: routine failed to pause after rank 'a'": "literal-string"]}
parse/0: instruction: write
parse/0:   ingredient: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0:   ingredient: {name: "50", value: 0, type: 0, properties: ["50": "literal"]}
parse/0:   product: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0: instruction: restart
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer", "routine": ]}
parse/0: instruction: wait-for-routine
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer"]}
parse/0: instruction: routine-state
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer", "id": ]}
parse/0:   product: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "aaa: ", value: 0, type: 0, properties: ["aaa: ": "literal-string"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "routine ", value: 0, type: 0, properties: ["routine ": "literal-string"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer", "routine": ]}
parse/0: instruction: $print
parse/0:   ingredient: {name: " state ", value: 0, type: 0, properties: [" state ": "literal-string"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "
", value: 0, type: 0, properties: ["
": "literal-string"]}
parse/0: instruction: equal
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "2", value: 0, type: 0, properties: ["2": "literal", "waiting": ]}
parse/0:   product: {name: "waiting?", value: 0, type: 1, properties: ["waiting?": "integer"]}
parse/0: instruction: assert
parse/0:   ingredient: {name: "waiting?", value: 0, type: 1, properties: ["waiting?": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "
F read-move-blocking: routine failed to pause after file 'a2'", value: 0, type: 0, properties: ["
F read-move-blocking: routine failed to pause after file 'a2'": "literal-string"]}
parse/0: instruction: write
parse/0:   ingredient: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0:   ingredient: {name: "45", value: 0, type: 0, properties: ["45": "literal"]}
parse/0:   product: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0: instruction: restart
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer", "routine": ]}
parse/0: instruction: wait-for-routine
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer"]}
parse/0: instruction: routine-state
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer"]}
parse/0:   product: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "
", value: 0, type: 0, properties: ["
": "literal-string"]}
parse/0: instruction: equal
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "2", value: 0, type: 0, properties: ["2": "literal", "waiting": ]}
parse/0:   product: {name: "waiting?", value: 0, type: 1, properties: ["waiting?": "integer"]}
parse/0: instruction: assert
parse/0:   ingredient: {name: "waiting?", value: 0, type: 1, properties: ["waiting?": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "
F read-move-blocking: routine failed to pause after hyphen 'a2-'", value: 0, type: 0, properties: ["
F read-move-blocking: routine failed to pause after hyphen 'a2-'": "literal-string"]}
parse/0: instruction: write
parse/0:   ingredient: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0:   ingredient: {name: "97", value: 0, type: 0, properties: ["97": "literal"]}
parse/0:   product: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0: instruction: restart
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer", "routine": ]}
parse/0: instruction: wait-for-routine
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer"]}
parse/0: instruction: routine-state
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer"]}
parse/0:   product: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "
", value: 0, type: 0, properties: ["
": "literal-string"]}
parse/0: instruction: equal
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "2", value: 0, type: 0, properties: ["2": "literal", "waiting": ]}
parse/0:   product: {name: "waiting?", value: 0, type: 1, properties: ["waiting?": "integer"]}
parse/0: instruction: assert
parse/0:   ingredient: {name: "waiting?", value: 0, type: 1, properties: ["waiting?": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "
F read-move-blocking: routine failed to pause after rank 'a2-a'", value: 0, type: 0, properties: ["
F read-move-blocking: routine failed to pause after rank 'a2-a'": "literal-string"]}
parse/0: instruction: write
parse/0:   ingredient: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0:   ingredient: {name: "52", value: 0, type: 0, properties: ["52": "literal"]}
parse/0:   product: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0: instruction: restart
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer", "routine": ]}
parse/0: instruction: wait-for-routine
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer"]}
parse/0: instruction: routine-state
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer"]}
parse/0:   product: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "
", value: 0, type: 0, properties: ["
": "literal-string"]}
parse/0: instruction: equal
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "2", value: 0, type: 0, properties: ["2": "literal", "waiting": ]}
parse/0:   product: {name: "waiting?", value: 0, type: 1, properties: ["waiting?": "integer"]}
parse/0: instruction: assert
parse/0:   ingredient: {name: "waiting?", value: 0, type: 1, properties: ["waiting?": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "
F read-move-blocking: routine failed to pause after file 'a2-a4'", value: 0, type: 0, properties: ["
F read-move-blocking: routine failed to pause after file 'a2-a4'": "literal-string"]}
parse/0: instruction: write
parse/0:   ingredient: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0:   ingredient: {name: "10", value: 0, type: 0, properties: ["10": "literal"]}
parse/0:   product: {name: "1", value: 0, type: 2-10, properties: ["1": "address":"channel"]}
parse/0: instruction: restart
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer", "routine": ]}
parse/0: instruction: wait-for-routine
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer"]}
parse/0: instruction: routine-state
parse/0:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "integer"]}
parse/0:   product: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer"]}
parse/0: instruction: $print
parse/0:   ingredient: {name: "
", value: 0, type: 0, properties: ["
": "literal-string"]}
parse/0: instruction: equal
parse/0:   ingredient: {name: "3", value: 0, type: 1, properties: ["3": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "1", value: 0, type: 0, properties: ["1": "literal", "completed": ]}
parse/0:   product: {name: "completed?", value: 0, type: 1, properties: ["completed?": "integer"]}
parse/0: instruction: assert
parse/0:   ingredient: {name: "completed?", value: 0, type: 1, properties: ["completed?": "integer", "routine-state": ]}
parse/0:   ingredient: {name: "
F read-move-blocking: routine failed to terminate on newline", value: 0, type: 0, properties: ["
F read-move-blocking: routine failed to terminate on newline": "literal-string"]}
name/0: assign waiting? 1
name/0: assign completed? 2
after-brace/0: recipe run1001
after-brace/0: init-channel ...
after-brace/0: start-running ...
after-brace/0: wait-for-routine ...
after-brace/0: routine-state ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: equal ...
after-brace/0: assert ...
after-brace/0: write ...
after-brace/0: restart ...
after-brace/0: wait-for-routine ...
after-brace/0: routine-state ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: equal ...
after-brace/0: $print ...
after-brace/0: assert ...
after-brace/0: write ...
after-brace/0: restart ...
after-brace/0: wait-for-routine ...
after-brace/0: routine-state ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: equal ...
after-brace/0: assert ...
after-brace/0: write ...
after-brace/0: restart ...
after-brace/0: wait-for-routine ...
after-brace/0: routine-state ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: equal ...
after-brace/0: assert ...
after-brace/0: write ...
after-brace/0: restart ...
after-brace/0: wait-for-routine ...
after-brace/0: routine-state ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: equal ...
after-brace/0: assert ...
after-brace/0: write ...
after-brace/0: restart ...
after-brace/0: wait-for-routine ...
after-brace/0: routine-state ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: equal ...
after-brace/0: assert ...
after-brace/0: write ...
after-brace/0: restart ...
after-brace/0: wait-for-routine ...
after-brace/0: routine-state ...
after-brace/0: $print ...
after-brace/0: $print ...
after-brace/0: equal ...
after-brace/0: assert ...
run/0: instruction run1001/0
run/0: {name: "1", value: 1, type: 2-10, properties: ["1": "address":"channel"]} <- init-channel/108 {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run/0: instruction init-channel/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 1000
run/0: instruction init-channel/1
run/0: {name: "result", value: 1, type: 2-10, properties: ["result": "address":"channel"]} <- new/45 {name: "channel", value: 10, type: 0, properties: ["channel": "type"]}
mem/0: new alloc: 1031
mem/0: storing 1031 in location 1002
run/0: instruction init-channel/2
run/0: {name: "full", value: 2, type: 2-1, properties: ["full": "address":"integer"]} <- get-address/25 {name: "result", value: 1, type: 2-10, properties: ["result": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run/0: ingredient 0 is result
mem/0: location 1002 is 1031
run/0: ingredient 1 is first-full
run/0: address to copy is 1031
run/0: product 0 is 1031
mem/0: storing 1031 in location 1003
run/0: instruction init-channel/3
run/0: {name: "full", value: 2, type: 2-1, properties: ["full": "address":"integer", "deref": ]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run/0: ingredient 0 is 0
mem/0: location 1003 is 1031
mem/0: storing 0 in location 1031
run/0: instruction init-channel/4
run/0: {name: "free", value: 3, type: 2-1, properties: ["free": "address":"integer"]} <- get-address/25 {name: "result", value: 1, type: 2-10, properties: ["result": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run/0: ingredient 0 is result
mem/0: location 1002 is 1031
run/0: ingredient 1 is first-free
run/0: address to copy is 1032
run/0: product 0 is 1032
mem/0: storing 1032 in location 1004
run/0: instruction init-channel/5
run/0: {name: "free", value: 3, type: 2-1, properties: ["free": "address":"integer", "deref": ]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run/0: ingredient 0 is 0
mem/0: location 1004 is 1032
mem/0: storing 0 in location 1032
run/0: instruction init-channel/6
run/0: {name: "capacity", value: 4, type: 1, properties: ["capacity": "integer"]} <- next-ingredient/30 
run/0: product 0 is 1
mem/0: storing 1 in location 1005
run/0: instruction init-channel/7
run/0: {name: "capacity", value: 4, type: 1, properties: ["capacity": "integer"]} <- add/2 {name: "capacity", value: 4, type: 1, properties: ["capacity": "integer"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run/0: ingredient 0 is capacity
mem/0: location 1005 is 1
run/0: ingredient 1 is 1
run/0: product 0 is 2
mem/0: storing 2 in location 1005
run/0: instruction init-channel/8
run/0: {name: "dest", value: 5, type: 2-2-5-1, properties: ["dest": "address":"address":"array":"location"]} <- get-address/25 {name: "result", value: 1, type: 2-10, properties: ["result": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run/0: ingredient 0 is result
mem/0: location 1002 is 1031
run/0: ingredient 1 is data
run/0: address to copy is 1033
run/0: product 0 is 1033
mem/0: storing 1033 in location 1006
run/0: instruction init-channel/9
run/0: {name: "dest", value: 5, type: 2-2-5-1, properties: ["dest": "address":"address":"array":"location", "deref": ]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "capacity", value: 4, type: 1, properties: ["capacity": "integer"]}
mem/0: location 1005 is 2
mem/0: array size is 2
mem/0: new alloc: 1034
mem/0: location 1006 is 1033
mem/0: storing 1034 in location 1033
run/0: instruction init-channel/10
run/0: reply/33 {name: "result", value: 1, type: 2-10, properties: ["result": "address":"channel"]}
mem/0: location 1002 is 1031
run/0: result 0 is 1031
mem/0: storing 1031 in location 1
run/0: instruction run1001/1
run/0: {name: "2", value: 2, type: 1, properties: ["2": "integer", "routine": ]} <- start-running/34 {name: "read-move", value: 0, type: 0, properties: ["read-move": "recipe"]}, {name: "1", value: 1, type: 2-10, properties: ["1": "address":"channel"]}
run/0: ingredient 0 is read-move
new/0: routine allocated memory from 101000 to 201000
mem/0: location 1 is 1031
mem/0: storing 2 in location 2
run/0: instruction run1001/2
run/0: wait-for-routine/38 {name: "2", value: 2, type: 1, properties: ["2": "integer"]}
run/0: waiting for routine 2
schedule/0: 1: waiting for routine 2
schedule/0: wake up loop 1: routine 1 has state 2
schedule/0: waiting on location: 0
schedule/0: wake up loop 1: routine 2 has state 0
schedule/0: switching to 2: read-move
run/0: instruction read-move/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 101000
run/0: instruction read-move/1
run/0: {name: "stdin", value: 1, type: 2-10, properties: ["stdin": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 1031
mem/0: storing 1031 in location 101002
run/0: instruction read-move/2
run/0: {name: "from-file", value: 2, type: 1, properties: ["from-file": "integer"]} <- read-file/136 {name: "stdin", value: 1, type: 2-10, properties: ["stdin": "address":"channel"]}
mem/0: location 101002 is 1031
run/0: instruction read-file/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 101031
run/0: instruction read-file/1
run/0: {name: "stdin", value: 1, type: 2-10, properties: ["stdin": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 1031
mem/0: storing 1031 in location 101033
run/0: instruction read-file/2
run/0: {name: "c", value: 2, type: 4, properties: ["c": "character"]}, {name: "stdin", value: 1, type: 2-10, properties: ["stdin": "address":"channel"]} <- read/111 {name: "stdin", value: 1, type: 2-10, properties: ["stdin": "address":"channel"]}
mem/0: location 101033 is 1031
run/0: instruction read/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 101062
run/0: instruction read/1
run/0: {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 1031
mem/0: storing 1031 in location 101064
run/0: instruction read/3
run/0: {name: "empty", value: 2, type: 3, properties: ["empty": "boolean"]} <- channel-empty?/112 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]}
mem/0: location 101064 is 1031
run/0: instruction channel-empty?/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 101093
run/0: instruction channel-empty?/1
run/0: {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 1031
mem/0: storing 1031 in location 101095
run/0: instruction channel-empty?/2
run/0: {name: "full", value: 2, type: 1, properties: ["full": "integer"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 101095 is 1031
run/0: ingredient 1 is first-full
run/0: address to copy is 1031
run/0: its type is 1
mem/0: location 1031 is 0
run/0: product 0 is 0
mem/0: storing 0 in location 101096
run/0: instruction channel-empty?/3
run/0: {name: "free", value: 3, type: 1, properties: ["free": "integer"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 101095 is 1031
run/0: ingredient 1 is first-free
run/0: address to copy is 1032
run/0: its type is 1
mem/0: location 1032 is 0
run/0: product 0 is 0
mem/0: storing 0 in location 101097
run/0: instruction channel-empty?/4
run/0: {name: "result", value: 4, type: 3, properties: ["result": "boolean"]} <- equal/13 {name: "full", value: 2, type: 1, properties: ["full": "integer"]}, {name: "free", value: 3, type: 1, properties: ["free": "integer"]}
run/0: ingredient 0 is full
mem/0: location 101096 is 0
run/0: ingredient 1 is free
mem/0: location 101097 is 0
run/0: product 0 is 1
mem/0: storing 1 in location 101098
run/0: instruction channel-empty?/5
run/0: reply/33 {name: "result", value: 4, type: 3, properties: ["result": "boolean"]}
mem/0: location 101098 is 1
run/0: result 0 is 1
mem/0: storing 1 in location 101065
run/0: instruction read/4
run/0: break-unless/12 {name: "empty", value: 2, type: 3, properties: ["empty": "boolean"]}, {name: "", value: 2, type: , properties: ["": ]}
mem/0: location 101065 is 1
run/0: ingredient 0 is 1
run/0: jump-unless fell through
run/0: instruction read/5
run/0: {name: "free-address", value: 3, type: 2-1, properties: ["free-address": "address":"integer"]} <- get-address/25 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 101064 is 1031
run/0: ingredient 1 is first-free
run/0: address to copy is 1032
run/0: product 0 is 1032
mem/0: storing 1032 in location 101066
run/0: instruction read/6
run/0: wait-for-location/37 {name: "free-address", value: 3, type: 2-1, properties: ["free-address": "address":"integer", "deref": ]}
mem/0: location 101066 is 1032
run/0: waiting for location 1032 to change from 0
schedule/0: 2: waiting for location 1032 to change from 0
schedule/0: wake up loop 1: routine 1 has state 2
schedule/0: waiting on location: 0
schedule/0: wake up loop 1: routine 2 has state 2
schedule/0: waiting on location: 1032
schedule/0: checking routine 2 waiting on location 1032: 0 vs 0
schedule/0: waking up routine 1 waiting on routine 2
schedule/0: switching to 1: run1001
run/0: instruction run1001/3
run/0: {name: "3", value: 3, type: 1, properties: ["3": "integer"]} <- routine-state/35 {name: "2", value: 2, type: 1, properties: ["2": "integer", "id": ]}
mem/0: location 2 is 2
mem/0: location 2 is 2
mem/0: storing 2 in location 3
run/0: instruction run1001/4
run/0: $print/20 {name: "routine ", value: 0, type: 0, properties: ["routine ": "literal-string"]}
run/0: $print: routine 
run/0: instruction run1001/5
run/0: $print/20 {name: "2", value: 2, type: 1, properties: ["2": "integer", "routine": ]}
mem/0: location 2 is 2
run/0: $print: 2
run/0: instruction run1001/6
run/0: $print/20 {name: " state ", value: 0, type: 0, properties: [" state ": "literal-string"]}
run/0: $print:  state 
run/0: instruction run1001/7
run/0: $print/20 {name: "3", value: 3, type: 1, properties: ["3": "integer"]}
mem/0: location 3 is 2
run/0: $print: 2
run/0: instruction run1001/8
run/0: $print/20 {name: "
", value: 0, type: 0, properties: ["
": "literal-string"]}
run/0: $print: 
run/0: instruction run1001/9
run/0: {name: "waiting?", value: 1, type: 1, properties: ["waiting?": "integer"]} <- equal/13 {name: "3", value: 3, type: 1, properties: ["3": "integer", "routine-state": ]}, {name: "2", value: 2, type: 0, properties: ["2": "literal", "waiting": ]}
run/0: ingredient 0 is 3
mem/0: location 3 is 2
run/0: ingredient 1 is 2
run/0: product 0 is 1
mem/0: storing 1 in location 1
run/0: instruction run1001/10
run/0: assert/19 {name: "waiting?", value: 1, type: 1, properties: ["waiting?": "integer", "routine-state": ]}, {name: "
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)", value: 0, type: 0, properties: ["
F read-move-blocking: routine failed to pause after coming up (before any keys were pressed)": "literal-string"]}
run/0: ingredient 0 is waiting?
mem/0: location 1 is 1
run/0: instruction run1001/11
run/0: {name: "1", value: 1, type: 2-10, properties: ["1": "address":"channel"]} <- write/109 {name: "1", value: 1, type: 2-10, properties: ["1": "address":"channel"]}, {name: "97", value: 97, type: 0, properties: ["97": "literal"]}
mem/0: location 1 is 1
run/0: instruction write/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 1037
run/0: instruction write/1
run/0: {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 1
mem/0: storing 1 in location 1039
run/0: instruction write/2
run/0: {name: "val", value: 2, type: 1, properties: ["val": "location"]} <- next-ingredient/30 
run/0: product 0 is 97
mem/0: storing 97 in location 1040
run/0: instruction write/4
run/0: {name: "full", value: 3, type: 3, properties: ["full": "boolean"]} <- channel-full?/110 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]}
mem/0: location 1039 is 1
run/0: instruction channel-full?/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 1068
run/0: instruction channel-full?/1
run/0: {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 1
mem/0: storing 1 in location 1070
run/0: instruction channel-full?/2
run/0: {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1070 is 1
run/0: ingredient 1 is first-free
run/0: address to copy is 2
run/0: its type is 1
mem/0: location 2 is 2
run/0: product 0 is 2
mem/0: storing 2 in location 1071
run/0: instruction channel-full?/3
run/0: {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]} <- add/2 {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run/0: ingredient 0 is tmp
mem/0: location 1071 is 2
run/0: ingredient 1 is 1
run/0: product 0 is 3
mem/0: storing 3 in location 1071
run/0: instruction channel-full?/5
run/0: {name: "len", value: 3, type: 1, properties: ["len": "integer"]} <- channel-capacity/113 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]}
mem/0: location 1070 is 1
run/0: instruction channel-capacity/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 1099
run/0: instruction channel-capacity/1
run/0: {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 1
mem/0: storing 1 in location 1101
run/0: instruction channel-capacity/2
run/0: {name: "q", value: 2, type: 2-5-1, properties: ["q": "address":"array":"location"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1101 is 1
run/0: ingredient 1 is data
run/0: address to copy is 3
run/0: its type is 2
mem/0: location 3 is 2
run/0: product 0 is 2
mem/0: storing 2 in location 1102
run/0: instruction channel-capacity/3
run/0: {name: "result", value: 3, type: 1, properties: ["result": "integer"]} <- length/28 {name: "q", value: 2, type: 2-5-1, properties: ["q": "address":"array":"location", "deref": ]}
mem/0: location 1102 is 2
mem/0: storing 2 in location 1103
run/0: instruction channel-capacity/4
run/0: reply/33 {name: "result", value: 3, type: 1, properties: ["result": "integer"]}
mem/0: location 1103 is 2
run/0: result 0 is 2
mem/0: storing 2 in location 1072
run/0: instruction channel-full?/6
run/0: {name: "at-end?", value: 4, type: 3, properties: ["at-end?": "boolean"]} <- greater-or-equal/16 {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]}, {name: "len", value: 3, type: 1, properties: ["len": "integer"]}
run/0: ingredient 0 is tmp
mem/0: location 1071 is 3
run/0: ingredient 1 is len
mem/0: location 1072 is 2
run/0: product 0 is 1
mem/0: storing 1 in location 1073
run/0: instruction channel-full?/7
run/0: break-unless/12 {name: "at-end?", value: 4, type: 3, properties: ["at-end?": "boolean"]}, {name: "", value: 1, type: , properties: ["": ]}
mem/0: location 1073 is 1
run/0: ingredient 0 is 1
run/0: jump-unless fell through
run/0: instruction channel-full?/8
run/0: {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run/0: ingredient 0 is 0
mem/0: storing 0 in location 1071
run/0: instruction channel-full?/10
run/0: {name: "full", value: 5, type: 1, properties: ["full": "integer"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1070 is 1
run/0: ingredient 1 is first-full
run/0: address to copy is 1
run/0: its type is 1
mem/0: location 1 is 1
run/0: product 0 is 1
mem/0: storing 1 in location 1074
run/0: instruction channel-full?/11
run/0: {name: "result", value: 6, type: 3, properties: ["result": "boolean"]} <- equal/13 {name: "full", value: 5, type: 1, properties: ["full": "integer"]}, {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]}
run/0: ingredient 0 is full
mem/0: location 1074 is 1
run/0: ingredient 1 is tmp
mem/0: location 1071 is 0
run/0: product 0 is 0
mem/0: storing 0 in location 1075
run/0: instruction channel-full?/12
run/0: reply/33 {name: "result", value: 6, type: 3, properties: ["result": "boolean"]}
mem/0: location 1075 is 0
run/0: result 0 is 0
mem/0: storing 0 in location 1041
run/0: instruction write/5
run/0: break-unless/12 {name: "full", value: 3, type: 3, properties: ["full": "boolean"]}, {name: "", value: 2, type: , properties: ["": ]}
mem/0: location 1041 is 0
run/0: ingredient 0 is 0
run/0: ingredient 1 is 
run/0: jumping to instruction 8
run/0: instruction write/9
run/0: {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1039 is 1
run/0: ingredient 1 is data
run/0: address to copy is 3
run/0: its type is 2
mem/0: location 3 is 2
run/0: product 0 is 2
mem/0: storing 2 in location 1043
run/0: instruction write/10
run/0: {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer"]} <- get-address/25 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1039 is 1
run/0: ingredient 1 is first-free
run/0: address to copy is 2
run/0: product 0 is 2
mem/0: storing 2 in location 1044
run/0: instruction write/11
run/0: {name: "dest", value: 7, type: 2-1, properties: ["dest": "address":"location"]} <- index-address/27 {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location", "deref": ]}, {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer", "deref": ]}
run/0: ingredient 0 is circular-buffer
mem/0: location 1043 is 2
run/0: ingredient 1 is {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer", "deref": ]}
mem/0: location 1044 is 2
mem/0: location 2 is 2
run/0: address to copy is 5
run/0: product 0 is 5
mem/0: storing 5 in location 1045
run/0: instruction write/12
run/0: {name: "dest", value: 7, type: 2-1, properties: ["dest": "address":"location", "deref": ]} <- copy/1 {name: "val", value: 2, type: 1, properties: ["val": "location"]}
run/0: ingredient 0 is val
mem/0: location 1040 is 97
mem/0: location 1045 is 5
mem/0: storing 97 in location 5
run/0: instruction write/13
run/0: {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer", "deref": ]} <- add/2 {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer", "deref": ]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run/0: ingredient 0 is free
mem/0: location 1044 is 2
mem/0: location 2 is 2
run/0: ingredient 1 is 1
run/0: product 0 is 3
mem/0: location 1044 is 2
mem/0: storing 3 in location 2
run/0: instruction write/15
run/0: {name: "len", value: 8, type: 1, properties: ["len": "integer"]} <- length/28 {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location", "deref": ]}
mem/0: location 1043 is 2
mem/0: storing 3 in location 1046
run/0: instruction write/16
run/0: {name: "at-end?", value: 9, type: 3, properties: ["at-end?": "boolean"]} <- greater-or-equal/16 {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer", "deref": ]}, {name: "len", value: 8, type: 1, properties: ["len": "integer"]}
run/0: ingredient 0 is free
mem/0: location 1044 is 2
mem/0: location 2 is 3
run/0: ingredient 1 is len
mem/0: location 1046 is 3
run/0: product 0 is 1
mem/0: storing 1 in location 1047
run/0: instruction write/17
run/0: break-unless/12 {name: "at-end?", value: 9, type: 3, properties: ["at-end?": "boolean"]}, {name: "", value: 1, type: , properties: ["": ]}
mem/0: location 1047 is 1
run/0: ingredient 0 is 1
run/0: jump-unless fell through
run/0: instruction write/18
run/0: {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer", "deref": ]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run/0: ingredient 0 is 0
mem/0: location 1044 is 2
mem/0: storing 0 in location 2
run/0: instruction write/20
run/0: reply/33 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "same-as-ingredient": "0"]}
mem/0: location 1039 is 1
run/0: result 0 is 1
mem/0: storing 1 in location 1
run/0: instruction run1001/12
run/0: restart/36 {name: "2", value: 2, type: 1, properties: ["2": "integer", "routine": ]}
mem/0: location 2 is 0
run/0: instruction run1001/13
run/0: wait-for-routine/38 {name: "2", value: 2, type: 1, properties: ["2": "integer"]}
run/0: waiting for routine 2
schedule/0: 1: waiting for routine 2
schedule/0: wake up loop 1: routine 1 has state 2
schedule/0: waiting on location: 0
schedule/0: wake up loop 1: routine 2 has state 2
schedule/0: waiting on location: 1032
schedule/0: checking routine 2 waiting on location 1032: 0 vs 0
schedule/0: waking up routine 1 waiting on routine 2
schedule/0: switching to 1: run1001
run/0: instruction run1001/14
run/0: {name: "3", value: 3, type: 1, properties: ["3": "integer"]} <- routine-state/35 {name: "2", value: 2, type: 1, properties: ["2": "integer", "id": ]}
mem/0: location 2 is 0
mem/0: location 2 is 0
run/0: instruction run1001/15
run/0: $print/20 {name: "routine ", value: 0, type: 0, properties: ["routine ": "literal-string"]}
run/0: $print: routine 
run/0: instruction run1001/16
run/0: $print/20 {name: "2", value: 2, type: 1, properties: ["2": "integer", "routine": ]}
mem/0: location 2 is 0
run/0: $print: 0
run/0: instruction run1001/17
run/0: $print/20 {name: " state ", value: 0, type: 0, properties: [" state ": "literal-string"]}
run/0: $print:  state 
run/0: instruction run1001/18
run/0: $print/20 {name: "3", value: 3, type: 1, properties: ["3": "integer"]}
mem/0: location 3 is 2
run/0: $print: 2
run/0: instruction run1001/19
run/0: $print/20 {name: "
", value: 0, type: 0, properties: ["
": "literal-string"]}
run/0: $print: 
run/0: instruction run1001/20
run/0: {name: "waiting?", value: 1, type: 1, properties: ["waiting?": "integer"]} <- equal/13 {name: "3", value: 3, type: 1, properties: ["3": "integer", "routine-state": ]}, {name: "2", value: 2, type: 0, properties: ["2": "literal", "waiting": ]}
run/0: ingredient 0 is 3
mem/0: location 3 is 2
run/0: ingredient 1 is 2
run/0: product 0 is 1
mem/0: storing 1 in location 1
run/0: instruction run1001/21
run/0: $print/20 {name: "=======
", value: 0, type: 0, properties: ["=======
": "literal-string"]}
run/0: $print: =======
run/0: instruction run1001/22
run/0: assert/19 {name: "waiting?", value: 1, type: 1, properties: ["waiting?": "integer", "routine-state": ]}, {name: "
F read-move-blocking: routine failed to pause after rank 'a'", value: 0, type: 0, properties: ["
F read-move-blocking: routine failed to pause after rank 'a'": "literal-string"]}
run/0: ingredient 0 is waiting?
mem/0: location 1 is 1
run/0: instruction run1001/23
run/0: {name: "1", value: 1, type: 2-10, properties: ["1": "address":"channel"]} <- write/109 {name: "1", value: 1, type: 2-10, properties: ["1": "address":"channel"]}, {name: "50", value: 50, type: 0, properties: ["50": "literal"]}
mem/0: location 1 is 1
run/0: instruction write/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 1130
run/0: instruction write/1
run/0: {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 1
mem/0: storing 1 in location 1132
run/0: instruction write/2
run/0: {name: "val", value: 2, type: 1, properties: ["val": "location"]} <- next-ingredient/30 
run/0: product 0 is 50
mem/0: storing 50 in location 1133
run/0: instruction write/4
run/0: {name: "full", value: 3, type: 3, properties: ["full": "boolean"]} <- channel-full?/110 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]}
mem/0: location 1132 is 1
run/0: instruction channel-full?/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 1161
run/0: instruction channel-full?/1
run/0: {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 1
mem/0: storing 1 in location 1163
run/0: instruction channel-full?/2
run/0: {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1163 is 1
run/0: ingredient 1 is first-free
run/0: address to copy is 2
run/0: its type is 1
mem/0: location 2 is 0
run/0: product 0 is 0
mem/0: storing 0 in location 1164
run/0: instruction channel-full?/3
run/0: {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]} <- add/2 {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run/0: ingredient 0 is tmp
mem/0: location 1164 is 0
run/0: ingredient 1 is 1
run/0: product 0 is 1
mem/0: storing 1 in location 1164
run/0: instruction channel-full?/5
run/0: {name: "len", value: 3, type: 1, properties: ["len": "integer"]} <- channel-capacity/113 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]}
mem/0: location 1163 is 1
run/0: instruction channel-capacity/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 1192
run/0: instruction channel-capacity/1
run/0: {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 1
mem/0: storing 1 in location 1194
run/0: instruction channel-capacity/2
run/0: {name: "q", value: 2, type: 2-5-1, properties: ["q": "address":"array":"location"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1194 is 1
run/0: ingredient 1 is data
run/0: address to copy is 3
run/0: its type is 2
mem/0: location 3 is 2
run/0: product 0 is 2
mem/0: storing 2 in location 1195
run/0: instruction channel-capacity/3
run/0: {name: "result", value: 3, type: 1, properties: ["result": "integer"]} <- length/28 {name: "q", value: 2, type: 2-5-1, properties: ["q": "address":"array":"location", "deref": ]}
mem/0: location 1195 is 2
mem/0: storing 0 in location 1196
run/0: instruction channel-capacity/4
run/0: reply/33 {name: "result", value: 3, type: 1, properties: ["result": "integer"]}
mem/0: location 1196 is 0
run/0: result 0 is 0
mem/0: storing 0 in location 1165
run/0: instruction channel-full?/6
run/0: {name: "at-end?", value: 4, type: 3, properties: ["at-end?": "boolean"]} <- greater-or-equal/16 {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]}, {name: "len", value: 3, type: 1, properties: ["len": "integer"]}
run/0: ingredient 0 is tmp
mem/0: location 1164 is 1
run/0: ingredient 1 is len
mem/0: location 1165 is 0
run/0: product 0 is 1
mem/0: storing 1 in location 1166
run/0: instruction channel-full?/7
run/0: break-unless/12 {name: "at-end?", value: 4, type: 3, properties: ["at-end?": "boolean"]}, {name: "", value: 1, type: , properties: ["": ]}
mem/0: location 1166 is 1
run/0: ingredient 0 is 1
run/0: jump-unless fell through
run/0: instruction channel-full?/8
run/0: {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run/0: ingredient 0 is 0
mem/0: storing 0 in location 1164
run/0: instruction channel-full?/10
run/0: {name: "full", value: 5, type: 1, properties: ["full": "integer"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1163 is 1
run/0: ingredient 1 is first-full
run/0: address to copy is 1
run/0: its type is 1
mem/0: location 1 is 1
run/0: product 0 is 1
mem/0: storing 1 in location 1167
run/0: instruction channel-full?/11
run/0: {name: "result", value: 6, type: 3, properties: ["result": "boolean"]} <- equal/13 {name: "full", value: 5, type: 1, properties: ["full": "integer"]}, {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]}
run/0: ingredient 0 is full
mem/0: location 1167 is 1
run/0: ingredient 1 is tmp
mem/0: location 1164 is 0
run/0: product 0 is 0
mem/0: storing 0 in location 1168
run/0: instruction channel-full?/12
run/0: reply/33 {name: "result", value: 6, type: 3, properties: ["result": "boolean"]}
mem/0: location 1168 is 0
run/0: result 0 is 0
mem/0: storing 0 in location 1134
run/0: instruction write/5
run/0: break-unless/12 {name: "full", value: 3, type: 3, properties: ["full": "boolean"]}, {name: "", value: 2, type: , properties: ["": ]}
mem/0: location 1134 is 0
run/0: ingredient 0 is 0
run/0: ingredient 1 is 
run/0: jumping to instruction 8
run/0: instruction write/9
run/0: {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1132 is 1
run/0: ingredient 1 is data
run/0: address to copy is 3
run/0: its type is 2
mem/0: location 3 is 2
run/0: product 0 is 2
mem/0: storing 2 in location 1136
run/0: instruction write/10
run/0: {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer"]} <- get-address/25 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1132 is 1
run/0: ingredient 1 is first-free
run/0: address to copy is 2
run/0: product 0 is 2
mem/0: storing 2 in location 1137
run/0: instruction write/11
run/0: {name: "dest", value: 7, type: 2-1, properties: ["dest": "address":"location"]} <- index-address/27 {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location", "deref": ]}, {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer", "deref": ]}
run/0: ingredient 0 is circular-buffer
mem/0: location 1136 is 2
run/0: ingredient 1 is {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer", "deref": ]}
mem/0: location 1137 is 2
mem/0: location 2 is 0
run/0: address to copy is 3
run/0: product 0 is 3
mem/0: storing 3 in location 1138
run/0: instruction write/12
run/0: {name: "dest", value: 7, type: 2-1, properties: ["dest": "address":"location", "deref": ]} <- copy/1 {name: "val", value: 2, type: 1, properties: ["val": "location"]}
run/0: ingredient 0 is val
mem/0: location 1133 is 50
mem/0: location 1138 is 3
mem/0: storing 50 in location 3
run/0: instruction write/13
run/0: {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer", "deref": ]} <- add/2 {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer", "deref": ]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run/0: ingredient 0 is free
mem/0: location 1137 is 2
mem/0: location 2 is 0
run/0: ingredient 1 is 1
run/0: product 0 is 1
mem/0: location 1137 is 2
mem/0: storing 1 in location 2
run/0: instruction write/15
run/0: {name: "len", value: 8, type: 1, properties: ["len": "integer"]} <- length/28 {name: "circular-buffer", value: 5, type: 2-5-1, properties: ["circular-buffer": "address":"array":"location", "deref": ]}
mem/0: location 1136 is 2
mem/0: storing 1 in location 1139
run/0: instruction write/16
run/0: {name: "at-end?", value: 9, type: 3, properties: ["at-end?": "boolean"]} <- greater-or-equal/16 {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer", "deref": ]}, {name: "len", value: 8, type: 1, properties: ["len": "integer"]}
run/0: ingredient 0 is free
mem/0: location 1137 is 2
mem/0: location 2 is 1
run/0: ingredient 1 is len
mem/0: location 1139 is 1
run/0: product 0 is 1
mem/0: storing 1 in location 1140
run/0: instruction write/17
run/0: break-unless/12 {name: "at-end?", value: 9, type: 3, properties: ["at-end?": "boolean"]}, {name: "", value: 1, type: , properties: ["": ]}
mem/0: location 1140 is 1
run/0: ingredient 0 is 1
run/0: jump-unless fell through
run/0: instruction write/18
run/0: {name: "free", value: 6, type: 2-1, properties: ["free": "address":"integer", "deref": ]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run/0: ingredient 0 is 0
mem/0: location 1137 is 2
mem/0: storing 0 in location 2
run/0: instruction write/20
run/0: reply/33 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "same-as-ingredient": "0"]}
mem/0: location 1132 is 1
run/0: result 0 is 1
mem/0: storing 1 in location 1
run/0: instruction run1001/24
run/0: restart/36 {name: "2", value: 2, type: 1, properties: ["2": "integer", "routine": ]}
mem/0: location 2 is 0
run/0: instruction run1001/25
run/0: wait-for-routine/38 {name: "2", value: 2, type: 1, properties: ["2": "integer"]}
run/0: waiting for routine 2
schedule/0: 1: waiting for routine 2
schedule/0: wake up loop 1: routine 1 has state 2
schedule/0: waiting on location: 0
schedule/0: wake up loop 1: routine 2 has state 2
schedule/0: waiting on location: 1032
schedule/0: checking routine 2 waiting on location 1032: 0 vs 0
schedule/0: waking up routine 1 waiting on routine 2
schedule/0: switching to 1: run1001
run/0: instruction run1001/26
run/0: {name: "3", value: 3, type: 1, properties: ["3": "integer"]} <- routine-state/35 {name: "2", value: 2, type: 1, properties: ["2": "integer", "id": ]}
mem/0: location 2 is 0
mem/0: location 2 is 0
run/0: instruction run1001/27
run/0: $print/20 {name: "aaa: ", value: 0, type: 0, properties: ["aaa: ": "literal-string"]}
run/0: $print: aaa: 
run/0: instruction run1001/28
run/0: $print/20 {name: "routine ", value: 0, type: 0, properties: ["routine ": "literal-string"]}
run/0: $print: routine 
run/0: instruction run1001/29
run/0: $print/20 {name: "2", value: 2, type: 1, properties: ["2": "integer", "routine": ]}
mem/0: location 2 is 0
run/0: $print: 0
run/0: instruction run1001/30
run/0: $print/20 {name: " state ", value: 0, type: 0, properties: [" state ": "literal-string"]}
run/0: $print:  state 
run/0: instruction run1001/31
run/0: $print/20 {name: "3", value: 3, type: 1, properties: ["3": "integer"]}
mem/0: location 3 is 50
run/0: $print: 50
run/0: instruction run1001/32
run/0: $print/20 {name: "
", value: 0, type: 0, properties: ["
": "literal-string"]}
run/0: $print: 
run/0: instruction run1001/33
run/0: {name: "waiting?", value: 1, type: 1, properties: ["waiting?": "integer"]} <- equal/13 {name: "3", value: 3, type: 1, properties: ["3": "integer", "routine-state": ]}, {name: "2", value: 2, type: 0, properties: ["2": "literal", "waiting": ]}
run/0: ingredient 0 is 3
mem/0: location 3 is 50
run/0: ingredient 1 is 2
run/0: product 0 is 0
mem/0: storing 0 in location 1
run/0: instruction run1001/34
run/0: assert/19 {name: "waiting?", value: 1, type: 1, properties: ["waiting?": "integer", "routine-state": ]}, {name: "
F read-move-blocking: routine failed to pause after file 'a2'", value: 0, type: 0, properties: ["
F read-move-blocking: routine failed to pause after file 'a2'": "literal-string"]}
run/0: ingredient 0 is waiting?
mem/0: location 1 is 0
run/0: instruction run1001/35
run/0: {name: "1", value: 1, type: 2-10, properties: ["1": "address":"channel"]} <- write/109 {name: "1", value: 1, type: 2-10, properties: ["1": "address":"channel"]}, {name: "45", value: 45, type: 0, properties: ["45": "literal"]}
mem/0: location 1 is 0
run/0: instruction write/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 1223
run/0: instruction write/1
run/0: {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 0
mem/0: storing 0 in location 1225
run/0: instruction write/2
run/0: {name: "val", value: 2, type: 1, properties: ["val": "location"]} <- next-ingredient/30 
run/0: product 0 is 45
mem/0: storing 45 in location 1226
run/0: instruction write/4
run/0: {name: "full", value: 3, type: 3, properties: ["full": "boolean"]} <- channel-full?/110 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]}
mem/0: location 1225 is 0
run/0: instruction channel-full?/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 1254
run/0: instruction channel-full?/1
run/0: {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 0
mem/0: storing 0 in location 1256
run/0: instruction channel-full?/2
run/0: {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-free", value: 1, type: 0, properties: ["first-free": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1256 is 0
run/0: ingredient 1 is first-free
run/0: address to copy is 1
run/0: its type is 1
mem/0: location 1 is 0
run/0: product 0 is 0
mem/0: storing 0 in location 1257
run/0: instruction channel-full?/3
run/0: {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]} <- add/2 {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run/0: ingredient 0 is tmp
mem/0: location 1257 is 0
run/0: ingredient 1 is 1
run/0: product 0 is 1
mem/0: storing 1 in location 1257
run/0: instruction channel-full?/5
run/0: {name: "len", value: 3, type: 1, properties: ["len": "integer"]} <- channel-capacity/113 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]}
mem/0: location 1256 is 0
run/0: instruction channel-capacity/0
run/0: {name: "default-space", value: 0, type: 2-5-1, properties: ["default-space": "address":"array":"location"]} <- new/45 {name: "location", value: 1, type: 0, properties: ["location": "type"]}, {name: "30", value: 30, type: 0, properties: ["30": "literal"]}
mem/0: array size is 30
mem/0: new alloc: 1285
run/0: instruction channel-capacity/1
run/0: {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel"]} <- next-ingredient/30 
run/0: product 0 is 0
mem/0: storing 0 in location 1287
run/0: instruction channel-capacity/2
run/0: {name: "q", value: 2, type: 2-5-1, properties: ["q": "address":"array":"location"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "data", value: 2, type: 0, properties: ["data": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1287 is 0
run/0: ingredient 1 is data
run/0: address to copy is 2
run/0: its type is 2
mem/0: location 2 is 0
run/0: product 0 is 0
mem/0: storing 0 in location 1288
run/0: instruction channel-capacity/3
run/0: {name: "result", value: 3, type: 1, properties: ["result": "integer"]} <- length/28 {name: "q", value: 2, type: 2-5-1, properties: ["q": "address":"array":"location", "deref": ]}
mem/0: location 1288 is 0
mem/0: storing 0 in location 1289
run/0: instruction channel-capacity/4
run/0: reply/33 {name: "result", value: 3, type: 1, properties: ["result": "integer"]}
mem/0: location 1289 is 0
run/0: result 0 is 0
mem/0: storing 0 in location 1258
run/0: instruction channel-full?/6
run/0: {name: "at-end?", value: 4, type: 3, properties: ["at-end?": "boolean"]} <- greater-or-equal/16 {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]}, {name: "len", value: 3, type: 1, properties: ["len": "integer"]}
run/0: ingredient 0 is tmp
mem/0: location 1257 is 1
run/0: ingredient 1 is len
mem/0: location 1258 is 0
run/0: product 0 is 1
mem/0: storing 1 in location 1259
run/0: instruction channel-full?/7
run/0: break-unless/12 {name: "at-end?", value: 4, type: 3, properties: ["at-end?": "boolean"]}, {name: "", value: 1, type: , properties: ["": ]}
mem/0: location 1259 is 1
run/0: ingredient 0 is 1
run/0: jump-unless fell through
run/0: instruction channel-full?/8
run/0: {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run/0: ingredient 0 is 0
mem/0: storing 0 in location 1257
run/0: instruction channel-full?/10
run/0: {name: "full", value: 5, type: 1, properties: ["full": "integer"]} <- get/24 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1256 is 0
run/0: ingredient 1 is first-full
run/0: address to copy is 0
run/0: its type is 1
mem/0: location 0 is 0
run/0: product 0 is 0
mem/0: storing 0 in location 1260
run/0: instruction channel-full?/11
run/0: {name: "result", value: 6, type: 3, properties: ["result": "boolean"]} <- equal/13 {name: "full", value: 5, type: 1, properties: ["full": "integer"]}, {name: "tmp", value: 2, type: 1, properties: ["tmp": "integer"]}
run/0: ingredient 0 is full
mem/0: location 1260 is 0
run/0: ingredient 1 is tmp
mem/0: location 1257 is 0
run/0: product 0 is 1
mem/0: storing 1 in location 1261
run/0: instruction channel-full?/12
run/0: reply/33 {name: "result", value: 6, type: 3, properties: ["result": "boolean"]}
mem/0: location 1261 is 1
run/0: result 0 is 1
mem/0: storing 1 in location 1227
run/0: instruction write/5
run/0: break-unless/12 {name: "full", value: 3, type: 3, properties: ["full": "boolean"]}, {name: "", value: 2, type: , properties: ["": ]}
mem/0: location 1227 is 1
run/0: ingredient 0 is 1
run/0: jump-unless fell through
run/0: instruction write/6
run/0: {name: "full-address", value: 4, type: 2-1, properties: ["full-address": "address":"integer"]} <- get-address/25 {name: "chan", value: 1, type: 2-10, properties: ["chan": "address":"channel", "deref": ]}, {name: "first-full", value: 0, type: 0, properties: ["first-full": "offset"]}
run/0: ingredient 0 is chan
mem/0: location 1225 is 0
run/0: ingredient 1 is first-full
run/0: address to copy is 0
run/0: product 0 is 0
mem/0: storing 0 in location 1228
run/0: instruction write/7
run/0: wait-for-location/37 {name: "full-address", value: 4, type: 2-1, properties: ["full-address": "address":"integer", "deref": ]}
mem/0: location 1228 is 0
run/0: waiting for location 0 to change from 0
schedule/0: 1: waiting for location 0 to change from 0
schedule/0: wake up loop 1: routine 1 has state 2
schedule/0: waiting on location: 0
schedule/0: wake up loop 1: routine 2 has state 2
schedule/0: waiting on location: 1032
schedule/0: checking routine 2 waiting on location 1032: 0 vs 0
