c{0: 0 (((2 integer)) <- ((next-input))) -- nil
c{1: 0 ✓ (((2 integer)) <- ((next-input)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal))) -- nil
c{0: 1 (((x integer)) <- ((copy)) ((4 literal))) -- nil
c{0: 2 (((fork)) ((f1 fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((x integer))) -- nil
c{0: 3 (((x integer)) <- ((copy)) ((0 literal))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal)))
c{1: 1 ✓ (((x integer)) <- ((copy)) ((4 literal)))
c{1: 2 ✓ (((fork)) ((f1 fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((x integer)))
c{1: 3 ✓ (((x integer)) <- ((copy)) ((0 literal)))
cn0: convert-names in f1
cn0: (((2 integer)) <- ((next-input))) nil nil
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: convert-names in main
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((5 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((x integer)) <- ((copy)) ((4 literal))) nil nil
cn0: checking arg ((4 literal))
cn0: checking oarg ((x integer))
maybe-add: ((x integer))
cn0: location for oarg ((x integer)): 1
cn0: (((fork)) ((f1 fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((x integer))) ((x 1)) nil
cn0: checking arg ((f1 fn))
cn0: checking arg ((nil literal) (globals))
cn0: checking arg ((nil literal) (limit))
cn0: checking arg ((x integer))
maybe-add: ((x integer))
cn0: (((x integer)) <- ((copy)) ((0 literal))) ((x 1)) nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((x integer))
maybe-add: ((x integer))
cn1: (((2 integer)) <- ((next-input)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal)))
cn1: (((1 integer)) <- ((copy)) ((4 literal)))
cn1: (((fork)) ((f1 fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((1 integer)))
cn1: (((1 integer)) <- ((copy)) ((0 literal)))
schedule: main
run: main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal)))
run: main 0: 1000 => ((default-space space-address))
run: main 1: (((1 integer)) <- ((copy)) ((4 literal)))
run: main 1: 4 => ((1 integer))
mem: ((1 integer)): 1002 <= 4
run: main 2: (((fork)) ((f1 fn)) ((nil literal) (globals)) ((nil literal) (limit)) ((1 integer)))
mem: ((1 integer)) => 4
run: main 3: (((1 integer)) <- ((copy)) ((0 literal)))
run: main 3: 0 => ((1 integer))
mem: ((1 integer)): 1002 <= 0
schedule: done with routine nil
schedule: f1
run: f1 0: (((2 integer)) <- ((next-input)))
arg: nil 0 (4)
run: f1 0: 4 => ((2 integer))
mem: ((2 integer)): 2 <= 4
schedule: done with routine nil
