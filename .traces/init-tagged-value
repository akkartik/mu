schedule: main
run: 1 main 0: (((1 integer)) <- ((copy)) ((34 literal)))
run: 34 => ((1 integer))
setm: ((1 integer)) <= 34
setm: size of ((1 integer)) is 1
setm: ((1 integer)): setting 1 to 34
run: 2 main 1: (((2 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((1 integer)))
m: ((1 integer))
sizeof: ((1 integer))
run: 3 init-tagged-value 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
sizeof: ((_ location))
run: 1000 => ((default-space space-address))
sizeof: ((default-space space-address))
run: 4 init-tagged-value 1: (((1 type)) <- ((next-input)))
arg: nil 0 (integer 34)
run: integer => ((1 type))
setm: ((1 type)) <= integer
setm: size of ((1 type)) is 1
setm: ((1 type)): setting 1002 to integer
run: 5 init-tagged-value 2: (((2 integer)) <- ((sizeof)) ((1 type)))
m: ((1 type))
sizeof: ((1 type))
sizeof: ((_ integer))
run: 1 => ((2 integer))
setm: ((2 integer)) <= 1
setm: size of ((2 integer)) is 1
setm: ((2 integer)): setting 1003 to 1
run: 6 init-tagged-value 3: (((3 boolean)) <- ((equal)) ((2 integer)) ((1 literal)))
m: ((2 integer))
sizeof: ((2 integer))
run: t => ((3 boolean))
setm: ((3 boolean)) <= t
setm: size of ((3 boolean)) is 1
setm: ((3 boolean)): setting 1004 to t
run: 7 init-tagged-value 4: (((assert)) ((3 boolean)))
m: ((3 boolean))
sizeof: ((3 boolean))
run: 8 init-tagged-value 5: (((4 tagged-value-address)) <- ((new)) ((tagged-value literal)))
sizeof: ((_ tagged-value))
sizeof: ((_ type))
sizeof: ((_ location))
run: 1031 => ((4 tagged-value-address))
setm: ((4 tagged-value-address)) <= 1031
setm: size of ((4 tagged-value-address)) is 1
setm: ((4 tagged-value-address)): setting 1005 to 1031
run: 9 init-tagged-value 6: (((5 location)) <- ((get-address)) ((4 tagged-value-address) (deref)) ((0 offset)))
run: 1031 => ((5 location))
setm: ((5 location)) <= 1031
setm: size of ((5 location)) is 1
setm: ((5 location)): setting 1006 to 1031
run: 10 init-tagged-value 7: (((5 location) (deref)) <- ((copy)) ((1 type)))
m: ((1 type))
sizeof: ((1 type))
run: integer => ((5 location) (deref))
setm: ((5 location) (deref)) <= integer
setm: size of ((5 location) (deref)) is 1
setm: ((5 location) (deref)): setting 1031 to integer
run: 11 init-tagged-value 8: (((6 location)) <- ((get-address)) ((4 tagged-value-address) (deref)) ((1 offset)))
sizeof: ((_ type))
run: 1032 => ((6 location))
setm: ((6 location)) <= 1032
setm: size of ((6 location)) is 1
setm: ((6 location)): setting 1007 to 1032
run: 12 init-tagged-value 9: (((6 location) (deref)) <- ((next-input)))
arg: nil 1 (integer 34)
run: 34 => ((6 location) (deref))
setm: ((6 location) (deref)) <= 34
setm: size of ((6 location) (deref)) is 1
setm: ((6 location) (deref)): setting 1032 to 34
run: 13 init-tagged-value 10: (((reply)) ((4 tagged-value-address)))
m: ((4 tagged-value-address))
sizeof: ((4 tagged-value-address))
reply: (((4 tagged-value-address))) (((2 tagged-value-address)))
reply: 1031 => ((2 tagged-value-address))
setm: ((2 tagged-value-address)) <= 1031
setm: size of ((2 tagged-value-address)) is 1
setm: ((2 tagged-value-address)): setting 2 to 1031
run: 14 main 2: (((3 integer)) ((4 boolean)) <- ((maybe-coerce)) ((2 tagged-value-address) (deref)) ((integer literal)))
m: ((2 tagged-value-address) (deref))
sizeof: ((2 tagged-value-address) (deref))
sizeof: ((_ type))
sizeof: ((_ location))
run: 15 maybe-coerce 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
sizeof: ((_ location))
run: 1033 => ((default-space space-address))
sizeof: ((default-space space-address))
run: 16 maybe-coerce 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
sizeof: ((_ tagged-value))
sizeof: ((_ type))
sizeof: ((_ location))
run: 1064 => ((1 tagged-value-address))
setm: ((1 tagged-value-address)) <= 1064
setm: size of ((1 tagged-value-address)) is 1
setm: ((1 tagged-value-address)): setting 1035 to 1064
run: 17 maybe-coerce 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (integer 34 . nil)) integer)
run: #(tagged record (integer 34 . nil)) => ((1 tagged-value-address) (deref))
setm: ((1 tagged-value-address) (deref)) <= #(tagged record (integer 34 . nil))
setm: size of ((1 tagged-value-address) (deref)) is 2
sizeof: ((1 tagged-value-address) (deref))
sizeof: ((_ type))
sizeof: ((_ location))
setm: ((1 tagged-value-address) (deref)): setting 1064 to integer
setm: ((1 tagged-value-address) (deref)): setting 1065 to 34
run: 18 maybe-coerce 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (integer 34 . nil)) integer)
run: integer => ((2 type))
setm: ((2 type)) <= integer
setm: size of ((2 type)) is 1
setm: ((2 type)): setting 1036 to integer
run: 19 maybe-coerce 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
m: ((1064 type) (raw))
sizeof: ((1064 type) (raw))
run: integer => ((3 type))
setm: ((3 type)) <= integer
setm: size of ((3 type)) is 1
setm: ((3 type)): setting 1037 to integer
run: 20 maybe-coerce 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
m: ((3 type))
sizeof: ((3 type))
m: ((2 type))
sizeof: ((2 type))
run: t => ((4 boolean))
setm: ((4 boolean)) <= t
setm: size of ((4 boolean)) is 1
setm: ((4 boolean)): setting 1038 to t
run: 21 maybe-coerce 6: (((jump-if)) ((4 boolean)) ((1 offset)))
m: ((4 boolean))
sizeof: ((4 boolean))
run: 22 maybe-coerce 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
sizeof: ((_ type))
m: ((1065 location) (raw))
sizeof: ((1065 location) (raw))
run: 34 => ((5 location))
setm: ((5 location)) <= 34
setm: size of ((5 location)) is 1
setm: ((5 location)): setting 1039 to 34
run: 23 maybe-coerce 9: (((reply)) ((5 location)) ((4 boolean)))
m: ((5 location))
sizeof: ((5 location))
m: ((4 boolean))
sizeof: ((4 boolean))
reply: (((5 location)) ((4 boolean))) (((3 integer)) ((4 boolean)))
reply: 34 => ((3 integer))
setm: ((3 integer)) <= 34
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 34
reply: t => ((4 boolean))
setm: ((4 boolean)) <= t
setm: size of ((4 boolean)) is 1
setm: ((4 boolean)): setting 4 to t
schedule: done with routine 
