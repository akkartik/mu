parse: instruction: copy
parse:   ingredient: {name: "5", value: 0, type: 0, properties: ["5": "literal"]}
parse:   product: {name: "1", value: 0, type: 1, properties: ["1": "number"]}
parse: instruction: copy
parse:   ingredient: {name: "1", value: 0, type: 0, properties: ["1": "literal"]}
parse:   product: {name: "2", value: 0, type: 1, properties: ["2": "number"]}
parse: label: {
parse: instruction: equal
parse:   ingredient: {name: "1", value: 0, type: 1, properties: ["1": "number"]}
parse:   ingredient: {name: "1", value: 0, type: 0, properties: ["1": "literal"]}
parse:   product: {name: "3", value: 0, type: 3, properties: ["3": "boolean"]}
parse: instruction: break-if
parse:   ingredient: {name: "3", value: 0, type: 3, properties: ["3": "boolean"]}
parse: instruction: multiply
parse:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "number"]}
parse:   ingredient: {name: "1", value: 0, type: 1, properties: ["1": "number"]}
parse:   product: {name: "2", value: 0, type: 1, properties: ["2": "number"]}
parse: instruction: subtract
parse:   ingredient: {name: "1", value: 0, type: 1, properties: ["1": "number"]}
parse:   ingredient: {name: "1", value: 0, type: 0, properties: ["1": "literal"]}
parse:   product: {name: "1", value: 0, type: 1, properties: ["1": "number"]}
parse: instruction: loop
parse: label: }
parse: instruction: copy
parse:   ingredient: {name: "2", value: 0, type: 1, properties: ["2": "number"]}
parse:   product: {name: "4", value: 0, type: 1, properties: ["4": "number"]}
brace: 1000: push (open, 2)
brace: push (close, 8)
after-brace: recipe test-factorial
after-brace: copy ...
after-brace: copy ...
after-brace: equal ...
after-brace: jump-if 3, 3:offset
after-brace: multiply ...
after-brace: subtract ...
after-brace: jump -5:offset
after-brace: 7: {name: "", value: -5, type: 0, properties: ["": ]}
after-brace: 7: {name: "", value: -5, type: 0, properties: ["": ]}
after-brace: copy ...
new: routine allocated memory from 1000 to 101000
schedule: test-factorial
run: instruction test-factorial/0
run: {name: "1", value: 1, type: 1, properties: ["1": "number"]} <- copy/1 {name: "5", value: 5, type: 0, properties: ["5": "literal"]}
run: ingredient 0 is 5
run: product 0 is 1
mem: storing 5 in location 1
run: instruction test-factorial/1
run: {name: "2", value: 2, type: 1, properties: ["2": "number"]} <- copy/1 {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is 1
run: product 0 is 2
mem: storing 1 in location 2
run: instruction test-factorial/3
run: {name: "3", value: 3, type: 3, properties: ["3": "boolean"]} <- equal/13 {name: "1", value: 1, type: 1, properties: ["1": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is 1
mem: location 1 is 5
run: ingredient 1 is 1
run: product 0 is 3
mem: storing 0 in location 3
run: instruction test-factorial/4
run: break-if/11 {name: "3", value: 3, type: 3, properties: ["3": "boolean"]}, {name: "", value: 3, type: 0, properties: ["": ]}
run: ingredient 0 is 3
mem: location 3 is 0
run: ingredient 1 is 
run: jump-if fell through
run: instruction test-factorial/5
run: {name: "2", value: 2, type: 1, properties: ["2": "number"]} <- multiply/4 {name: "2", value: 2, type: 1, properties: ["2": "number"]}, {name: "1", value: 1, type: 1, properties: ["1": "number"]}
run: ingredient 0 is 2
mem: location 2 is 1
run: ingredient 1 is 1
mem: location 1 is 5
run: product 0 is 2
mem: storing 5 in location 2
run: instruction test-factorial/6
run: {name: "1", value: 1, type: 1, properties: ["1": "number"]} <- subtract/3 {name: "1", value: 1, type: 1, properties: ["1": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is 1
mem: location 1 is 5
run: ingredient 1 is 1
run: product 0 is 1
mem: storing 4 in location 1
run: instruction test-factorial/7
run: loop/10 {name: "", value: -5, type: 0, properties: ["": ]}
run: ingredient 0 is 
run: jumping to instruction 3
run: instruction test-factorial/3
run: {name: "3", value: 3, type: 3, properties: ["3": "boolean"]} <- equal/13 {name: "1", value: 1, type: 1, properties: ["1": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is 1
mem: location 1 is 4
run: ingredient 1 is 1
run: product 0 is 3
mem: storing 0 in location 3
run: instruction test-factorial/4
run: break-if/11 {name: "3", value: 3, type: 3, properties: ["3": "boolean"]}, {name: "", value: 3, type: 0, properties: ["": ]}
run: ingredient 0 is 3
mem: location 3 is 0
run: ingredient 1 is 
run: jump-if fell through
run: instruction test-factorial/5
run: {name: "2", value: 2, type: 1, properties: ["2": "number"]} <- multiply/4 {name: "2", value: 2, type: 1, properties: ["2": "number"]}, {name: "1", value: 1, type: 1, properties: ["1": "number"]}
run: ingredient 0 is 2
mem: location 2 is 5
run: ingredient 1 is 1
mem: location 1 is 4
run: product 0 is 2
mem: storing 20 in location 2
run: instruction test-factorial/6
run: {name: "1", value: 1, type: 1, properties: ["1": "number"]} <- subtract/3 {name: "1", value: 1, type: 1, properties: ["1": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is 1
mem: location 1 is 4
run: ingredient 1 is 1
run: product 0 is 1
mem: storing 3 in location 1
run: instruction test-factorial/7
run: loop/10 {name: "", value: -5, type: 0, properties: ["": ]}
run: ingredient 0 is 
run: jumping to instruction 3
run: instruction test-factorial/3
run: {name: "3", value: 3, type: 3, properties: ["3": "boolean"]} <- equal/13 {name: "1", value: 1, type: 1, properties: ["1": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is 1
mem: location 1 is 3
run: ingredient 1 is 1
run: product 0 is 3
mem: storing 0 in location 3
run: instruction test-factorial/4
run: break-if/11 {name: "3", value: 3, type: 3, properties: ["3": "boolean"]}, {name: "", value: 3, type: 0, properties: ["": ]}
run: ingredient 0 is 3
mem: location 3 is 0
run: ingredient 1 is 
run: jump-if fell through
run: instruction test-factorial/5
run: {name: "2", value: 2, type: 1, properties: ["2": "number"]} <- multiply/4 {name: "2", value: 2, type: 1, properties: ["2": "number"]}, {name: "1", value: 1, type: 1, properties: ["1": "number"]}
run: ingredient 0 is 2
mem: location 2 is 20
run: ingredient 1 is 1
mem: location 1 is 3
run: product 0 is 2
mem: storing 60 in location 2
run: instruction test-factorial/6
run: {name: "1", value: 1, type: 1, properties: ["1": "number"]} <- subtract/3 {name: "1", value: 1, type: 1, properties: ["1": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is 1
mem: location 1 is 3
run: ingredient 1 is 1
run: product 0 is 1
mem: storing 2 in location 1
run: instruction test-factorial/7
run: loop/10 {name: "", value: -5, type: 0, properties: ["": ]}
run: ingredient 0 is 
run: jumping to instruction 3
run: instruction test-factorial/3
run: {name: "3", value: 3, type: 3, properties: ["3": "boolean"]} <- equal/13 {name: "1", value: 1, type: 1, properties: ["1": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is 1
mem: location 1 is 2
run: ingredient 1 is 1
run: product 0 is 3
mem: storing 0 in location 3
run: instruction test-factorial/4
run: break-if/11 {name: "3", value: 3, type: 3, properties: ["3": "boolean"]}, {name: "", value: 3, type: 0, properties: ["": ]}
run: ingredient 0 is 3
mem: location 3 is 0
run: ingredient 1 is 
run: jump-if fell through
run: instruction test-factorial/5
run: {name: "2", value: 2, type: 1, properties: ["2": "number"]} <- multiply/4 {name: "2", value: 2, type: 1, properties: ["2": "number"]}, {name: "1", value: 1, type: 1, properties: ["1": "number"]}
run: ingredient 0 is 2
mem: location 2 is 60
run: ingredient 1 is 1
mem: location 1 is 2
run: product 0 is 2
mem: storing 120 in location 2
run: instruction test-factorial/6
run: {name: "1", value: 1, type: 1, properties: ["1": "number"]} <- subtract/3 {name: "1", value: 1, type: 1, properties: ["1": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is 1
mem: location 1 is 2
run: ingredient 1 is 1
run: product 0 is 1
mem: storing 1 in location 1
run: instruction test-factorial/7
run: loop/10 {name: "", value: -5, type: 0, properties: ["": ]}
run: ingredient 0 is 
run: jumping to instruction 3
run: instruction test-factorial/3
run: {name: "3", value: 3, type: 3, properties: ["3": "boolean"]} <- equal/13 {name: "1", value: 1, type: 1, properties: ["1": "number"]}, {name: "1", value: 1, type: 0, properties: ["1": "literal"]}
run: ingredient 0 is 1
mem: location 1 is 1
run: ingredient 1 is 1
run: product 0 is 3
mem: storing 1 in location 3
run: instruction test-factorial/4
run: break-if/11 {name: "3", value: 3, type: 3, properties: ["3": "boolean"]}, {name: "", value: 3, type: 0, properties: ["": ]}
run: ingredient 0 is 3
mem: location 3 is 1
run: ingredient 1 is 
run: jumping to instruction 8
run: instruction test-factorial/9
run: {name: "4", value: 4, type: 1, properties: ["4": "number"]} <- copy/1 {name: "2", value: 2, type: 1, properties: ["2": "number"]}
run: ingredient 0 is 2
mem: location 2 is 120
run: product 0 is 4
mem: storing 120 in location 4
