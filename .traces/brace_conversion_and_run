9991 parse: --- defining test-factorial
9993 parse: instruction: copy
9993 parse:   ingredient: {"5": "literal"}
9993 parse:   product: {"1": "number"}
9992 load: after rewriting: 1:number <- copy 5
9993 parse: instruction: copy
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- copy 1
9993 parse: label: {
9992 load: after rewriting: {
9993 parse: instruction: equal
9993 parse:   ingredient: {"1": "number"}
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   product: {"3": "boolean"}
9992 load: after rewriting: 3:boolean <- equal 1:number, 1
9993 parse: instruction: break-if
9993 parse:   ingredient: {"3": "boolean"}
9992 load: after rewriting: break-if 3:boolean
9993 parse: instruction: multiply
9993 parse:   ingredient: {"2": "number"}
9993 parse:   ingredient: {"1": "number"}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- multiply 2:number, 1:number
9993 parse: instruction: subtract
9993 parse:   ingredient: {"1": "number"}
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   product: {"1": "number"}
9992 load: after rewriting: 1:number <- subtract 1:number, 1
9993 parse: instruction: loop
9992 load: after rewriting: loop 
9993 parse: label: }
9992 load: after rewriting: }
9993 parse: instruction: copy
9993 parse:   ingredient: {"2": "number"}
9993 parse:   product: {"4": "number"}
9992 load: after rewriting: 4:number <- copy 2:number
9990 transform: === transform_all()
9991 transform: --- collect surrounding spaces for recipe test-factorial
9991 transform: --- transform names for recipe test-factorial
9991 transform: --- transform braces for recipe test-factorial
9993 transform: test-factorial: push (open, 2)
9993 transform: push (close, 8)
9991 transform: copy ...
9991 transform: copy ...
9991 transform: equal ...
9991 transform: jump-if 3, 3:offset
9991 transform: multiply ...
9991 transform: subtract ...
9991 transform: jump -5:offset
9991 transform: copy ...
9991 transform: --- compute instruction operations for recipe test-factorial
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: test-factorial
 102 run: 1:number <- copy 5
9999 mem: storing 5 in location 1
 102 run: 2:number <- copy 1
9999 mem: storing 1 in location 2
 102 run: 3:boolean <- equal 1:number, 1
9999 mem: location 1 is 5
9999 mem: storing 0 in location 3
 102 run: jump-if 3:boolean, 
9999 mem: location 3 is 0
9998 run: jump-if fell through
 102 run: 2:number <- multiply 2:number, 1:number
9999 mem: location 2 is 1
9999 mem: location 1 is 5
9999 mem: storing 5 in location 2
 102 run: 1:number <- subtract 1:number, 1
9999 mem: location 1 is 5
9999 mem: storing 4 in location 1
 102 run: jump 
9998 run: jumping to instruction 3
 102 run: 3:boolean <- equal 1:number, 1
9999 mem: location 1 is 4
9999 mem: storing 0 in location 3
 102 run: jump-if 3:boolean, 
9999 mem: location 3 is 0
9998 run: jump-if fell through
 102 run: 2:number <- multiply 2:number, 1:number
9999 mem: location 2 is 5
9999 mem: location 1 is 4
9999 mem: storing 20 in location 2
 102 run: 1:number <- subtract 1:number, 1
9999 mem: location 1 is 4
9999 mem: storing 3 in location 1
 102 run: jump 
9998 run: jumping to instruction 3
 102 run: 3:boolean <- equal 1:number, 1
9999 mem: location 1 is 3
9999 mem: storing 0 in location 3
 102 run: jump-if 3:boolean, 
9999 mem: location 3 is 0
9998 run: jump-if fell through
 102 run: 2:number <- multiply 2:number, 1:number
9999 mem: location 2 is 20
9999 mem: location 1 is 3
9999 mem: storing 60 in location 2
 102 run: 1:number <- subtract 1:number, 1
9999 mem: location 1 is 3
9999 mem: storing 2 in location 1
 102 run: jump 
9998 run: jumping to instruction 3
 102 run: 3:boolean <- equal 1:number, 1
9999 mem: location 1 is 2
9999 mem: storing 0 in location 3
 102 run: jump-if 3:boolean, 
9999 mem: location 3 is 0
9998 run: jump-if fell through
 102 run: 2:number <- multiply 2:number, 1:number
9999 mem: location 2 is 60
9999 mem: location 1 is 2
9999 mem: storing 120 in location 2
 102 run: 1:number <- subtract 1:number, 1
9999 mem: location 1 is 2
9999 mem: storing 1 in location 1
 102 run: jump 
9998 run: jumping to instruction 3
 102 run: 3:boolean <- equal 1:number, 1
9999 mem: location 1 is 1
9999 mem: storing 1 in location 3
 102 run: jump-if 3:boolean, 
9999 mem: location 3 is 1
9998 run: jumping to instruction 8
 102 run: 4:number <- copy 2:number
9999 mem: location 2 is 120
9999 mem: storing 120 in location 4
9999 trace: fall-through: exiting test-factorial; decrementing callstack depth from 1
