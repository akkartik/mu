parse: instruction: copy
parse:   ingredient: {name: "5", properties: ["5": "literal"]}
parse:   product: {name: "1", properties: ["1": "number"]}
parse: instruction: copy
parse:   ingredient: {name: "1", properties: ["1": "literal"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: label: {
parse: instruction: equal
parse:   ingredient: {name: "1", properties: ["1": "number"]}
parse:   ingredient: {name: "1", properties: ["1": "literal"]}
parse:   product: {name: "3", properties: ["3": "boolean"]}
parse: instruction: break-if
parse:   ingredient: {name: "3", properties: ["3": "boolean"]}
parse: instruction: multiply
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse:   ingredient: {name: "1", properties: ["1": "number"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: instruction: subtract
parse:   ingredient: {name: "1", properties: ["1": "number"]}
parse:   ingredient: {name: "1", properties: ["1": "literal"]}
parse:   product: {name: "1", properties: ["1": "number"]}
parse: instruction: loop
parse: label: }
parse: instruction: copy
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse:   product: {name: "4", properties: ["4": "number"]}
brace: 1000: push (open, 2)
brace: push (close, 8)
after-brace: recipe test-factorial
after-brace: copy ...
after-brace: copy ...
after-brace: equal ...
after-brace: jump-if 3, 3:offset
after-brace: multiply ...
after-brace: subtract ...
after-brace: jump -5:offset
after-brace: 7: {name: "", properties: ["": ]}
after-brace: 7: {name: "", properties: ["": ]}
after-brace: copy ...
new: routine allocated memory from 1000 to 101000
schedule: test-factorial
run: 1:number <- copy 5:literal
mem: storing 5 in location 1
run: 2:number <- copy 1:literal
mem: storing 1 in location 2
run: 3:boolean <- equal 1:number, 1:literal
mem: location 1 is 5
mem: storing 0 in location 3
run: break-if 3:boolean, 
mem: location 3 is 0
run: jump-if fell through
run: 2:number <- multiply 2:number, 1:number
mem: location 2 is 1
mem: location 1 is 5
mem: storing 5 in location 2
run: 1:number <- subtract 1:number, 1:literal
mem: location 1 is 5
mem: storing 4 in location 1
run: loop 
run: jumping to instruction 3
run: 3:boolean <- equal 1:number, 1:literal
mem: location 1 is 4
mem: storing 0 in location 3
run: break-if 3:boolean, 
mem: location 3 is 0
run: jump-if fell through
run: 2:number <- multiply 2:number, 1:number
mem: location 2 is 5
mem: location 1 is 4
mem: storing 20 in location 2
run: 1:number <- subtract 1:number, 1:literal
mem: location 1 is 4
mem: storing 3 in location 1
run: loop 
run: jumping to instruction 3
run: 3:boolean <- equal 1:number, 1:literal
mem: location 1 is 3
mem: storing 0 in location 3
run: break-if 3:boolean, 
mem: location 3 is 0
run: jump-if fell through
run: 2:number <- multiply 2:number, 1:number
mem: location 2 is 20
mem: location 1 is 3
mem: storing 60 in location 2
run: 1:number <- subtract 1:number, 1:literal
mem: location 1 is 3
mem: storing 2 in location 1
run: loop 
run: jumping to instruction 3
run: 3:boolean <- equal 1:number, 1:literal
mem: location 1 is 2
mem: storing 0 in location 3
run: break-if 3:boolean, 
mem: location 3 is 0
run: jump-if fell through
run: 2:number <- multiply 2:number, 1:number
mem: location 2 is 60
mem: location 1 is 2
mem: storing 120 in location 2
run: 1:number <- subtract 1:number, 1:literal
mem: location 1 is 2
mem: storing 1 in location 1
run: loop 
run: jumping to instruction 3
run: 3:boolean <- equal 1:number, 1:literal
mem: location 1 is 1
mem: storing 1 in location 3
run: break-if 3:boolean, 
mem: location 3 is 1
run: jumping to instruction 8
run: 4:number <- copy 2:number
mem: location 2 is 120
mem: storing 120 in location 4
