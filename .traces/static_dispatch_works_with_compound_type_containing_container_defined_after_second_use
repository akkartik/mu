9991 parse: --- defining main
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"foo": "type"}
9993 parse:   product: {"x": <"address" : <"shared" : <"foo" : <>>>>}
9992 load: after rewriting: x:address:shared:foo <- new foo:type
9993 parse: instruction: test
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"x": <>}
9992 load: after rewriting: test x
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:address:shared:foo
9999 parse: header product: z:number
9991 parse: --- defining test
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"a": <>, "lookup": <>}
9993 parse:   ingredient: {"x": "offset"}
9993 parse:   product: {"z": "number"}
9992 load: after rewriting: z:number <- get *a, x:offset
9999 parse: recipe test has a header
9991 parse: --- defining container foo
9999 parse: type number: 1000
9993 parse:   element name: x
9993 parse:   type: 1
9990 transform: === transform_all()
9991 transform: --- checking reply instructions against header for test
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe test
9991 transform: --- deduce types for recipe main
9992 transform: x => <address : <shared : <?-1 : <>>>>
9992 transform: x <= <address : <shared : <?-1 : <>>>>
9991 transform: --- deduce types for recipe test
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: a => <address : <shared : <?-1 : <>>>>
9992 transform: a <= <address : <shared : <?-1 : <>>>>
9992 transform: z => number
9991 transform: --- deduce types from header for test
9993 transform: type of a is <address : <shared : <?-1 : <>>>>
9993 transform: type of z is number
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: a:address:shared:foo <- next-ingredient-without-typechecking 
9993 transform:   product: a: <address : <shared : <?-1 : <>>>> -- {"a": <"address" : <"shared" : <"foo" : <>>>>}
9992 transform: instruction: z:number <- get *a, x:offset
9993 transform:   product: z: number -- {"z": "number"}
9992 transform: instruction: reply z:number
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe test
9991 transform: --- transform names for recipe main
9993 name: assign x 1
9991 transform: --- transform names for recipe test
9993 name: assign a 1
9993 name: element x of type foo is at offset 0
9993 name: assign z 2
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction test
9993 transform: strict match: ingredient 0
9992 transform: score for base: 999
9993 transform: strict match: ingredient 0
9992 transform: score for variant 8: 999
9991 transform: --- resolve ambiguous calls for recipe test
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe test
9991 transform: --- transform braces for recipe main
9992 transform: new ...
9992 transform: test ...
9992 transform:  ...
9991 transform: --- transform braces for recipe test
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe test
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe test
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe test
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "foo" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe test
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for test
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: x:address:shared:foo <- new foo:type
9999 mem: allocating size 2
9999 mem: new alloc: 1000
9999 mem: storing 1000 in location 1
9999 mem: incrementing refcount of 1000: 0 -> 1
 102 run: test x
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1002
9999 mem: storing 3 in location 1003
 103 run: a:address:shared:foo <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1005
9999 mem: incrementing refcount of 1000: 1 -> 2
 103 run: z:number <- get *a, x:offset
9999 mem: location 1005 is 1000
9999 mem: skipping refcount at 1000
9999 mem: location 1001 is 0
9999 mem: location 1005 is 1000
9999 mem: skipping refcount at 1000
9998 run: address to copy is 1001
9998 run: its type is number
9999 mem: location 1001 is 0
9999 mem: storing 0 in location 1006
 103 run: reply z:number
9999 mem: location 1006 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
