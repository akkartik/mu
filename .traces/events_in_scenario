parse: instruction: assume-console
parse:   ingredient: {name: "\n    type [abc]\n    left-click 0, 1\n    press 65515  # up arrow\n    type [d]\n  ", properties: [_: "literal-string"]}
parse: instruction: run
parse:   ingredient: {name: "\n    # 3 keyboard events; each event occupies 4 locations\n#?     $start-tracing #? 2\n    1:event <- read-event console:address\n    5:event <- read-event console:address\n    9:event <- read-event console:address\n    # mouse click\n    13:event <- read-event console:address\n    # non-character keycode\n    17:event <- read-event console:address\n    # final keyboard event\n    21:event <- read-event console:address\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    1 <- 0  # 'text'\n    2 <- 97  # 'a'\n    3 <- 0  # unused\n    4 <- 0  # unused\n    5 <- 0  # 'text'\n    6 <- 98  # 'b'\n    7 <- 0  # unused\n    8 <- 0  # unused\n    9 <- 0  # 'text'\n    10 <- 99  # 'c'\n    11 <- 0  # unused\n    12 <- 0  # unused\n    13 <- 2  # 'mouse'\n    14 <- 65513  # mouse click\n    15 <- 0  # row\n    16 <- 1  # column\n    17 <- 1  # 'keycode'\n    18 <- 65515  # up arrow\n    19 <- 0  # unused\n    20 <- 0  # unused\n    21 <- 0  # 'text'\n    22 <- 100  # 'd'\n    23 <- 0  # unused\n    24 <- 0  # unused\n    25 <- 0\n  ", properties: [_: "literal-string"]}
after-brace: recipe events-in-scenario
after-brace: assume-console ...
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: events-in-scenario
 101 run: assume-console [
    type [abc]
    left-click 0, 1
    press 65515  # up arrow
    type [d]
  ]
parse: instruction: type
parse:   ingredient: {name: "abc", properties: [_: "literal-string"]}
parse: instruction: left-click
parse:   ingredient: {name: "0", properties: ["0": ]}
parse:   ingredient: {name: "1", properties: ["1": ]}
parse: instruction: press
parse:   ingredient: {name: "65515", properties: ["65515": ]}
parse: instruction: type
parse:   ingredient: {name: "d", properties: [_: "literal-string"]}
 101 run: run [
    # 3 keyboard events; each event occupies 4 locations
#?     $start-tracing #? 2
    1:event <- read-event console:address
    5:event <- read-event console:address
    9:event <- read-event console:address
    # mouse click
    13:event <- read-event console:address
    # non-character keycode
    17:event <- read-event console:address
    # final keyboard event
    21:event <- read-event console:address
  ]
parse: instruction: read-event
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "1", properties: ["1": "event"]}
parse: instruction: read-event
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "5", properties: ["5": "event"]}
parse: instruction: read-event
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "9", properties: ["9": "event"]}
parse: instruction: read-event
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "13", properties: ["13": "event"]}
parse: instruction: read-event
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "17", properties: ["17": "event"]}
parse: instruction: read-event
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "21", properties: ["21": "event"]}
after-brace: recipe run1003
after-brace: read-event ...
after-brace: read-event ...
after-brace: read-event ...
after-brace: read-event ...
after-brace: read-event ...
after-brace: read-event ...
 101 run: 1:event <- read-event console:address
9999 mem: location 901 is 1025
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1027
 102 run: x:address:console <- next-ingredient 
9999 mem: storing 1025 in location 1029
 102 run: break-unless x:address:console, 
9999 mem: location 1029 is 1025
9999 run: jump-unless fell through
 102 run: idx:address:number <- get-address x:address:console/deref, index:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1030
 102 run: buf:address:array:event <- get x:address:console/deref, data:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1000
9999 mem: storing 1000 in location 1031
 102 run: max:number <- length buf:address:array:event/deref
9999 mem: location 1031 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1031 is 1000
9999 mem: storing 6 in location 1032
 102 run: done?:boolean <- greater-or-equal idx:address:number/deref, max:number
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1032 is 6
9999 mem: storing 0 in location 1033
 102 run: break-unless done?:boolean, 
9999 mem: location 1033 is 0
9999 run: jumping to instruction 12
 102 run: result:event <- index buf:address:array:event/deref, idx:address:number/deref
9999 mem: location 1031 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1031 is 1000
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 0
9999 run: address to copy is 1001
9999 run: its type is event
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1035
9999 mem: storing 97 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
 102 run: idx:address:number/deref <- add idx:address:number/deref, 1:literal
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1030 is 1025
9999 mem: storing 1 in location 1025
 102 run: reply result:event, x:address:console/same-as-ingredient:0, 1:literal/found, 0:literal/quit
9999 mem: location 1035 is 0
9999 mem: location 1036 is 97
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1029 is 1025
9999 run: result 0 is [0, 97, 0, 0]
9999 mem: storing 0 in location 1
9999 mem: storing 97 in location 2
9999 mem: storing 0 in location 3
9999 mem: storing 0 in location 4
 101 run: 5:event <- read-event console:address
9999 mem: location 901 is 1025
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1058
 102 run: x:address:console <- next-ingredient 
9999 mem: storing 1025 in location 1060
 102 run: break-unless x:address:console, 
9999 mem: location 1060 is 1025
9999 run: jump-unless fell through
 102 run: idx:address:number <- get-address x:address:console/deref, index:offset
9999 mem: location 1060 is 1025
9999 mem: location 1025 is 1
9999 mem: location 1026 is 1000
9999 mem: location 1060 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1061
 102 run: buf:address:array:event <- get x:address:console/deref, data:offset
9999 mem: location 1060 is 1025
9999 mem: location 1025 is 1
9999 mem: location 1026 is 1000
9999 mem: location 1060 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1000
9999 mem: storing 1000 in location 1062
 102 run: max:number <- length buf:address:array:event/deref
9999 mem: location 1062 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1062 is 1000
9999 mem: storing 6 in location 1063
 102 run: done?:boolean <- greater-or-equal idx:address:number/deref, max:number
9999 mem: location 1061 is 1025
9999 mem: location 1025 is 1
9999 mem: location 1063 is 6
9999 mem: storing 0 in location 1064
 102 run: break-unless done?:boolean, 
9999 mem: location 1064 is 0
9999 run: jumping to instruction 12
 102 run: result:event <- index buf:address:array:event/deref, idx:address:number/deref
9999 mem: location 1062 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1061 is 1025
9999 mem: location 1025 is 1
9999 mem: location 1062 is 1000
9999 mem: location 1061 is 1025
9999 mem: location 1025 is 1
9999 run: address to copy is 1005
9999 run: its type is event
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1066
9999 mem: storing 98 in location 1067
9999 mem: storing 0 in location 1068
9999 mem: storing 0 in location 1069
 102 run: idx:address:number/deref <- add idx:address:number/deref, 1:literal
9999 mem: location 1061 is 1025
9999 mem: location 1025 is 1
9999 mem: location 1061 is 1025
9999 mem: storing 2 in location 1025
 102 run: reply result:event, x:address:console/same-as-ingredient:0, 1:literal/found, 0:literal/quit
9999 mem: location 1066 is 0
9999 mem: location 1067 is 98
9999 mem: location 1068 is 0
9999 mem: location 1069 is 0
9999 mem: location 1060 is 1025
9999 run: result 0 is [0, 98, 0, 0]
9999 mem: storing 0 in location 5
9999 mem: storing 98 in location 6
9999 mem: storing 0 in location 7
9999 mem: storing 0 in location 8
 101 run: 9:event <- read-event console:address
9999 mem: location 901 is 1025
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1089
 102 run: x:address:console <- next-ingredient 
9999 mem: storing 1025 in location 1091
 102 run: break-unless x:address:console, 
9999 mem: location 1091 is 1025
9999 run: jump-unless fell through
 102 run: idx:address:number <- get-address x:address:console/deref, index:offset
9999 mem: location 1091 is 1025
9999 mem: location 1025 is 2
9999 mem: location 1026 is 1000
9999 mem: location 1091 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1092
 102 run: buf:address:array:event <- get x:address:console/deref, data:offset
9999 mem: location 1091 is 1025
9999 mem: location 1025 is 2
9999 mem: location 1026 is 1000
9999 mem: location 1091 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1000
9999 mem: storing 1000 in location 1093
 102 run: max:number <- length buf:address:array:event/deref
9999 mem: location 1093 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1093 is 1000
9999 mem: storing 6 in location 1094
 102 run: done?:boolean <- greater-or-equal idx:address:number/deref, max:number
9999 mem: location 1092 is 1025
9999 mem: location 1025 is 2
9999 mem: location 1094 is 6
9999 mem: storing 0 in location 1095
 102 run: break-unless done?:boolean, 
9999 mem: location 1095 is 0
9999 run: jumping to instruction 12
 102 run: result:event <- index buf:address:array:event/deref, idx:address:number/deref
9999 mem: location 1093 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1092 is 1025
9999 mem: location 1025 is 2
9999 mem: location 1093 is 1000
9999 mem: location 1092 is 1025
9999 mem: location 1025 is 2
9999 run: address to copy is 1009
9999 run: its type is event
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1097
9999 mem: storing 99 in location 1098
9999 mem: storing 0 in location 1099
9999 mem: storing 0 in location 1100
 102 run: idx:address:number/deref <- add idx:address:number/deref, 1:literal
9999 mem: location 1092 is 1025
9999 mem: location 1025 is 2
9999 mem: location 1092 is 1025
9999 mem: storing 3 in location 1025
 102 run: reply result:event, x:address:console/same-as-ingredient:0, 1:literal/found, 0:literal/quit
9999 mem: location 1097 is 0
9999 mem: location 1098 is 99
9999 mem: location 1099 is 0
9999 mem: location 1100 is 0
9999 mem: location 1091 is 1025
9999 run: result 0 is [0, 99, 0, 0]
9999 mem: storing 0 in location 9
9999 mem: storing 99 in location 10
9999 mem: storing 0 in location 11
9999 mem: storing 0 in location 12
 101 run: 13:event <- read-event console:address
9999 mem: location 901 is 1025
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1120
 102 run: x:address:console <- next-ingredient 
9999 mem: storing 1025 in location 1122
 102 run: break-unless x:address:console, 
9999 mem: location 1122 is 1025
9999 run: jump-unless fell through
 102 run: idx:address:number <- get-address x:address:console/deref, index:offset
9999 mem: location 1122 is 1025
9999 mem: location 1025 is 3
9999 mem: location 1026 is 1000
9999 mem: location 1122 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1123
 102 run: buf:address:array:event <- get x:address:console/deref, data:offset
9999 mem: location 1122 is 1025
9999 mem: location 1025 is 3
9999 mem: location 1026 is 1000
9999 mem: location 1122 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1000
9999 mem: storing 1000 in location 1124
 102 run: max:number <- length buf:address:array:event/deref
9999 mem: location 1124 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1124 is 1000
9999 mem: storing 6 in location 1125
 102 run: done?:boolean <- greater-or-equal idx:address:number/deref, max:number
9999 mem: location 1123 is 1025
9999 mem: location 1025 is 3
9999 mem: location 1125 is 6
9999 mem: storing 0 in location 1126
 102 run: break-unless done?:boolean, 
9999 mem: location 1126 is 0
9999 run: jumping to instruction 12
 102 run: result:event <- index buf:address:array:event/deref, idx:address:number/deref
9999 mem: location 1124 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1123 is 1025
9999 mem: location 1025 is 3
9999 mem: location 1124 is 1000
9999 mem: location 1123 is 1025
9999 mem: location 1025 is 3
9999 run: address to copy is 1013
9999 run: its type is event
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: storing 2 in location 1128
9999 mem: storing 65513 in location 1129
9999 mem: storing 0 in location 1130
9999 mem: storing 1 in location 1131
 102 run: idx:address:number/deref <- add idx:address:number/deref, 1:literal
9999 mem: location 1123 is 1025
9999 mem: location 1025 is 3
9999 mem: location 1123 is 1025
9999 mem: storing 4 in location 1025
 102 run: reply result:event, x:address:console/same-as-ingredient:0, 1:literal/found, 0:literal/quit
9999 mem: location 1128 is 2
9999 mem: location 1129 is 65513
9999 mem: location 1130 is 0
9999 mem: location 1131 is 1
9999 mem: location 1122 is 1025
9999 run: result 0 is [2, 65513, 0, 1]
9999 mem: storing 2 in location 13
9999 mem: storing 65513 in location 14
9999 mem: storing 0 in location 15
9999 mem: storing 1 in location 16
 101 run: 17:event <- read-event console:address
9999 mem: location 901 is 1025
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1151
 102 run: x:address:console <- next-ingredient 
9999 mem: storing 1025 in location 1153
 102 run: break-unless x:address:console, 
9999 mem: location 1153 is 1025
9999 run: jump-unless fell through
 102 run: idx:address:number <- get-address x:address:console/deref, index:offset
9999 mem: location 1153 is 1025
9999 mem: location 1025 is 4
9999 mem: location 1026 is 1000
9999 mem: location 1153 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1154
 102 run: buf:address:array:event <- get x:address:console/deref, data:offset
9999 mem: location 1153 is 1025
9999 mem: location 1025 is 4
9999 mem: location 1026 is 1000
9999 mem: location 1153 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1000
9999 mem: storing 1000 in location 1155
 102 run: max:number <- length buf:address:array:event/deref
9999 mem: location 1155 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1155 is 1000
9999 mem: storing 6 in location 1156
 102 run: done?:boolean <- greater-or-equal idx:address:number/deref, max:number
9999 mem: location 1154 is 1025
9999 mem: location 1025 is 4
9999 mem: location 1156 is 6
9999 mem: storing 0 in location 1157
 102 run: break-unless done?:boolean, 
9999 mem: location 1157 is 0
9999 run: jumping to instruction 12
 102 run: result:event <- index buf:address:array:event/deref, idx:address:number/deref
9999 mem: location 1155 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1154 is 1025
9999 mem: location 1025 is 4
9999 mem: location 1155 is 1000
9999 mem: location 1154 is 1025
9999 mem: location 1025 is 4
9999 run: address to copy is 1017
9999 run: its type is event
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: storing 1 in location 1159
9999 mem: storing 65515 in location 1160
9999 mem: storing 0 in location 1161
9999 mem: storing 0 in location 1162
 102 run: idx:address:number/deref <- add idx:address:number/deref, 1:literal
9999 mem: location 1154 is 1025
9999 mem: location 1025 is 4
9999 mem: location 1154 is 1025
9999 mem: storing 5 in location 1025
 102 run: reply result:event, x:address:console/same-as-ingredient:0, 1:literal/found, 0:literal/quit
9999 mem: location 1159 is 1
9999 mem: location 1160 is 65515
9999 mem: location 1161 is 0
9999 mem: location 1162 is 0
9999 mem: location 1153 is 1025
9999 run: result 0 is [1, 65515, 0, 0]
9999 mem: storing 1 in location 17
9999 mem: storing 65515 in location 18
9999 mem: storing 0 in location 19
9999 mem: storing 0 in location 20
 101 run: 21:event <- read-event console:address
9999 mem: location 901 is 1025
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1182
 102 run: x:address:console <- next-ingredient 
9999 mem: storing 1025 in location 1184
 102 run: break-unless x:address:console, 
9999 mem: location 1184 is 1025
9999 run: jump-unless fell through
 102 run: idx:address:number <- get-address x:address:console/deref, index:offset
9999 mem: location 1184 is 1025
9999 mem: location 1025 is 5
9999 mem: location 1026 is 1000
9999 mem: location 1184 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1185
 102 run: buf:address:array:event <- get x:address:console/deref, data:offset
9999 mem: location 1184 is 1025
9999 mem: location 1025 is 5
9999 mem: location 1026 is 1000
9999 mem: location 1184 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1000
9999 mem: storing 1000 in location 1186
 102 run: max:number <- length buf:address:array:event/deref
9999 mem: location 1186 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1186 is 1000
9999 mem: storing 6 in location 1187
 102 run: done?:boolean <- greater-or-equal idx:address:number/deref, max:number
9999 mem: location 1185 is 1025
9999 mem: location 1025 is 5
9999 mem: location 1187 is 6
9999 mem: storing 0 in location 1188
 102 run: break-unless done?:boolean, 
9999 mem: location 1188 is 0
9999 run: jumping to instruction 12
 102 run: result:event <- index buf:address:array:event/deref, idx:address:number/deref
9999 mem: location 1186 is 1000
9999 mem: location 1000 is 6
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65515
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1185 is 1025
9999 mem: location 1025 is 5
9999 mem: location 1186 is 1000
9999 mem: location 1185 is 1025
9999 mem: location 1025 is 5
9999 run: address to copy is 1021
9999 run: its type is event
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: storing 0 in location 1190
9999 mem: storing 100 in location 1191
9999 mem: storing 0 in location 1192
9999 mem: storing 0 in location 1193
 102 run: idx:address:number/deref <- add idx:address:number/deref, 1:literal
9999 mem: location 1185 is 1025
9999 mem: location 1025 is 5
9999 mem: location 1185 is 1025
9999 mem: storing 6 in location 1025
 102 run: reply result:event, x:address:console/same-as-ingredient:0, 1:literal/found, 0:literal/quit
9999 mem: location 1190 is 0
9999 mem: location 1191 is 100
9999 mem: location 1192 is 0
9999 mem: location 1193 is 0
9999 mem: location 1184 is 1025
9999 run: result 0 is [0, 100, 0, 0]
9999 mem: storing 0 in location 21
9999 mem: storing 100 in location 22
9999 mem: storing 0 in location 23
9999 mem: storing 0 in location 24
 100 run: memory-should-contain [
    1 <- 0  # 'text'
    2 <- 97  # 'a'
    3 <- 0  # unused
    4 <- 0  # unused
    5 <- 0  # 'text'
    6 <- 98  # 'b'
    7 <- 0  # unused
    8 <- 0  # unused
    9 <- 0  # 'text'
    10 <- 99  # 'c'
    11 <- 0  # unused
    12 <- 0  # unused
    13 <- 2  # 'mouse'
    14 <- 65513  # mouse click
    15 <- 0  # row
    16 <- 1  # column
    17 <- 1  # 'keycode'
    18 <- 65515  # up arrow
    19 <- 0  # unused
    20 <- 0  # unused
    21 <- 0  # 'text'
    22 <- 100  # 'd'
    23 <- 0  # unused
    24 <- 0  # unused
    25 <- 0
  ]
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
9999 run: checking location 14
9999 run: checking location 15
9999 run: checking location 16
9999 run: checking location 17
9999 run: checking location 18
9999 run: checking location 19
9999 run: checking location 20
9999 run: checking location 21
9999 run: checking location 22
9999 run: checking location 23
9999 run: checking location 24
9999 run: checking location 25
