9999 parse: instruction: assume-console
9999 parse:   ingredient: {"\n    type [abc]\n    left-click 0, 1\n    press up-arrow\n    type [d]\n  ": "literal-string"}
9999 parse: instruction: run
9999 parse:   ingredient: {"\n    # 3 keyboard events; each event occupies 4 locations\n    1:event <- read-event console:address\n    5:event <- read-event console:address\n    9:event <- read-event console:address\n    # mouse click\n    13:event <- read-event console:address\n    # non-character keycode\n    17:event <- read-event console:address\n    # final keyboard event\n    21:event <- read-event console:address\n  ": "literal-string"}
9999 parse: instruction: memory-should-contain
9999 parse:   ingredient: {"\n    1 <- 0  # 'text'\n    2 <- 97  # 'a'\n    3 <- 0  # unused\n    4 <- 0  # unused\n    5 <- 0  # 'text'\n    6 <- 98  # 'b'\n    7 <- 0  # unused\n    8 <- 0  # unused\n    9 <- 0  # 'text'\n    10 <- 99  # 'c'\n    11 <- 0  # unused\n    12 <- 0  # unused\n    13 <- 2  # 'mouse'\n    14 <- 65513  # mouse click\n    15 <- 0  # row\n    16 <- 1  # column\n    17 <- 1  # 'keycode'\n    18 <- 65517  # up arrow\n    19 <- 0  # unused\n    20 <- 0  # unused\n    21 <- 0  # 'text'\n    22 <- 100  # 'd'\n    23 <- 0  # unused\n    24 <- 0  # unused\n    25 <- 0\n  ": "literal-string"}
9999 after-brace: recipe scenario-events-in-scenario
9999 after-brace: assume-console ...
9999 after-brace: run ...
9999 after-brace: memory-should-contain ...
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9999 schedule: scenario-events-in-scenario
 102 run: assume-console [
    type [abc]
    left-click 0, 1
    press up-arrow
    type [d]
  ]
9999 parse: instruction: type
9999 parse:   ingredient: {"abc": "literal-string"}
9999 parse: instruction: left-click
9999 parse:   ingredient: {"0": "literal"}
9999 parse:   ingredient: {"1": "literal"}
9999 parse: instruction: press
9999 parse:   ingredient: {"up-arrow": ""}
9999 parse: instruction: type
9999 parse:   ingredient: {"d": "literal-string"}
 102 run: run [
    # 3 keyboard events; each event occupies 4 locations
    1:event <- read-event console:address
    5:event <- read-event console:address
    9:event <- read-event console:address
    # mouse click
    13:event <- read-event console:address
    # non-character keycode
    17:event <- read-event console:address
    # final keyboard event
    21:event <- read-event console:address
  ]
9999 parse: instruction: read-event
9999 parse:   ingredient: {"console": "address"}
9999 parse:   product: {"1": "event"}
9999 parse: instruction: read-event
9999 parse:   ingredient: {"console": "address"}
9999 parse:   product: {"5": "event"}
9999 parse: instruction: read-event
9999 parse:   ingredient: {"console": "address"}
9999 parse:   product: {"9": "event"}
9999 parse: instruction: read-event
9999 parse:   ingredient: {"console": "address"}
9999 parse:   product: {"13": "event"}
9999 parse: instruction: read-event
9999 parse:   ingredient: {"console": "address"}
9999 parse:   product: {"17": "event"}
9999 parse: instruction: read-event
9999 parse:   ingredient: {"console": "address"}
9999 parse:   product: {"21": "event"}
9999 after-brace: recipe run1003
9999 after-brace: read-event ...
9999 after-brace: read-event ...
9999 after-brace: read-event ...
9999 after-brace: read-event ...
9999 after-brace: read-event ...
9999 after-brace: read-event ...
9999 trace: run: incrementing callstack depth to 2
 103 run: 1:event <- read-event console:address
9999 mem: location 901 is 1025
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
9999 mem: new alloc: 1027
 104 run: x:address:console <- next-ingredient 
9999 mem: storing 1025 in location 1029
 104 run: break-unless x, 
9999 mem: location 1029 is 1025
9999 run: jump-unless fell through
 104 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1030
 104 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1000
9999 mem: storing 1000 in location 1031
 104 run: max:number <- length *buf
9999 mem: location 1031 is 1000
9999 mem: storing 6 in location 1032
 104 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1032 is 6
9999 mem: storing 0 in location 1033
 104 run: break-unless done?, 
9999 mem: location 1033 is 0
9999 run: jumping to instruction 12
 104 run: result:event <- index *buf, *idx
9999 mem: location 1031 is 1000
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 0
9999 run: address to copy is 1001
9999 run: its type is event
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1035
9999 mem: storing 97 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
 104 run: *idx <- add *idx, 1
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 0
9999 mem: location 1030 is 1025
9999 mem: storing 1 in location 1025
 104 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1035 is 0
9999 mem: location 1036 is 97
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1029 is 1025
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is [0, 97, 0, 0]
9999 mem: storing 0 in location 1
9999 mem: storing 97 in location 2
9999 mem: storing 0 in location 3
9999 mem: storing 0 in location 4
 103 run: 5:event <- read-event console:address
9999 mem: location 901 is 1025
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 104 run: x:address:console <- next-ingredient 
9999 mem: storing 1025 in location 1029
 104 run: break-unless x, 
9999 mem: location 1029 is 1025
9999 run: jump-unless fell through
 104 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 1
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1030
 104 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 1
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1000
9999 mem: storing 1000 in location 1031
 104 run: max:number <- length *buf
9999 mem: location 1031 is 1000
9999 mem: storing 6 in location 1032
 104 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 1
9999 mem: location 1032 is 6
9999 mem: storing 0 in location 1033
 104 run: break-unless done?, 
9999 mem: location 1033 is 0
9999 run: jumping to instruction 12
 104 run: result:event <- index *buf, *idx
9999 mem: location 1031 is 1000
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 1
9999 run: address to copy is 1005
9999 run: its type is event
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1035
9999 mem: storing 98 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
 104 run: *idx <- add *idx, 1
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 1
9999 mem: location 1030 is 1025
9999 mem: storing 2 in location 1025
 104 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1035 is 0
9999 mem: location 1036 is 98
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1029 is 1025
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is [0, 98, 0, 0]
9999 mem: storing 0 in location 5
9999 mem: storing 98 in location 6
9999 mem: storing 0 in location 7
9999 mem: storing 0 in location 8
 103 run: 9:event <- read-event console:address
9999 mem: location 901 is 1025
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 104 run: x:address:console <- next-ingredient 
9999 mem: storing 1025 in location 1029
 104 run: break-unless x, 
9999 mem: location 1029 is 1025
9999 run: jump-unless fell through
 104 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 2
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1030
 104 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 2
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1000
9999 mem: storing 1000 in location 1031
 104 run: max:number <- length *buf
9999 mem: location 1031 is 1000
9999 mem: storing 6 in location 1032
 104 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 2
9999 mem: location 1032 is 6
9999 mem: storing 0 in location 1033
 104 run: break-unless done?, 
9999 mem: location 1033 is 0
9999 run: jumping to instruction 12
 104 run: result:event <- index *buf, *idx
9999 mem: location 1031 is 1000
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 2
9999 run: address to copy is 1009
9999 run: its type is event
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1035
9999 mem: storing 99 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
 104 run: *idx <- add *idx, 1
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 2
9999 mem: location 1030 is 1025
9999 mem: storing 3 in location 1025
 104 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1035 is 0
9999 mem: location 1036 is 99
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1029 is 1025
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is [0, 99, 0, 0]
9999 mem: storing 0 in location 9
9999 mem: storing 99 in location 10
9999 mem: storing 0 in location 11
9999 mem: storing 0 in location 12
 103 run: 13:event <- read-event console:address
9999 mem: location 901 is 1025
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 104 run: x:address:console <- next-ingredient 
9999 mem: storing 1025 in location 1029
 104 run: break-unless x, 
9999 mem: location 1029 is 1025
9999 run: jump-unless fell through
 104 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 3
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1030
 104 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 3
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1000
9999 mem: storing 1000 in location 1031
 104 run: max:number <- length *buf
9999 mem: location 1031 is 1000
9999 mem: storing 6 in location 1032
 104 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 3
9999 mem: location 1032 is 6
9999 mem: storing 0 in location 1033
 104 run: break-unless done?, 
9999 mem: location 1033 is 0
9999 run: jumping to instruction 12
 104 run: result:event <- index *buf, *idx
9999 mem: location 1031 is 1000
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 3
9999 run: address to copy is 1013
9999 run: its type is event
9999 mem: location 1013 is 2
9999 mem: location 1014 is 65513
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 mem: storing 2 in location 1035
9999 mem: storing 65513 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 1 in location 1038
 104 run: *idx <- add *idx, 1
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 3
9999 mem: location 1030 is 1025
9999 mem: storing 4 in location 1025
 104 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1035 is 2
9999 mem: location 1036 is 65513
9999 mem: location 1037 is 0
9999 mem: location 1038 is 1
9999 mem: location 1029 is 1025
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is [2, 65513, 0, 1]
9999 mem: storing 2 in location 13
9999 mem: storing 65513 in location 14
9999 mem: storing 0 in location 15
9999 mem: storing 1 in location 16
 103 run: 17:event <- read-event console:address
9999 mem: location 901 is 1025
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 104 run: x:address:console <- next-ingredient 
9999 mem: storing 1025 in location 1029
 104 run: break-unless x, 
9999 mem: location 1029 is 1025
9999 run: jump-unless fell through
 104 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 4
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1030
 104 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 4
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1000
9999 mem: storing 1000 in location 1031
 104 run: max:number <- length *buf
9999 mem: location 1031 is 1000
9999 mem: storing 6 in location 1032
 104 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 4
9999 mem: location 1032 is 6
9999 mem: storing 0 in location 1033
 104 run: break-unless done?, 
9999 mem: location 1033 is 0
9999 run: jumping to instruction 12
 104 run: result:event <- index *buf, *idx
9999 mem: location 1031 is 1000
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 4
9999 run: address to copy is 1017
9999 run: its type is event
9999 mem: location 1017 is 1
9999 mem: location 1018 is 65517
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: storing 1 in location 1035
9999 mem: storing 65517 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
 104 run: *idx <- add *idx, 1
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 4
9999 mem: location 1030 is 1025
9999 mem: storing 5 in location 1025
 104 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1035 is 1
9999 mem: location 1036 is 65517
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1029 is 1025
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is [1, 65517, 0, 0]
9999 mem: storing 1 in location 17
9999 mem: storing 65517 in location 18
9999 mem: storing 0 in location 19
9999 mem: storing 0 in location 20
 103 run: 21:event <- read-event console:address
9999 mem: location 901 is 1025
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 104 run: x:address:console <- next-ingredient 
9999 mem: storing 1025 in location 1029
 104 run: break-unless x, 
9999 mem: location 1029 is 1025
9999 run: jump-unless fell through
 104 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 5
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1025
9999 mem: storing 1025 in location 1030
 104 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1029 is 1025
9999 mem: location 1025 is 5
9999 mem: location 1026 is 1000
9999 mem: location 1029 is 1025
9999 run: address to copy is 1026
9999 run: its type is address
9999 mem: location 1026 is 1000
9999 mem: storing 1000 in location 1031
 104 run: max:number <- length *buf
9999 mem: location 1031 is 1000
9999 mem: storing 6 in location 1032
 104 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 5
9999 mem: location 1032 is 6
9999 mem: storing 0 in location 1033
 104 run: break-unless done?, 
9999 mem: location 1033 is 0
9999 run: jumping to instruction 12
 104 run: result:event <- index *buf, *idx
9999 mem: location 1031 is 1000
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 5
9999 run: address to copy is 1021
9999 run: its type is event
9999 mem: location 1021 is 0
9999 mem: location 1022 is 100
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: storing 0 in location 1035
9999 mem: storing 100 in location 1036
9999 mem: storing 0 in location 1037
9999 mem: storing 0 in location 1038
 104 run: *idx <- add *idx, 1
9999 mem: location 1030 is 1025
9999 mem: location 1025 is 5
9999 mem: location 1030 is 1025
9999 mem: storing 6 in location 1025
 104 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1035 is 0
9999 mem: location 1036 is 100
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1029 is 1025
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is [0, 100, 0, 0]
9999 mem: storing 0 in location 21
9999 mem: storing 100 in location 22
9999 mem: storing 0 in location 23
9999 mem: storing 0 in location 24
9999 trace: fall-through: exiting run1003; decrementing callstack depth from 2
 102 run: memory-should-contain [
    1 <- 0  # 'text'
    2 <- 97  # 'a'
    3 <- 0  # unused
    4 <- 0  # unused
    5 <- 0  # 'text'
    6 <- 98  # 'b'
    7 <- 0  # unused
    8 <- 0  # unused
    9 <- 0  # 'text'
    10 <- 99  # 'c'
    11 <- 0  # unused
    12 <- 0  # unused
    13 <- 2  # 'mouse'
    14 <- 65513  # mouse click
    15 <- 0  # row
    16 <- 1  # column
    17 <- 1  # 'keycode'
    18 <- 65517  # up arrow
    19 <- 0  # unused
    20 <- 0  # unused
    21 <- 0  # 'text'
    22 <- 100  # 'd'
    23 <- 0  # unused
    24 <- 0  # unused
    25 <- 0
  ]
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
9999 run: checking location 14
9999 run: checking location 15
9999 run: checking location 16
9999 run: checking location 17
9999 run: checking location 18
9999 run: checking location 19
9999 run: checking location 20
9999 run: checking location 21
9999 run: checking location 22
9999 run: checking location 23
9999 run: checking location 24
9999 run: checking location 25
9999 trace: fall-through: exiting scenario-events-in-scenario; decrementing callstack depth from 1
