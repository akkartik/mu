9991 parse: --- defining scenario-string-split-1
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:array:character <- new [a/b]\n    2:address:array:address:array:character <- split 1:address:array:character, 47/slash\n    3:number <- length *2:address:array:address:array:character\n    4:address:array:character <- index *2:address:array:address:array:character, 0\n    5:address:array:character <- index *2:address:array:address:array:character, 1\n    10:array:character <- copy *4:address:array:character\n    20:array:character <- copy *5:address:array:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:array:character <- new [a/b]
    2:address:array:address:array:character <- split 1:address:array:character, 47/slash
    3:number <- length *2:address:array:address:array:character
    4:address:array:character <- index *2:address:array:address:array:character, 0
    5:address:array:character <- index *2:address:array:address:array:character, 1
    10:array:character <- copy *4:address:array:character
    20:array:character <- copy *5:address:array:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3 <- 2  # length of result\n    10:string <- [a]\n    20:string <- [b]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    3 <- 2  # length of result
    10:string <- [a]
    20:string <- [b]
  ]
9999 parse: recipe scenario-string-split-1 has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe scenario-string-split-1
9991 transform: --- deduce types for recipe scenario-string-split-1
9991 transform: --- collect surrounding spaces for recipe scenario-string-split-1
9991 transform: --- transform names for recipe scenario-string-split-1
9991 transform: --- transform braces for recipe scenario-string-split-1
9992 transform: run ...
9992 transform: memory-should-contain ...
9991 transform: --- compute instruction operations for recipe scenario-string-split-1
9991 transform: --- perform checks for recipe scenario-string-split-1
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-string-split-1
 102 run: run [
    1:address:array:character <- new [a/b]
    2:address:array:address:array:character <- split 1:address:array:character, 47/slash
    3:number <- length *2:address:array:address:array:character
    4:address:array:character <- index *2:address:array:address:array:character, 0
    5:address:array:character <- index *2:address:array:address:array:character, 1
    10:array:character <- copy *4:address:array:character
    20:array:character <- copy *5:address:array:character
  ]
9991 parse: --- defining run1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"a/b": "literal-string"}
9993 parse:   product: {"1": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:array:character <- new [a/b]
9993 parse: instruction: split
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   ingredient: {"47": "literal", "slash": <>}
9993 parse:   product: {"2": <"address" : <"array" : <"address" : <"array" : <"character" : <>>>>>>}
9992 load: after rewriting: 2:address:array:address:array:character <- split 1:address:array:character, 47/slash
9993 parse: instruction: length
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"*2": <"address" : <"array" : <"address" : <"array" : <"character" : <>>>>>>, "lookup": <>}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- length *2:address:array:address:array:character
9993 parse: instruction: index
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"*2": <"address" : <"array" : <"address" : <"array" : <"character" : <>>>>>>, "lookup": <>}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"4": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: 4:address:array:character <- index *2:address:array:address:array:character, 0
9993 parse: instruction: index
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"*2": <"address" : <"array" : <"address" : <"array" : <"character" : <>>>>>>, "lookup": <>}
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   product: {"5": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: 5:address:array:character <- index *2:address:array:address:array:character, 1
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"*4": <"address" : <"array" : <"character" : <>>>>, "lookup": <>}
9993 parse:   product: {"10": <"array" : <"character" : <>>>}
9992 load: after rewriting: 10:array:character <- copy *4:address:array:character
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"*5": <"address" : <"array" : <"character" : <>>>>, "lookup": <>}
9993 parse:   product: {"20": <"array" : <"character" : <>>>}
9992 load: after rewriting: 20:array:character <- copy *5:address:array:character
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe run1001
9991 transform: --- deduce types for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: new ...
9992 transform: split ...
9992 transform: length ...
9992 transform: index ...
9992 transform: index ...
9992 transform: copy ...
9992 transform: copy ...
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:array:character <- new [a/b]
9999 mem: storing 1000 in location 1
 103 run: 2:address:array:address:array:character <- split 1:address:array:character, 47/slash
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 13
9999 mem: new alloc: 1004
 104 run: s:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1006
 104 run: delim:character <- next-ingredient 
9999 mem: storing 47 in location 1007
 104 run: len:number <- length *s
9999 mem: location 1006 is 1000
9999 mem: storing 3 in location 1008
 104 run: empty?:boolean <- equal len, 0
9999 mem: location 1008 is 3
9999 mem: storing 0 in location 1009
 104 run: jump-unless empty?, 
9999 mem: location 1009 is 0
9998 run: jumping to instruction 9
 104 run: count:number <- copy 1
9999 mem: storing 1 in location 1011
 104 run: idx:number <- copy 0
9999 mem: storing 0 in location 1012
 104 run: idx <- find-next s, delim, idx
9999 mem: location 1006 is 1000
9999 mem: location 1007 is 47
9999 mem: location 1012 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1018
 105 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1020
 105 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1021
 105 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1022
 105 run: len:number <- length *text
9999 mem: location 1020 is 1000
9999 mem: storing 3 in location 1023
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1022 is 0
9999 mem: location 1023 is 3
9999 mem: storing 0 in location 1024
 105 run: jump-if eof?, 
9999 mem: location 1024 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1020 is 1000
9999 mem: location 1022 is 0
9998 run: address to copy is 1001
9998 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1025
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1025 is 97
9999 mem: location 1021 is 47
9999 mem: storing 0 in location 1026
 105 run: jump-if found?, 
9999 mem: location 1026 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1022 is 0
9999 mem: storing 1 in location 1022
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1022 is 1
9999 mem: location 1023 is 3
9999 mem: storing 0 in location 1024
 105 run: jump-if eof?, 
9999 mem: location 1024 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1020 is 1000
9999 mem: location 1022 is 1
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 47
9999 mem: storing 47 in location 1025
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1025 is 47
9999 mem: location 1021 is 47
9999 mem: storing 1 in location 1026
 105 run: jump-if found?, 
9999 mem: location 1026 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1022 is 1
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1012
 104 run: done?:boolean <- greater-or-equal idx, len
9999 mem: location 1012 is 1
9999 mem: location 1008 is 3
9999 mem: storing 0 in location 1013
 104 run: jump-if done?, 
9999 mem: location 1013 is 0
9998 run: jump-if fell through
 104 run: idx <- add idx, 1
9999 mem: location 1012 is 1
9999 mem: storing 2 in location 1012
 104 run: count <- add count, 1
9999 mem: location 1011 is 1
9999 mem: storing 2 in location 1011
 104 run: jump 
9998 run: jumping to instruction 13
 104 run: idx <- find-next s, delim, idx
9999 mem: location 1006 is 1000
9999 mem: location 1007 is 47
9999 mem: location 1012 is 2
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 105 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1020
 105 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1021
 105 run: idx:number <- next-ingredient 
9999 mem: storing 2 in location 1022
 105 run: len:number <- length *text
9999 mem: location 1020 is 1000
9999 mem: storing 3 in location 1023
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1022 is 2
9999 mem: location 1023 is 3
9999 mem: storing 0 in location 1024
 105 run: jump-if eof?, 
9999 mem: location 1024 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1020 is 1000
9999 mem: location 1022 is 2
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1025
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1025 is 98
9999 mem: location 1021 is 47
9999 mem: storing 0 in location 1026
 105 run: jump-if found?, 
9999 mem: location 1026 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1022 is 2
9999 mem: storing 3 in location 1022
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1022 is 3
9999 mem: location 1023 is 3
9999 mem: storing 1 in location 1024
 105 run: jump-if eof?, 
9999 mem: location 1024 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1022 is 3
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 3
9999 mem: storing 3 in location 1012
 104 run: done?:boolean <- greater-or-equal idx, len
9999 mem: location 1012 is 3
9999 mem: location 1008 is 3
9999 mem: storing 1 in location 1013
 104 run: jump-if done?, 
9999 mem: location 1013 is 1
9998 run: jumping to instruction 19
 104 run: result:address:array:address:array:character <- new location:type, count
9999 mem: location 1011 is 2
9999 mem: array size is 2
9999 mem: new alloc: 1027
9999 mem: storing 1027 in location 1010
 104 run: curr-result:number <- copy 0
9999 mem: storing 0 in location 1014
 104 run: start:number <- copy 0
9999 mem: storing 0 in location 1015
 104 run: done?:boolean <- greater-or-equal start, len
9999 mem: location 1015 is 0
9999 mem: location 1008 is 3
9999 mem: storing 0 in location 1013
 104 run: jump-if done?, 
9999 mem: location 1013 is 0
9998 run: jump-if fell through
 104 run: end:number <- find-next s, delim, start
9999 mem: location 1006 is 1000
9999 mem: location 1007 is 47
9999 mem: location 1015 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 105 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1020
 105 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1021
 105 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1022
 105 run: len:number <- length *text
9999 mem: location 1020 is 1000
9999 mem: storing 3 in location 1023
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1022 is 0
9999 mem: location 1023 is 3
9999 mem: storing 0 in location 1024
 105 run: jump-if eof?, 
9999 mem: location 1024 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1020 is 1000
9999 mem: location 1022 is 0
9998 run: address to copy is 1001
9998 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1025
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1025 is 97
9999 mem: location 1021 is 47
9999 mem: storing 0 in location 1026
 105 run: jump-if found?, 
9999 mem: location 1026 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1022 is 0
9999 mem: storing 1 in location 1022
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1022 is 1
9999 mem: location 1023 is 3
9999 mem: storing 0 in location 1024
 105 run: jump-if eof?, 
9999 mem: location 1024 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1020 is 1000
9999 mem: location 1022 is 1
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 47
9999 mem: storing 47 in location 1025
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1025 is 47
9999 mem: location 1021 is 47
9999 mem: storing 1 in location 1026
 105 run: jump-if found?, 
9999 mem: location 1026 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1022 is 1
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1016
 104 run: dest:address:address:array:character <- index-address *result, curr-result
9999 mem: location 1010 is 1027
9999 mem: location 1014 is 0
9999 mem: storing 1028 in location 1017
 104 run: *dest <- string-copy s, start, end
9999 mem: location 1006 is 1000
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1030
 105 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1032
 105 run: start:number <- next-ingredient 
9999 mem: storing 0 in location 1033
 105 run: end:number <- next-ingredient 
9999 mem: storing 1 in location 1034
 105 run: len:number <- length *buf
9999 mem: location 1032 is 1000
9999 mem: storing 3 in location 1035
 105 run: end:number <- min len, end
9999 mem: location 1035 is 3
9999 mem: location 1034 is 1
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1042
 106 run: x:number <- next-ingredient 
9999 mem: storing 3 in location 1044
 106 run: y:number <- next-ingredient 
9999 mem: storing 1 in location 1045
 106 run: return-x?:boolean <- lesser-than x, y
9999 mem: location 1044 is 3
9999 mem: location 1045 is 1
9999 mem: storing 0 in location 1046
 106 run: jump-if return-x?, 
9999 mem: location 1046 is 0
9998 run: jump-if fell through
 106 run: reply y
9999 mem: location 1045 is 1
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 1034
 105 run: len <- subtract end, start
9999 mem: location 1034 is 1
9999 mem: location 1033 is 0
9999 mem: storing 1 in location 1035
 105 run: result:address:array:character <- new character:type, len
9999 mem: location 1035 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1047
9999 mem: storing 1047 in location 1036
 105 run: src-idx:number <- copy start
9999 mem: location 1033 is 0
9999 mem: storing 0 in location 1037
 105 run: dest-idx:number <- copy 0
9999 mem: storing 0 in location 1038
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1037 is 0
9999 mem: location 1034 is 1
9999 mem: storing 0 in location 1039
 105 run: jump-if done?, 
9999 mem: location 1039 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *buf, src-idx
9999 mem: location 1032 is 1000
9999 mem: location 1037 is 0
9998 run: address to copy is 1001
9998 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1040
 105 run: dest:address:character <- index-address *result, dest-idx
9999 mem: location 1036 is 1047
9999 mem: location 1038 is 0
9999 mem: storing 1048 in location 1041
 105 run: *dest <- copy src
9999 mem: location 1040 is 97
9999 mem: location 1041 is 1048
9999 mem: storing 97 in location 1048
 105 run: src-idx <- add src-idx, 1
9999 mem: location 1037 is 0
9999 mem: storing 1 in location 1037
 105 run: dest-idx <- add dest-idx, 1
9999 mem: location 1038 is 0
9999 mem: storing 1 in location 1038
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1037 is 1
9999 mem: location 1034 is 1
9999 mem: storing 1 in location 1039
 105 run: jump-if done?, 
9999 mem: location 1039 is 1
9998 run: jumping to instruction 19
 105 run: reply result
9999 mem: location 1036 is 1047
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1047
9999 mem: location 1017 is 1028
9999 mem: storing 1047 in location 1028
 104 run: start <- add end, 1
9999 mem: location 1016 is 1
9999 mem: storing 2 in location 1015
 104 run: curr-result <- add curr-result, 1
9999 mem: location 1014 is 0
9999 mem: storing 1 in location 1014
 104 run: jump 
9998 run: jumping to instruction 24
 104 run: done?:boolean <- greater-or-equal start, len
9999 mem: location 1015 is 2
9999 mem: location 1008 is 3
9999 mem: storing 0 in location 1013
 104 run: jump-if done?, 
9999 mem: location 1013 is 0
9998 run: jump-if fell through
 104 run: end:number <- find-next s, delim, start
9999 mem: location 1006 is 1000
9999 mem: location 1007 is 47
9999 mem: location 1015 is 2
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 105 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1020
 105 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1021
 105 run: idx:number <- next-ingredient 
9999 mem: storing 2 in location 1022
 105 run: len:number <- length *text
9999 mem: location 1020 is 1000
9999 mem: storing 3 in location 1023
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1022 is 2
9999 mem: location 1023 is 3
9999 mem: storing 0 in location 1024
 105 run: jump-if eof?, 
9999 mem: location 1024 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1020 is 1000
9999 mem: location 1022 is 2
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1025
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1025 is 98
9999 mem: location 1021 is 47
9999 mem: storing 0 in location 1026
 105 run: jump-if found?, 
9999 mem: location 1026 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1022 is 2
9999 mem: storing 3 in location 1022
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1022 is 3
9999 mem: location 1023 is 3
9999 mem: storing 1 in location 1024
 105 run: jump-if eof?, 
9999 mem: location 1024 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1022 is 3
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 3
9999 mem: storing 3 in location 1016
 104 run: dest:address:address:array:character <- index-address *result, curr-result
9999 mem: location 1010 is 1027
9999 mem: location 1014 is 1
9999 mem: storing 1029 in location 1017
 104 run: *dest <- string-copy s, start, end
9999 mem: location 1006 is 1000
9999 mem: location 1015 is 2
9999 mem: location 1016 is 3
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
 105 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1032
 105 run: start:number <- next-ingredient 
9999 mem: storing 2 in location 1033
 105 run: end:number <- next-ingredient 
9999 mem: storing 3 in location 1034
 105 run: len:number <- length *buf
9999 mem: location 1032 is 1000
9999 mem: storing 3 in location 1035
 105 run: end:number <- min len, end
9999 mem: location 1035 is 3
9999 mem: location 1034 is 3
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
 106 run: x:number <- next-ingredient 
9999 mem: storing 3 in location 1044
 106 run: y:number <- next-ingredient 
9999 mem: storing 3 in location 1045
 106 run: return-x?:boolean <- lesser-than x, y
9999 mem: location 1044 is 3
9999 mem: location 1045 is 3
9999 mem: storing 0 in location 1046
 106 run: jump-if return-x?, 
9999 mem: location 1046 is 0
9998 run: jump-if fell through
 106 run: reply y
9999 mem: location 1045 is 3
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 3
9999 mem: storing 3 in location 1034
 105 run: len <- subtract end, start
9999 mem: location 1034 is 3
9999 mem: location 1033 is 2
9999 mem: storing 1 in location 1035
 105 run: result:address:array:character <- new character:type, len
9999 mem: location 1035 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1049
9999 mem: storing 1049 in location 1036
 105 run: src-idx:number <- copy start
9999 mem: location 1033 is 2
9999 mem: storing 2 in location 1037
 105 run: dest-idx:number <- copy 0
9999 mem: storing 0 in location 1038
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1037 is 2
9999 mem: location 1034 is 3
9999 mem: storing 0 in location 1039
 105 run: jump-if done?, 
9999 mem: location 1039 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *buf, src-idx
9999 mem: location 1032 is 1000
9999 mem: location 1037 is 2
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1040
 105 run: dest:address:character <- index-address *result, dest-idx
9999 mem: location 1036 is 1049
9999 mem: location 1038 is 0
9999 mem: storing 1050 in location 1041
 105 run: *dest <- copy src
9999 mem: location 1040 is 98
9999 mem: location 1041 is 1050
9999 mem: storing 98 in location 1050
 105 run: src-idx <- add src-idx, 1
9999 mem: location 1037 is 2
9999 mem: storing 3 in location 1037
 105 run: dest-idx <- add dest-idx, 1
9999 mem: location 1038 is 0
9999 mem: storing 1 in location 1038
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1037 is 3
9999 mem: location 1034 is 3
9999 mem: storing 1 in location 1039
 105 run: jump-if done?, 
9999 mem: location 1039 is 1
9998 run: jumping to instruction 19
 105 run: reply result
9999 mem: location 1036 is 1049
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1049
9999 mem: location 1017 is 1029
9999 mem: storing 1049 in location 1029
 104 run: start <- add end, 1
9999 mem: location 1016 is 3
9999 mem: storing 4 in location 1015
 104 run: curr-result <- add curr-result, 1
9999 mem: location 1014 is 1
9999 mem: storing 2 in location 1014
 104 run: jump 
9998 run: jumping to instruction 24
 104 run: done?:boolean <- greater-or-equal start, len
9999 mem: location 1015 is 4
9999 mem: location 1008 is 3
9999 mem: storing 1 in location 1013
 104 run: jump-if done?, 
9999 mem: location 1013 is 1
9998 run: jumping to instruction 32
 104 run: reply result
9999 mem: location 1010 is 1027
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1027
9999 mem: storing 1027 in location 2
 103 run: 3:number <- length *2:address:array:address:array:character
9999 mem: location 2 is 1027
9999 mem: storing 2 in location 3
 103 run: 4:address:array:character <- index *2:address:array:address:array:character, 0
9999 mem: location 2 is 1027
9998 run: address to copy is 1028
9998 run: its type is address
9999 mem: location 1028 is 1047
9999 mem: storing 1047 in location 4
 103 run: 5:address:array:character <- index *2:address:array:address:array:character, 1
9999 mem: location 2 is 1027
9998 run: address to copy is 1029
9998 run: its type is address
9999 mem: location 1029 is 1049
9999 mem: storing 1049 in location 5
 103 run: 10:array:character <- copy *4:address:array:character
9999 mem: location 4 is 1047
9999 mem: location 1047 is 1
9999 mem: location 1048 is 97
9999 mem: storing 1 in location 10
9999 mem: storing 97 in location 11
 103 run: 20:array:character <- copy *5:address:array:character
9999 mem: location 5 is 1049
9999 mem: location 1049 is 1
9999 mem: location 1050 is 98
9999 mem: storing 1 in location 20
9999 mem: storing 98 in location 21
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    3 <- 2  # length of result
    10:string <- [a]
    20:string <- [b]
  ]
9999 run: checking location 3
9999 run: checking string length at 10
9999 run: checking location 11
9999 run: checking string length at 20
9999 run: checking location 21
9999 trace: fall-through: exiting scenario-string-split-1; decrementing callstack depth from 1
