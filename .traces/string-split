schedule: main
run: 1 main 0: (((1 string-address)) <- ((new)) a/b)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: 2 main 1: (((2 string-address-array-address)) <- ((split)) ((1 string-address)) ((/ literal)))
m: ((1 string-address))
sizeof: ((1 string-address))
run: 3 split 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
sizeof: ((_ location))
run: 1004 => ((default-space space-address))
sizeof: ((default-space space-address))
run: 4 split 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1006 to 1000
run: 5 split 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/)
run: #\/ => ((2 character))
setm: ((2 character)) <= #\/
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 1007 to #\/
run: 6 split 3: (((3 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer) (raw))
sizeof: ((1000 integer) (raw))
run: 3 => ((3 integer))
setm: ((3 integer)) <= 3
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 1008 to 3
run: 7 split 4: (((4 boolean)) <- ((equal)) ((3 integer)) ((0 literal)))
m: ((3 integer))
sizeof: ((3 integer))
run: nil => ((4 boolean))
setm: ((4 boolean)) <= nil
setm: size of ((4 boolean)) is 1
setm: ((4 boolean)): setting 1009 to nil
run: 8 split 5: (((jump-unless)) ((4 boolean)) ((2 offset)))
m: ((4 boolean))
sizeof: ((4 boolean))
run: 9 split 8: (((6 integer)) <- ((copy)) ((1 literal)))
run: 1 => ((6 integer))
setm: ((6 integer)) <= 1
setm: size of ((6 integer)) is 1
setm: ((6 integer)): setting 1011 to 1
run: 10 split 9: (((7 integer)) <- ((copy)) ((0 literal)))
run: 0 => ((7 integer))
setm: ((7 integer)) <= 0
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 1012 to 0
run: 11 split 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
m: ((1 string-address))
sizeof: ((1 string-address))
m: ((2 character))
sizeof: ((2 character))
m: ((7 integer))
sizeof: ((7 integer))
run: 12 find-next 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 0)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: 13 find-next 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 0)
run: #\/ => ((2 character))
setm: ((2 character)) <= #\/
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 2 to #\/
run: 14 find-next 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 0)
run: 0 => ((3 integer))
setm: ((3 integer)) <= 0
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 0
run: 15 find-next 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer))
sizeof: ((1000 integer))
run: 3 => ((4 integer))
setm: ((4 integer)) <= 3
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 4 to 3
run: 16 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: 17 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
run: 18 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1001 byte) (raw))
sizeof: ((1001 byte) (raw))
run: #\a => ((6 byte))
setm: ((6 byte)) <= #\a
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to #\a
run: 19 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: nil => ((7 boolean))
setm: ((7 boolean)) <= nil
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to nil
run: 20 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
run: 21 find-next 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
m: ((3 integer))
sizeof: ((3 integer))
run: 1 => ((3 integer))
setm: ((3 integer)) <= 1
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 1
run: 22 find-next 10: (((jump)) ((-7 offset)))
run: 23 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: 24 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
run: 25 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1002 byte) (raw))
sizeof: ((1002 byte) (raw))
run: #\/ => ((6 byte))
setm: ((6 byte)) <= #\/
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to #\/
run: 26 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: t => ((7 boolean))
setm: ((7 boolean)) <= t
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to t
run: 27 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
run: 28 find-next 11: (((reply)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
reply: (((3 integer))) (((7 integer)))
reply: 1 => ((7 integer))
setm: ((7 integer)) <= 1
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 1012 to 1
run: 29 split 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
m: ((7 integer))
sizeof: ((7 integer))
m: ((3 integer))
sizeof: ((3 integer))
run: nil => ((8 boolean))
setm: ((8 boolean)) <= nil
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1013 to nil
run: 30 split 12: (((jump-if)) ((8 boolean)) ((3 offset)))
m: ((8 boolean))
sizeof: ((8 boolean))
run: 31 split 13: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
m: ((7 integer))
sizeof: ((7 integer))
run: 2 => ((7 integer))
setm: ((7 integer)) <= 2
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 1012 to 2
run: 32 split 14: (((6 integer)) <- ((add)) ((6 integer)) ((1 literal)))
m: ((6 integer))
sizeof: ((6 integer))
run: 2 => ((6 integer))
setm: ((6 integer)) <= 2
setm: size of ((6 integer)) is 1
setm: ((6 integer)): setting 1011 to 2
run: 33 split 15: (((jump)) ((-6 offset)))
run: 34 split 10: (((7 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((7 integer)))
m: ((1 string-address))
sizeof: ((1 string-address))
m: ((2 character))
sizeof: ((2 character))
m: ((7 integer))
sizeof: ((7 integer))
run: 35 find-next 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 2)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: 36 find-next 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 2)
run: #\/ => ((2 character))
setm: ((2 character)) <= #\/
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 2 to #\/
run: 37 find-next 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 2)
run: 2 => ((3 integer))
setm: ((3 integer)) <= 2
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 2
run: 38 find-next 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer))
sizeof: ((1000 integer))
run: 3 => ((4 integer))
setm: ((4 integer)) <= 3
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 4 to 3
run: 39 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: 40 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
run: 41 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1003 byte) (raw))
sizeof: ((1003 byte) (raw))
run: #\b => ((6 byte))
setm: ((6 byte)) <= #\b
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to #\b
run: 42 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: nil => ((7 boolean))
setm: ((7 boolean)) <= nil
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to nil
run: 43 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
run: 44 find-next 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
m: ((3 integer))
sizeof: ((3 integer))
run: 3 => ((3 integer))
setm: ((3 integer)) <= 3
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 3
run: 45 find-next 10: (((jump)) ((-7 offset)))
run: 46 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: t => ((5 boolean))
setm: ((5 boolean)) <= t
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to t
run: 47 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
run: 48 find-next 11: (((reply)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
reply: (((3 integer))) (((7 integer)))
reply: 3 => ((7 integer))
setm: ((7 integer)) <= 3
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 1012 to 3
run: 49 split 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((3 integer)))
m: ((7 integer))
sizeof: ((7 integer))
m: ((3 integer))
sizeof: ((3 integer))
run: t => ((8 boolean))
setm: ((8 boolean)) <= t
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1013 to t
run: 50 split 12: (((jump-if)) ((8 boolean)) ((3 offset)))
m: ((8 boolean))
sizeof: ((8 boolean))
run: 51 split 16: (((5 string-address-array-address)) <- ((new)) ((string-address-array literal)) ((6 integer)))
m: ((6 integer))
sizeof: ((6 integer))
sizeof: ((_ string-address))
run: 1035 => ((5 string-address-array-address))
setm: ((5 string-address-array-address)) <= 1035
setm: size of ((5 string-address-array-address)) is 1
setm: ((5 string-address-array-address)): setting 1010 to 1035
run: 52 split 17: (((9 integer)) <- ((copy)) ((0 literal)))
run: 0 => ((9 integer))
setm: ((9 integer)) <= 0
setm: size of ((9 integer)) is 1
setm: ((9 integer)): setting 1014 to 0
run: 53 split 18: (((10 integer)) <- ((copy)) ((0 literal)))
run: 0 => ((10 integer))
setm: ((10 integer)) <= 0
setm: size of ((10 integer)) is 1
setm: ((10 integer)): setting 1015 to 0
run: 54 split 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
m: ((10 integer))
sizeof: ((10 integer))
m: ((3 integer))
sizeof: ((3 integer))
run: nil => ((8 boolean))
setm: ((8 boolean)) <= nil
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1013 to nil
run: 55 split 20: (((jump-if)) ((8 boolean)) ((17 offset)))
m: ((8 boolean))
sizeof: ((8 boolean))
run: 56 split 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
m: ((1 string-address))
sizeof: ((1 string-address))
m: ((2 character))
sizeof: ((2 character))
m: ((10 integer))
sizeof: ((10 integer))
run: 57 find-next 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 0)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: 58 find-next 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 0)
run: #\/ => ((2 character))
setm: ((2 character)) <= #\/
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 2 to #\/
run: 59 find-next 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 0)
run: 0 => ((3 integer))
setm: ((3 integer)) <= 0
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 0
run: 60 find-next 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer))
sizeof: ((1000 integer))
run: 3 => ((4 integer))
setm: ((4 integer)) <= 3
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 4 to 3
run: 61 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: 62 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
run: 63 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1001 byte) (raw))
sizeof: ((1001 byte) (raw))
run: #\a => ((6 byte))
setm: ((6 byte)) <= #\a
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to #\a
run: 64 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: nil => ((7 boolean))
setm: ((7 boolean)) <= nil
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to nil
run: 65 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
run: 66 find-next 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
m: ((3 integer))
sizeof: ((3 integer))
run: 1 => ((3 integer))
setm: ((3 integer)) <= 1
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 1
run: 67 find-next 10: (((jump)) ((-7 offset)))
run: 68 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: 69 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
run: 70 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1002 byte) (raw))
sizeof: ((1002 byte) (raw))
run: #\/ => ((6 byte))
setm: ((6 byte)) <= #\/
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to #\/
run: 71 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: t => ((7 boolean))
setm: ((7 boolean)) <= t
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to t
run: 72 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
run: 73 find-next 11: (((reply)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
reply: (((3 integer))) (((11 integer)))
reply: 1 => ((11 integer))
setm: ((11 integer)) <= 1
setm: size of ((11 integer)) is 1
setm: ((11 integer)): setting 1016 to 1
run: 74 split 22: (((12 integer)) <- ((subtract)) ((11 integer)) ((10 integer)))
m: ((11 integer))
sizeof: ((11 integer))
m: ((10 integer))
sizeof: ((10 integer))
run: 1 => ((12 integer))
setm: ((12 integer)) <= 1
setm: size of ((12 integer)) is 1
setm: ((12 integer)): setting 1017 to 1
run: 75 split 23: (((13 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
m: ((9 integer))
sizeof: ((9 integer))
array-len: ((1035 string-address-array) (raw))
m: ((1035 integer) (raw))
sizeof: ((1035 integer) (raw))
sizeof: ((_ string-address))
run: 1036 => ((13 string-address-address))
setm: ((13 string-address-address)) <= 1036
setm: size of ((13 string-address-address)) is 1
setm: ((13 string-address-address)): setting 1018 to 1036
run: 76 split 24: (((13 string-address-address) (deref)) <- ((new)) ((string literal)) ((12 integer)))
m: ((12 integer))
sizeof: ((12 integer))
sizeof: ((_ byte))
run: 1038 => ((13 string-address-address) (deref))
setm: ((13 string-address-address) (deref)) <= 1038
setm: size of ((13 string-address-address) (deref)) is 1
setm: ((13 string-address-address) (deref)): setting 1036 to 1038
run: 77 split 25: (((14 integer)) <- ((copy)) ((10 integer)))
m: ((10 integer))
sizeof: ((10 integer))
run: 0 => ((14 integer))
setm: ((14 integer)) <= 0
setm: size of ((14 integer)) is 1
setm: ((14 integer)): setting 1019 to 0
run: 78 split 26: (((15 integer)) <- ((copy)) ((0 literal)))
run: 0 => ((15 integer))
setm: ((15 integer)) <= 0
setm: size of ((15 integer)) is 1
setm: ((15 integer)): setting 1020 to 0
run: 79 split 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
m: ((14 integer))
sizeof: ((14 integer))
m: ((11 integer))
sizeof: ((11 integer))
run: nil => ((16 boolean))
setm: ((16 boolean)) <= nil
setm: size of ((16 boolean)) is 1
setm: ((16 boolean)): setting 1021 to nil
run: 80 split 28: (((jump-if)) ((16 boolean)) ((6 offset)))
m: ((16 boolean))
sizeof: ((16 boolean))
run: 81 split 29: (((17 character)) <- ((index)) ((1 string-address) (deref)) ((14 integer)))
m: ((14 integer))
sizeof: ((14 integer))
array-len: ((1000 string) (raw))
m: ((1000 integer) (raw))
sizeof: ((1000 integer) (raw))
sizeof: ((_ byte))
m: ((1001 byte) (raw))
sizeof: ((1001 byte) (raw))
run: #\a => ((17 character))
setm: ((17 character)) <= #\a
setm: size of ((17 character)) is 1
setm: ((17 character)): setting 1022 to #\a
run: 82 split 30: (((18 character-address)) <- ((index-address)) ((13 string-address-address) (deref) (deref)) ((15 integer)))
m: ((15 integer))
sizeof: ((15 integer))
array-len: ((1038 string) (raw))
m: ((1038 integer) (raw))
sizeof: ((1038 integer) (raw))
sizeof: ((_ byte))
run: 1039 => ((18 character-address))
setm: ((18 character-address)) <= 1039
setm: size of ((18 character-address)) is 1
setm: ((18 character-address)): setting 1023 to 1039
run: 83 split 31: (((18 character-address) (deref)) <- ((copy)) ((17 character)))
m: ((17 character))
sizeof: ((17 character))
run: #\a => ((18 character-address) (deref))
setm: ((18 character-address) (deref)) <= #\a
setm: size of ((18 character-address) (deref)) is 1
setm: ((18 character-address) (deref)): setting 1039 to #\a
run: 84 split 32: (((14 integer)) <- ((add)) ((14 integer)) ((1 literal)))
m: ((14 integer))
sizeof: ((14 integer))
run: 1 => ((14 integer))
setm: ((14 integer)) <= 1
setm: size of ((14 integer)) is 1
setm: ((14 integer)): setting 1019 to 1
run: 85 split 33: (((15 integer)) <- ((add)) ((15 integer)) ((1 literal)))
m: ((15 integer))
sizeof: ((15 integer))
run: 1 => ((15 integer))
setm: ((15 integer)) <= 1
setm: size of ((15 integer)) is 1
setm: ((15 integer)): setting 1020 to 1
run: 86 split 34: (((jump)) ((-8 offset)))
run: 87 split 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
m: ((14 integer))
sizeof: ((14 integer))
m: ((11 integer))
sizeof: ((11 integer))
run: t => ((16 boolean))
setm: ((16 boolean)) <= t
setm: size of ((16 boolean)) is 1
setm: ((16 boolean)): setting 1021 to t
run: 88 split 28: (((jump-if)) ((16 boolean)) ((6 offset)))
m: ((16 boolean))
sizeof: ((16 boolean))
run: 89 split 35: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
m: ((11 integer))
sizeof: ((11 integer))
run: 2 => ((10 integer))
setm: ((10 integer)) <= 2
setm: size of ((10 integer)) is 1
setm: ((10 integer)): setting 1015 to 2
run: 90 split 36: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
m: ((9 integer))
sizeof: ((9 integer))
run: 1 => ((9 integer))
setm: ((9 integer)) <= 1
setm: size of ((9 integer)) is 1
setm: ((9 integer)): setting 1014 to 1
run: 91 split 37: (((jump)) ((-19 offset)))
run: 92 split 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
m: ((10 integer))
sizeof: ((10 integer))
m: ((3 integer))
sizeof: ((3 integer))
run: nil => ((8 boolean))
setm: ((8 boolean)) <= nil
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1013 to nil
run: 93 split 20: (((jump-if)) ((8 boolean)) ((17 offset)))
m: ((8 boolean))
sizeof: ((8 boolean))
run: 94 split 21: (((11 integer)) <- ((find-next)) ((1 string-address)) ((2 character)) ((10 integer)))
m: ((1 string-address))
sizeof: ((1 string-address))
m: ((2 character))
sizeof: ((2 character))
m: ((10 integer))
sizeof: ((10 integer))
run: 95 find-next 0: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\/ 2)
run: 1000 => ((1 string-address))
setm: ((1 string-address)) <= 1000
setm: size of ((1 string-address)) is 1
setm: ((1 string-address)): setting 1 to 1000
run: 96 find-next 1: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\/ 2)
run: #\/ => ((2 character))
setm: ((2 character)) <= #\/
setm: size of ((2 character)) is 1
setm: ((2 character)): setting 2 to #\/
run: 97 find-next 2: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\/ 2)
run: 2 => ((3 integer))
setm: ((3 integer)) <= 2
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 2
run: 98 find-next 3: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
m: ((1000 integer))
sizeof: ((1000 integer))
run: 3 => ((4 integer))
setm: ((4 integer)) <= 3
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 4 to 3
run: 99 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: 100 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
run: 101 find-next 6: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
array-len: ((1000 string))
m: ((1000 integer))
sizeof: ((1000 integer))
sizeof: ((_ byte))
m: ((1003 byte) (raw))
sizeof: ((1003 byte) (raw))
run: #\b => ((6 byte))
setm: ((6 byte)) <= #\b
setm: size of ((6 byte)) is 1
setm: ((6 byte)): setting 6 to #\b
run: 102 find-next 7: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
m: ((6 byte))
sizeof: ((6 byte))
m: ((2 character))
sizeof: ((2 character))
run: nil => ((7 boolean))
setm: ((7 boolean)) <= nil
setm: size of ((7 boolean)) is 1
setm: ((7 boolean)): setting 7 to nil
run: 103 find-next 8: (((jump-if)) ((7 boolean)) ((2 offset)))
m: ((7 boolean))
sizeof: ((7 boolean))
run: 104 find-next 9: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
m: ((3 integer))
sizeof: ((3 integer))
run: 3 => ((3 integer))
setm: ((3 integer)) <= 3
setm: size of ((3 integer)) is 1
setm: ((3 integer)): setting 3 to 3
run: 105 find-next 10: (((jump)) ((-7 offset)))
run: 106 find-next 4: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
m: ((3 integer))
sizeof: ((3 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: t => ((5 boolean))
setm: ((5 boolean)) <= t
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to t
run: 107 find-next 5: (((jump-if)) ((5 boolean)) ((5 offset)))
m: ((5 boolean))
sizeof: ((5 boolean))
run: 108 find-next 11: (((reply)) ((3 integer)))
m: ((3 integer))
sizeof: ((3 integer))
reply: (((3 integer))) (((11 integer)))
reply: 3 => ((11 integer))
setm: ((11 integer)) <= 3
setm: size of ((11 integer)) is 1
setm: ((11 integer)): setting 1016 to 3
run: 109 split 22: (((12 integer)) <- ((subtract)) ((11 integer)) ((10 integer)))
m: ((11 integer))
sizeof: ((11 integer))
m: ((10 integer))
sizeof: ((10 integer))
run: 1 => ((12 integer))
setm: ((12 integer)) <= 1
setm: size of ((12 integer)) is 1
setm: ((12 integer)): setting 1017 to 1
run: 110 split 23: (((13 string-address-address)) <- ((index-address)) ((5 string-address-array-address) (deref)) ((9 integer)))
m: ((9 integer))
sizeof: ((9 integer))
array-len: ((1035 string-address-array) (raw))
m: ((1035 integer) (raw))
sizeof: ((1035 integer) (raw))
sizeof: ((_ string-address))
run: 1037 => ((13 string-address-address))
setm: ((13 string-address-address)) <= 1037
setm: size of ((13 string-address-address)) is 1
setm: ((13 string-address-address)): setting 1018 to 1037
run: 111 split 24: (((13 string-address-address) (deref)) <- ((new)) ((string literal)) ((12 integer)))
m: ((12 integer))
sizeof: ((12 integer))
sizeof: ((_ byte))
run: 1040 => ((13 string-address-address) (deref))
setm: ((13 string-address-address) (deref)) <= 1040
setm: size of ((13 string-address-address) (deref)) is 1
setm: ((13 string-address-address) (deref)): setting 1037 to 1040
run: 112 split 25: (((14 integer)) <- ((copy)) ((10 integer)))
m: ((10 integer))
sizeof: ((10 integer))
run: 2 => ((14 integer))
setm: ((14 integer)) <= 2
setm: size of ((14 integer)) is 1
setm: ((14 integer)): setting 1019 to 2
run: 113 split 26: (((15 integer)) <- ((copy)) ((0 literal)))
run: 0 => ((15 integer))
setm: ((15 integer)) <= 0
setm: size of ((15 integer)) is 1
setm: ((15 integer)): setting 1020 to 0
run: 114 split 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
m: ((14 integer))
sizeof: ((14 integer))
m: ((11 integer))
sizeof: ((11 integer))
run: nil => ((16 boolean))
setm: ((16 boolean)) <= nil
setm: size of ((16 boolean)) is 1
setm: ((16 boolean)): setting 1021 to nil
run: 115 split 28: (((jump-if)) ((16 boolean)) ((6 offset)))
m: ((16 boolean))
sizeof: ((16 boolean))
run: 116 split 29: (((17 character)) <- ((index)) ((1 string-address) (deref)) ((14 integer)))
m: ((14 integer))
sizeof: ((14 integer))
array-len: ((1000 string) (raw))
m: ((1000 integer) (raw))
sizeof: ((1000 integer) (raw))
sizeof: ((_ byte))
m: ((1003 byte) (raw))
sizeof: ((1003 byte) (raw))
run: #\b => ((17 character))
setm: ((17 character)) <= #\b
setm: size of ((17 character)) is 1
setm: ((17 character)): setting 1022 to #\b
run: 117 split 30: (((18 character-address)) <- ((index-address)) ((13 string-address-address) (deref) (deref)) ((15 integer)))
m: ((15 integer))
sizeof: ((15 integer))
array-len: ((1040 string) (raw))
m: ((1040 integer) (raw))
sizeof: ((1040 integer) (raw))
sizeof: ((_ byte))
run: 1041 => ((18 character-address))
setm: ((18 character-address)) <= 1041
setm: size of ((18 character-address)) is 1
setm: ((18 character-address)): setting 1023 to 1041
run: 118 split 31: (((18 character-address) (deref)) <- ((copy)) ((17 character)))
m: ((17 character))
sizeof: ((17 character))
run: #\b => ((18 character-address) (deref))
setm: ((18 character-address) (deref)) <= #\b
setm: size of ((18 character-address) (deref)) is 1
setm: ((18 character-address) (deref)): setting 1041 to #\b
run: 119 split 32: (((14 integer)) <- ((add)) ((14 integer)) ((1 literal)))
m: ((14 integer))
sizeof: ((14 integer))
run: 3 => ((14 integer))
setm: ((14 integer)) <= 3
setm: size of ((14 integer)) is 1
setm: ((14 integer)): setting 1019 to 3
run: 120 split 33: (((15 integer)) <- ((add)) ((15 integer)) ((1 literal)))
m: ((15 integer))
sizeof: ((15 integer))
run: 1 => ((15 integer))
setm: ((15 integer)) <= 1
setm: size of ((15 integer)) is 1
setm: ((15 integer)): setting 1020 to 1
run: 121 split 34: (((jump)) ((-8 offset)))
run: 122 split 27: (((16 boolean)) <- ((greater-or-equal)) ((14 integer)) ((11 integer)))
m: ((14 integer))
sizeof: ((14 integer))
m: ((11 integer))
sizeof: ((11 integer))
run: t => ((16 boolean))
setm: ((16 boolean)) <= t
setm: size of ((16 boolean)) is 1
setm: ((16 boolean)): setting 1021 to t
run: 123 split 28: (((jump-if)) ((16 boolean)) ((6 offset)))
m: ((16 boolean))
sizeof: ((16 boolean))
run: 124 split 35: (((10 integer)) <- ((add)) ((11 integer)) ((1 literal)))
m: ((11 integer))
sizeof: ((11 integer))
run: 4 => ((10 integer))
setm: ((10 integer)) <= 4
setm: size of ((10 integer)) is 1
setm: ((10 integer)): setting 1015 to 4
run: 125 split 36: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
m: ((9 integer))
sizeof: ((9 integer))
run: 2 => ((9 integer))
setm: ((9 integer)) <= 2
setm: size of ((9 integer)) is 1
setm: ((9 integer)): setting 1014 to 2
run: 126 split 37: (((jump)) ((-19 offset)))
run: 127 split 19: (((8 boolean)) <- ((greater-or-equal)) ((10 integer)) ((3 integer)))
m: ((10 integer))
sizeof: ((10 integer))
m: ((3 integer))
sizeof: ((3 integer))
run: t => ((8 boolean))
setm: ((8 boolean)) <= t
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1013 to t
run: 128 split 20: (((jump-if)) ((8 boolean)) ((17 offset)))
m: ((8 boolean))
sizeof: ((8 boolean))
run: 129 split 38: (((reply)) ((5 string-address-array-address)))
m: ((5 string-address-array-address))
sizeof: ((5 string-address-array-address))
reply: (((5 string-address-array-address))) (((2 string-address-array-address)))
reply: 1035 => ((2 string-address-array-address))
setm: ((2 string-address-array-address)) <= 1035
setm: size of ((2 string-address-array-address)) is 1
setm: ((2 string-address-array-address)): setting 2 to 1035
schedule: done with routine 
