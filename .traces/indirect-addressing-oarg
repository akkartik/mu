c{0: 0 (((1 integer-address)) <- ((copy)) ((2 literal))) -- nil
c{0: 1 (((2 integer)) <- ((copy)) ((34 literal))) -- nil
c{0: 2 (((1 integer-address) (deref)) <- ((add)) ((2 integer)) ((2 literal))) -- nil
c{1: 0 âœ“ (((1 integer-address)) <- ((copy)) ((2 literal)))
c{1: 1 âœ“ (((2 integer)) <- ((copy)) ((34 literal)))
c{1: 2 âœ“ (((1 integer-address) (deref)) <- ((add)) ((2 integer)) ((2 literal)))
cn0: convert-names in main
cn0: (((1 integer-address)) <- ((copy)) ((2 literal))) nil nil
cn0: checking arg ((2 literal))
cn0: checking oarg ((1 integer-address))
maybe-add: ((1 integer-address))
cn0: (((2 integer)) <- ((copy)) ((34 literal))) nil nil
cn0: checking arg ((34 literal))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: (((1 integer-address) (deref)) <- ((add)) ((2 integer)) ((2 literal))) nil nil
cn0: checking arg ((2 integer))
maybe-add: ((2 integer))
cn0: checking arg ((2 literal))
cn0: checking oarg ((1 integer-address) (deref))
maybe-add: ((1 integer-address) (deref))
cn1: (((1 integer-address)) <- ((copy)) ((2 literal)))
cn1: (((2 integer)) <- ((copy)) ((34 literal)))
cn1: (((1 integer-address) (deref)) <- ((add)) ((2 integer)) ((2 literal)))
schedule: main
run: main 0: (((1 integer-address)) <- ((copy)) ((2 literal)))
run: main 0: 2 => ((1 integer-address))
mem: ((1 integer-address)): 1 <= 2
run: main 1: (((2 integer)) <- ((copy)) ((34 literal)))
run: main 1: 34 => ((2 integer))
mem: ((2 integer)): 2 <= 34
run: main 2: (((1 integer-address) (deref)) <- ((add)) ((2 integer)) ((2 literal)))
mem: ((2 integer)) => 34
run: main 2: 36 => ((1 integer-address) (deref))
mem: ((1 integer-address) (deref)): 2 <= 36
schedule: done with routine nil
