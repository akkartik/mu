9991 parse: --- defining main
9993 parse: instruction: test
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   ingredient: {"4": "literal"}
9993 parse:   product: {"_": "dummy"}
9992 load: after rewriting: _ <- test 3, 4
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:number
9999 parse: header product: z:point
9991 parse: --- defining test
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: merge
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"a": <>}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"z": <>}
9992 load: after rewriting: z <- merge a, 0
9999 parse: recipe test has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:number
9999 parse: header ingredient: b:number
9999 parse: header product: z:point
9991 parse: --- defining test_2
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: merge
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"a": <>}
9993 parse:   ingredient: {"b": <>}
9993 parse:   product: {"z": <>}
9992 load: after rewriting: z <- merge a, b
9999 parse: recipe test_2 has a header
9990 transform: === transform_all()
9991 transform: --- checking reply instructions against header for test
9991 transform: --- checking reply instructions against header for test_2
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe test
9991 transform: --- fill in reply ingredients from header for recipe test_2
9991 transform: --- deduce types for recipe main
9991 transform: --- deduce types for recipe test
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: a => number
9992 transform: a <= number
9992 transform: z => point
9991 transform: --- deduce types for recipe test_2
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: a => number
9992 transform: b => number
9992 transform: a <= number
9992 transform: b <= number
9992 transform: z => point
9991 transform: --- deduce types from header for test
9993 transform: type of a is number
9993 transform: type of z is point
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: a:number <- next-ingredient-without-typechecking 
9993 transform:   product: a: number -- {"a": "number"}
9992 transform: instruction: z <- merge a, 0
9993 transform:   product: z: NULLNULLNULL -- {"z": <>}
9993 transform: type of z is point
9992 transform: instruction: reply z:point
9991 transform: --- deduce types from header for test_2
9993 transform: type of a is number
9993 transform: type of b is number
9993 transform: type of z is point
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: a:number <- next-ingredient-without-typechecking 
9993 transform:   product: a: number -- {"a": "number"}
9992 transform: instruction: b:number <- next-ingredient-without-typechecking 
9993 transform:   product: b: number -- {"b": "number"}
9992 transform: instruction: z <- merge a, b
9993 transform:   product: z: NULLNULLNULL -- {"z": <>}
9993 transform: type of z is point
9992 transform: instruction: reply z:point
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe test
9991 transform: --- collect surrounding spaces for recipe test_2
9991 transform: --- transform names for recipe main
9991 transform: --- transform names for recipe test
9993 name: assign a 1
9993 name: assign z 2
9991 transform: --- transform names for recipe test_2
9993 name: assign a 1
9993 name: assign b 2
9993 name: assign z 3
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction test
9993 transform: strict match: ingredient 0
9992 transform: score for base: 999
9993 transform: strict match: ingredient 0
9992 transform: score for variant 5: 999
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9992 transform: score for variant 6: 1000
9991 transform: --- resolve ambiguous calls for recipe test
9991 transform: --- resolve ambiguous calls for recipe test_2
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe test
9991 transform: --- compute instruction operations for recipe test_2
9991 transform: --- transform braces for recipe main
9992 transform: test ...
9992 transform:  ...
9991 transform: --- transform braces for recipe test
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: merge ...
9992 transform:  ...
9991 transform: --- transform braces for recipe test_2
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: merge ...
9992 transform:  ...
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe test
9991 transform: --- perform checks for recipe test_2
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe test
9991 transform: --- type-check 'call' instructions inside recipe test_2
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe test
9991 transform: --- type-check calls inside recipe test_2
9991 transform: --- convert 'new' to 'allocate' for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe test
9992 new: size of "location" is 1
9991 transform: --- convert 'new' to 'allocate' for recipe test_2
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for test
9991 transform: --- checking reply instructions against header for test_2
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: _ <- test_2 3, 4
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1000
9999 mem: storing 5 in location 1001
 103 run: a:number <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1003
 103 run: b:number <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1004
 103 run: z <- merge a, b
9999 mem: location 1003 is 3
9999 mem: location 1004 is 4
9999 mem: storing 3 in location 1005
9999 mem: storing 4 in location 1006
 103 run: reply z:point
9999 mem: location 1005 is 3
9999 mem: location 1006 is 4
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is [3, 4]
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
