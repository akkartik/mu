9991 parse: --- defining scenario_first_scenario_in_mu
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:number <- add 2, 2\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:number <- add 2, 2
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1 <- 4\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    1 <- 4
  ]
9999 parse: recipe scenario_first_scenario_in_mu has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_first_scenario_in_mu
9991 transform: --- deduce types for recipe scenario_first_scenario_in_mu
9991 transform: --- collect surrounding spaces for recipe scenario_first_scenario_in_mu
9991 transform: --- transform names for recipe scenario_first_scenario_in_mu
9991 transform: --- resolve ambiguous calls for recipe scenario_first_scenario_in_mu
9991 transform: --- compute instruction operations for recipe scenario_first_scenario_in_mu
9991 transform: --- transform braces for recipe scenario_first_scenario_in_mu
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_first_scenario_in_mu
9991 transform: --- type-check 'call' instructions inside recipe scenario_first_scenario_in_mu
9991 transform: --- type-check calls inside recipe scenario_first_scenario_in_mu
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_first_scenario_in_mu
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_first_scenario_in_mu
 102 run: run [
    1:number <- add 2, 2
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: add
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": "literal"}
9993 parse:   ingredient: {"2": "literal"}
9993 parse:   product: {"1": "number"}
9992 load: after rewriting: 1:number <- add 2, 2
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: add ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:number <- add 2, 2
9999 mem: storing 4 in location 1
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    1 <- 4
  ]
9999 run: checking location 1
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
