parse: instruction: run
parse:   ingredient: {name: "\n    1:address:array:character <- new [abc]\n    2:address:array:character <- new [bc]\n    3:boolean <- match-at 1:address:array:character, 2:address:array:character, 0:literal\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    3 <- 0  # no match\n  ", properties: [_: "literal-string"]}
after-brace: recipe scenario-match-at-inside-bounds-2
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: scenario-match-at-inside-bounds-2
 101 run: run [
    1:address:array:character <- new [abc]
    2:address:array:character <- new [bc]
    3:boolean <- match-at 1:address:array:character, 2:address:array:character, 0:literal
  ]
parse: instruction: new
parse:   ingredient: {name: "abc", properties: [_: "literal-string"]}
parse:   product: {name: "1", properties: ["1": "address":"array":"character"]}
parse: instruction: new
parse:   ingredient: {name: "bc", properties: [_: "literal-string"]}
parse:   product: {name: "2", properties: ["2": "address":"array":"character"]}
parse: instruction: match-at
parse:   ingredient: {name: "1", properties: ["1": "address":"array":"character"]}
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"character"]}
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   product: {name: "3", properties: ["3": "boolean"]}
after-brace: recipe run1001
after-brace: new ...
after-brace: new ...
after-brace: match-at ...
 101 run: 1:address:array:character <- new [abc]
9999 mem: storing 1000 in location 1
 101 run: 2:address:array:character <- new [bc]
9999 mem: storing 1004 in location 2
 101 run: 3:boolean <- match-at 1:address:array:character, 2:address:array:character, 0:literal
9999 mem: location 1 is 1000
9999 mem: location 2 is 1004
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
9999 mem: new alloc: 1007
 102 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1009
 102 run: pattern:address:array:character <- next-ingredient 
9999 mem: storing 1004 in location 1010
 102 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1011
 102 run: pattern-len:number <- length pattern:address:array:character/deref
9999 mem: location 1010 is 1004
9999 mem: location 1004 is 2
9999 mem: location 1005 is 98
9999 mem: location 1006 is 99
9999 mem: location 1010 is 1004
9999 mem: storing 2 in location 1012
 102 run: x:number <- length text:address:array:character/deref
9999 mem: location 1009 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: location 1009 is 1000
9999 mem: storing 3 in location 1013
 102 run: x:number <- subtract x:number, pattern-len:number
9999 mem: location 1013 is 3
9999 mem: location 1012 is 2
9999 mem: storing 1 in location 1013
 102 run: enough-room?:boolean <- lesser-or-equal idx:number, x:number
9999 mem: location 1011 is 0
9999 mem: location 1013 is 1
9999 mem: storing 1 in location 1014
 102 run: break-if enough-room?:boolean, 
9999 mem: location 1014 is 1
9999 run: jumping to instruction 11
 102 run: pattern-idx:number <- copy 0:literal
9999 mem: storing 0 in location 1015
 102 run: done?:boolean <- greater-or-equal pattern-idx:number, pattern-len:number
9999 mem: location 1015 is 0
9999 mem: location 1012 is 2
9999 mem: storing 0 in location 1016
 102 run: break-if done?:boolean, 
9999 mem: location 1016 is 0
9999 run: jump-if fell through
 102 run: c:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1009 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 97
9999 mem: location 1002 is 98
9999 mem: location 1003 is 99
9999 mem: location 1011 is 0
9999 mem: location 1009 is 1000
9999 mem: location 1011 is 0
9999 run: address to copy is 1001
9999 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1017
 102 run: exp:character <- index pattern:address:array:character/deref, pattern-idx:number
9999 mem: location 1010 is 1004
9999 mem: location 1004 is 2
9999 mem: location 1005 is 98
9999 mem: location 1006 is 99
9999 mem: location 1015 is 0
9999 mem: location 1010 is 1004
9999 mem: location 1015 is 0
9999 run: address to copy is 1005
9999 run: its type is character
9999 mem: location 1005 is 98
9999 mem: storing 98 in location 1018
 102 run: match?:boolean <- equal c:character, exp:character
9999 mem: location 1017 is 97
9999 mem: location 1018 is 98
9999 mem: storing 0 in location 1019
 102 run: break-if match?:boolean, 
9999 mem: location 1019 is 0
9999 run: jump-if fell through
 102 run: reply 0:literal/not-found
9999 run: result 0 is 0
9999 mem: storing 0 in location 3
 100 run: memory-should-contain [
    3 <- 0  # no match
  ]
9999 run: checking location 3
