9999 parse: instruction: run
9999 parse:   ingredient: {name: "\n    # reserve locations 0, 1 and 2 to check for missing null check\n    1:number <- copy 34\n    2:number <- copy 35\n    3:address:duplex-list <- copy 0\n    3:address:duplex-list <- push-duplex 3, 3:address:duplex-list\n    3:address:duplex-list <- push-duplex 4, 3:address:duplex-list\n    3:address:duplex-list <- push-duplex 5, 3:address:duplex-list\n    4:address:duplex-list <- copy 3:address:duplex-list\n    5:character <- first-duplex 4:address:duplex-list\n    4:address:duplex-list <- next-duplex 4:address:duplex-list\n    6:character <- first-duplex 4:address:duplex-list\n    4:address:duplex-list <- next-duplex 4:address:duplex-list\n    7:character <- first-duplex 4:address:duplex-list\n    8:address:duplex-list <- next-duplex 4:address:duplex-list\n    9:character <- first-duplex 8:address:duplex-list\n    10:address:duplex-list <- next-duplex 8:address:duplex-list\n    11:address:duplex-list <- prev-duplex 8:address:duplex-list\n    4:address:duplex-list <- prev-duplex 4:address:duplex-list\n    12:character <- first-duplex 4:address:duplex-list\n    4:address:duplex-list <- prev-duplex 4:address:duplex-list\n    13:character <- first-duplex 4:address:duplex-list\n    14:boolean <- equal 3:address:duplex-list, 4:address:duplex-list\n  ", properties: [_: "literal-string"]}
9999 parse: instruction: memory-should-contain
9999 parse:   ingredient: {name: "\n    0 <- 0  # no modifications to null pointers\n    1 <- 34\n    2 <- 35\n    5 <- 5  # scanning next\n    6 <- 4\n    7 <- 3\n    8 <- 0  # null\n    9 <- 0  # first of null\n    10 <- 0  # next of null\n    11 <- 0  # prev of null\n    12 <- 4  # then start scanning prev\n    13 <- 5\n    14 <- 1  # list back at start\n  ", properties: [_: "literal-string"]}
9999 after-brace: recipe scenario-duplex-list-handling
9999 after-brace: run ...
9999 after-brace: memory-should-contain ...
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9999 schedule: scenario-duplex-list-handling
 102 run: run [
    # reserve locations 0, 1 and 2 to check for missing null check
    1:number <- copy 34
    2:number <- copy 35
    3:address:duplex-list <- copy 0
    3:address:duplex-list <- push-duplex 3, 3:address:duplex-list
    3:address:duplex-list <- push-duplex 4, 3:address:duplex-list
    3:address:duplex-list <- push-duplex 5, 3:address:duplex-list
    4:address:duplex-list <- copy 3:address:duplex-list
    5:character <- first-duplex 4:address:duplex-list
    4:address:duplex-list <- next-duplex 4:address:duplex-list
    6:character <- first-duplex 4:address:duplex-list
    4:address:duplex-list <- next-duplex 4:address:duplex-list
    7:character <- first-duplex 4:address:duplex-list
    8:address:duplex-list <- next-duplex 4:address:duplex-list
    9:character <- first-duplex 8:address:duplex-list
    10:address:duplex-list <- next-duplex 8:address:duplex-list
    11:address:duplex-list <- prev-duplex 8:address:duplex-list
    4:address:duplex-list <- prev-duplex 4:address:duplex-list
    12:character <- first-duplex 4:address:duplex-list
    4:address:duplex-list <- prev-duplex 4:address:duplex-list
    13:character <- first-duplex 4:address:duplex-list
    14:boolean <- equal 3:address:duplex-list, 4:address:duplex-list
  ]
9999 parse: instruction: copy
9999 parse:   ingredient: {name: "34", properties: ["34": "literal"]}
9999 parse:   product: {name: "1", properties: ["1": "number"]}
9999 parse: instruction: copy
9999 parse:   ingredient: {name: "35", properties: ["35": "literal"]}
9999 parse:   product: {name: "2", properties: ["2": "number"]}
9999 parse: instruction: copy
9999 parse:   ingredient: {name: "0", properties: ["0": "literal"]}
9999 parse:   product: {name: "3", properties: ["3": "address":"duplex-list"]}
9999 parse: instruction: push-duplex
9999 parse:   ingredient: {name: "3", properties: ["3": "literal"]}
9999 parse:   ingredient: {name: "3", properties: ["3": "address":"duplex-list"]}
9999 parse:   product: {name: "3", properties: ["3": "address":"duplex-list"]}
9999 parse: instruction: push-duplex
9999 parse:   ingredient: {name: "4", properties: ["4": "literal"]}
9999 parse:   ingredient: {name: "3", properties: ["3": "address":"duplex-list"]}
9999 parse:   product: {name: "3", properties: ["3": "address":"duplex-list"]}
9999 parse: instruction: push-duplex
9999 parse:   ingredient: {name: "5", properties: ["5": "literal"]}
9999 parse:   ingredient: {name: "3", properties: ["3": "address":"duplex-list"]}
9999 parse:   product: {name: "3", properties: ["3": "address":"duplex-list"]}
9999 parse: instruction: copy
9999 parse:   ingredient: {name: "3", properties: ["3": "address":"duplex-list"]}
9999 parse:   product: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse: instruction: first-duplex
9999 parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse:   product: {name: "5", properties: ["5": "character"]}
9999 parse: instruction: next-duplex
9999 parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse:   product: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse: instruction: first-duplex
9999 parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse:   product: {name: "6", properties: ["6": "character"]}
9999 parse: instruction: next-duplex
9999 parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse:   product: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse: instruction: first-duplex
9999 parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse:   product: {name: "7", properties: ["7": "character"]}
9999 parse: instruction: next-duplex
9999 parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse:   product: {name: "8", properties: ["8": "address":"duplex-list"]}
9999 parse: instruction: first-duplex
9999 parse:   ingredient: {name: "8", properties: ["8": "address":"duplex-list"]}
9999 parse:   product: {name: "9", properties: ["9": "character"]}
9999 parse: instruction: next-duplex
9999 parse:   ingredient: {name: "8", properties: ["8": "address":"duplex-list"]}
9999 parse:   product: {name: "10", properties: ["10": "address":"duplex-list"]}
9999 parse: instruction: prev-duplex
9999 parse:   ingredient: {name: "8", properties: ["8": "address":"duplex-list"]}
9999 parse:   product: {name: "11", properties: ["11": "address":"duplex-list"]}
9999 parse: instruction: prev-duplex
9999 parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse:   product: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse: instruction: first-duplex
9999 parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse:   product: {name: "12", properties: ["12": "character"]}
9999 parse: instruction: prev-duplex
9999 parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse:   product: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse: instruction: first-duplex
9999 parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse:   product: {name: "13", properties: ["13": "character"]}
9999 parse: instruction: equal
9999 parse:   ingredient: {name: "3", properties: ["3": "address":"duplex-list"]}
9999 parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
9999 parse:   product: {name: "14", properties: ["14": "boolean"]}
9999 after-brace: recipe run1001
9999 after-brace: copy ...
9999 after-brace: copy ...
9999 after-brace: copy ...
9999 after-brace: push-duplex ...
9999 after-brace: push-duplex ...
9999 after-brace: push-duplex ...
9999 after-brace: copy ...
9999 after-brace: first-duplex ...
9999 after-brace: next-duplex ...
9999 after-brace: first-duplex ...
9999 after-brace: next-duplex ...
9999 after-brace: first-duplex ...
9999 after-brace: next-duplex ...
9999 after-brace: first-duplex ...
9999 after-brace: next-duplex ...
9999 after-brace: prev-duplex ...
9999 after-brace: prev-duplex ...
9999 after-brace: first-duplex ...
9999 after-brace: prev-duplex ...
9999 after-brace: first-duplex ...
9999 after-brace: equal ...
9999 trace: run: incrementing callstack depth to 2
 103 run: 1:number <- copy 34
9999 mem: storing 34 in location 1
 103 run: 2:number <- copy 35
9999 mem: storing 35 in location 2
 103 run: 3:address:duplex-list <- copy 0
9999 mem: storing 0 in location 3
 103 run: 3:address:duplex-list <- push-duplex 3, 3:address:duplex-list
9999 mem: location 3 is 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1000
 104 run: x:character <- next-ingredient 
9999 mem: storing 3 in location 1002
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 0 in location 1003
 104 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
 104 run: val:address:character <- get-address *result, value:offset
9999 mem: location 1004 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 3
9999 mem: location 1005 is 1008
9999 mem: storing 3 in location 1008
 104 run: next:address:address:duplex-list <- get-address *result, next:offset
9999 mem: location 1004 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1009
9999 mem: storing 0 in location 1009
 104 run: jump-if in, 1:offset
9999 mem: location 1003 is 0
9999 run: jump-if fell through
 104 run: reply result
9999 mem: location 1004 is 1008
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1008
9999 mem: storing 1008 in location 3
 103 run: 3:address:duplex-list <- push-duplex 4, 3:address:duplex-list
9999 mem: location 3 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 104 run: x:character <- next-ingredient 
9999 mem: storing 4 in location 1002
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1008 in location 1003
 104 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1011
9999 mem: storing 1011 in location 1004
 104 run: val:address:character <- get-address *result, value:offset
9999 mem: location 1004 is 1011
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1004 is 1011
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 4
9999 mem: location 1005 is 1011
9999 mem: storing 4 in location 1011
 104 run: next:address:address:duplex-list <- get-address *result, next:offset
9999 mem: location 1004 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1004 is 1011
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 1008
9999 mem: location 1006 is 1012
9999 mem: storing 1008 in location 1012
 104 run: jump-if in, 1:offset
9999 mem: location 1003 is 1008
9999 run: jumping to instruction 10
 104 run: prev:address:address:duplex-list <- get-address *in, prev:offset
9999 mem: location 1003 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1003 is 1008
9999 run: address to copy is 1010
9999 mem: storing 1010 in location 1007
 104 run: *prev <- copy result
9999 mem: location 1004 is 1011
9999 mem: location 1007 is 1010
9999 mem: storing 1011 in location 1010
 104 run: reply result
9999 mem: location 1004 is 1011
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1011
9999 mem: storing 1011 in location 3
 103 run: 3:address:duplex-list <- push-duplex 5, 3:address:duplex-list
9999 mem: location 3 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 104 run: x:character <- next-ingredient 
9999 mem: storing 5 in location 1002
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1011 in location 1003
 104 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1014
9999 mem: storing 1014 in location 1004
 104 run: val:address:character <- get-address *result, value:offset
9999 mem: location 1004 is 1014
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1014
9999 run: address to copy is 1014
9999 mem: storing 1014 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 5
9999 mem: location 1005 is 1014
9999 mem: storing 5 in location 1014
 104 run: next:address:address:duplex-list <- get-address *result, next:offset
9999 mem: location 1004 is 1014
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1014
9999 run: address to copy is 1015
9999 mem: storing 1015 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 1011
9999 mem: location 1006 is 1015
9999 mem: storing 1011 in location 1015
 104 run: jump-if in, 1:offset
9999 mem: location 1003 is 1011
9999 run: jumping to instruction 10
 104 run: prev:address:address:duplex-list <- get-address *in, prev:offset
9999 mem: location 1003 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 0
9999 mem: location 1003 is 1011
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1007
 104 run: *prev <- copy result
9999 mem: location 1004 is 1014
9999 mem: location 1007 is 1013
9999 mem: storing 1014 in location 1013
 104 run: reply result
9999 mem: location 1004 is 1014
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1014
9999 mem: storing 1014 in location 3
 103 run: 4:address:duplex-list <- copy 3:address:duplex-list
9999 mem: location 3 is 1014
9999 mem: storing 1014 in location 4
 103 run: 5:character <- first-duplex 4:address:duplex-list
9999 mem: location 4 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1017
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1014 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1014
9999 run: jumping to instruction 4
 104 run: result:character <- get *in, value:offset
9999 mem: location 1019 is 1014
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1011
9999 mem: location 1016 is 0
9999 mem: location 1019 is 1014
9999 run: address to copy is 1014
9999 run: its type is character
9999 mem: location 1014 is 5
9999 mem: storing 5 in location 1020
 104 run: reply result
9999 mem: location 1020 is 5
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 5
9999 mem: storing 5 in location 5
 103 run: 4:address:duplex-list <- next-duplex 4:address:duplex-list
9999 mem: location 4 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1014 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1014
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1019 is 1014
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1011
9999 mem: location 1016 is 0
9999 mem: location 1019 is 1014
9999 run: address to copy is 1015
9999 run: its type is address
9999 mem: location 1015 is 1011
9999 mem: storing 1011 in location 1020
 104 run: reply result
9999 mem: location 1020 is 1011
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1011
9999 mem: storing 1011 in location 4
 103 run: 6:character <- first-duplex 4:address:duplex-list
9999 mem: location 4 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1011 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1011
9999 run: jumping to instruction 4
 104 run: result:character <- get *in, value:offset
9999 mem: location 1019 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1019 is 1011
9999 run: address to copy is 1011
9999 run: its type is character
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1020
 104 run: reply result
9999 mem: location 1020 is 4
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 4
9999 mem: storing 4 in location 6
 103 run: 4:address:duplex-list <- next-duplex 4:address:duplex-list
9999 mem: location 4 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1011 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1011
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1019 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1019 is 1011
9999 run: address to copy is 1012
9999 run: its type is address
9999 mem: location 1012 is 1008
9999 mem: storing 1008 in location 1020
 104 run: reply result
9999 mem: location 1020 is 1008
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1008
9999 mem: storing 1008 in location 4
 103 run: 7:character <- first-duplex 4:address:duplex-list
9999 mem: location 4 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1008 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1008
9999 run: jumping to instruction 4
 104 run: result:character <- get *in, value:offset
9999 mem: location 1019 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: location 1019 is 1008
9999 run: address to copy is 1008
9999 run: its type is character
9999 mem: location 1008 is 3
9999 mem: storing 3 in location 1020
 104 run: reply result
9999 mem: location 1020 is 3
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 7
 103 run: 8:address:duplex-list <- next-duplex 4:address:duplex-list
9999 mem: location 4 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1008 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1008
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1019 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: location 1019 is 1008
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1020
 104 run: reply result
9999 mem: location 1020 is 0
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 0
9999 mem: storing 0 in location 8
 103 run: 9:character <- first-duplex 8:address:duplex-list
9999 mem: location 8 is 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 0 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 0
9999 run: jump-if fell through
 104 run: reply 0
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 0
9999 mem: storing 0 in location 9
 103 run: 10:address:duplex-list <- next-duplex 8:address:duplex-list
9999 mem: location 8 is 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 0 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 0
9999 run: jump-if fell through
 104 run: reply 0
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 0
9999 mem: storing 0 in location 10
 103 run: 11:address:duplex-list <- prev-duplex 8:address:duplex-list
9999 mem: location 8 is 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 0 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 0
9999 run: jump-if fell through
 104 run: reply 0
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 0
9999 mem: storing 0 in location 11
 103 run: 4:address:duplex-list <- prev-duplex 4:address:duplex-list
9999 mem: location 4 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1008 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1008
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, prev:offset
9999 mem: location 1019 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: location 1019 is 1008
9999 run: address to copy is 1010
9999 run: its type is address
9999 mem: location 1010 is 1011
9999 mem: storing 1011 in location 1020
 104 run: reply result
9999 mem: location 1020 is 1011
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1011
9999 mem: storing 1011 in location 4
 103 run: 12:character <- first-duplex 4:address:duplex-list
9999 mem: location 4 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1011 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1011
9999 run: jumping to instruction 4
 104 run: result:character <- get *in, value:offset
9999 mem: location 1019 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1019 is 1011
9999 run: address to copy is 1011
9999 run: its type is character
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1020
 104 run: reply result
9999 mem: location 1020 is 4
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 4
9999 mem: storing 4 in location 12
 103 run: 4:address:duplex-list <- prev-duplex 4:address:duplex-list
9999 mem: location 4 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1011 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1011
9999 run: jumping to instruction 4
 104 run: result:address:duplex-list <- get *in, prev:offset
9999 mem: location 1019 is 1011
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1019 is 1011
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1020
 104 run: reply result
9999 mem: location 1020 is 1014
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1014
9999 mem: storing 1014 in location 4
 103 run: 13:character <- first-duplex 4:address:duplex-list
9999 mem: location 4 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1014 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1014
9999 run: jumping to instruction 4
 104 run: result:character <- get *in, value:offset
9999 mem: location 1019 is 1014
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1011
9999 mem: location 1016 is 0
9999 mem: location 1019 is 1014
9999 run: address to copy is 1014
9999 run: its type is character
9999 mem: location 1014 is 5
9999 mem: storing 5 in location 1020
 104 run: reply result
9999 mem: location 1020 is 5
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 5
9999 mem: storing 5 in location 13
 103 run: 14:boolean <- equal 3:address:duplex-list, 4:address:duplex-list
9999 mem: location 3 is 1014
9999 mem: location 4 is 1014
9999 mem: storing 1 in location 14
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    0 <- 0  # no modifications to null pointers
    1 <- 34
    2 <- 35
    5 <- 5  # scanning next
    6 <- 4
    7 <- 3
    8 <- 0  # null
    9 <- 0  # first of null
    10 <- 0  # next of null
    11 <- 0  # prev of null
    12 <- 4  # then start scanning prev
    13 <- 5
    14 <- 1  # list back at start
  ]
9999 run: checking location 0
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
9999 run: checking location 14
9999 trace: fall-through: exiting scenario-duplex-list-handling; decrementing callstack depth from 1
