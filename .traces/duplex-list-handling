parse: instruction: run
parse:   ingredient: {name: "\n    # reserve locations 0, 1 and 2 to check for missing null check\n    1:number <- copy 34:literal\n    2:number <- copy 35:literal\n    3:address:duplex-list <- copy 0:literal\n    3:address:duplex-list <- push-duplex 3:literal, 3:address:duplex-list\n    3:address:duplex-list <- push-duplex 4:literal, 3:address:duplex-list\n    3:address:duplex-list <- push-duplex 5:literal, 3:address:duplex-list\n    4:address:duplex-list <- copy 3:address:duplex-list\n    5:number <- first 4:address:duplex-list\n    4:address:duplex-list <- next-duplex 4:address:duplex-list\n    6:number <- first 4:address:duplex-list\n    4:address:duplex-list <- next-duplex 4:address:duplex-list\n    7:number <- first 4:address:duplex-list\n    8:address:duplex-list <- next-duplex 4:address:duplex-list\n    9:number <- first 8:address:duplex-list\n    10:address:duplex-list <- next-duplex 8:address:duplex-list\n    11:address:duplex-list <- prev-duplex 8:address:duplex-list\n    4:address:duplex-list <- prev-duplex 4:address:duplex-list\n    12:number <- first 4:address:duplex-list\n    4:address:duplex-list <- prev-duplex 4:address:duplex-list\n    13:number <- first 4:address:duplex-list\n    14:boolean <- equal 3:address:duplex-list, 4:address:duplex-list\n#?     $dump-trace #? 1\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    0 <- 0  # no modifications to null pointers\n    1 <- 34\n    2 <- 35\n    5 <- 5  # scanning next\n    6 <- 4\n    7 <- 3\n    8 <- 0  # null\n    9 <- 0  # first of null\n    10 <- 0  # next of null\n    11 <- 0  # prev of null\n    12 <- 4  # then start scanning prev\n    13 <- 5\n    14 <- 1  # list back at start\n  ", properties: [_: "literal-string"]}
after-brace: recipe duplex-list-handling
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: duplex-list-handling
 101 run: run [
    # reserve locations 0, 1 and 2 to check for missing null check
    1:number <- copy 34:literal
    2:number <- copy 35:literal
    3:address:duplex-list <- copy 0:literal
    3:address:duplex-list <- push-duplex 3:literal, 3:address:duplex-list
    3:address:duplex-list <- push-duplex 4:literal, 3:address:duplex-list
    3:address:duplex-list <- push-duplex 5:literal, 3:address:duplex-list
    4:address:duplex-list <- copy 3:address:duplex-list
    5:number <- first 4:address:duplex-list
    4:address:duplex-list <- next-duplex 4:address:duplex-list
    6:number <- first 4:address:duplex-list
    4:address:duplex-list <- next-duplex 4:address:duplex-list
    7:number <- first 4:address:duplex-list
    8:address:duplex-list <- next-duplex 4:address:duplex-list
    9:number <- first 8:address:duplex-list
    10:address:duplex-list <- next-duplex 8:address:duplex-list
    11:address:duplex-list <- prev-duplex 8:address:duplex-list
    4:address:duplex-list <- prev-duplex 4:address:duplex-list
    12:number <- first 4:address:duplex-list
    4:address:duplex-list <- prev-duplex 4:address:duplex-list
    13:number <- first 4:address:duplex-list
    14:boolean <- equal 3:address:duplex-list, 4:address:duplex-list
#?     $dump-trace #? 1
  ]
parse: instruction: copy
parse:   ingredient: {name: "34", properties: ["34": "literal"]}
parse:   product: {name: "1", properties: ["1": "number"]}
parse: instruction: copy
parse:   ingredient: {name: "35", properties: ["35": "literal"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: instruction: copy
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   product: {name: "3", properties: ["3": "address":"duplex-list"]}
parse: instruction: push-duplex
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse:   ingredient: {name: "3", properties: ["3": "address":"duplex-list"]}
parse:   product: {name: "3", properties: ["3": "address":"duplex-list"]}
parse: instruction: push-duplex
parse:   ingredient: {name: "4", properties: ["4": "literal"]}
parse:   ingredient: {name: "3", properties: ["3": "address":"duplex-list"]}
parse:   product: {name: "3", properties: ["3": "address":"duplex-list"]}
parse: instruction: push-duplex
parse:   ingredient: {name: "5", properties: ["5": "literal"]}
parse:   ingredient: {name: "3", properties: ["3": "address":"duplex-list"]}
parse:   product: {name: "3", properties: ["3": "address":"duplex-list"]}
parse: instruction: copy
parse:   ingredient: {name: "3", properties: ["3": "address":"duplex-list"]}
parse:   product: {name: "4", properties: ["4": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
parse:   product: {name: "5", properties: ["5": "number"]}
parse: instruction: next-duplex
parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
parse:   product: {name: "4", properties: ["4": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
parse:   product: {name: "6", properties: ["6": "number"]}
parse: instruction: next-duplex
parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
parse:   product: {name: "4", properties: ["4": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
parse:   product: {name: "7", properties: ["7": "number"]}
parse: instruction: next-duplex
parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
parse:   product: {name: "8", properties: ["8": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "8", properties: ["8": "address":"duplex-list"]}
parse:   product: {name: "9", properties: ["9": "number"]}
parse: instruction: next-duplex
parse:   ingredient: {name: "8", properties: ["8": "address":"duplex-list"]}
parse:   product: {name: "10", properties: ["10": "address":"duplex-list"]}
parse: instruction: prev-duplex
parse:   ingredient: {name: "8", properties: ["8": "address":"duplex-list"]}
parse:   product: {name: "11", properties: ["11": "address":"duplex-list"]}
parse: instruction: prev-duplex
parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
parse:   product: {name: "4", properties: ["4": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
parse:   product: {name: "12", properties: ["12": "number"]}
parse: instruction: prev-duplex
parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
parse:   product: {name: "4", properties: ["4": "address":"duplex-list"]}
parse: instruction: first
parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
parse:   product: {name: "13", properties: ["13": "number"]}
parse: instruction: equal
parse:   ingredient: {name: "3", properties: ["3": "address":"duplex-list"]}
parse:   ingredient: {name: "4", properties: ["4": "address":"duplex-list"]}
parse:   product: {name: "14", properties: ["14": "boolean"]}
after-brace: recipe run1001
after-brace: copy ...
after-brace: copy ...
after-brace: copy ...
after-brace: push-duplex ...
after-brace: push-duplex ...
after-brace: push-duplex ...
after-brace: copy ...
after-brace: first ...
after-brace: next-duplex ...
after-brace: first ...
after-brace: next-duplex ...
after-brace: first ...
after-brace: next-duplex ...
after-brace: first ...
after-brace: next-duplex ...
after-brace: prev-duplex ...
after-brace: prev-duplex ...
after-brace: first ...
after-brace: prev-duplex ...
after-brace: first ...
after-brace: equal ...
 101 run: 1:number <- copy 34:literal
9999 mem: storing 34 in location 1
 101 run: 2:number <- copy 35:literal
9999 mem: storing 35 in location 2
 101 run: 3:address:duplex-list <- copy 0:literal
9999 mem: storing 0 in location 3
 101 run: 3:address:duplex-list <- push-duplex 3:literal, 3:address:duplex-list
9999 mem: location 3 is 0
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1000
 102 run: x:location <- next-ingredient 
9999 mem: storing 3 in location 1002
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 0 in location 1003
 102 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1031
9999 mem: storing 1031 in location 1004
 102 run: val:address:location <- get-address result:address:duplex-list/deref, value:offset
9999 mem: location 1004 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1004 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1005
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1002 is 3
9999 mem: location 1005 is 1031
9999 mem: storing 3 in location 1031
 102 run: next:address:address:duplex-list <- get-address result:address:duplex-list/deref, next:offset
9999 mem: location 1004 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1004 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1006
 102 run: next:address:address:duplex-list/deref <- copy in:address:duplex-list
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1032
9999 mem: storing 0 in location 1032
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1003 is 0
9999 run: jump-if fell through
 102 run: reply result:address:duplex-list
9999 mem: location 1004 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 3
 101 run: 3:address:duplex-list <- push-duplex 4:literal, 3:address:duplex-list
9999 mem: location 3 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1034
 102 run: x:location <- next-ingredient 
9999 mem: storing 4 in location 1036
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1031 in location 1037
 102 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1065
9999 mem: storing 1065 in location 1038
 102 run: val:address:location <- get-address result:address:duplex-list/deref, value:offset
9999 mem: location 1038 is 1065
9999 mem: location 1065 is 0
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: location 1038 is 1065
9999 run: address to copy is 1065
9999 mem: storing 1065 in location 1039
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1036 is 4
9999 mem: location 1039 is 1065
9999 mem: storing 4 in location 1065
 102 run: next:address:address:duplex-list <- get-address result:address:duplex-list/deref, next:offset
9999 mem: location 1038 is 1065
9999 mem: location 1065 is 4
9999 mem: location 1066 is 0
9999 mem: location 1067 is 0
9999 mem: location 1038 is 1065
9999 run: address to copy is 1066
9999 mem: storing 1066 in location 1040
 102 run: next:address:address:duplex-list/deref <- copy in:address:duplex-list
9999 mem: location 1037 is 1031
9999 mem: location 1040 is 1066
9999 mem: storing 1031 in location 1066
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1037 is 1031
9999 run: jumping to instruction 10
 102 run: prev:address:address:duplex-list <- get-address in:address:duplex-list/deref, prev:offset
9999 mem: location 1037 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1037 is 1031
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1041
 102 run: prev:address:address:duplex-list/deref <- copy result:address:duplex-list
9999 mem: location 1038 is 1065
9999 mem: location 1041 is 1033
9999 mem: storing 1065 in location 1033
 102 run: reply result:address:duplex-list
9999 mem: location 1038 is 1065
9999 run: result 0 is 1065
9999 mem: storing 1065 in location 3
 101 run: 3:address:duplex-list <- push-duplex 5:literal, 3:address:duplex-list
9999 mem: location 3 is 1065
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1068
 102 run: x:location <- next-ingredient 
9999 mem: storing 5 in location 1070
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1065 in location 1071
 102 run: result:address:duplex-list <- new duplex-list:type
9999 mem: new alloc: 1099
9999 mem: storing 1099 in location 1072
 102 run: val:address:location <- get-address result:address:duplex-list/deref, value:offset
9999 mem: location 1072 is 1099
9999 mem: location 1099 is 0
9999 mem: location 1100 is 0
9999 mem: location 1101 is 0
9999 mem: location 1072 is 1099
9999 run: address to copy is 1099
9999 mem: storing 1099 in location 1073
 102 run: val:address:location/deref <- copy x:location
9999 mem: location 1070 is 5
9999 mem: location 1073 is 1099
9999 mem: storing 5 in location 1099
 102 run: next:address:address:duplex-list <- get-address result:address:duplex-list/deref, next:offset
9999 mem: location 1072 is 1099
9999 mem: location 1099 is 5
9999 mem: location 1100 is 0
9999 mem: location 1101 is 0
9999 mem: location 1072 is 1099
9999 run: address to copy is 1100
9999 mem: storing 1100 in location 1074
 102 run: next:address:address:duplex-list/deref <- copy in:address:duplex-list
9999 mem: location 1071 is 1065
9999 mem: location 1074 is 1100
9999 mem: storing 1065 in location 1100
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1071 is 1065
9999 run: jumping to instruction 10
 102 run: prev:address:address:duplex-list <- get-address in:address:duplex-list/deref, prev:offset
9999 mem: location 1071 is 1065
9999 mem: location 1065 is 4
9999 mem: location 1066 is 1031
9999 mem: location 1067 is 0
9999 mem: location 1071 is 1065
9999 run: address to copy is 1067
9999 mem: storing 1067 in location 1075
 102 run: prev:address:address:duplex-list/deref <- copy result:address:duplex-list
9999 mem: location 1072 is 1099
9999 mem: location 1075 is 1067
9999 mem: storing 1099 in location 1067
 102 run: reply result:address:duplex-list
9999 mem: location 1072 is 1099
9999 run: result 0 is 1099
9999 mem: storing 1099 in location 3
 101 run: 4:address:duplex-list <- copy 3:address:duplex-list
9999 mem: location 3 is 1099
9999 mem: storing 1099 in location 4
 101 run: 5:number <- first 4:address:duplex-list
9999 mem: location 4 is 1099
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1102
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1099 in location 1104
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1104 is 1099
9999 mem: location 1099 is 5
9999 mem: location 1100 is 1065
9999 mem: location 1104 is 1099
9999 run: address to copy is 1099
9999 run: its type is number
9999 mem: location 1099 is 5
9999 mem: storing 5 in location 1105
 102 run: reply result:location
9999 mem: location 1105 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 5
 101 run: 4:address:duplex-list <- next-duplex 4:address:duplex-list
9999 mem: location 4 is 1099
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1133
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1099 in location 1135
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1135 is 1099
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, next:offset
9999 mem: location 1135 is 1099
9999 mem: location 1099 is 5
9999 mem: location 1100 is 1065
9999 mem: location 1101 is 0
9999 mem: location 1135 is 1099
9999 run: address to copy is 1100
9999 run: its type is address
9999 mem: location 1100 is 1065
9999 mem: storing 1065 in location 1136
 102 run: reply result:address:duplex-list
9999 mem: location 1136 is 1065
9999 run: result 0 is 1065
9999 mem: storing 1065 in location 4
 101 run: 6:number <- first 4:address:duplex-list
9999 mem: location 4 is 1065
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1164
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1065 in location 1166
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1166 is 1065
9999 mem: location 1065 is 4
9999 mem: location 1066 is 1031
9999 mem: location 1166 is 1065
9999 run: address to copy is 1065
9999 run: its type is number
9999 mem: location 1065 is 4
9999 mem: storing 4 in location 1167
 102 run: reply result:location
9999 mem: location 1167 is 4
9999 run: result 0 is 4
9999 mem: storing 4 in location 6
 101 run: 4:address:duplex-list <- next-duplex 4:address:duplex-list
9999 mem: location 4 is 1065
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1195
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1065 in location 1197
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1197 is 1065
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, next:offset
9999 mem: location 1197 is 1065
9999 mem: location 1065 is 4
9999 mem: location 1066 is 1031
9999 mem: location 1067 is 1099
9999 mem: location 1197 is 1065
9999 run: address to copy is 1066
9999 run: its type is address
9999 mem: location 1066 is 1031
9999 mem: storing 1031 in location 1198
 102 run: reply result:address:duplex-list
9999 mem: location 1198 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 4
 101 run: 7:number <- first 4:address:duplex-list
9999 mem: location 4 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1226
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1031 in location 1228
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1228 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 0
9999 mem: location 1228 is 1031
9999 run: address to copy is 1031
9999 run: its type is number
9999 mem: location 1031 is 3
9999 mem: storing 3 in location 1229
 102 run: reply result:location
9999 mem: location 1229 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 7
 101 run: 8:address:duplex-list <- next-duplex 4:address:duplex-list
9999 mem: location 4 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1257
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1031 in location 1259
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1259 is 1031
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, next:offset
9999 mem: location 1259 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1065
9999 mem: location 1259 is 1031
9999 run: address to copy is 1032
9999 run: its type is address
9999 mem: location 1032 is 0
9999 mem: storing 0 in location 1260
 102 run: reply result:address:duplex-list
9999 mem: location 1260 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 8
 101 run: 9:number <- first 8:address:duplex-list
9999 mem: location 8 is 0
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1288
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 0 in location 1290
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1290 is 0
9999 mem: location 0 is 0
9999 mem: location 1 is 34
9999 mem: location 1290 is 0
9999 run: address to copy is 0
9999 run: its type is number
9999 mem: location 0 is 0
9999 mem: storing 0 in location 1291
 102 run: reply result:location
9999 mem: location 1291 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 9
 101 run: 10:address:duplex-list <- next-duplex 8:address:duplex-list
9999 mem: location 8 is 0
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1319
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 0 in location 1321
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1321 is 0
9999 run: jump-if fell through
 102 run: reply 0:literal
9999 run: result 0 is 0
9999 mem: storing 0 in location 10
 101 run: 11:address:duplex-list <- prev-duplex 8:address:duplex-list
9999 mem: location 8 is 0
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1350
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 0 in location 1352
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1352 is 0
9999 run: jump-if fell through
 102 run: reply 0:literal
9999 run: result 0 is 0
9999 mem: storing 0 in location 11
 101 run: 4:address:duplex-list <- prev-duplex 4:address:duplex-list
9999 mem: location 4 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1381
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1031 in location 1383
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1383 is 1031
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, prev:offset
9999 mem: location 1383 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1065
9999 mem: location 1383 is 1031
9999 run: address to copy is 1033
9999 run: its type is address
9999 mem: location 1033 is 1065
9999 mem: storing 1065 in location 1384
 102 run: reply result:address:duplex-list
9999 mem: location 1384 is 1065
9999 run: result 0 is 1065
9999 mem: storing 1065 in location 4
 101 run: 12:number <- first 4:address:duplex-list
9999 mem: location 4 is 1065
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1412
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1065 in location 1414
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1414 is 1065
9999 mem: location 1065 is 4
9999 mem: location 1066 is 1031
9999 mem: location 1414 is 1065
9999 run: address to copy is 1065
9999 run: its type is number
9999 mem: location 1065 is 4
9999 mem: storing 4 in location 1415
 102 run: reply result:location
9999 mem: location 1415 is 4
9999 run: result 0 is 4
9999 mem: storing 4 in location 12
 101 run: 4:address:duplex-list <- prev-duplex 4:address:duplex-list
9999 mem: location 4 is 1065
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1443
 102 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1065 in location 1445
 102 run: jump-if in:address:duplex-list, 1:offset
9999 mem: location 1445 is 1065
9999 run: jumping to instruction 4
 102 run: result:address:duplex-list <- get in:address:duplex-list/deref, prev:offset
9999 mem: location 1445 is 1065
9999 mem: location 1065 is 4
9999 mem: location 1066 is 1031
9999 mem: location 1067 is 1099
9999 mem: location 1445 is 1065
9999 run: address to copy is 1067
9999 run: its type is address
9999 mem: location 1067 is 1099
9999 mem: storing 1099 in location 1446
 102 run: reply result:address:duplex-list
9999 mem: location 1446 is 1099
9999 run: result 0 is 1099
9999 mem: storing 1099 in location 4
 101 run: 13:number <- first 4:address:duplex-list
9999 mem: location 4 is 1099
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1474
 102 run: in:address:list <- next-ingredient 
9999 mem: storing 1099 in location 1476
 102 run: result:location <- get in:address:list/deref, value:offset
9999 mem: location 1476 is 1099
9999 mem: location 1099 is 5
9999 mem: location 1100 is 1065
9999 mem: location 1476 is 1099
9999 run: address to copy is 1099
9999 run: its type is number
9999 mem: location 1099 is 5
9999 mem: storing 5 in location 1477
 102 run: reply result:location
9999 mem: location 1477 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 13
 101 run: 14:boolean <- equal 3:address:duplex-list, 4:address:duplex-list
9999 mem: location 3 is 1099
9999 mem: location 4 is 1099
9999 mem: storing 1 in location 14
 100 run: memory-should-contain [
    0 <- 0  # no modifications to null pointers
    1 <- 34
    2 <- 35
    5 <- 5  # scanning next
    6 <- 4
    7 <- 3
    8 <- 0  # null
    9 <- 0  # first of null
    10 <- 0  # next of null
    11 <- 0  # prev of null
    12 <- 4  # then start scanning prev
    13 <- 5
    14 <- 1  # list back at start
  ]
9999 run: checking location 0
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
9999 run: checking location 14
