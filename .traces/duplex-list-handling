9991 parse: --- defining scenario-duplex-list-handling
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    # reserve locations 0, 1 and 2 to check for missing null check\n    1:number <- copy 34\n    2:number <- copy 35\n    3:address:duplex-list:character <- push 3, 0\n    3:address:duplex-list:character <- push 4, 3:address:duplex-list:character\n    3:address:duplex-list:character <- push 5, 3:address:duplex-list:character\n    4:address:duplex-list:character <- copy 3:address:duplex-list:character\n    5:character <- first 4:address:duplex-list:character\n    4:address:duplex-list:character <- next 4:address:duplex-list:character\n    6:character <- first 4:address:duplex-list:character\n    4:address:duplex-list:character <- next 4:address:duplex-list:character\n    7:character <- first 4:address:duplex-list:character\n    8:address:duplex-list:character <- next 4:address:duplex-list:character\n    9:character <- first 8:address:duplex-list:character\n    10:address:duplex-list:character <- next 8:address:duplex-list:character\n    11:address:duplex-list:character <- prev 8:address:duplex-list:character\n    4:address:duplex-list:character <- prev 4:address:duplex-list:character\n    12:character <- first 4:address:duplex-list:character\n    4:address:duplex-list:character <- prev 4:address:duplex-list:character\n    13:character <- first 4:address:duplex-list:character\n    14:boolean <- equal 3:address:duplex-list:character, 4:address:duplex-list:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    # reserve locations 0, 1 and 2 to check for missing null check
    1:number <- copy 34
    2:number <- copy 35
    3:address:duplex-list:character <- push 3, 0
    3:address:duplex-list:character <- push 4, 3:address:duplex-list:character
    3:address:duplex-list:character <- push 5, 3:address:duplex-list:character
    4:address:duplex-list:character <- copy 3:address:duplex-list:character
    5:character <- first 4:address:duplex-list:character
    4:address:duplex-list:character <- next 4:address:duplex-list:character
    6:character <- first 4:address:duplex-list:character
    4:address:duplex-list:character <- next 4:address:duplex-list:character
    7:character <- first 4:address:duplex-list:character
    8:address:duplex-list:character <- next 4:address:duplex-list:character
    9:character <- first 8:address:duplex-list:character
    10:address:duplex-list:character <- next 8:address:duplex-list:character
    11:address:duplex-list:character <- prev 8:address:duplex-list:character
    4:address:duplex-list:character <- prev 4:address:duplex-list:character
    12:character <- first 4:address:duplex-list:character
    4:address:duplex-list:character <- prev 4:address:duplex-list:character
    13:character <- first 4:address:duplex-list:character
    14:boolean <- equal 3:address:duplex-list:character, 4:address:duplex-list:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    0 <- 0  # no modifications to null pointers\n    1 <- 34\n    2 <- 35\n    5 <- 5  # scanning next\n    6 <- 4\n    7 <- 3\n    8 <- 0  # null\n    9 <- 0  # first of null\n    10 <- 0  # next of null\n    11 <- 0  # prev of null\n    12 <- 4  # then start scanning prev\n    13 <- 5\n    14 <- 1  # list back at start\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    0 <- 0  # no modifications to null pointers
    1 <- 34
    2 <- 35
    5 <- 5  # scanning next
    6 <- 4
    7 <- 3
    8 <- 0  # null
    9 <- 0  # first of null
    10 <- 0  # next of null
    11 <- 0  # prev of null
    12 <- 4  # then start scanning prev
    13 <- 5
    14 <- 1  # list back at start
  ]
9999 parse: recipe scenario-duplex-list-handling has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-duplex-list-handling
9991 transform: --- transform braces for recipe scenario-duplex-list-handling
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- deduce types for recipe scenario-duplex-list-handling
9991 transform: --- resolve ambiguous calls for recipe scenario-duplex-list-handling
9991 transform: --- collect surrounding spaces for recipe scenario-duplex-list-handling
9991 transform: --- transform names for recipe scenario-duplex-list-handling
9991 transform: --- compute instruction operations for recipe scenario-duplex-list-handling
9991 transform: --- perform checks for recipe scenario-duplex-list-handling
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-duplex-list-handling
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-duplex-list-handling
 102 run: run [
    # reserve locations 0, 1 and 2 to check for missing null check
    1:number <- copy 34
    2:number <- copy 35
    3:address:duplex-list:character <- push 3, 0
    3:address:duplex-list:character <- push 4, 3:address:duplex-list:character
    3:address:duplex-list:character <- push 5, 3:address:duplex-list:character
    4:address:duplex-list:character <- copy 3:address:duplex-list:character
    5:character <- first 4:address:duplex-list:character
    4:address:duplex-list:character <- next 4:address:duplex-list:character
    6:character <- first 4:address:duplex-list:character
    4:address:duplex-list:character <- next 4:address:duplex-list:character
    7:character <- first 4:address:duplex-list:character
    8:address:duplex-list:character <- next 4:address:duplex-list:character
    9:character <- first 8:address:duplex-list:character
    10:address:duplex-list:character <- next 8:address:duplex-list:character
    11:address:duplex-list:character <- prev 8:address:duplex-list:character
    4:address:duplex-list:character <- prev 4:address:duplex-list:character
    12:character <- first 4:address:duplex-list:character
    4:address:duplex-list:character <- prev 4:address:duplex-list:character
    13:character <- first 4:address:duplex-list:character
    14:boolean <- equal 3:address:duplex-list:character, 4:address:duplex-list:character
  ]
9991 parse: --- defining run1001
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"1": "number"}
9992 load: after rewriting: 1:number <- copy 34
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"35": "literal"}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- copy 35
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 3:address:duplex-list:character <- push 3, 0
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "literal"}
9993 parse:   ingredient: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 3:address:duplex-list:character <- push 4, 3:address:duplex-list:character
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"5": "literal"}
9993 parse:   ingredient: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 3:address:duplex-list:character <- push 5, 3:address:duplex-list:character
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 4:address:duplex-list:character <- copy 3:address:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"5": "character"}
9992 load: after rewriting: 5:character <- first 4:address:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 4:address:duplex-list:character <- next 4:address:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"6": "character"}
9992 load: after rewriting: 6:character <- first 4:address:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 4:address:duplex-list:character <- next 4:address:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"7": "character"}
9992 load: after rewriting: 7:character <- first 4:address:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"8": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 8:address:duplex-list:character <- next 4:address:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"8": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"9": "character"}
9992 load: after rewriting: 9:character <- first 8:address:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"8": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"10": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 10:address:duplex-list:character <- next 8:address:duplex-list:character
9993 parse: instruction: prev
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"8": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"11": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 11:address:duplex-list:character <- prev 8:address:duplex-list:character
9993 parse: instruction: prev
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 4:address:duplex-list:character <- prev 4:address:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"12": "character"}
9992 load: after rewriting: 12:character <- first 4:address:duplex-list:character
9993 parse: instruction: prev
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 load: after rewriting: 4:address:duplex-list:character <- prev 4:address:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"13": "character"}
9992 load: after rewriting: 13:character <- first 4:address:duplex-list:character
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   ingredient: {"4": <"address" : <"duplex-list" : <"character" : <>>>>}
9993 parse:   product: {"14": "boolean"}
9992 load: after rewriting: 14:boolean <- equal 3:address:duplex-list:character, 4:address:duplex-list:character
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: copy ...
9992 transform: copy ...
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: copy ...
9992 transform: first ...
9992 transform: next ...
9992 transform: first ...
9992 transform: next ...
9992 transform: first ...
9992 transform: next ...
9992 transform: first ...
9992 transform: next ...
9992 transform: prev ...
9992 transform: prev ...
9992 transform: first ...
9992 transform: prev ...
9992 transform: first ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- deduce types for recipe run1001
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction first
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: mismatch: ingredient 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 1
9992 transform: final score: 100
9992 transform: matches
9992 transform: checking shape-shifting variant 2
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 234 first_2
9993 transform: switching first to first_4
9993 transform: compute type names: first_2
9994 transform:     checking {"in": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform: type of in is <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"result": "_elem"}: "_elem"
9993 transform: type of result is "_elem"
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: in:address:duplex-list:_elem <- next-ingredient 
9994 transform:     checking {"in": <"address" : <"duplex-list" : <"_elem" : <>>>>}: <"address" : <"duplex-list" : <"_elem" : <>>>>
9993 transform:   instruction: jump-if in, 1:offset
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"1": "offset"}: "offset"
9993 transform:   instruction: reply 0
9994 transform:     checking {"0": "literal"}: "literal"
9993 transform: type of 0 is "literal"
9993 transform:   instruction: result <- get *in, value:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"duplex-list" : <"_elem" : <>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to "_elem"
9993 transform: adding mapping from _elem to "character"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:_elem
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'in:address:duplex-list:_elem <- next-ingredient '
9993 transform: replacing in ingredient in:address:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in instruction 'jump-if in, 1:offset'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient 1:offset
9993 transform:   after: ?0
9993 transform: replacing in instruction 'reply 0'
9993 transform: replacing in ingredient 0
9993 transform:   after: ?0
9993 transform: replacing in instruction 'result <- get *in, value:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform:   after: <address : <duplex-list : <character : <>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform:   after: character
9991 transform: --- checking reply instructions against header for first_4
9991 transform: --- fill in reply ingredients from header for recipe first_4
9991 transform: --- transform braces for recipe first_4
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: reply-unless ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- deduce types for recipe first_4
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: in => <address : <duplex-list : <character : <>>>>
9992 transform: result => character
9991 transform: --- deduce types from header for first_4
9993 transform: type of in is <address : <duplex-list : <character : <>>>>
9993 transform: type of result is character
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: in:address:duplex-list:_elem <- next-ingredient 
9993 transform:   product: in: <address : <duplex-list : <character : <>>>> -- {"in": <"address" : <"duplex-list" : <"character" : <>>>>}
9992 transform: instruction: jump-if in, 1:offset
9992 transform: instruction: reply 0
9992 transform: instruction: result <- get *in, value:offset
9993 transform:   product: result: character -- {"result": "character"}
9992 transform: instruction: reply result:_elem
9991 transform: --- resolve ambiguous calls for recipe first_4
9991 transform: --- checking reply instructions against header for first_4
9991 transform: --- collect surrounding spaces for recipe first_4
9991 transform: --- transform names for recipe first_4
9993 name: assign in 1
9993 name: element value of type duplex-list is at offset 0
9993 name: assign result 2
9991 transform: --- compute instruction operations for recipe first_4
9991 transform: --- perform checks for recipe first_4
9991 transform: --- convert 'new' to 'allocate' for recipe first_4
9992 new: size of "location" is 1
9992 transform: new specialization: first_4
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: 100
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: 100
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: 100
9992 transform: instruction next
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction prev
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction prev
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: 100
9992 transform: instruction prev
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: 100
9992 transform: instruction first
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: 100
9992 transform: instruction equal
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:number <- copy 34
9999 mem: storing 34 in location 1
 103 run: 2:number <- copy 35
9999 mem: storing 35 in location 2
 103 run: 3:address:duplex-list:character <- push_3 3, 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1000
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 3 in location 1002
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 0 in location 1003
 104 run: result <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 3
9999 mem: location 1005 is 1008
9999 mem: storing 3 in location 1008
 104 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1008
9999 type: type deduced to be number$
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1009
9999 mem: storing 0 in location 1009
 104 run: jump-if in, 1:offset
9999 mem: location 1003 is 0
9998 run: jump-if fell through
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1004 is 1008
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 3
 103 run: 3:address:duplex-list:character <- push_3 4, 3:address:duplex-list:character
9999 mem: location 3 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1002
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1008 in location 1003
 104 run: result <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1011
9999 mem: storing 1011 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1004 is 1011
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 4
9999 mem: location 1005 is 1011
9999 mem: storing 4 in location 1011
 104 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1004 is 1011
9999 type: type deduced to be number$
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 1008
9999 mem: location 1006 is 1012
9999 mem: storing 1008 in location 1012
 104 run: jump-if in, 1:offset
9999 mem: location 1003 is 1008
9998 run: jumping to instruction 10
 104 run: prev:address:address:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1003 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1003 is 1008
9999 type: type deduced to be number$
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1007
 104 run: *prev <- copy result
9999 mem: location 1004 is 1011
9999 mem: location 1007 is 1010
9999 mem: storing 1011 in location 1010
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1004 is 1011
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 3
 103 run: 3:address:duplex-list:character <- push_3 5, 3:address:duplex-list:character
9999 mem: location 3 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 5 in location 1002
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1003
 104 run: result <- new {(duplex-list _elem): type}
9999 mem: new alloc: 1014
9999 mem: storing 1014 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1014
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 5
9999 mem: location 1005 is 1014
9999 mem: storing 5 in location 1014
 104 run: next:address:address:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1014 is 5
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1014
9999 type: type deduced to be number$
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 1011
9999 mem: location 1006 is 1015
9999 mem: storing 1011 in location 1015
 104 run: jump-if in, 1:offset
9999 mem: location 1003 is 1011
9998 run: jumping to instruction 10
 104 run: prev:address:address:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1003 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 0
9999 mem: location 1003 is 1011
9999 type: type deduced to be number$
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1007
 104 run: *prev <- copy result
9999 mem: location 1004 is 1014
9999 mem: location 1007 is 1013
9999 mem: storing 1014 in location 1013
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1004 is 1014
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 3
 103 run: 4:address:duplex-list:character <- copy 3:address:duplex-list:character
9999 mem: location 3 is 1014
9999 mem: storing 1014 in location 4
 103 run: 5:character <- first_4 4:address:duplex-list:character
9999 mem: location 4 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1017
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1014 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1014
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1019 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1011
9999 mem: location 1016 is 0
9999 mem: location 1019 is 1014
9998 run: address to copy is 1014
9998 run: its type is character
9999 mem: location 1014 is 5
9999 mem: storing 5 in location 1020
 104 run: reply result:_elem
9999 mem: location 1020 is 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 5
9999 mem: storing 5 in location 5
 103 run: 4:address:duplex-list:character <- next_2 4:address:duplex-list:character
9999 mem: location 4 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1014 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1014
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1019 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1011
9999 mem: location 1016 is 0
9999 mem: location 1019 is 1014
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1015 is 1011
9999 mem: storing 1011 in location 1020
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1020 is 1011
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 4
 103 run: 6:character <- first_4 4:address:duplex-list:character
9999 mem: location 4 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1011
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1019 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1019 is 1011
9998 run: address to copy is 1011
9998 run: its type is character
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1020
 104 run: reply result:_elem
9999 mem: location 1020 is 4
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9999 mem: storing 4 in location 6
 103 run: 4:address:duplex-list:character <- next_2 4:address:duplex-list:character
9999 mem: location 4 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1011
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1019 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1019 is 1011
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1012 is 1008
9999 mem: storing 1008 in location 1020
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1020 is 1008
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 4
 103 run: 7:character <- first_4 4:address:duplex-list:character
9999 mem: location 4 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1008 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1008
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1019 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: location 1019 is 1008
9998 run: address to copy is 1008
9998 run: its type is character
9999 mem: location 1008 is 3
9999 mem: storing 3 in location 1020
 104 run: reply result:_elem
9999 mem: location 1020 is 3
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 3
9999 mem: storing 3 in location 7
 103 run: 8:address:duplex-list:character <- next_2 4:address:duplex-list:character
9999 mem: location 4 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1008 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1008
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1019 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: location 1019 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1009
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1020
 104 run: reply result:address:duplex-list:_elem
9999 mem: location 1020 is 0
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 8
 103 run: 9:character <- first_4 8:address:duplex-list:character
9999 mem: location 8 is 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 0 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 0
9998 run: jump-if fell through
 104 run: reply 0
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 9
 103 run: 10:address:duplex-list:character <- next_2 8:address:duplex-list:character
9999 mem: location 8 is 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 0 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 0
9998 run: jump-if fell through
 104 run: reply 0
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 10
 103 run: 11:address:duplex-list:character <- prev_2 8:address:duplex-list:character
9999 mem: location 8 is 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 0 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 0
9998 run: jump-if fell through
 104 run: reply 0
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 11
 103 run: 4:address:duplex-list:character <- prev_2 4:address:duplex-list:character
9999 mem: location 4 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1008 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1008
9998 run: jumping to instruction 4
 104 run: result <- get *in, prev:offset
9999 mem: location 1019 is 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1008 is 3
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1011
9999 mem: location 1019 is 1008
9999 type: type deduced to be character$
9998 run: address to copy is 1010
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1010 is 1011
9999 mem: storing 1011 in location 1020
 104 run: reply result
9999 mem: location 1020 is 1011
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 4
 103 run: 12:character <- first_4 4:address:duplex-list:character
9999 mem: location 4 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1011
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1019 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1019 is 1011
9998 run: address to copy is 1011
9998 run: its type is character
9999 mem: location 1011 is 4
9999 mem: storing 4 in location 1020
 104 run: reply result:_elem
9999 mem: location 1020 is 4
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9999 mem: storing 4 in location 12
 103 run: 4:address:duplex-list:character <- prev_2 4:address:duplex-list:character
9999 mem: location 4 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1011 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1011
9998 run: jumping to instruction 4
 104 run: result <- get *in, prev:offset
9999 mem: location 1019 is 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1011 is 4
9999 mem: location 1012 is 1008
9999 mem: location 1013 is 1014
9999 mem: location 1019 is 1011
9999 type: type deduced to be character$
9998 run: address to copy is 1013
9998 run: its type is <address : <duplex-list : <character : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1020
 104 run: reply result
9999 mem: location 1020 is 1014
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 4
 103 run: 13:character <- first_4 4:address:duplex-list:character
9999 mem: location 4 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 104 run: in:address:duplex-list:_elem <- next-ingredient 
9999 mem: storing 1014 in location 1019
 104 run: jump-if in, 1:offset
9999 mem: location 1019 is 1014
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1019 is 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 5
9999 mem: location 1015 is 1011
9999 mem: location 1016 is 0
9999 mem: location 1019 is 1014
9998 run: address to copy is 1014
9998 run: its type is character
9999 mem: location 1014 is 5
9999 mem: storing 5 in location 1020
 104 run: reply result:_elem
9999 mem: location 1020 is 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 5
9999 mem: storing 5 in location 13
 103 run: 14:boolean <- equal 3:address:duplex-list:character, 4:address:duplex-list:character
9999 mem: location 3 is 1014
9999 mem: location 4 is 1014
9999 mem: storing 1 in location 14
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    0 <- 0  # no modifications to null pointers
    1 <- 34
    2 <- 35
    5 <- 5  # scanning next
    6 <- 4
    7 <- 3
    8 <- 0  # null
    9 <- 0  # first of null
    10 <- 0  # next of null
    11 <- 0  # prev of null
    12 <- 4  # then start scanning prev
    13 <- 5
    14 <- 1  # list back at start
  ]
9999 run: checking location 0
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
9999 run: checking location 14
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
