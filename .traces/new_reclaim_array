9991 parse: --- defining main
9993 parse: instruction: new
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"number": "type"}
9993 parse:   ingredient: {"2": "literal"}
9993 parse:   product: {"1": <"address" : <"array" : <"number" : <>>>>}
9992 load: after rewriting: 1:address:array:number <- new number:type, 2
9993 parse: instruction: abandon
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"array" : <"number" : <>>>>}
9992 load: after rewriting: abandon 1:address:array:number
9993 parse: instruction: new
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"number": "type"}
9993 parse:   ingredient: {"2": "literal"}
9993 parse:   product: {"2": <"address" : <"array" : <"number" : <>>>>}
9992 load: after rewriting: 2:address:array:number <- new number:type, 2
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"array" : <"number" : <>>>>}
9993 parse:   ingredient: {"2": <"address" : <"array" : <"number" : <>>>>}
9993 parse:   product: {"3": "boolean"}
9992 load: after rewriting: 3:boolean <- equal 1:address:array:number, 2:address:array:number
9999 parse: recipe main has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- transform braces for recipe main
9992 transform: new ...
9992 transform: abandon ...
9992 transform: new ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- deduce types for recipe main
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction equal
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: ingredient 0
9992 transform: checking variant 0: 100
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- perform checks for recipe main
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "number" is 1
9992 new: size of "number" is 1
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: 1:address:array:number <- new number:type, 2
9999 mem: array size is 2
9999 mem: new alloc: 1000
9999 mem: storing 1000 in location 1
 102 run: abandon 1:address:array:number
9999 mem: location 1 is 1000
 102 run: 2:address:array:number <- new number:type, 2
9999 mem: array size is 2
9999 mem: storing 1000 in location 2
 102 run: 3:boolean <- equal_2 1:address:array:number, 2:address:array:number
9999 mem: location 1 is 1000
9999 mem: location 2 is 1000
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1003
 103 run: a:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1005
 103 run: b:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1006
 103 run: a-len:number <- length *a
9999 mem: location 1005 is 1000
9999 mem: storing 2 in location 1007
 103 run: b-len:number <- length *b
9999 mem: location 1006 is 1000
9999 mem: storing 2 in location 1008
 103 run: trace 99, [text-equal], [comparing lengths]
  99 text-equal: comparing lengths 
 103 run: length-equal?:boolean <- equal a-len, b-len
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: storing 1 in location 1009
 103 run: jump-if length-equal?, 
9999 mem: location 1009 is 1
9998 run: jumping to instruction 10
 103 run: trace 99, [text-equal], [comparing characters]
  99 text-equal: comparing characters 
 103 run: i:number <- copy 0
9999 mem: storing 0 in location 1010
 103 run: done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1010 is 0
9999 mem: location 1007 is 2
9999 mem: storing 0 in location 1011
 103 run: jump-if done?, 
9999 mem: location 1011 is 0
9998 run: jump-if fell through
 103 run: a2:character <- index *a, i
9999 mem: location 1005 is 1000
9999 mem: location 1010 is 0
9998 run: address to copy is 1001
9998 run: its type is character
9999 mem: location 1001 is 0
9999 mem: storing 0 in location 1012
 103 run: b2:character <- index *b, i
9999 mem: location 1006 is 1000
9999 mem: location 1010 is 0
9998 run: address to copy is 1001
9998 run: its type is character
9999 mem: location 1001 is 0
9999 mem: storing 0 in location 1013
 103 run: chars-match?:boolean <- equal a2, b2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: storing 1 in location 1014
 103 run: jump-if chars-match?, 
9999 mem: location 1014 is 1
9998 run: jumping to instruction 22
 103 run: i <- add i, 1
9999 mem: location 1010 is 0
9999 mem: storing 1 in location 1010
 103 run: jump 
9998 run: jumping to instruction 14
 103 run: done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1010 is 1
9999 mem: location 1007 is 2
9999 mem: storing 0 in location 1011
 103 run: jump-if done?, 
9999 mem: location 1011 is 0
9998 run: jump-if fell through
 103 run: a2:character <- index *a, i
9999 mem: location 1005 is 1000
9999 mem: location 1010 is 1
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 0
9999 mem: storing 0 in location 1012
 103 run: b2:character <- index *b, i
9999 mem: location 1006 is 1000
9999 mem: location 1010 is 1
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 0
9999 mem: storing 0 in location 1013
 103 run: chars-match?:boolean <- equal a2, b2
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: storing 1 in location 1014
 103 run: jump-if chars-match?, 
9999 mem: location 1014 is 1
9998 run: jumping to instruction 22
 103 run: i <- add i, 1
9999 mem: location 1010 is 1
9999 mem: storing 2 in location 1010
 103 run: jump 
9998 run: jumping to instruction 14
 103 run: done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1010 is 2
9999 mem: location 1007 is 2
9999 mem: storing 1 in location 1011
 103 run: jump-if done?, 
9999 mem: location 1011 is 1
9998 run: jumping to instruction 25
 103 run: reply 1
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1
9999 mem: storing 1 in location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
