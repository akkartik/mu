parse: instruction: run
parse:   ingredient: {name: "
    default-space:address:array:location <- new location:type, 30:literal
    x:address:array:character <- new []
    y:address:array:character <- new [abcd]
    3:boolean/raw <- string-equal x:address:array:character, y:address:array:character
  ", properties: ["
    default-space:address:array:location <- new location:type, 30:literal
    x:address:array:character <- new []
    y:address:array:character <- new [abcd]
    3:boolean/raw <- string-equal x:address:array:character, y:address:array:character
  ": "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    3 <- 0  # "" != abcd
  ", properties: ["
    3 <- 0  # "" != abcd
  ": "literal-string"]}
after-brace: recipe string-equal-with-empty
after-brace: run ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: string-equal-with-empty
run: run [
    default-space:address:array:location <- new location:type, 30:literal
    x:address:array:character <- new []
    y:address:array:character <- new [abcd]
    3:boolean/raw <- string-equal x:address:array:character, y:address:array:character
  ]
parse: instruction: new
parse:   ingredient: {name: "location", properties: ["location": "type"]}
parse:   ingredient: {name: "30", properties: ["30": "literal"]}
parse:   product: {name: "default-space", properties: ["default-space": "address":"array":"location"]}
parse: instruction: new
parse:   ingredient: {name: "", properties: ["": "literal-string"]}
parse:   product: {name: "x", properties: ["x": "address":"array":"character"]}
parse: instruction: new
parse:   ingredient: {name: "abcd", properties: ["abcd": "literal-string"]}
parse:   product: {name: "y", properties: ["y": "address":"array":"character"]}
parse: instruction: string-equal
parse:   ingredient: {name: "x", properties: ["x": "address":"array":"character"]}
parse:   ingredient: {name: "y", properties: ["y": "address":"array":"character"]}
parse:   product: {name: "3", properties: ["3": "boolean", "raw": ]}
new: location -> 1
new:  -> 0
name: assign x 1
new: abcd -> 0
name: assign y 2
after-brace: recipe run1001
after-brace: new ...
after-brace: new ...
after-brace: new ...
after-brace: string-equal ...
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1000
run: x:address:array:character <- new []
mem: storing 1031 in location 1002
run: y:address:array:character <- new [abcd]
mem: storing 1032 in location 1003
run: 3:boolean/raw <- string-equal x:address:array:character, y:address:array:character
mem: location 1002 is 1031
mem: location 1003 is 1032
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1037
run: a:address:array:character <- next-ingredient 
mem: storing 1031 in location 1039
run: a-len:number <- length a:address:array:character/deref
mem: location 1039 is 1031
mem: location 1031 is 0
mem: location 1039 is 1031
mem: storing 0 in location 1040
run: b:address:array:character <- next-ingredient 
mem: storing 1032 in location 1041
run: b-len:number <- length b:address:array:character/deref
mem: location 1041 is 1032
mem: location 1032 is 4
mem: location 1033 is 97
mem: location 1034 is 98
mem: location 1035 is 99
mem: location 1036 is 100
mem: location 1041 is 1032
mem: storing 4 in location 1042
run: trace [string-equal], [comparing lengths]
string-equal: comparing lengths
run: length-equal?:boolean <- equal a-len:number, b-len:number
mem: location 1040 is 0
mem: location 1042 is 4
mem: storing 0 in location 1043
run: break-if length-equal?:boolean, 
mem: location 1043 is 0
run: jump-if fell through
run: reply 0:literal
run: result 0 is 0
mem: storing 0 in location 3
run: memory-should-contain [
    3 <- 0  # "" != abcd
  ]
run: checking location 3
