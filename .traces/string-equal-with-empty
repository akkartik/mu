9991 parse: --- defining scenario-string-equal-with-empty
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    default-space:address:array:location <- new location:type, 30\n    x:address:array:character <- new []\n    y:address:array:character <- new [abcd]\n    3:boolean/raw <- string-equal x, y\n  ": "literal-string"}
9992 load: after rewriting: run [
    default-space:address:array:location <- new location:type, 30
    x:address:array:character <- new []
    y:address:array:character <- new [abcd]
    3:boolean/raw <- string-equal x, y
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3 <- 0  # "" != abcd\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    3 <- 0  # "" != abcd
  ]
9999 parse: recipe scenario-string-equal-with-empty has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-string-equal-with-empty
9991 transform: --- collect surrounding spaces for recipe scenario-string-equal-with-empty
9991 transform: --- deduce types for recipe scenario-string-equal-with-empty
9991 transform: --- resolve ambiguous calls for recipe scenario-string-equal-with-empty
9991 transform: --- transform names for recipe scenario-string-equal-with-empty
9991 transform: --- transform braces for recipe scenario-string-equal-with-empty
9992 transform: run ...
9992 transform: memory-should-contain ...
9991 transform: --- compute instruction operations for recipe scenario-string-equal-with-empty
9991 transform: --- perform checks for recipe scenario-string-equal-with-empty
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-string-equal-with-empty
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-string-equal-with-empty
 102 run: run [
    default-space:address:array:location <- new location:type, 30
    x:address:array:character <- new []
    y:address:array:character <- new [abcd]
    3:boolean/raw <- string-equal x, y
  ]
9991 parse: --- defining run1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"location": "type"}
9993 parse:   ingredient: {"30": "literal"}
9993 parse:   product: {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 load: after rewriting: default-space:address:array:location <- new location:type, 30
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"": "literal-string"}
9993 parse:   product: {"x": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: x:address:array:character <- new []
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abcd": "literal-string"}
9993 parse:   product: {"y": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: y:address:array:character <- new [abcd]
9993 parse: instruction: string-equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <>}
9993 parse:   ingredient: {"y": <>}
9993 parse:   product: {"3": "boolean", "raw": <>}
9992 load: after rewriting: 3:boolean/raw <- string-equal x, y
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- deduce types for recipe run1001
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: x => <address : <array : <character : <>>>>
9992 transform: y => <address : <array : <character : <>>>>
9992 transform: x <= <address : <array : <character : <>>>>
9992 transform: y <= <address : <array : <character : <>>>>
9991 transform: --- resolve ambiguous calls for recipe run1001
9991 transform: --- transform names for recipe run1001
9993 name: assign x 1
9993 name: assign y 2
9991 transform: --- transform braces for recipe run1001
9992 transform: new ...
9992 transform: new ...
9992 transform: new ...
9992 transform: string-equal ...
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9992 new: size of "location" is 1
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, 30
9999 mem: array size is 30
9999 mem: new alloc: 1000
 103 run: x:address:array:character <- new []
9999 mem: storing 1031 in location 1002
 103 run: y:address:array:character <- new [abcd]
9999 mem: storing 1032 in location 1003
 103 run: 3:boolean/raw <- string-equal x, y
9999 mem: location 1002 is 1031
9999 mem: location 1003 is 1032
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1037
 104 run: a:address:array:character <- next-ingredient 
9999 mem: storing 1031 in location 1039
 104 run: a-len:number <- length *a
9999 mem: location 1039 is 1031
9999 mem: storing 0 in location 1040
 104 run: b:address:array:character <- next-ingredient 
9999 mem: storing 1032 in location 1041
 104 run: b-len:number <- length *b
9999 mem: location 1041 is 1032
9999 mem: storing 4 in location 1042
 104 run: trace 99, [string-equal], [comparing lengths]
  99 string-equal: comparing lengths 
 104 run: length-equal?:boolean <- equal a-len, b-len
9999 mem: location 1040 is 0
9999 mem: location 1042 is 4
9999 mem: storing 0 in location 1043
 104 run: jump-if length-equal?, 
9999 mem: location 1043 is 0
9998 run: jump-if fell through
 104 run: reply 0
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 3
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    3 <- 0  # "" != abcd
  ]
9999 run: checking location 3
9999 trace: fall-through: exiting scenario-string-equal-with-empty; decrementing callstack depth from 1
