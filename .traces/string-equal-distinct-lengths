9999 parse: instruction: run
9999 parse:   ingredient: {"\n    default-space:address:array:location <- new location:type, 30\n    x:address:array:character <- new [abc]\n    y:address:array:character <- new [abcd]\n    3:boolean/raw <- string-equal x, y\n  ": "literal-string"}
9999 parse: instruction: memory-should-contain
9999 parse:   ingredient: {"\n    3 <- 0  # abc != abcd\n  ": "literal-string"}
9999 parse: instruction: trace-should-contain
9999 parse:   ingredient: {"\n    string-equal: comparing lengths\n  ": "literal-string"}
9999 parse: instruction: trace-should-not-contain
9999 parse:   ingredient: {"\n    string-equal: comparing characters\n  ": "literal-string"}
9999 after-brace: recipe scenario-string-equal-distinct-lengths
9999 after-brace: run ...
9999 after-brace: memory-should-contain ...
9999 after-brace: trace-should-contain ...
9999 after-brace: trace-should-not-contain ...
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9999 schedule: scenario-string-equal-distinct-lengths
 102 run: run [
    default-space:address:array:location <- new location:type, 30
    x:address:array:character <- new [abc]
    y:address:array:character <- new [abcd]
    3:boolean/raw <- string-equal x, y
  ]
9999 parse: instruction: new
9999 parse:   ingredient: {"location": "type"}
9999 parse:   ingredient: {"30": "literal"}
9999 parse:   product: {"default-space": <"address" : "array" : "location">}
9999 parse: instruction: new
9999 parse:   ingredient: {"abc": "literal-string"}
9999 parse:   product: {"x": <"address" : "array" : "character">}
9999 parse: instruction: new
9999 parse:   ingredient: {"abcd": "literal-string"}
9999 parse:   product: {"y": <"address" : "array" : "character">}
9999 parse: instruction: string-equal
9999 parse:   ingredient: {"x": ""}
9999 parse:   ingredient: {"y": ""}
9999 parse:   product: {"3": "boolean", "raw": ""}
9999 new: location -> location
9999 name: assign x 1
9999 name: assign y 2
9999 after-brace: recipe run1001
9999 after-brace: new ...
9999 after-brace: new ...
9999 after-brace: new ...
9999 after-brace: string-equal ...
9999 trace: run: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, 30
9999 mem: array size is 30
9999 mem: new alloc: 1000
 103 run: x:address:array:character <- new [abc]
9999 mem: storing 1031 in location 1002
 103 run: y:address:array:character <- new [abcd]
9999 mem: storing 1035 in location 1003
 103 run: 3:boolean/raw <- string-equal x, y
9999 mem: location 1002 is 1031
9999 mem: location 1003 is 1035
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1040
 104 run: a:address:array:character <- next-ingredient 
9999 mem: storing 1031 in location 1042
 104 run: a-len:number <- length *a
9999 mem: location 1042 is 1031
9999 mem: storing 3 in location 1043
 104 run: b:address:array:character <- next-ingredient 
9999 mem: storing 1035 in location 1044
 104 run: b-len:number <- length *b
9999 mem: location 1044 is 1035
9999 mem: storing 4 in location 1045
 104 run: trace 99, [string-equal], [comparing lengths]
  99 string-equal: comparing lengths 
 104 run: length-equal?:boolean <- equal a-len, b-len
9999 mem: location 1043 is 3
9999 mem: location 1045 is 4
9999 mem: storing 0 in location 1046
 104 run: break-if length-equal?, 
9999 mem: location 1046 is 0
9999 run: jump-if fell through
 104 run: reply 0
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 0
9999 mem: storing 0 in location 3
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    3 <- 0  # abc != abcd
  ]
9999 run: checking location 3
 102 run: trace-should-contain [
    string-equal: comparing lengths
  ]
 102 run: trace-should-not-contain [
    string-equal: comparing characters
  ]
9999 trace: fall-through: exiting scenario-string-equal-distinct-lengths; decrementing callstack depth from 1
