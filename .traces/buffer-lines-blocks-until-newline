parse: instruction: run
parse:   ingredient: {name: "\n    1:address:channel/stdin <- new-channel 10:literal/capacity\n    2:address:channel/buffered-stdin <- new-channel 10:literal/capacity\n    3:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    assert 3:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after init]\n    # buffer stdin into buffered-stdin, try to read from buffered-stdin\n    4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin\n    wait-for-routine 4:number/buffer-routine\n    5:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    assert 5:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]\n    # write 'a'\n    1:address:channel <- write 1:address:channel, 97:literal/a\n    restart 4:number/buffer-routine\n    wait-for-routine 4:number/buffer-routine\n    6:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    assert 6:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a']\n    # write 'b'\n    1:address:channel <- write 1:address:channel, 98:literal/b\n    restart 4:number/buffer-routine\n    wait-for-routine 4:number/buffer-routine\n    7:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    assert 7:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b']\n    # write newline\n    1:address:channel <- write 1:address:channel, 10:literal/newline\n    restart 4:number/buffer-routine\n    wait-for-routine 4:number/buffer-routine\n    8:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    9:boolean/completed? <- not 8:boolean\n    assert 9:boolean/completed?, [\nF buffer-lines-blocks-until-newline: channel should contain data after writing newline]\n    trace [test], [reached end]\n  ", properties: [_: "literal-string"]}
parse: instruction: trace-should-contain
parse:   ingredient: {name: "\n    test: reached end\n  ", properties: [_: "literal-string"]}
after-brace: recipe buffer-lines-blocks-until-newline
after-brace: run ...
after-brace: trace-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: buffer-lines-blocks-until-newline
 101 run: run [
    1:address:channel/stdin <- new-channel 10:literal/capacity
    2:address:channel/buffered-stdin <- new-channel 10:literal/capacity
    3:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
    # buffer stdin into buffered-stdin, try to read from buffered-stdin
    4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin
    wait-for-routine 4:number/buffer-routine
    5:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
    # write 'a'
    1:address:channel <- write 1:address:channel, 97:literal/a
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    6:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
    # write 'b'
    1:address:channel <- write 1:address:channel, 98:literal/b
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    7:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
    # write newline
    1:address:channel <- write 1:address:channel, 10:literal/newline
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    8:boolean <- channel-empty? 2:address:channel/buffered-stdin
    9:boolean/completed? <- not 8:boolean
    assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
    trace [test], [reached end]
  ]
parse: instruction: new-channel
parse:   ingredient: {name: "10", properties: ["10": "literal", "capacity": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel", "stdin": ]}
parse: instruction: new-channel
parse:   ingredient: {name: "10", properties: ["10": "literal", "capacity": ]}
parse:   product: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "3", properties: ["3": "boolean"]}
parse: instruction: assert
parse:   ingredient: {name: "3", properties: ["3": "boolean"]}
parse:   ingredient: {name: "\nF buffer-lines-blocks-until-newline: channel should be empty after init", properties: [_: "literal-string"]}
parse: instruction: start-running
parse:   ingredient: {name: "buffer-lines", properties: ["buffer-lines": "recipe"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "stdin": ]}
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "5", properties: ["5": "boolean"]}
parse: instruction: assert
parse:   ingredient: {name: "5", properties: ["5": "boolean"]}
parse:   ingredient: {name: "\nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up", properties: [_: "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "97", properties: ["97": "literal", "a": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "6", properties: ["6": "boolean"]}
parse: instruction: assert
parse:   ingredient: {name: "6", properties: ["6": "boolean"]}
parse:   ingredient: {name: "\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a'", properties: [_: "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "98", properties: ["98": "literal", "b": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "7", properties: ["7": "boolean"]}
parse: instruction: assert
parse:   ingredient: {name: "7", properties: ["7": "boolean"]}
parse:   ingredient: {name: "\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b'", properties: [_: "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "10", properties: ["10": "literal", "newline": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "8", properties: ["8": "boolean"]}
parse: instruction: not
parse:   ingredient: {name: "8", properties: ["8": "boolean"]}
parse:   product: {name: "9", properties: ["9": "boolean", "completed?": ]}
parse: instruction: assert
parse:   ingredient: {name: "9", properties: ["9": "boolean", "completed?": ]}
parse:   ingredient: {name: "\nF buffer-lines-blocks-until-newline: channel should contain data after writing newline", properties: [_: "literal-string"]}
parse: instruction: trace
parse:   ingredient: {name: "test", properties: [_: "literal-string"]}
parse:   ingredient: {name: "reached end", properties: [_: "literal-string"]}
after-brace: recipe run1001
after-brace: new-channel ...
after-brace: new-channel ...
after-brace: channel-empty? ...
after-brace: assert ...
after-brace: start-running ...
after-brace: wait-for-routine ...
after-brace: channel-empty? ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: channel-empty? ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: channel-empty? ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: channel-empty? ...
after-brace: not ...
after-brace: assert ...
after-brace: trace ...
 101 run: 1:address:channel/stdin <- new-channel 10:literal/capacity
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 102 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1002
 102 run: full:address:number <- get-address result:address:channel/deref, first-full:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1003
 102 run: full:address:number/deref <- copy 0:literal
9999 mem: location 1003 is 1007
9999 mem: storing 0 in location 1007
 102 run: free:address:number <- get-address result:address:channel/deref, first-free:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1004
 102 run: free:address:number/deref <- copy 0:literal
9999 mem: location 1004 is 1008
9999 mem: storing 0 in location 1008
 102 run: capacity:number <- next-ingredient 
9999 mem: storing 10 in location 1005
 102 run: capacity:number <- add capacity:number, 1:literal
9999 mem: location 1005 is 10
9999 mem: storing 11 in location 1005
 102 run: dest:address:address:array:location <- get-address result:address:channel/deref, data:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 102 run: dest:address:address:array:location/deref <- new location:type, capacity:number
9999 mem: location 1005 is 11
9999 mem: array size is 11
9999 mem: new alloc: 1010
9999 mem: location 1006 is 1009
9999 mem: storing 1010 in location 1009
 102 run: reply result:address:channel
9999 mem: location 1002 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 101 run: 2:address:channel/buffered-stdin <- new-channel 10:literal/capacity
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1022
 102 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1029
9999 mem: storing 1029 in location 1024
 102 run: full:address:number <- get-address result:address:channel/deref, first-full:offset
9999 mem: location 1024 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1024 is 1029
9999 run: address to copy is 1029
9999 mem: storing 1029 in location 1025
 102 run: full:address:number/deref <- copy 0:literal
9999 mem: location 1025 is 1029
9999 mem: storing 0 in location 1029
 102 run: free:address:number <- get-address result:address:channel/deref, first-free:offset
9999 mem: location 1024 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1024 is 1029
9999 run: address to copy is 1030
9999 mem: storing 1030 in location 1026
 102 run: free:address:number/deref <- copy 0:literal
9999 mem: location 1026 is 1030
9999 mem: storing 0 in location 1030
 102 run: capacity:number <- next-ingredient 
9999 mem: storing 10 in location 1027
 102 run: capacity:number <- add capacity:number, 1:literal
9999 mem: location 1027 is 10
9999 mem: storing 11 in location 1027
 102 run: dest:address:address:array:location <- get-address result:address:channel/deref, data:offset
9999 mem: location 1024 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1024 is 1029
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1028
 102 run: dest:address:address:array:location/deref <- new location:type, capacity:number
9999 mem: location 1027 is 11
9999 mem: array size is 11
9999 mem: new alloc: 1032
9999 mem: location 1028 is 1031
9999 mem: storing 1032 in location 1031
 102 run: reply result:address:channel
9999 mem: location 1024 is 1029
9999 run: result 0 is 1029
9999 mem: storing 1029 in location 2
 101 run: 3:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1029
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1044
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 1046
 102 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1046 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 1046 is 1029
9999 run: address to copy is 1029
9999 run: its type is number
9999 mem: location 1029 is 0
9999 mem: storing 0 in location 1047
 102 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1046 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 1046 is 1029
9999 run: address to copy is 1030
9999 run: its type is number
9999 mem: location 1030 is 0
9999 mem: storing 0 in location 1048
 102 run: result:boolean <- equal full:number, free:number
9999 mem: location 1047 is 0
9999 mem: location 1048 is 0
9999 mem: storing 1 in location 1049
 102 run: reply result:boolean
9999 mem: location 1049 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 3
 101 run: assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
9999 mem: location 3 is 1
 101 run: 4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin
9999 mem: location 1 is 1007
9999 mem: location 2 is 1029
9999 new: routine allocated memory from 101000 to 201000
9999 mem: storing 2 in location 4
 101 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
schedule: buffer-lines
 101 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 14
9999 mem: new alloc: 101000
 101 run: in:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101002
 101 run: out:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 101003
 101 run: line:address:buffer <- new-buffer 30:literal
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 101015
 102 run: result:address:buffer <- new buffer:type
9999 mem: new alloc: 101022
9999 mem: storing 101022 in location 101017
 102 run: len:address:number <- get-address result:address:buffer/deref, length:offset
9999 mem: location 101017 is 101022
9999 mem: location 101022 is 0
9999 mem: location 101023 is 0
9999 mem: location 101017 is 101022
9999 run: address to copy is 101022
9999 mem: storing 101022 in location 101018
 102 run: len:address:number/deref <- copy 0:literal
9999 mem: location 101018 is 101022
9999 mem: storing 0 in location 101022
 102 run: s:address:address:array:character <- get-address result:address:buffer/deref, data:offset
9999 mem: location 101017 is 101022
9999 mem: location 101022 is 0
9999 mem: location 101023 is 0
9999 mem: location 101017 is 101022
9999 run: address to copy is 101023
9999 mem: storing 101023 in location 101019
 102 run: capacity:number, found?:boolean <- next-ingredient 
9999 mem: storing 30 in location 101020
9999 mem: storing 1 in location 101021
 102 run: assert found?:boolean, [new-buffer must get a capacity argument]
9999 mem: location 101021 is 1
 102 run: s:address:address:array:character/deref <- new character:type, capacity:number
9999 mem: location 101020 is 30
9999 mem: array size is 30
9999 mem: new alloc: 101024
9999 mem: location 101019 is 101023
9999 mem: storing 101024 in location 101023
 102 run: reply result:address:buffer
9999 mem: location 101017 is 101022
9999 run: result 0 is 101022
9999 mem: storing 101022 in location 101004
 101 run: c:character, in:address:channel <- read in:address:channel
9999 mem: location 101002 is 1007
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 101055
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101057
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 101057 is 1007
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 101065
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101067
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101067 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 101067 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 101068
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101067 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 101067 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 101069
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 101068 is 0
9999 mem: location 101069 is 0
9999 mem: storing 1 in location 101070
 103 run: reply result:boolean
9999 mem: location 101070 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 101058
 102 run: break-unless empty:boolean, 
9999 mem: location 101058 is 1
9999 run: jump-unless fell through
 102 run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101057 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 101057 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 101059
 102 run: wait-for-location free-address:address:number/deref
9999 mem: location 101059 is 1008
9999 mem: location 1008 is 0
9999 mem: location 101059 is 1008
9999 run: waiting for location 1008 to change from 0
schedule: waking up routine 1
schedule: run1001/buffer-lines-blocks-until-newline
 102 run: 5:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1029
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1050
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 1052
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1052 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 1052 is 1029
9999 run: address to copy is 1029
9999 run: its type is number
9999 mem: location 1029 is 0
9999 mem: storing 0 in location 1053
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1052 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 1052 is 1029
9999 run: address to copy is 1030
9999 run: its type is number
9999 mem: location 1030 is 0
9999 mem: storing 0 in location 1054
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1053 is 0
9999 mem: location 1054 is 0
9999 mem: storing 1 in location 1055
 103 run: reply result:boolean
9999 mem: location 1055 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 5
 102 run: assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
9999 mem: location 5 is 1
 102 run: 1:address:channel <- write 1:address:channel, 97:literal/a
9999 mem: location 1 is 1007
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1056
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1058
 103 run: val:location <- next-ingredient 
9999 mem: storing 97 in location 1059
 103 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1058 is 1007
 104 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1067
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1069
 104 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1069 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1069 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1070
 104 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 1070 is 0
9999 mem: storing 1 in location 1070
 104 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1069 is 1007
 105 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1075
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1077
 105 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1077 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1077 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1078
 105 run: result:number <- length q:address:array:location/deref
9999 mem: location 1078 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1078 is 1010
9999 mem: storing 11 in location 1079
 105 run: reply result:number
9999 mem: location 1079 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 1071
 104 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1070 is 1
9999 mem: location 1071 is 11
9999 mem: storing 0 in location 1072
 104 run: break-unless at-end?:boolean, 
9999 mem: location 1072 is 0
9999 run: jumping to instruction 9
 104 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1069 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1069 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1073
 104 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1073 is 0
9999 mem: location 1070 is 1
9999 mem: storing 0 in location 1074
 104 run: reply result:boolean
9999 mem: location 1074 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1060
 103 run: break-unless full:boolean, 
9999 mem: location 1060 is 0
9999 run: jumping to instruction 8
 103 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1058 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1058 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1062
 103 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 1058 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1058 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1063
 103 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 1062 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1063 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1062 is 1010
9999 mem: location 1063 is 1008
9999 mem: location 1008 is 0
9999 mem: storing 1011 in location 1064
 103 run: dest:address:location/deref <- copy val:location
9999 mem: location 1059 is 97
9999 mem: location 1064 is 1011
9999 mem: storing 97 in location 1011
 103 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 1063 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1063 is 1008
9999 mem: storing 1 in location 1008
 103 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 1062 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1062 is 1010
9999 mem: storing 11 in location 1065
 103 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 1063 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1065 is 11
9999 mem: storing 0 in location 1066
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1066 is 0
9999 run: jumping to instruction 19
 103 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1058 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 102 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 102 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
schedule: read/buffer-lines
 102 run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
9999 mem: location 101057 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 101057 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 101060
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101057 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 101057 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 101061
 102 run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
9999 mem: location 101061 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 101060 is 1007
9999 mem: location 1007 is 0
9999 mem: location 101061 is 1010
9999 mem: location 101060 is 1007
9999 mem: location 1007 is 0
9999 run: address to copy is 1011
9999 run: its type is number
9999 mem: location 1011 is 97
9999 mem: storing 97 in location 101062
 102 run: full:address:number/deref <- add full:address:number/deref, 1:literal
9999 mem: location 101060 is 1007
9999 mem: location 1007 is 0
9999 mem: location 101060 is 1007
9999 mem: storing 1 in location 1007
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 101061 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 101061 is 1010
9999 mem: storing 11 in location 101063
 102 run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
9999 mem: location 101060 is 1007
9999 mem: location 1007 is 1
9999 mem: location 101063 is 11
9999 mem: storing 0 in location 101064
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101064 is 0
9999 run: jumping to instruction 17
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 101062 is 97
9999 mem: location 101057 is 1007
9999 run: result 0 is 97
9999 run: result 1 is 1007
9999 mem: storing 97 in location 101005
9999 mem: storing 1007 in location 101002
 101 run: backspace?:boolean <- equal c:character, 8:literal
9999 mem: location 101005 is 97
9999 mem: storing 0 in location 101006
 101 run: break-unless backspace?:boolean, 
9999 mem: location 101006 is 0
9999 run: jumping to instruction 18
 101 run: line:address:buffer <- buffer-append line:address:buffer, c:character
9999 mem: location 101004 is 101022
9999 mem: location 101005 is 97
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 101071
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101022 in location 101073
 102 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 101074
 102 run: len:address:number <- get-address in:address:buffer/deref, length:offset
9999 mem: location 101073 is 101022
9999 mem: location 101022 is 0
9999 mem: location 101023 is 101024
9999 mem: location 101073 is 101022
9999 run: address to copy is 101022
9999 mem: storing 101022 in location 101075
 102 run: backspace?:boolean <- equal c:character, 8:literal/backspace
9999 mem: location 101074 is 97
9999 mem: storing 0 in location 101076
 102 run: break-unless backspace?:boolean, 
9999 mem: location 101076 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 101073 is 101022
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 101081
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101022 in location 101083
 103 run: len:number <- get in:address:buffer/deref, length:offset
9999 mem: location 101083 is 101022
9999 mem: location 101022 is 0
9999 mem: location 101023 is 101024
9999 mem: location 101083 is 101022
9999 run: address to copy is 101022
9999 run: its type is number
9999 mem: location 101022 is 0
9999 mem: storing 0 in location 101084
 103 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 101083 is 101022
9999 mem: location 101022 is 0
9999 mem: location 101023 is 101024
9999 mem: location 101083 is 101022
9999 run: address to copy is 101023
9999 run: its type is address
9999 mem: location 101023 is 101024
9999 mem: storing 101024 in location 101085
 103 run: capacity:number <- length s:address:array:character/deref
9999 mem: location 101085 is 101024
9999 mem: location 101024 is 30
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101048 is 0
9999 mem: location 101049 is 0
9999 mem: location 101050 is 0
9999 mem: location 101051 is 0
9999 mem: location 101052 is 0
9999 mem: location 101053 is 0
9999 mem: location 101054 is 0
9999 mem: location 101085 is 101024
9999 mem: storing 30 in location 101086
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 101084 is 0
9999 mem: location 101086 is 30
9999 mem: storing 0 in location 101087
 103 run: reply result:boolean
9999 mem: location 101087 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101078
 102 run: break-unless full?:boolean, 
9999 mem: location 101078 is 0
9999 run: jumping to instruction 17
 102 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 101073 is 101022
9999 mem: location 101022 is 0
9999 mem: location 101023 is 101024
9999 mem: location 101073 is 101022
9999 run: address to copy is 101023
9999 run: its type is address
9999 mem: location 101023 is 101024
9999 mem: storing 101024 in location 101079
 102 run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
9999 mem: location 101079 is 101024
9999 mem: location 101024 is 30
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101048 is 0
9999 mem: location 101049 is 0
9999 mem: location 101050 is 0
9999 mem: location 101051 is 0
9999 mem: location 101052 is 0
9999 mem: location 101053 is 0
9999 mem: location 101054 is 0
9999 mem: location 101075 is 101022
9999 mem: location 101022 is 0
9999 mem: location 101079 is 101024
9999 mem: location 101075 is 101022
9999 mem: location 101022 is 0
9999 mem: storing 101025 in location 101080
 102 run: dest:address:character/deref <- copy c:character
9999 mem: location 101074 is 97
9999 mem: location 101080 is 101025
9999 mem: storing 97 in location 101025
 102 run: len:address:number/deref <- add len:address:number/deref, 1:literal
9999 mem: location 101075 is 101022
9999 mem: location 101022 is 0
9999 mem: location 101075 is 101022
9999 mem: storing 1 in location 101022
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 101073 is 101022
9999 run: result 0 is 101022
9999 mem: storing 101022 in location 101004
 101 run: line-done?:boolean <- equal c:character, 10:literal/newline
9999 mem: location 101005 is 97
9999 mem: storing 0 in location 101009
 101 run: break-if line-done?:boolean, 
9999 mem: location 101009 is 0
9999 run: jump-if fell through
 101 run: eof?:boolean <- equal c:character, 0:literal/eof
9999 mem: location 101005 is 97
9999 mem: storing 0 in location 101010
 101 run: break-if eof?:boolean, 
9999 mem: location 101010 is 0
9999 run: jump-if fell through
 101 run: loop 
9999 run: jumping to instruction 6
 101 run: c:character, in:address:channel <- read in:address:channel
9999 mem: location 101002 is 1007
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 101088
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101090
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 101090 is 1007
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 101098
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101100
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101100 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 101100 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 1
9999 mem: storing 1 in location 101101
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101100 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 101100 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 101102
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 101101 is 1
9999 mem: location 101102 is 1
9999 mem: storing 1 in location 101103
 103 run: reply result:boolean
9999 mem: location 101103 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 101091
 102 run: break-unless empty:boolean, 
9999 mem: location 101091 is 1
9999 run: jump-unless fell through
 102 run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101090 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 101090 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 101092
 102 run: wait-for-location free-address:address:number/deref
9999 mem: location 101092 is 1008
9999 mem: location 1008 is 1
9999 mem: location 101092 is 1008
9999 run: waiting for location 1008 to change from 1
schedule: waking up routine 1
schedule: run1001/buffer-lines-blocks-until-newline
 102 run: 6:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1029
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1080
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 1082
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1082 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 1082 is 1029
9999 run: address to copy is 1029
9999 run: its type is number
9999 mem: location 1029 is 0
9999 mem: storing 0 in location 1083
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1082 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 1082 is 1029
9999 run: address to copy is 1030
9999 run: its type is number
9999 mem: location 1030 is 0
9999 mem: storing 0 in location 1084
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: storing 1 in location 1085
 103 run: reply result:boolean
9999 mem: location 1085 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 6
 102 run: assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
9999 mem: location 6 is 1
 102 run: 1:address:channel <- write 1:address:channel, 98:literal/b
9999 mem: location 1 is 1007
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1086
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1088
 103 run: val:location <- next-ingredient 
9999 mem: storing 98 in location 1089
 103 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1088 is 1007
 104 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1097
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1099
 104 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1099 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1099 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 1100
 104 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 1100 is 1
9999 mem: storing 2 in location 1100
 104 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1099 is 1007
 105 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1105
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1107
 105 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1107 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1107 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1108
 105 run: result:number <- length q:address:array:location/deref
9999 mem: location 1108 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1108 is 1010
9999 mem: storing 11 in location 1109
 105 run: reply result:number
9999 mem: location 1109 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 1101
 104 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1100 is 2
9999 mem: location 1101 is 11
9999 mem: storing 0 in location 1102
 104 run: break-unless at-end?:boolean, 
9999 mem: location 1102 is 0
9999 run: jumping to instruction 9
 104 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1099 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1099 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 1
9999 mem: storing 1 in location 1103
 104 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1103 is 1
9999 mem: location 1100 is 2
9999 mem: storing 0 in location 1104
 104 run: reply result:boolean
9999 mem: location 1104 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1090
 103 run: break-unless full:boolean, 
9999 mem: location 1090 is 0
9999 run: jumping to instruction 8
 103 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1088 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1088 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1092
 103 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 1088 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1088 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1093
 103 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 1092 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1093 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1092 is 1010
9999 mem: location 1093 is 1008
9999 mem: location 1008 is 1
9999 mem: storing 1012 in location 1094
 103 run: dest:address:location/deref <- copy val:location
9999 mem: location 1089 is 98
9999 mem: location 1094 is 1012
9999 mem: storing 98 in location 1012
 103 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 1093 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1093 is 1008
9999 mem: storing 2 in location 1008
 103 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 1092 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1092 is 1010
9999 mem: storing 11 in location 1095
 103 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 1093 is 1008
9999 mem: location 1008 is 2
9999 mem: location 1095 is 11
9999 mem: storing 0 in location 1096
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1096 is 0
9999 run: jumping to instruction 19
 103 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1088 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 102 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 102 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
schedule: read/buffer-lines
 102 run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
9999 mem: location 101090 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 101090 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 101093
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101090 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 101090 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 101094
 102 run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
9999 mem: location 101094 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 101093 is 1007
9999 mem: location 1007 is 1
9999 mem: location 101094 is 1010
9999 mem: location 101093 is 1007
9999 mem: location 1007 is 1
9999 run: address to copy is 1012
9999 run: its type is number
9999 mem: location 1012 is 98
9999 mem: storing 98 in location 101095
 102 run: full:address:number/deref <- add full:address:number/deref, 1:literal
9999 mem: location 101093 is 1007
9999 mem: location 1007 is 1
9999 mem: location 101093 is 1007
9999 mem: storing 2 in location 1007
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 101094 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 101094 is 1010
9999 mem: storing 11 in location 101096
 102 run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
9999 mem: location 101093 is 1007
9999 mem: location 1007 is 2
9999 mem: location 101096 is 11
9999 mem: storing 0 in location 101097
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101097 is 0
9999 run: jumping to instruction 17
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 101095 is 98
9999 mem: location 101090 is 1007
9999 run: result 0 is 98
9999 run: result 1 is 1007
9999 mem: storing 98 in location 101005
9999 mem: storing 1007 in location 101002
 101 run: backspace?:boolean <- equal c:character, 8:literal
9999 mem: location 101005 is 98
9999 mem: storing 0 in location 101006
 101 run: break-unless backspace?:boolean, 
9999 mem: location 101006 is 0
9999 run: jumping to instruction 18
 101 run: line:address:buffer <- buffer-append line:address:buffer, c:character
9999 mem: location 101004 is 101022
9999 mem: location 101005 is 98
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 101104
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101022 in location 101106
 102 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 101107
 102 run: len:address:number <- get-address in:address:buffer/deref, length:offset
9999 mem: location 101106 is 101022
9999 mem: location 101022 is 1
9999 mem: location 101023 is 101024
9999 mem: location 101106 is 101022
9999 run: address to copy is 101022
9999 mem: storing 101022 in location 101108
 102 run: backspace?:boolean <- equal c:character, 8:literal/backspace
9999 mem: location 101107 is 98
9999 mem: storing 0 in location 101109
 102 run: break-unless backspace?:boolean, 
9999 mem: location 101109 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 101106 is 101022
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 101114
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101022 in location 101116
 103 run: len:number <- get in:address:buffer/deref, length:offset
9999 mem: location 101116 is 101022
9999 mem: location 101022 is 1
9999 mem: location 101023 is 101024
9999 mem: location 101116 is 101022
9999 run: address to copy is 101022
9999 run: its type is number
9999 mem: location 101022 is 1
9999 mem: storing 1 in location 101117
 103 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 101116 is 101022
9999 mem: location 101022 is 1
9999 mem: location 101023 is 101024
9999 mem: location 101116 is 101022
9999 run: address to copy is 101023
9999 run: its type is address
9999 mem: location 101023 is 101024
9999 mem: storing 101024 in location 101118
 103 run: capacity:number <- length s:address:array:character/deref
9999 mem: location 101118 is 101024
9999 mem: location 101024 is 30
9999 mem: location 101025 is 97
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101048 is 0
9999 mem: location 101049 is 0
9999 mem: location 101050 is 0
9999 mem: location 101051 is 0
9999 mem: location 101052 is 0
9999 mem: location 101053 is 0
9999 mem: location 101054 is 0
9999 mem: location 101118 is 101024
9999 mem: storing 30 in location 101119
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 101117 is 1
9999 mem: location 101119 is 30
9999 mem: storing 0 in location 101120
 103 run: reply result:boolean
9999 mem: location 101120 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101111
 102 run: break-unless full?:boolean, 
9999 mem: location 101111 is 0
9999 run: jumping to instruction 17
 102 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 101106 is 101022
9999 mem: location 101022 is 1
9999 mem: location 101023 is 101024
9999 mem: location 101106 is 101022
9999 run: address to copy is 101023
9999 run: its type is address
9999 mem: location 101023 is 101024
9999 mem: storing 101024 in location 101112
 102 run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
9999 mem: location 101112 is 101024
9999 mem: location 101024 is 30
9999 mem: location 101025 is 97
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101048 is 0
9999 mem: location 101049 is 0
9999 mem: location 101050 is 0
9999 mem: location 101051 is 0
9999 mem: location 101052 is 0
9999 mem: location 101053 is 0
9999 mem: location 101054 is 0
9999 mem: location 101108 is 101022
9999 mem: location 101022 is 1
9999 mem: location 101112 is 101024
9999 mem: location 101108 is 101022
9999 mem: location 101022 is 1
9999 mem: storing 101026 in location 101113
 102 run: dest:address:character/deref <- copy c:character
9999 mem: location 101107 is 98
9999 mem: location 101113 is 101026
9999 mem: storing 98 in location 101026
 102 run: len:address:number/deref <- add len:address:number/deref, 1:literal
9999 mem: location 101108 is 101022
9999 mem: location 101022 is 1
9999 mem: location 101108 is 101022
9999 mem: storing 2 in location 101022
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 101106 is 101022
9999 run: result 0 is 101022
9999 mem: storing 101022 in location 101004
 101 run: line-done?:boolean <- equal c:character, 10:literal/newline
9999 mem: location 101005 is 98
9999 mem: storing 0 in location 101009
 101 run: break-if line-done?:boolean, 
9999 mem: location 101009 is 0
9999 run: jump-if fell through
 101 run: eof?:boolean <- equal c:character, 0:literal/eof
9999 mem: location 101005 is 98
9999 mem: storing 0 in location 101010
 101 run: break-if eof?:boolean, 
9999 mem: location 101010 is 0
9999 run: jump-if fell through
 101 run: loop 
9999 run: jumping to instruction 6
 101 run: c:character, in:address:channel <- read in:address:channel
9999 mem: location 101002 is 1007
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 101121
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101123
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 101123 is 1007
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 101131
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101133
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101133 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 101133 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 2
9999 mem: storing 2 in location 101134
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101133 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 101133 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 2
9999 mem: storing 2 in location 101135
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 101134 is 2
9999 mem: location 101135 is 2
9999 mem: storing 1 in location 101136
 103 run: reply result:boolean
9999 mem: location 101136 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 101124
 102 run: break-unless empty:boolean, 
9999 mem: location 101124 is 1
9999 run: jump-unless fell through
 102 run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101123 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 101123 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 101125
 102 run: wait-for-location free-address:address:number/deref
9999 mem: location 101125 is 1008
9999 mem: location 1008 is 2
9999 mem: location 101125 is 1008
9999 run: waiting for location 1008 to change from 2
schedule: waking up routine 1
schedule: run1001/buffer-lines-blocks-until-newline
 102 run: 7:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1029
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1110
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 1112
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1112 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 1112 is 1029
9999 run: address to copy is 1029
9999 run: its type is number
9999 mem: location 1029 is 0
9999 mem: storing 0 in location 1113
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1112 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 1112 is 1029
9999 run: address to copy is 1030
9999 run: its type is number
9999 mem: location 1030 is 0
9999 mem: storing 0 in location 1114
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1113 is 0
9999 mem: location 1114 is 0
9999 mem: storing 1 in location 1115
 103 run: reply result:boolean
9999 mem: location 1115 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 7
 102 run: assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
9999 mem: location 7 is 1
 102 run: 1:address:channel <- write 1:address:channel, 10:literal/newline
9999 mem: location 1 is 1007
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1116
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1118
 103 run: val:location <- next-ingredient 
9999 mem: storing 10 in location 1119
 103 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1118 is 1007
 104 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1127
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1129
 104 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1129 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1129 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 2
9999 mem: storing 2 in location 1130
 104 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 1130 is 2
9999 mem: storing 3 in location 1130
 104 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1129 is 1007
 105 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1135
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1137
 105 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1137 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1137 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1138
 105 run: result:number <- length q:address:array:location/deref
9999 mem: location 1138 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1138 is 1010
9999 mem: storing 11 in location 1139
 105 run: reply result:number
9999 mem: location 1139 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 1131
 104 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1130 is 3
9999 mem: location 1131 is 11
9999 mem: storing 0 in location 1132
 104 run: break-unless at-end?:boolean, 
9999 mem: location 1132 is 0
9999 run: jumping to instruction 9
 104 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1129 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1129 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 2
9999 mem: storing 2 in location 1133
 104 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1133 is 2
9999 mem: location 1130 is 3
9999 mem: storing 0 in location 1134
 104 run: reply result:boolean
9999 mem: location 1134 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1120
 103 run: break-unless full:boolean, 
9999 mem: location 1120 is 0
9999 run: jumping to instruction 8
 103 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1118 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1118 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1122
 103 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 1118 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1118 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1123
 103 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 1122 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1123 is 1008
9999 mem: location 1008 is 2
9999 mem: location 1122 is 1010
9999 mem: location 1123 is 1008
9999 mem: location 1008 is 2
9999 mem: storing 1013 in location 1124
 103 run: dest:address:location/deref <- copy val:location
9999 mem: location 1119 is 10
9999 mem: location 1124 is 1013
9999 mem: storing 10 in location 1013
 103 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 1123 is 1008
9999 mem: location 1008 is 2
9999 mem: location 1123 is 1008
9999 mem: storing 3 in location 1008
 103 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 1122 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 10
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1122 is 1010
9999 mem: storing 11 in location 1125
 103 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 1123 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1125 is 11
9999 mem: storing 0 in location 1126
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1126 is 0
9999 run: jumping to instruction 19
 103 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1118 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 102 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 102 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
schedule: read/buffer-lines
 102 run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
9999 mem: location 101123 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 101123 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 101126
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101123 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 101123 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 101127
 102 run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
9999 mem: location 101127 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 10
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 101126 is 1007
9999 mem: location 1007 is 2
9999 mem: location 101127 is 1010
9999 mem: location 101126 is 1007
9999 mem: location 1007 is 2
9999 run: address to copy is 1013
9999 run: its type is number
9999 mem: location 1013 is 10
9999 mem: storing 10 in location 101128
 102 run: full:address:number/deref <- add full:address:number/deref, 1:literal
9999 mem: location 101126 is 1007
9999 mem: location 1007 is 2
9999 mem: location 101126 is 1007
9999 mem: storing 3 in location 1007
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 101127 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 10
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 101127 is 1010
9999 mem: storing 11 in location 101129
 102 run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
9999 mem: location 101126 is 1007
9999 mem: location 1007 is 3
9999 mem: location 101129 is 11
9999 mem: storing 0 in location 101130
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101130 is 0
9999 run: jumping to instruction 17
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 101128 is 10
9999 mem: location 101123 is 1007
9999 run: result 0 is 10
9999 run: result 1 is 1007
9999 mem: storing 10 in location 101005
9999 mem: storing 1007 in location 101002
 101 run: backspace?:boolean <- equal c:character, 8:literal
9999 mem: location 101005 is 10
9999 mem: storing 0 in location 101006
 101 run: break-unless backspace?:boolean, 
9999 mem: location 101006 is 0
9999 run: jumping to instruction 18
 101 run: line:address:buffer <- buffer-append line:address:buffer, c:character
9999 mem: location 101004 is 101022
9999 mem: location 101005 is 10
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 101137
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101022 in location 101139
 102 run: c:character <- next-ingredient 
9999 mem: storing 10 in location 101140
 102 run: len:address:number <- get-address in:address:buffer/deref, length:offset
9999 mem: location 101139 is 101022
9999 mem: location 101022 is 2
9999 mem: location 101023 is 101024
9999 mem: location 101139 is 101022
9999 run: address to copy is 101022
9999 mem: storing 101022 in location 101141
 102 run: backspace?:boolean <- equal c:character, 8:literal/backspace
9999 mem: location 101140 is 10
9999 mem: storing 0 in location 101142
 102 run: break-unless backspace?:boolean, 
9999 mem: location 101142 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 101139 is 101022
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 101147
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101022 in location 101149
 103 run: len:number <- get in:address:buffer/deref, length:offset
9999 mem: location 101149 is 101022
9999 mem: location 101022 is 2
9999 mem: location 101023 is 101024
9999 mem: location 101149 is 101022
9999 run: address to copy is 101022
9999 run: its type is number
9999 mem: location 101022 is 2
9999 mem: storing 2 in location 101150
 103 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 101149 is 101022
9999 mem: location 101022 is 2
9999 mem: location 101023 is 101024
9999 mem: location 101149 is 101022
9999 run: address to copy is 101023
9999 run: its type is address
9999 mem: location 101023 is 101024
9999 mem: storing 101024 in location 101151
 103 run: capacity:number <- length s:address:array:character/deref
9999 mem: location 101151 is 101024
9999 mem: location 101024 is 30
9999 mem: location 101025 is 97
9999 mem: location 101026 is 98
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101048 is 0
9999 mem: location 101049 is 0
9999 mem: location 101050 is 0
9999 mem: location 101051 is 0
9999 mem: location 101052 is 0
9999 mem: location 101053 is 0
9999 mem: location 101054 is 0
9999 mem: location 101151 is 101024
9999 mem: storing 30 in location 101152
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 101150 is 2
9999 mem: location 101152 is 30
9999 mem: storing 0 in location 101153
 103 run: reply result:boolean
9999 mem: location 101153 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101144
 102 run: break-unless full?:boolean, 
9999 mem: location 101144 is 0
9999 run: jumping to instruction 17
 102 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 101139 is 101022
9999 mem: location 101022 is 2
9999 mem: location 101023 is 101024
9999 mem: location 101139 is 101022
9999 run: address to copy is 101023
9999 run: its type is address
9999 mem: location 101023 is 101024
9999 mem: storing 101024 in location 101145
 102 run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
9999 mem: location 101145 is 101024
9999 mem: location 101024 is 30
9999 mem: location 101025 is 97
9999 mem: location 101026 is 98
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101048 is 0
9999 mem: location 101049 is 0
9999 mem: location 101050 is 0
9999 mem: location 101051 is 0
9999 mem: location 101052 is 0
9999 mem: location 101053 is 0
9999 mem: location 101054 is 0
9999 mem: location 101141 is 101022
9999 mem: location 101022 is 2
9999 mem: location 101145 is 101024
9999 mem: location 101141 is 101022
9999 mem: location 101022 is 2
9999 mem: storing 101027 in location 101146
 102 run: dest:address:character/deref <- copy c:character
9999 mem: location 101140 is 10
9999 mem: location 101146 is 101027
9999 mem: storing 10 in location 101027
 102 run: len:address:number/deref <- add len:address:number/deref, 1:literal
9999 mem: location 101141 is 101022
9999 mem: location 101022 is 2
9999 mem: location 101141 is 101022
9999 mem: storing 3 in location 101022
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 101139 is 101022
9999 run: result 0 is 101022
9999 mem: storing 101022 in location 101004
 101 run: line-done?:boolean <- equal c:character, 10:literal/newline
9999 mem: location 101005 is 10
9999 mem: storing 1 in location 101009
 101 run: break-if line-done?:boolean, 
9999 mem: location 101009 is 1
9999 run: jumping to instruction 25
 101 run: i:number <- copy 0:literal
9999 mem: storing 0 in location 101011
 101 run: line-contents:address:array:character <- get line:address:buffer/deref, data:offset
9999 mem: location 101004 is 101022
9999 mem: location 101022 is 3
9999 mem: location 101023 is 101024
9999 mem: location 101004 is 101022
9999 run: address to copy is 101023
9999 run: its type is address
9999 mem: location 101023 is 101024
9999 mem: storing 101024 in location 101012
 101 run: max:number <- get line:address:buffer/deref, length:offset
9999 mem: location 101004 is 101022
9999 mem: location 101022 is 3
9999 mem: location 101023 is 101024
9999 mem: location 101004 is 101022
9999 run: address to copy is 101022
9999 run: its type is number
9999 mem: location 101022 is 3
9999 mem: storing 3 in location 101013
 101 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 101011 is 0
9999 mem: location 101013 is 3
9999 mem: storing 0 in location 101014
 101 run: break-if done?:boolean, 
9999 mem: location 101014 is 0
9999 run: jump-if fell through
 101 run: c:character <- index line-contents:address:array:character/deref, i:number
9999 mem: location 101012 is 101024
9999 mem: location 101024 is 30
9999 mem: location 101025 is 97
9999 mem: location 101026 is 98
9999 mem: location 101027 is 10
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101048 is 0
9999 mem: location 101049 is 0
9999 mem: location 101050 is 0
9999 mem: location 101051 is 0
9999 mem: location 101052 is 0
9999 mem: location 101053 is 0
9999 mem: location 101054 is 0
9999 mem: location 101011 is 0
9999 mem: location 101012 is 101024
9999 mem: location 101011 is 0
9999 run: address to copy is 101025
9999 run: its type is character
9999 mem: location 101025 is 97
9999 mem: storing 97 in location 101005
 101 run: out:address:channel <- write out:address:channel, c:character
9999 mem: location 101003 is 1029
9999 mem: location 101005 is 97
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 101154
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 101156
 102 run: val:location <- next-ingredient 
9999 mem: storing 97 in location 101157
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 101156 is 1029
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 101165
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 101167
 103 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101167 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 101167 is 1029
9999 run: address to copy is 1030
9999 run: its type is number
9999 mem: location 1030 is 0
9999 mem: storing 0 in location 101168
 103 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 101168 is 0
9999 mem: storing 1 in location 101168
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 101167 is 1029
 104 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 101173
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 101175
 104 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101175 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 101175 is 1029
9999 run: address to copy is 1031
9999 run: its type is address
9999 mem: location 1031 is 1032
9999 mem: storing 1032 in location 101176
 104 run: result:number <- length q:address:array:location/deref
9999 mem: location 101176 is 1032
9999 mem: location 1032 is 11
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 101176 is 1032
9999 mem: storing 11 in location 101177
 104 run: reply result:number
9999 mem: location 101177 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 101169
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 101168 is 1
9999 mem: location 101169 is 11
9999 mem: storing 0 in location 101170
 103 run: break-unless at-end?:boolean, 
9999 mem: location 101170 is 0
9999 run: jumping to instruction 9
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101167 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 101167 is 1029
9999 run: address to copy is 1029
9999 run: its type is number
9999 mem: location 1029 is 0
9999 mem: storing 0 in location 101171
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 101171 is 0
9999 mem: location 101168 is 1
9999 mem: storing 0 in location 101172
 103 run: reply result:boolean
9999 mem: location 101172 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101158
 102 run: break-unless full:boolean, 
9999 mem: location 101158 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101156 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 101156 is 1029
9999 run: address to copy is 1031
9999 run: its type is address
9999 mem: location 1031 is 1032
9999 mem: storing 1032 in location 101160
 102 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101156 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 1032
9999 mem: location 101156 is 1029
9999 run: address to copy is 1030
9999 mem: storing 1030 in location 101161
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 101160 is 1032
9999 mem: location 1032 is 11
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 101161 is 1030
9999 mem: location 1030 is 0
9999 mem: location 101160 is 1032
9999 mem: location 101161 is 1030
9999 mem: location 1030 is 0
9999 mem: storing 1033 in location 101162
 102 run: dest:address:location/deref <- copy val:location
9999 mem: location 101157 is 97
9999 mem: location 101162 is 1033
9999 mem: storing 97 in location 1033
 102 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 101161 is 1030
9999 mem: location 1030 is 0
9999 mem: location 101161 is 1030
9999 mem: storing 1 in location 1030
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 101160 is 1032
9999 mem: location 1032 is 11
9999 mem: location 1033 is 97
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 101160 is 1032
9999 mem: storing 11 in location 101163
 102 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 101161 is 1030
9999 mem: location 1030 is 1
9999 mem: location 101163 is 11
9999 mem: storing 0 in location 101164
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101164 is 0
9999 run: jumping to instruction 19
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 101156 is 1029
9999 run: result 0 is 1029
9999 mem: storing 1029 in location 101003
 101 run: i:number <- add i:number, 1:literal
9999 mem: location 101011 is 0
9999 mem: storing 1 in location 101011
 101 run: loop 
9999 run: jumping to instruction 30
 101 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 101011 is 1
9999 mem: location 101013 is 3
9999 mem: storing 0 in location 101014
 101 run: break-if done?:boolean, 
9999 mem: location 101014 is 0
9999 run: jump-if fell through
 101 run: c:character <- index line-contents:address:array:character/deref, i:number
9999 mem: location 101012 is 101024
9999 mem: location 101024 is 30
9999 mem: location 101025 is 97
9999 mem: location 101026 is 98
9999 mem: location 101027 is 10
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101048 is 0
9999 mem: location 101049 is 0
9999 mem: location 101050 is 0
9999 mem: location 101051 is 0
9999 mem: location 101052 is 0
9999 mem: location 101053 is 0
9999 mem: location 101054 is 0
9999 mem: location 101011 is 1
9999 mem: location 101012 is 101024
9999 mem: location 101011 is 1
9999 run: address to copy is 101026
9999 run: its type is character
9999 mem: location 101026 is 98
9999 mem: storing 98 in location 101005
 101 run: out:address:channel <- write out:address:channel, c:character
9999 mem: location 101003 is 1029
9999 mem: location 101005 is 98
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 101178
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 101180
 102 run: val:location <- next-ingredient 
9999 mem: storing 98 in location 101181
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 101180 is 1029
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 101189
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 101191
 103 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101191 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 1
9999 mem: location 1031 is 1032
9999 mem: location 101191 is 1029
9999 run: address to copy is 1030
9999 run: its type is number
9999 mem: location 1030 is 1
9999 mem: storing 1 in location 101192
 103 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 101192 is 1
9999 mem: storing 2 in location 101192
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 101191 is 1029
 104 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 101197
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 101199
 104 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101199 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 1
9999 mem: location 1031 is 1032
9999 mem: location 101199 is 1029
9999 run: address to copy is 1031
9999 run: its type is address
9999 mem: location 1031 is 1032
9999 mem: storing 1032 in location 101200
 104 run: result:number <- length q:address:array:location/deref
9999 mem: location 101200 is 1032
9999 mem: location 1032 is 11
9999 mem: location 1033 is 97
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 101200 is 1032
9999 mem: storing 11 in location 101201
 104 run: reply result:number
9999 mem: location 101201 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 101193
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 101192 is 2
9999 mem: location 101193 is 11
9999 mem: storing 0 in location 101194
 103 run: break-unless at-end?:boolean, 
9999 mem: location 101194 is 0
9999 run: jumping to instruction 9
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101191 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 1
9999 mem: location 1031 is 1032
9999 mem: location 101191 is 1029
9999 run: address to copy is 1029
9999 run: its type is number
9999 mem: location 1029 is 0
9999 mem: storing 0 in location 101195
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 101195 is 0
9999 mem: location 101192 is 2
9999 mem: storing 0 in location 101196
 103 run: reply result:boolean
9999 mem: location 101196 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101182
 102 run: break-unless full:boolean, 
9999 mem: location 101182 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101180 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 1
9999 mem: location 1031 is 1032
9999 mem: location 101180 is 1029
9999 run: address to copy is 1031
9999 run: its type is address
9999 mem: location 1031 is 1032
9999 mem: storing 1032 in location 101184
 102 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101180 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 1
9999 mem: location 1031 is 1032
9999 mem: location 101180 is 1029
9999 run: address to copy is 1030
9999 mem: storing 1030 in location 101185
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 101184 is 1032
9999 mem: location 1032 is 11
9999 mem: location 1033 is 97
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 101185 is 1030
9999 mem: location 1030 is 1
9999 mem: location 101184 is 1032
9999 mem: location 101185 is 1030
9999 mem: location 1030 is 1
9999 mem: storing 1034 in location 101186
 102 run: dest:address:location/deref <- copy val:location
9999 mem: location 101181 is 98
9999 mem: location 101186 is 1034
9999 mem: storing 98 in location 1034
 102 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 101185 is 1030
9999 mem: location 1030 is 1
9999 mem: location 101185 is 1030
9999 mem: storing 2 in location 1030
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 101184 is 1032
9999 mem: location 1032 is 11
9999 mem: location 1033 is 97
9999 mem: location 1034 is 98
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 101184 is 1032
9999 mem: storing 11 in location 101187
 102 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 101185 is 1030
9999 mem: location 1030 is 2
9999 mem: location 101187 is 11
9999 mem: storing 0 in location 101188
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101188 is 0
9999 run: jumping to instruction 19
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 101180 is 1029
9999 run: result 0 is 1029
9999 mem: storing 1029 in location 101003
 101 run: i:number <- add i:number, 1:literal
9999 mem: location 101011 is 1
9999 mem: storing 2 in location 101011
 101 run: loop 
9999 run: jumping to instruction 30
 101 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 101011 is 2
9999 mem: location 101013 is 3
9999 mem: storing 0 in location 101014
 101 run: break-if done?:boolean, 
9999 mem: location 101014 is 0
9999 run: jump-if fell through
 101 run: c:character <- index line-contents:address:array:character/deref, i:number
9999 mem: location 101012 is 101024
9999 mem: location 101024 is 30
9999 mem: location 101025 is 97
9999 mem: location 101026 is 98
9999 mem: location 101027 is 10
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101048 is 0
9999 mem: location 101049 is 0
9999 mem: location 101050 is 0
9999 mem: location 101051 is 0
9999 mem: location 101052 is 0
9999 mem: location 101053 is 0
9999 mem: location 101054 is 0
9999 mem: location 101011 is 2
9999 mem: location 101012 is 101024
9999 mem: location 101011 is 2
9999 run: address to copy is 101027
9999 run: its type is character
9999 mem: location 101027 is 10
9999 mem: storing 10 in location 101005
 101 run: out:address:channel <- write out:address:channel, c:character
9999 mem: location 101003 is 1029
9999 mem: location 101005 is 10
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 101202
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 101204
 102 run: val:location <- next-ingredient 
9999 mem: storing 10 in location 101205
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 101204 is 1029
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 101213
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 101215
 103 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101215 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 2
9999 mem: location 1031 is 1032
9999 mem: location 101215 is 1029
9999 run: address to copy is 1030
9999 run: its type is number
9999 mem: location 1030 is 2
9999 mem: storing 2 in location 101216
 103 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 101216 is 2
9999 mem: storing 3 in location 101216
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 101215 is 1029
 104 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 101221
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 101223
 104 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101223 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 2
9999 mem: location 1031 is 1032
9999 mem: location 101223 is 1029
9999 run: address to copy is 1031
9999 run: its type is address
9999 mem: location 1031 is 1032
9999 mem: storing 1032 in location 101224
 104 run: result:number <- length q:address:array:location/deref
9999 mem: location 101224 is 1032
9999 mem: location 1032 is 11
9999 mem: location 1033 is 97
9999 mem: location 1034 is 98
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 101224 is 1032
9999 mem: storing 11 in location 101225
 104 run: reply result:number
9999 mem: location 101225 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 101217
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 101216 is 3
9999 mem: location 101217 is 11
9999 mem: storing 0 in location 101218
 103 run: break-unless at-end?:boolean, 
9999 mem: location 101218 is 0
9999 run: jumping to instruction 9
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101215 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 2
9999 mem: location 1031 is 1032
9999 mem: location 101215 is 1029
9999 run: address to copy is 1029
9999 run: its type is number
9999 mem: location 1029 is 0
9999 mem: storing 0 in location 101219
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 101219 is 0
9999 mem: location 101216 is 3
9999 mem: storing 0 in location 101220
 103 run: reply result:boolean
9999 mem: location 101220 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101206
 102 run: break-unless full:boolean, 
9999 mem: location 101206 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101204 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 2
9999 mem: location 1031 is 1032
9999 mem: location 101204 is 1029
9999 run: address to copy is 1031
9999 run: its type is address
9999 mem: location 1031 is 1032
9999 mem: storing 1032 in location 101208
 102 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101204 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 2
9999 mem: location 1031 is 1032
9999 mem: location 101204 is 1029
9999 run: address to copy is 1030
9999 mem: storing 1030 in location 101209
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 101208 is 1032
9999 mem: location 1032 is 11
9999 mem: location 1033 is 97
9999 mem: location 1034 is 98
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 101209 is 1030
9999 mem: location 1030 is 2
9999 mem: location 101208 is 1032
9999 mem: location 101209 is 1030
9999 mem: location 1030 is 2
9999 mem: storing 1035 in location 101210
 102 run: dest:address:location/deref <- copy val:location
9999 mem: location 101205 is 10
9999 mem: location 101210 is 1035
9999 mem: storing 10 in location 1035
 102 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 101209 is 1030
9999 mem: location 1030 is 2
9999 mem: location 101209 is 1030
9999 mem: storing 3 in location 1030
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 101208 is 1032
9999 mem: location 1032 is 11
9999 mem: location 1033 is 97
9999 mem: location 1034 is 98
9999 mem: location 1035 is 10
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 101208 is 1032
9999 mem: storing 11 in location 101211
 102 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 101209 is 1030
9999 mem: location 1030 is 3
9999 mem: location 101211 is 11
9999 mem: storing 0 in location 101212
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101212 is 0
9999 run: jumping to instruction 19
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 101204 is 1029
9999 run: result 0 is 1029
9999 mem: storing 1029 in location 101003
 101 run: i:number <- add i:number, 1:literal
9999 mem: location 101011 is 2
9999 mem: storing 3 in location 101011
 101 run: loop 
9999 run: jumping to instruction 30
 101 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 101011 is 3
9999 mem: location 101013 is 3
9999 mem: storing 1 in location 101014
 101 run: break-if done?:boolean, 
9999 mem: location 101014 is 1
9999 run: jumping to instruction 36
 101 run: loop 
9999 run: jumping to instruction 4
 101 run: line:address:buffer <- new-buffer 30:literal
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 101226
 102 run: result:address:buffer <- new buffer:type
9999 mem: new alloc: 101233
9999 mem: storing 101233 in location 101228
 102 run: len:address:number <- get-address result:address:buffer/deref, length:offset
9999 mem: location 101228 is 101233
9999 mem: location 101233 is 0
9999 mem: location 101234 is 0
9999 mem: location 101228 is 101233
9999 run: address to copy is 101233
9999 mem: storing 101233 in location 101229
 102 run: len:address:number/deref <- copy 0:literal
9999 mem: location 101229 is 101233
9999 mem: storing 0 in location 101233
 102 run: s:address:address:array:character <- get-address result:address:buffer/deref, data:offset
9999 mem: location 101228 is 101233
9999 mem: location 101233 is 0
9999 mem: location 101234 is 0
9999 mem: location 101228 is 101233
9999 run: address to copy is 101234
9999 mem: storing 101234 in location 101230
 102 run: capacity:number, found?:boolean <- next-ingredient 
9999 mem: storing 30 in location 101231
9999 mem: storing 1 in location 101232
 102 run: assert found?:boolean, [new-buffer must get a capacity argument]
9999 mem: location 101232 is 1
 102 run: s:address:address:array:character/deref <- new character:type, capacity:number
9999 mem: location 101231 is 30
9999 mem: array size is 30
9999 mem: new alloc: 101235
9999 mem: location 101230 is 101234
9999 mem: storing 101235 in location 101234
 102 run: reply result:address:buffer
9999 mem: location 101228 is 101233
9999 run: result 0 is 101233
9999 mem: storing 101233 in location 101004
 101 run: c:character, in:address:channel <- read in:address:channel
9999 mem: location 101002 is 1007
 102 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 101266
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101268
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 101268 is 1007
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 101276
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101278
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101278 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 101278 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 3
9999 mem: storing 3 in location 101279
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101278 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 101278 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 3
9999 mem: storing 3 in location 101280
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 101279 is 3
9999 mem: location 101280 is 3
9999 mem: storing 1 in location 101281
 103 run: reply result:boolean
9999 mem: location 101281 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 101269
 102 run: break-unless empty:boolean, 
9999 mem: location 101269 is 1
9999 run: jump-unless fell through
 102 run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101268 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 101268 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 101270
 102 run: wait-for-location free-address:address:number/deref
9999 mem: location 101270 is 1008
9999 mem: location 1008 is 3
9999 mem: location 101270 is 1008
9999 run: waiting for location 1008 to change from 3
schedule: waking up routine 1
schedule: run1001/buffer-lines-blocks-until-newline
 102 run: 8:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1029
 103 run: default-space:address:array:location <- new-default-space location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1140
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1029 in location 1142
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1142 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 3
9999 mem: location 1031 is 1032
9999 mem: location 1142 is 1029
9999 run: address to copy is 1029
9999 run: its type is number
9999 mem: location 1029 is 0
9999 mem: storing 0 in location 1143
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1142 is 1029
9999 mem: location 1029 is 0
9999 mem: location 1030 is 3
9999 mem: location 1031 is 1032
9999 mem: location 1142 is 1029
9999 run: address to copy is 1030
9999 run: its type is number
9999 mem: location 1030 is 3
9999 mem: storing 3 in location 1144
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1143 is 0
9999 mem: location 1144 is 3
9999 mem: storing 0 in location 1145
 103 run: reply result:boolean
9999 mem: location 1145 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 8
 102 run: 9:boolean/completed? <- not 8:boolean
9999 mem: location 8 is 0
9999 mem: storing 1 in location 9
 102 run: assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
9999 mem: location 9 is 1
 102 run: trace [test], [reached end]
   1 test: reached end
 101 run: trace-should-contain [
    test: reached end
  ]
