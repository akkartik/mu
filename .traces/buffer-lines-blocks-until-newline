parse: instruction: run
parse:   ingredient: {name: "\n    1:address:channel/stdin <- new-channel 10/capacity\n    2:address:channel/buffered-stdin <- new-channel 10/capacity\n    3:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    assert 3:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after init]\n    # buffer stdin into buffered-stdin, try to read from buffered-stdin\n    4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin\n    wait-for-routine 4:number/buffer-routine\n    5:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    assert 5:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]\n    # write 'a'\n    1:address:channel <- write 1:address:channel, 97/a\n    restart 4:number/buffer-routine\n    wait-for-routine 4:number/buffer-routine\n    6:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    assert 6:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a']\n    # write 'b'\n    1:address:channel <- write 1:address:channel, 98/b\n    restart 4:number/buffer-routine\n    wait-for-routine 4:number/buffer-routine\n    7:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    assert 7:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b']\n    # write newline\n    1:address:channel <- write 1:address:channel, 10/newline\n    restart 4:number/buffer-routine\n    wait-for-routine 4:number/buffer-routine\n    8:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    9:boolean/completed? <- not 8:boolean\n    assert 9:boolean/completed?, [\nF buffer-lines-blocks-until-newline: channel should contain data after writing newline]\n    trace [test], [reached end]\n  ", properties: [_: "literal-string"]}
parse: instruction: trace-should-contain
parse:   ingredient: {name: "\n    test: reached end\n  ", properties: [_: "literal-string"]}
after-brace: recipe scenario-buffer-lines-blocks-until-newline
after-brace: run ...
after-brace: trace-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: scenario-buffer-lines-blocks-until-newline
 101 run: run [
    1:address:channel/stdin <- new-channel 10/capacity
    2:address:channel/buffered-stdin <- new-channel 10/capacity
    3:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
    # buffer stdin into buffered-stdin, try to read from buffered-stdin
    4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin
    wait-for-routine 4:number/buffer-routine
    5:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
    # write 'a'
    1:address:channel <- write 1:address:channel, 97/a
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    6:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
    # write 'b'
    1:address:channel <- write 1:address:channel, 98/b
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    7:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
    # write newline
    1:address:channel <- write 1:address:channel, 10/newline
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    8:boolean <- channel-empty? 2:address:channel/buffered-stdin
    9:boolean/completed? <- not 8:boolean
    assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
    trace [test], [reached end]
  ]
parse: instruction: new-channel
parse:   ingredient: {name: "10", properties: ["10": "literal", "capacity": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel", "stdin": ]}
parse: instruction: new-channel
parse:   ingredient: {name: "10", properties: ["10": "literal", "capacity": ]}
parse:   product: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "3", properties: ["3": "boolean"]}
parse: instruction: assert
parse:   ingredient: {name: "3", properties: ["3": "boolean"]}
parse:   ingredient: {name: "\nF buffer-lines-blocks-until-newline: channel should be empty after init", properties: [_: "literal-string"]}
parse: instruction: start-running
parse:   ingredient: {name: "buffer-lines", properties: ["buffer-lines": "recipe"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "stdin": ]}
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "5", properties: ["5": "boolean"]}
parse: instruction: assert
parse:   ingredient: {name: "5", properties: ["5": "boolean"]}
parse:   ingredient: {name: "\nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up", properties: [_: "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "97", properties: ["97": "literal", "a": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "6", properties: ["6": "boolean"]}
parse: instruction: assert
parse:   ingredient: {name: "6", properties: ["6": "boolean"]}
parse:   ingredient: {name: "\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a'", properties: [_: "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "98", properties: ["98": "literal", "b": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "7", properties: ["7": "boolean"]}
parse: instruction: assert
parse:   ingredient: {name: "7", properties: ["7": "boolean"]}
parse:   ingredient: {name: "\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b'", properties: [_: "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "10", properties: ["10": "literal", "newline": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "8", properties: ["8": "boolean"]}
parse: instruction: not
parse:   ingredient: {name: "8", properties: ["8": "boolean"]}
parse:   product: {name: "9", properties: ["9": "boolean", "completed?": ]}
parse: instruction: assert
parse:   ingredient: {name: "9", properties: ["9": "boolean", "completed?": ]}
parse:   ingredient: {name: "\nF buffer-lines-blocks-until-newline: channel should contain data after writing newline", properties: [_: "literal-string"]}
parse: instruction: trace
parse:   ingredient: {name: "test", properties: [_: "literal-string"]}
parse:   ingredient: {name: "reached end", properties: [_: "literal-string"]}
after-brace: recipe run1001
after-brace: new-channel ...
after-brace: new-channel ...
after-brace: channel-empty? ...
after-brace: assert ...
after-brace: start-running ...
after-brace: wait-for-routine ...
after-brace: channel-empty? ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: channel-empty? ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: channel-empty? ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: channel-empty? ...
after-brace: not ...
after-brace: assert ...
after-brace: trace ...
 101 run: 1:address:channel/stdin <- new-channel 10/capacity
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 102 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1002
 102 run: full:address:number <- get-address result:address:channel/lookup, first-full:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1003
 102 run: full:address:number/lookup <- copy 0
9999 mem: location 1003 is 1007
9999 mem: storing 0 in location 1007
 102 run: free:address:number <- get-address result:address:channel/lookup, first-free:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1004
 102 run: free:address:number/lookup <- copy 0
9999 mem: location 1004 is 1008
9999 mem: storing 0 in location 1008
 102 run: capacity:number <- next-ingredient 
9999 mem: storing 10 in location 1005
 102 run: capacity:number <- add capacity:number, 1
9999 mem: location 1005 is 10
9999 mem: storing 11 in location 1005
 102 run: dest:address:address:array:location <- get-address result:address:channel/lookup, data:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 102 run: dest:address:address:array:location/lookup <- new location:type, capacity:number
9999 mem: location 1005 is 11
9999 mem: array size is 11
9999 mem: new alloc: 1010
9999 mem: location 1006 is 1009
9999 mem: storing 1010 in location 1009
 102 run: reply result:address:channel
9999 mem: location 1002 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 101 run: 2:address:channel/buffered-stdin <- new-channel 10/capacity
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 102 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1022
9999 mem: storing 1022 in location 1002
 102 run: full:address:number <- get-address result:address:channel/lookup, first-full:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1002 is 1022
9999 run: address to copy is 1022
9999 mem: storing 1022 in location 1003
 102 run: full:address:number/lookup <- copy 0
9999 mem: location 1003 is 1022
9999 mem: storing 0 in location 1022
 102 run: free:address:number <- get-address result:address:channel/lookup, first-free:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1002 is 1022
9999 run: address to copy is 1023
9999 mem: storing 1023 in location 1004
 102 run: free:address:number/lookup <- copy 0
9999 mem: location 1004 is 1023
9999 mem: storing 0 in location 1023
 102 run: capacity:number <- next-ingredient 
9999 mem: storing 10 in location 1005
 102 run: capacity:number <- add capacity:number, 1
9999 mem: location 1005 is 10
9999 mem: storing 11 in location 1005
 102 run: dest:address:address:array:location <- get-address result:address:channel/lookup, data:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1002 is 1022
9999 run: address to copy is 1024
9999 mem: storing 1024 in location 1006
 102 run: dest:address:address:array:location/lookup <- new location:type, capacity:number
9999 mem: location 1005 is 11
9999 mem: array size is 11
9999 mem: new alloc: 1025
9999 mem: location 1006 is 1024
9999 mem: storing 1025 in location 1024
 102 run: reply result:address:channel
9999 mem: location 1002 is 1022
9999 run: result 0 is 1022
9999 mem: storing 1022 in location 2
 101 run: 3:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1022
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1037
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1039
 102 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1040
 102 run: free:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 0
9999 mem: storing 0 in location 1041
 102 run: result:boolean <- equal full:number, free:number
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1042
 102 run: reply result:boolean
9999 mem: location 1042 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 3
 101 run: assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
9999 mem: location 3 is 1
 101 run: 4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin
9999 mem: location 1 is 1007
9999 mem: location 2 is 1022
9999 new: routine allocated memory from 101000 to 201000
9999 mem: storing 2 in location 4
 101 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
schedule: buffer-lines
 101 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 14
9999 mem: new alloc: 101000
 101 run: in:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101002
 101 run: out:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 101003
 101 run: line:address:buffer <- new-buffer 30
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 102 run: result:address:buffer <- new buffer:type
9999 mem: new alloc: 101015
9999 mem: storing 101015 in location 1002
 102 run: len:address:number <- get-address result:address:buffer/lookup, length:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101016 is 0
9999 mem: location 1002 is 101015
9999 run: address to copy is 101015
9999 mem: storing 101015 in location 1003
 102 run: len:address:number/lookup <- copy 0
9999 mem: location 1003 is 101015
9999 mem: storing 0 in location 101015
 102 run: s:address:address:array:character <- get-address result:address:buffer/lookup, data:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101016 is 0
9999 mem: location 1002 is 101015
9999 run: address to copy is 101016
9999 mem: storing 101016 in location 1004
 102 run: capacity:number, found?:boolean <- next-ingredient 
9999 mem: storing 30 in location 1005
9999 mem: storing 1 in location 1006
 102 run: assert found?:boolean, [new-buffer must get a capacity argument]
9999 mem: location 1006 is 1
 102 run: s:address:address:array:character/lookup <- new character:type, capacity:number
9999 mem: location 1005 is 30
9999 mem: array size is 30
9999 mem: new alloc: 101017
9999 mem: location 1004 is 101016
9999 mem: storing 101017 in location 101016
 102 run: reply result:address:buffer
9999 mem: location 1002 is 101015
9999 run: result 0 is 101015
9999 mem: storing 101015 in location 101004
 101 run: c:character, in:address:channel <- read in:address:channel
9999 mem: location 101002 is 1007
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 101048
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101050
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 101050 is 1007
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1039
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1040
 103 run: free:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1041
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1042
 103 run: reply result:boolean
9999 mem: location 1042 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 101051
 102 run: break-unless empty:boolean, 
9999 mem: location 101051 is 1
9999 run: jump-unless fell through
 102 run: free-address:address:number <- get-address chan:address:channel/lookup, first-free:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 101052
 102 run: wait-for-location free-address:address:number/lookup
9999 mem: location 101052 is 1008
9999 mem: location 1008 is 0
9999 mem: location 101052 is 1008
9999 run: waiting for location 1008 to change from 0
schedule: waking up routine 1
schedule: run1001/scenario-buffer-lines-blocks-until-newline
 102 run: 5:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1022
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1039
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1040
 103 run: free:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 0
9999 mem: storing 0 in location 1041
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1042
 103 run: reply result:boolean
9999 mem: location 1042 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 5
 102 run: assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
9999 mem: location 5 is 1
 102 run: 1:address:channel <- write 1:address:channel, 97/a
9999 mem: location 1 is 1007
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1043
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1045
 103 run: val:location <- next-ingredient 
9999 mem: storing 97 in location 1046
 103 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1045 is 1007
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1054
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1056
 104 run: tmp:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1056 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1056 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1057
 104 run: tmp:number <- add tmp:number, 1
9999 mem: location 1057 is 0
9999 mem: storing 1 in location 1057
 104 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1056 is 1007
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1062
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1064
 105 run: q:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1064 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1064 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1065
 105 run: result:number <- length q:address:array:location/lookup
9999 mem: location 1065 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1065 is 1010
9999 mem: storing 11 in location 1066
 105 run: reply result:number
9999 mem: location 1066 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 1058
 104 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1057 is 1
9999 mem: location 1058 is 11
9999 mem: storing 0 in location 1059
 104 run: break-unless at-end?:boolean, 
9999 mem: location 1059 is 0
9999 run: jumping to instruction 9
 104 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1056 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1056 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1060
 104 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1060 is 0
9999 mem: location 1057 is 1
9999 mem: storing 0 in location 1061
 104 run: reply result:boolean
9999 mem: location 1061 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1047
 103 run: break-unless full:boolean, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 8
 103 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1045 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1049
 103 run: free:address:number <- get-address chan:address:channel/lookup, first-free:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1045 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1050
 103 run: dest:address:location <- index-address circular-buffer:address:array:location/lookup, free:address:number/lookup
9999 mem: location 1049 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1049 is 1010
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 0
9999 mem: storing 1011 in location 1051
 103 run: dest:address:location/lookup <- copy val:location
9999 mem: location 1046 is 97
9999 mem: location 1051 is 1011
9999 mem: storing 97 in location 1011
 103 run: free:address:number/lookup <- add free:address:number/lookup, 1
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1050 is 1008
9999 mem: storing 1 in location 1008
 103 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 1049 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1049 is 1010
9999 mem: storing 11 in location 1052
 103 run: at-end?:boolean <- greater-or-equal free:address:number/lookup, len:number
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1052 is 11
9999 mem: storing 0 in location 1053
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1053 is 0
9999 run: jumping to instruction 19
 103 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1045 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 102 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 102 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
schedule: read/buffer-lines
 102 run: full:address:number <- get-address chan:address:channel/lookup, first-full:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 101053
 102 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 101054
 102 run: result:location <- index circular-buffer:address:array:location/lookup, full:address:number/lookup
9999 mem: location 101054 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 0
9999 mem: location 101054 is 1010
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 0
9999 run: address to copy is 1011
9999 run: its type is number
9999 mem: location 1011 is 97
9999 mem: storing 97 in location 101055
 102 run: full:address:number/lookup <- add full:address:number/lookup, 1
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 0
9999 mem: location 101053 is 1007
9999 mem: storing 1 in location 1007
 102 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 101054 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 101054 is 1010
9999 mem: storing 11 in location 101056
 102 run: at-end?:boolean <- greater-or-equal full:address:number/lookup, len:number
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 1
9999 mem: location 101056 is 11
9999 mem: storing 0 in location 101057
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101057 is 0
9999 run: jumping to instruction 17
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 101055 is 97
9999 mem: location 101050 is 1007
9999 run: result 0 is 97
9999 run: result 1 is 1007
9999 mem: storing 97 in location 101005
9999 mem: storing 1007 in location 101002
 101 run: backspace?:boolean <- equal c:character, 8
9999 mem: location 101005 is 97
9999 mem: storing 0 in location 101006
 101 run: break-unless backspace?:boolean, 
9999 mem: location 101006 is 0
9999 run: jumping to instruction 18
 101 run: line:address:buffer <- buffer-append line:address:buffer, c:character
9999 mem: location 101004 is 101015
9999 mem: location 101005 is 97
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101015 in location 101050
 102 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 101051
 102 run: len:address:number <- get-address in:address:buffer/lookup, length:offset
9999 mem: location 101050 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101016 is 101017
9999 mem: location 101050 is 101015
9999 run: address to copy is 101015
9999 mem: storing 101015 in location 101052
 102 run: backspace?:boolean <- equal c:character, 8/backspace
9999 mem: location 101051 is 97
9999 mem: storing 0 in location 101053
 102 run: break-unless backspace?:boolean, 
9999 mem: location 101053 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 101050 is 101015
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101015 in location 1002
 103 run: len:number <- get in:address:buffer/lookup, length:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101016 is 101017
9999 mem: location 1002 is 101015
9999 run: address to copy is 101015
9999 run: its type is number
9999 mem: location 101015 is 0
9999 mem: storing 0 in location 1003
 103 run: s:address:array:character <- get in:address:buffer/lookup, data:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101016 is 101017
9999 mem: location 1002 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 1004
 103 run: capacity:number <- length s:address:array:character/lookup
9999 mem: location 1004 is 101017
9999 mem: location 101017 is 30
9999 mem: location 101018 is 0
9999 mem: location 101019 is 0
9999 mem: location 101020 is 0
9999 mem: location 101021 is 0
9999 mem: location 101022 is 0
9999 mem: location 101023 is 0
9999 mem: location 101024 is 0
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 1004 is 101017
9999 mem: storing 30 in location 1005
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 1003 is 0
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 103 run: reply result:boolean
9999 mem: location 1006 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101055
 102 run: break-unless full?:boolean, 
9999 mem: location 101055 is 0
9999 run: jumping to instruction 17
 102 run: s:address:array:character <- get in:address:buffer/lookup, data:offset
9999 mem: location 101050 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101016 is 101017
9999 mem: location 101050 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 101056
 102 run: dest:address:character <- index-address s:address:array:character/lookup, len:address:number/lookup
9999 mem: location 101056 is 101017
9999 mem: location 101017 is 30
9999 mem: location 101018 is 0
9999 mem: location 101019 is 0
9999 mem: location 101020 is 0
9999 mem: location 101021 is 0
9999 mem: location 101022 is 0
9999 mem: location 101023 is 0
9999 mem: location 101024 is 0
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101056 is 101017
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 0
9999 mem: storing 101018 in location 101057
 102 run: dest:address:character/lookup <- copy c:character
9999 mem: location 101051 is 97
9999 mem: location 101057 is 101018
9999 mem: storing 97 in location 101018
 102 run: len:address:number/lookup <- add len:address:number/lookup, 1
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101052 is 101015
9999 mem: storing 1 in location 101015
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 101050 is 101015
9999 run: result 0 is 101015
9999 mem: storing 101015 in location 101004
 101 run: line-done?:boolean <- equal c:character, 10/newline
9999 mem: location 101005 is 97
9999 mem: storing 0 in location 101009
 101 run: break-if line-done?:boolean, 
9999 mem: location 101009 is 0
9999 run: jump-if fell through
 101 run: eof?:boolean <- equal c:character, 0/eof
9999 mem: location 101005 is 97
9999 mem: storing 0 in location 101010
 101 run: break-if eof?:boolean, 
9999 mem: location 101010 is 0
9999 run: jump-if fell through
 101 run: loop 
9999 run: jumping to instruction 6
 101 run: c:character, in:address:channel <- read in:address:channel
9999 mem: location 101002 is 1007
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101050
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 101050 is 1007
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1039
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 1
9999 mem: storing 1 in location 1040
 103 run: free:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 1041
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1040 is 1
9999 mem: location 1041 is 1
9999 mem: storing 1 in location 1042
 103 run: reply result:boolean
9999 mem: location 1042 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 101051
 102 run: break-unless empty:boolean, 
9999 mem: location 101051 is 1
9999 run: jump-unless fell through
 102 run: free-address:address:number <- get-address chan:address:channel/lookup, first-free:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 101052
 102 run: wait-for-location free-address:address:number/lookup
9999 mem: location 101052 is 1008
9999 mem: location 1008 is 1
9999 mem: location 101052 is 1008
9999 run: waiting for location 1008 to change from 1
schedule: waking up routine 1
schedule: run1001/scenario-buffer-lines-blocks-until-newline
 102 run: 6:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1022
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1039
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1040
 103 run: free:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 0
9999 mem: storing 0 in location 1041
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1042
 103 run: reply result:boolean
9999 mem: location 1042 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 6
 102 run: assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
9999 mem: location 6 is 1
 102 run: 1:address:channel <- write 1:address:channel, 98/b
9999 mem: location 1 is 1007
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1045
 103 run: val:location <- next-ingredient 
9999 mem: storing 98 in location 1046
 103 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1045 is 1007
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1056
 104 run: tmp:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1056 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1056 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 1057
 104 run: tmp:number <- add tmp:number, 1
9999 mem: location 1057 is 1
9999 mem: storing 2 in location 1057
 104 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1056 is 1007
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1064
 105 run: q:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1064 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1064 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1065
 105 run: result:number <- length q:address:array:location/lookup
9999 mem: location 1065 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1065 is 1010
9999 mem: storing 11 in location 1066
 105 run: reply result:number
9999 mem: location 1066 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 1058
 104 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1057 is 2
9999 mem: location 1058 is 11
9999 mem: storing 0 in location 1059
 104 run: break-unless at-end?:boolean, 
9999 mem: location 1059 is 0
9999 run: jumping to instruction 9
 104 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1056 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1056 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 1
9999 mem: storing 1 in location 1060
 104 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1060 is 1
9999 mem: location 1057 is 2
9999 mem: storing 0 in location 1061
 104 run: reply result:boolean
9999 mem: location 1061 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1047
 103 run: break-unless full:boolean, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 8
 103 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1045 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1049
 103 run: free:address:number <- get-address chan:address:channel/lookup, first-free:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1045 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1050
 103 run: dest:address:location <- index-address circular-buffer:address:array:location/lookup, free:address:number/lookup
9999 mem: location 1049 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1049 is 1010
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 1
9999 mem: storing 1012 in location 1051
 103 run: dest:address:location/lookup <- copy val:location
9999 mem: location 1046 is 98
9999 mem: location 1051 is 1012
9999 mem: storing 98 in location 1012
 103 run: free:address:number/lookup <- add free:address:number/lookup, 1
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1050 is 1008
9999 mem: storing 2 in location 1008
 103 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 1049 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1049 is 1010
9999 mem: storing 11 in location 1052
 103 run: at-end?:boolean <- greater-or-equal free:address:number/lookup, len:number
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 2
9999 mem: location 1052 is 11
9999 mem: storing 0 in location 1053
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1053 is 0
9999 run: jumping to instruction 19
 103 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1045 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 102 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 102 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
schedule: read/buffer-lines
 102 run: full:address:number <- get-address chan:address:channel/lookup, first-full:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 101053
 102 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 101054
 102 run: result:location <- index circular-buffer:address:array:location/lookup, full:address:number/lookup
9999 mem: location 101054 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 1
9999 mem: location 101054 is 1010
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 1
9999 run: address to copy is 1012
9999 run: its type is number
9999 mem: location 1012 is 98
9999 mem: storing 98 in location 101055
 102 run: full:address:number/lookup <- add full:address:number/lookup, 1
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 1
9999 mem: location 101053 is 1007
9999 mem: storing 2 in location 1007
 102 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 101054 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 101054 is 1010
9999 mem: storing 11 in location 101056
 102 run: at-end?:boolean <- greater-or-equal full:address:number/lookup, len:number
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 2
9999 mem: location 101056 is 11
9999 mem: storing 0 in location 101057
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101057 is 0
9999 run: jumping to instruction 17
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 101055 is 98
9999 mem: location 101050 is 1007
9999 run: result 0 is 98
9999 run: result 1 is 1007
9999 mem: storing 98 in location 101005
9999 mem: storing 1007 in location 101002
 101 run: backspace?:boolean <- equal c:character, 8
9999 mem: location 101005 is 98
9999 mem: storing 0 in location 101006
 101 run: break-unless backspace?:boolean, 
9999 mem: location 101006 is 0
9999 run: jumping to instruction 18
 101 run: line:address:buffer <- buffer-append line:address:buffer, c:character
9999 mem: location 101004 is 101015
9999 mem: location 101005 is 98
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101015 in location 101050
 102 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 101051
 102 run: len:address:number <- get-address in:address:buffer/lookup, length:offset
9999 mem: location 101050 is 101015
9999 mem: location 101015 is 1
9999 mem: location 101016 is 101017
9999 mem: location 101050 is 101015
9999 run: address to copy is 101015
9999 mem: storing 101015 in location 101052
 102 run: backspace?:boolean <- equal c:character, 8/backspace
9999 mem: location 101051 is 98
9999 mem: storing 0 in location 101053
 102 run: break-unless backspace?:boolean, 
9999 mem: location 101053 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 101050 is 101015
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101015 in location 1002
 103 run: len:number <- get in:address:buffer/lookup, length:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 1
9999 mem: location 101016 is 101017
9999 mem: location 1002 is 101015
9999 run: address to copy is 101015
9999 run: its type is number
9999 mem: location 101015 is 1
9999 mem: storing 1 in location 1003
 103 run: s:address:array:character <- get in:address:buffer/lookup, data:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 1
9999 mem: location 101016 is 101017
9999 mem: location 1002 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 1004
 103 run: capacity:number <- length s:address:array:character/lookup
9999 mem: location 1004 is 101017
9999 mem: location 101017 is 30
9999 mem: location 101018 is 97
9999 mem: location 101019 is 0
9999 mem: location 101020 is 0
9999 mem: location 101021 is 0
9999 mem: location 101022 is 0
9999 mem: location 101023 is 0
9999 mem: location 101024 is 0
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 1004 is 101017
9999 mem: storing 30 in location 1005
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 1003 is 1
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 103 run: reply result:boolean
9999 mem: location 1006 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101055
 102 run: break-unless full?:boolean, 
9999 mem: location 101055 is 0
9999 run: jumping to instruction 17
 102 run: s:address:array:character <- get in:address:buffer/lookup, data:offset
9999 mem: location 101050 is 101015
9999 mem: location 101015 is 1
9999 mem: location 101016 is 101017
9999 mem: location 101050 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 101056
 102 run: dest:address:character <- index-address s:address:array:character/lookup, len:address:number/lookup
9999 mem: location 101056 is 101017
9999 mem: location 101017 is 30
9999 mem: location 101018 is 97
9999 mem: location 101019 is 0
9999 mem: location 101020 is 0
9999 mem: location 101021 is 0
9999 mem: location 101022 is 0
9999 mem: location 101023 is 0
9999 mem: location 101024 is 0
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 1
9999 mem: location 101056 is 101017
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 1
9999 mem: storing 101019 in location 101057
 102 run: dest:address:character/lookup <- copy c:character
9999 mem: location 101051 is 98
9999 mem: location 101057 is 101019
9999 mem: storing 98 in location 101019
 102 run: len:address:number/lookup <- add len:address:number/lookup, 1
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 1
9999 mem: location 101052 is 101015
9999 mem: storing 2 in location 101015
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 101050 is 101015
9999 run: result 0 is 101015
9999 mem: storing 101015 in location 101004
 101 run: line-done?:boolean <- equal c:character, 10/newline
9999 mem: location 101005 is 98
9999 mem: storing 0 in location 101009
 101 run: break-if line-done?:boolean, 
9999 mem: location 101009 is 0
9999 run: jump-if fell through
 101 run: eof?:boolean <- equal c:character, 0/eof
9999 mem: location 101005 is 98
9999 mem: storing 0 in location 101010
 101 run: break-if eof?:boolean, 
9999 mem: location 101010 is 0
9999 run: jump-if fell through
 101 run: loop 
9999 run: jumping to instruction 6
 101 run: c:character, in:address:channel <- read in:address:channel
9999 mem: location 101002 is 1007
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101050
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 101050 is 1007
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1039
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 2
9999 mem: storing 2 in location 1040
 103 run: free:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 2
9999 mem: storing 2 in location 1041
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1040 is 2
9999 mem: location 1041 is 2
9999 mem: storing 1 in location 1042
 103 run: reply result:boolean
9999 mem: location 1042 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 101051
 102 run: break-unless empty:boolean, 
9999 mem: location 101051 is 1
9999 run: jump-unless fell through
 102 run: free-address:address:number <- get-address chan:address:channel/lookup, first-free:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 101052
 102 run: wait-for-location free-address:address:number/lookup
9999 mem: location 101052 is 1008
9999 mem: location 1008 is 2
9999 mem: location 101052 is 1008
9999 run: waiting for location 1008 to change from 2
schedule: waking up routine 1
schedule: run1001/scenario-buffer-lines-blocks-until-newline
 102 run: 7:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1022
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1039
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1040
 103 run: free:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 0
9999 mem: storing 0 in location 1041
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1042
 103 run: reply result:boolean
9999 mem: location 1042 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 7
 102 run: assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
9999 mem: location 7 is 1
 102 run: 1:address:channel <- write 1:address:channel, 10/newline
9999 mem: location 1 is 1007
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1045
 103 run: val:location <- next-ingredient 
9999 mem: storing 10 in location 1046
 103 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1045 is 1007
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1056
 104 run: tmp:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1056 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1056 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 2
9999 mem: storing 2 in location 1057
 104 run: tmp:number <- add tmp:number, 1
9999 mem: location 1057 is 2
9999 mem: storing 3 in location 1057
 104 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1056 is 1007
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1064
 105 run: q:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1064 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1064 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1065
 105 run: result:number <- length q:address:array:location/lookup
9999 mem: location 1065 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1065 is 1010
9999 mem: storing 11 in location 1066
 105 run: reply result:number
9999 mem: location 1066 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 1058
 104 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1057 is 3
9999 mem: location 1058 is 11
9999 mem: storing 0 in location 1059
 104 run: break-unless at-end?:boolean, 
9999 mem: location 1059 is 0
9999 run: jumping to instruction 9
 104 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1056 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1056 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 2
9999 mem: storing 2 in location 1060
 104 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1060 is 2
9999 mem: location 1057 is 3
9999 mem: storing 0 in location 1061
 104 run: reply result:boolean
9999 mem: location 1061 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1047
 103 run: break-unless full:boolean, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 8
 103 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1045 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1049
 103 run: free:address:number <- get-address chan:address:channel/lookup, first-free:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1045 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1050
 103 run: dest:address:location <- index-address circular-buffer:address:array:location/lookup, free:address:number/lookup
9999 mem: location 1049 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 2
9999 mem: location 1049 is 1010
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 2
9999 mem: storing 1013 in location 1051
 103 run: dest:address:location/lookup <- copy val:location
9999 mem: location 1046 is 10
9999 mem: location 1051 is 1013
9999 mem: storing 10 in location 1013
 103 run: free:address:number/lookup <- add free:address:number/lookup, 1
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 2
9999 mem: location 1050 is 1008
9999 mem: storing 3 in location 1008
 103 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 1049 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 10
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1049 is 1010
9999 mem: storing 11 in location 1052
 103 run: at-end?:boolean <- greater-or-equal free:address:number/lookup, len:number
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1052 is 11
9999 mem: storing 0 in location 1053
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1053 is 0
9999 run: jumping to instruction 19
 103 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1045 is 1007
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 102 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 102 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
schedule: read/buffer-lines
 102 run: full:address:number <- get-address chan:address:channel/lookup, first-full:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 101053
 102 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 101054
 102 run: result:location <- index circular-buffer:address:array:location/lookup, full:address:number/lookup
9999 mem: location 101054 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 10
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 2
9999 mem: location 101054 is 1010
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 2
9999 run: address to copy is 1013
9999 run: its type is number
9999 mem: location 1013 is 10
9999 mem: storing 10 in location 101055
 102 run: full:address:number/lookup <- add full:address:number/lookup, 1
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 2
9999 mem: location 101053 is 1007
9999 mem: storing 3 in location 1007
 102 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 101054 is 1010
9999 mem: location 1010 is 11
9999 mem: location 1011 is 97
9999 mem: location 1012 is 98
9999 mem: location 1013 is 10
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 101054 is 1010
9999 mem: storing 11 in location 101056
 102 run: at-end?:boolean <- greater-or-equal full:address:number/lookup, len:number
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 3
9999 mem: location 101056 is 11
9999 mem: storing 0 in location 101057
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101057 is 0
9999 run: jumping to instruction 17
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 101055 is 10
9999 mem: location 101050 is 1007
9999 run: result 0 is 10
9999 run: result 1 is 1007
9999 mem: storing 10 in location 101005
9999 mem: storing 1007 in location 101002
 101 run: backspace?:boolean <- equal c:character, 8
9999 mem: location 101005 is 10
9999 mem: storing 0 in location 101006
 101 run: break-unless backspace?:boolean, 
9999 mem: location 101006 is 0
9999 run: jumping to instruction 18
 101 run: line:address:buffer <- buffer-append line:address:buffer, c:character
9999 mem: location 101004 is 101015
9999 mem: location 101005 is 10
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101015 in location 101050
 102 run: c:character <- next-ingredient 
9999 mem: storing 10 in location 101051
 102 run: len:address:number <- get-address in:address:buffer/lookup, length:offset
9999 mem: location 101050 is 101015
9999 mem: location 101015 is 2
9999 mem: location 101016 is 101017
9999 mem: location 101050 is 101015
9999 run: address to copy is 101015
9999 mem: storing 101015 in location 101052
 102 run: backspace?:boolean <- equal c:character, 8/backspace
9999 mem: location 101051 is 10
9999 mem: storing 0 in location 101053
 102 run: break-unless backspace?:boolean, 
9999 mem: location 101053 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 101050 is 101015
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101015 in location 1002
 103 run: len:number <- get in:address:buffer/lookup, length:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 2
9999 mem: location 101016 is 101017
9999 mem: location 1002 is 101015
9999 run: address to copy is 101015
9999 run: its type is number
9999 mem: location 101015 is 2
9999 mem: storing 2 in location 1003
 103 run: s:address:array:character <- get in:address:buffer/lookup, data:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 2
9999 mem: location 101016 is 101017
9999 mem: location 1002 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 1004
 103 run: capacity:number <- length s:address:array:character/lookup
9999 mem: location 1004 is 101017
9999 mem: location 101017 is 30
9999 mem: location 101018 is 97
9999 mem: location 101019 is 98
9999 mem: location 101020 is 0
9999 mem: location 101021 is 0
9999 mem: location 101022 is 0
9999 mem: location 101023 is 0
9999 mem: location 101024 is 0
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 1004 is 101017
9999 mem: storing 30 in location 1005
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 1003 is 2
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 103 run: reply result:boolean
9999 mem: location 1006 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101055
 102 run: break-unless full?:boolean, 
9999 mem: location 101055 is 0
9999 run: jumping to instruction 17
 102 run: s:address:array:character <- get in:address:buffer/lookup, data:offset
9999 mem: location 101050 is 101015
9999 mem: location 101015 is 2
9999 mem: location 101016 is 101017
9999 mem: location 101050 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 101056
 102 run: dest:address:character <- index-address s:address:array:character/lookup, len:address:number/lookup
9999 mem: location 101056 is 101017
9999 mem: location 101017 is 30
9999 mem: location 101018 is 97
9999 mem: location 101019 is 98
9999 mem: location 101020 is 0
9999 mem: location 101021 is 0
9999 mem: location 101022 is 0
9999 mem: location 101023 is 0
9999 mem: location 101024 is 0
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 2
9999 mem: location 101056 is 101017
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 2
9999 mem: storing 101020 in location 101057
 102 run: dest:address:character/lookup <- copy c:character
9999 mem: location 101051 is 10
9999 mem: location 101057 is 101020
9999 mem: storing 10 in location 101020
 102 run: len:address:number/lookup <- add len:address:number/lookup, 1
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 2
9999 mem: location 101052 is 101015
9999 mem: storing 3 in location 101015
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 101050 is 101015
9999 run: result 0 is 101015
9999 mem: storing 101015 in location 101004
 101 run: line-done?:boolean <- equal c:character, 10/newline
9999 mem: location 101005 is 10
9999 mem: storing 1 in location 101009
 101 run: break-if line-done?:boolean, 
9999 mem: location 101009 is 1
9999 run: jumping to instruction 25
 101 run: i:number <- copy 0
9999 mem: storing 0 in location 101011
 101 run: line-contents:address:array:character <- get line:address:buffer/lookup, data:offset
9999 mem: location 101004 is 101015
9999 mem: location 101015 is 3
9999 mem: location 101016 is 101017
9999 mem: location 101004 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 101012
 101 run: max:number <- get line:address:buffer/lookup, length:offset
9999 mem: location 101004 is 101015
9999 mem: location 101015 is 3
9999 mem: location 101016 is 101017
9999 mem: location 101004 is 101015
9999 run: address to copy is 101015
9999 run: its type is number
9999 mem: location 101015 is 3
9999 mem: storing 3 in location 101013
 101 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 101011 is 0
9999 mem: location 101013 is 3
9999 mem: storing 0 in location 101014
 101 run: break-if done?:boolean, 
9999 mem: location 101014 is 0
9999 run: jump-if fell through
 101 run: c:character <- index line-contents:address:array:character/lookup, i:number
9999 mem: location 101012 is 101017
9999 mem: location 101017 is 30
9999 mem: location 101018 is 97
9999 mem: location 101019 is 98
9999 mem: location 101020 is 10
9999 mem: location 101021 is 0
9999 mem: location 101022 is 0
9999 mem: location 101023 is 0
9999 mem: location 101024 is 0
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101011 is 0
9999 mem: location 101012 is 101017
9999 mem: location 101011 is 0
9999 run: address to copy is 101018
9999 run: its type is character
9999 mem: location 101018 is 97
9999 mem: storing 97 in location 101005
 101 run: out:address:channel <- write out:address:channel, c:character
9999 mem: location 101003 is 1022
9999 mem: location 101005 is 97
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1045
 102 run: val:location <- next-ingredient 
9999 mem: storing 97 in location 1046
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1045 is 1022
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1056
 103 run: tmp:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1056 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1056 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 0
9999 mem: storing 0 in location 1057
 103 run: tmp:number <- add tmp:number, 1
9999 mem: location 1057 is 0
9999 mem: storing 1 in location 1057
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1056 is 1022
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1064
 104 run: q:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1064 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1064 is 1022
9999 run: address to copy is 1024
9999 run: its type is address
9999 mem: location 1024 is 1025
9999 mem: storing 1025 in location 1065
 104 run: result:number <- length q:address:array:location/lookup
9999 mem: location 1065 is 1025
9999 mem: location 1025 is 11
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1065 is 1025
9999 mem: storing 11 in location 1066
 104 run: reply result:number
9999 mem: location 1066 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 1058
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1057 is 1
9999 mem: location 1058 is 11
9999 mem: storing 0 in location 1059
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1059 is 0
9999 run: jumping to instruction 9
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1056 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1056 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1060
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1060 is 0
9999 mem: location 1057 is 1
9999 mem: storing 0 in location 1061
 103 run: reply result:boolean
9999 mem: location 1061 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1047
 102 run: break-unless full:boolean, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1045 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1045 is 1022
9999 run: address to copy is 1024
9999 run: its type is address
9999 mem: location 1024 is 1025
9999 mem: storing 1025 in location 1049
 102 run: free:address:number <- get-address chan:address:channel/lookup, first-free:offset
9999 mem: location 1045 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1045 is 1022
9999 run: address to copy is 1023
9999 mem: storing 1023 in location 1050
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/lookup, free:address:number/lookup
9999 mem: location 1049 is 1025
9999 mem: location 1025 is 11
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1049 is 1025
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 0
9999 mem: storing 1026 in location 1051
 102 run: dest:address:location/lookup <- copy val:location
9999 mem: location 1046 is 97
9999 mem: location 1051 is 1026
9999 mem: storing 97 in location 1026
 102 run: free:address:number/lookup <- add free:address:number/lookup, 1
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1050 is 1023
9999 mem: storing 1 in location 1023
 102 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 1049 is 1025
9999 mem: location 1025 is 11
9999 mem: location 1026 is 97
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1049 is 1025
9999 mem: storing 11 in location 1052
 102 run: at-end?:boolean <- greater-or-equal free:address:number/lookup, len:number
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 1
9999 mem: location 1052 is 11
9999 mem: storing 0 in location 1053
 102 run: break-unless at-end?:boolean, 
9999 mem: location 1053 is 0
9999 run: jumping to instruction 19
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1045 is 1022
9999 run: result 0 is 1022
9999 mem: storing 1022 in location 101003
 101 run: i:number <- add i:number, 1
9999 mem: location 101011 is 0
9999 mem: storing 1 in location 101011
 101 run: loop 
9999 run: jumping to instruction 30
 101 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 101011 is 1
9999 mem: location 101013 is 3
9999 mem: storing 0 in location 101014
 101 run: break-if done?:boolean, 
9999 mem: location 101014 is 0
9999 run: jump-if fell through
 101 run: c:character <- index line-contents:address:array:character/lookup, i:number
9999 mem: location 101012 is 101017
9999 mem: location 101017 is 30
9999 mem: location 101018 is 97
9999 mem: location 101019 is 98
9999 mem: location 101020 is 10
9999 mem: location 101021 is 0
9999 mem: location 101022 is 0
9999 mem: location 101023 is 0
9999 mem: location 101024 is 0
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101011 is 1
9999 mem: location 101012 is 101017
9999 mem: location 101011 is 1
9999 run: address to copy is 101019
9999 run: its type is character
9999 mem: location 101019 is 98
9999 mem: storing 98 in location 101005
 101 run: out:address:channel <- write out:address:channel, c:character
9999 mem: location 101003 is 1022
9999 mem: location 101005 is 98
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1045
 102 run: val:location <- next-ingredient 
9999 mem: storing 98 in location 1046
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1045 is 1022
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1056
 103 run: tmp:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1056 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1
9999 mem: location 1024 is 1025
9999 mem: location 1056 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 1
9999 mem: storing 1 in location 1057
 103 run: tmp:number <- add tmp:number, 1
9999 mem: location 1057 is 1
9999 mem: storing 2 in location 1057
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1056 is 1022
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1064
 104 run: q:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1064 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1
9999 mem: location 1024 is 1025
9999 mem: location 1064 is 1022
9999 run: address to copy is 1024
9999 run: its type is address
9999 mem: location 1024 is 1025
9999 mem: storing 1025 in location 1065
 104 run: result:number <- length q:address:array:location/lookup
9999 mem: location 1065 is 1025
9999 mem: location 1025 is 11
9999 mem: location 1026 is 97
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1065 is 1025
9999 mem: storing 11 in location 1066
 104 run: reply result:number
9999 mem: location 1066 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 1058
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1057 is 2
9999 mem: location 1058 is 11
9999 mem: storing 0 in location 1059
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1059 is 0
9999 run: jumping to instruction 9
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1056 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1
9999 mem: location 1024 is 1025
9999 mem: location 1056 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1060
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1060 is 0
9999 mem: location 1057 is 2
9999 mem: storing 0 in location 1061
 103 run: reply result:boolean
9999 mem: location 1061 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1047
 102 run: break-unless full:boolean, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1045 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1
9999 mem: location 1024 is 1025
9999 mem: location 1045 is 1022
9999 run: address to copy is 1024
9999 run: its type is address
9999 mem: location 1024 is 1025
9999 mem: storing 1025 in location 1049
 102 run: free:address:number <- get-address chan:address:channel/lookup, first-free:offset
9999 mem: location 1045 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1
9999 mem: location 1024 is 1025
9999 mem: location 1045 is 1022
9999 run: address to copy is 1023
9999 mem: storing 1023 in location 1050
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/lookup, free:address:number/lookup
9999 mem: location 1049 is 1025
9999 mem: location 1025 is 11
9999 mem: location 1026 is 97
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 1
9999 mem: location 1049 is 1025
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 1
9999 mem: storing 1027 in location 1051
 102 run: dest:address:location/lookup <- copy val:location
9999 mem: location 1046 is 98
9999 mem: location 1051 is 1027
9999 mem: storing 98 in location 1027
 102 run: free:address:number/lookup <- add free:address:number/lookup, 1
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 1
9999 mem: location 1050 is 1023
9999 mem: storing 2 in location 1023
 102 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 1049 is 1025
9999 mem: location 1025 is 11
9999 mem: location 1026 is 97
9999 mem: location 1027 is 98
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1049 is 1025
9999 mem: storing 11 in location 1052
 102 run: at-end?:boolean <- greater-or-equal free:address:number/lookup, len:number
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 2
9999 mem: location 1052 is 11
9999 mem: storing 0 in location 1053
 102 run: break-unless at-end?:boolean, 
9999 mem: location 1053 is 0
9999 run: jumping to instruction 19
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1045 is 1022
9999 run: result 0 is 1022
9999 mem: storing 1022 in location 101003
 101 run: i:number <- add i:number, 1
9999 mem: location 101011 is 1
9999 mem: storing 2 in location 101011
 101 run: loop 
9999 run: jumping to instruction 30
 101 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 101011 is 2
9999 mem: location 101013 is 3
9999 mem: storing 0 in location 101014
 101 run: break-if done?:boolean, 
9999 mem: location 101014 is 0
9999 run: jump-if fell through
 101 run: c:character <- index line-contents:address:array:character/lookup, i:number
9999 mem: location 101012 is 101017
9999 mem: location 101017 is 30
9999 mem: location 101018 is 97
9999 mem: location 101019 is 98
9999 mem: location 101020 is 10
9999 mem: location 101021 is 0
9999 mem: location 101022 is 0
9999 mem: location 101023 is 0
9999 mem: location 101024 is 0
9999 mem: location 101025 is 0
9999 mem: location 101026 is 0
9999 mem: location 101027 is 0
9999 mem: location 101028 is 0
9999 mem: location 101029 is 0
9999 mem: location 101030 is 0
9999 mem: location 101031 is 0
9999 mem: location 101032 is 0
9999 mem: location 101033 is 0
9999 mem: location 101034 is 0
9999 mem: location 101035 is 0
9999 mem: location 101036 is 0
9999 mem: location 101037 is 0
9999 mem: location 101038 is 0
9999 mem: location 101039 is 0
9999 mem: location 101040 is 0
9999 mem: location 101041 is 0
9999 mem: location 101042 is 0
9999 mem: location 101043 is 0
9999 mem: location 101044 is 0
9999 mem: location 101045 is 0
9999 mem: location 101046 is 0
9999 mem: location 101047 is 0
9999 mem: location 101011 is 2
9999 mem: location 101012 is 101017
9999 mem: location 101011 is 2
9999 run: address to copy is 101020
9999 run: its type is character
9999 mem: location 101020 is 10
9999 mem: storing 10 in location 101005
 101 run: out:address:channel <- write out:address:channel, c:character
9999 mem: location 101003 is 1022
9999 mem: location 101005 is 10
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1045
 102 run: val:location <- next-ingredient 
9999 mem: storing 10 in location 1046
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1045 is 1022
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1056
 103 run: tmp:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1056 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 2
9999 mem: location 1024 is 1025
9999 mem: location 1056 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 2
9999 mem: storing 2 in location 1057
 103 run: tmp:number <- add tmp:number, 1
9999 mem: location 1057 is 2
9999 mem: storing 3 in location 1057
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1056 is 1022
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1064
 104 run: q:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1064 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 2
9999 mem: location 1024 is 1025
9999 mem: location 1064 is 1022
9999 run: address to copy is 1024
9999 run: its type is address
9999 mem: location 1024 is 1025
9999 mem: storing 1025 in location 1065
 104 run: result:number <- length q:address:array:location/lookup
9999 mem: location 1065 is 1025
9999 mem: location 1025 is 11
9999 mem: location 1026 is 97
9999 mem: location 1027 is 98
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1065 is 1025
9999 mem: storing 11 in location 1066
 104 run: reply result:number
9999 mem: location 1066 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 1058
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1057 is 3
9999 mem: location 1058 is 11
9999 mem: storing 0 in location 1059
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1059 is 0
9999 run: jumping to instruction 9
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1056 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 2
9999 mem: location 1024 is 1025
9999 mem: location 1056 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1060
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1060 is 0
9999 mem: location 1057 is 3
9999 mem: storing 0 in location 1061
 103 run: reply result:boolean
9999 mem: location 1061 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1047
 102 run: break-unless full:boolean, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/lookup, data:offset
9999 mem: location 1045 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 2
9999 mem: location 1024 is 1025
9999 mem: location 1045 is 1022
9999 run: address to copy is 1024
9999 run: its type is address
9999 mem: location 1024 is 1025
9999 mem: storing 1025 in location 1049
 102 run: free:address:number <- get-address chan:address:channel/lookup, first-free:offset
9999 mem: location 1045 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 2
9999 mem: location 1024 is 1025
9999 mem: location 1045 is 1022
9999 run: address to copy is 1023
9999 mem: storing 1023 in location 1050
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/lookup, free:address:number/lookup
9999 mem: location 1049 is 1025
9999 mem: location 1025 is 11
9999 mem: location 1026 is 97
9999 mem: location 1027 is 98
9999 mem: location 1028 is 0
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 2
9999 mem: location 1049 is 1025
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 2
9999 mem: storing 1028 in location 1051
 102 run: dest:address:location/lookup <- copy val:location
9999 mem: location 1046 is 10
9999 mem: location 1051 is 1028
9999 mem: storing 10 in location 1028
 102 run: free:address:number/lookup <- add free:address:number/lookup, 1
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 2
9999 mem: location 1050 is 1023
9999 mem: storing 3 in location 1023
 102 run: len:number <- length circular-buffer:address:array:location/lookup
9999 mem: location 1049 is 1025
9999 mem: location 1025 is 11
9999 mem: location 1026 is 97
9999 mem: location 1027 is 98
9999 mem: location 1028 is 10
9999 mem: location 1029 is 0
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1049 is 1025
9999 mem: storing 11 in location 1052
 102 run: at-end?:boolean <- greater-or-equal free:address:number/lookup, len:number
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 3
9999 mem: location 1052 is 11
9999 mem: storing 0 in location 1053
 102 run: break-unless at-end?:boolean, 
9999 mem: location 1053 is 0
9999 run: jumping to instruction 19
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1045 is 1022
9999 run: result 0 is 1022
9999 mem: storing 1022 in location 101003
 101 run: i:number <- add i:number, 1
9999 mem: location 101011 is 2
9999 mem: storing 3 in location 101011
 101 run: loop 
9999 run: jumping to instruction 30
 101 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 101011 is 3
9999 mem: location 101013 is 3
9999 mem: storing 1 in location 101014
 101 run: break-if done?:boolean, 
9999 mem: location 101014 is 1
9999 run: jumping to instruction 36
 101 run: loop 
9999 run: jumping to instruction 4
 101 run: line:address:buffer <- new-buffer 30
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 102 run: result:address:buffer <- new buffer:type
9999 mem: new alloc: 101058
9999 mem: storing 101058 in location 1002
 102 run: len:address:number <- get-address result:address:buffer/lookup, length:offset
9999 mem: location 1002 is 101058
9999 mem: location 101058 is 0
9999 mem: location 101059 is 0
9999 mem: location 1002 is 101058
9999 run: address to copy is 101058
9999 mem: storing 101058 in location 1003
 102 run: len:address:number/lookup <- copy 0
9999 mem: location 1003 is 101058
9999 mem: storing 0 in location 101058
 102 run: s:address:address:array:character <- get-address result:address:buffer/lookup, data:offset
9999 mem: location 1002 is 101058
9999 mem: location 101058 is 0
9999 mem: location 101059 is 0
9999 mem: location 1002 is 101058
9999 run: address to copy is 101059
9999 mem: storing 101059 in location 1004
 102 run: capacity:number, found?:boolean <- next-ingredient 
9999 mem: storing 30 in location 1005
9999 mem: storing 1 in location 1006
 102 run: assert found?:boolean, [new-buffer must get a capacity argument]
9999 mem: location 1006 is 1
 102 run: s:address:address:array:character/lookup <- new character:type, capacity:number
9999 mem: location 1005 is 30
9999 mem: array size is 30
9999 mem: new alloc: 101060
9999 mem: location 1004 is 101059
9999 mem: storing 101060 in location 101059
 102 run: reply result:address:buffer
9999 mem: location 1002 is 101058
9999 run: result 0 is 101058
9999 mem: storing 101058 in location 101004
 101 run: c:character, in:address:channel <- read in:address:channel
9999 mem: location 101002 is 1007
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101050
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 101050 is 1007
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1039
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 3
9999 mem: storing 3 in location 1040
 103 run: free:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 3
9999 mem: storing 3 in location 1041
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1040 is 3
9999 mem: location 1041 is 3
9999 mem: storing 1 in location 1042
 103 run: reply result:boolean
9999 mem: location 1042 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 101051
 102 run: break-unless empty:boolean, 
9999 mem: location 101051 is 1
9999 run: jump-unless fell through
 102 run: free-address:address:number <- get-address chan:address:channel/lookup, first-free:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 101052
 102 run: wait-for-location free-address:address:number/lookup
9999 mem: location 101052 is 1008
9999 mem: location 1008 is 3
9999 mem: location 101052 is 1008
9999 run: waiting for location 1008 to change from 3
schedule: waking up routine 1
schedule: run1001/scenario-buffer-lines-blocks-until-newline
 102 run: 8:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1022
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1039
 103 run: full:number <- get chan:address:channel/lookup, first-full:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 3
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1040
 103 run: free:number <- get chan:address:channel/lookup, first-free:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 3
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 3
9999 mem: storing 3 in location 1041
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1040 is 0
9999 mem: location 1041 is 3
9999 mem: storing 0 in location 1042
 103 run: reply result:boolean
9999 mem: location 1042 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 8
 102 run: 9:boolean/completed? <- not 8:boolean
9999 mem: location 8 is 0
9999 mem: storing 1 in location 9
 102 run: assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
9999 mem: location 9 is 1
 102 run: trace [test], [reached end]
   1 test: reached end
 101 run: trace-should-contain [
    test: reached end
  ]
