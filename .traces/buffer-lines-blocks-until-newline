9991 load: --- defining scenario-buffer-lines-blocks-until-newline
9993 parse: instruction: run
9993 parse:   ingredient: {"\n    1:address:channel/stdin <- new-channel 10/capacity\n    2:address:channel/buffered-stdin <- new-channel 10/capacity\n    3:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    assert 3:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after init]\n    # buffer stdin into buffered-stdin, try to read from buffered-stdin\n    4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin\n    wait-for-routine 4:number/buffer-routine\n    5:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    assert 5:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]\n    # write 'a'\n    1:address:channel <- write 1:address:channel, 97/a\n    restart 4:number/buffer-routine\n    wait-for-routine 4:number/buffer-routine\n    6:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    assert 6:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a']\n    # write 'b'\n    1:address:channel <- write 1:address:channel, 98/b\n    restart 4:number/buffer-routine\n    wait-for-routine 4:number/buffer-routine\n    7:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    assert 7:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b']\n    # write newline\n    1:address:channel <- write 1:address:channel, 10/newline\n    restart 4:number/buffer-routine\n    wait-for-routine 4:number/buffer-routine\n    8:boolean <- channel-empty? 2:address:channel/buffered-stdin\n    9:boolean/completed? <- not 8:boolean\n    assert 9:boolean/completed?, [\nF buffer-lines-blocks-until-newline: channel should contain data after writing newline]\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:channel/stdin <- new-channel 10/capacity
    2:address:channel/buffered-stdin <- new-channel 10/capacity
    3:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
    # buffer stdin into buffered-stdin, try to read from buffered-stdin
    4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin
    wait-for-routine 4:number/buffer-routine
    5:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
    # write 'a'
    1:address:channel <- write 1:address:channel, 97/a
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    6:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
    # write 'b'
    1:address:channel <- write 1:address:channel, 98/b
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    7:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
    # write newline
    1:address:channel <- write 1:address:channel, 10/newline
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    8:boolean <- channel-empty? 2:address:channel/buffered-stdin
    9:boolean/completed? <- not 8:boolean
    assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
    trace 1, [test], [reached end]
  ]
9993 parse: instruction: trace-should-contain
9993 parse:   ingredient: {"\n    test: reached end\n  ": "literal-string"}
9992 load: after rewriting: trace-should-contain [
    test: reached end
  ]
9999 after-brace: recipe scenario-buffer-lines-blocks-until-newline
9999 after-brace: run ...
9999 after-brace: trace-should-contain ...
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9999 schedule: scenario-buffer-lines-blocks-until-newline
 102 run: run [
    1:address:channel/stdin <- new-channel 10/capacity
    2:address:channel/buffered-stdin <- new-channel 10/capacity
    3:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
    # buffer stdin into buffered-stdin, try to read from buffered-stdin
    4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin
    wait-for-routine 4:number/buffer-routine
    5:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
    # write 'a'
    1:address:channel <- write 1:address:channel, 97/a
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    6:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
    # write 'b'
    1:address:channel <- write 1:address:channel, 98/b
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    7:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
    # write newline
    1:address:channel <- write 1:address:channel, 10/newline
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    8:boolean <- channel-empty? 2:address:channel/buffered-stdin
    9:boolean/completed? <- not 8:boolean
    assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
    trace 1, [test], [reached end]
  ]
9991 load: --- defining run1001
9993 parse: instruction: new-channel
9993 parse:   ingredient: {"10": "literal", "capacity": <>}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>, "stdin": <>}
9992 load: after rewriting: 1:address:channel/stdin <- new-channel 10/capacity
9993 parse: instruction: new-channel
9993 parse:   ingredient: {"10": "literal", "capacity": <>}
9993 parse:   product: {"2": <"address" : <"channel" : <>>>, "buffered-stdin": <>}
9992 load: after rewriting: 2:address:channel/buffered-stdin <- new-channel 10/capacity
9993 parse: instruction: channel-empty?
9993 parse:   ingredient: {"2": <"address" : <"channel" : <>>>, "buffered-stdin": <>}
9993 parse:   product: {"3": "boolean"}
9992 load: after rewriting: 3:boolean <- channel-empty? 2:address:channel/buffered-stdin
9993 parse: instruction: assert
9993 parse:   ingredient: {"3": "boolean"}
9993 parse:   ingredient: {"\nF buffer-lines-blocks-until-newline: channel should be empty after init": "literal-string"}
9992 load: after rewriting: assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
9993 parse: instruction: start-running
9993 parse:   ingredient: {"buffer-lines": "recipe"}
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>, "stdin": <>}
9993 parse:   ingredient: {"2": <"address" : <"channel" : <>>>, "buffered-stdin": <>}
9993 parse:   product: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: 4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin
9993 parse: instruction: wait-for-routine
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: wait-for-routine 4:number/buffer-routine
9993 parse: instruction: channel-empty?
9993 parse:   ingredient: {"2": <"address" : <"channel" : <>>>, "buffered-stdin": <>}
9993 parse:   product: {"5": "boolean"}
9992 load: after rewriting: 5:boolean <- channel-empty? 2:address:channel/buffered-stdin
9993 parse: instruction: assert
9993 parse:   ingredient: {"5": "boolean"}
9993 parse:   ingredient: {"\nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up": "literal-string"}
9992 load: after rewriting: assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
9993 parse: instruction: write
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"97": "literal", "a": <>}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- write 1:address:channel, 97/a
9993 parse: instruction: restart
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: restart 4:number/buffer-routine
9993 parse: instruction: wait-for-routine
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: wait-for-routine 4:number/buffer-routine
9993 parse: instruction: channel-empty?
9993 parse:   ingredient: {"2": <"address" : <"channel" : <>>>, "buffered-stdin": <>}
9993 parse:   product: {"6": "boolean"}
9992 load: after rewriting: 6:boolean <- channel-empty? 2:address:channel/buffered-stdin
9993 parse: instruction: assert
9993 parse:   ingredient: {"6": "boolean"}
9993 parse:   ingredient: {"\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a'": "literal-string"}
9992 load: after rewriting: assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
9993 parse: instruction: write
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"98": "literal", "b": <>}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- write 1:address:channel, 98/b
9993 parse: instruction: restart
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: restart 4:number/buffer-routine
9993 parse: instruction: wait-for-routine
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: wait-for-routine 4:number/buffer-routine
9993 parse: instruction: channel-empty?
9993 parse:   ingredient: {"2": <"address" : <"channel" : <>>>, "buffered-stdin": <>}
9993 parse:   product: {"7": "boolean"}
9992 load: after rewriting: 7:boolean <- channel-empty? 2:address:channel/buffered-stdin
9993 parse: instruction: assert
9993 parse:   ingredient: {"7": "boolean"}
9993 parse:   ingredient: {"\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b'": "literal-string"}
9992 load: after rewriting: assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
9993 parse: instruction: write
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"10": "literal", "newline": <>}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- write 1:address:channel, 10/newline
9993 parse: instruction: restart
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: restart 4:number/buffer-routine
9993 parse: instruction: wait-for-routine
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: wait-for-routine 4:number/buffer-routine
9993 parse: instruction: channel-empty?
9993 parse:   ingredient: {"2": <"address" : <"channel" : <>>>, "buffered-stdin": <>}
9993 parse:   product: {"8": "boolean"}
9992 load: after rewriting: 8:boolean <- channel-empty? 2:address:channel/buffered-stdin
9993 parse: instruction: not
9993 parse:   ingredient: {"8": "boolean"}
9993 parse:   product: {"9": "boolean", "completed?": <>}
9992 load: after rewriting: 9:boolean/completed? <- not 8:boolean
9993 parse: instruction: assert
9993 parse:   ingredient: {"9": "boolean", "completed?": <>}
9993 parse:   ingredient: {"\nF buffer-lines-blocks-until-newline: channel should contain data after writing newline": "literal-string"}
9992 load: after rewriting: assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
9993 parse: instruction: trace
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   ingredient: {"test": "literal-string"}
9993 parse:   ingredient: {"reached end": "literal-string"}
9992 load: after rewriting: trace 1, [test], [reached end]
9999 after-brace: recipe run1001
9999 after-brace: new-channel ...
9999 after-brace: new-channel ...
9999 after-brace: channel-empty? ...
9999 after-brace: assert ...
9999 after-brace: start-running ...
9999 after-brace: wait-for-routine ...
9999 after-brace: channel-empty? ...
9999 after-brace: assert ...
9999 after-brace: write ...
9999 after-brace: restart ...
9999 after-brace: wait-for-routine ...
9999 after-brace: channel-empty? ...
9999 after-brace: assert ...
9999 after-brace: write ...
9999 after-brace: restart ...
9999 after-brace: wait-for-routine ...
9999 after-brace: channel-empty? ...
9999 after-brace: assert ...
9999 after-brace: write ...
9999 after-brace: restart ...
9999 after-brace: wait-for-routine ...
9999 after-brace: channel-empty? ...
9999 after-brace: not ...
9999 after-brace: assert ...
9999 after-brace: trace ...
9999 trace: run: incrementing callstack depth to 2
 103 run: 1:address:channel/stdin <- new-channel 10/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 104 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1002
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1003
 104 run: *full <- copy 0
9999 mem: location 1003 is 1007
9999 mem: storing 0 in location 1007
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1004
 104 run: *free <- copy 0
9999 mem: location 1004 is 1008
9999 mem: storing 0 in location 1008
 104 run: capacity:number <- next-ingredient 
9999 mem: storing 10 in location 1005
 104 run: capacity <- add capacity, 1
9999 mem: location 1005 is 10
9999 mem: storing 11 in location 1005
 104 run: dest:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9999 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 104 run: *dest <- new character:type, capacity
9999 mem: location 1005 is 11
9999 mem: array size is 11
9999 mem: new alloc: 1010
9999 mem: location 1006 is 1009
9999 mem: storing 1010 in location 1009
 104 run: reply result
9999 mem: location 1002 is 1007
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: 2:address:channel/buffered-stdin <- new-channel 10/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 104 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1022
9999 mem: storing 1022 in location 1002
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1002 is 1022
9999 run: address to copy is 1022
9999 mem: storing 1022 in location 1003
 104 run: *full <- copy 0
9999 mem: location 1003 is 1022
9999 mem: storing 0 in location 1022
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1002 is 1022
9999 run: address to copy is 1023
9999 mem: storing 1023 in location 1004
 104 run: *free <- copy 0
9999 mem: location 1004 is 1023
9999 mem: storing 0 in location 1023
 104 run: capacity:number <- next-ingredient 
9999 mem: storing 10 in location 1005
 104 run: capacity <- add capacity, 1
9999 mem: location 1005 is 10
9999 mem: storing 11 in location 1005
 104 run: dest:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 0
9999 mem: location 1002 is 1022
9999 run: address to copy is 1024
9999 mem: storing 1024 in location 1006
 104 run: *dest <- new character:type, capacity
9999 mem: location 1005 is 11
9999 mem: array size is 11
9999 mem: new alloc: 1025
9999 mem: location 1006 is 1024
9999 mem: storing 1025 in location 1024
 104 run: reply result
9999 mem: location 1002 is 1022
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1022
9999 mem: storing 1022 in location 2
 103 run: 3:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1022
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1037
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1039
 104 run: full:number <- get *chan, first-full:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1040
 104 run: free:number <- get *chan, first-free:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 0
9999 mem: storing 0 in location 1041
 104 run: result:boolean <- equal full, free
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1042
 104 run: reply result
9999 mem: location 1042 is 1
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1
9999 mem: storing 1 in location 3
 103 run: assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
9999 mem: location 3 is 1
 103 run: 4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin
9999 mem: location 1 is 1007
9999 mem: location 2 is 1022
9999 trace: new routine; incrementing callstack depth to 3
9999 new: routine allocated memory from 101000 to 201000
9999 mem: storing 2 in location 4
 104 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
9999 schedule: buffer-lines
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 14
9999 mem: new alloc: 101000
 104 run: in:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101002
 104 run: out:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 101003
 104 run: line:address:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: result:address:buffer <- new buffer:type
9999 mem: new alloc: 101015
9999 mem: storing 101015 in location 1002
 105 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101016 is 0
9999 mem: location 1002 is 101015
9999 run: address to copy is 101015
9999 mem: storing 101015 in location 1003
 105 run: *len:address:number <- copy 0
9999 mem: location 1003 is 101015
9999 mem: storing 0 in location 101015
 105 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101016 is 0
9999 mem: location 1002 is 101015
9999 run: address to copy is 101016
9999 mem: storing 101016 in location 1004
 105 run: capacity:number, found?:boolean <- next-ingredient 
9999 mem: storing 30 in location 1005
9999 mem: storing 1 in location 1006
 105 run: assert found?, [new-buffer must get a capacity argument]
9999 mem: location 1006 is 1
 105 run: *s <- new character:type, capacity
9999 mem: location 1005 is 30
9999 mem: array size is 30
9999 mem: new alloc: 101017
9999 mem: location 1004 is 101016
9999 mem: storing 101017 in location 101016
 105 run: reply result
9999 mem: location 1002 is 101015
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 101015
9999 mem: storing 101015 in location 101004
 104 run: c:character, in <- read in
9999 mem: location 101002 is 1007
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 101048
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101050
 105 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101050 is 1007
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1039
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1040
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1041
 106 run: result:boolean <- equal full, free
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1042
 106 run: reply result
9999 mem: location 1042 is 1
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1
9999 mem: storing 1 in location 101051
 105 run: break-unless empty?, 
9999 mem: location 101051 is 1
9999 run: jump-unless fell through
 105 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 101052
 105 run: wait-for-location *free-address
9999 mem: location 101052 is 1008
9999 mem: location 1008 is 0
9999 mem: location 101052 is 1008
9999 run: waiting for location 1008 to change from 0
9999 schedule: waking up routine 1
9999 schedule: run1001/scenario-buffer-lines-blocks-until-newline
 105 run: 5:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1022
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1039
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1040
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 0
9999 mem: storing 0 in location 1041
 106 run: result:boolean <- equal full, free
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1042
 106 run: reply result
9999 mem: location 1042 is 1
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1
9999 mem: storing 1 in location 5
 105 run: assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
9999 mem: location 5 is 1
 105 run: 1:address:channel <- write 1:address:channel, 97/a
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1043
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1045
 106 run: val:character <- next-ingredient 
9999 mem: storing 97 in location 1046
 106 run: full:boolean <- channel-full? chan
9999 mem: location 1045 is 1007
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1054
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1056
 107 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1056 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1057
 107 run: tmp <- add tmp, 1
9999 mem: location 1057 is 0
9999 mem: storing 1 in location 1057
 107 run: len:number <- channel-capacity chan
9999 mem: location 1056 is 1007
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1062
 108 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1064
 108 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1064 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1064 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1065
 108 run: result:number <- length *q
9999 mem: location 1065 is 1010
9999 mem: storing 11 in location 1066
 108 run: reply result
9999 mem: location 1066 is 11
9999 trace: reply: decrementing callstack depth from 7
9999 run: result 0 is 11
9999 mem: storing 11 in location 1058
 107 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1057 is 1
9999 mem: location 1058 is 11
9999 mem: storing 0 in location 1059
 107 run: break-unless at-end?, 
9999 mem: location 1059 is 0
9999 run: jumping to instruction 9
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1056 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1060
 107 run: result:boolean <- equal full, tmp
9999 mem: location 1060 is 0
9999 mem: location 1057 is 1
9999 mem: storing 0 in location 1061
 107 run: reply result
9999 mem: location 1061 is 0
9999 trace: reply: decrementing callstack depth from 6
9999 run: result 0 is 0
9999 mem: storing 0 in location 1047
 106 run: break-unless full, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 8
 106 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1045 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1049
 106 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1045 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1050
 106 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1049 is 1010
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 0
9999 mem: storing 1011 in location 1051
 106 run: *dest <- copy val
9999 mem: location 1046 is 97
9999 mem: location 1051 is 1011
9999 mem: storing 97 in location 1011
 106 run: *free <- add *free, 1
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1050 is 1008
9999 mem: storing 1 in location 1008
 106 run: len:number <- length *circular-buffer
9999 mem: location 1049 is 1010
9999 mem: storing 11 in location 1052
 106 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1052 is 11
9999 mem: storing 0 in location 1053
 106 run: break-unless at-end?, 
9999 mem: location 1053 is 0
9999 run: jumping to instruction 19
 106 run: reply chan/same-as-ingredient:0
9999 mem: location 1045 is 1007
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 105 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 105 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
9999 schedule: read/buffer-lines
 105 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 101053
 105 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 101054
 105 run: result:character <- index *circular-buffer, *full
9999 mem: location 101054 is 1010
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 0
9999 run: address to copy is 1011
9999 run: its type is character
9999 mem: location 1011 is 97
9999 mem: storing 97 in location 101055
 105 run: *full <- add *full, 1
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 0
9999 mem: location 101053 is 1007
9999 mem: storing 1 in location 1007
 105 run: len:number <- length *circular-buffer
9999 mem: location 101054 is 1010
9999 mem: storing 11 in location 101056
 105 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 1
9999 mem: location 101056 is 11
9999 mem: storing 0 in location 101057
 105 run: break-unless at-end?, 
9999 mem: location 101057 is 0
9999 run: jumping to instruction 17
 105 run: reply result, chan/same-as-ingredient:0
9999 mem: location 101055 is 97
9999 mem: location 101050 is 1007
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 97
9999 run: result 1 is 1007
9999 mem: storing 97 in location 101005
9999 mem: storing 1007 in location 101002
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 101005 is 97
9999 mem: storing 0 in location 101006
 104 run: break-unless backspace?, 
9999 mem: location 101006 is 0
9999 run: jumping to instruction 18
 104 run: line <- buffer-append line, c
9999 mem: location 101004 is 101015
9999 mem: location 101005 is 97
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101015 in location 101050
 105 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 101051
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 101050 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101016 is 101017
9999 mem: location 101050 is 101015
9999 run: address to copy is 101015
9999 mem: storing 101015 in location 101052
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 101051 is 97
9999 mem: storing 0 in location 101053
 105 run: break-unless backspace?, 
9999 mem: location 101053 is 0
9999 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 101050 is 101015
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 106 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101015 in location 1002
 106 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101016 is 101017
9999 mem: location 1002 is 101015
9999 run: address to copy is 101015
9999 run: its type is number
9999 mem: location 101015 is 0
9999 mem: storing 0 in location 1003
 106 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101016 is 101017
9999 mem: location 1002 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 1004
 106 run: capacity:number <- length *s
9999 mem: location 1004 is 101017
9999 mem: storing 30 in location 1005
 106 run: result:boolean <- greater-or-equal len, capacity
9999 mem: location 1003 is 0
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 106 run: reply result
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 0
9999 mem: storing 0 in location 101055
 105 run: break-unless full?, 
9999 mem: location 101055 is 0
9999 run: jumping to instruction 17
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 101050 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101016 is 101017
9999 mem: location 101050 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 101056
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 101056 is 101017
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 0
9999 mem: storing 101018 in location 101057
 105 run: *dest <- copy c
9999 mem: location 101051 is 97
9999 mem: location 101057 is 101018
9999 mem: storing 97 in location 101018
 105 run: *len <- add *len, 1
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 0
9999 mem: location 101052 is 101015
9999 mem: storing 1 in location 101015
 105 run: reply in/same-as-ingredient:0
9999 mem: location 101050 is 101015
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 101015
9999 mem: storing 101015 in location 101004
 104 run: line-done?:boolean <- equal c, 10/newline
9999 mem: location 101005 is 97
9999 mem: storing 0 in location 101009
 104 run: break-if line-done?, 
9999 mem: location 101009 is 0
9999 run: jump-if fell through
 104 run: eof?:boolean <- equal c, 0/eof
9999 mem: location 101005 is 97
9999 mem: storing 0 in location 101010
 104 run: break-if eof?, 
9999 mem: location 101010 is 0
9999 run: jump-if fell through
 104 run: loop 
9999 run: jumping to instruction 6
 104 run: c:character, in <- read in
9999 mem: location 101002 is 1007
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101050
 105 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101050 is 1007
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1039
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 1
9999 mem: storing 1 in location 1040
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 1041
 106 run: result:boolean <- equal full, free
9999 mem: location 1040 is 1
9999 mem: location 1041 is 1
9999 mem: storing 1 in location 1042
 106 run: reply result
9999 mem: location 1042 is 1
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1
9999 mem: storing 1 in location 101051
 105 run: break-unless empty?, 
9999 mem: location 101051 is 1
9999 run: jump-unless fell through
 105 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 101052
 105 run: wait-for-location *free-address
9999 mem: location 101052 is 1008
9999 mem: location 1008 is 1
9999 mem: location 101052 is 1008
9999 run: waiting for location 1008 to change from 1
9999 schedule: waking up routine 1
9999 schedule: run1001/scenario-buffer-lines-blocks-until-newline
 105 run: 6:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1022
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1039
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1040
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 0
9999 mem: storing 0 in location 1041
 106 run: result:boolean <- equal full, free
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1042
 106 run: reply result
9999 mem: location 1042 is 1
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1
9999 mem: storing 1 in location 6
 105 run: assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
9999 mem: location 6 is 1
 105 run: 1:address:channel <- write 1:address:channel, 98/b
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1045
 106 run: val:character <- next-ingredient 
9999 mem: storing 98 in location 1046
 106 run: full:boolean <- channel-full? chan
9999 mem: location 1045 is 1007
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1056
 107 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1056 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 1057
 107 run: tmp <- add tmp, 1
9999 mem: location 1057 is 1
9999 mem: storing 2 in location 1057
 107 run: len:number <- channel-capacity chan
9999 mem: location 1056 is 1007
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 108 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1064
 108 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1064 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1064 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1065
 108 run: result:number <- length *q
9999 mem: location 1065 is 1010
9999 mem: storing 11 in location 1066
 108 run: reply result
9999 mem: location 1066 is 11
9999 trace: reply: decrementing callstack depth from 7
9999 run: result 0 is 11
9999 mem: storing 11 in location 1058
 107 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1057 is 2
9999 mem: location 1058 is 11
9999 mem: storing 0 in location 1059
 107 run: break-unless at-end?, 
9999 mem: location 1059 is 0
9999 run: jumping to instruction 9
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1056 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 1
9999 mem: storing 1 in location 1060
 107 run: result:boolean <- equal full, tmp
9999 mem: location 1060 is 1
9999 mem: location 1057 is 2
9999 mem: storing 0 in location 1061
 107 run: reply result
9999 mem: location 1061 is 0
9999 trace: reply: decrementing callstack depth from 6
9999 run: result 0 is 0
9999 mem: storing 0 in location 1047
 106 run: break-unless full, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 8
 106 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1045 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1049
 106 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1045 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1050
 106 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1049 is 1010
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 1
9999 mem: storing 1012 in location 1051
 106 run: *dest <- copy val
9999 mem: location 1046 is 98
9999 mem: location 1051 is 1012
9999 mem: storing 98 in location 1012
 106 run: *free <- add *free, 1
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1050 is 1008
9999 mem: storing 2 in location 1008
 106 run: len:number <- length *circular-buffer
9999 mem: location 1049 is 1010
9999 mem: storing 11 in location 1052
 106 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 2
9999 mem: location 1052 is 11
9999 mem: storing 0 in location 1053
 106 run: break-unless at-end?, 
9999 mem: location 1053 is 0
9999 run: jumping to instruction 19
 106 run: reply chan/same-as-ingredient:0
9999 mem: location 1045 is 1007
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 105 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 105 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
9999 schedule: read/buffer-lines
 105 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 101053
 105 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 1
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 101054
 105 run: result:character <- index *circular-buffer, *full
9999 mem: location 101054 is 1010
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 1
9999 run: address to copy is 1012
9999 run: its type is character
9999 mem: location 1012 is 98
9999 mem: storing 98 in location 101055
 105 run: *full <- add *full, 1
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 1
9999 mem: location 101053 is 1007
9999 mem: storing 2 in location 1007
 105 run: len:number <- length *circular-buffer
9999 mem: location 101054 is 1010
9999 mem: storing 11 in location 101056
 105 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 2
9999 mem: location 101056 is 11
9999 mem: storing 0 in location 101057
 105 run: break-unless at-end?, 
9999 mem: location 101057 is 0
9999 run: jumping to instruction 17
 105 run: reply result, chan/same-as-ingredient:0
9999 mem: location 101055 is 98
9999 mem: location 101050 is 1007
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 98
9999 run: result 1 is 1007
9999 mem: storing 98 in location 101005
9999 mem: storing 1007 in location 101002
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 101005 is 98
9999 mem: storing 0 in location 101006
 104 run: break-unless backspace?, 
9999 mem: location 101006 is 0
9999 run: jumping to instruction 18
 104 run: line <- buffer-append line, c
9999 mem: location 101004 is 101015
9999 mem: location 101005 is 98
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101015 in location 101050
 105 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 101051
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 101050 is 101015
9999 mem: location 101015 is 1
9999 mem: location 101016 is 101017
9999 mem: location 101050 is 101015
9999 run: address to copy is 101015
9999 mem: storing 101015 in location 101052
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 101051 is 98
9999 mem: storing 0 in location 101053
 105 run: break-unless backspace?, 
9999 mem: location 101053 is 0
9999 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 101050 is 101015
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 106 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101015 in location 1002
 106 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 1
9999 mem: location 101016 is 101017
9999 mem: location 1002 is 101015
9999 run: address to copy is 101015
9999 run: its type is number
9999 mem: location 101015 is 1
9999 mem: storing 1 in location 1003
 106 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 1
9999 mem: location 101016 is 101017
9999 mem: location 1002 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 1004
 106 run: capacity:number <- length *s
9999 mem: location 1004 is 101017
9999 mem: storing 30 in location 1005
 106 run: result:boolean <- greater-or-equal len, capacity
9999 mem: location 1003 is 1
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 106 run: reply result
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 0
9999 mem: storing 0 in location 101055
 105 run: break-unless full?, 
9999 mem: location 101055 is 0
9999 run: jumping to instruction 17
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 101050 is 101015
9999 mem: location 101015 is 1
9999 mem: location 101016 is 101017
9999 mem: location 101050 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 101056
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 101056 is 101017
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 1
9999 mem: storing 101019 in location 101057
 105 run: *dest <- copy c
9999 mem: location 101051 is 98
9999 mem: location 101057 is 101019
9999 mem: storing 98 in location 101019
 105 run: *len <- add *len, 1
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 1
9999 mem: location 101052 is 101015
9999 mem: storing 2 in location 101015
 105 run: reply in/same-as-ingredient:0
9999 mem: location 101050 is 101015
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 101015
9999 mem: storing 101015 in location 101004
 104 run: line-done?:boolean <- equal c, 10/newline
9999 mem: location 101005 is 98
9999 mem: storing 0 in location 101009
 104 run: break-if line-done?, 
9999 mem: location 101009 is 0
9999 run: jump-if fell through
 104 run: eof?:boolean <- equal c, 0/eof
9999 mem: location 101005 is 98
9999 mem: storing 0 in location 101010
 104 run: break-if eof?, 
9999 mem: location 101010 is 0
9999 run: jump-if fell through
 104 run: loop 
9999 run: jumping to instruction 6
 104 run: c:character, in <- read in
9999 mem: location 101002 is 1007
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101050
 105 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101050 is 1007
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1039
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 2
9999 mem: storing 2 in location 1040
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 2
9999 mem: storing 2 in location 1041
 106 run: result:boolean <- equal full, free
9999 mem: location 1040 is 2
9999 mem: location 1041 is 2
9999 mem: storing 1 in location 1042
 106 run: reply result
9999 mem: location 1042 is 1
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1
9999 mem: storing 1 in location 101051
 105 run: break-unless empty?, 
9999 mem: location 101051 is 1
9999 run: jump-unless fell through
 105 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 101052
 105 run: wait-for-location *free-address
9999 mem: location 101052 is 1008
9999 mem: location 1008 is 2
9999 mem: location 101052 is 1008
9999 run: waiting for location 1008 to change from 2
9999 schedule: waking up routine 1
9999 schedule: run1001/scenario-buffer-lines-blocks-until-newline
 105 run: 7:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1022
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1039
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1040
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 0
9999 mem: storing 0 in location 1041
 106 run: result:boolean <- equal full, free
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1042
 106 run: reply result
9999 mem: location 1042 is 1
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1
9999 mem: storing 1 in location 7
 105 run: assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
9999 mem: location 7 is 1
 105 run: 1:address:channel <- write 1:address:channel, 10/newline
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1045
 106 run: val:character <- next-ingredient 
9999 mem: storing 10 in location 1046
 106 run: full:boolean <- channel-full? chan
9999 mem: location 1045 is 1007
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1056
 107 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1056 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 2
9999 mem: storing 2 in location 1057
 107 run: tmp <- add tmp, 1
9999 mem: location 1057 is 2
9999 mem: storing 3 in location 1057
 107 run: len:number <- channel-capacity chan
9999 mem: location 1056 is 1007
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 108 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1064
 108 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1064 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1064 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1065
 108 run: result:number <- length *q
9999 mem: location 1065 is 1010
9999 mem: storing 11 in location 1066
 108 run: reply result
9999 mem: location 1066 is 11
9999 trace: reply: decrementing callstack depth from 7
9999 run: result 0 is 11
9999 mem: storing 11 in location 1058
 107 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1057 is 3
9999 mem: location 1058 is 11
9999 mem: storing 0 in location 1059
 107 run: break-unless at-end?, 
9999 mem: location 1059 is 0
9999 run: jumping to instruction 9
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1056 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 2
9999 mem: storing 2 in location 1060
 107 run: result:boolean <- equal full, tmp
9999 mem: location 1060 is 2
9999 mem: location 1057 is 3
9999 mem: storing 0 in location 1061
 107 run: reply result
9999 mem: location 1061 is 0
9999 trace: reply: decrementing callstack depth from 6
9999 run: result 0 is 0
9999 mem: storing 0 in location 1047
 106 run: break-unless full, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 8
 106 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1045 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1049
 106 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1045 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 2
9999 mem: location 1009 is 1010
9999 mem: location 1045 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 1050
 106 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1049 is 1010
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 2
9999 mem: storing 1013 in location 1051
 106 run: *dest <- copy val
9999 mem: location 1046 is 10
9999 mem: location 1051 is 1013
9999 mem: storing 10 in location 1013
 106 run: *free <- add *free, 1
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 2
9999 mem: location 1050 is 1008
9999 mem: storing 3 in location 1008
 106 run: len:number <- length *circular-buffer
9999 mem: location 1049 is 1010
9999 mem: storing 11 in location 1052
 106 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1050 is 1008
9999 mem: location 1008 is 3
9999 mem: location 1052 is 11
9999 mem: storing 0 in location 1053
 106 run: break-unless at-end?, 
9999 mem: location 1053 is 0
9999 run: jumping to instruction 19
 106 run: reply chan/same-as-ingredient:0
9999 mem: location 1045 is 1007
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 105 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 105 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
9999 schedule: read/buffer-lines
 105 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 101053
 105 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 2
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1009
9999 run: its type is address
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 101054
 105 run: result:character <- index *circular-buffer, *full
9999 mem: location 101054 is 1010
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 2
9999 run: address to copy is 1013
9999 run: its type is character
9999 mem: location 1013 is 10
9999 mem: storing 10 in location 101055
 105 run: *full <- add *full, 1
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 2
9999 mem: location 101053 is 1007
9999 mem: storing 3 in location 1007
 105 run: len:number <- length *circular-buffer
9999 mem: location 101054 is 1010
9999 mem: storing 11 in location 101056
 105 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101053 is 1007
9999 mem: location 1007 is 3
9999 mem: location 101056 is 11
9999 mem: storing 0 in location 101057
 105 run: break-unless at-end?, 
9999 mem: location 101057 is 0
9999 run: jumping to instruction 17
 105 run: reply result, chan/same-as-ingredient:0
9999 mem: location 101055 is 10
9999 mem: location 101050 is 1007
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 10
9999 run: result 1 is 1007
9999 mem: storing 10 in location 101005
9999 mem: storing 1007 in location 101002
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 101005 is 10
9999 mem: storing 0 in location 101006
 104 run: break-unless backspace?, 
9999 mem: location 101006 is 0
9999 run: jumping to instruction 18
 104 run: line <- buffer-append line, c
9999 mem: location 101004 is 101015
9999 mem: location 101005 is 10
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101015 in location 101050
 105 run: c:character <- next-ingredient 
9999 mem: storing 10 in location 101051
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 101050 is 101015
9999 mem: location 101015 is 2
9999 mem: location 101016 is 101017
9999 mem: location 101050 is 101015
9999 run: address to copy is 101015
9999 mem: storing 101015 in location 101052
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 101051 is 10
9999 mem: storing 0 in location 101053
 105 run: break-unless backspace?, 
9999 mem: location 101053 is 0
9999 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 101050 is 101015
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 106 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101015 in location 1002
 106 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 2
9999 mem: location 101016 is 101017
9999 mem: location 1002 is 101015
9999 run: address to copy is 101015
9999 run: its type is number
9999 mem: location 101015 is 2
9999 mem: storing 2 in location 1003
 106 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 101015
9999 mem: location 101015 is 2
9999 mem: location 101016 is 101017
9999 mem: location 1002 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 1004
 106 run: capacity:number <- length *s
9999 mem: location 1004 is 101017
9999 mem: storing 30 in location 1005
 106 run: result:boolean <- greater-or-equal len, capacity
9999 mem: location 1003 is 2
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 106 run: reply result
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 0
9999 mem: storing 0 in location 101055
 105 run: break-unless full?, 
9999 mem: location 101055 is 0
9999 run: jumping to instruction 17
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 101050 is 101015
9999 mem: location 101015 is 2
9999 mem: location 101016 is 101017
9999 mem: location 101050 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 101056
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 101056 is 101017
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 2
9999 mem: storing 101020 in location 101057
 105 run: *dest <- copy c
9999 mem: location 101051 is 10
9999 mem: location 101057 is 101020
9999 mem: storing 10 in location 101020
 105 run: *len <- add *len, 1
9999 mem: location 101052 is 101015
9999 mem: location 101015 is 2
9999 mem: location 101052 is 101015
9999 mem: storing 3 in location 101015
 105 run: reply in/same-as-ingredient:0
9999 mem: location 101050 is 101015
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 101015
9999 mem: storing 101015 in location 101004
 104 run: line-done?:boolean <- equal c, 10/newline
9999 mem: location 101005 is 10
9999 mem: storing 1 in location 101009
 104 run: break-if line-done?, 
9999 mem: location 101009 is 1
9999 run: jumping to instruction 25
 104 run: i:number <- copy 0
9999 mem: storing 0 in location 101011
 104 run: line-contents:address:array:character <- get *line, data:offset
9999 mem: location 101004 is 101015
9999 mem: location 101015 is 3
9999 mem: location 101016 is 101017
9999 mem: location 101004 is 101015
9999 run: address to copy is 101016
9999 run: its type is address
9999 mem: location 101016 is 101017
9999 mem: storing 101017 in location 101012
 104 run: max:number <- get *line, length:offset
9999 mem: location 101004 is 101015
9999 mem: location 101015 is 3
9999 mem: location 101016 is 101017
9999 mem: location 101004 is 101015
9999 run: address to copy is 101015
9999 run: its type is number
9999 mem: location 101015 is 3
9999 mem: storing 3 in location 101013
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 101011 is 0
9999 mem: location 101013 is 3
9999 mem: storing 0 in location 101014
 104 run: break-if done?, 
9999 mem: location 101014 is 0
9999 run: jump-if fell through
 104 run: c:character <- index *line-contents, i
9999 mem: location 101012 is 101017
9999 mem: location 101011 is 0
9999 run: address to copy is 101018
9999 run: its type is character
9999 mem: location 101018 is 97
9999 mem: storing 97 in location 101005
 104 run: out <- write out, c
9999 mem: location 101003 is 1022
9999 mem: location 101005 is 97
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1045
 105 run: val:character <- next-ingredient 
9999 mem: storing 97 in location 1046
 105 run: full:boolean <- channel-full? chan
9999 mem: location 1045 is 1022
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1056
 106 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1056 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 0
9999 mem: storing 0 in location 1057
 106 run: tmp <- add tmp, 1
9999 mem: location 1057 is 0
9999 mem: storing 1 in location 1057
 106 run: len:number <- channel-capacity chan
9999 mem: location 1056 is 1022
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1064
 107 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1064 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1064 is 1022
9999 run: address to copy is 1024
9999 run: its type is address
9999 mem: location 1024 is 1025
9999 mem: storing 1025 in location 1065
 107 run: result:number <- length *q
9999 mem: location 1065 is 1025
9999 mem: storing 11 in location 1066
 107 run: reply result
9999 mem: location 1066 is 11
9999 trace: reply: decrementing callstack depth from 6
9999 run: result 0 is 11
9999 mem: storing 11 in location 1058
 106 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1057 is 1
9999 mem: location 1058 is 11
9999 mem: storing 0 in location 1059
 106 run: break-unless at-end?, 
9999 mem: location 1059 is 0
9999 run: jumping to instruction 9
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1056 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1060
 106 run: result:boolean <- equal full, tmp
9999 mem: location 1060 is 0
9999 mem: location 1057 is 1
9999 mem: storing 0 in location 1061
 106 run: reply result
9999 mem: location 1061 is 0
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 0
9999 mem: storing 0 in location 1047
 105 run: break-unless full, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 8
 105 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1045 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1045 is 1022
9999 run: address to copy is 1024
9999 run: its type is address
9999 mem: location 1024 is 1025
9999 mem: storing 1025 in location 1049
 105 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1045 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1024 is 1025
9999 mem: location 1045 is 1022
9999 run: address to copy is 1023
9999 mem: storing 1023 in location 1050
 105 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1049 is 1025
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 0
9999 mem: storing 1026 in location 1051
 105 run: *dest <- copy val
9999 mem: location 1046 is 97
9999 mem: location 1051 is 1026
9999 mem: storing 97 in location 1026
 105 run: *free <- add *free, 1
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 0
9999 mem: location 1050 is 1023
9999 mem: storing 1 in location 1023
 105 run: len:number <- length *circular-buffer
9999 mem: location 1049 is 1025
9999 mem: storing 11 in location 1052
 105 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 1
9999 mem: location 1052 is 11
9999 mem: storing 0 in location 1053
 105 run: break-unless at-end?, 
9999 mem: location 1053 is 0
9999 run: jumping to instruction 19
 105 run: reply chan/same-as-ingredient:0
9999 mem: location 1045 is 1022
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 1022
9999 mem: storing 1022 in location 101003
 104 run: i <- add i, 1
9999 mem: location 101011 is 0
9999 mem: storing 1 in location 101011
 104 run: loop 
9999 run: jumping to instruction 30
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 101011 is 1
9999 mem: location 101013 is 3
9999 mem: storing 0 in location 101014
 104 run: break-if done?, 
9999 mem: location 101014 is 0
9999 run: jump-if fell through
 104 run: c:character <- index *line-contents, i
9999 mem: location 101012 is 101017
9999 mem: location 101011 is 1
9999 run: address to copy is 101019
9999 run: its type is character
9999 mem: location 101019 is 98
9999 mem: storing 98 in location 101005
 104 run: out <- write out, c
9999 mem: location 101003 is 1022
9999 mem: location 101005 is 98
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1045
 105 run: val:character <- next-ingredient 
9999 mem: storing 98 in location 1046
 105 run: full:boolean <- channel-full? chan
9999 mem: location 1045 is 1022
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1056
 106 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1
9999 mem: location 1024 is 1025
9999 mem: location 1056 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 1
9999 mem: storing 1 in location 1057
 106 run: tmp <- add tmp, 1
9999 mem: location 1057 is 1
9999 mem: storing 2 in location 1057
 106 run: len:number <- channel-capacity chan
9999 mem: location 1056 is 1022
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1064
 107 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1064 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1
9999 mem: location 1024 is 1025
9999 mem: location 1064 is 1022
9999 run: address to copy is 1024
9999 run: its type is address
9999 mem: location 1024 is 1025
9999 mem: storing 1025 in location 1065
 107 run: result:number <- length *q
9999 mem: location 1065 is 1025
9999 mem: storing 11 in location 1066
 107 run: reply result
9999 mem: location 1066 is 11
9999 trace: reply: decrementing callstack depth from 6
9999 run: result 0 is 11
9999 mem: storing 11 in location 1058
 106 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1057 is 2
9999 mem: location 1058 is 11
9999 mem: storing 0 in location 1059
 106 run: break-unless at-end?, 
9999 mem: location 1059 is 0
9999 run: jumping to instruction 9
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1
9999 mem: location 1024 is 1025
9999 mem: location 1056 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1060
 106 run: result:boolean <- equal full, tmp
9999 mem: location 1060 is 0
9999 mem: location 1057 is 2
9999 mem: storing 0 in location 1061
 106 run: reply result
9999 mem: location 1061 is 0
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 0
9999 mem: storing 0 in location 1047
 105 run: break-unless full, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 8
 105 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1045 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1
9999 mem: location 1024 is 1025
9999 mem: location 1045 is 1022
9999 run: address to copy is 1024
9999 run: its type is address
9999 mem: location 1024 is 1025
9999 mem: storing 1025 in location 1049
 105 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1045 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1
9999 mem: location 1024 is 1025
9999 mem: location 1045 is 1022
9999 run: address to copy is 1023
9999 mem: storing 1023 in location 1050
 105 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1049 is 1025
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 1
9999 mem: storing 1027 in location 1051
 105 run: *dest <- copy val
9999 mem: location 1046 is 98
9999 mem: location 1051 is 1027
9999 mem: storing 98 in location 1027
 105 run: *free <- add *free, 1
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 1
9999 mem: location 1050 is 1023
9999 mem: storing 2 in location 1023
 105 run: len:number <- length *circular-buffer
9999 mem: location 1049 is 1025
9999 mem: storing 11 in location 1052
 105 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 2
9999 mem: location 1052 is 11
9999 mem: storing 0 in location 1053
 105 run: break-unless at-end?, 
9999 mem: location 1053 is 0
9999 run: jumping to instruction 19
 105 run: reply chan/same-as-ingredient:0
9999 mem: location 1045 is 1022
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 1022
9999 mem: storing 1022 in location 101003
 104 run: i <- add i, 1
9999 mem: location 101011 is 1
9999 mem: storing 2 in location 101011
 104 run: loop 
9999 run: jumping to instruction 30
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 101011 is 2
9999 mem: location 101013 is 3
9999 mem: storing 0 in location 101014
 104 run: break-if done?, 
9999 mem: location 101014 is 0
9999 run: jump-if fell through
 104 run: c:character <- index *line-contents, i
9999 mem: location 101012 is 101017
9999 mem: location 101011 is 2
9999 run: address to copy is 101020
9999 run: its type is character
9999 mem: location 101020 is 10
9999 mem: storing 10 in location 101005
 104 run: out <- write out, c
9999 mem: location 101003 is 1022
9999 mem: location 101005 is 10
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1045
 105 run: val:character <- next-ingredient 
9999 mem: storing 10 in location 1046
 105 run: full:boolean <- channel-full? chan
9999 mem: location 1045 is 1022
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 7
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1056
 106 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1056 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 2
9999 mem: location 1024 is 1025
9999 mem: location 1056 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 2
9999 mem: storing 2 in location 1057
 106 run: tmp <- add tmp, 1
9999 mem: location 1057 is 2
9999 mem: storing 3 in location 1057
 106 run: len:number <- channel-capacity chan
9999 mem: location 1056 is 1022
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 107 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1064
 107 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1064 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 2
9999 mem: location 1024 is 1025
9999 mem: location 1064 is 1022
9999 run: address to copy is 1024
9999 run: its type is address
9999 mem: location 1024 is 1025
9999 mem: storing 1025 in location 1065
 107 run: result:number <- length *q
9999 mem: location 1065 is 1025
9999 mem: storing 11 in location 1066
 107 run: reply result
9999 mem: location 1066 is 11
9999 trace: reply: decrementing callstack depth from 6
9999 run: result 0 is 11
9999 mem: storing 11 in location 1058
 106 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1057 is 3
9999 mem: location 1058 is 11
9999 mem: storing 0 in location 1059
 106 run: break-unless at-end?, 
9999 mem: location 1059 is 0
9999 run: jumping to instruction 9
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1056 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 2
9999 mem: location 1024 is 1025
9999 mem: location 1056 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1060
 106 run: result:boolean <- equal full, tmp
9999 mem: location 1060 is 0
9999 mem: location 1057 is 3
9999 mem: storing 0 in location 1061
 106 run: reply result
9999 mem: location 1061 is 0
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 0
9999 mem: storing 0 in location 1047
 105 run: break-unless full, 
9999 mem: location 1047 is 0
9999 run: jumping to instruction 8
 105 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1045 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 2
9999 mem: location 1024 is 1025
9999 mem: location 1045 is 1022
9999 run: address to copy is 1024
9999 run: its type is address
9999 mem: location 1024 is 1025
9999 mem: storing 1025 in location 1049
 105 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1045 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 2
9999 mem: location 1024 is 1025
9999 mem: location 1045 is 1022
9999 run: address to copy is 1023
9999 mem: storing 1023 in location 1050
 105 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1049 is 1025
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 2
9999 mem: storing 1028 in location 1051
 105 run: *dest <- copy val
9999 mem: location 1046 is 10
9999 mem: location 1051 is 1028
9999 mem: storing 10 in location 1028
 105 run: *free <- add *free, 1
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 2
9999 mem: location 1050 is 1023
9999 mem: storing 3 in location 1023
 105 run: len:number <- length *circular-buffer
9999 mem: location 1049 is 1025
9999 mem: storing 11 in location 1052
 105 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1050 is 1023
9999 mem: location 1023 is 3
9999 mem: location 1052 is 11
9999 mem: storing 0 in location 1053
 105 run: break-unless at-end?, 
9999 mem: location 1053 is 0
9999 run: jumping to instruction 19
 105 run: reply chan/same-as-ingredient:0
9999 mem: location 1045 is 1022
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 1022
9999 mem: storing 1022 in location 101003
 104 run: i <- add i, 1
9999 mem: location 101011 is 2
9999 mem: storing 3 in location 101011
 104 run: loop 
9999 run: jumping to instruction 30
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 101011 is 3
9999 mem: location 101013 is 3
9999 mem: storing 1 in location 101014
 104 run: break-if done?, 
9999 mem: location 101014 is 1
9999 run: jumping to instruction 36
 104 run: loop 
9999 run: jumping to instruction 4
 104 run: line:address:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: result:address:buffer <- new buffer:type
9999 mem: new alloc: 101058
9999 mem: storing 101058 in location 1002
 105 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1002 is 101058
9999 mem: location 101058 is 0
9999 mem: location 101059 is 0
9999 mem: location 1002 is 101058
9999 run: address to copy is 101058
9999 mem: storing 101058 in location 1003
 105 run: *len:address:number <- copy 0
9999 mem: location 1003 is 101058
9999 mem: storing 0 in location 101058
 105 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1002 is 101058
9999 mem: location 101058 is 0
9999 mem: location 101059 is 0
9999 mem: location 1002 is 101058
9999 run: address to copy is 101059
9999 mem: storing 101059 in location 1004
 105 run: capacity:number, found?:boolean <- next-ingredient 
9999 mem: storing 30 in location 1005
9999 mem: storing 1 in location 1006
 105 run: assert found?, [new-buffer must get a capacity argument]
9999 mem: location 1006 is 1
 105 run: *s <- new character:type, capacity
9999 mem: location 1005 is 30
9999 mem: array size is 30
9999 mem: new alloc: 101060
9999 mem: location 1004 is 101059
9999 mem: storing 101060 in location 101059
 105 run: reply result
9999 mem: location 1002 is 101058
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is 101058
9999 mem: storing 101058 in location 101004
 104 run: c:character, in <- read in
9999 mem: location 101002 is 1007
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 101050
 105 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101050 is 1007
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1039
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1007
9999 run: its type is number
9999 mem: location 1007 is 3
9999 mem: storing 3 in location 1040
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1039 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 1039 is 1007
9999 run: address to copy is 1008
9999 run: its type is number
9999 mem: location 1008 is 3
9999 mem: storing 3 in location 1041
 106 run: result:boolean <- equal full, free
9999 mem: location 1040 is 3
9999 mem: location 1041 is 3
9999 mem: storing 1 in location 1042
 106 run: reply result
9999 mem: location 1042 is 1
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 1
9999 mem: storing 1 in location 101051
 105 run: break-unless empty?, 
9999 mem: location 101051 is 1
9999 run: jump-unless fell through
 105 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101050 is 1007
9999 mem: location 1007 is 3
9999 mem: location 1008 is 3
9999 mem: location 1009 is 1010
9999 mem: location 101050 is 1007
9999 run: address to copy is 1008
9999 mem: storing 1008 in location 101052
 105 run: wait-for-location *free-address
9999 mem: location 101052 is 1008
9999 mem: location 1008 is 3
9999 mem: location 101052 is 1008
9999 run: waiting for location 1008 to change from 3
9999 schedule: waking up routine 1
9999 schedule: run1001/scenario-buffer-lines-blocks-until-newline
 105 run: 8:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1022
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1022 in location 1039
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 3
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1022
9999 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1040
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1039 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 3
9999 mem: location 1024 is 1025
9999 mem: location 1039 is 1022
9999 run: address to copy is 1023
9999 run: its type is number
9999 mem: location 1023 is 3
9999 mem: storing 3 in location 1041
 106 run: result:boolean <- equal full, free
9999 mem: location 1040 is 0
9999 mem: location 1041 is 3
9999 mem: storing 0 in location 1042
 106 run: reply result
9999 mem: location 1042 is 0
9999 trace: reply: decrementing callstack depth from 5
9999 run: result 0 is 0
9999 mem: storing 0 in location 8
 105 run: 9:boolean/completed? <- not 8:boolean
9999 mem: location 8 is 0
9999 mem: storing 1 in location 9
 105 run: assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
9999 mem: location 9 is 1
 105 run: trace 1, [test], [reached end]
   1 test: reached end 
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 4
 104 run: trace-should-contain [
    test: reached end
  ]
9999 trace: fall-through: exiting scenario-buffer-lines-blocks-until-newline; decrementing callstack depth from 3
