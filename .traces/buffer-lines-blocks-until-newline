9991 parse: --- defining scenario_buffer-lines-blocks-until-newline
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:channel/stdin <- new-channel 10/capacity\n    2:address:shared:channel/buffered-stdin <- new-channel 10/capacity\n    3:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin\n    assert 3:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after init]\n    # buffer stdin into buffered-stdin, try to read from buffered-stdin\n    4:number/buffer-routine <- start-running buffer-lines, 1:address:shared:channel/stdin, 2:address:shared:channel/buffered-stdin\n    wait-for-routine 4:number/buffer-routine\n    5:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin\n    assert 5:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]\n    # write 'a'\n    1:address:shared:channel <- write 1:address:shared:channel, 97/a\n    restart 4:number/buffer-routine\n    wait-for-routine 4:number/buffer-routine\n    6:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin\n    assert 6:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a']\n    # write 'b'\n    1:address:shared:channel <- write 1:address:shared:channel, 98/b\n    restart 4:number/buffer-routine\n    wait-for-routine 4:number/buffer-routine\n    7:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin\n    assert 7:boolean, [\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b']\n    # write newline\n    1:address:shared:channel <- write 1:address:shared:channel, 10/newline\n    restart 4:number/buffer-routine\n    wait-for-routine 4:number/buffer-routine\n    8:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin\n    9:boolean/completed? <- not 8:boolean\n    assert 9:boolean/completed?, [\nF buffer-lines-blocks-until-newline: channel should contain data after writing newline]\n    trace 1, [test], [reached end]\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:shared:channel/stdin <- new-channel 10/capacity
    2:address:shared:channel/buffered-stdin <- new-channel 10/capacity
    3:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
    assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
    # buffer stdin into buffered-stdin, try to read from buffered-stdin
    4:number/buffer-routine <- start-running buffer-lines, 1:address:shared:channel/stdin, 2:address:shared:channel/buffered-stdin
    wait-for-routine 4:number/buffer-routine
    5:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
    assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
    # write 'a'
    1:address:shared:channel <- write 1:address:shared:channel, 97/a
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    6:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
    assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
    # write 'b'
    1:address:shared:channel <- write 1:address:shared:channel, 98/b
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    7:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
    assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
    # write newline
    1:address:shared:channel <- write 1:address:shared:channel, 10/newline
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    8:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
    9:boolean/completed? <- not 8:boolean
    assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
    trace 1, [test], [reached end]
  ]
9993 parse: instruction: trace-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    test: reached end\n  ": "literal-string"}
9992 load: after rewriting: trace-should-contain [
    test: reached end
  ]
9999 parse: recipe scenario_buffer-lines-blocks-until-newline has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- deduce types for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- collect surrounding spaces for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- transform names for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- resolve ambiguous calls for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- compute instruction operations for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- transform braces for recipe scenario_buffer-lines-blocks-until-newline
9992 transform: run ...
9992 transform: trace-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- type-check 'call' instructions inside recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- type-check calls inside recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_buffer-lines-blocks-until-newline
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_buffer-lines-blocks-until-newline
 102 run: run [
    1:address:shared:channel/stdin <- new-channel 10/capacity
    2:address:shared:channel/buffered-stdin <- new-channel 10/capacity
    3:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
    assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
    # buffer stdin into buffered-stdin, try to read from buffered-stdin
    4:number/buffer-routine <- start-running buffer-lines, 1:address:shared:channel/stdin, 2:address:shared:channel/buffered-stdin
    wait-for-routine 4:number/buffer-routine
    5:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
    assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
    # write 'a'
    1:address:shared:channel <- write 1:address:shared:channel, 97/a
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    6:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
    assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
    # write 'b'
    1:address:shared:channel <- write 1:address:shared:channel, 98/b
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    7:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
    assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
    # write newline
    1:address:shared:channel <- write 1:address:shared:channel, 10/newline
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    8:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
    9:boolean/completed? <- not 8:boolean
    assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
    trace 1, [test], [reached end]
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"10": "literal", "capacity": <>}
9993 parse:   product: {"1": <"address" : <"shared" : <"channel" : <>>>>, "stdin": <>}
9992 load: after rewriting: 1:address:shared:channel/stdin <- new-channel 10/capacity
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"10": "literal", "capacity": <>}
9993 parse:   product: {"2": <"address" : <"shared" : <"channel" : <>>>>, "buffered-stdin": <>}
9992 load: after rewriting: 2:address:shared:channel/buffered-stdin <- new-channel 10/capacity
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"channel" : <>>>>, "buffered-stdin": <>}
9993 parse:   product: {"3": "boolean"}
9992 load: after rewriting: 3:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "boolean"}
9993 parse:   ingredient: {"\nF buffer-lines-blocks-until-newline: channel should be empty after init": "literal-string"}
9992 load: after rewriting: assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
9993 parse: instruction: start-running
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"buffer-lines": <>}
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"channel" : <>>>>, "stdin": <>}
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"channel" : <>>>>, "buffered-stdin": <>}
9993 parse:   product: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: 4:number/buffer-routine <- start-running buffer-lines, 1:address:shared:channel/stdin, 2:address:shared:channel/buffered-stdin
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: wait-for-routine 4:number/buffer-routine
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"channel" : <>>>>, "buffered-stdin": <>}
9993 parse:   product: {"5": "boolean"}
9992 load: after rewriting: 5:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"5": "boolean"}
9993 parse:   ingredient: {"\nF buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up": "literal-string"}
9992 load: after rewriting: assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"channel" : <>>>>}
9993 parse:   ingredient: {"97": "literal", "a": <>}
9993 parse:   product: {"1": <"address" : <"shared" : <"channel" : <>>>>}
9992 load: after rewriting: 1:address:shared:channel <- write 1:address:shared:channel, 97/a
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: restart 4:number/buffer-routine
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: wait-for-routine 4:number/buffer-routine
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"channel" : <>>>>, "buffered-stdin": <>}
9993 parse:   product: {"6": "boolean"}
9992 load: after rewriting: 6:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"6": "boolean"}
9993 parse:   ingredient: {"\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'a'": "literal-string"}
9992 load: after rewriting: assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"channel" : <>>>>}
9993 parse:   ingredient: {"98": "literal", "b": <>}
9993 parse:   product: {"1": <"address" : <"shared" : <"channel" : <>>>>}
9992 load: after rewriting: 1:address:shared:channel <- write 1:address:shared:channel, 98/b
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: restart 4:number/buffer-routine
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: wait-for-routine 4:number/buffer-routine
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"channel" : <>>>>, "buffered-stdin": <>}
9993 parse:   product: {"7": "boolean"}
9992 load: after rewriting: 7:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"7": "boolean"}
9993 parse:   ingredient: {"\nF buffer-lines-blocks-until-newline: channel should be empty after writing 'b'": "literal-string"}
9992 load: after rewriting: assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"channel" : <>>>>}
9993 parse:   ingredient: {"10": "literal", "newline": <>}
9993 parse:   product: {"1": <"address" : <"shared" : <"channel" : <>>>>}
9992 load: after rewriting: 1:address:shared:channel <- write 1:address:shared:channel, 10/newline
9993 parse: instruction: restart
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: restart 4:number/buffer-routine
9993 parse: instruction: wait-for-routine
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": "number", "buffer-routine": <>}
9992 load: after rewriting: wait-for-routine 4:number/buffer-routine
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"channel" : <>>>>, "buffered-stdin": <>}
9993 parse:   product: {"8": "boolean"}
9992 load: after rewriting: 8:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9993 parse: instruction: not
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"8": "boolean"}
9993 parse:   product: {"9": "boolean", "completed?": <>}
9992 load: after rewriting: 9:boolean/completed? <- not 8:boolean
9993 parse: instruction: assert
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"9": "boolean", "completed?": <>}
9993 parse:   ingredient: {"\nF buffer-lines-blocks-until-newline: channel should contain data after writing newline": "literal-string"}
9992 load: after rewriting: assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
9993 parse: instruction: trace
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   ingredient: {"test": "literal-string"}
9993 parse:   ingredient: {"reached end": "literal-string"}
9992 load: after rewriting: trace 1, [test], [reached end]
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction 1:address:shared:channel/stdin <- new-channel 10/capacity
9992 transform: checking variant (strict) 0: recipe new-channel {"capacity": "number"} -> {"result": <"address" : <"shared" : <"channel" : <>>>>}
9992 transform: instruction 2:address:shared:channel/buffered-stdin <- new-channel 10/capacity
9992 transform: checking variant (strict) 0: recipe new-channel {"capacity": "number"} -> {"result": <"address" : <"shared" : <"channel" : <>>>>}
9992 transform: instruction 3:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9992 transform: checking variant (strict) 0: recipe channel-empty? {"chan": <"address" : <"shared" : <"channel" : <>>>>} -> {"result": "boolean"}
9992 transform: instruction 5:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9992 transform: checking variant (strict) 0: recipe channel-empty? {"chan": <"address" : <"shared" : <"channel" : <>>>>} -> {"result": "boolean"}
9992 transform: instruction 1:address:shared:channel <- write 1:address:shared:channel, 97/a
9992 transform: checking variant (strict) 0: recipe write {"chan": <"address" : <"shared" : <"channel" : <>>>>} {"val": "character"} -> {"chan": <"address" : <"shared" : <"channel" : <>>>>}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe write {"chan": <"address" : <"shared" : <"channel" : <>>>>} {"val": "character"} -> {"chan": <"address" : <"shared" : <"channel" : <>>>>}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant 0: recipe write {"chan": <"address" : <"shared" : <"channel" : <>>>>} {"val": "character"} -> {"chan": <"address" : <"shared" : <"channel" : <>>>>}
9992 transform: instruction 6:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9992 transform: checking variant (strict) 0: recipe channel-empty? {"chan": <"address" : <"shared" : <"channel" : <>>>>} -> {"result": "boolean"}
9992 transform: instruction 1:address:shared:channel <- write 1:address:shared:channel, 98/b
9992 transform: checking variant (strict) 0: recipe write {"chan": <"address" : <"shared" : <"channel" : <>>>>} {"val": "character"} -> {"chan": <"address" : <"shared" : <"channel" : <>>>>}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe write {"chan": <"address" : <"shared" : <"channel" : <>>>>} {"val": "character"} -> {"chan": <"address" : <"shared" : <"channel" : <>>>>}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant 0: recipe write {"chan": <"address" : <"shared" : <"channel" : <>>>>} {"val": "character"} -> {"chan": <"address" : <"shared" : <"channel" : <>>>>}
9992 transform: instruction 7:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9992 transform: checking variant (strict) 0: recipe channel-empty? {"chan": <"address" : <"shared" : <"channel" : <>>>>} -> {"result": "boolean"}
9992 transform: instruction 1:address:shared:channel <- write 1:address:shared:channel, 10/newline
9992 transform: checking variant (strict) 0: recipe write {"chan": <"address" : <"shared" : <"channel" : <>>>>} {"val": "character"} -> {"chan": <"address" : <"shared" : <"channel" : <>>>>}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe write {"chan": <"address" : <"shared" : <"channel" : <>>>>} {"val": "character"} -> {"chan": <"address" : <"shared" : <"channel" : <>>>>}
9993 transform: strict match failed: ingredient 1
9992 transform: checking variant 0: recipe write {"chan": <"address" : <"shared" : <"channel" : <>>>>} {"val": "character"} -> {"chan": <"address" : <"shared" : <"channel" : <>>>>}
9992 transform: instruction 8:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9992 transform: checking variant (strict) 0: recipe channel-empty? {"chan": <"address" : <"shared" : <"channel" : <>>>>} -> {"result": "boolean"}
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new-channel ...
9992 transform: new-channel ...
9992 transform: channel-empty? ...
9992 transform: assert ...
9992 transform: start-running ...
9992 transform: wait-for-routine ...
9992 transform: channel-empty? ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: channel-empty? ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: channel-empty? ...
9992 transform: assert ...
9992 transform: write ...
9992 transform: restart ...
9992 transform: wait-for-routine ...
9992 transform: channel-empty? ...
9992 transform: not ...
9992 transform: assert ...
9992 transform: trace ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:channel/stdin <- new-channel 10/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 104 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1003
 104 run: result <- new channel:type
9999 mem: allocating size 4
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1004
9999 mem: incrementing refcount of 1008: 0 -> 1
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1005
 104 run: *full <- copy 0
9999 mem: location 1005 is 1009
9999 mem: storing 0 in location 1009
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1006
 104 run: *free <- copy 0
9999 mem: location 1006 is 1010
9999 mem: storing 0 in location 1010
 104 run: capacity <- add capacity, 1
9999 mem: location 1003 is 10
9999 mem: storing 11 in location 1003
 104 run: dest:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1004 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1007
 104 run: *dest <- new character:type, capacity
9999 mem: location 1003 is 11
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1012
9999 mem: storing 11 in location 1013
9999 mem: location 1007 is 1011
9999 mem: storing 1012 in location 1011
9999 mem: incrementing refcount of 1012: 0 -> 1
 104 run: reply result:address:shared:channel
9999 mem: location 1004 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1
9999 mem: incrementing refcount of 1008: 1 -> 2
 103 run: 2:address:shared:channel/buffered-stdin <- new-channel 10/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 104 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1003
 104 run: result <- new channel:type
9999 mem: allocating size 4
9999 mem: new alloc: 1025
9999 mem: storing 1025 in location 1004
9999 mem: incrementing refcount of 1025: 0 -> 1
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1004 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1004 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1026
9999 mem: storing 1026 in location 1005
 104 run: *full <- copy 0
9999 mem: location 1005 is 1026
9999 mem: storing 0 in location 1026
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1004 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1004 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1006
 104 run: *free <- copy 0
9999 mem: location 1006 is 1027
9999 mem: storing 0 in location 1027
 104 run: capacity <- add capacity, 1
9999 mem: location 1003 is 10
9999 mem: storing 11 in location 1003
 104 run: dest:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1004 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1004 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1028
9999 mem: storing 1028 in location 1007
 104 run: *dest <- new character:type, capacity
9999 mem: location 1003 is 11
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1029
9999 mem: storing 11 in location 1030
9999 mem: location 1007 is 1028
9999 mem: storing 1029 in location 1028
9999 mem: incrementing refcount of 1029: 0 -> 1
 104 run: reply result:address:shared:channel
9999 mem: location 1004 is 1025
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1025
9999 mem: storing 1025 in location 2
9999 mem: incrementing refcount of 1025: 1 -> 2
 103 run: 3:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9999 mem: location 2 is 1025
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1042
9999 mem: storing 5 in location 1043
 104 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1045
9999 mem: incrementing refcount of 1025: 2 -> 3
 104 run: full:number <- get *chan, first-full:offset
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1026
9998 run: its type is number
9999 mem: location 1026 is 0
9999 mem: storing 0 in location 1046
 104 run: free:number <- get *chan, first-free:offset
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1027
9998 run: its type is number
9999 mem: location 1027 is 0
9999 mem: storing 0 in location 1047
 104 run: result <- equal full, free
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: storing 1 in location 1048
 104 run: reply result:boolean
9999 mem: location 1048 is 1
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1
9999 mem: storing 1 in location 3
 103 run: assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
9999 mem: location 3 is 1
 103 run: 4:number/buffer-routine <- start-running buffer-lines, 1:address:shared:channel/stdin, 2:address:shared:channel/buffered-stdin
9999 mem: location 1 is 1008
9999 mem: location 2 is 1025
9999 trace: new routine; incrementing callstack depth to 3
9999 new: routine allocated memory from 101000 to 201000
9999 mem: storing 2 in location 4
 104 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9998 run: waiting for routine 2
9990 schedule: buffer-lines
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 14
9999 mem: allocating size 16
9999 mem: new alloc: 101000
9999 mem: storing 14 in location 101001
 104 run: in:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 101003
9999 mem: incrementing refcount of 1008: 2 -> 3
 104 run: out:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 101004
9999 mem: incrementing refcount of 1025: 3 -> 4
 104 run: line:address:shared:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 105 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 30 in location 1045
 105 run: result <- new buffer:type
9999 mem: allocating size 3
9999 mem: new alloc: 101016
9999 mem: storing 101016 in location 1046
9999 mem: incrementing refcount of 101016: 0 -> 1
 105 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1046 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 0
9999 mem: location 101018 is 0
9999 mem: location 1046 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9999 mem: storing 101017 in location 1047
 105 run: *len:address:number <- copy 0
9999 mem: location 1047 is 101017
9999 mem: storing 0 in location 101017
 105 run: s:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1046 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 0
9999 mem: location 101018 is 0
9999 mem: location 1046 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9999 mem: storing 101018 in location 1048
 105 run: *s <- new character:type, capacity
9999 mem: location 1045 is 30
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 101019
9999 mem: storing 30 in location 101020
9999 mem: location 1048 is 101018
9999 mem: storing 101019 in location 101018
9999 mem: incrementing refcount of 101019: 0 -> 1
 105 run: reply result
9999 mem: location 1046 is 101016
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101016
9999 mem: storing 101016 in location 101005
9999 mem: incrementing refcount of 101016: 1 -> 2
 104 run: c:character, in <- read in
9999 mem: location 101003 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 mem: new alloc: 101051
9999 mem: storing 9 in location 101052
 105 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 101054
9999 mem: incrementing refcount of 1008: 3 -> 4
 105 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101054 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1045
9999 mem: incrementing refcount of 1008: 4 -> 5
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1046
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 0
9999 mem: storing 0 in location 1047
 106 run: result <- equal full, free
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: storing 1 in location 1048
 106 run: reply result:boolean
9999 mem: location 1048 is 1
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 101055
 105 run: jump-unless empty?, 
9999 mem: location 101055 is 1
9998 run: jump-unless fell through
 105 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 101056
 105 run: wait-for-location *free-address
9999 mem: location 101056 is 1010
9999 mem: location 1010 is 0
9999 mem: location 101056 is 1010
9998 run: waiting for location 1010 to change from 0
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_buffer-lines-blocks-until-newline
 105 run: 5:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9999 mem: location 2 is 1025
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1045
9999 mem: incrementing refcount of 1025: 4 -> 5
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1026
9998 run: its type is number
9999 mem: location 1026 is 0
9999 mem: storing 0 in location 1046
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1027
9998 run: its type is number
9999 mem: location 1027 is 0
9999 mem: storing 0 in location 1047
 106 run: result <- equal full, free
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: storing 1 in location 1048
 106 run: reply result:boolean
9999 mem: location 1048 is 1
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 5
 105 run: assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
9999 mem: location 5 is 1
 105 run: 1:address:shared:channel <- write 1:address:shared:channel, 97/a
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 mem: new alloc: 1049
9999 mem: storing 10 in location 1050
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1052
9999 mem: incrementing refcount of 1008: 5 -> 6
 106 run: val:character <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1053
 106 run: full:boolean <- channel-full? chan
9999 mem: location 1052 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1061
9999 mem: storing 7 in location 1062
 107 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1064
9999 mem: incrementing refcount of 1008: 6 -> 7
 107 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1064 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1064 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 0
9999 mem: storing 0 in location 1065
 107 run: tmp <- add tmp, 1
9999 mem: location 1065 is 0
9999 mem: storing 1 in location 1065
 107 run: len:number <- channel-capacity chan
9999 mem: location 1064 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1070
9999 mem: storing 4 in location 1071
 108 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1073
9999 mem: incrementing refcount of 1008: 7 -> 8
 108 run: q:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1073 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1073 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1074
9999 mem: incrementing refcount of 1012: 1 -> 2
 108 run: result <- length *q
9999 mem: location 1074 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 11 in location 1075
 108 run: reply result:number
9999 mem: location 1075 is 11
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 11
9999 mem: storing 11 in location 1066
 107 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1065 is 1
9999 mem: location 1066 is 11
9999 mem: storing 0 in location 1067
 107 run: jump-unless at-end?, 
9999 mem: location 1067 is 0
9998 run: jumping to instruction 9
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 1064 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1064 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 0
9999 mem: storing 0 in location 1068
 107 run: result <- equal full, tmp
9999 mem: location 1068 is 0
9999 mem: location 1065 is 1
9999 mem: storing 0 in location 1069
 107 run: reply result:boolean
9999 mem: location 1069 is 0
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1054
 106 run: jump-unless full, 
9999 mem: location 1054 is 0
9998 run: jumping to instruction 8
 106 run: circular-buffer:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1052 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1052 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1056
9999 mem: incrementing refcount of 1012: 2 -> 3
 106 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1052 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 1012
9999 mem: location 1052 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1057
 106 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1056 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1057 is 1010
9999 mem: location 1010 is 0
9999 mem: storing 1014 in location 1058
 106 run: *dest <- copy val
9999 mem: location 1053 is 97
9999 mem: location 1058 is 1014
9999 mem: storing 97 in location 1014
 106 run: *free <- add *free, 1
9999 mem: location 1057 is 1010
9999 mem: location 1010 is 0
9999 mem: location 1057 is 1010
9999 mem: storing 1 in location 1010
 106 run: len:number <- length *circular-buffer
9999 mem: location 1056 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 11 in location 1059
 106 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1057 is 1010
9999 mem: location 1010 is 1
9999 mem: location 1059 is 11
9999 mem: storing 0 in location 1060
 106 run: jump-unless at-end?, 
9999 mem: location 1060 is 0
9998 run: jumping to instruction 19
 106 run: reply chan:address:shared:channel
9999 mem: location 1052 is 1008
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 8 -> 7
9999 mem: storing 1008 in location 1
9999 mem: incrementing refcount of 1008: 7 -> 8
 105 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 105 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9998 run: waiting for routine 2
9990 schedule: read/buffer-lines
 105 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 101057
 105 run: circular-buffer:address:shared:array:character <- get *chan, data:offset
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 0
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 101058
9999 mem: incrementing refcount of 1012: 3 -> 4
 105 run: result <- index *circular-buffer, *full
9999 mem: location 101058 is 1012
9999 mem: skipping refcount at 1012
9998 run: base address is 1013
9999 mem: location 101057 is 1009
9999 mem: location 1009 is 0
9998 run: address to copy is 1014
9998 run: its type is character
9999 mem: location 1014 is 97
9999 mem: storing 97 in location 101059
 105 run: *full <- add *full, 1
9999 mem: location 101057 is 1009
9999 mem: location 1009 is 0
9999 mem: location 101057 is 1009
9999 mem: storing 1 in location 1009
 105 run: len:number <- length *circular-buffer
9999 mem: location 101058 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 11 in location 101060
 105 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101057 is 1009
9999 mem: location 1009 is 1
9999 mem: location 101060 is 11
9999 mem: storing 0 in location 101061
 105 run: jump-unless at-end?, 
9999 mem: location 101061 is 0
9998 run: jumping to instruction 17
 105 run: reply result:character, chan:address:shared:channel
9999 mem: location 101059 is 97
9999 mem: location 101054 is 1008
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 97
9998 run: result 1 is 1008
9999 mem: storing 97 in location 101006
9999 mem: decrementing refcount of 1008: 8 -> 7
9999 mem: storing 1008 in location 101003
9999 mem: incrementing refcount of 1008: 7 -> 8
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 101006 is 97
9999 mem: storing 0 in location 101007
 104 run: jump-unless backspace?, 
9999 mem: location 101007 is 0
9998 run: jumping to instruction 18
 104 run: line <- append_2 line, c
9999 mem: location 101005 is 101016
9999 mem: location 101006 is 97
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 105 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 101016 in location 101054
9999 mem: incrementing refcount of 101016: 2 -> 3
 105 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 101055
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 101054 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 0
9999 mem: location 101018 is 101019
9999 mem: location 101054 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9999 mem: storing 101017 in location 101056
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 101055 is 97
9999 mem: storing 0 in location 101057
 105 run: jump-unless backspace?, 
9999 mem: location 101057 is 0
9998 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 101054 is 101016
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 106 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 101016 in location 1003
9999 mem: incrementing refcount of 101016: 3 -> 4
 106 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 0
9999 mem: location 101018 is 101019
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9998 run: its type is number
9999 mem: location 101017 is 0
9999 mem: storing 0 in location 1004
 106 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 0
9999 mem: location 101018 is 101019
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 1005
9999 mem: incrementing refcount of 101019: 1 -> 2
 106 run: capacity:number <- length *s
9999 mem: location 1005 is 101019
9999 mem: skipping refcount at 101019
9999 mem: storing 30 in location 1006
 106 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 0
9999 mem: location 1006 is 30
9999 mem: storing 0 in location 1007
 106 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 101059
 105 run: jump-unless full?, 
9999 mem: location 101059 is 0
9998 run: jumping to instruction 17
 105 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 101054 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 0
9999 mem: location 101018 is 101019
9999 mem: location 101054 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 101060
9999 mem: incrementing refcount of 101019: 2 -> 3
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 101060 is 101019
9999 mem: skipping refcount at 101019
9999 mem: location 101056 is 101017
9999 mem: location 101017 is 0
9999 mem: storing 101021 in location 101061
 105 run: *dest <- copy c
9999 mem: location 101055 is 97
9999 mem: location 101061 is 101021
9999 mem: storing 97 in location 101021
 105 run: *len <- add *len, 1
9999 mem: location 101056 is 101017
9999 mem: location 101017 is 0
9999 mem: location 101056 is 101017
9999 mem: storing 1 in location 101017
 105 run: reply in:address:shared:buffer
9999 mem: location 101054 is 101016
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101016
9999 mem: decrementing refcount of 101016: 4 -> 3
9999 mem: storing 101016 in location 101005
9999 mem: incrementing refcount of 101016: 3 -> 4
 104 run: line-done?:boolean <- equal c, 10/newline
9999 mem: location 101006 is 97
9999 mem: storing 0 in location 101010
 104 run: jump-if line-done?, 
9999 mem: location 101010 is 0
9998 run: jump-if fell through
 104 run: eof?:boolean <- equal c, 0/eof
9999 mem: location 101006 is 97
9999 mem: storing 0 in location 101011
 104 run: jump-if eof?, 
9999 mem: location 101011 is 0
9998 run: jump-if fell through
 104 run: jump 
9998 run: jumping to instruction 6
 104 run: c:character, in <- read in
9999 mem: location 101003 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 105 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 101054
9999 mem: incrementing refcount of 1008: 8 -> 9
 105 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101054 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1045
9999 mem: incrementing refcount of 1008: 9 -> 10
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 1
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 1
9999 mem: storing 1 in location 1046
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 1
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 1
9999 mem: storing 1 in location 1047
 106 run: result <- equal full, free
9999 mem: location 1046 is 1
9999 mem: location 1047 is 1
9999 mem: storing 1 in location 1048
 106 run: reply result:boolean
9999 mem: location 1048 is 1
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 101055
 105 run: jump-unless empty?, 
9999 mem: location 101055 is 1
9998 run: jump-unless fell through
 105 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 1
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 101056
 105 run: wait-for-location *free-address
9999 mem: location 101056 is 1010
9999 mem: location 1010 is 1
9999 mem: location 101056 is 1010
9998 run: waiting for location 1010 to change from 1
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_buffer-lines-blocks-until-newline
 105 run: 6:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9999 mem: location 2 is 1025
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1045
9999 mem: incrementing refcount of 1025: 5 -> 6
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1026
9998 run: its type is number
9999 mem: location 1026 is 0
9999 mem: storing 0 in location 1046
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1027
9998 run: its type is number
9999 mem: location 1027 is 0
9999 mem: storing 0 in location 1047
 106 run: result <- equal full, free
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: storing 1 in location 1048
 106 run: reply result:boolean
9999 mem: location 1048 is 1
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 6
 105 run: assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
9999 mem: location 6 is 1
 105 run: 1:address:shared:channel <- write 1:address:shared:channel, 98/b
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1052
9999 mem: incrementing refcount of 1008: 10 -> 11
 106 run: val:character <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1053
 106 run: full:boolean <- channel-full? chan
9999 mem: location 1052 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 107 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1064
9999 mem: incrementing refcount of 1008: 11 -> 12
 107 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1064 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 1
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1064 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 1
9999 mem: storing 1 in location 1065
 107 run: tmp <- add tmp, 1
9999 mem: location 1065 is 1
9999 mem: storing 2 in location 1065
 107 run: len:number <- channel-capacity chan
9999 mem: location 1064 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
 108 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1073
9999 mem: incrementing refcount of 1008: 12 -> 13
 108 run: q:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1073 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 1
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1073 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1074
9999 mem: incrementing refcount of 1012: 4 -> 5
 108 run: result <- length *q
9999 mem: location 1074 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 11 in location 1075
 108 run: reply result:number
9999 mem: location 1075 is 11
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 11
9999 mem: storing 11 in location 1066
 107 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1065 is 2
9999 mem: location 1066 is 11
9999 mem: storing 0 in location 1067
 107 run: jump-unless at-end?, 
9999 mem: location 1067 is 0
9998 run: jumping to instruction 9
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 1064 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 1
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1064 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 1
9999 mem: storing 1 in location 1068
 107 run: result <- equal full, tmp
9999 mem: location 1068 is 1
9999 mem: location 1065 is 2
9999 mem: storing 0 in location 1069
 107 run: reply result:boolean
9999 mem: location 1069 is 0
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1054
 106 run: jump-unless full, 
9999 mem: location 1054 is 0
9998 run: jumping to instruction 8
 106 run: circular-buffer:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1052 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 1
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1052 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1056
9999 mem: incrementing refcount of 1012: 5 -> 6
 106 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1052 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 1
9999 mem: location 1010 is 1
9999 mem: location 1011 is 1012
9999 mem: location 1052 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1057
 106 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1056 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1057 is 1010
9999 mem: location 1010 is 1
9999 mem: storing 1015 in location 1058
 106 run: *dest <- copy val
9999 mem: location 1053 is 98
9999 mem: location 1058 is 1015
9999 mem: storing 98 in location 1015
 106 run: *free <- add *free, 1
9999 mem: location 1057 is 1010
9999 mem: location 1010 is 1
9999 mem: location 1057 is 1010
9999 mem: storing 2 in location 1010
 106 run: len:number <- length *circular-buffer
9999 mem: location 1056 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 11 in location 1059
 106 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1057 is 1010
9999 mem: location 1010 is 2
9999 mem: location 1059 is 11
9999 mem: storing 0 in location 1060
 106 run: jump-unless at-end?, 
9999 mem: location 1060 is 0
9998 run: jumping to instruction 19
 106 run: reply chan:address:shared:channel
9999 mem: location 1052 is 1008
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 13 -> 12
9999 mem: storing 1008 in location 1
9999 mem: incrementing refcount of 1008: 12 -> 13
 105 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 105 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9998 run: waiting for routine 2
9990 schedule: read/buffer-lines
 105 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 1
9999 mem: location 1010 is 2
9999 mem: location 1011 is 1012
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 101057
 105 run: circular-buffer:address:shared:array:character <- get *chan, data:offset
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 1
9999 mem: location 1010 is 2
9999 mem: location 1011 is 1012
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 101058
9999 mem: incrementing refcount of 1012: 6 -> 7
 105 run: result <- index *circular-buffer, *full
9999 mem: location 101058 is 1012
9999 mem: skipping refcount at 1012
9998 run: base address is 1013
9999 mem: location 101057 is 1009
9999 mem: location 1009 is 1
9998 run: address to copy is 1015
9998 run: its type is character
9999 mem: location 1015 is 98
9999 mem: storing 98 in location 101059
 105 run: *full <- add *full, 1
9999 mem: location 101057 is 1009
9999 mem: location 1009 is 1
9999 mem: location 101057 is 1009
9999 mem: storing 2 in location 1009
 105 run: len:number <- length *circular-buffer
9999 mem: location 101058 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 11 in location 101060
 105 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101057 is 1009
9999 mem: location 1009 is 2
9999 mem: location 101060 is 11
9999 mem: storing 0 in location 101061
 105 run: jump-unless at-end?, 
9999 mem: location 101061 is 0
9998 run: jumping to instruction 17
 105 run: reply result:character, chan:address:shared:channel
9999 mem: location 101059 is 98
9999 mem: location 101054 is 1008
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 98
9998 run: result 1 is 1008
9999 mem: storing 98 in location 101006
9999 mem: decrementing refcount of 1008: 13 -> 12
9999 mem: storing 1008 in location 101003
9999 mem: incrementing refcount of 1008: 12 -> 13
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 101006 is 98
9999 mem: storing 0 in location 101007
 104 run: jump-unless backspace?, 
9999 mem: location 101007 is 0
9998 run: jumping to instruction 18
 104 run: line <- append_2 line, c
9999 mem: location 101005 is 101016
9999 mem: location 101006 is 98
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 105 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 101016 in location 101054
9999 mem: incrementing refcount of 101016: 4 -> 5
 105 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 101055
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 101054 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 1
9999 mem: location 101018 is 101019
9999 mem: location 101054 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9999 mem: storing 101017 in location 101056
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 101055 is 98
9999 mem: storing 0 in location 101057
 105 run: jump-unless backspace?, 
9999 mem: location 101057 is 0
9998 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 101054 is 101016
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 106 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 101016 in location 1003
9999 mem: incrementing refcount of 101016: 5 -> 6
 106 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 1
9999 mem: location 101018 is 101019
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9998 run: its type is number
9999 mem: location 101017 is 1
9999 mem: storing 1 in location 1004
 106 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 1
9999 mem: location 101018 is 101019
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 1005
9999 mem: incrementing refcount of 101019: 3 -> 4
 106 run: capacity:number <- length *s
9999 mem: location 1005 is 101019
9999 mem: skipping refcount at 101019
9999 mem: storing 30 in location 1006
 106 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 1
9999 mem: location 1006 is 30
9999 mem: storing 0 in location 1007
 106 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 101059
 105 run: jump-unless full?, 
9999 mem: location 101059 is 0
9998 run: jumping to instruction 17
 105 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 101054 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 1
9999 mem: location 101018 is 101019
9999 mem: location 101054 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 101060
9999 mem: incrementing refcount of 101019: 4 -> 5
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 101060 is 101019
9999 mem: skipping refcount at 101019
9999 mem: location 101056 is 101017
9999 mem: location 101017 is 1
9999 mem: storing 101022 in location 101061
 105 run: *dest <- copy c
9999 mem: location 101055 is 98
9999 mem: location 101061 is 101022
9999 mem: storing 98 in location 101022
 105 run: *len <- add *len, 1
9999 mem: location 101056 is 101017
9999 mem: location 101017 is 1
9999 mem: location 101056 is 101017
9999 mem: storing 2 in location 101017
 105 run: reply in:address:shared:buffer
9999 mem: location 101054 is 101016
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101016
9999 mem: decrementing refcount of 101016: 6 -> 5
9999 mem: storing 101016 in location 101005
9999 mem: incrementing refcount of 101016: 5 -> 6
 104 run: line-done?:boolean <- equal c, 10/newline
9999 mem: location 101006 is 98
9999 mem: storing 0 in location 101010
 104 run: jump-if line-done?, 
9999 mem: location 101010 is 0
9998 run: jump-if fell through
 104 run: eof?:boolean <- equal c, 0/eof
9999 mem: location 101006 is 98
9999 mem: storing 0 in location 101011
 104 run: jump-if eof?, 
9999 mem: location 101011 is 0
9998 run: jump-if fell through
 104 run: jump 
9998 run: jumping to instruction 6
 104 run: c:character, in <- read in
9999 mem: location 101003 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 105 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 101054
9999 mem: incrementing refcount of 1008: 13 -> 14
 105 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101054 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1045
9999 mem: incrementing refcount of 1008: 14 -> 15
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 2
9999 mem: location 1011 is 1012
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 2
9999 mem: storing 2 in location 1046
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 2
9999 mem: location 1011 is 1012
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 2
9999 mem: storing 2 in location 1047
 106 run: result <- equal full, free
9999 mem: location 1046 is 2
9999 mem: location 1047 is 2
9999 mem: storing 1 in location 1048
 106 run: reply result:boolean
9999 mem: location 1048 is 1
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 101055
 105 run: jump-unless empty?, 
9999 mem: location 101055 is 1
9998 run: jump-unless fell through
 105 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 2
9999 mem: location 1011 is 1012
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 101056
 105 run: wait-for-location *free-address
9999 mem: location 101056 is 1010
9999 mem: location 1010 is 2
9999 mem: location 101056 is 1010
9998 run: waiting for location 1010 to change from 2
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_buffer-lines-blocks-until-newline
 105 run: 7:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9999 mem: location 2 is 1025
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1045
9999 mem: incrementing refcount of 1025: 6 -> 7
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1026
9998 run: its type is number
9999 mem: location 1026 is 0
9999 mem: storing 0 in location 1046
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1027
9998 run: its type is number
9999 mem: location 1027 is 0
9999 mem: storing 0 in location 1047
 106 run: result <- equal full, free
9999 mem: location 1046 is 0
9999 mem: location 1047 is 0
9999 mem: storing 1 in location 1048
 106 run: reply result:boolean
9999 mem: location 1048 is 1
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 7
 105 run: assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
9999 mem: location 7 is 1
 105 run: 1:address:shared:channel <- write 1:address:shared:channel, 10/newline
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1052
9999 mem: incrementing refcount of 1008: 15 -> 16
 106 run: val:character <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1053
 106 run: full:boolean <- channel-full? chan
9999 mem: location 1052 is 1008
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 107 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1064
9999 mem: incrementing refcount of 1008: 16 -> 17
 107 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1064 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 2
9999 mem: location 1011 is 1012
9999 mem: location 1064 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 2
9999 mem: storing 2 in location 1065
 107 run: tmp <- add tmp, 1
9999 mem: location 1065 is 2
9999 mem: storing 3 in location 1065
 107 run: len:number <- channel-capacity chan
9999 mem: location 1064 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
 108 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1073
9999 mem: incrementing refcount of 1008: 17 -> 18
 108 run: q:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1073 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 2
9999 mem: location 1011 is 1012
9999 mem: location 1073 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1074
9999 mem: incrementing refcount of 1012: 7 -> 8
 108 run: result <- length *q
9999 mem: location 1074 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 11 in location 1075
 108 run: reply result:number
9999 mem: location 1075 is 11
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 11
9999 mem: storing 11 in location 1066
 107 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1065 is 3
9999 mem: location 1066 is 11
9999 mem: storing 0 in location 1067
 107 run: jump-unless at-end?, 
9999 mem: location 1067 is 0
9998 run: jumping to instruction 9
 107 run: full:number <- get *chan, first-full:offset
9999 mem: location 1064 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 2
9999 mem: location 1011 is 1012
9999 mem: location 1064 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 2
9999 mem: storing 2 in location 1068
 107 run: result <- equal full, tmp
9999 mem: location 1068 is 2
9999 mem: location 1065 is 3
9999 mem: storing 0 in location 1069
 107 run: reply result:boolean
9999 mem: location 1069 is 0
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1054
 106 run: jump-unless full, 
9999 mem: location 1054 is 0
9998 run: jumping to instruction 8
 106 run: circular-buffer:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1052 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 2
9999 mem: location 1011 is 1012
9999 mem: location 1052 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 1056
9999 mem: incrementing refcount of 1012: 8 -> 9
 106 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1052 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 2
9999 mem: location 1011 is 1012
9999 mem: location 1052 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1057
 106 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1056 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1057 is 1010
9999 mem: location 1010 is 2
9999 mem: storing 1016 in location 1058
 106 run: *dest <- copy val
9999 mem: location 1053 is 10
9999 mem: location 1058 is 1016
9999 mem: storing 10 in location 1016
 106 run: *free <- add *free, 1
9999 mem: location 1057 is 1010
9999 mem: location 1010 is 2
9999 mem: location 1057 is 1010
9999 mem: storing 3 in location 1010
 106 run: len:number <- length *circular-buffer
9999 mem: location 1056 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 11 in location 1059
 106 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1057 is 1010
9999 mem: location 1010 is 3
9999 mem: location 1059 is 11
9999 mem: storing 0 in location 1060
 106 run: jump-unless at-end?, 
9999 mem: location 1060 is 0
9998 run: jumping to instruction 19
 106 run: reply chan:address:shared:channel
9999 mem: location 1052 is 1008
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1008
9999 mem: decrementing refcount of 1008: 18 -> 17
9999 mem: storing 1008 in location 1
9999 mem: incrementing refcount of 1008: 17 -> 18
 105 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 105 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9998 run: waiting for routine 2
9990 schedule: read/buffer-lines
 105 run: full:address:number <- get-address *chan, first-full:offset
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 1012
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 101057
 105 run: circular-buffer:address:shared:array:character <- get *chan, data:offset
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 2
9999 mem: location 1010 is 3
9999 mem: location 1011 is 1012
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1011 is 1012
9999 mem: storing 1012 in location 101058
9999 mem: incrementing refcount of 1012: 9 -> 10
 105 run: result <- index *circular-buffer, *full
9999 mem: location 101058 is 1012
9999 mem: skipping refcount at 1012
9998 run: base address is 1013
9999 mem: location 101057 is 1009
9999 mem: location 1009 is 2
9998 run: address to copy is 1016
9998 run: its type is character
9999 mem: location 1016 is 10
9999 mem: storing 10 in location 101059
 105 run: *full <- add *full, 1
9999 mem: location 101057 is 1009
9999 mem: location 1009 is 2
9999 mem: location 101057 is 1009
9999 mem: storing 3 in location 1009
 105 run: len:number <- length *circular-buffer
9999 mem: location 101058 is 1012
9999 mem: skipping refcount at 1012
9999 mem: storing 11 in location 101060
 105 run: at-end?:boolean <- greater-or-equal *full, len
9999 mem: location 101057 is 1009
9999 mem: location 1009 is 3
9999 mem: location 101060 is 11
9999 mem: storing 0 in location 101061
 105 run: jump-unless at-end?, 
9999 mem: location 101061 is 0
9998 run: jumping to instruction 17
 105 run: reply result:character, chan:address:shared:channel
9999 mem: location 101059 is 10
9999 mem: location 101054 is 1008
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 10
9998 run: result 1 is 1008
9999 mem: storing 10 in location 101006
9999 mem: decrementing refcount of 1008: 18 -> 17
9999 mem: storing 1008 in location 101003
9999 mem: incrementing refcount of 1008: 17 -> 18
 104 run: backspace?:boolean <- equal c, 8
9999 mem: location 101006 is 10
9999 mem: storing 0 in location 101007
 104 run: jump-unless backspace?, 
9999 mem: location 101007 is 0
9998 run: jumping to instruction 18
 104 run: line <- append_2 line, c
9999 mem: location 101005 is 101016
9999 mem: location 101006 is 10
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 105 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 101016 in location 101054
9999 mem: incrementing refcount of 101016: 6 -> 7
 105 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 101055
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 101054 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 2
9999 mem: location 101018 is 101019
9999 mem: location 101054 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9999 mem: storing 101017 in location 101056
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 101055 is 10
9999 mem: storing 0 in location 101057
 105 run: jump-unless backspace?, 
9999 mem: location 101057 is 0
9998 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 101054 is 101016
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 106 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 101016 in location 1003
9999 mem: incrementing refcount of 101016: 7 -> 8
 106 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 2
9999 mem: location 101018 is 101019
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9998 run: its type is number
9999 mem: location 101017 is 2
9999 mem: storing 2 in location 1004
 106 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 2
9999 mem: location 101018 is 101019
9999 mem: location 1003 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 1005
9999 mem: incrementing refcount of 101019: 5 -> 6
 106 run: capacity:number <- length *s
9999 mem: location 1005 is 101019
9999 mem: skipping refcount at 101019
9999 mem: storing 30 in location 1006
 106 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 2
9999 mem: location 1006 is 30
9999 mem: storing 0 in location 1007
 106 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 101059
 105 run: jump-unless full?, 
9999 mem: location 101059 is 0
9998 run: jumping to instruction 17
 105 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 101054 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 2
9999 mem: location 101018 is 101019
9999 mem: location 101054 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 101060
9999 mem: incrementing refcount of 101019: 6 -> 7
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 101060 is 101019
9999 mem: skipping refcount at 101019
9999 mem: location 101056 is 101017
9999 mem: location 101017 is 2
9999 mem: storing 101023 in location 101061
 105 run: *dest <- copy c
9999 mem: location 101055 is 10
9999 mem: location 101061 is 101023
9999 mem: storing 10 in location 101023
 105 run: *len <- add *len, 1
9999 mem: location 101056 is 101017
9999 mem: location 101017 is 2
9999 mem: location 101056 is 101017
9999 mem: storing 3 in location 101017
 105 run: reply in:address:shared:buffer
9999 mem: location 101054 is 101016
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101016
9999 mem: decrementing refcount of 101016: 8 -> 7
9999 mem: storing 101016 in location 101005
9999 mem: incrementing refcount of 101016: 7 -> 8
 104 run: line-done?:boolean <- equal c, 10/newline
9999 mem: location 101006 is 10
9999 mem: storing 1 in location 101010
 104 run: jump-if line-done?, 
9999 mem: location 101010 is 1
9998 run: jumping to instruction 25
 104 run: i:number <- copy 0
9999 mem: storing 0 in location 101012
 104 run: line-contents:address:shared:array:character <- get *line, data:offset
9999 mem: location 101005 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 3
9999 mem: location 101018 is 101019
9999 mem: location 101005 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101018
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 101018 is 101019
9999 mem: storing 101019 in location 101013
9999 mem: incrementing refcount of 101019: 7 -> 8
 104 run: max:number <- get *line, length:offset
9999 mem: location 101005 is 101016
9999 mem: skipping refcount at 101016
9999 mem: location 101017 is 3
9999 mem: location 101018 is 101019
9999 mem: location 101005 is 101016
9999 mem: skipping refcount at 101016
9998 run: address to copy is 101017
9998 run: its type is number
9999 mem: location 101017 is 3
9999 mem: storing 3 in location 101014
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 101012 is 0
9999 mem: location 101014 is 3
9999 mem: storing 0 in location 101015
 104 run: jump-if done?, 
9999 mem: location 101015 is 0
9998 run: jump-if fell through
 104 run: c:character <- index *line-contents, i
9999 mem: location 101013 is 101019
9999 mem: skipping refcount at 101019
9998 run: base address is 101020
9999 mem: location 101012 is 0
9998 run: address to copy is 101021
9998 run: its type is character
9999 mem: location 101021 is 97
9999 mem: storing 97 in location 101006
 104 run: out <- write out, c
9999 mem: location 101004 is 1025
9999 mem: location 101006 is 97
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
 105 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1052
9999 mem: incrementing refcount of 1025: 7 -> 8
 105 run: val:character <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1053
 105 run: full:boolean <- channel-full? chan
9999 mem: location 1052 is 1025
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1064
9999 mem: incrementing refcount of 1025: 8 -> 9
 106 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1064 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1064 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1027
9998 run: its type is number
9999 mem: location 1027 is 0
9999 mem: storing 0 in location 1065
 106 run: tmp <- add tmp, 1
9999 mem: location 1065 is 0
9999 mem: storing 1 in location 1065
 106 run: len:number <- channel-capacity chan
9999 mem: location 1064 is 1025
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
 107 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1073
9999 mem: incrementing refcount of 1025: 9 -> 10
 107 run: q:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1073 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1073 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1028
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1028 is 1029
9999 mem: storing 1029 in location 1074
9999 mem: incrementing refcount of 1029: 1 -> 2
 107 run: result <- length *q
9999 mem: location 1074 is 1029
9999 mem: skipping refcount at 1029
9999 mem: storing 11 in location 1075
 107 run: reply result:number
9999 mem: location 1075 is 11
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 11
9999 mem: storing 11 in location 1066
 106 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1065 is 1
9999 mem: location 1066 is 11
9999 mem: storing 0 in location 1067
 106 run: jump-unless at-end?, 
9999 mem: location 1067 is 0
9998 run: jumping to instruction 9
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1064 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1064 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1026
9998 run: its type is number
9999 mem: location 1026 is 0
9999 mem: storing 0 in location 1068
 106 run: result <- equal full, tmp
9999 mem: location 1068 is 0
9999 mem: location 1065 is 1
9999 mem: storing 0 in location 1069
 106 run: reply result:boolean
9999 mem: location 1069 is 0
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1054
 105 run: jump-unless full, 
9999 mem: location 1054 is 0
9998 run: jumping to instruction 8
 105 run: circular-buffer:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1052 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1052 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1028
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1028 is 1029
9999 mem: storing 1029 in location 1056
9999 mem: incrementing refcount of 1029: 2 -> 3
 105 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1052 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1052 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1057
 105 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1056 is 1029
9999 mem: skipping refcount at 1029
9999 mem: location 1057 is 1027
9999 mem: location 1027 is 0
9999 mem: storing 1031 in location 1058
 105 run: *dest <- copy val
9999 mem: location 1053 is 97
9999 mem: location 1058 is 1031
9999 mem: storing 97 in location 1031
 105 run: *free <- add *free, 1
9999 mem: location 1057 is 1027
9999 mem: location 1027 is 0
9999 mem: location 1057 is 1027
9999 mem: storing 1 in location 1027
 105 run: len:number <- length *circular-buffer
9999 mem: location 1056 is 1029
9999 mem: skipping refcount at 1029
9999 mem: storing 11 in location 1059
 105 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1057 is 1027
9999 mem: location 1027 is 1
9999 mem: location 1059 is 11
9999 mem: storing 0 in location 1060
 105 run: jump-unless at-end?, 
9999 mem: location 1060 is 0
9998 run: jumping to instruction 19
 105 run: reply chan:address:shared:channel
9999 mem: location 1052 is 1025
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1025
9999 mem: decrementing refcount of 1025: 10 -> 9
9999 mem: storing 1025 in location 101004
9999 mem: incrementing refcount of 1025: 9 -> 10
 104 run: i <- add i, 1
9999 mem: location 101012 is 0
9999 mem: storing 1 in location 101012
 104 run: jump 
9998 run: jumping to instruction 30
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 101012 is 1
9999 mem: location 101014 is 3
9999 mem: storing 0 in location 101015
 104 run: jump-if done?, 
9999 mem: location 101015 is 0
9998 run: jump-if fell through
 104 run: c:character <- index *line-contents, i
9999 mem: location 101013 is 101019
9999 mem: skipping refcount at 101019
9998 run: base address is 101020
9999 mem: location 101012 is 1
9998 run: address to copy is 101022
9998 run: its type is character
9999 mem: location 101022 is 98
9999 mem: storing 98 in location 101006
 104 run: out <- write out, c
9999 mem: location 101004 is 1025
9999 mem: location 101006 is 98
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
 105 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1052
9999 mem: incrementing refcount of 1025: 10 -> 11
 105 run: val:character <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1053
 105 run: full:boolean <- channel-full? chan
9999 mem: location 1052 is 1025
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1064
9999 mem: incrementing refcount of 1025: 11 -> 12
 106 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1064 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 1
9999 mem: location 1028 is 1029
9999 mem: location 1064 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1027
9998 run: its type is number
9999 mem: location 1027 is 1
9999 mem: storing 1 in location 1065
 106 run: tmp <- add tmp, 1
9999 mem: location 1065 is 1
9999 mem: storing 2 in location 1065
 106 run: len:number <- channel-capacity chan
9999 mem: location 1064 is 1025
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
 107 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1073
9999 mem: incrementing refcount of 1025: 12 -> 13
 107 run: q:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1073 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 1
9999 mem: location 1028 is 1029
9999 mem: location 1073 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1028
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1028 is 1029
9999 mem: storing 1029 in location 1074
9999 mem: incrementing refcount of 1029: 3 -> 4
 107 run: result <- length *q
9999 mem: location 1074 is 1029
9999 mem: skipping refcount at 1029
9999 mem: storing 11 in location 1075
 107 run: reply result:number
9999 mem: location 1075 is 11
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 11
9999 mem: storing 11 in location 1066
 106 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1065 is 2
9999 mem: location 1066 is 11
9999 mem: storing 0 in location 1067
 106 run: jump-unless at-end?, 
9999 mem: location 1067 is 0
9998 run: jumping to instruction 9
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1064 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 1
9999 mem: location 1028 is 1029
9999 mem: location 1064 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1026
9998 run: its type is number
9999 mem: location 1026 is 0
9999 mem: storing 0 in location 1068
 106 run: result <- equal full, tmp
9999 mem: location 1068 is 0
9999 mem: location 1065 is 2
9999 mem: storing 0 in location 1069
 106 run: reply result:boolean
9999 mem: location 1069 is 0
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1054
 105 run: jump-unless full, 
9999 mem: location 1054 is 0
9998 run: jumping to instruction 8
 105 run: circular-buffer:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1052 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 1
9999 mem: location 1028 is 1029
9999 mem: location 1052 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1028
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1028 is 1029
9999 mem: storing 1029 in location 1056
9999 mem: incrementing refcount of 1029: 4 -> 5
 105 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1052 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 1
9999 mem: location 1028 is 1029
9999 mem: location 1052 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1057
 105 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1056 is 1029
9999 mem: skipping refcount at 1029
9999 mem: location 1057 is 1027
9999 mem: location 1027 is 1
9999 mem: storing 1032 in location 1058
 105 run: *dest <- copy val
9999 mem: location 1053 is 98
9999 mem: location 1058 is 1032
9999 mem: storing 98 in location 1032
 105 run: *free <- add *free, 1
9999 mem: location 1057 is 1027
9999 mem: location 1027 is 1
9999 mem: location 1057 is 1027
9999 mem: storing 2 in location 1027
 105 run: len:number <- length *circular-buffer
9999 mem: location 1056 is 1029
9999 mem: skipping refcount at 1029
9999 mem: storing 11 in location 1059
 105 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1057 is 1027
9999 mem: location 1027 is 2
9999 mem: location 1059 is 11
9999 mem: storing 0 in location 1060
 105 run: jump-unless at-end?, 
9999 mem: location 1060 is 0
9998 run: jumping to instruction 19
 105 run: reply chan:address:shared:channel
9999 mem: location 1052 is 1025
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1025
9999 mem: decrementing refcount of 1025: 13 -> 12
9999 mem: storing 1025 in location 101004
9999 mem: incrementing refcount of 1025: 12 -> 13
 104 run: i <- add i, 1
9999 mem: location 101012 is 1
9999 mem: storing 2 in location 101012
 104 run: jump 
9998 run: jumping to instruction 30
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 101012 is 2
9999 mem: location 101014 is 3
9999 mem: storing 0 in location 101015
 104 run: jump-if done?, 
9999 mem: location 101015 is 0
9998 run: jump-if fell through
 104 run: c:character <- index *line-contents, i
9999 mem: location 101013 is 101019
9999 mem: skipping refcount at 101019
9998 run: base address is 101020
9999 mem: location 101012 is 2
9998 run: address to copy is 101023
9998 run: its type is character
9999 mem: location 101023 is 10
9999 mem: storing 10 in location 101006
 104 run: out <- write out, c
9999 mem: location 101004 is 1025
9999 mem: location 101006 is 10
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: allocating size 12
9999 abandon: picking up space from free-list of size 12
 105 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1052
9999 mem: incrementing refcount of 1025: 13 -> 14
 105 run: val:character <- next-ingredient-without-typechecking 
9999 mem: storing 10 in location 1053
 105 run: full:boolean <- channel-full? chan
9999 mem: location 1052 is 1025
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1064
9999 mem: incrementing refcount of 1025: 14 -> 15
 106 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1064 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 2
9999 mem: location 1028 is 1029
9999 mem: location 1064 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1027
9998 run: its type is number
9999 mem: location 1027 is 2
9999 mem: storing 2 in location 1065
 106 run: tmp <- add tmp, 1
9999 mem: location 1065 is 2
9999 mem: storing 3 in location 1065
 106 run: len:number <- channel-capacity chan
9999 mem: location 1064 is 1025
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
 107 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1073
9999 mem: incrementing refcount of 1025: 15 -> 16
 107 run: q:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1073 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 2
9999 mem: location 1028 is 1029
9999 mem: location 1073 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1028
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1028 is 1029
9999 mem: storing 1029 in location 1074
9999 mem: incrementing refcount of 1029: 5 -> 6
 107 run: result <- length *q
9999 mem: location 1074 is 1029
9999 mem: skipping refcount at 1029
9999 mem: storing 11 in location 1075
 107 run: reply result:number
9999 mem: location 1075 is 11
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 11
9999 mem: storing 11 in location 1066
 106 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1065 is 3
9999 mem: location 1066 is 11
9999 mem: storing 0 in location 1067
 106 run: jump-unless at-end?, 
9999 mem: location 1067 is 0
9998 run: jumping to instruction 9
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1064 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 2
9999 mem: location 1028 is 1029
9999 mem: location 1064 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1026
9998 run: its type is number
9999 mem: location 1026 is 0
9999 mem: storing 0 in location 1068
 106 run: result <- equal full, tmp
9999 mem: location 1068 is 0
9999 mem: location 1065 is 3
9999 mem: storing 0 in location 1069
 106 run: reply result:boolean
9999 mem: location 1069 is 0
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1054
 105 run: jump-unless full, 
9999 mem: location 1054 is 0
9998 run: jumping to instruction 8
 105 run: circular-buffer:address:shared:array:character <- get *chan, data:offset
9999 mem: location 1052 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 2
9999 mem: location 1028 is 1029
9999 mem: location 1052 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1028
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1028 is 1029
9999 mem: storing 1029 in location 1056
9999 mem: incrementing refcount of 1029: 6 -> 7
 105 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1052 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 2
9999 mem: location 1028 is 1029
9999 mem: location 1052 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1057
 105 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1056 is 1029
9999 mem: skipping refcount at 1029
9999 mem: location 1057 is 1027
9999 mem: location 1027 is 2
9999 mem: storing 1033 in location 1058
 105 run: *dest <- copy val
9999 mem: location 1053 is 10
9999 mem: location 1058 is 1033
9999 mem: storing 10 in location 1033
 105 run: *free <- add *free, 1
9999 mem: location 1057 is 1027
9999 mem: location 1027 is 2
9999 mem: location 1057 is 1027
9999 mem: storing 3 in location 1027
 105 run: len:number <- length *circular-buffer
9999 mem: location 1056 is 1029
9999 mem: skipping refcount at 1029
9999 mem: storing 11 in location 1059
 105 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1057 is 1027
9999 mem: location 1027 is 3
9999 mem: location 1059 is 11
9999 mem: storing 0 in location 1060
 105 run: jump-unless at-end?, 
9999 mem: location 1060 is 0
9998 run: jumping to instruction 19
 105 run: reply chan:address:shared:channel
9999 mem: location 1052 is 1025
9999 abandon: saving in free-list of size 12
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1025
9999 mem: decrementing refcount of 1025: 16 -> 15
9999 mem: storing 1025 in location 101004
9999 mem: incrementing refcount of 1025: 15 -> 16
 104 run: i <- add i, 1
9999 mem: location 101012 is 2
9999 mem: storing 3 in location 101012
 104 run: jump 
9998 run: jumping to instruction 30
 104 run: done?:boolean <- greater-or-equal i, max
9999 mem: location 101012 is 3
9999 mem: location 101014 is 3
9999 mem: storing 1 in location 101015
 104 run: jump-if done?, 
9999 mem: location 101015 is 1
9998 run: jumping to instruction 36
 104 run: jump 
9998 run: jumping to instruction 4
 104 run: line:address:shared:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 105 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 30 in location 1045
 105 run: result <- new buffer:type
9999 mem: allocating size 3
9999 mem: new alloc: 101062
9999 mem: storing 101062 in location 1046
9999 mem: incrementing refcount of 101062: 0 -> 1
 105 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1046 is 101062
9999 mem: skipping refcount at 101062
9999 mem: location 101063 is 0
9999 mem: location 101064 is 0
9999 mem: location 1046 is 101062
9999 mem: skipping refcount at 101062
9998 run: address to copy is 101063
9999 mem: storing 101063 in location 1047
 105 run: *len:address:number <- copy 0
9999 mem: location 1047 is 101063
9999 mem: storing 0 in location 101063
 105 run: s:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1046 is 101062
9999 mem: skipping refcount at 101062
9999 mem: location 101063 is 0
9999 mem: location 101064 is 0
9999 mem: location 1046 is 101062
9999 mem: skipping refcount at 101062
9998 run: address to copy is 101064
9999 mem: storing 101064 in location 1048
 105 run: *s <- new character:type, capacity
9999 mem: location 1045 is 30
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 101065
9999 mem: storing 30 in location 101066
9999 mem: location 1048 is 101064
9999 mem: storing 101065 in location 101064
9999 mem: incrementing refcount of 101065: 0 -> 1
 105 run: reply result
9999 mem: location 1046 is 101062
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 101062
9999 mem: decrementing refcount of 101016: 8 -> 7
9999 mem: storing 101062 in location 101005
9999 mem: incrementing refcount of 101062: 1 -> 2
 104 run: c:character, in <- read in
9999 mem: location 101003 is 1008
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 105 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 101054
9999 mem: incrementing refcount of 1008: 18 -> 19
 105 run: empty?:boolean <- channel-empty? chan
9999 mem: location 101054 is 1008
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1045
9999 mem: incrementing refcount of 1008: 19 -> 20
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 3
9999 mem: location 1011 is 1012
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 3
9999 mem: storing 3 in location 1046
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 3
9999 mem: location 1011 is 1012
9999 mem: location 1045 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9998 run: its type is number
9999 mem: location 1010 is 3
9999 mem: storing 3 in location 1047
 106 run: result <- equal full, free
9999 mem: location 1046 is 3
9999 mem: location 1047 is 3
9999 mem: storing 1 in location 1048
 106 run: reply result:boolean
9999 mem: location 1048 is 1
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 101055
 105 run: jump-unless empty?, 
9999 mem: location 101055 is 1
9998 run: jump-unless fell through
 105 run: free-address:address:number <- get-address *chan, first-free:offset
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9999 mem: location 1009 is 3
9999 mem: location 1010 is 3
9999 mem: location 1011 is 1012
9999 mem: location 101054 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 101056
 105 run: wait-for-location *free-address
9999 mem: location 101056 is 1010
9999 mem: location 1010 is 3
9999 mem: location 101056 is 1010
9998 run: waiting for location 1010 to change from 3
9999 schedule: waking up routine 1
9990 schedule: run_1001/scenario_buffer-lines-blocks-until-newline
 105 run: 8:boolean <- channel-empty? 2:address:shared:channel/buffered-stdin
9999 mem: location 2 is 1025
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 106 run: chan:address:shared:channel <- next-ingredient-without-typechecking 
9999 mem: storing 1025 in location 1045
9999 mem: incrementing refcount of 1025: 16 -> 17
 106 run: full:number <- get *chan, first-full:offset
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 3
9999 mem: location 1028 is 1029
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1026
9998 run: its type is number
9999 mem: location 1026 is 0
9999 mem: storing 0 in location 1046
 106 run: free:number <- get *chan, first-free:offset
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9999 mem: location 1026 is 0
9999 mem: location 1027 is 3
9999 mem: location 1028 is 1029
9999 mem: location 1045 is 1025
9999 mem: skipping refcount at 1025
9998 run: address to copy is 1027
9998 run: its type is number
9999 mem: location 1027 is 3
9999 mem: storing 3 in location 1047
 106 run: result <- equal full, free
9999 mem: location 1046 is 0
9999 mem: location 1047 is 3
9999 mem: storing 0 in location 1048
 106 run: reply result:boolean
9999 mem: location 1048 is 0
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 8
 105 run: 9:boolean/completed? <- not 8:boolean
9999 mem: location 8 is 0
9999 mem: storing 1 in location 9
 105 run: assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
9999 mem: location 9 is 1
 105 run: trace 1, [test], [reached end]
   1 test: reached end 
 105 run: reply 
9999 trace: reply: decrementing callstack depth from 4
 104 run: trace-should-contain [
    test: reached end
  ]
 104 run: reply 
9999 trace: reply: decrementing callstack depth from 3
