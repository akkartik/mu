parse: instruction: run
parse:   ingredient: {name: "
    1:address:channel/stdin <- init-channel 10:literal/capacity
    2:address:channel/buffered-stdin <- init-channel 10:literal/capacity
    3:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
    # buffer stdin into buffered-stdin, try to read from buffered-stdin
    4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin
    wait-for-routine 4:number/buffer-routine
    5:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
    # write 'a'
    1:address:channel <- write 1:address:channel, 97:literal/a
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    6:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
    # write 'b'
    1:address:channel <- write 1:address:channel, 98:literal/b
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    7:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
    # write newline
    1:address:channel <- write 1:address:channel, 10:literal/newline
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    8:boolean <- channel-empty? 2:address:channel/buffered-stdin
    9:boolean/completed? <- not 8:boolean
    assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
    trace [test], [reached end]
  ", properties: ["
    1:address:channel/stdin <- init-channel 10:literal/capacity
    2:address:channel/buffered-stdin <- init-channel 10:literal/capacity
    3:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
    # buffer stdin into buffered-stdin, try to read from buffered-stdin
    4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin
    wait-for-routine 4:number/buffer-routine
    5:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
    # write 'a'
    1:address:channel <- write 1:address:channel, 97:literal/a
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    6:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
    # write 'b'
    1:address:channel <- write 1:address:channel, 98:literal/b
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    7:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
    # write newline
    1:address:channel <- write 1:address:channel, 10:literal/newline
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    8:boolean <- channel-empty? 2:address:channel/buffered-stdin
    9:boolean/completed? <- not 8:boolean
    assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
    trace [test], [reached end]
  ": "literal-string"]}
parse: instruction: trace-should-contain
parse:   ingredient: {name: "
    test: reached end
  ", properties: ["
    test: reached end
  ": "literal-string"]}
after-brace: recipe buffer-lines-blocks-until-newline
after-brace: run ...
after-brace: trace-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: buffer-lines-blocks-until-newline
 101 run: run [
    1:address:channel/stdin <- init-channel 10:literal/capacity
    2:address:channel/buffered-stdin <- init-channel 10:literal/capacity
    3:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
    # buffer stdin into buffered-stdin, try to read from buffered-stdin
    4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin
    wait-for-routine 4:number/buffer-routine
    5:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
    # write 'a'
    1:address:channel <- write 1:address:channel, 97:literal/a
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    6:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
    # write 'b'
    1:address:channel <- write 1:address:channel, 98:literal/b
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    7:boolean <- channel-empty? 2:address:channel/buffered-stdin
    assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
    # write newline
    1:address:channel <- write 1:address:channel, 10:literal/newline
    restart 4:number/buffer-routine
    wait-for-routine 4:number/buffer-routine
    8:boolean <- channel-empty? 2:address:channel/buffered-stdin
    9:boolean/completed? <- not 8:boolean
    assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
    trace [test], [reached end]
  ]
parse: instruction: init-channel
parse:   ingredient: {name: "10", properties: ["10": "literal", "capacity": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel", "stdin": ]}
parse: instruction: init-channel
parse:   ingredient: {name: "10", properties: ["10": "literal", "capacity": ]}
parse:   product: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "3", properties: ["3": "boolean"]}
parse: instruction: assert
parse:   ingredient: {name: "3", properties: ["3": "boolean"]}
parse:   ingredient: {name: "
F buffer-lines-blocks-until-newline: channel should be empty after init", properties: ["
F buffer-lines-blocks-until-newline: channel should be empty after init": "literal-string"]}
parse: instruction: start-running
parse:   ingredient: {name: "buffer-lines", properties: ["buffer-lines": "recipe"]}
parse:   ingredient: {name: "1", properties: ["1": "address":"channel", "stdin": ]}
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "5", properties: ["5": "boolean"]}
parse: instruction: assert
parse:   ingredient: {name: "5", properties: ["5": "boolean"]}
parse:   ingredient: {name: "
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up", properties: ["
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up": "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "97", properties: ["97": "literal", "a": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "6", properties: ["6": "boolean"]}
parse: instruction: assert
parse:   ingredient: {name: "6", properties: ["6": "boolean"]}
parse:   ingredient: {name: "
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a'", properties: ["
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a'": "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "98", properties: ["98": "literal", "b": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "7", properties: ["7": "boolean"]}
parse: instruction: assert
parse:   ingredient: {name: "7", properties: ["7": "boolean"]}
parse:   ingredient: {name: "
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b'", properties: ["
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b'": "literal-string"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "10", properties: ["10": "literal", "newline": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: restart
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: wait-for-routine
parse:   ingredient: {name: "4", properties: ["4": "number", "buffer-routine": ]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "2", properties: ["2": "address":"channel", "buffered-stdin": ]}
parse:   product: {name: "8", properties: ["8": "boolean"]}
parse: instruction: not
parse:   ingredient: {name: "8", properties: ["8": "boolean"]}
parse:   product: {name: "9", properties: ["9": "boolean", "completed?": ]}
parse: instruction: assert
parse:   ingredient: {name: "9", properties: ["9": "boolean", "completed?": ]}
parse:   ingredient: {name: "
F buffer-lines-blocks-until-newline: channel should contain data after writing newline", properties: ["
F buffer-lines-blocks-until-newline: channel should contain data after writing newline": "literal-string"]}
parse: instruction: trace
parse:   ingredient: {name: "test", properties: ["test": "literal-string"]}
parse:   ingredient: {name: "reached end", properties: ["reached end": "literal-string"]}
after-brace: recipe run1001
after-brace: init-channel ...
after-brace: init-channel ...
after-brace: channel-empty? ...
after-brace: assert ...
after-brace: start-running ...
after-brace: wait-for-routine ...
after-brace: channel-empty? ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: channel-empty? ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: channel-empty? ...
after-brace: assert ...
after-brace: write ...
after-brace: restart ...
after-brace: wait-for-routine ...
after-brace: channel-empty? ...
after-brace: not ...
after-brace: assert ...
after-brace: trace ...
 101 run: 1:address:channel/stdin <- init-channel 10:literal/capacity
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1000
 102 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1031
9999 mem: storing 1031 in location 1002
 102 run: full:address:number <- get-address result:address:channel/deref, first-full:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 1003
 102 run: full:address:number/deref <- copy 0:literal
9999 mem: location 1003 is 1031
9999 mem: storing 0 in location 1031
 102 run: free:address:number <- get-address result:address:channel/deref, first-free:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1004
 102 run: free:address:number/deref <- copy 0:literal
9999 mem: location 1004 is 1032
9999 mem: storing 0 in location 1032
 102 run: capacity:number <- next-ingredient 
9999 mem: storing 10 in location 1005
 102 run: capacity:number <- add capacity:number, 1:literal
9999 mem: location 1005 is 10
9999 mem: storing 11 in location 1005
 102 run: dest:address:address:array:location <- get-address result:address:channel/deref, data:offset
9999 mem: location 1002 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 0
9999 mem: location 1002 is 1031
9999 run: address to copy is 1033
9999 mem: storing 1033 in location 1006
 102 run: dest:address:address:array:location/deref <- new location:type, capacity:number
9999 mem: location 1005 is 11
9999 mem: array size is 11
9999 mem: new alloc: 1034
9999 mem: location 1006 is 1033
9999 mem: storing 1034 in location 1033
 102 run: reply result:address:channel
9999 mem: location 1002 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 1
 101 run: 2:address:channel/buffered-stdin <- init-channel 10:literal/capacity
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1046
 102 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1077
9999 mem: storing 1077 in location 1048
 102 run: full:address:number <- get-address result:address:channel/deref, first-full:offset
9999 mem: location 1048 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1048 is 1077
9999 run: address to copy is 1077
9999 mem: storing 1077 in location 1049
 102 run: full:address:number/deref <- copy 0:literal
9999 mem: location 1049 is 1077
9999 mem: storing 0 in location 1077
 102 run: free:address:number <- get-address result:address:channel/deref, first-free:offset
9999 mem: location 1048 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1048 is 1077
9999 run: address to copy is 1078
9999 mem: storing 1078 in location 1050
 102 run: free:address:number/deref <- copy 0:literal
9999 mem: location 1050 is 1078
9999 mem: storing 0 in location 1078
 102 run: capacity:number <- next-ingredient 
9999 mem: storing 10 in location 1051
 102 run: capacity:number <- add capacity:number, 1:literal
9999 mem: location 1051 is 10
9999 mem: storing 11 in location 1051
 102 run: dest:address:address:array:location <- get-address result:address:channel/deref, data:offset
9999 mem: location 1048 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 0
9999 mem: location 1048 is 1077
9999 run: address to copy is 1079
9999 mem: storing 1079 in location 1052
 102 run: dest:address:address:array:location/deref <- new location:type, capacity:number
9999 mem: location 1051 is 11
9999 mem: array size is 11
9999 mem: new alloc: 1080
9999 mem: location 1052 is 1079
9999 mem: storing 1080 in location 1079
 102 run: reply result:address:channel
9999 mem: location 1048 is 1077
9999 run: result 0 is 1077
9999 mem: storing 1077 in location 2
 101 run: 3:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1077
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1092
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 1094
 102 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1094 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 1094 is 1077
9999 run: address to copy is 1077
9999 run: its type is 1
9999 mem: location 1077 is 0
9999 mem: storing 0 in location 1095
 102 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1094 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 1094 is 1077
9999 run: address to copy is 1078
9999 run: its type is 1
9999 mem: location 1078 is 0
9999 mem: storing 0 in location 1096
 102 run: result:boolean <- equal full:number, free:number
9999 mem: location 1095 is 0
9999 mem: location 1096 is 0
9999 mem: storing 1 in location 1097
 102 run: reply result:boolean
9999 mem: location 1097 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 3
 101 run: assert 3:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after init]
9999 mem: location 3 is 1
 101 run: 4:number/buffer-routine <- start-running buffer-lines:recipe, 1:address:channel/stdin, 2:address:channel/buffered-stdin
9999 mem: location 1 is 1031
9999 mem: location 2 is 1077
9999 new: routine allocated memory from 101000 to 201000
9999 mem: storing 2 in location 4
 101 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
schedule: buffer-lines
 101 run: default-space:address:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101000
 101 run: in:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 101002
 101 run: out:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 101003
 101 run: line:address:buffer <- init-buffer 30:literal
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101031
 102 run: result:address:buffer <- new buffer:type
9999 mem: new alloc: 101062
9999 mem: storing 101062 in location 101033
 102 run: len:address:number <- get-address result:address:buffer/deref, length:offset
9999 mem: location 101033 is 101062
9999 mem: location 101062 is 0
9999 mem: location 101063 is 0
9999 mem: location 101033 is 101062
9999 run: address to copy is 101062
9999 mem: storing 101062 in location 101034
 102 run: len:address:number/deref <- copy 0:literal
9999 mem: location 101034 is 101062
9999 mem: storing 0 in location 101062
 102 run: s:address:address:array:character <- get-address result:address:buffer/deref, data:offset
9999 mem: location 101033 is 101062
9999 mem: location 101062 is 0
9999 mem: location 101063 is 0
9999 mem: location 101033 is 101062
9999 run: address to copy is 101063
9999 mem: storing 101063 in location 101035
 102 run: capacity:number <- next-ingredient 
9999 mem: storing 30 in location 101036
 102 run: s:address:address:array:character/deref <- new character:type, capacity:number
9999 mem: location 101036 is 30
9999 mem: array size is 30
9999 mem: new alloc: 101064
9999 mem: location 101035 is 101063
9999 mem: storing 101064 in location 101063
 102 run: reply result:address:buffer
9999 mem: location 101033 is 101062
9999 run: result 0 is 101062
9999 mem: storing 101062 in location 101004
 101 run: c:character, in:address:channel <- read in:address:channel
9999 mem: location 101002 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101095
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 101097
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 101097 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101126
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 101128
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101128 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 101128 is 1031
9999 run: address to copy is 1031
9999 run: its type is 1
9999 mem: location 1031 is 0
9999 mem: storing 0 in location 101129
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101128 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 101128 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 0
9999 mem: storing 0 in location 101130
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 101129 is 0
9999 mem: location 101130 is 0
9999 mem: storing 1 in location 101131
 103 run: reply result:boolean
9999 mem: location 101131 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 101098
 102 run: break-unless empty:boolean, 
9999 mem: location 101098 is 1
9999 run: jump-unless fell through
 102 run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101097 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 101097 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 101099
 102 run: wait-for-location free-address:address:number/deref
9999 mem: location 101099 is 1032
9999 mem: location 1032 is 0
9999 mem: location 101099 is 1032
9999 run: waiting for location 1032 to change from 0
schedule: waking up routine 1
schedule: run1001/buffer-lines-blocks-until-newline
 102 run: 5:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1077
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1123
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 1125
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1125 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 1125 is 1077
9999 run: address to copy is 1077
9999 run: its type is 1
9999 mem: location 1077 is 0
9999 mem: storing 0 in location 1126
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1125 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 1125 is 1077
9999 run: address to copy is 1078
9999 run: its type is 1
9999 mem: location 1078 is 0
9999 mem: storing 0 in location 1127
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1126 is 0
9999 mem: location 1127 is 0
9999 mem: storing 1 in location 1128
 103 run: reply result:boolean
9999 mem: location 1128 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 5
 102 run: assert 5:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after buffer-lines bring-up]
9999 mem: location 5 is 1
 102 run: 1:address:channel <- write 1:address:channel, 97:literal/a
9999 mem: location 1 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1154
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1156
 103 run: val:location <- next-ingredient 
9999 mem: storing 97 in location 1157
 103 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1156 is 1031
 104 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1185
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1187
 104 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1187 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1187 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 0
9999 mem: storing 0 in location 1188
 104 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 1188 is 0
9999 mem: storing 1 in location 1188
 104 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1187 is 1031
 105 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1216
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1218
 105 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1218 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1218 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 1219
 105 run: result:number <- length q:address:array:location/deref
9999 mem: location 1219 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1219 is 1034
9999 mem: storing 11 in location 1220
 105 run: reply result:number
9999 mem: location 1220 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 1189
 104 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1188 is 1
9999 mem: location 1189 is 11
9999 mem: storing 0 in location 1190
 104 run: break-unless at-end?:boolean, 
9999 mem: location 1190 is 0
9999 run: jumping to instruction 9
 104 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1187 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1187 is 1031
9999 run: address to copy is 1031
9999 run: its type is 1
9999 mem: location 1031 is 0
9999 mem: storing 0 in location 1191
 104 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1191 is 0
9999 mem: location 1188 is 1
9999 mem: storing 0 in location 1192
 104 run: reply result:boolean
9999 mem: location 1192 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1158
 103 run: break-unless full:boolean, 
9999 mem: location 1158 is 0
9999 run: jumping to instruction 8
 103 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1156 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1156 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 1160
 103 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 1156 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1033 is 1034
9999 mem: location 1156 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1161
 103 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 1160 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1161 is 1032
9999 mem: location 1032 is 0
9999 mem: location 1160 is 1034
9999 mem: location 1161 is 1032
9999 mem: location 1032 is 0
9999 mem: storing 1035 in location 1162
 103 run: dest:address:location/deref <- copy val:location
9999 mem: location 1157 is 97
9999 mem: location 1162 is 1035
9999 mem: storing 97 in location 1035
 103 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 1161 is 1032
9999 mem: location 1032 is 0
9999 mem: location 1161 is 1032
9999 mem: storing 1 in location 1032
 103 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 1160 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1160 is 1034
9999 mem: storing 11 in location 1163
 103 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 1161 is 1032
9999 mem: location 1032 is 1
9999 mem: location 1163 is 11
9999 mem: storing 0 in location 1164
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1164 is 0
9999 run: jumping to instruction 19
 103 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1156 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 1
 102 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 102 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
schedule: read/buffer-lines
 102 run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
9999 mem: location 101097 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 101097 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 101100
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101097 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 101097 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 101101
 102 run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
9999 mem: location 101101 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 101100 is 1031
9999 mem: location 1031 is 0
9999 mem: location 101101 is 1034
9999 mem: location 101100 is 1031
9999 mem: location 1031 is 0
9999 run: address to copy is 1035
9999 run: its type is 1
9999 mem: location 1035 is 97
9999 mem: storing 97 in location 101102
 102 run: full:address:number/deref <- add full:address:number/deref, 1:literal
9999 mem: location 101100 is 1031
9999 mem: location 1031 is 0
9999 mem: location 101100 is 1031
9999 mem: storing 1 in location 1031
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 101101 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 101101 is 1034
9999 mem: storing 11 in location 101103
 102 run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
9999 mem: location 101100 is 1031
9999 mem: location 1031 is 1
9999 mem: location 101103 is 11
9999 mem: storing 0 in location 101104
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101104 is 0
9999 run: jumping to instruction 17
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 101102 is 97
9999 mem: location 101097 is 1031
9999 run: result 0 is 97
9999 run: result 1 is 1031
9999 mem: storing 97 in location 101005
9999 mem: storing 1031 in location 101002
 101 run: backspace?:boolean <- equal c:character, 8:literal
9999 mem: location 101005 is 97
9999 mem: storing 0 in location 101006
 101 run: break-unless backspace?:boolean, 
9999 mem: location 101006 is 0
9999 run: jumping to instruction 18
 101 run: line:address:buffer <- buffer-append line:address:buffer, c:character
9999 mem: location 101004 is 101062
9999 mem: location 101005 is 97
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101157
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101062 in location 101159
 102 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 101160
 102 run: len:address:number <- get-address in:address:buffer/deref, length:offset
9999 mem: location 101159 is 101062
9999 mem: location 101062 is 0
9999 mem: location 101063 is 101064
9999 mem: location 101159 is 101062
9999 run: address to copy is 101062
9999 mem: storing 101062 in location 101161
 102 run: backspace?:boolean <- equal c:character, 8:literal/backspace
9999 mem: location 101160 is 97
9999 mem: storing 0 in location 101162
 102 run: break-unless backspace?:boolean, 
9999 mem: location 101162 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 101159 is 101062
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101188
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101062 in location 101190
 103 run: len:number <- get in:address:buffer/deref, length:offset
9999 mem: location 101190 is 101062
9999 mem: location 101062 is 0
9999 mem: location 101063 is 101064
9999 mem: location 101190 is 101062
9999 run: address to copy is 101062
9999 run: its type is 1
9999 mem: location 101062 is 0
9999 mem: storing 0 in location 101191
 103 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 101190 is 101062
9999 mem: location 101062 is 0
9999 mem: location 101063 is 101064
9999 mem: location 101190 is 101062
9999 run: address to copy is 101063
9999 run: its type is 2
9999 mem: location 101063 is 101064
9999 mem: storing 101064 in location 101192
 103 run: capacity:number <- length s:address:array:character/deref
9999 mem: location 101192 is 101064
9999 mem: location 101064 is 30
9999 mem: location 101065 is 0
9999 mem: location 101066 is 0
9999 mem: location 101067 is 0
9999 mem: location 101068 is 0
9999 mem: location 101069 is 0
9999 mem: location 101070 is 0
9999 mem: location 101071 is 0
9999 mem: location 101072 is 0
9999 mem: location 101073 is 0
9999 mem: location 101074 is 0
9999 mem: location 101075 is 0
9999 mem: location 101076 is 0
9999 mem: location 101077 is 0
9999 mem: location 101078 is 0
9999 mem: location 101079 is 0
9999 mem: location 101080 is 0
9999 mem: location 101081 is 0
9999 mem: location 101082 is 0
9999 mem: location 101083 is 0
9999 mem: location 101084 is 0
9999 mem: location 101085 is 0
9999 mem: location 101086 is 0
9999 mem: location 101087 is 0
9999 mem: location 101088 is 0
9999 mem: location 101089 is 0
9999 mem: location 101090 is 0
9999 mem: location 101091 is 0
9999 mem: location 101092 is 0
9999 mem: location 101093 is 0
9999 mem: location 101094 is 0
9999 mem: location 101192 is 101064
9999 mem: storing 30 in location 101193
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 101191 is 0
9999 mem: location 101193 is 30
9999 mem: storing 0 in location 101194
 103 run: reply result:boolean
9999 mem: location 101194 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101164
 102 run: break-unless full?:boolean, 
9999 mem: location 101164 is 0
9999 run: jumping to instruction 17
 102 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 101159 is 101062
9999 mem: location 101062 is 0
9999 mem: location 101063 is 101064
9999 mem: location 101159 is 101062
9999 run: address to copy is 101063
9999 run: its type is 2
9999 mem: location 101063 is 101064
9999 mem: storing 101064 in location 101165
 102 run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
9999 mem: location 101165 is 101064
9999 mem: location 101064 is 30
9999 mem: location 101065 is 0
9999 mem: location 101066 is 0
9999 mem: location 101067 is 0
9999 mem: location 101068 is 0
9999 mem: location 101069 is 0
9999 mem: location 101070 is 0
9999 mem: location 101071 is 0
9999 mem: location 101072 is 0
9999 mem: location 101073 is 0
9999 mem: location 101074 is 0
9999 mem: location 101075 is 0
9999 mem: location 101076 is 0
9999 mem: location 101077 is 0
9999 mem: location 101078 is 0
9999 mem: location 101079 is 0
9999 mem: location 101080 is 0
9999 mem: location 101081 is 0
9999 mem: location 101082 is 0
9999 mem: location 101083 is 0
9999 mem: location 101084 is 0
9999 mem: location 101085 is 0
9999 mem: location 101086 is 0
9999 mem: location 101087 is 0
9999 mem: location 101088 is 0
9999 mem: location 101089 is 0
9999 mem: location 101090 is 0
9999 mem: location 101091 is 0
9999 mem: location 101092 is 0
9999 mem: location 101093 is 0
9999 mem: location 101094 is 0
9999 mem: location 101161 is 101062
9999 mem: location 101062 is 0
9999 mem: location 101165 is 101064
9999 mem: location 101161 is 101062
9999 mem: location 101062 is 0
9999 mem: storing 101065 in location 101166
 102 run: dest:address:character/deref <- copy c:character
9999 mem: location 101160 is 97
9999 mem: location 101166 is 101065
9999 mem: storing 97 in location 101065
 102 run: len:address:number/deref <- add len:address:number/deref, 1:literal
9999 mem: location 101161 is 101062
9999 mem: location 101062 is 0
9999 mem: location 101161 is 101062
9999 mem: storing 1 in location 101062
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 101159 is 101062
9999 run: result 0 is 101062
9999 mem: storing 101062 in location 101004
 101 run: line-done?:boolean <- equal c:character, 10:literal/newline
9999 mem: location 101005 is 97
9999 mem: storing 0 in location 101009
 101 run: break-if line-done?:boolean, 
9999 mem: location 101009 is 0
9999 run: jump-if fell through
 101 run: empty-fake-keyboard?:boolean <- equal c:character, 0:literal/eof
9999 mem: location 101005 is 97
9999 mem: storing 0 in location 101010
 101 run: break-if empty-fake-keyboard?:boolean, 
9999 mem: location 101010 is 0
9999 run: jump-if fell through
 101 run: loop 
9999 run: jumping to instruction 6
 101 run: c:character, in:address:channel <- read in:address:channel
9999 mem: location 101002 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101219
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 101221
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 101221 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101250
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 101252
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101252 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 101252 is 1031
9999 run: address to copy is 1031
9999 run: its type is 1
9999 mem: location 1031 is 1
9999 mem: storing 1 in location 101253
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101252 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 101252 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 1
9999 mem: storing 1 in location 101254
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 101253 is 1
9999 mem: location 101254 is 1
9999 mem: storing 1 in location 101255
 103 run: reply result:boolean
9999 mem: location 101255 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 101222
 102 run: break-unless empty:boolean, 
9999 mem: location 101222 is 1
9999 run: jump-unless fell through
 102 run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101221 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 101221 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 101223
 102 run: wait-for-location free-address:address:number/deref
9999 mem: location 101223 is 1032
9999 mem: location 1032 is 1
9999 mem: location 101223 is 1032
9999 run: waiting for location 1032 to change from 1
schedule: waking up routine 1
schedule: run1001/buffer-lines-blocks-until-newline
 102 run: 6:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1077
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1247
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 1249
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1249 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 1249 is 1077
9999 run: address to copy is 1077
9999 run: its type is 1
9999 mem: location 1077 is 0
9999 mem: storing 0 in location 1250
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1249 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 1249 is 1077
9999 run: address to copy is 1078
9999 run: its type is 1
9999 mem: location 1078 is 0
9999 mem: storing 0 in location 1251
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1250 is 0
9999 mem: location 1251 is 0
9999 mem: storing 1 in location 1252
 103 run: reply result:boolean
9999 mem: location 1252 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 6
 102 run: assert 6:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'a']
9999 mem: location 6 is 1
 102 run: 1:address:channel <- write 1:address:channel, 98:literal/b
9999 mem: location 1 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1278
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1280
 103 run: val:location <- next-ingredient 
9999 mem: storing 98 in location 1281
 103 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1280 is 1031
 104 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1309
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1311
 104 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1311 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1311 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 1
9999 mem: storing 1 in location 1312
 104 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 1312 is 1
9999 mem: storing 2 in location 1312
 104 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1311 is 1031
 105 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1340
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1342
 105 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1342 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1342 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 1343
 105 run: result:number <- length q:address:array:location/deref
9999 mem: location 1343 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1343 is 1034
9999 mem: storing 11 in location 1344
 105 run: reply result:number
9999 mem: location 1344 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 1313
 104 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1312 is 2
9999 mem: location 1313 is 11
9999 mem: storing 0 in location 1314
 104 run: break-unless at-end?:boolean, 
9999 mem: location 1314 is 0
9999 run: jumping to instruction 9
 104 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1311 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1311 is 1031
9999 run: address to copy is 1031
9999 run: its type is 1
9999 mem: location 1031 is 1
9999 mem: storing 1 in location 1315
 104 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1315 is 1
9999 mem: location 1312 is 2
9999 mem: storing 0 in location 1316
 104 run: reply result:boolean
9999 mem: location 1316 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1282
 103 run: break-unless full:boolean, 
9999 mem: location 1282 is 0
9999 run: jumping to instruction 8
 103 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1280 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1280 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 1284
 103 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 1280 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1
9999 mem: location 1033 is 1034
9999 mem: location 1280 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1285
 103 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 1284 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 0
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1285 is 1032
9999 mem: location 1032 is 1
9999 mem: location 1284 is 1034
9999 mem: location 1285 is 1032
9999 mem: location 1032 is 1
9999 mem: storing 1036 in location 1286
 103 run: dest:address:location/deref <- copy val:location
9999 mem: location 1281 is 98
9999 mem: location 1286 is 1036
9999 mem: storing 98 in location 1036
 103 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 1285 is 1032
9999 mem: location 1032 is 1
9999 mem: location 1285 is 1032
9999 mem: storing 2 in location 1032
 103 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 1284 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 98
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1284 is 1034
9999 mem: storing 11 in location 1287
 103 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 1285 is 1032
9999 mem: location 1032 is 2
9999 mem: location 1287 is 11
9999 mem: storing 0 in location 1288
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1288 is 0
9999 run: jumping to instruction 19
 103 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1280 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 1
 102 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 102 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
schedule: read/buffer-lines
 102 run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
9999 mem: location 101221 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 2
9999 mem: location 1033 is 1034
9999 mem: location 101221 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 101224
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101221 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1032 is 2
9999 mem: location 1033 is 1034
9999 mem: location 101221 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 101225
 102 run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
9999 mem: location 101225 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 98
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 101224 is 1031
9999 mem: location 1031 is 1
9999 mem: location 101225 is 1034
9999 mem: location 101224 is 1031
9999 mem: location 1031 is 1
9999 run: address to copy is 1036
9999 run: its type is 1
9999 mem: location 1036 is 98
9999 mem: storing 98 in location 101226
 102 run: full:address:number/deref <- add full:address:number/deref, 1:literal
9999 mem: location 101224 is 1031
9999 mem: location 1031 is 1
9999 mem: location 101224 is 1031
9999 mem: storing 2 in location 1031
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 101225 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 98
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 101225 is 1034
9999 mem: storing 11 in location 101227
 102 run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
9999 mem: location 101224 is 1031
9999 mem: location 1031 is 2
9999 mem: location 101227 is 11
9999 mem: storing 0 in location 101228
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101228 is 0
9999 run: jumping to instruction 17
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 101226 is 98
9999 mem: location 101221 is 1031
9999 run: result 0 is 98
9999 run: result 1 is 1031
9999 mem: storing 98 in location 101005
9999 mem: storing 1031 in location 101002
 101 run: backspace?:boolean <- equal c:character, 8:literal
9999 mem: location 101005 is 98
9999 mem: storing 0 in location 101006
 101 run: break-unless backspace?:boolean, 
9999 mem: location 101006 is 0
9999 run: jumping to instruction 18
 101 run: line:address:buffer <- buffer-append line:address:buffer, c:character
9999 mem: location 101004 is 101062
9999 mem: location 101005 is 98
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101281
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101062 in location 101283
 102 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 101284
 102 run: len:address:number <- get-address in:address:buffer/deref, length:offset
9999 mem: location 101283 is 101062
9999 mem: location 101062 is 1
9999 mem: location 101063 is 101064
9999 mem: location 101283 is 101062
9999 run: address to copy is 101062
9999 mem: storing 101062 in location 101285
 102 run: backspace?:boolean <- equal c:character, 8:literal/backspace
9999 mem: location 101284 is 98
9999 mem: storing 0 in location 101286
 102 run: break-unless backspace?:boolean, 
9999 mem: location 101286 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 101283 is 101062
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101312
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101062 in location 101314
 103 run: len:number <- get in:address:buffer/deref, length:offset
9999 mem: location 101314 is 101062
9999 mem: location 101062 is 1
9999 mem: location 101063 is 101064
9999 mem: location 101314 is 101062
9999 run: address to copy is 101062
9999 run: its type is 1
9999 mem: location 101062 is 1
9999 mem: storing 1 in location 101315
 103 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 101314 is 101062
9999 mem: location 101062 is 1
9999 mem: location 101063 is 101064
9999 mem: location 101314 is 101062
9999 run: address to copy is 101063
9999 run: its type is 2
9999 mem: location 101063 is 101064
9999 mem: storing 101064 in location 101316
 103 run: capacity:number <- length s:address:array:character/deref
9999 mem: location 101316 is 101064
9999 mem: location 101064 is 30
9999 mem: location 101065 is 97
9999 mem: location 101066 is 0
9999 mem: location 101067 is 0
9999 mem: location 101068 is 0
9999 mem: location 101069 is 0
9999 mem: location 101070 is 0
9999 mem: location 101071 is 0
9999 mem: location 101072 is 0
9999 mem: location 101073 is 0
9999 mem: location 101074 is 0
9999 mem: location 101075 is 0
9999 mem: location 101076 is 0
9999 mem: location 101077 is 0
9999 mem: location 101078 is 0
9999 mem: location 101079 is 0
9999 mem: location 101080 is 0
9999 mem: location 101081 is 0
9999 mem: location 101082 is 0
9999 mem: location 101083 is 0
9999 mem: location 101084 is 0
9999 mem: location 101085 is 0
9999 mem: location 101086 is 0
9999 mem: location 101087 is 0
9999 mem: location 101088 is 0
9999 mem: location 101089 is 0
9999 mem: location 101090 is 0
9999 mem: location 101091 is 0
9999 mem: location 101092 is 0
9999 mem: location 101093 is 0
9999 mem: location 101094 is 0
9999 mem: location 101316 is 101064
9999 mem: storing 30 in location 101317
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 101315 is 1
9999 mem: location 101317 is 30
9999 mem: storing 0 in location 101318
 103 run: reply result:boolean
9999 mem: location 101318 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101288
 102 run: break-unless full?:boolean, 
9999 mem: location 101288 is 0
9999 run: jumping to instruction 17
 102 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 101283 is 101062
9999 mem: location 101062 is 1
9999 mem: location 101063 is 101064
9999 mem: location 101283 is 101062
9999 run: address to copy is 101063
9999 run: its type is 2
9999 mem: location 101063 is 101064
9999 mem: storing 101064 in location 101289
 102 run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
9999 mem: location 101289 is 101064
9999 mem: location 101064 is 30
9999 mem: location 101065 is 97
9999 mem: location 101066 is 0
9999 mem: location 101067 is 0
9999 mem: location 101068 is 0
9999 mem: location 101069 is 0
9999 mem: location 101070 is 0
9999 mem: location 101071 is 0
9999 mem: location 101072 is 0
9999 mem: location 101073 is 0
9999 mem: location 101074 is 0
9999 mem: location 101075 is 0
9999 mem: location 101076 is 0
9999 mem: location 101077 is 0
9999 mem: location 101078 is 0
9999 mem: location 101079 is 0
9999 mem: location 101080 is 0
9999 mem: location 101081 is 0
9999 mem: location 101082 is 0
9999 mem: location 101083 is 0
9999 mem: location 101084 is 0
9999 mem: location 101085 is 0
9999 mem: location 101086 is 0
9999 mem: location 101087 is 0
9999 mem: location 101088 is 0
9999 mem: location 101089 is 0
9999 mem: location 101090 is 0
9999 mem: location 101091 is 0
9999 mem: location 101092 is 0
9999 mem: location 101093 is 0
9999 mem: location 101094 is 0
9999 mem: location 101285 is 101062
9999 mem: location 101062 is 1
9999 mem: location 101289 is 101064
9999 mem: location 101285 is 101062
9999 mem: location 101062 is 1
9999 mem: storing 101066 in location 101290
 102 run: dest:address:character/deref <- copy c:character
9999 mem: location 101284 is 98
9999 mem: location 101290 is 101066
9999 mem: storing 98 in location 101066
 102 run: len:address:number/deref <- add len:address:number/deref, 1:literal
9999 mem: location 101285 is 101062
9999 mem: location 101062 is 1
9999 mem: location 101285 is 101062
9999 mem: storing 2 in location 101062
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 101283 is 101062
9999 run: result 0 is 101062
9999 mem: storing 101062 in location 101004
 101 run: line-done?:boolean <- equal c:character, 10:literal/newline
9999 mem: location 101005 is 98
9999 mem: storing 0 in location 101009
 101 run: break-if line-done?:boolean, 
9999 mem: location 101009 is 0
9999 run: jump-if fell through
 101 run: empty-fake-keyboard?:boolean <- equal c:character, 0:literal/eof
9999 mem: location 101005 is 98
9999 mem: storing 0 in location 101010
 101 run: break-if empty-fake-keyboard?:boolean, 
9999 mem: location 101010 is 0
9999 run: jump-if fell through
 101 run: loop 
9999 run: jumping to instruction 6
 101 run: c:character, in:address:channel <- read in:address:channel
9999 mem: location 101002 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101343
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 101345
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 101345 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101374
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 101376
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101376 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 2
9999 mem: location 1033 is 1034
9999 mem: location 101376 is 1031
9999 run: address to copy is 1031
9999 run: its type is 1
9999 mem: location 1031 is 2
9999 mem: storing 2 in location 101377
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101376 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 2
9999 mem: location 1033 is 1034
9999 mem: location 101376 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 2
9999 mem: storing 2 in location 101378
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 101377 is 2
9999 mem: location 101378 is 2
9999 mem: storing 1 in location 101379
 103 run: reply result:boolean
9999 mem: location 101379 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 101346
 102 run: break-unless empty:boolean, 
9999 mem: location 101346 is 1
9999 run: jump-unless fell through
 102 run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101345 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 2
9999 mem: location 1033 is 1034
9999 mem: location 101345 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 101347
 102 run: wait-for-location free-address:address:number/deref
9999 mem: location 101347 is 1032
9999 mem: location 1032 is 2
9999 mem: location 101347 is 1032
9999 run: waiting for location 1032 to change from 2
schedule: waking up routine 1
schedule: run1001/buffer-lines-blocks-until-newline
 102 run: 7:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1077
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1371
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 1373
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1373 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 1373 is 1077
9999 run: address to copy is 1077
9999 run: its type is 1
9999 mem: location 1077 is 0
9999 mem: storing 0 in location 1374
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1373 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 1373 is 1077
9999 run: address to copy is 1078
9999 run: its type is 1
9999 mem: location 1078 is 0
9999 mem: storing 0 in location 1375
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1374 is 0
9999 mem: location 1375 is 0
9999 mem: storing 1 in location 1376
 103 run: reply result:boolean
9999 mem: location 1376 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 7
 102 run: assert 7:boolean, [
F buffer-lines-blocks-until-newline: channel should be empty after writing 'b']
9999 mem: location 7 is 1
 102 run: 1:address:channel <- write 1:address:channel, 10:literal/newline
9999 mem: location 1 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1402
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1404
 103 run: val:location <- next-ingredient 
9999 mem: storing 10 in location 1405
 103 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 1404 is 1031
 104 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1433
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1435
 104 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1435 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 2
9999 mem: location 1033 is 1034
9999 mem: location 1435 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 2
9999 mem: storing 2 in location 1436
 104 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 1436 is 2
9999 mem: storing 3 in location 1436
 104 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 1435 is 1031
 105 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1464
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 1466
 105 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1466 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 2
9999 mem: location 1033 is 1034
9999 mem: location 1466 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 1467
 105 run: result:number <- length q:address:array:location/deref
9999 mem: location 1467 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 98
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1467 is 1034
9999 mem: storing 11 in location 1468
 105 run: reply result:number
9999 mem: location 1468 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 1437
 104 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 1436 is 3
9999 mem: location 1437 is 11
9999 mem: storing 0 in location 1438
 104 run: break-unless at-end?:boolean, 
9999 mem: location 1438 is 0
9999 run: jumping to instruction 9
 104 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1435 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 2
9999 mem: location 1033 is 1034
9999 mem: location 1435 is 1031
9999 run: address to copy is 1031
9999 run: its type is 1
9999 mem: location 1031 is 2
9999 mem: storing 2 in location 1439
 104 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 1439 is 2
9999 mem: location 1436 is 3
9999 mem: storing 0 in location 1440
 104 run: reply result:boolean
9999 mem: location 1440 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1406
 103 run: break-unless full:boolean, 
9999 mem: location 1406 is 0
9999 run: jumping to instruction 8
 103 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 1404 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 2
9999 mem: location 1033 is 1034
9999 mem: location 1404 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 1408
 103 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 1404 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 2
9999 mem: location 1033 is 1034
9999 mem: location 1404 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 1409
 103 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 1408 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 98
9999 mem: location 1037 is 0
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1409 is 1032
9999 mem: location 1032 is 2
9999 mem: location 1408 is 1034
9999 mem: location 1409 is 1032
9999 mem: location 1032 is 2
9999 mem: storing 1037 in location 1410
 103 run: dest:address:location/deref <- copy val:location
9999 mem: location 1405 is 10
9999 mem: location 1410 is 1037
9999 mem: storing 10 in location 1037
 103 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 1409 is 1032
9999 mem: location 1032 is 2
9999 mem: location 1409 is 1032
9999 mem: storing 3 in location 1032
 103 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 1408 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 98
9999 mem: location 1037 is 10
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 1408 is 1034
9999 mem: storing 11 in location 1411
 103 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 1409 is 1032
9999 mem: location 1032 is 3
9999 mem: location 1411 is 11
9999 mem: storing 0 in location 1412
 103 run: break-unless at-end?:boolean, 
9999 mem: location 1412 is 0
9999 run: jumping to instruction 19
 103 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 1404 is 1031
9999 run: result 0 is 1031
9999 mem: storing 1031 in location 1
 102 run: restart 4:number/buffer-routine
9999 mem: location 4 is 2
 102 run: wait-for-routine 4:number/buffer-routine
9999 mem: location 4 is 2
9999 run: waiting for routine 2
schedule: read/buffer-lines
 102 run: full:address:number <- get-address chan:address:channel/deref, first-full:offset
9999 mem: location 101345 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 1034
9999 mem: location 101345 is 1031
9999 run: address to copy is 1031
9999 mem: storing 1031 in location 101348
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101345 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1032 is 3
9999 mem: location 1033 is 1034
9999 mem: location 101345 is 1031
9999 run: address to copy is 1033
9999 run: its type is 2
9999 mem: location 1033 is 1034
9999 mem: storing 1034 in location 101349
 102 run: result:location <- index circular-buffer:address:array:location/deref, full:address:number/deref
9999 mem: location 101349 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 98
9999 mem: location 1037 is 10
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 101348 is 1031
9999 mem: location 1031 is 2
9999 mem: location 101349 is 1034
9999 mem: location 101348 is 1031
9999 mem: location 1031 is 2
9999 run: address to copy is 1037
9999 run: its type is 1
9999 mem: location 1037 is 10
9999 mem: storing 10 in location 101350
 102 run: full:address:number/deref <- add full:address:number/deref, 1:literal
9999 mem: location 101348 is 1031
9999 mem: location 1031 is 2
9999 mem: location 101348 is 1031
9999 mem: storing 3 in location 1031
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 101349 is 1034
9999 mem: location 1034 is 11
9999 mem: location 1035 is 97
9999 mem: location 1036 is 98
9999 mem: location 1037 is 10
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1042 is 0
9999 mem: location 1043 is 0
9999 mem: location 1044 is 0
9999 mem: location 1045 is 0
9999 mem: location 101349 is 1034
9999 mem: storing 11 in location 101351
 102 run: at-end?:boolean <- greater-or-equal full:address:number/deref, len:number
9999 mem: location 101348 is 1031
9999 mem: location 1031 is 3
9999 mem: location 101351 is 11
9999 mem: storing 0 in location 101352
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101352 is 0
9999 run: jumping to instruction 17
 102 run: reply result:location, chan:address:channel/same-as-ingredient:0
9999 mem: location 101350 is 10
9999 mem: location 101345 is 1031
9999 run: result 0 is 10
9999 run: result 1 is 1031
9999 mem: storing 10 in location 101005
9999 mem: storing 1031 in location 101002
 101 run: backspace?:boolean <- equal c:character, 8:literal
9999 mem: location 101005 is 10
9999 mem: storing 0 in location 101006
 101 run: break-unless backspace?:boolean, 
9999 mem: location 101006 is 0
9999 run: jumping to instruction 18
 101 run: line:address:buffer <- buffer-append line:address:buffer, c:character
9999 mem: location 101004 is 101062
9999 mem: location 101005 is 10
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101405
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101062 in location 101407
 102 run: c:character <- next-ingredient 
9999 mem: storing 10 in location 101408
 102 run: len:address:number <- get-address in:address:buffer/deref, length:offset
9999 mem: location 101407 is 101062
9999 mem: location 101062 is 2
9999 mem: location 101063 is 101064
9999 mem: location 101407 is 101062
9999 run: address to copy is 101062
9999 mem: storing 101062 in location 101409
 102 run: backspace?:boolean <- equal c:character, 8:literal/backspace
9999 mem: location 101408 is 10
9999 mem: storing 0 in location 101410
 102 run: break-unless backspace?:boolean, 
9999 mem: location 101410 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 101407 is 101062
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101436
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 101062 in location 101438
 103 run: len:number <- get in:address:buffer/deref, length:offset
9999 mem: location 101438 is 101062
9999 mem: location 101062 is 2
9999 mem: location 101063 is 101064
9999 mem: location 101438 is 101062
9999 run: address to copy is 101062
9999 run: its type is 1
9999 mem: location 101062 is 2
9999 mem: storing 2 in location 101439
 103 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 101438 is 101062
9999 mem: location 101062 is 2
9999 mem: location 101063 is 101064
9999 mem: location 101438 is 101062
9999 run: address to copy is 101063
9999 run: its type is 2
9999 mem: location 101063 is 101064
9999 mem: storing 101064 in location 101440
 103 run: capacity:number <- length s:address:array:character/deref
9999 mem: location 101440 is 101064
9999 mem: location 101064 is 30
9999 mem: location 101065 is 97
9999 mem: location 101066 is 98
9999 mem: location 101067 is 0
9999 mem: location 101068 is 0
9999 mem: location 101069 is 0
9999 mem: location 101070 is 0
9999 mem: location 101071 is 0
9999 mem: location 101072 is 0
9999 mem: location 101073 is 0
9999 mem: location 101074 is 0
9999 mem: location 101075 is 0
9999 mem: location 101076 is 0
9999 mem: location 101077 is 0
9999 mem: location 101078 is 0
9999 mem: location 101079 is 0
9999 mem: location 101080 is 0
9999 mem: location 101081 is 0
9999 mem: location 101082 is 0
9999 mem: location 101083 is 0
9999 mem: location 101084 is 0
9999 mem: location 101085 is 0
9999 mem: location 101086 is 0
9999 mem: location 101087 is 0
9999 mem: location 101088 is 0
9999 mem: location 101089 is 0
9999 mem: location 101090 is 0
9999 mem: location 101091 is 0
9999 mem: location 101092 is 0
9999 mem: location 101093 is 0
9999 mem: location 101094 is 0
9999 mem: location 101440 is 101064
9999 mem: storing 30 in location 101441
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 101439 is 2
9999 mem: location 101441 is 30
9999 mem: storing 0 in location 101442
 103 run: reply result:boolean
9999 mem: location 101442 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101412
 102 run: break-unless full?:boolean, 
9999 mem: location 101412 is 0
9999 run: jumping to instruction 17
 102 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 101407 is 101062
9999 mem: location 101062 is 2
9999 mem: location 101063 is 101064
9999 mem: location 101407 is 101062
9999 run: address to copy is 101063
9999 run: its type is 2
9999 mem: location 101063 is 101064
9999 mem: storing 101064 in location 101413
 102 run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
9999 mem: location 101413 is 101064
9999 mem: location 101064 is 30
9999 mem: location 101065 is 97
9999 mem: location 101066 is 98
9999 mem: location 101067 is 0
9999 mem: location 101068 is 0
9999 mem: location 101069 is 0
9999 mem: location 101070 is 0
9999 mem: location 101071 is 0
9999 mem: location 101072 is 0
9999 mem: location 101073 is 0
9999 mem: location 101074 is 0
9999 mem: location 101075 is 0
9999 mem: location 101076 is 0
9999 mem: location 101077 is 0
9999 mem: location 101078 is 0
9999 mem: location 101079 is 0
9999 mem: location 101080 is 0
9999 mem: location 101081 is 0
9999 mem: location 101082 is 0
9999 mem: location 101083 is 0
9999 mem: location 101084 is 0
9999 mem: location 101085 is 0
9999 mem: location 101086 is 0
9999 mem: location 101087 is 0
9999 mem: location 101088 is 0
9999 mem: location 101089 is 0
9999 mem: location 101090 is 0
9999 mem: location 101091 is 0
9999 mem: location 101092 is 0
9999 mem: location 101093 is 0
9999 mem: location 101094 is 0
9999 mem: location 101409 is 101062
9999 mem: location 101062 is 2
9999 mem: location 101413 is 101064
9999 mem: location 101409 is 101062
9999 mem: location 101062 is 2
9999 mem: storing 101067 in location 101414
 102 run: dest:address:character/deref <- copy c:character
9999 mem: location 101408 is 10
9999 mem: location 101414 is 101067
9999 mem: storing 10 in location 101067
 102 run: len:address:number/deref <- add len:address:number/deref, 1:literal
9999 mem: location 101409 is 101062
9999 mem: location 101062 is 2
9999 mem: location 101409 is 101062
9999 mem: storing 3 in location 101062
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 101407 is 101062
9999 run: result 0 is 101062
9999 mem: storing 101062 in location 101004
 101 run: line-done?:boolean <- equal c:character, 10:literal/newline
9999 mem: location 101005 is 10
9999 mem: storing 1 in location 101009
 101 run: break-if line-done?:boolean, 
9999 mem: location 101009 is 1
9999 run: jumping to instruction 25
 101 run: i:number <- copy 0:literal
9999 mem: storing 0 in location 101011
 101 run: line-contents:address:array:character <- get line:address:buffer/deref, data:offset
9999 mem: location 101004 is 101062
9999 mem: location 101062 is 3
9999 mem: location 101063 is 101064
9999 mem: location 101004 is 101062
9999 run: address to copy is 101063
9999 run: its type is 2
9999 mem: location 101063 is 101064
9999 mem: storing 101064 in location 101012
 101 run: max:number <- get line:address:buffer/deref, length:offset
9999 mem: location 101004 is 101062
9999 mem: location 101062 is 3
9999 mem: location 101063 is 101064
9999 mem: location 101004 is 101062
9999 run: address to copy is 101062
9999 run: its type is 1
9999 mem: location 101062 is 3
9999 mem: storing 3 in location 101013
 101 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 101011 is 0
9999 mem: location 101013 is 3
9999 mem: storing 0 in location 101014
 101 run: break-if done?:boolean, 
9999 mem: location 101014 is 0
9999 run: jump-if fell through
 101 run: c:character <- index line-contents:address:array:character/deref, i:number
9999 mem: location 101012 is 101064
9999 mem: location 101064 is 30
9999 mem: location 101065 is 97
9999 mem: location 101066 is 98
9999 mem: location 101067 is 10
9999 mem: location 101068 is 0
9999 mem: location 101069 is 0
9999 mem: location 101070 is 0
9999 mem: location 101071 is 0
9999 mem: location 101072 is 0
9999 mem: location 101073 is 0
9999 mem: location 101074 is 0
9999 mem: location 101075 is 0
9999 mem: location 101076 is 0
9999 mem: location 101077 is 0
9999 mem: location 101078 is 0
9999 mem: location 101079 is 0
9999 mem: location 101080 is 0
9999 mem: location 101081 is 0
9999 mem: location 101082 is 0
9999 mem: location 101083 is 0
9999 mem: location 101084 is 0
9999 mem: location 101085 is 0
9999 mem: location 101086 is 0
9999 mem: location 101087 is 0
9999 mem: location 101088 is 0
9999 mem: location 101089 is 0
9999 mem: location 101090 is 0
9999 mem: location 101091 is 0
9999 mem: location 101092 is 0
9999 mem: location 101093 is 0
9999 mem: location 101094 is 0
9999 mem: location 101011 is 0
9999 mem: location 101012 is 101064
9999 mem: location 101011 is 0
9999 run: address to copy is 101065
9999 run: its type is 4
9999 mem: location 101065 is 97
9999 mem: storing 97 in location 101005
 101 run: out:address:channel <- write out:address:channel, c:character
9999 mem: location 101003 is 1077
9999 mem: location 101005 is 97
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101467
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 101469
 102 run: val:location <- next-ingredient 
9999 mem: storing 97 in location 101470
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 101469 is 1077
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101498
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 101500
 103 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101500 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 101500 is 1077
9999 run: address to copy is 1078
9999 run: its type is 1
9999 mem: location 1078 is 0
9999 mem: storing 0 in location 101501
 103 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 101501 is 0
9999 mem: storing 1 in location 101501
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 101500 is 1077
 104 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101529
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 101531
 104 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101531 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 101531 is 1077
9999 run: address to copy is 1079
9999 run: its type is 2
9999 mem: location 1079 is 1080
9999 mem: storing 1080 in location 101532
 104 run: result:number <- length q:address:array:location/deref
9999 mem: location 101532 is 1080
9999 mem: location 1080 is 11
9999 mem: location 1081 is 0
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 101532 is 1080
9999 mem: storing 11 in location 101533
 104 run: reply result:number
9999 mem: location 101533 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 101502
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 101501 is 1
9999 mem: location 101502 is 11
9999 mem: storing 0 in location 101503
 103 run: break-unless at-end?:boolean, 
9999 mem: location 101503 is 0
9999 run: jumping to instruction 9
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101500 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 101500 is 1077
9999 run: address to copy is 1077
9999 run: its type is 1
9999 mem: location 1077 is 0
9999 mem: storing 0 in location 101504
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 101504 is 0
9999 mem: location 101501 is 1
9999 mem: storing 0 in location 101505
 103 run: reply result:boolean
9999 mem: location 101505 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101471
 102 run: break-unless full:boolean, 
9999 mem: location 101471 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101469 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 101469 is 1077
9999 run: address to copy is 1079
9999 run: its type is 2
9999 mem: location 1079 is 1080
9999 mem: storing 1080 in location 101473
 102 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101469 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 0
9999 mem: location 1079 is 1080
9999 mem: location 101469 is 1077
9999 run: address to copy is 1078
9999 mem: storing 1078 in location 101474
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 101473 is 1080
9999 mem: location 1080 is 11
9999 mem: location 1081 is 0
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 101474 is 1078
9999 mem: location 1078 is 0
9999 mem: location 101473 is 1080
9999 mem: location 101474 is 1078
9999 mem: location 1078 is 0
9999 mem: storing 1081 in location 101475
 102 run: dest:address:location/deref <- copy val:location
9999 mem: location 101470 is 97
9999 mem: location 101475 is 1081
9999 mem: storing 97 in location 1081
 102 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 101474 is 1078
9999 mem: location 1078 is 0
9999 mem: location 101474 is 1078
9999 mem: storing 1 in location 1078
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 101473 is 1080
9999 mem: location 1080 is 11
9999 mem: location 1081 is 97
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 101473 is 1080
9999 mem: storing 11 in location 101476
 102 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 101474 is 1078
9999 mem: location 1078 is 1
9999 mem: location 101476 is 11
9999 mem: storing 0 in location 101477
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101477 is 0
9999 run: jumping to instruction 19
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 101469 is 1077
9999 run: result 0 is 1077
9999 mem: storing 1077 in location 101003
 101 run: i:number <- add i:number, 1:literal
9999 mem: location 101011 is 0
9999 mem: storing 1 in location 101011
 101 run: loop 
9999 run: jumping to instruction 30
 101 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 101011 is 1
9999 mem: location 101013 is 3
9999 mem: storing 0 in location 101014
 101 run: break-if done?:boolean, 
9999 mem: location 101014 is 0
9999 run: jump-if fell through
 101 run: c:character <- index line-contents:address:array:character/deref, i:number
9999 mem: location 101012 is 101064
9999 mem: location 101064 is 30
9999 mem: location 101065 is 97
9999 mem: location 101066 is 98
9999 mem: location 101067 is 10
9999 mem: location 101068 is 0
9999 mem: location 101069 is 0
9999 mem: location 101070 is 0
9999 mem: location 101071 is 0
9999 mem: location 101072 is 0
9999 mem: location 101073 is 0
9999 mem: location 101074 is 0
9999 mem: location 101075 is 0
9999 mem: location 101076 is 0
9999 mem: location 101077 is 0
9999 mem: location 101078 is 0
9999 mem: location 101079 is 0
9999 mem: location 101080 is 0
9999 mem: location 101081 is 0
9999 mem: location 101082 is 0
9999 mem: location 101083 is 0
9999 mem: location 101084 is 0
9999 mem: location 101085 is 0
9999 mem: location 101086 is 0
9999 mem: location 101087 is 0
9999 mem: location 101088 is 0
9999 mem: location 101089 is 0
9999 mem: location 101090 is 0
9999 mem: location 101091 is 0
9999 mem: location 101092 is 0
9999 mem: location 101093 is 0
9999 mem: location 101094 is 0
9999 mem: location 101011 is 1
9999 mem: location 101012 is 101064
9999 mem: location 101011 is 1
9999 run: address to copy is 101066
9999 run: its type is 4
9999 mem: location 101066 is 98
9999 mem: storing 98 in location 101005
 101 run: out:address:channel <- write out:address:channel, c:character
9999 mem: location 101003 is 1077
9999 mem: location 101005 is 98
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101560
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 101562
 102 run: val:location <- next-ingredient 
9999 mem: storing 98 in location 101563
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 101562 is 1077
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101591
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 101593
 103 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101593 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 1
9999 mem: location 1079 is 1080
9999 mem: location 101593 is 1077
9999 run: address to copy is 1078
9999 run: its type is 1
9999 mem: location 1078 is 1
9999 mem: storing 1 in location 101594
 103 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 101594 is 1
9999 mem: storing 2 in location 101594
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 101593 is 1077
 104 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101622
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 101624
 104 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101624 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 1
9999 mem: location 1079 is 1080
9999 mem: location 101624 is 1077
9999 run: address to copy is 1079
9999 run: its type is 2
9999 mem: location 1079 is 1080
9999 mem: storing 1080 in location 101625
 104 run: result:number <- length q:address:array:location/deref
9999 mem: location 101625 is 1080
9999 mem: location 1080 is 11
9999 mem: location 1081 is 97
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 101625 is 1080
9999 mem: storing 11 in location 101626
 104 run: reply result:number
9999 mem: location 101626 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 101595
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 101594 is 2
9999 mem: location 101595 is 11
9999 mem: storing 0 in location 101596
 103 run: break-unless at-end?:boolean, 
9999 mem: location 101596 is 0
9999 run: jumping to instruction 9
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101593 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 1
9999 mem: location 1079 is 1080
9999 mem: location 101593 is 1077
9999 run: address to copy is 1077
9999 run: its type is 1
9999 mem: location 1077 is 0
9999 mem: storing 0 in location 101597
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 101597 is 0
9999 mem: location 101594 is 2
9999 mem: storing 0 in location 101598
 103 run: reply result:boolean
9999 mem: location 101598 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101564
 102 run: break-unless full:boolean, 
9999 mem: location 101564 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101562 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 1
9999 mem: location 1079 is 1080
9999 mem: location 101562 is 1077
9999 run: address to copy is 1079
9999 run: its type is 2
9999 mem: location 1079 is 1080
9999 mem: storing 1080 in location 101566
 102 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101562 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 1
9999 mem: location 1079 is 1080
9999 mem: location 101562 is 1077
9999 run: address to copy is 1078
9999 mem: storing 1078 in location 101567
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 101566 is 1080
9999 mem: location 1080 is 11
9999 mem: location 1081 is 97
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 101567 is 1078
9999 mem: location 1078 is 1
9999 mem: location 101566 is 1080
9999 mem: location 101567 is 1078
9999 mem: location 1078 is 1
9999 mem: storing 1082 in location 101568
 102 run: dest:address:location/deref <- copy val:location
9999 mem: location 101563 is 98
9999 mem: location 101568 is 1082
9999 mem: storing 98 in location 1082
 102 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 101567 is 1078
9999 mem: location 1078 is 1
9999 mem: location 101567 is 1078
9999 mem: storing 2 in location 1078
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 101566 is 1080
9999 mem: location 1080 is 11
9999 mem: location 1081 is 97
9999 mem: location 1082 is 98
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 101566 is 1080
9999 mem: storing 11 in location 101569
 102 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 101567 is 1078
9999 mem: location 1078 is 2
9999 mem: location 101569 is 11
9999 mem: storing 0 in location 101570
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101570 is 0
9999 run: jumping to instruction 19
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 101562 is 1077
9999 run: result 0 is 1077
9999 mem: storing 1077 in location 101003
 101 run: i:number <- add i:number, 1:literal
9999 mem: location 101011 is 1
9999 mem: storing 2 in location 101011
 101 run: loop 
9999 run: jumping to instruction 30
 101 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 101011 is 2
9999 mem: location 101013 is 3
9999 mem: storing 0 in location 101014
 101 run: break-if done?:boolean, 
9999 mem: location 101014 is 0
9999 run: jump-if fell through
 101 run: c:character <- index line-contents:address:array:character/deref, i:number
9999 mem: location 101012 is 101064
9999 mem: location 101064 is 30
9999 mem: location 101065 is 97
9999 mem: location 101066 is 98
9999 mem: location 101067 is 10
9999 mem: location 101068 is 0
9999 mem: location 101069 is 0
9999 mem: location 101070 is 0
9999 mem: location 101071 is 0
9999 mem: location 101072 is 0
9999 mem: location 101073 is 0
9999 mem: location 101074 is 0
9999 mem: location 101075 is 0
9999 mem: location 101076 is 0
9999 mem: location 101077 is 0
9999 mem: location 101078 is 0
9999 mem: location 101079 is 0
9999 mem: location 101080 is 0
9999 mem: location 101081 is 0
9999 mem: location 101082 is 0
9999 mem: location 101083 is 0
9999 mem: location 101084 is 0
9999 mem: location 101085 is 0
9999 mem: location 101086 is 0
9999 mem: location 101087 is 0
9999 mem: location 101088 is 0
9999 mem: location 101089 is 0
9999 mem: location 101090 is 0
9999 mem: location 101091 is 0
9999 mem: location 101092 is 0
9999 mem: location 101093 is 0
9999 mem: location 101094 is 0
9999 mem: location 101011 is 2
9999 mem: location 101012 is 101064
9999 mem: location 101011 is 2
9999 run: address to copy is 101067
9999 run: its type is 4
9999 mem: location 101067 is 10
9999 mem: storing 10 in location 101005
 101 run: out:address:channel <- write out:address:channel, c:character
9999 mem: location 101003 is 1077
9999 mem: location 101005 is 10
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101653
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 101655
 102 run: val:location <- next-ingredient 
9999 mem: storing 10 in location 101656
 102 run: full:boolean <- channel-full? chan:address:channel
9999 mem: location 101655 is 1077
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101684
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 101686
 103 run: tmp:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101686 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 2
9999 mem: location 1079 is 1080
9999 mem: location 101686 is 1077
9999 run: address to copy is 1078
9999 run: its type is 1
9999 mem: location 1078 is 2
9999 mem: storing 2 in location 101687
 103 run: tmp:number <- add tmp:number, 1:literal
9999 mem: location 101687 is 2
9999 mem: storing 3 in location 101687
 103 run: len:number <- channel-capacity chan:address:channel
9999 mem: location 101686 is 1077
 104 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101715
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 101717
 104 run: q:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101717 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 2
9999 mem: location 1079 is 1080
9999 mem: location 101717 is 1077
9999 run: address to copy is 1079
9999 run: its type is 2
9999 mem: location 1079 is 1080
9999 mem: storing 1080 in location 101718
 104 run: result:number <- length q:address:array:location/deref
9999 mem: location 101718 is 1080
9999 mem: location 1080 is 11
9999 mem: location 1081 is 97
9999 mem: location 1082 is 98
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 101718 is 1080
9999 mem: storing 11 in location 101719
 104 run: reply result:number
9999 mem: location 101719 is 11
9999 run: result 0 is 11
9999 mem: storing 11 in location 101688
 103 run: at-end?:boolean <- greater-or-equal tmp:number, len:number
9999 mem: location 101687 is 3
9999 mem: location 101688 is 11
9999 mem: storing 0 in location 101689
 103 run: break-unless at-end?:boolean, 
9999 mem: location 101689 is 0
9999 run: jumping to instruction 9
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101686 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 2
9999 mem: location 1079 is 1080
9999 mem: location 101686 is 1077
9999 run: address to copy is 1077
9999 run: its type is 1
9999 mem: location 1077 is 0
9999 mem: storing 0 in location 101690
 103 run: result:boolean <- equal full:number, tmp:number
9999 mem: location 101690 is 0
9999 mem: location 101687 is 3
9999 mem: storing 0 in location 101691
 103 run: reply result:boolean
9999 mem: location 101691 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 101657
 102 run: break-unless full:boolean, 
9999 mem: location 101657 is 0
9999 run: jumping to instruction 8
 102 run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
9999 mem: location 101655 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 2
9999 mem: location 1079 is 1080
9999 mem: location 101655 is 1077
9999 run: address to copy is 1079
9999 run: its type is 2
9999 mem: location 1079 is 1080
9999 mem: storing 1080 in location 101659
 102 run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101655 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 2
9999 mem: location 1079 is 1080
9999 mem: location 101655 is 1077
9999 run: address to copy is 1078
9999 mem: storing 1078 in location 101660
 102 run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
9999 mem: location 101659 is 1080
9999 mem: location 1080 is 11
9999 mem: location 1081 is 97
9999 mem: location 1082 is 98
9999 mem: location 1083 is 0
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 101660 is 1078
9999 mem: location 1078 is 2
9999 mem: location 101659 is 1080
9999 mem: location 101660 is 1078
9999 mem: location 1078 is 2
9999 mem: storing 1083 in location 101661
 102 run: dest:address:location/deref <- copy val:location
9999 mem: location 101656 is 10
9999 mem: location 101661 is 1083
9999 mem: storing 10 in location 1083
 102 run: free:address:number/deref <- add free:address:number/deref, 1:literal
9999 mem: location 101660 is 1078
9999 mem: location 1078 is 2
9999 mem: location 101660 is 1078
9999 mem: storing 3 in location 1078
 102 run: len:number <- length circular-buffer:address:array:location/deref
9999 mem: location 101659 is 1080
9999 mem: location 1080 is 11
9999 mem: location 1081 is 97
9999 mem: location 1082 is 98
9999 mem: location 1083 is 10
9999 mem: location 1084 is 0
9999 mem: location 1085 is 0
9999 mem: location 1086 is 0
9999 mem: location 1087 is 0
9999 mem: location 1088 is 0
9999 mem: location 1089 is 0
9999 mem: location 1090 is 0
9999 mem: location 1091 is 0
9999 mem: location 101659 is 1080
9999 mem: storing 11 in location 101662
 102 run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
9999 mem: location 101660 is 1078
9999 mem: location 1078 is 3
9999 mem: location 101662 is 11
9999 mem: storing 0 in location 101663
 102 run: break-unless at-end?:boolean, 
9999 mem: location 101663 is 0
9999 run: jumping to instruction 19
 102 run: reply chan:address:channel/same-as-ingredient:0
9999 mem: location 101655 is 1077
9999 run: result 0 is 1077
9999 mem: storing 1077 in location 101003
 101 run: i:number <- add i:number, 1:literal
9999 mem: location 101011 is 2
9999 mem: storing 3 in location 101011
 101 run: loop 
9999 run: jumping to instruction 30
 101 run: done?:boolean <- greater-or-equal i:number, max:number
9999 mem: location 101011 is 3
9999 mem: location 101013 is 3
9999 mem: storing 1 in location 101014
 101 run: break-if done?:boolean, 
9999 mem: location 101014 is 1
9999 run: jumping to instruction 36
 101 run: loop 
9999 run: jumping to instruction 4
 101 run: line:address:buffer <- init-buffer 30:literal
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101746
 102 run: result:address:buffer <- new buffer:type
9999 mem: new alloc: 101777
9999 mem: storing 101777 in location 101748
 102 run: len:address:number <- get-address result:address:buffer/deref, length:offset
9999 mem: location 101748 is 101777
9999 mem: location 101777 is 0
9999 mem: location 101778 is 0
9999 mem: location 101748 is 101777
9999 run: address to copy is 101777
9999 mem: storing 101777 in location 101749
 102 run: len:address:number/deref <- copy 0:literal
9999 mem: location 101749 is 101777
9999 mem: storing 0 in location 101777
 102 run: s:address:address:array:character <- get-address result:address:buffer/deref, data:offset
9999 mem: location 101748 is 101777
9999 mem: location 101777 is 0
9999 mem: location 101778 is 0
9999 mem: location 101748 is 101777
9999 run: address to copy is 101778
9999 mem: storing 101778 in location 101750
 102 run: capacity:number <- next-ingredient 
9999 mem: storing 30 in location 101751
 102 run: s:address:address:array:character/deref <- new character:type, capacity:number
9999 mem: location 101751 is 30
9999 mem: array size is 30
9999 mem: new alloc: 101779
9999 mem: location 101750 is 101778
9999 mem: storing 101779 in location 101778
 102 run: reply result:address:buffer
9999 mem: location 101748 is 101777
9999 run: result 0 is 101777
9999 mem: storing 101777 in location 101004
 101 run: c:character, in:address:channel <- read in:address:channel
9999 mem: location 101002 is 1031
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101810
 102 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 101812
 102 run: empty:boolean <- channel-empty? chan:address:channel
9999 mem: location 101812 is 1031
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 101841
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1031 in location 101843
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 101843 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 3
9999 mem: location 1033 is 1034
9999 mem: location 101843 is 1031
9999 run: address to copy is 1031
9999 run: its type is 1
9999 mem: location 1031 is 3
9999 mem: storing 3 in location 101844
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 101843 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 3
9999 mem: location 1033 is 1034
9999 mem: location 101843 is 1031
9999 run: address to copy is 1032
9999 run: its type is 1
9999 mem: location 1032 is 3
9999 mem: storing 3 in location 101845
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 101844 is 3
9999 mem: location 101845 is 3
9999 mem: storing 1 in location 101846
 103 run: reply result:boolean
9999 mem: location 101846 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 101813
 102 run: break-unless empty:boolean, 
9999 mem: location 101813 is 1
9999 run: jump-unless fell through
 102 run: free-address:address:number <- get-address chan:address:channel/deref, first-free:offset
9999 mem: location 101812 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1032 is 3
9999 mem: location 1033 is 1034
9999 mem: location 101812 is 1031
9999 run: address to copy is 1032
9999 mem: storing 1032 in location 101814
 102 run: wait-for-location free-address:address:number/deref
9999 mem: location 101814 is 1032
9999 mem: location 1032 is 3
9999 mem: location 101814 is 1032
9999 run: waiting for location 1032 to change from 3
schedule: waking up routine 1
schedule: run1001/buffer-lines-blocks-until-newline
 102 run: 8:boolean <- channel-empty? 2:address:channel/buffered-stdin
9999 mem: location 2 is 1077
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1495
 103 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1077 in location 1497
 103 run: full:number <- get chan:address:channel/deref, first-full:offset
9999 mem: location 1497 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 3
9999 mem: location 1079 is 1080
9999 mem: location 1497 is 1077
9999 run: address to copy is 1077
9999 run: its type is 1
9999 mem: location 1077 is 0
9999 mem: storing 0 in location 1498
 103 run: free:number <- get chan:address:channel/deref, first-free:offset
9999 mem: location 1497 is 1077
9999 mem: location 1077 is 0
9999 mem: location 1078 is 3
9999 mem: location 1079 is 1080
9999 mem: location 1497 is 1077
9999 run: address to copy is 1078
9999 run: its type is 1
9999 mem: location 1078 is 3
9999 mem: storing 3 in location 1499
 103 run: result:boolean <- equal full:number, free:number
9999 mem: location 1498 is 0
9999 mem: location 1499 is 3
9999 mem: storing 0 in location 1500
 103 run: reply result:boolean
9999 mem: location 1500 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 8
 102 run: 9:boolean/completed? <- not 8:boolean
9999 mem: location 8 is 0
9999 mem: storing 1 in location 9
 102 run: assert 9:boolean/completed?, [
F buffer-lines-blocks-until-newline: channel should contain data after writing newline]
9999 mem: location 9 is 1
 102 run: trace [test], [reached end]
   1 test: reached end
 101 run: trace-should-contain [
    test: reached end
  ]
