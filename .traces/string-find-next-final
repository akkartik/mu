9991 parse: --- defining scenario-string-find-next-final
9993 parse: instruction: run
9993 parse:   ingredient: {"\n    1:address:array:character <- new [abc/]\n    2:number <- find-next 1:address:array:character, 47/slash, 0/start-index\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:array:character <- new [abc/]
    2:number <- find-next 1:address:array:character, 47/slash, 0/start-index
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   ingredient: {"\n    2 <- 3  # suffix match\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2 <- 3  # suffix match
  ]
9990 transform: === transform_all()
9991 transform: --- collect surrounding spaces for recipe scenario-string-find-next-final
9991 transform: --- transform names for recipe scenario-string-find-next-final
9991 transform: --- transform braces for recipe scenario-string-find-next-final
9991 transform: run ...
9991 transform: memory-should-contain ...
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-string-find-next-final
 102 run: run [
    1:address:array:character <- new [abc/]
    2:number <- find-next 1:address:array:character, 47/slash, 0/start-index
  ]
9991 parse: --- defining run1001
9993 parse: instruction: new
9993 parse:   ingredient: {"abc/": "literal-string"}
9993 parse:   product: {"1": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: 1:address:array:character <- new [abc/]
9993 parse: instruction: find-next
9993 parse:   ingredient: {"1": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   ingredient: {"47": "literal", "slash": <>}
9993 parse:   ingredient: {"0": "literal", "start-index": <>}
9993 parse:   product: {"2": "number"}
9992 load: after rewriting: 2:number <- find-next 1:address:array:character, 47/slash, 0/start-index
9990 transform: === transform_all()
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- transform braces for recipe run1001
9991 transform: new ...
9991 transform: find-next ...
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:array:character <- new [abc/]
9999 mem: storing 1000 in location 1
 103 run: 2:number <- find-next 1:address:array:character, 47/slash, 0/start-index
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1005
 104 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1007
 104 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1008
 104 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1009
 104 run: len:number <- length *text
9999 mem: location 1007 is 1000
9999 mem: storing 4 in location 1010
 104 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1009 is 0
9999 mem: location 1010 is 4
9999 mem: storing 0 in location 1011
 104 run: break-if eof?, 
9999 mem: location 1011 is 0
9998 run: jump-if fell through
 104 run: curr:character <- index *text, idx
9999 mem: location 1007 is 1000
9999 mem: location 1009 is 0
9998 run: address to copy is 1001
9998 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1012
 104 run: found?:boolean <- equal curr, pattern
9999 mem: location 1012 is 97
9999 mem: location 1008 is 47
9999 mem: storing 0 in location 1013
 104 run: break-if found?, 
9999 mem: location 1013 is 0
9998 run: jump-if fell through
 104 run: idx <- add idx, 1
9999 mem: location 1009 is 0
9999 mem: storing 1 in location 1009
 104 run: loop 
9998 run: jumping to instruction 6
 104 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1009 is 1
9999 mem: location 1010 is 4
9999 mem: storing 0 in location 1011
 104 run: break-if eof?, 
9999 mem: location 1011 is 0
9998 run: jump-if fell through
 104 run: curr:character <- index *text, idx
9999 mem: location 1007 is 1000
9999 mem: location 1009 is 1
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 98
9999 mem: storing 98 in location 1012
 104 run: found?:boolean <- equal curr, pattern
9999 mem: location 1012 is 98
9999 mem: location 1008 is 47
9999 mem: storing 0 in location 1013
 104 run: break-if found?, 
9999 mem: location 1013 is 0
9998 run: jump-if fell through
 104 run: idx <- add idx, 1
9999 mem: location 1009 is 1
9999 mem: storing 2 in location 1009
 104 run: loop 
9998 run: jumping to instruction 6
 104 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1009 is 2
9999 mem: location 1010 is 4
9999 mem: storing 0 in location 1011
 104 run: break-if eof?, 
9999 mem: location 1011 is 0
9998 run: jump-if fell through
 104 run: curr:character <- index *text, idx
9999 mem: location 1007 is 1000
9999 mem: location 1009 is 2
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 99
9999 mem: storing 99 in location 1012
 104 run: found?:boolean <- equal curr, pattern
9999 mem: location 1012 is 99
9999 mem: location 1008 is 47
9999 mem: storing 0 in location 1013
 104 run: break-if found?, 
9999 mem: location 1013 is 0
9998 run: jump-if fell through
 104 run: idx <- add idx, 1
9999 mem: location 1009 is 2
9999 mem: storing 3 in location 1009
 104 run: loop 
9998 run: jumping to instruction 6
 104 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1009 is 3
9999 mem: location 1010 is 4
9999 mem: storing 0 in location 1011
 104 run: break-if eof?, 
9999 mem: location 1011 is 0
9998 run: jump-if fell through
 104 run: curr:character <- index *text, idx
9999 mem: location 1007 is 1000
9999 mem: location 1009 is 3
9998 run: address to copy is 1004
9998 run: its type is character
9999 mem: location 1004 is 47
9999 mem: storing 47 in location 1012
 104 run: found?:boolean <- equal curr, pattern
9999 mem: location 1012 is 47
9999 mem: location 1008 is 47
9999 mem: storing 1 in location 1013
 104 run: break-if found?, 
9999 mem: location 1013 is 1
9998 run: jumping to instruction 13
 104 run: reply idx
9999 mem: location 1009 is 3
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 3
9999 mem: storing 3 in location 2
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    2 <- 3  # suffix match
  ]
9999 run: checking location 2
9999 trace: fall-through: exiting scenario-string-find-next-final; decrementing callstack depth from 1
