9991 parse: --- defining scenario_removing-from-end-of-duplex-list
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:duplex-list:character <- push 3, 0\n    1:address:shared:duplex-list:character <- push 4, 1:address:shared:duplex-list:character\n    1:address:shared:duplex-list:character <- push 5, 1:address:shared:duplex-list:character\n    # delete last element\n    2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character\n    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character\n    1:address:shared:duplex-list:character <- remove 2:address:shared:duplex-list:character, 1:address:shared:duplex-list:character\n    3:boolean <- equal 2:address:shared:duplex-list:character, 0\n    # check structure like before\n    2:address:shared:duplex-list:character <- copy 1:address:shared:duplex-list:character\n    4:character <- first 2:address:shared:duplex-list:character\n    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character\n    5:character <- first 2:address:shared:duplex-list:character\n    6:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character\n    2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character\n    7:character <- first 2:address:shared:duplex-list:character\n    8:boolean <- equal 1:address:shared:duplex-list:character, 2:address:shared:duplex-list:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:shared:duplex-list:character <- push 3, 0
    1:address:shared:duplex-list:character <- push 4, 1:address:shared:duplex-list:character
    1:address:shared:duplex-list:character <- push 5, 1:address:shared:duplex-list:character
    # delete last element
    2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    1:address:shared:duplex-list:character <- remove 2:address:shared:duplex-list:character, 1:address:shared:duplex-list:character
    3:boolean <- equal 2:address:shared:duplex-list:character, 0
    # check structure like before
    2:address:shared:duplex-list:character <- copy 1:address:shared:duplex-list:character
    4:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    5:character <- first 2:address:shared:duplex-list:character
    6:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
    7:character <- first 2:address:shared:duplex-list:character
    8:boolean <- equal 1:address:shared:duplex-list:character, 2:address:shared:duplex-list:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3 <- 0  # remove returned non-null\n    4 <- 5  # scanning next, skipping deleted element\n    5 <- 4\n    6 <- 0  # no more elements\n    7 <- 5  # prev of final element\n    8 <- 1  # list back at start\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    3 <- 0  # remove returned non-null
    4 <- 5  # scanning next, skipping deleted element
    5 <- 4
    6 <- 0  # no more elements
    7 <- 5  # prev of final element
    8 <- 1  # list back at start
  ]
9999 parse: recipe scenario_removing-from-end-of-duplex-list has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_removing-from-end-of-duplex-list
9991 transform: --- deduce types for recipe scenario_removing-from-end-of-duplex-list
9991 transform: --- collect surrounding spaces for recipe scenario_removing-from-end-of-duplex-list
9991 transform: --- transform names for recipe scenario_removing-from-end-of-duplex-list
9991 transform: --- resolve ambiguous calls for recipe scenario_removing-from-end-of-duplex-list
9991 transform: --- compute instruction operations for recipe scenario_removing-from-end-of-duplex-list
9991 transform: --- transform braces for recipe scenario_removing-from-end-of-duplex-list
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_removing-from-end-of-duplex-list
9991 transform: --- type-check 'call' instructions inside recipe scenario_removing-from-end-of-duplex-list
9991 transform: --- type-check calls inside recipe scenario_removing-from-end-of-duplex-list
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_removing-from-end-of-duplex-list
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_removing-from-end-of-duplex-list
 102 run: run [
    1:address:shared:duplex-list:character <- push 3, 0
    1:address:shared:duplex-list:character <- push 4, 1:address:shared:duplex-list:character
    1:address:shared:duplex-list:character <- push 5, 1:address:shared:duplex-list:character
    # delete last element
    2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    1:address:shared:duplex-list:character <- remove 2:address:shared:duplex-list:character, 1:address:shared:duplex-list:character
    3:boolean <- equal 2:address:shared:duplex-list:character, 0
    # check structure like before
    2:address:shared:duplex-list:character <- copy 1:address:shared:duplex-list:character
    4:character <- first 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    5:character <- first 2:address:shared:duplex-list:character
    6:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
    2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
    7:character <- first 2:address:shared:duplex-list:character
    8:boolean <- equal 1:address:shared:duplex-list:character, 2:address:shared:duplex-list:character
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 1:address:shared:duplex-list:character <- push 3, 0
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 1:address:shared:duplex-list:character <- push 4, 1:address:shared:duplex-list:character
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"5": "literal"}
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 1:address:shared:duplex-list:character <- push 5, 1:address:shared:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9993 parse: instruction: remove
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 1:address:shared:duplex-list:character <- remove 2:address:shared:duplex-list:character, 1:address:shared:duplex-list:character
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"3": "boolean"}
9992 load: after rewriting: 3:boolean <- equal 2:address:shared:duplex-list:character, 0
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 2:address:shared:duplex-list:character <- copy 1:address:shared:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"4": "character"}
9992 load: after rewriting: 4:character <- first 2:address:shared:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"5": "character"}
9992 load: after rewriting: 5:character <- first 2:address:shared:duplex-list:character
9993 parse: instruction: next
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"6": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 6:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9993 parse: instruction: prev
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 load: after rewriting: 2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
9993 parse: instruction: first
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"7": "character"}
9992 load: after rewriting: 7:character <- first 2:address:shared:duplex-list:character
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 parse:   product: {"8": "boolean"}
9992 load: after rewriting: 8:boolean <- equal 1:address:shared:duplex-list:character, 2:address:shared:duplex-list:character
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction 1:address:shared:duplex-list:character <- push 3, 0
9992 transform: checking variant (strict) 0: recipe push {"x": "_elem"} {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {"x": "_elem"} {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {"x": <"address" : <"shared" : <"operation" : <>>>>} {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9993 transform: strict match failed: product 0
9992 transform: found variant to specialize: 241 push_2
9993 transform: switching push to specialized recipe push_6 {"x": "_elem"} {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}
9993 transform: compute type names: push_6
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: type of in is <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: x:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9994 transform:     checking {"(duplex-list _elem)": "type"}: "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking {"result": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: type of result is <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: val:address:_elem <- get-address *result, value:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"val": <"address" : <"_elem" : <>>>}: <"address" : <"_elem" : <>>>
9993 transform: type of val is <"address" : <"_elem" : <>>>
9993 transform:   instruction: *val <- copy x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"val": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"_elem" : <>>>
9993 transform:   instruction: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"next": <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>}: <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform: type of next is <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform:   instruction: *next <- copy in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform:   instruction: {
9993 transform:   instruction: break-unless in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"prev": "offset"}: "offset"
9994 transform:     checking {"prev": <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>}: <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform: type of prev is <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform:   instruction: *prev <- copy result
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"prev": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform:   instruction: }
9993 transform:   instruction: reply result
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: adding mapping from _elem to "literal"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in instruction 'in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform:   after: ?0
9993 transform: replacing in ingredient result:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'val:address:_elem <- get-address *result, value:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient val:address:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9993 transform: replacing in instruction '*val <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in ingredient *val
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9993 transform: replacing in instruction 'next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient next:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <shared : <duplex-list : <character : <>>>>>>
9993 transform: replacing in instruction '*next <- copy in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient *next
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <shared : <duplex-list : <character : <>>>>>>
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient prev:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient prev:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <shared : <duplex-list : <character : <>>>>>>
9993 transform: replacing in instruction '*prev <- copy result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient *prev
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <shared : <duplex-list : <character : <>>>>>>
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'reply result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: transforming new specialization: push_6
9991 transform: --- checking reply instructions against header for push_6
9991 transform: --- fill in reply ingredients from header for recipe push_6
9991 transform: --- deduce types for recipe push_6
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: x => character
9992 transform: in => <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: result => <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: val => <address : <character : <>>>
9992 transform: next => <address : <address : <shared : <duplex-list : <character : <>>>>>>
9992 transform: prev => <address : <address : <shared : <duplex-list : <character : <>>>>>>
9991 transform: --- deduce types from header for push_6
9993 transform: type of x is character
9993 transform: type of in is <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: type of in is <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: x:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: x: character -- {"x": "character"}
9992 transform: instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: <address : <shared : <duplex-list : <character : <>>>>> -- {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9993 transform:   product: result: <address : <shared : <duplex-list : <character : <>>>>> -- {"result": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: val:address:_elem <- get-address *result, value:offset
9993 transform:   product: val: <address : <character : <>>> -- {"val": <"address" : <"character" : <>>>}
9992 transform: instruction: *val <- copy x
9993 transform:   product: val: <address : <character : <>>> -- {"val": <"address" : <"character" : <>>>, "lookup": <>}
9992 transform: instruction: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9993 transform:   product: next: <address : <address : <shared : <duplex-list : <character : <>>>>>> -- {"next": <"address" : <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>>}
9992 transform: instruction: *next <- copy in
9993 transform:   product: next: <address : <address : <shared : <duplex-list : <character : <>>>>>> -- {"next": <"address" : <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>>, "lookup": <>}
9992 transform: instruction: {
9992 transform: instruction: break-unless in
9992 transform: instruction: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9993 transform:   product: prev: <address : <address : <shared : <duplex-list : <character : <>>>>>> -- {"prev": <"address" : <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>>}
9992 transform: instruction: *prev <- copy result
9993 transform:   product: prev: <address : <address : <shared : <duplex-list : <character : <>>>>>> -- {"prev": <"address" : <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>>, "lookup": <>}
9992 transform: instruction: }
9992 transform: instruction: reply result
9991 transform: --- collect surrounding spaces for recipe push_6
9991 transform: --- transform names for recipe push_6
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element value of type duplex-list is at offset 0
9993 name: assign val 4
9993 name: element next of type duplex-list is at offset 1
9993 name: assign next 5
9993 name: element prev of type duplex-list is at offset 2
9993 name: assign prev 6
9991 transform: --- resolve ambiguous calls for recipe push_6
9991 transform: --- compute instruction operations for recipe push_6
9991 transform: --- transform braces for recipe push_6
9993 transform: push_6: push (open, 8)
9993 transform: push (close, 12)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: jump-unless in, 2:offset
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: reply ...
9991 transform: --- perform checks for recipe push_6
9991 transform: --- type-check 'call' instructions inside recipe push_6
9991 transform: --- type-check calls inside recipe push_6
9991 transform: --- convert 'new' to 'allocate' for recipe push_6
9992 new: size of "location" is 1
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9992 new: size of <"duplex-list" : <"character" : <>>> is 3
9991 transform: --- check that recipe push_6 sets default-space
9991 transform: --- checking reply instructions against header for push_6
9992 transform: new specialization: push_6
9992 transform: instruction 1:address:shared:duplex-list:character <- push 4, 1:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe push {"x": "_elem"} {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {"x": "_elem"} {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {"x": <"address" : <"shared" : <"operation" : <>>>>} {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 26: recipe push_6 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 1
9992 transform: found variant to specialize: 241 push_2
9993 transform: switching push to specialized recipe push_7 {"x": "_elem"} {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}
9993 transform: compute type names: push_7
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: type of in is <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: x:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9994 transform:     checking {"(duplex-list _elem)": "type"}: "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking {"result": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: type of result is <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: val:address:_elem <- get-address *result, value:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"val": <"address" : <"_elem" : <>>>}: <"address" : <"_elem" : <>>>
9993 transform: type of val is <"address" : <"_elem" : <>>>
9993 transform:   instruction: *val <- copy x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"val": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"_elem" : <>>>
9993 transform:   instruction: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"next": <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>}: <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform: type of next is <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform:   instruction: *next <- copy in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform:   instruction: {
9993 transform:   instruction: break-unless in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"prev": "offset"}: "offset"
9994 transform:     checking {"prev": <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>}: <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform: type of prev is <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform:   instruction: *prev <- copy result
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"prev": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform:   instruction: }
9993 transform:   instruction: reply result
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: adding mapping from _elem to "literal"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in instruction 'in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform:   after: ?0
9993 transform: replacing in ingredient result:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'val:address:_elem <- get-address *result, value:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient val:address:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9993 transform: replacing in instruction '*val <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in ingredient *val
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9993 transform: replacing in instruction 'next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient next:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <shared : <duplex-list : <character : <>>>>>>
9993 transform: replacing in instruction '*next <- copy in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient *next
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <shared : <duplex-list : <character : <>>>>>>
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient prev:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient prev:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <shared : <duplex-list : <character : <>>>>>>
9993 transform: replacing in instruction '*prev <- copy result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient *prev
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <shared : <duplex-list : <character : <>>>>>>
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'reply result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: transforming new specialization: push_7
9991 transform: --- checking reply instructions against header for push_7
9991 transform: --- fill in reply ingredients from header for recipe push_7
9991 transform: --- deduce types for recipe push_7
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: x => character
9992 transform: in => <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: result => <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: val => <address : <character : <>>>
9992 transform: next => <address : <address : <shared : <duplex-list : <character : <>>>>>>
9992 transform: prev => <address : <address : <shared : <duplex-list : <character : <>>>>>>
9991 transform: --- deduce types from header for push_7
9993 transform: type of x is character
9993 transform: type of in is <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: type of in is <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: x:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: x: character -- {"x": "character"}
9992 transform: instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: <address : <shared : <duplex-list : <character : <>>>>> -- {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9993 transform:   product: result: <address : <shared : <duplex-list : <character : <>>>>> -- {"result": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: val:address:_elem <- get-address *result, value:offset
9993 transform:   product: val: <address : <character : <>>> -- {"val": <"address" : <"character" : <>>>}
9992 transform: instruction: *val <- copy x
9993 transform:   product: val: <address : <character : <>>> -- {"val": <"address" : <"character" : <>>>, "lookup": <>}
9992 transform: instruction: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9993 transform:   product: next: <address : <address : <shared : <duplex-list : <character : <>>>>>> -- {"next": <"address" : <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>>}
9992 transform: instruction: *next <- copy in
9993 transform:   product: next: <address : <address : <shared : <duplex-list : <character : <>>>>>> -- {"next": <"address" : <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>>, "lookup": <>}
9992 transform: instruction: {
9992 transform: instruction: break-unless in
9992 transform: instruction: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9993 transform:   product: prev: <address : <address : <shared : <duplex-list : <character : <>>>>>> -- {"prev": <"address" : <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>>}
9992 transform: instruction: *prev <- copy result
9993 transform:   product: prev: <address : <address : <shared : <duplex-list : <character : <>>>>>> -- {"prev": <"address" : <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>>, "lookup": <>}
9992 transform: instruction: }
9992 transform: instruction: reply result
9991 transform: --- collect surrounding spaces for recipe push_7
9991 transform: --- transform names for recipe push_7
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element value of type duplex-list is at offset 0
9993 name: assign val 4
9993 name: element next of type duplex-list is at offset 1
9993 name: assign next 5
9993 name: element prev of type duplex-list is at offset 2
9993 name: assign prev 6
9991 transform: --- resolve ambiguous calls for recipe push_7
9991 transform: --- compute instruction operations for recipe push_7
9991 transform: --- transform braces for recipe push_7
9993 transform: push_7: push (open, 8)
9993 transform: push (close, 12)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: jump-unless in, 2:offset
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: reply ...
9991 transform: --- perform checks for recipe push_7
9991 transform: --- type-check 'call' instructions inside recipe push_7
9991 transform: --- type-check calls inside recipe push_7
9991 transform: --- convert 'new' to 'allocate' for recipe push_7
9992 new: size of "location" is 1
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9992 new: size of <"duplex-list" : <"character" : <>>> is 3
9991 transform: --- check that recipe push_7 sets default-space
9991 transform: --- checking reply instructions against header for push_7
9992 transform: new specialization: push_7
9992 transform: instruction 1:address:shared:duplex-list:character <- push 5, 1:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe push {"x": "_elem"} {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe push_2 {"x": "_elem"} {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe push_3 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe push_4 {"x": <"address" : <"shared" : <"operation" : <>>>>} {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe push_5 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 26: recipe push_6 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 27: recipe push_7 {"x": "character"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 1
9992 transform: found variant to specialize: 241 push_2
9993 transform: switching push to specialized recipe push_8 {"x": "_elem"} {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}
9993 transform: compute type names: push_8
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: type of in is <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: x:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9994 transform:     checking {"(duplex-list _elem)": "type"}: "type"
9993 transform: type of (duplex-list _elem) is "type"
9994 transform:     checking {"result": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: type of result is <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: val:address:_elem <- get-address *result, value:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"val": <"address" : <"_elem" : <>>>}: <"address" : <"_elem" : <>>>
9993 transform: type of val is <"address" : <"_elem" : <>>>
9993 transform:   instruction: *val <- copy x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"val": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"_elem" : <>>>
9993 transform:   instruction: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"next": <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>}: <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform: type of next is <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform:   instruction: *next <- copy in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform:   instruction: {
9993 transform:   instruction: break-unless in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"prev": "offset"}: "offset"
9994 transform:     checking {"prev": <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>}: <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform: type of prev is <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform:   instruction: *prev <- copy result
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"prev": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>>
9993 transform:   instruction: }
9993 transform:   instruction: reply result
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: adding mapping from _elem to "literal"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in instruction 'in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}'
9993 transform: replacing in ingredient {(duplex-list _elem): type}
9993 transform:   after: ?0
9993 transform: replacing in ingredient result:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: _elem => "character"
9993 transform: replacing in instruction 'val:address:_elem <- get-address *result, value:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient val:address:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9993 transform: replacing in instruction '*val <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in ingredient *val
9993 transform: _elem => "character"
9993 transform:   after: <address : <character : <>>>
9993 transform: replacing in instruction 'next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient next:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <shared : <duplex-list : <character : <>>>>>>
9993 transform: replacing in instruction '*next <- copy in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient *next
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <shared : <duplex-list : <character : <>>>>>>
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient prev:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient prev:address:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <shared : <duplex-list : <character : <>>>>>>
9993 transform: replacing in instruction '*prev <- copy result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient *prev
9993 transform: _elem => "character"
9993 transform:   after: <address : <address : <shared : <duplex-list : <character : <>>>>>>
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'reply result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: transforming new specialization: push_8
9991 transform: --- checking reply instructions against header for push_8
9991 transform: --- fill in reply ingredients from header for recipe push_8
9991 transform: --- deduce types for recipe push_8
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: x => character
9992 transform: in => <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: result => <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: val => <address : <character : <>>>
9992 transform: next => <address : <address : <shared : <duplex-list : <character : <>>>>>>
9992 transform: prev => <address : <address : <shared : <duplex-list : <character : <>>>>>>
9991 transform: --- deduce types from header for push_8
9993 transform: type of x is character
9993 transform: type of in is <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: type of in is <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: x:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: x: character -- {"x": "character"}
9992 transform: instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: <address : <shared : <duplex-list : <character : <>>>>> -- {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9993 transform:   product: result: <address : <shared : <duplex-list : <character : <>>>>> -- {"result": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: val:address:_elem <- get-address *result, value:offset
9993 transform:   product: val: <address : <character : <>>> -- {"val": <"address" : <"character" : <>>>}
9992 transform: instruction: *val <- copy x
9993 transform:   product: val: <address : <character : <>>> -- {"val": <"address" : <"character" : <>>>, "lookup": <>}
9992 transform: instruction: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9993 transform:   product: next: <address : <address : <shared : <duplex-list : <character : <>>>>>> -- {"next": <"address" : <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>>}
9992 transform: instruction: *next <- copy in
9993 transform:   product: next: <address : <address : <shared : <duplex-list : <character : <>>>>>> -- {"next": <"address" : <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>>, "lookup": <>}
9992 transform: instruction: {
9992 transform: instruction: break-unless in
9992 transform: instruction: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9993 transform:   product: prev: <address : <address : <shared : <duplex-list : <character : <>>>>>> -- {"prev": <"address" : <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>>}
9992 transform: instruction: *prev <- copy result
9993 transform:   product: prev: <address : <address : <shared : <duplex-list : <character : <>>>>>> -- {"prev": <"address" : <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>>, "lookup": <>}
9992 transform: instruction: }
9992 transform: instruction: reply result
9991 transform: --- collect surrounding spaces for recipe push_8
9991 transform: --- transform names for recipe push_8
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element value of type duplex-list is at offset 0
9993 name: assign val 4
9993 name: element next of type duplex-list is at offset 1
9993 name: assign next 5
9993 name: element prev of type duplex-list is at offset 2
9993 name: assign prev 6
9991 transform: --- resolve ambiguous calls for recipe push_8
9991 transform: --- compute instruction operations for recipe push_8
9991 transform: --- transform braces for recipe push_8
9993 transform: push_8: push (open, 8)
9993 transform: push (close, 12)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: jump-unless in, 2:offset
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: reply ...
9991 transform: --- perform checks for recipe push_8
9991 transform: --- type-check 'call' instructions inside recipe push_8
9991 transform: --- type-check calls inside recipe push_8
9991 transform: --- convert 'new' to 'allocate' for recipe push_8
9992 new: size of "location" is 1
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9992 new: size of <"duplex-list" : <"character" : <>>> is 3
9991 transform: --- check that recipe push_8 sets default-space
9991 transform: --- checking reply instructions against header for push_8
9992 transform: new specialization: push_8
9992 transform: instruction 2:address:shared:duplex-list:character <- next 1:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe next {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>, "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe next_2 {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"result": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>, "contained-in": "in"}
9992 transform: instruction 2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe next {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>, "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe next_2 {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"result": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>, "contained-in": "in"}
9992 transform: instruction 1:address:shared:duplex-list:character <- remove 2:address:shared:duplex-list:character, 1:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe remove {"x": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>, "contained-in": "in"} {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe remove_2 {"x": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>, "contained-in": "in"} {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction 3:boolean <- equal 2:address:shared:duplex-list:character, 0
9992 transform: checking variant (strict) 0: recipe equal_2 {"a": <"address" : <"shared" : <"array" : <"character" : <>>>>>} {"b": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"result": "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe equal_2 {"a": <"address" : <"shared" : <"array" : <"character" : <>>>>>} {"b": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"result": "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {"a": <"address" : <"shared" : <"array" : <"character" : <>>>>>} {"b": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"result": "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: instruction 4:character <- first 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe first {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe first_3 {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"result": <"address" : <"shared" : <"operation" : <>>>>}
9993 transform: strict match failed: ingredient 0
9993 transform: concrete-type match failed: ingredient 0
9992 transform: found variant to specialize: 242 first_2
9993 transform: switching first to specialized recipe first_4 {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: compute type names: first_4
9994 transform:     checking {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform: type of in is <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"result": "_elem"}: "_elem"
9993 transform: type of result is "_elem"
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9993 transform:   instruction: jump-if in, 1:offset
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"1": "offset"}: "offset"
9993 transform:   instruction: reply 0
9994 transform:     checking {"0": "literal"}: "literal"
9993 transform: type of 0 is "literal"
9993 transform:   instruction: result <- get *in, value:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to "_elem"
9993 transform: adding mapping from _elem to "character"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:_elem
9993 transform: _elem => "character"
9993 transform:   after: character
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:duplex-list:_elem
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in instruction 'jump-if in, 1:offset'
9993 transform: replacing in ingredient in
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient 1:offset
9993 transform:   after: ?0
9993 transform: replacing in instruction 'reply 0'
9993 transform: replacing in ingredient 0
9993 transform:   after: ?0
9993 transform: replacing in instruction 'result <- get *in, value:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "character"
9993 transform:   after: <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient result
9993 transform: _elem => "character"
9993 transform:   after: character
9992 transform: transforming new specialization: first_4
9991 transform: --- checking reply instructions against header for first_4
9991 transform: --- fill in reply ingredients from header for recipe first_4
9991 transform: --- deduce types for recipe first_4
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: in => <address : <shared : <duplex-list : <character : <>>>>>
9992 transform: result => character
9991 transform: --- deduce types from header for first_4
9993 transform: type of in is <address : <shared : <duplex-list : <character : <>>>>>
9993 transform: type of result is character
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: <address : <shared : <duplex-list : <character : <>>>>> -- {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9992 transform: instruction: jump-if in, 1:offset
9992 transform: instruction: reply 0
9992 transform: instruction: result <- get *in, value:offset
9993 transform:   product: result: character -- {"result": "character"}
9992 transform: instruction: reply result:_elem
9991 transform: --- collect surrounding spaces for recipe first_4
9991 transform: --- transform names for recipe first_4
9993 name: assign in 1
9993 name: element value of type duplex-list is at offset 0
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe first_4
9991 transform: --- compute instruction operations for recipe first_4
9991 transform: --- transform braces for recipe first_4
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: reply-unless ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe first_4
9991 transform: --- type-check 'call' instructions inside recipe first_4
9991 transform: --- type-check calls inside recipe first_4
9991 transform: --- convert 'new' to 'allocate' for recipe first_4
9992 new: size of "location" is 1
9991 transform: --- check that recipe first_4 sets default-space
9991 transform: --- checking reply instructions against header for first_4
9992 transform: new specialization: first_4
9992 transform: instruction 2:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe next {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>, "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe next_2 {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"result": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>, "contained-in": "in"}
9992 transform: instruction 5:character <- first 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe first {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe first_3 {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"result": <"address" : <"shared" : <"operation" : <>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 10: recipe first_4 {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"result": "character"}
9992 transform: instruction 6:address:shared:duplex-list:character <- next 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe next {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>, "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe next_2 {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"result": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>, "contained-in": "in"}
9992 transform: instruction 2:address:shared:duplex-list:character <- prev 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe prev {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>, "contained-in": "in"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe prev_2 {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"result": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>, "contained-in": "in"}
9992 transform: instruction 7:character <- first 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe first {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe first_2 {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} -> {"result": "_elem"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 2: recipe first_3 {"in": <"address" : <"shared" : <"list" : <"address" : <"shared" : <"operation" : <>>>>>>>} -> {"result": <"address" : <"shared" : <"operation" : <>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 10: recipe first_4 {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} -> {"result": "character"}
9992 transform: instruction 8:boolean <- equal 1:address:shared:duplex-list:character, 2:address:shared:duplex-list:character
9992 transform: checking variant (strict) 0: recipe equal_2 {"a": <"address" : <"shared" : <"array" : <"character" : <>>>>>} {"b": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"result": "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict except literals-against-booleans) 0: recipe equal_2 {"a": <"address" : <"shared" : <"array" : <"character" : <>>>>>} {"b": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"result": "boolean"}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant 0: recipe equal_2 {"a": <"address" : <"shared" : <"array" : <"character" : <>>>>>} {"b": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"result": "boolean"}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform: next ...
9992 transform: next ...
9992 transform: remove ...
9992 transform: equal ...
9992 transform: copy ...
9992 transform: first ...
9992 transform: next ...
9992 transform: first ...
9992 transform: next ...
9992 transform: prev ...
9992 transform: first ...
9992 transform: equal ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:duplex-list:character <- push_6 3, 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 mem: new alloc: 1000
9999 mem: storing 7 in location 1001
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1003
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1004
 104 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1005
9999 mem: incrementing refcount of 1009: 0 -> 1
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 3
9999 mem: location 1006 is 1010
9999 mem: storing 3 in location 1010
 104 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1005 is 1009
9999 mem: skipping refcount at 1009
9999 type: type deduced to be character$
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1007
 104 run: *next <- copy in
9999 mem: location 1004 is 0
9999 mem: location 1007 is 1011
9999 mem: storing 0 in location 1011
 104 run: jump-unless in, 
9999 mem: location 1004 is 0
9998 run: jumping to instruction 12
 104 run: reply result
9999 mem: location 1005 is 1009
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1
9999 mem: incrementing refcount of 1009: 1 -> 2
 103 run: 1:address:shared:duplex-list:character <- push_7 4, 1:address:shared:duplex-list:character
9999 mem: location 1 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1003
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1009 in location 1004
9999 mem: incrementing refcount of 1009: 2 -> 3
 104 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1013
9999 mem: storing 1013 in location 1005
9999 mem: incrementing refcount of 1013: 0 -> 1
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 0
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 4
9999 mem: location 1006 is 1014
9999 mem: storing 4 in location 1014
 104 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 4
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1005 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1007
 104 run: *next <- copy in
9999 mem: location 1004 is 1009
9999 mem: location 1007 is 1015
9999 mem: storing 1009 in location 1015
9999 mem: incrementing refcount of 1009: 3 -> 4
 104 run: jump-unless in, 
9999 mem: location 1004 is 1009
9998 run: jump-unless fell through
 104 run: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1004 is 1009
9999 mem: skipping refcount at 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1004 is 1009
9999 mem: skipping refcount at 1009
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1008
 104 run: *prev <- copy result
9999 mem: location 1005 is 1013
9999 mem: location 1008 is 1012
9999 mem: storing 1013 in location 1012
9999 mem: incrementing refcount of 1013: 1 -> 2
 104 run: reply result
9999 mem: location 1005 is 1013
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: decrementing refcount of 1009: 4 -> 3
9999 mem: storing 1013 in location 1
9999 mem: incrementing refcount of 1013: 2 -> 3
 103 run: 1:address:shared:duplex-list:character <- push_8 5, 1:address:shared:duplex-list:character
9999 mem: location 1 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: allocating size 9
9999 abandon: picking up space from free-list of size 9
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1013 in location 1004
9999 mem: incrementing refcount of 1013: 3 -> 4
 104 run: result:address:shared:duplex-list:_elem <- new {(duplex-list _elem): type}
9999 mem: allocating size 4
9999 mem: new alloc: 1017
9999 mem: storing 1017 in location 1005
9999 mem: incrementing refcount of 1017: 0 -> 1
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1017
9999 mem: skipping refcount at 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1018 is 0
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1005 is 1017
9999 mem: skipping refcount at 1017
9998 run: address to copy is 1018
9999 mem: storing 1018 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 5
9999 mem: location 1006 is 1018
9999 mem: storing 5 in location 1018
 104 run: next:address:address:shared:duplex-list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1017
9999 mem: skipping refcount at 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1018 is 5
9999 mem: location 1019 is 0
9999 mem: location 1020 is 0
9999 mem: location 1005 is 1017
9999 mem: skipping refcount at 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1019
9999 mem: storing 1019 in location 1007
 104 run: *next <- copy in
9999 mem: location 1004 is 1013
9999 mem: location 1007 is 1019
9999 mem: storing 1013 in location 1019
9999 mem: incrementing refcount of 1013: 4 -> 5
 104 run: jump-unless in, 
9999 mem: location 1004 is 1013
9998 run: jump-unless fell through
 104 run: prev:address:address:shared:duplex-list:_elem <- get-address *in, prev:offset
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 4
9999 mem: location 1015 is 1009
9999 mem: location 1016 is 0
9999 mem: location 1004 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1008
 104 run: *prev <- copy result
9999 mem: location 1005 is 1017
9999 mem: location 1008 is 1016
9999 mem: storing 1017 in location 1016
9999 mem: incrementing refcount of 1017: 1 -> 2
 104 run: reply result
9999 mem: location 1005 is 1017
9999 abandon: saving in free-list of size 9
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: decrementing refcount of 1013: 5 -> 4
9999 mem: storing 1017 in location 1
9999 mem: incrementing refcount of 1017: 2 -> 3
 103 run: 2:address:shared:duplex-list:character <- next_2 1:address:shared:duplex-list:character
9999 mem: location 1 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1021
9999 mem: storing 3 in location 1022
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1017 in location 1024
9999 mem: incrementing refcount of 1017: 3 -> 4
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1013
9999 mem: location 1020 is 0
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1019
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1019 is 1013
9999 mem: storing 1013 in location 1025
9999 mem: incrementing refcount of 1013: 4 -> 5
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1025 is 1013
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: storing 1013 in location 2
9999 mem: incrementing refcount of 1013: 5 -> 6
 103 run: 2:address:shared:duplex-list:character <- next_2 2:address:shared:duplex-list:character
9999 mem: location 2 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1013 in location 1024
9999 mem: incrementing refcount of 1013: 6 -> 7
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1013
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 4
9999 mem: location 1015 is 1009
9999 mem: location 1016 is 1017
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1015 is 1009
9999 mem: storing 1009 in location 1025
9999 mem: incrementing refcount of 1009: 3 -> 4
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1025 is 1009
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1009
9999 mem: decrementing refcount of 1013: 7 -> 6
9999 mem: storing 1009 in location 2
9999 mem: incrementing refcount of 1009: 4 -> 5
 103 run: 1:address:shared:duplex-list:character <- remove_2 2:address:shared:duplex-list:character, 1:address:shared:duplex-list:character
9999 mem: location 2 is 1009
9999 mem: location 1 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1026
9999 mem: storing 6 in location 1027
 104 run: x:address:shared:duplex-list:_elem/contained-in:in <- next-ingredient-without-typechecking 
9999 mem: storing 1009 in location 1029
9999 mem: incrementing refcount of 1009: 5 -> 6
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1017 in location 1030
9999 mem: incrementing refcount of 1017: 4 -> 5
 104 run: jump-if x, 1:offset
9999 mem: location 1029 is 1009
9998 run: jumping to instruction 5
 104 run: next-node:address:shared:duplex-list:_elem <- get *x, next:offset
9999 mem: location 1029 is 1009
9999 mem: skipping refcount at 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 1013
9999 mem: location 1029 is 1009
9999 mem: skipping refcount at 1009
9999 type: type deduced to be character$
9998 run: address to copy is 1011
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1011 is 0
9999 mem: storing 0 in location 1031
 104 run: prev-node:address:shared:duplex-list:_elem <- get *x, prev:offset
9999 mem: location 1029 is 1009
9999 mem: skipping refcount at 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 1013
9999 mem: location 1029 is 1009
9999 mem: skipping refcount at 1009
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1012 is 1013
9999 mem: storing 1013 in location 1032
9999 mem: incrementing refcount of 1013: 6 -> 7
 104 run: tmp:address:address:shared:duplex-list:_elem <- get-address *x, next:offset
9999 mem: location 1029 is 1009
9999 mem: skipping refcount at 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 1013
9999 mem: location 1029 is 1009
9999 mem: skipping refcount at 1009
9999 type: type deduced to be character$
9998 run: address to copy is 1011
9999 mem: storing 1011 in location 1033
 104 run: *tmp <- copy 0
9999 mem: location 1033 is 1011
9999 mem: storing 0 in location 1011
 104 run: tmp <- get-address *x, prev:offset
9999 mem: location 1029 is 1009
9999 mem: skipping refcount at 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1010 is 3
9999 mem: location 1011 is 0
9999 mem: location 1012 is 1013
9999 mem: location 1029 is 1009
9999 mem: skipping refcount at 1009
9999 type: type deduced to be character$
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1033
 104 run: *tmp <- copy 0
9999 mem: location 1033 is 1012
9999 mem: decrementing refcount of 1013: 7 -> 6
9999 mem: storing 0 in location 1012
 104 run: jump-unless next-node, 
9999 mem: location 1031 is 0
9998 run: jumping to instruction 15
 104 run: jump-unless prev-node, 
9999 mem: location 1032 is 1013
9998 run: jump-unless fell through
 104 run: tmp <- get-address *prev-node, next:offset
9999 mem: location 1032 is 1013
9999 mem: skipping refcount at 1013
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 4
9999 mem: location 1015 is 1009
9999 mem: location 1016 is 1017
9999 mem: location 1032 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1033
 104 run: *tmp <- copy next-node
9999 mem: location 1031 is 0
9999 mem: location 1033 is 1015
9999 mem: decrementing refcount of 1009: 6 -> 5
9999 mem: storing 0 in location 1015
 104 run: reply in:address:shared:duplex-list:_elem
9999 mem: location 1030 is 1017
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: decrementing refcount of 1017: 5 -> 4
9999 mem: storing 1017 in location 1
9999 mem: incrementing refcount of 1017: 4 -> 5
 103 run: 3:boolean <- equal 2:address:shared:duplex-list:character, 0
9999 mem: location 2 is 1009
9999 mem: storing 0 in location 3
 103 run: 2:address:shared:duplex-list:character <- copy 1:address:shared:duplex-list:character
9999 mem: location 1 is 1017
9999 mem: decrementing refcount of 1009: 5 -> 4
9999 mem: storing 1017 in location 2
9999 mem: incrementing refcount of 1017: 5 -> 6
 103 run: 4:character <- first_4 2:address:shared:duplex-list:character
9999 mem: location 2 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1017 in location 1024
9999 mem: incrementing refcount of 1017: 6 -> 7
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1013
9999 mem: location 1020 is 0
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9998 run: address to copy is 1018
9998 run: its type is character
9999 mem: location 1018 is 5
9999 mem: storing 5 in location 1025
 104 run: reply result:_elem
9999 mem: location 1025 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 5
9999 mem: storing 5 in location 4
 103 run: 2:address:shared:duplex-list:character <- next_2 2:address:shared:duplex-list:character
9999 mem: location 2 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1017 in location 1024
9999 mem: incrementing refcount of 1017: 7 -> 8
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1013
9999 mem: location 1020 is 0
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9999 type: type deduced to be character$
9998 run: address to copy is 1019
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1019 is 1013
9999 mem: storing 1013 in location 1025
9999 mem: incrementing refcount of 1013: 6 -> 7
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1025 is 1013
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: decrementing refcount of 1017: 8 -> 7
9999 mem: storing 1013 in location 2
9999 mem: incrementing refcount of 1013: 7 -> 8
 103 run: 5:character <- first_4 2:address:shared:duplex-list:character
9999 mem: location 2 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1013 in location 1024
9999 mem: incrementing refcount of 1013: 8 -> 9
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1013
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 4
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1017
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9998 run: address to copy is 1014
9998 run: its type is character
9999 mem: location 1014 is 4
9999 mem: storing 4 in location 1025
 104 run: reply result:_elem
9999 mem: location 1025 is 4
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 4
9999 mem: storing 4 in location 5
 103 run: 6:address:shared:duplex-list:character <- next_2 2:address:shared:duplex-list:character
9999 mem: location 2 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1013 in location 1024
9999 mem: incrementing refcount of 1013: 9 -> 10
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1013
9998 run: jumping to instruction 4
 104 run: result <- get *in, next:offset
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 4
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1017
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1015
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1015 is 0
9999 mem: storing 0 in location 1025
 104 run: reply result:address:shared:duplex-list:_elem/contained-in:in
9999 mem: location 1025 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 6
 103 run: 2:address:shared:duplex-list:character <- prev_2 2:address:shared:duplex-list:character
9999 mem: location 2 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1013 in location 1024
9999 mem: incrementing refcount of 1013: 10 -> 11
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1013
9998 run: jumping to instruction 4
 104 run: result <- get *in, prev:offset
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1014 is 4
9999 mem: location 1015 is 0
9999 mem: location 1016 is 1017
9999 mem: location 1024 is 1013
9999 mem: skipping refcount at 1013
9999 type: type deduced to be character$
9998 run: address to copy is 1016
9998 run: its type is <address : <shared : <duplex-list : <character : <>>>>>
9999 mem: location 1016 is 1017
9999 mem: storing 1017 in location 1025
9999 mem: incrementing refcount of 1017: 7 -> 8
 104 run: reply result
9999 mem: location 1025 is 1017
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1017
9999 mem: decrementing refcount of 1013: 11 -> 10
9999 mem: storing 1017 in location 2
9999 mem: incrementing refcount of 1017: 8 -> 9
 103 run: 7:character <- first_4 2:address:shared:duplex-list:character
9999 mem: location 2 is 1017
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 104 run: in:address:shared:duplex-list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1017 in location 1024
9999 mem: incrementing refcount of 1017: 9 -> 10
 104 run: jump-if in, 1:offset
9999 mem: location 1024 is 1017
9998 run: jumping to instruction 4
 104 run: result <- get *in, value:offset
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9999 type: checking size of type ingredient

9999 type: type deduced to be character$
9999 mem: location 1018 is 5
9999 mem: location 1019 is 1013
9999 mem: location 1020 is 0
9999 mem: location 1024 is 1017
9999 mem: skipping refcount at 1017
9998 run: address to copy is 1018
9998 run: its type is character
9999 mem: location 1018 is 5
9999 mem: storing 5 in location 1025
 104 run: reply result:_elem
9999 mem: location 1025 is 5
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 5
9999 mem: storing 5 in location 7
 103 run: 8:boolean <- equal 1:address:shared:duplex-list:character, 2:address:shared:duplex-list:character
9999 mem: location 1 is 1017
9999 mem: location 2 is 1017
9999 mem: storing 1 in location 8
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    3 <- 0  # remove returned non-null
    4 <- 5  # scanning next, skipping deleted element
    5 <- 4
    6 <- 0  # no more elements
    7 <- 5  # prev of final element
    8 <- 1  # list back at start
  ]
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
