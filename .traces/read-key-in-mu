parse: instruction: assume-console
parse:   ingredient: {name: "\n    type [abc]\n  ", properties: [_: "literal-string"]}
parse: instruction: run
parse:   ingredient: {name: "\n    1:character, console:address, 2:boolean <- read-key console:address\n    3:character, console:address, 4:boolean <- read-key console:address\n    5:character, console:address, 6:boolean <- read-key console:address\n    7:character, console:address, 8:boolean <- read-key console:address\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    1 <- 97  # 'a'\n    2 <- 1\n    3 <- 98  # 'b'\n    4 <- 1\n    5 <- 99  # 'c'\n    6 <- 1\n    7 <- 0  # eof\n    8 <- 1\n  ", properties: [_: "literal-string"]}
after-brace: recipe read-key-in-mu
after-brace: assume-console ...
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: read-key-in-mu
 101 run: assume-console [
    type [abc]
  ]
parse: instruction: type
parse:   ingredient: {name: "abc", properties: [_: "literal-string"]}
 101 run: run [
    1:character, console:address, 2:boolean <- read-key console:address
    3:character, console:address, 4:boolean <- read-key console:address
    5:character, console:address, 6:boolean <- read-key console:address
    7:character, console:address, 8:boolean <- read-key console:address
  ]
parse: instruction: read-key
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "1", properties: ["1": "character"]}
parse:   product: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "2", properties: ["2": "boolean"]}
parse: instruction: read-key
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "3", properties: ["3": "character"]}
parse:   product: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "4", properties: ["4": "boolean"]}
parse: instruction: read-key
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "5", properties: ["5": "character"]}
parse:   product: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "6", properties: ["6": "boolean"]}
parse: instruction: read-key
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "7", properties: ["7": "character"]}
parse:   product: {name: "console", properties: ["console": "address"]}
parse:   product: {name: "8", properties: ["8": "boolean"]}
after-brace: recipe run1001
after-brace: read-key ...
after-brace: read-key ...
after-brace: read-key ...
after-brace: read-key ...
 101 run: 1:character, console:address, 2:boolean <- read-key console:address
9999 mem: location 901 is 1013
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1015
 102 run: console:address <- next-ingredient 
9999 mem: storing 1013 in location 1017
 102 run: x:event, console:address, found?:boolean, quit?:boolean <- read-event console:address
9999 mem: location 1017 is 1013
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1046
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1013 in location 1048
 103 run: break-unless x:address:console, 
9999 mem: location 1048 is 1013
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address x:address:console/deref, index:offset
9999 mem: location 1048 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1000
9999 mem: location 1048 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1049
 103 run: buf:address:array:event <- get x:address:console/deref, data:offset
9999 mem: location 1048 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1000
9999 mem: location 1048 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1000
9999 mem: storing 1000 in location 1050
 103 run: max:number <- length buf:address:array:event/deref
9999 mem: location 1050 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1050 is 1000
9999 mem: storing 3 in location 1051
 103 run: done?:boolean <- greater-or-equal idx:address:number/deref, max:number
9999 mem: location 1049 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1051 is 3
9999 mem: storing 0 in location 1052
 103 run: break-unless done?:boolean, 
9999 mem: location 1052 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index buf:address:array:event/deref, idx:address:number/deref
9999 mem: location 1050 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1049 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1050 is 1000
9999 mem: location 1049 is 1013
9999 mem: location 1013 is 0
9999 run: address to copy is 1001
9999 run: its type is event
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1054
9999 mem: storing 97 in location 1055
9999 mem: storing 0 in location 1056
9999 mem: storing 0 in location 1057
 103 run: idx:address:number/deref <- add idx:address:number/deref, 1:literal
9999 mem: location 1049 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1049 is 1013
9999 mem: storing 1 in location 1013
 103 run: reply result:event, x:address:console/same-as-ingredient:0, 1:literal/found, 0:literal/quit
9999 mem: location 1054 is 0
9999 mem: location 1055 is 97
9999 mem: location 1056 is 0
9999 mem: location 1057 is 0
9999 mem: location 1048 is 1013
9999 run: result 0 is [0, 97, 0, 0]
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1018
9999 mem: storing 97 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 1013 in location 1017
9999 mem: storing 1 in location 1022
9999 mem: storing 0 in location 1023
 102 run: jump-unless quit?:boolean, 1:offset
9999 mem: location 1023 is 0
9999 run: jumping to instruction 5
 102 run: jump-if found?:boolean, 1:offset
9999 mem: location 1022 is 1
9999 run: jumping to instruction 7
 102 run: c:address:character <- maybe-convert x:event, text:variant
9999 mem: location 1018 is 0
9999 mem: location 1019 is 97
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: storing 1019 in location 1024
 102 run: jump-if c:address:character, 1:offset
9999 mem: location 1024 is 1019
9999 run: jumping to instruction 10
 102 run: reply c:address:character/deref, console:address/same-as-ingredient:0, 1:literal/found, 0:literal/quit
9999 mem: location 1024 is 1019
9999 mem: location 1019 is 97
9999 mem: location 1017 is 1013
9999 run: result 0 is 97
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 mem: storing 97 in location 1
9999 mem: storing 1013 in location 901
9999 mem: storing 1 in location 2
 101 run: 3:character, console:address, 4:boolean <- read-key console:address
9999 mem: location 901 is 1013
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1077
 102 run: console:address <- next-ingredient 
9999 mem: storing 1013 in location 1079
 102 run: x:event, console:address, found?:boolean, quit?:boolean <- read-event console:address
9999 mem: location 1079 is 1013
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1108
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1013 in location 1110
 103 run: break-unless x:address:console, 
9999 mem: location 1110 is 1013
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address x:address:console/deref, index:offset
9999 mem: location 1110 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1000
9999 mem: location 1110 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1111
 103 run: buf:address:array:event <- get x:address:console/deref, data:offset
9999 mem: location 1110 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1000
9999 mem: location 1110 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1000
9999 mem: storing 1000 in location 1112
 103 run: max:number <- length buf:address:array:event/deref
9999 mem: location 1112 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1112 is 1000
9999 mem: storing 3 in location 1113
 103 run: done?:boolean <- greater-or-equal idx:address:number/deref, max:number
9999 mem: location 1111 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1113 is 3
9999 mem: storing 0 in location 1114
 103 run: break-unless done?:boolean, 
9999 mem: location 1114 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index buf:address:array:event/deref, idx:address:number/deref
9999 mem: location 1112 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1111 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1112 is 1000
9999 mem: location 1111 is 1013
9999 mem: location 1013 is 1
9999 run: address to copy is 1005
9999 run: its type is event
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1116
9999 mem: storing 98 in location 1117
9999 mem: storing 0 in location 1118
9999 mem: storing 0 in location 1119
 103 run: idx:address:number/deref <- add idx:address:number/deref, 1:literal
9999 mem: location 1111 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1111 is 1013
9999 mem: storing 2 in location 1013
 103 run: reply result:event, x:address:console/same-as-ingredient:0, 1:literal/found, 0:literal/quit
9999 mem: location 1116 is 0
9999 mem: location 1117 is 98
9999 mem: location 1118 is 0
9999 mem: location 1119 is 0
9999 mem: location 1110 is 1013
9999 run: result 0 is [0, 98, 0, 0]
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1080
9999 mem: storing 98 in location 1081
9999 mem: storing 0 in location 1082
9999 mem: storing 0 in location 1083
9999 mem: storing 1013 in location 1079
9999 mem: storing 1 in location 1084
9999 mem: storing 0 in location 1085
 102 run: jump-unless quit?:boolean, 1:offset
9999 mem: location 1085 is 0
9999 run: jumping to instruction 5
 102 run: jump-if found?:boolean, 1:offset
9999 mem: location 1084 is 1
9999 run: jumping to instruction 7
 102 run: c:address:character <- maybe-convert x:event, text:variant
9999 mem: location 1080 is 0
9999 mem: location 1081 is 98
9999 mem: location 1082 is 0
9999 mem: location 1083 is 0
9999 mem: storing 1081 in location 1086
 102 run: jump-if c:address:character, 1:offset
9999 mem: location 1086 is 1081
9999 run: jumping to instruction 10
 102 run: reply c:address:character/deref, console:address/same-as-ingredient:0, 1:literal/found, 0:literal/quit
9999 mem: location 1086 is 1081
9999 mem: location 1081 is 98
9999 mem: location 1079 is 1013
9999 run: result 0 is 98
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 mem: storing 98 in location 3
9999 mem: storing 1013 in location 901
9999 mem: storing 1 in location 4
 101 run: 5:character, console:address, 6:boolean <- read-key console:address
9999 mem: location 901 is 1013
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1139
 102 run: console:address <- next-ingredient 
9999 mem: storing 1013 in location 1141
 102 run: x:event, console:address, found?:boolean, quit?:boolean <- read-event console:address
9999 mem: location 1141 is 1013
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1170
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1013 in location 1172
 103 run: break-unless x:address:console, 
9999 mem: location 1172 is 1013
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address x:address:console/deref, index:offset
9999 mem: location 1172 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1000
9999 mem: location 1172 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1173
 103 run: buf:address:array:event <- get x:address:console/deref, data:offset
9999 mem: location 1172 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1000
9999 mem: location 1172 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1000
9999 mem: storing 1000 in location 1174
 103 run: max:number <- length buf:address:array:event/deref
9999 mem: location 1174 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1174 is 1000
9999 mem: storing 3 in location 1175
 103 run: done?:boolean <- greater-or-equal idx:address:number/deref, max:number
9999 mem: location 1173 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1175 is 3
9999 mem: storing 0 in location 1176
 103 run: break-unless done?:boolean, 
9999 mem: location 1176 is 0
9999 run: jumping to instruction 12
 103 run: result:event <- index buf:address:array:event/deref, idx:address:number/deref
9999 mem: location 1174 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1173 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1174 is 1000
9999 mem: location 1173 is 1013
9999 mem: location 1013 is 2
9999 run: address to copy is 1009
9999 run: its type is event
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1178
9999 mem: storing 99 in location 1179
9999 mem: storing 0 in location 1180
9999 mem: storing 0 in location 1181
 103 run: idx:address:number/deref <- add idx:address:number/deref, 1:literal
9999 mem: location 1173 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1173 is 1013
9999 mem: storing 3 in location 1013
 103 run: reply result:event, x:address:console/same-as-ingredient:0, 1:literal/found, 0:literal/quit
9999 mem: location 1178 is 0
9999 mem: location 1179 is 99
9999 mem: location 1180 is 0
9999 mem: location 1181 is 0
9999 mem: location 1172 is 1013
9999 run: result 0 is [0, 99, 0, 0]
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1142
9999 mem: storing 99 in location 1143
9999 mem: storing 0 in location 1144
9999 mem: storing 0 in location 1145
9999 mem: storing 1013 in location 1141
9999 mem: storing 1 in location 1146
9999 mem: storing 0 in location 1147
 102 run: jump-unless quit?:boolean, 1:offset
9999 mem: location 1147 is 0
9999 run: jumping to instruction 5
 102 run: jump-if found?:boolean, 1:offset
9999 mem: location 1146 is 1
9999 run: jumping to instruction 7
 102 run: c:address:character <- maybe-convert x:event, text:variant
9999 mem: location 1142 is 0
9999 mem: location 1143 is 99
9999 mem: location 1144 is 0
9999 mem: location 1145 is 0
9999 mem: storing 1143 in location 1148
 102 run: jump-if c:address:character, 1:offset
9999 mem: location 1148 is 1143
9999 run: jumping to instruction 10
 102 run: reply c:address:character/deref, console:address/same-as-ingredient:0, 1:literal/found, 0:literal/quit
9999 mem: location 1148 is 1143
9999 mem: location 1143 is 99
9999 mem: location 1141 is 1013
9999 run: result 0 is 99
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 mem: storing 99 in location 5
9999 mem: storing 1013 in location 901
9999 mem: storing 1 in location 6
 101 run: 7:character, console:address, 8:boolean <- read-key console:address
9999 mem: location 901 is 1013
 102 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1201
 102 run: console:address <- next-ingredient 
9999 mem: storing 1013 in location 1203
 102 run: x:event, console:address, found?:boolean, quit?:boolean <- read-event console:address
9999 mem: location 1203 is 1013
 103 run: default-space:address:array:location <- new location:type, 30:literal
9999 mem: array size is 30
9999 mem: new alloc: 1232
 103 run: x:address:console <- next-ingredient 
9999 mem: storing 1013 in location 1234
 103 run: break-unless x:address:console, 
9999 mem: location 1234 is 1013
9999 run: jump-unless fell through
 103 run: idx:address:number <- get-address x:address:console/deref, index:offset
9999 mem: location 1234 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1000
9999 mem: location 1234 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1235
 103 run: buf:address:array:event <- get x:address:console/deref, data:offset
9999 mem: location 1234 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1000
9999 mem: location 1234 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1000
9999 mem: storing 1000 in location 1236
 103 run: max:number <- length buf:address:array:event/deref
9999 mem: location 1236 is 1000
9999 mem: location 1000 is 3
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1236 is 1000
9999 mem: storing 3 in location 1237
 103 run: done?:boolean <- greater-or-equal idx:address:number/deref, max:number
9999 mem: location 1235 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1237 is 3
9999 mem: storing 1 in location 1238
 103 run: break-unless done?:boolean, 
9999 mem: location 1238 is 1
9999 run: jump-unless fell through
 103 run: dummy:address:event <- new event:type
9999 mem: new alloc: 1263
9999 mem: storing 1263 in location 1239
 103 run: reply dummy:address:event/deref, x:address:console/same-as-ingredient:0, 1:literal/found, 1:literal/quit
9999 mem: location 1239 is 1263
9999 mem: location 1263 is 0
9999 mem: location 1264 is 0
9999 mem: location 1265 is 0
9999 mem: location 1266 is 0
9999 mem: location 1234 is 1013
9999 run: result 0 is [0, 0, 0, 0]
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 run: result 3 is 1
9999 mem: storing 0 in location 1204
9999 mem: storing 0 in location 1205
9999 mem: storing 0 in location 1206
9999 mem: storing 0 in location 1207
9999 mem: storing 1013 in location 1203
9999 mem: storing 1 in location 1208
9999 mem: storing 1 in location 1209
 102 run: jump-unless quit?:boolean, 1:offset
9999 mem: location 1209 is 1
9999 run: jump-unless fell through
 102 run: reply 0:literal, console:address/same-as-ingredient:0, found?:boolean, quit?:boolean
9999 mem: location 1203 is 1013
9999 mem: location 1208 is 1
9999 mem: location 1209 is 1
9999 run: result 0 is 0
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 mem: storing 0 in location 7
9999 mem: storing 1013 in location 901
9999 mem: storing 1 in location 8
 100 run: memory-should-contain [
    1 <- 97  # 'a'
    2 <- 1
    3 <- 98  # 'b'
    4 <- 1
    5 <- 99  # 'c'
    6 <- 1
    7 <- 0  # eof
    8 <- 1
  ]
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
