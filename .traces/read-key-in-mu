9999 parse: instruction: assume-console
9999 parse:   ingredient: {name: "\n    type [abc]\n  ", properties: [_: "literal-string"]}
9999 parse: instruction: run
9999 parse:   ingredient: {name: "\n    1:character, console:address, 2:boolean <- read-key console:address\n    3:character, console:address, 4:boolean <- read-key console:address\n    5:character, console:address, 6:boolean <- read-key console:address\n    7:character, console:address, 8:boolean <- read-key console:address\n  ", properties: [_: "literal-string"]}
9999 parse: instruction: memory-should-contain
9999 parse:   ingredient: {name: "\n    1 <- 97  # 'a'\n    2 <- 1\n    3 <- 98  # 'b'\n    4 <- 1\n    5 <- 99  # 'c'\n    6 <- 1\n    7 <- 0  # eof\n    8 <- 1\n  ", properties: [_: "literal-string"]}
9999 after-brace: recipe scenario-read-key-in-mu
9999 after-brace: assume-console ...
9999 after-brace: run ...
9999 after-brace: memory-should-contain ...
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9999 schedule: scenario-read-key-in-mu
 102 run: assume-console [
    type [abc]
  ]
9999 parse: instruction: type
9999 parse:   ingredient: {name: "abc", properties: [_: "literal-string"]}
 102 run: run [
    1:character, console:address, 2:boolean <- read-key console:address
    3:character, console:address, 4:boolean <- read-key console:address
    5:character, console:address, 6:boolean <- read-key console:address
    7:character, console:address, 8:boolean <- read-key console:address
  ]
9999 parse: instruction: read-key
9999 parse:   ingredient: {name: "console", properties: ["console": "address"]}
9999 parse:   product: {name: "1", properties: ["1": "character"]}
9999 parse:   product: {name: "console", properties: ["console": "address"]}
9999 parse:   product: {name: "2", properties: ["2": "boolean"]}
9999 parse: instruction: read-key
9999 parse:   ingredient: {name: "console", properties: ["console": "address"]}
9999 parse:   product: {name: "3", properties: ["3": "character"]}
9999 parse:   product: {name: "console", properties: ["console": "address"]}
9999 parse:   product: {name: "4", properties: ["4": "boolean"]}
9999 parse: instruction: read-key
9999 parse:   ingredient: {name: "console", properties: ["console": "address"]}
9999 parse:   product: {name: "5", properties: ["5": "character"]}
9999 parse:   product: {name: "console", properties: ["console": "address"]}
9999 parse:   product: {name: "6", properties: ["6": "boolean"]}
9999 parse: instruction: read-key
9999 parse:   ingredient: {name: "console", properties: ["console": "address"]}
9999 parse:   product: {name: "7", properties: ["7": "character"]}
9999 parse:   product: {name: "console", properties: ["console": "address"]}
9999 parse:   product: {name: "8", properties: ["8": "boolean"]}
9999 after-brace: recipe run1001
9999 after-brace: read-key ...
9999 after-brace: read-key ...
9999 after-brace: read-key ...
9999 after-brace: read-key ...
9999 trace: run: incrementing callstack depth to 2
 103 run: 1:character, console:address, 2:boolean <- read-key console:address
9999 mem: location 901 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1015
 104 run: console:address <- next-ingredient 
9999 mem: storing 1013 in location 1017
 104 run: x:event, console, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1017 is 1013
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
9999 mem: new alloc: 1025
 105 run: x:address:console <- next-ingredient 
9999 mem: storing 1013 in location 1027
 105 run: break-unless x, 
9999 mem: location 1027 is 1013
9999 run: jump-unless fell through
 105 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1027 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1000
9999 mem: location 1027 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1028
 105 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1027 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1000
9999 mem: location 1027 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1000
9999 mem: storing 1000 in location 1029
 105 run: max:number <- length *buf
9999 mem: location 1029 is 1000
9999 mem: storing 3 in location 1030
 105 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1028 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1030 is 3
9999 mem: storing 0 in location 1031
 105 run: break-unless done?, 
9999 mem: location 1031 is 0
9999 run: jumping to instruction 12
 105 run: result:event <- index *buf, *idx
9999 mem: location 1029 is 1000
9999 mem: location 1028 is 1013
9999 mem: location 1013 is 0
9999 run: address to copy is 1001
9999 run: its type is event
9999 mem: location 1001 is 0
9999 mem: location 1002 is 97
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1033
9999 mem: storing 97 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
 105 run: *idx <- add *idx, 1
9999 mem: location 1028 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1028 is 1013
9999 mem: storing 1 in location 1013
 105 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1033 is 0
9999 mem: location 1034 is 97
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1027 is 1013
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is [0, 97, 0, 0]
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1018
9999 mem: storing 97 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 1013 in location 1017
9999 mem: storing 1 in location 1022
9999 mem: storing 0 in location 1023
 104 run: jump-unless quit?, 1:offset
9999 mem: location 1023 is 0
9999 run: jumping to instruction 5
 104 run: jump-if found?, 1:offset
9999 mem: location 1022 is 1
9999 run: jumping to instruction 7
 104 run: c:address:character <- maybe-convert x, text:variant
9999 mem: location 1018 is 0
9999 mem: location 1019 is 97
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: storing 1019 in location 1024
 104 run: jump-if c, 1:offset
9999 mem: location 1024 is 1019
9999 run: jumping to instruction 10
 104 run: reply *c, console/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1024 is 1019
9999 mem: location 1019 is 97
9999 mem: location 1017 is 1013
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 97
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 mem: storing 97 in location 1
9999 mem: storing 1013 in location 901
9999 mem: storing 1 in location 2
 103 run: 3:character, console:address, 4:boolean <- read-key console:address
9999 mem: location 901 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 104 run: console:address <- next-ingredient 
9999 mem: storing 1013 in location 1017
 104 run: x:event, console, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1017 is 1013
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 105 run: x:address:console <- next-ingredient 
9999 mem: storing 1013 in location 1027
 105 run: break-unless x, 
9999 mem: location 1027 is 1013
9999 run: jump-unless fell through
 105 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1027 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1000
9999 mem: location 1027 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1028
 105 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1027 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1000
9999 mem: location 1027 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1000
9999 mem: storing 1000 in location 1029
 105 run: max:number <- length *buf
9999 mem: location 1029 is 1000
9999 mem: storing 3 in location 1030
 105 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1028 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1030 is 3
9999 mem: storing 0 in location 1031
 105 run: break-unless done?, 
9999 mem: location 1031 is 0
9999 run: jumping to instruction 12
 105 run: result:event <- index *buf, *idx
9999 mem: location 1029 is 1000
9999 mem: location 1028 is 1013
9999 mem: location 1013 is 1
9999 run: address to copy is 1005
9999 run: its type is event
9999 mem: location 1005 is 0
9999 mem: location 1006 is 98
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1033
9999 mem: storing 98 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
 105 run: *idx <- add *idx, 1
9999 mem: location 1028 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1028 is 1013
9999 mem: storing 2 in location 1013
 105 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1033 is 0
9999 mem: location 1034 is 98
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1027 is 1013
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is [0, 98, 0, 0]
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1018
9999 mem: storing 98 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 1013 in location 1017
9999 mem: storing 1 in location 1022
9999 mem: storing 0 in location 1023
 104 run: jump-unless quit?, 1:offset
9999 mem: location 1023 is 0
9999 run: jumping to instruction 5
 104 run: jump-if found?, 1:offset
9999 mem: location 1022 is 1
9999 run: jumping to instruction 7
 104 run: c:address:character <- maybe-convert x, text:variant
9999 mem: location 1018 is 0
9999 mem: location 1019 is 98
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: storing 1019 in location 1024
 104 run: jump-if c, 1:offset
9999 mem: location 1024 is 1019
9999 run: jumping to instruction 10
 104 run: reply *c, console/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1024 is 1019
9999 mem: location 1019 is 98
9999 mem: location 1017 is 1013
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 98
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 mem: storing 98 in location 3
9999 mem: storing 1013 in location 901
9999 mem: storing 1 in location 4
 103 run: 5:character, console:address, 6:boolean <- read-key console:address
9999 mem: location 901 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 104 run: console:address <- next-ingredient 
9999 mem: storing 1013 in location 1017
 104 run: x:event, console, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1017 is 1013
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 105 run: x:address:console <- next-ingredient 
9999 mem: storing 1013 in location 1027
 105 run: break-unless x, 
9999 mem: location 1027 is 1013
9999 run: jump-unless fell through
 105 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1027 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1000
9999 mem: location 1027 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1028
 105 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1027 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1000
9999 mem: location 1027 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1000
9999 mem: storing 1000 in location 1029
 105 run: max:number <- length *buf
9999 mem: location 1029 is 1000
9999 mem: storing 3 in location 1030
 105 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1028 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1030 is 3
9999 mem: storing 0 in location 1031
 105 run: break-unless done?, 
9999 mem: location 1031 is 0
9999 run: jumping to instruction 12
 105 run: result:event <- index *buf, *idx
9999 mem: location 1029 is 1000
9999 mem: location 1028 is 1013
9999 mem: location 1013 is 2
9999 run: address to copy is 1009
9999 run: its type is event
9999 mem: location 1009 is 0
9999 mem: location 1010 is 99
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1033
9999 mem: storing 99 in location 1034
9999 mem: storing 0 in location 1035
9999 mem: storing 0 in location 1036
 105 run: *idx <- add *idx, 1
9999 mem: location 1028 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1028 is 1013
9999 mem: storing 3 in location 1013
 105 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1033 is 0
9999 mem: location 1034 is 99
9999 mem: location 1035 is 0
9999 mem: location 1036 is 0
9999 mem: location 1027 is 1013
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is [0, 99, 0, 0]
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 0 in location 1018
9999 mem: storing 99 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 1013 in location 1017
9999 mem: storing 1 in location 1022
9999 mem: storing 0 in location 1023
 104 run: jump-unless quit?, 1:offset
9999 mem: location 1023 is 0
9999 run: jumping to instruction 5
 104 run: jump-if found?, 1:offset
9999 mem: location 1022 is 1
9999 run: jumping to instruction 7
 104 run: c:address:character <- maybe-convert x, text:variant
9999 mem: location 1018 is 0
9999 mem: location 1019 is 99
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: storing 1019 in location 1024
 104 run: jump-if c, 1:offset
9999 mem: location 1024 is 1019
9999 run: jumping to instruction 10
 104 run: reply *c, console/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1024 is 1019
9999 mem: location 1019 is 99
9999 mem: location 1017 is 1013
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 99
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 mem: storing 99 in location 5
9999 mem: storing 1013 in location 901
9999 mem: storing 1 in location 6
 103 run: 7:character, console:address, 8:boolean <- read-key console:address
9999 mem: location 901 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 104 run: console:address <- next-ingredient 
9999 mem: storing 1013 in location 1017
 104 run: x:event, console, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1017 is 1013
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 105 run: x:address:console <- next-ingredient 
9999 mem: storing 1013 in location 1027
 105 run: break-unless x, 
9999 mem: location 1027 is 1013
9999 run: jump-unless fell through
 105 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1027 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1000
9999 mem: location 1027 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1028
 105 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1027 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1000
9999 mem: location 1027 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1000
9999 mem: storing 1000 in location 1029
 105 run: max:number <- length *buf
9999 mem: location 1029 is 1000
9999 mem: storing 3 in location 1030
 105 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1028 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1030 is 3
9999 mem: storing 1 in location 1031
 105 run: break-unless done?, 
9999 mem: location 1031 is 1
9999 run: jump-unless fell through
 105 run: dummy:address:event <- new event:type
9999 mem: new alloc: 1038
9999 mem: storing 1038 in location 1032
 105 run: reply *dummy, x/same-as-ingredient:0, 1/found, 1/quit
9999 mem: location 1032 is 1038
9999 mem: location 1038 is 0
9999 mem: location 1039 is 0
9999 mem: location 1040 is 0
9999 mem: location 1041 is 0
9999 mem: location 1027 is 1013
9999 trace: reply: decrementing callstack depth from 4
9999 run: result 0 is [0, 0, 0, 0]
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 run: result 3 is 1
9999 mem: storing 0 in location 1018
9999 mem: storing 0 in location 1019
9999 mem: storing 0 in location 1020
9999 mem: storing 0 in location 1021
9999 mem: storing 1013 in location 1017
9999 mem: storing 1 in location 1022
9999 mem: storing 1 in location 1023
 104 run: jump-unless quit?, 1:offset
9999 mem: location 1023 is 1
9999 run: jump-unless fell through
 104 run: reply 0, console/same-as-ingredient:0, found?, quit?
9999 mem: location 1017 is 1013
9999 mem: location 1022 is 1
9999 mem: location 1023 is 1
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 0
9999 run: result 1 is 1013
9999 run: result 2 is 1
9999 mem: storing 0 in location 7
9999 mem: storing 1013 in location 901
9999 mem: storing 1 in location 8
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    1 <- 97  # 'a'
    2 <- 1
    3 <- 98  # 'b'
    4 <- 1
    5 <- 99  # 'c'
    6 <- 1
    7 <- 0  # eof
    8 <- 1
  ]
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 trace: fall-through: exiting scenario-read-key-in-mu; decrementing callstack depth from 1
