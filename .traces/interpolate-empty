schedule: main
run: -- nil
run: 1 main 0: ((1 string-address) <- new hello!)
run: 1000 => (1 string-address)
setm: (1 string-address) <= 1000
setm: size of (1 string-address) is 1
setm: (1 string-address): setting 1 to 1000
run: -- ((1 1000) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !))
run: 2 main 1: ((2 string-address) <- new abc)
run: 1007 => (2 string-address)
setm: (2 string-address) <= 1007
setm: size of (2 string-address) is 1
setm: (2 string-address): setting 2 to 1007
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c))
run: 3 main 2: ((3 string-address) <- interpolate (1 string-address) (2 string-address))
m: (1 string-address)
sizeof: (1 string-address)
m: (2 string-address)
sizeof: (2 string-address)
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c))
run: 4 interpolate 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1011 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30))
run: 5 interpolate 1: ((1 string-address) <- arg)
arg: nil 0 (1000 1007)
run: 1000 => (1 string-address)
setm: (1 string-address) <= 1000
setm: size of (1 string-address) is 1
setm: (1 string-address): setting 1012 to 1000
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000))
run: 6 interpolate 2: ((2 integer) <- len (1 string-address deref))
array-len: (1 string-address deref)
m: (1000 integer global)
sizeof: (1000 integer global)
run: 6 => (2 integer)
setm: (2 integer) <= 6
setm: size of (2 integer) is 1
setm: (2 integer): setting 1013 to 6
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6))
run: 7 interpolate 3: ((3 string-address) <- arg)
arg: nil 1 (1000 1007)
run: 1007 => (3 string-address)
setm: (3 string-address) <= 1007
setm: size of (3 string-address) is 1
setm: (3 string-address): setting 1014 to 1007
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007))
run: 8 interpolate 4: ((4 integer) <- len (3 string-address deref))
array-len: (3 string-address deref)
m: (1007 integer global)
sizeof: (1007 integer global)
run: 3 => (4 integer)
setm: (4 integer) <= 3
setm: size of (4 integer) is 1
setm: (4 integer): setting 1015 to 3
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3))
run: 9 interpolate 5: ((5 integer) <- add (2 integer) (4 integer))
m: (2 integer)
sizeof: (2 integer)
m: (4 integer)
sizeof: (4 integer)
add: 6 3
m: (2 integer)
sizeof: (2 integer)
m: (4 integer)
sizeof: (4 integer)
run: 9 => (5 integer)
setm: (5 integer) <= 9
setm: size of (5 integer) is 1
setm: (5 integer): setting 1016 to 9
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 9))
run: 10 interpolate 6: ((5 integer) <- sub (5 integer) (1 literal))
m: (5 integer)
sizeof: (5 integer)
run: 8 => (5 integer)
setm: (5 integer) <= 8
setm: size of (5 integer) is 1
setm: (5 integer): setting 1016 to 8
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8))
run: 11 interpolate 7: ((6 string-address) <- new (string literal) (5 integer))
m: (5 integer)
sizeof: (5 integer)
sizeof: byte
run: 1042 => (6 string-address)
setm: (6 string-address) <= 1042
setm: size of (6 string-address) is 1
setm: (6 string-address): setting 1017 to 1042
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1042 8))
run: 12 interpolate 8: ((7 integer) <- copy (0 literal))
run: 0 => (7 integer)
setm: (7 integer) <= 0
setm: size of (7 integer) is 1
setm: (7 integer): setting 1018 to 0
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 0) (1042 8))
run: 13 interpolate 9: ((8 integer) <- copy (0 literal))
run: 0 => (8 integer)
setm: (8 integer) <= 0
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 0
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 0) (1019 0) (1042 8))
run: 14 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1020 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 0) (1019 0) (1020 t) (1042 8))
run: 15 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 0) (1019 0) (1020 t) (1042 8))
run: 16 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
m: (8 integer)
sizeof: (8 integer)
array-info: (1 string-address deref) 0
array-len: (1000 string global)
m: (1000 integer global)
sizeof: (1000 integer global)
sizeof: byte
index: (1 string-address deref) (8 integer) => 1001 byte
m: (1001 byte global)
sizeof: (1001 byte global)
run: h => (10 byte)
setm: (10 byte) <= h
setm: size of (10 byte) is 1
setm: (10 byte): setting 1021 to h
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 0) (1019 0) (1020 t) (1021 h) (1042 8))
run: 17 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1022 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 0) (1019 0) (1020 t) (1021 h) (1042 8))
run: 18 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 0) (1019 0) (1020 t) (1021 h) (1042 8))
run: 19 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
m: (7 integer)
sizeof: (7 integer)
array-info: (6 string-address deref) 0
array-len: (1042 string global)
m: (1042 integer global)
sizeof: (1042 integer global)
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1043
run: 1043 => (12 byte-address)
setm: (12 byte-address) <= 1043
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1023 to 1043
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 0) (1019 0) (1020 t) (1021 h) (1023 1043) (1042 8))
run: 20 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: h => (12 byte-address deref)
setm: (12 byte-address deref) <= h
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1043 to h
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 0) (1019 0) (1020 t) (1021 h) (1023 1043) (1042 8) (1043 h))
run: 21 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 0 1
m: (8 integer)
sizeof: (8 integer)
run: 1 => (8 integer)
setm: (8 integer) <= 1
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 1
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 0) (1019 1) (1020 t) (1021 h) (1023 1043) (1042 8) (1043 h))
run: 22 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 0 1
m: (7 integer)
sizeof: (7 integer)
run: 1 => (7 integer)
setm: (7 integer) <= 1
setm: size of (7 integer) is 1
setm: (7 integer): setting 1018 to 1
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 1) (1019 1) (1020 t) (1021 h) (1023 1043) (1042 8) (1043 h))
run: 23 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 1) (1019 1) (1020 t) (1021 h) (1023 1043) (1042 8) (1043 h))
run: 24 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1020 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 1) (1019 1) (1020 t) (1021 h) (1023 1043) (1042 8) (1043 h))
run: 25 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 1) (1019 1) (1020 t) (1021 h) (1023 1043) (1042 8) (1043 h))
run: 26 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
m: (8 integer)
sizeof: (8 integer)
array-info: (1 string-address deref) 1
array-len: (1000 string global)
m: (1000 integer global)
sizeof: (1000 integer global)
sizeof: byte
index: (1 string-address deref) (8 integer) => 1002 byte
m: (1002 byte global)
sizeof: (1002 byte global)
run: e => (10 byte)
setm: (10 byte) <= e
setm: size of (10 byte) is 1
setm: (10 byte): setting 1021 to e
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 1) (1019 1) (1020 t) (1021 e) (1023 1043) (1042 8) (1043 h))
run: 27 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1022 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 1) (1019 1) (1020 t) (1021 e) (1023 1043) (1042 8) (1043 h))
run: 28 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 1) (1019 1) (1020 t) (1021 e) (1023 1043) (1042 8) (1043 h))
run: 29 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
m: (7 integer)
sizeof: (7 integer)
array-info: (6 string-address deref) 1
array-len: (1042 string global)
m: (1042 integer global)
sizeof: (1042 integer global)
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1044
run: 1044 => (12 byte-address)
setm: (12 byte-address) <= 1044
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1023 to 1044
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 1) (1019 1) (1020 t) (1021 e) (1023 1044) (1042 8) (1043 h))
run: 30 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: e => (12 byte-address deref)
setm: (12 byte-address deref) <= e
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1044 to e
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 1) (1019 1) (1020 t) (1021 e) (1023 1044) (1042 8) (1043 h) (1044 e))
run: 31 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 1 1
m: (8 integer)
sizeof: (8 integer)
run: 2 => (8 integer)
setm: (8 integer) <= 2
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 2
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 1) (1019 2) (1020 t) (1021 e) (1023 1044) (1042 8) (1043 h) (1044 e))
run: 32 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 1 1
m: (7 integer)
sizeof: (7 integer)
run: 2 => (7 integer)
setm: (7 integer) <= 2
setm: size of (7 integer) is 1
setm: (7 integer): setting 1018 to 2
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 2) (1019 2) (1020 t) (1021 e) (1023 1044) (1042 8) (1043 h) (1044 e))
run: 33 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 2) (1019 2) (1020 t) (1021 e) (1023 1044) (1042 8) (1043 h) (1044 e))
run: 34 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1020 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 2) (1019 2) (1020 t) (1021 e) (1023 1044) (1042 8) (1043 h) (1044 e))
run: 35 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 2) (1019 2) (1020 t) (1021 e) (1023 1044) (1042 8) (1043 h) (1044 e))
run: 36 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
m: (8 integer)
sizeof: (8 integer)
array-info: (1 string-address deref) 2
array-len: (1000 string global)
m: (1000 integer global)
sizeof: (1000 integer global)
sizeof: byte
index: (1 string-address deref) (8 integer) => 1003 byte
m: (1003 byte global)
sizeof: (1003 byte global)
run: l => (10 byte)
setm: (10 byte) <= l
setm: size of (10 byte) is 1
setm: (10 byte): setting 1021 to l
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 2) (1019 2) (1020 t) (1021 l) (1023 1044) (1042 8) (1043 h) (1044 e))
run: 37 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1022 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 2) (1019 2) (1020 t) (1021 l) (1023 1044) (1042 8) (1043 h) (1044 e))
run: 38 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 2) (1019 2) (1020 t) (1021 l) (1023 1044) (1042 8) (1043 h) (1044 e))
run: 39 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
m: (7 integer)
sizeof: (7 integer)
array-info: (6 string-address deref) 2
array-len: (1042 string global)
m: (1042 integer global)
sizeof: (1042 integer global)
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1045
run: 1045 => (12 byte-address)
setm: (12 byte-address) <= 1045
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1023 to 1045
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 2) (1019 2) (1020 t) (1021 l) (1023 1045) (1042 8) (1043 h) (1044 e))
run: 40 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: l => (12 byte-address deref)
setm: (12 byte-address deref) <= l
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1045 to l
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 2) (1019 2) (1020 t) (1021 l) (1023 1045) (1042 8) (1043 h) (1044 e) (1045 l))
run: 41 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 2 1
m: (8 integer)
sizeof: (8 integer)
run: 3 => (8 integer)
setm: (8 integer) <= 3
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 3
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 2) (1019 3) (1020 t) (1021 l) (1023 1045) (1042 8) (1043 h) (1044 e) (1045 l))
run: 42 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 2 1
m: (7 integer)
sizeof: (7 integer)
run: 3 => (7 integer)
setm: (7 integer) <= 3
setm: size of (7 integer) is 1
setm: (7 integer): setting 1018 to 3
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 3) (1019 3) (1020 t) (1021 l) (1023 1045) (1042 8) (1043 h) (1044 e) (1045 l))
run: 43 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 3) (1019 3) (1020 t) (1021 l) (1023 1045) (1042 8) (1043 h) (1044 e) (1045 l))
run: 44 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1020 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 3) (1019 3) (1020 t) (1021 l) (1023 1045) (1042 8) (1043 h) (1044 e) (1045 l))
run: 45 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 3) (1019 3) (1020 t) (1021 l) (1023 1045) (1042 8) (1043 h) (1044 e) (1045 l))
run: 46 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
m: (8 integer)
sizeof: (8 integer)
array-info: (1 string-address deref) 3
array-len: (1000 string global)
m: (1000 integer global)
sizeof: (1000 integer global)
sizeof: byte
index: (1 string-address deref) (8 integer) => 1004 byte
m: (1004 byte global)
sizeof: (1004 byte global)
run: l => (10 byte)
setm: (10 byte) <= l
setm: size of (10 byte) is 1
setm: (10 byte): setting 1021 to l
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 3) (1019 3) (1020 t) (1021 l) (1023 1045) (1042 8) (1043 h) (1044 e) (1045 l))
run: 47 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1022 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 3) (1019 3) (1020 t) (1021 l) (1023 1045) (1042 8) (1043 h) (1044 e) (1045 l))
run: 48 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 3) (1019 3) (1020 t) (1021 l) (1023 1045) (1042 8) (1043 h) (1044 e) (1045 l))
run: 49 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
m: (7 integer)
sizeof: (7 integer)
array-info: (6 string-address deref) 3
array-len: (1042 string global)
m: (1042 integer global)
sizeof: (1042 integer global)
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1046
run: 1046 => (12 byte-address)
setm: (12 byte-address) <= 1046
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1023 to 1046
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 3) (1019 3) (1020 t) (1021 l) (1023 1046) (1042 8) (1043 h) (1044 e) (1045 l))
run: 50 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: l => (12 byte-address deref)
setm: (12 byte-address deref) <= l
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1046 to l
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 3) (1019 3) (1020 t) (1021 l) (1023 1046) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l))
run: 51 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 3 1
m: (8 integer)
sizeof: (8 integer)
run: 4 => (8 integer)
setm: (8 integer) <= 4
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 4
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 3) (1019 4) (1020 t) (1021 l) (1023 1046) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l))
run: 52 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 3 1
m: (7 integer)
sizeof: (7 integer)
run: 4 => (7 integer)
setm: (7 integer) <= 4
setm: size of (7 integer) is 1
setm: (7 integer): setting 1018 to 4
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 4) (1019 4) (1020 t) (1021 l) (1023 1046) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l))
run: 53 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 4) (1019 4) (1020 t) (1021 l) (1023 1046) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l))
run: 54 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1020 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 4) (1019 4) (1020 t) (1021 l) (1023 1046) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l))
run: 55 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 4) (1019 4) (1020 t) (1021 l) (1023 1046) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l))
run: 56 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
m: (8 integer)
sizeof: (8 integer)
array-info: (1 string-address deref) 4
array-len: (1000 string global)
m: (1000 integer global)
sizeof: (1000 integer global)
sizeof: byte
index: (1 string-address deref) (8 integer) => 1005 byte
m: (1005 byte global)
sizeof: (1005 byte global)
run: o => (10 byte)
setm: (10 byte) <= o
setm: size of (10 byte) is 1
setm: (10 byte): setting 1021 to o
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 4) (1019 4) (1020 t) (1021 o) (1023 1046) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l))
run: 57 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1022 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 4) (1019 4) (1020 t) (1021 o) (1023 1046) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l))
run: 58 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 4) (1019 4) (1020 t) (1021 o) (1023 1046) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l))
run: 59 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
m: (7 integer)
sizeof: (7 integer)
array-info: (6 string-address deref) 4
array-len: (1042 string global)
m: (1042 integer global)
sizeof: (1042 integer global)
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1047
run: 1047 => (12 byte-address)
setm: (12 byte-address) <= 1047
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1023 to 1047
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 4) (1019 4) (1020 t) (1021 o) (1023 1047) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l))
run: 60 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: o => (12 byte-address deref)
setm: (12 byte-address deref) <= o
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1047 to o
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 4) (1019 4) (1020 t) (1021 o) (1023 1047) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o))
run: 61 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 4 1
m: (8 integer)
sizeof: (8 integer)
run: 5 => (8 integer)
setm: (8 integer) <= 5
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 5
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 4) (1019 5) (1020 t) (1021 o) (1023 1047) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o))
run: 62 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 4 1
m: (7 integer)
sizeof: (7 integer)
run: 5 => (7 integer)
setm: (7 integer) <= 5
setm: size of (7 integer) is 1
setm: (7 integer): setting 1018 to 5
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 5) (1019 5) (1020 t) (1021 o) (1023 1047) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o))
run: 63 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 5) (1019 5) (1020 t) (1021 o) (1023 1047) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o))
run: 64 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (9 boolean)
setm: (9 boolean) <= t
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1020 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 5) (1019 5) (1020 t) (1021 o) (1023 1047) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o))
run: 65 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 5) (1019 5) (1020 t) (1021 o) (1023 1047) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o))
run: 66 interpolate 12: ((10 byte) <- index (1 string-address deref) (8 integer))
m: (8 integer)
sizeof: (8 integer)
array-info: (1 string-address deref) 5
array-len: (1000 string global)
m: (1000 integer global)
sizeof: (1000 integer global)
sizeof: byte
index: (1 string-address deref) (8 integer) => 1006 byte
m: (1006 byte global)
sizeof: (1006 byte global)
run: ! => (10 byte)
setm: (10 byte) <= !
setm: size of (10 byte) is 1
setm: (10 byte): setting 1021 to !
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 5) (1019 5) (1020 t) (1021 !) (1023 1047) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o))
run: 67 interpolate 13: ((11 boolean) <- eq (10 byte) (_ literal))
m: (10 byte)
sizeof: (10 byte)
run: nil => (11 boolean)
setm: (11 boolean) <= nil
setm: size of (11 boolean) is 1
setm: (11 boolean): setting 1022 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 5) (1019 5) (1020 t) (1021 !) (1023 1047) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o))
run: 68 interpolate 14: (jump-if (11 boolean) (5 offset))
m: (11 boolean)
sizeof: (11 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 5) (1019 5) (1020 t) (1021 !) (1023 1047) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o))
run: 69 interpolate 15: ((12 byte-address) <- index-address (6 string-address deref) (7 integer))
m: (7 integer)
sizeof: (7 integer)
array-info: (6 string-address deref) 5
array-len: (1042 string global)
m: (1042 integer global)
sizeof: (1042 integer global)
sizeof: byte
index-address: (6 string-address deref) (7 integer) => 1048
run: 1048 => (12 byte-address)
setm: (12 byte-address) <= 1048
setm: size of (12 byte-address) is 1
setm: (12 byte-address): setting 1023 to 1048
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 5) (1019 5) (1020 t) (1021 !) (1023 1048) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o))
run: 70 interpolate 16: ((12 byte-address deref) <- copy (10 byte))
m: (10 byte)
sizeof: (10 byte)
run: ! => (12 byte-address deref)
setm: (12 byte-address deref) <= !
setm: size of (12 byte-address deref) is 1
setm: (12 byte-address deref): setting 1048 to !
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 5) (1019 5) (1020 t) (1021 !) (1023 1048) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o) (1048 !))
run: 71 interpolate 17: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 5 1
m: (8 integer)
sizeof: (8 integer)
run: 6 => (8 integer)
setm: (8 integer) <= 6
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 6
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 5) (1019 6) (1020 t) (1021 !) (1023 1048) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o) (1048 !))
run: 72 interpolate 18: ((7 integer) <- add (7 integer) (1 literal))
m: (7 integer)
sizeof: (7 integer)
add: 5 1
m: (7 integer)
sizeof: (7 integer)
run: 6 => (7 integer)
setm: (7 integer) <= 6
setm: size of (7 integer) is 1
setm: (7 integer): setting 1018 to 6
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 6) (1019 6) (1020 t) (1021 !) (1023 1048) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o) (1048 !))
run: 73 interpolate 19: (jump (-10 offset))
jump: jumping to 10
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 6) (1019 6) (1020 t) (1021 !) (1023 1048) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o) (1048 !))
run: 74 interpolate 10: ((9 boolean) <- lt (8 integer) (2 integer))
m: (8 integer)
sizeof: (8 integer)
m: (2 integer)
sizeof: (2 integer)
run: nil => (9 boolean)
setm: (9 boolean) <= nil
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1020 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 6) (1019 6) (1021 !) (1023 1048) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o) (1048 !))
run: 75 interpolate 11: (jump-unless (9 boolean) (26 offset))
m: (9 boolean)
sizeof: (9 boolean)
jump: checking that nil is not t
jump: jumping to 38
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 30) (1012 1000) (1013 6) (1014 1007) (1015 3) (1016 8) (1017 1042) (1018 6) (1019 6) (1021 !) (1023 1048) (1042 8) (1043 h) (1044 e) (1045 l) (1046 l) (1047 o) (1048 !))
run: 76 interpolate 38: (reply (6 string-address))
m: (6 string-address)
sizeof: (6 string-address)
reply: ((6 string-address)) ((3 string-address))
reply: 1042 => (3 string-address)
setm: (3 string-address) <= 1042
setm: size of (3 string-address) is 1
setm: (3 string-address): setting 3 to 1042
schedule: done with routine
