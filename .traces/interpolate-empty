c{0: 0 (((1 string-address)) <- ((new)) hello!) -- nil
c{0: 1 (((2 string-address)) <- ((new)) abc) -- nil
c{0: 2 (((3 string-address)) <- ((interpolate)) ((1 string-address)) ((2 string-address))) -- nil
c{1: 0 ✓ (((1 string-address)) <- ((new)) hello!)
c{1: 1 ✓ (((2 string-address)) <- ((new)) abc)
c{1: 2 ✓ (((3 string-address)) <- ((interpolate)) ((1 string-address)) ((2 string-address)))
cn0: convert-names in main
cn0: (((1 string-address)) <- ((new)) hello!) nil nil
cn0: checking arg hello!
cn0: checking oarg ((1 string-address))
maybe-add: ((1 string-address))
cn0: (((2 string-address)) <- ((new)) abc) nil nil
cn0: checking arg abc
cn0: checking oarg ((2 string-address))
maybe-add: ((2 string-address))
cn0: (((3 string-address)) <- ((interpolate)) ((1 string-address)) ((2 string-address))) nil nil
cn0: checking arg ((1 string-address))
maybe-add: ((1 string-address))
cn0: checking arg ((2 string-address))
maybe-add: ((2 string-address))
cn0: checking oarg ((3 string-address))
maybe-add: ((3 string-address))
cn1: (((1 string-address)) <- ((new)) hello!)
cn1: (((2 string-address)) <- ((new)) abc)
cn1: (((3 string-address)) <- ((interpolate)) ((1 string-address)) ((2 string-address)))
schedule: main
run: main 0: (((1 string-address)) <- ((new)) hello!)
run: main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: main 1: (((2 string-address)) <- ((new)) abc)
run: main 1: 1007 => ((2 string-address))
mem: ((2 string-address)): 2 <= 1007
run: main 2: (((3 string-address)) <- ((interpolate)) ((1 string-address)) ((2 string-address)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1007
run: interpolate/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((60 literal)))
run: interpolate/main 0: 1011 => ((default-space space-address))
run: interpolate/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1007)
run: interpolate/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1013 <= 1000
run: interpolate/main 2: (((2 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 6
run: interpolate/main 2: 6 => ((2 integer))
mem: ((2 integer)): 1014 <= 6
run: interpolate/main 3: (((3 integer)) <- ((copy)) ((2 integer)))
mem: ((2 integer)) => 6
run: interpolate/main 3: 6 => ((3 integer))
mem: ((3 integer)): 1015 <= 6
run: interpolate/main 4: (((4 string-address)) ((5 boolean)) <- ((next-input)))
arg: nil 1 (1000 1007)
run: interpolate/main 4: 1007 => ((4 string-address))
mem: ((4 string-address)): 1016 <= 1007
run: interpolate/main 4: t => ((5 boolean))
mem: ((5 boolean)): 1017 <= t
run: interpolate/main 5: (((jump-unless)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => t
run: interpolate/main 6: (((6 integer)) <- ((length)) ((4 string-address) (deref)))
array-len: ((4 string-address) (deref))
mem: ((1007 integer) (raw)) => 3
run: interpolate/main 6: 3 => ((6 integer))
mem: ((6 integer)): 1018 <= 3
run: interpolate/main 7: (((3 integer)) <- ((add)) ((3 integer)) ((6 integer)))
mem: ((3 integer)) => 6
mem: ((6 integer)) => 3
run: interpolate/main 7: 9 => ((3 integer))
mem: ((3 integer)): 1015 <= 9
run: interpolate/main 8: (((3 integer)) <- ((subtract)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 9
run: interpolate/main 8: 8 => ((3 integer))
mem: ((3 integer)): 1015 <= 8
run: interpolate/main 9: (((jump)) ((-6 offset)))
run: interpolate/main 4: (((4 string-address)) ((5 boolean)) <- ((next-input)))
arg: nil 2 (1000 1007)
run: interpolate/main 4: nil => ((4 string-address))
mem: ((4 string-address)): 1016 <= nil
run: interpolate/main 4: nil => ((5 boolean))
mem: ((5 boolean)): 1017 <= nil
run: interpolate/main 5: (((jump-unless)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: interpolate/main 10: (_ <- ((input)) ((0 literal)))
arg: (((0 literal))) 0 (1000 1007)
run: interpolate/main 11: (((7 string-address)) <- ((new)) ((string literal)) ((3 integer)))
mem: ((3 integer)) => 8
run: interpolate/main 11: 1072 => ((7 string-address))
mem: ((7 string-address)): 1019 <= 1072
run: interpolate/main 12: (((8 integer)) <- ((copy)) ((0 literal)))
run: interpolate/main 12: 0 => ((8 integer))
mem: ((8 integer)): 1020 <= 0
run: interpolate/main 13: (((9 integer)) <- ((copy)) ((0 literal)))
run: interpolate/main 13: 0 => ((9 integer))
mem: ((9 integer)): 1021 <= 0
run: interpolate/main 14: (((4 string-address)) ((5 boolean)) <- ((next-input)))
arg: nil 1 (1000 1007)
run: interpolate/main 14: 1007 => ((4 string-address))
mem: ((4 string-address)): 1016 <= 1007
run: interpolate/main 14: t => ((5 boolean))
mem: ((5 boolean)): 1017 <= t
run: interpolate/main 15: (((jump-unless)) ((5 boolean)) ((21 offset)))
mem: ((5 boolean)) => t
run: interpolate/main 16: (((10 boolean)) <- ((greater-or-equal)) ((9 integer)) ((2 integer)))
mem: ((9 integer)) => 0
mem: ((2 integer)) => 6
run: interpolate/main 16: nil => ((10 boolean))
mem: ((10 boolean)): 1022 <= nil
run: interpolate/main 17: (((jump-if)) ((10 boolean)) ((19 offset)))
mem: ((10 boolean)) => nil
run: interpolate/main 18: (((11 byte)) <- ((index)) ((1 string-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 0
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1001 byte) (raw)) => h
run: interpolate/main 18: #\h => ((11 byte))
mem: ((11 byte)): 1023 <= #\h
run: interpolate/main 19: (((12 boolean)) <- ((equal)) ((11 byte)) ((_ literal)))
mem: ((11 byte)) => h
run: interpolate/main 19: nil => ((12 boolean))
mem: ((12 boolean)): 1024 <= nil
run: interpolate/main 20: (((jump-if)) ((12 boolean)) ((5 offset)))
mem: ((12 boolean)) => nil
run: interpolate/main 21: (((13 byte-address)) <- ((index-address)) ((7 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 0
array-len: ((1072 string) (raw))
mem: ((1072 integer) (raw)) => 8
run: interpolate/main 21: 1073 => ((13 byte-address))
mem: ((13 byte-address)): 1025 <= 1073
run: interpolate/main 22: (((13 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => h
run: interpolate/main 22: #\h => ((13 byte-address) (deref))
mem: ((13 byte-address) (deref)): 1073 <= #\h
run: interpolate/main 23: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 0
run: interpolate/main 23: 1 => ((9 integer))
mem: ((9 integer)): 1021 <= 1
run: interpolate/main 24: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 0
run: interpolate/main 24: 1 => ((8 integer))
mem: ((8 integer)): 1020 <= 1
run: interpolate/main 25: (((jump)) ((-10 offset)))
run: interpolate/main 16: (((10 boolean)) <- ((greater-or-equal)) ((9 integer)) ((2 integer)))
mem: ((9 integer)) => 1
mem: ((2 integer)) => 6
run: interpolate/main 16: nil => ((10 boolean))
mem: ((10 boolean)): 1022 <= nil
run: interpolate/main 17: (((jump-if)) ((10 boolean)) ((19 offset)))
mem: ((10 boolean)) => nil
run: interpolate/main 18: (((11 byte)) <- ((index)) ((1 string-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 1
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1002 byte) (raw)) => e
run: interpolate/main 18: #\e => ((11 byte))
mem: ((11 byte)): 1023 <= #\e
run: interpolate/main 19: (((12 boolean)) <- ((equal)) ((11 byte)) ((_ literal)))
mem: ((11 byte)) => e
run: interpolate/main 19: nil => ((12 boolean))
mem: ((12 boolean)): 1024 <= nil
run: interpolate/main 20: (((jump-if)) ((12 boolean)) ((5 offset)))
mem: ((12 boolean)) => nil
run: interpolate/main 21: (((13 byte-address)) <- ((index-address)) ((7 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 1
array-len: ((1072 string) (raw))
mem: ((1072 integer) (raw)) => 8
run: interpolate/main 21: 1074 => ((13 byte-address))
mem: ((13 byte-address)): 1025 <= 1074
run: interpolate/main 22: (((13 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => e
run: interpolate/main 22: #\e => ((13 byte-address) (deref))
mem: ((13 byte-address) (deref)): 1074 <= #\e
run: interpolate/main 23: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 1
run: interpolate/main 23: 2 => ((9 integer))
mem: ((9 integer)): 1021 <= 2
run: interpolate/main 24: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 1
run: interpolate/main 24: 2 => ((8 integer))
mem: ((8 integer)): 1020 <= 2
run: interpolate/main 25: (((jump)) ((-10 offset)))
run: interpolate/main 16: (((10 boolean)) <- ((greater-or-equal)) ((9 integer)) ((2 integer)))
mem: ((9 integer)) => 2
mem: ((2 integer)) => 6
run: interpolate/main 16: nil => ((10 boolean))
mem: ((10 boolean)): 1022 <= nil
run: interpolate/main 17: (((jump-if)) ((10 boolean)) ((19 offset)))
mem: ((10 boolean)) => nil
run: interpolate/main 18: (((11 byte)) <- ((index)) ((1 string-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 2
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1003 byte) (raw)) => l
run: interpolate/main 18: #\l => ((11 byte))
mem: ((11 byte)): 1023 <= #\l
run: interpolate/main 19: (((12 boolean)) <- ((equal)) ((11 byte)) ((_ literal)))
mem: ((11 byte)) => l
run: interpolate/main 19: nil => ((12 boolean))
mem: ((12 boolean)): 1024 <= nil
run: interpolate/main 20: (((jump-if)) ((12 boolean)) ((5 offset)))
mem: ((12 boolean)) => nil
run: interpolate/main 21: (((13 byte-address)) <- ((index-address)) ((7 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 2
array-len: ((1072 string) (raw))
mem: ((1072 integer) (raw)) => 8
run: interpolate/main 21: 1075 => ((13 byte-address))
mem: ((13 byte-address)): 1025 <= 1075
run: interpolate/main 22: (((13 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => l
run: interpolate/main 22: #\l => ((13 byte-address) (deref))
mem: ((13 byte-address) (deref)): 1075 <= #\l
run: interpolate/main 23: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 2
run: interpolate/main 23: 3 => ((9 integer))
mem: ((9 integer)): 1021 <= 3
run: interpolate/main 24: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 2
run: interpolate/main 24: 3 => ((8 integer))
mem: ((8 integer)): 1020 <= 3
run: interpolate/main 25: (((jump)) ((-10 offset)))
run: interpolate/main 16: (((10 boolean)) <- ((greater-or-equal)) ((9 integer)) ((2 integer)))
mem: ((9 integer)) => 3
mem: ((2 integer)) => 6
run: interpolate/main 16: nil => ((10 boolean))
mem: ((10 boolean)): 1022 <= nil
run: interpolate/main 17: (((jump-if)) ((10 boolean)) ((19 offset)))
mem: ((10 boolean)) => nil
run: interpolate/main 18: (((11 byte)) <- ((index)) ((1 string-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 3
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1004 byte) (raw)) => l
run: interpolate/main 18: #\l => ((11 byte))
mem: ((11 byte)): 1023 <= #\l
run: interpolate/main 19: (((12 boolean)) <- ((equal)) ((11 byte)) ((_ literal)))
mem: ((11 byte)) => l
run: interpolate/main 19: nil => ((12 boolean))
mem: ((12 boolean)): 1024 <= nil
run: interpolate/main 20: (((jump-if)) ((12 boolean)) ((5 offset)))
mem: ((12 boolean)) => nil
run: interpolate/main 21: (((13 byte-address)) <- ((index-address)) ((7 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 3
array-len: ((1072 string) (raw))
mem: ((1072 integer) (raw)) => 8
run: interpolate/main 21: 1076 => ((13 byte-address))
mem: ((13 byte-address)): 1025 <= 1076
run: interpolate/main 22: (((13 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => l
run: interpolate/main 22: #\l => ((13 byte-address) (deref))
mem: ((13 byte-address) (deref)): 1076 <= #\l
run: interpolate/main 23: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 3
run: interpolate/main 23: 4 => ((9 integer))
mem: ((9 integer)): 1021 <= 4
run: interpolate/main 24: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 3
run: interpolate/main 24: 4 => ((8 integer))
mem: ((8 integer)): 1020 <= 4
run: interpolate/main 25: (((jump)) ((-10 offset)))
run: interpolate/main 16: (((10 boolean)) <- ((greater-or-equal)) ((9 integer)) ((2 integer)))
mem: ((9 integer)) => 4
mem: ((2 integer)) => 6
run: interpolate/main 16: nil => ((10 boolean))
mem: ((10 boolean)): 1022 <= nil
run: interpolate/main 17: (((jump-if)) ((10 boolean)) ((19 offset)))
mem: ((10 boolean)) => nil
run: interpolate/main 18: (((11 byte)) <- ((index)) ((1 string-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 4
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1005 byte) (raw)) => o
run: interpolate/main 18: #\o => ((11 byte))
mem: ((11 byte)): 1023 <= #\o
run: interpolate/main 19: (((12 boolean)) <- ((equal)) ((11 byte)) ((_ literal)))
mem: ((11 byte)) => o
run: interpolate/main 19: nil => ((12 boolean))
mem: ((12 boolean)): 1024 <= nil
run: interpolate/main 20: (((jump-if)) ((12 boolean)) ((5 offset)))
mem: ((12 boolean)) => nil
run: interpolate/main 21: (((13 byte-address)) <- ((index-address)) ((7 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 4
array-len: ((1072 string) (raw))
mem: ((1072 integer) (raw)) => 8
run: interpolate/main 21: 1077 => ((13 byte-address))
mem: ((13 byte-address)): 1025 <= 1077
run: interpolate/main 22: (((13 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => o
run: interpolate/main 22: #\o => ((13 byte-address) (deref))
mem: ((13 byte-address) (deref)): 1077 <= #\o
run: interpolate/main 23: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 4
run: interpolate/main 23: 5 => ((9 integer))
mem: ((9 integer)): 1021 <= 5
run: interpolate/main 24: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 4
run: interpolate/main 24: 5 => ((8 integer))
mem: ((8 integer)): 1020 <= 5
run: interpolate/main 25: (((jump)) ((-10 offset)))
run: interpolate/main 16: (((10 boolean)) <- ((greater-or-equal)) ((9 integer)) ((2 integer)))
mem: ((9 integer)) => 5
mem: ((2 integer)) => 6
run: interpolate/main 16: nil => ((10 boolean))
mem: ((10 boolean)): 1022 <= nil
run: interpolate/main 17: (((jump-if)) ((10 boolean)) ((19 offset)))
mem: ((10 boolean)) => nil
run: interpolate/main 18: (((11 byte)) <- ((index)) ((1 string-address) (deref)) ((9 integer)))
mem: ((9 integer)) => 5
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1006 byte) (raw)) => !
run: interpolate/main 18: #\! => ((11 byte))
mem: ((11 byte)): 1023 <= #\!
run: interpolate/main 19: (((12 boolean)) <- ((equal)) ((11 byte)) ((_ literal)))
mem: ((11 byte)) => !
run: interpolate/main 19: nil => ((12 boolean))
mem: ((12 boolean)): 1024 <= nil
run: interpolate/main 20: (((jump-if)) ((12 boolean)) ((5 offset)))
mem: ((12 boolean)) => nil
run: interpolate/main 21: (((13 byte-address)) <- ((index-address)) ((7 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 5
array-len: ((1072 string) (raw))
mem: ((1072 integer) (raw)) => 8
run: interpolate/main 21: 1078 => ((13 byte-address))
mem: ((13 byte-address)): 1025 <= 1078
run: interpolate/main 22: (((13 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => !
run: interpolate/main 22: #\! => ((13 byte-address) (deref))
mem: ((13 byte-address) (deref)): 1078 <= #\!
run: interpolate/main 23: (((9 integer)) <- ((add)) ((9 integer)) ((1 literal)))
mem: ((9 integer)) => 5
run: interpolate/main 23: 6 => ((9 integer))
mem: ((9 integer)): 1021 <= 6
run: interpolate/main 24: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 5
run: interpolate/main 24: 6 => ((8 integer))
mem: ((8 integer)): 1020 <= 6
run: interpolate/main 25: (((jump)) ((-10 offset)))
run: interpolate/main 16: (((10 boolean)) <- ((greater-or-equal)) ((9 integer)) ((2 integer)))
mem: ((9 integer)) => 6
mem: ((2 integer)) => 6
run: interpolate/main 16: t => ((10 boolean))
mem: ((10 boolean)): 1022 <= t
run: interpolate/main 17: (((jump-if)) ((10 boolean)) ((19 offset)))
mem: ((10 boolean)) => t
run: interpolate/main 37: (((10 boolean)) <- ((greater-or-equal)) ((9 integer)) ((2 integer)))
mem: ((9 integer)) => 6
mem: ((2 integer)) => 6
run: interpolate/main 37: t => ((10 boolean))
mem: ((10 boolean)): 1022 <= t
run: interpolate/main 38: (((jump-if)) ((10 boolean)) ((6 offset)))
mem: ((10 boolean)) => t
run: interpolate/main 45: (((reply)) ((7 string-address)))
mem: ((7 string-address)) => 1072
run: main 2: 1072 => ((3 string-address))
mem: ((3 string-address)): 3 <= 1072
schedule: done with routine nil
