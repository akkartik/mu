schedule: main
run: -- nil
run: 1 main 0: ((1 string-address) <- new hello!)
run: 1000 => (1 string-address)
setm: (1 string-address) <= 1000
setm: size of (1 string-address) is 1
setm: (1 string-address): setting 1 to 1000
run: -- ((1 1000) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !))
run: 2 main 1: ((2 string-address) <- new abc)
run: 1007 => (2 string-address)
setm: (2 string-address) <= 1007
setm: size of (2 string-address) is 1
setm: (2 string-address): setting 2 to 1007
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c))
run: 3 main 2: ((3 string-address) <- interpolate (1 string-address) (2 string-address))
m: (1 string-address)
sizeof: (1 string-address)
m: (2 string-address)
sizeof: (2 string-address)
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c))
run: 4 interpolate 0: ((default-scope scope-address) <- new (scope literal) (60 literal))
sizeof: location
run: 1011 => (default-scope scope-address)
sizeof: (default-scope scope-address)
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60))
run: 5 interpolate 1: ((1 string-address) <- arg)
arg: nil 0 (1000 1007)
run: 1000 => (1 string-address)
setm: (1 string-address) <= 1000
setm: size of (1 string-address) is 1
setm: (1 string-address): setting 1012 to 1000
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000))
run: 6 interpolate 2: ((2 integer) <- len (1 string-address deref))
array-len: (1 string-address deref)
m: (1000 integer global)
sizeof: (1000 integer global)
run: 6 => (2 integer)
setm: (2 integer) <= 6
setm: size of (2 integer) is 1
setm: (2 integer): setting 1013 to 6
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6))
run: 7 interpolate 3: ((3 integer) <- copy (2 integer))
m: (2 integer)
sizeof: (2 integer)
run: 6 => (3 integer)
setm: (3 integer) <= 6
setm: size of (3 integer) is 1
setm: (3 integer): setting 1014 to 6
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 6))
run: 8 interpolate 4: ((4 string-address) (5 boolean) <- arg)
arg: nil 1 (1000 1007)
run: 1007 => (4 string-address)
setm: (4 string-address) <= 1007
setm: size of (4 string-address) is 1
setm: (4 string-address): setting 1015 to 1007
run: t => (5 boolean)
setm: (5 boolean) <= t
setm: size of (5 boolean) is 1
setm: (5 boolean): setting 1016 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 6) (1015 1007) (1016 t))
run: 9 interpolate 5: (jump-unless (5 boolean) (4 offset))
m: (5 boolean)
sizeof: (5 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 6) (1015 1007) (1016 t))
run: 10 interpolate 6: ((6 integer) <- len (4 string-address deref))
array-len: (4 string-address deref)
m: (1007 integer global)
sizeof: (1007 integer global)
run: 3 => (6 integer)
setm: (6 integer) <= 3
setm: size of (6 integer) is 1
setm: (6 integer): setting 1017 to 3
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 6) (1015 1007) (1016 t) (1017 3))
run: 11 interpolate 7: ((3 integer) <- add (3 integer) (6 integer))
m: (3 integer)
sizeof: (3 integer)
m: (6 integer)
sizeof: (6 integer)
add: 6 3
m: (3 integer)
sizeof: (3 integer)
m: (6 integer)
sizeof: (6 integer)
run: 9 => (3 integer)
setm: (3 integer) <= 9
setm: size of (3 integer) is 1
setm: (3 integer): setting 1014 to 9
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 9) (1015 1007) (1016 t) (1017 3))
run: 12 interpolate 8: ((3 integer) <- sub (3 integer) (1 literal))
m: (3 integer)
sizeof: (3 integer)
run: 8 => (3 integer)
setm: (3 integer) <= 8
setm: size of (3 integer) is 1
setm: (3 integer): setting 1014 to 8
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3))
run: 13 interpolate 9: (jump (-6 offset))
jump: jumping to 4
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3))
run: 14 interpolate 4: ((4 string-address) (5 boolean) <- arg)
arg: nil 2 (1000 1007)
run: nil => (4 string-address)
setm: (4 string-address) <= nil
setm: size of (4 string-address) is 1
setm: (4 string-address): setting 1015 to nil
run: nil => (5 boolean)
setm: (5 boolean) <= nil
setm: size of (5 boolean) is 1
setm: (5 boolean): setting 1016 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1017 3))
run: 15 interpolate 5: (jump-unless (5 boolean) (4 offset))
m: (5 boolean)
sizeof: (5 boolean)
jump: checking that nil is not t
jump: jumping to 10
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1017 3))
run: 16 interpolate 10: (_ <- arg (0 literal))
arg: ((0 literal)) 0 (1000 1007)
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1017 3))
run: 17 interpolate 11: ((7 string-address) <- new (string literal) (3 integer))
m: (3 integer)
sizeof: (3 integer)
sizeof: byte
run: 1072 => (7 string-address)
setm: (7 string-address) <= 1072
setm: size of (7 string-address) is 1
setm: (7 string-address): setting 1018 to 1072
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1017 3) (1018 1072) (1072 8))
run: 18 interpolate 12: ((8 integer) <- copy (0 literal))
run: 0 => (8 integer)
setm: (8 integer) <= 0
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 0
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1017 3) (1018 1072) (1019 0) (1072 8))
run: 19 interpolate 13: ((9 integer) <- copy (0 literal))
run: 0 => (9 integer)
setm: (9 integer) <= 0
setm: size of (9 integer) is 1
setm: (9 integer): setting 1020 to 0
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1017 3) (1018 1072) (1019 0) (1020 0) (1072 8))
run: 20 interpolate 14: ((4 string-address) (5 boolean) <- arg)
arg: nil 1 (1000 1007)
run: 1007 => (4 string-address)
setm: (4 string-address) <= 1007
setm: size of (4 string-address) is 1
setm: (4 string-address): setting 1015 to 1007
run: t => (5 boolean)
setm: (5 boolean) <= t
setm: size of (5 boolean) is 1
setm: (5 boolean): setting 1016 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 0) (1020 0) (1072 8))
run: 21 interpolate 15: (jump-unless (5 boolean) (21 offset))
m: (5 boolean)
sizeof: (5 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 0) (1020 0) (1072 8))
run: 22 interpolate 16: ((10 boolean) <- lt (9 integer) (2 integer))
m: (9 integer)
sizeof: (9 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (10 boolean)
setm: (10 boolean) <= t
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1021 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 0) (1020 0) (1021 t) (1072 8))
run: 23 interpolate 17: (jump-unless (10 boolean) (19 offset))
m: (10 boolean)
sizeof: (10 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 0) (1020 0) (1021 t) (1072 8))
run: 24 interpolate 18: ((11 byte) <- index (1 string-address deref) (9 integer))
m: (9 integer)
sizeof: (9 integer)
array-len: (1000 string global)
m: (1000 integer global)
sizeof: (1000 integer global)
sizeof: byte
m: (1001 byte global)
sizeof: (1001 byte global)
run: h => (11 byte)
setm: (11 byte) <= h
setm: size of (11 byte) is 1
setm: (11 byte): setting 1022 to h
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 0) (1020 0) (1021 t) (1022 h) (1072 8))
run: 25 interpolate 19: ((12 boolean) <- eq (11 byte) (_ literal))
m: (11 byte)
sizeof: (11 byte)
run: nil => (12 boolean)
setm: (12 boolean) <= nil
setm: size of (12 boolean) is 1
setm: (12 boolean): setting 1023 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 0) (1020 0) (1021 t) (1022 h) (1072 8))
run: 26 interpolate 20: (jump-if (12 boolean) (5 offset))
m: (12 boolean)
sizeof: (12 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 0) (1020 0) (1021 t) (1022 h) (1072 8))
run: 27 interpolate 21: ((13 byte-address) <- index-address (7 string-address deref) (8 integer))
m: (8 integer)
sizeof: (8 integer)
array-len: (1072 string global)
m: (1072 integer global)
sizeof: (1072 integer global)
sizeof: byte
run: 1073 => (13 byte-address)
setm: (13 byte-address) <= 1073
setm: size of (13 byte-address) is 1
setm: (13 byte-address): setting 1024 to 1073
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 0) (1020 0) (1021 t) (1022 h) (1024 1073) (1072 8))
run: 28 interpolate 22: ((13 byte-address deref) <- copy (11 byte))
m: (11 byte)
sizeof: (11 byte)
run: h => (13 byte-address deref)
setm: (13 byte-address deref) <= h
setm: size of (13 byte-address deref) is 1
setm: (13 byte-address deref): setting 1073 to h
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 0) (1020 0) (1021 t) (1022 h) (1024 1073) (1072 8) (1073 h))
run: 29 interpolate 23: ((9 integer) <- add (9 integer) (1 literal))
m: (9 integer)
sizeof: (9 integer)
add: 0 1
m: (9 integer)
sizeof: (9 integer)
run: 1 => (9 integer)
setm: (9 integer) <= 1
setm: size of (9 integer) is 1
setm: (9 integer): setting 1020 to 1
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 0) (1020 1) (1021 t) (1022 h) (1024 1073) (1072 8) (1073 h))
run: 30 interpolate 24: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 0 1
m: (8 integer)
sizeof: (8 integer)
run: 1 => (8 integer)
setm: (8 integer) <= 1
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 1
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 1) (1020 1) (1021 t) (1022 h) (1024 1073) (1072 8) (1073 h))
run: 31 interpolate 25: (jump (-10 offset))
jump: jumping to 16
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 1) (1020 1) (1021 t) (1022 h) (1024 1073) (1072 8) (1073 h))
run: 32 interpolate 16: ((10 boolean) <- lt (9 integer) (2 integer))
m: (9 integer)
sizeof: (9 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (10 boolean)
setm: (10 boolean) <= t
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1021 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 1) (1020 1) (1021 t) (1022 h) (1024 1073) (1072 8) (1073 h))
run: 33 interpolate 17: (jump-unless (10 boolean) (19 offset))
m: (10 boolean)
sizeof: (10 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 1) (1020 1) (1021 t) (1022 h) (1024 1073) (1072 8) (1073 h))
run: 34 interpolate 18: ((11 byte) <- index (1 string-address deref) (9 integer))
m: (9 integer)
sizeof: (9 integer)
array-len: (1000 string global)
m: (1000 integer global)
sizeof: (1000 integer global)
sizeof: byte
m: (1002 byte global)
sizeof: (1002 byte global)
run: e => (11 byte)
setm: (11 byte) <= e
setm: size of (11 byte) is 1
setm: (11 byte): setting 1022 to e
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 1) (1020 1) (1021 t) (1022 e) (1024 1073) (1072 8) (1073 h))
run: 35 interpolate 19: ((12 boolean) <- eq (11 byte) (_ literal))
m: (11 byte)
sizeof: (11 byte)
run: nil => (12 boolean)
setm: (12 boolean) <= nil
setm: size of (12 boolean) is 1
setm: (12 boolean): setting 1023 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 1) (1020 1) (1021 t) (1022 e) (1024 1073) (1072 8) (1073 h))
run: 36 interpolate 20: (jump-if (12 boolean) (5 offset))
m: (12 boolean)
sizeof: (12 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 1) (1020 1) (1021 t) (1022 e) (1024 1073) (1072 8) (1073 h))
run: 37 interpolate 21: ((13 byte-address) <- index-address (7 string-address deref) (8 integer))
m: (8 integer)
sizeof: (8 integer)
array-len: (1072 string global)
m: (1072 integer global)
sizeof: (1072 integer global)
sizeof: byte
run: 1074 => (13 byte-address)
setm: (13 byte-address) <= 1074
setm: size of (13 byte-address) is 1
setm: (13 byte-address): setting 1024 to 1074
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 1) (1020 1) (1021 t) (1022 e) (1024 1074) (1072 8) (1073 h))
run: 38 interpolate 22: ((13 byte-address deref) <- copy (11 byte))
m: (11 byte)
sizeof: (11 byte)
run: e => (13 byte-address deref)
setm: (13 byte-address deref) <= e
setm: size of (13 byte-address deref) is 1
setm: (13 byte-address deref): setting 1074 to e
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 1) (1020 1) (1021 t) (1022 e) (1024 1074) (1072 8) (1073 h) (1074 e))
run: 39 interpolate 23: ((9 integer) <- add (9 integer) (1 literal))
m: (9 integer)
sizeof: (9 integer)
add: 1 1
m: (9 integer)
sizeof: (9 integer)
run: 2 => (9 integer)
setm: (9 integer) <= 2
setm: size of (9 integer) is 1
setm: (9 integer): setting 1020 to 2
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 1) (1020 2) (1021 t) (1022 e) (1024 1074) (1072 8) (1073 h) (1074 e))
run: 40 interpolate 24: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 1 1
m: (8 integer)
sizeof: (8 integer)
run: 2 => (8 integer)
setm: (8 integer) <= 2
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 2
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 2) (1020 2) (1021 t) (1022 e) (1024 1074) (1072 8) (1073 h) (1074 e))
run: 41 interpolate 25: (jump (-10 offset))
jump: jumping to 16
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 2) (1020 2) (1021 t) (1022 e) (1024 1074) (1072 8) (1073 h) (1074 e))
run: 42 interpolate 16: ((10 boolean) <- lt (9 integer) (2 integer))
m: (9 integer)
sizeof: (9 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (10 boolean)
setm: (10 boolean) <= t
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1021 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 2) (1020 2) (1021 t) (1022 e) (1024 1074) (1072 8) (1073 h) (1074 e))
run: 43 interpolate 17: (jump-unless (10 boolean) (19 offset))
m: (10 boolean)
sizeof: (10 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 2) (1020 2) (1021 t) (1022 e) (1024 1074) (1072 8) (1073 h) (1074 e))
run: 44 interpolate 18: ((11 byte) <- index (1 string-address deref) (9 integer))
m: (9 integer)
sizeof: (9 integer)
array-len: (1000 string global)
m: (1000 integer global)
sizeof: (1000 integer global)
sizeof: byte
m: (1003 byte global)
sizeof: (1003 byte global)
run: l => (11 byte)
setm: (11 byte) <= l
setm: size of (11 byte) is 1
setm: (11 byte): setting 1022 to l
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 2) (1020 2) (1021 t) (1022 l) (1024 1074) (1072 8) (1073 h) (1074 e))
run: 45 interpolate 19: ((12 boolean) <- eq (11 byte) (_ literal))
m: (11 byte)
sizeof: (11 byte)
run: nil => (12 boolean)
setm: (12 boolean) <= nil
setm: size of (12 boolean) is 1
setm: (12 boolean): setting 1023 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 2) (1020 2) (1021 t) (1022 l) (1024 1074) (1072 8) (1073 h) (1074 e))
run: 46 interpolate 20: (jump-if (12 boolean) (5 offset))
m: (12 boolean)
sizeof: (12 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 2) (1020 2) (1021 t) (1022 l) (1024 1074) (1072 8) (1073 h) (1074 e))
run: 47 interpolate 21: ((13 byte-address) <- index-address (7 string-address deref) (8 integer))
m: (8 integer)
sizeof: (8 integer)
array-len: (1072 string global)
m: (1072 integer global)
sizeof: (1072 integer global)
sizeof: byte
run: 1075 => (13 byte-address)
setm: (13 byte-address) <= 1075
setm: size of (13 byte-address) is 1
setm: (13 byte-address): setting 1024 to 1075
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 2) (1020 2) (1021 t) (1022 l) (1024 1075) (1072 8) (1073 h) (1074 e))
run: 48 interpolate 22: ((13 byte-address deref) <- copy (11 byte))
m: (11 byte)
sizeof: (11 byte)
run: l => (13 byte-address deref)
setm: (13 byte-address deref) <= l
setm: size of (13 byte-address deref) is 1
setm: (13 byte-address deref): setting 1075 to l
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 2) (1020 2) (1021 t) (1022 l) (1024 1075) (1072 8) (1073 h) (1074 e) (1075 l))
run: 49 interpolate 23: ((9 integer) <- add (9 integer) (1 literal))
m: (9 integer)
sizeof: (9 integer)
add: 2 1
m: (9 integer)
sizeof: (9 integer)
run: 3 => (9 integer)
setm: (9 integer) <= 3
setm: size of (9 integer) is 1
setm: (9 integer): setting 1020 to 3
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 2) (1020 3) (1021 t) (1022 l) (1024 1075) (1072 8) (1073 h) (1074 e) (1075 l))
run: 50 interpolate 24: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 2 1
m: (8 integer)
sizeof: (8 integer)
run: 3 => (8 integer)
setm: (8 integer) <= 3
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 3
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 3) (1020 3) (1021 t) (1022 l) (1024 1075) (1072 8) (1073 h) (1074 e) (1075 l))
run: 51 interpolate 25: (jump (-10 offset))
jump: jumping to 16
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 3) (1020 3) (1021 t) (1022 l) (1024 1075) (1072 8) (1073 h) (1074 e) (1075 l))
run: 52 interpolate 16: ((10 boolean) <- lt (9 integer) (2 integer))
m: (9 integer)
sizeof: (9 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (10 boolean)
setm: (10 boolean) <= t
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1021 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 3) (1020 3) (1021 t) (1022 l) (1024 1075) (1072 8) (1073 h) (1074 e) (1075 l))
run: 53 interpolate 17: (jump-unless (10 boolean) (19 offset))
m: (10 boolean)
sizeof: (10 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 3) (1020 3) (1021 t) (1022 l) (1024 1075) (1072 8) (1073 h) (1074 e) (1075 l))
run: 54 interpolate 18: ((11 byte) <- index (1 string-address deref) (9 integer))
m: (9 integer)
sizeof: (9 integer)
array-len: (1000 string global)
m: (1000 integer global)
sizeof: (1000 integer global)
sizeof: byte
m: (1004 byte global)
sizeof: (1004 byte global)
run: l => (11 byte)
setm: (11 byte) <= l
setm: size of (11 byte) is 1
setm: (11 byte): setting 1022 to l
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 3) (1020 3) (1021 t) (1022 l) (1024 1075) (1072 8) (1073 h) (1074 e) (1075 l))
run: 55 interpolate 19: ((12 boolean) <- eq (11 byte) (_ literal))
m: (11 byte)
sizeof: (11 byte)
run: nil => (12 boolean)
setm: (12 boolean) <= nil
setm: size of (12 boolean) is 1
setm: (12 boolean): setting 1023 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 3) (1020 3) (1021 t) (1022 l) (1024 1075) (1072 8) (1073 h) (1074 e) (1075 l))
run: 56 interpolate 20: (jump-if (12 boolean) (5 offset))
m: (12 boolean)
sizeof: (12 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 3) (1020 3) (1021 t) (1022 l) (1024 1075) (1072 8) (1073 h) (1074 e) (1075 l))
run: 57 interpolate 21: ((13 byte-address) <- index-address (7 string-address deref) (8 integer))
m: (8 integer)
sizeof: (8 integer)
array-len: (1072 string global)
m: (1072 integer global)
sizeof: (1072 integer global)
sizeof: byte
run: 1076 => (13 byte-address)
setm: (13 byte-address) <= 1076
setm: size of (13 byte-address) is 1
setm: (13 byte-address): setting 1024 to 1076
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 3) (1020 3) (1021 t) (1022 l) (1024 1076) (1072 8) (1073 h) (1074 e) (1075 l))
run: 58 interpolate 22: ((13 byte-address deref) <- copy (11 byte))
m: (11 byte)
sizeof: (11 byte)
run: l => (13 byte-address deref)
setm: (13 byte-address deref) <= l
setm: size of (13 byte-address deref) is 1
setm: (13 byte-address deref): setting 1076 to l
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 3) (1020 3) (1021 t) (1022 l) (1024 1076) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l))
run: 59 interpolate 23: ((9 integer) <- add (9 integer) (1 literal))
m: (9 integer)
sizeof: (9 integer)
add: 3 1
m: (9 integer)
sizeof: (9 integer)
run: 4 => (9 integer)
setm: (9 integer) <= 4
setm: size of (9 integer) is 1
setm: (9 integer): setting 1020 to 4
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 3) (1020 4) (1021 t) (1022 l) (1024 1076) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l))
run: 60 interpolate 24: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 3 1
m: (8 integer)
sizeof: (8 integer)
run: 4 => (8 integer)
setm: (8 integer) <= 4
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 4
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 4) (1020 4) (1021 t) (1022 l) (1024 1076) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l))
run: 61 interpolate 25: (jump (-10 offset))
jump: jumping to 16
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 4) (1020 4) (1021 t) (1022 l) (1024 1076) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l))
run: 62 interpolate 16: ((10 boolean) <- lt (9 integer) (2 integer))
m: (9 integer)
sizeof: (9 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (10 boolean)
setm: (10 boolean) <= t
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1021 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 4) (1020 4) (1021 t) (1022 l) (1024 1076) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l))
run: 63 interpolate 17: (jump-unless (10 boolean) (19 offset))
m: (10 boolean)
sizeof: (10 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 4) (1020 4) (1021 t) (1022 l) (1024 1076) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l))
run: 64 interpolate 18: ((11 byte) <- index (1 string-address deref) (9 integer))
m: (9 integer)
sizeof: (9 integer)
array-len: (1000 string global)
m: (1000 integer global)
sizeof: (1000 integer global)
sizeof: byte
m: (1005 byte global)
sizeof: (1005 byte global)
run: o => (11 byte)
setm: (11 byte) <= o
setm: size of (11 byte) is 1
setm: (11 byte): setting 1022 to o
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 4) (1020 4) (1021 t) (1022 o) (1024 1076) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l))
run: 65 interpolate 19: ((12 boolean) <- eq (11 byte) (_ literal))
m: (11 byte)
sizeof: (11 byte)
run: nil => (12 boolean)
setm: (12 boolean) <= nil
setm: size of (12 boolean) is 1
setm: (12 boolean): setting 1023 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 4) (1020 4) (1021 t) (1022 o) (1024 1076) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l))
run: 66 interpolate 20: (jump-if (12 boolean) (5 offset))
m: (12 boolean)
sizeof: (12 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 4) (1020 4) (1021 t) (1022 o) (1024 1076) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l))
run: 67 interpolate 21: ((13 byte-address) <- index-address (7 string-address deref) (8 integer))
m: (8 integer)
sizeof: (8 integer)
array-len: (1072 string global)
m: (1072 integer global)
sizeof: (1072 integer global)
sizeof: byte
run: 1077 => (13 byte-address)
setm: (13 byte-address) <= 1077
setm: size of (13 byte-address) is 1
setm: (13 byte-address): setting 1024 to 1077
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 4) (1020 4) (1021 t) (1022 o) (1024 1077) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l))
run: 68 interpolate 22: ((13 byte-address deref) <- copy (11 byte))
m: (11 byte)
sizeof: (11 byte)
run: o => (13 byte-address deref)
setm: (13 byte-address deref) <= o
setm: size of (13 byte-address deref) is 1
setm: (13 byte-address deref): setting 1077 to o
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 4) (1020 4) (1021 t) (1022 o) (1024 1077) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o))
run: 69 interpolate 23: ((9 integer) <- add (9 integer) (1 literal))
m: (9 integer)
sizeof: (9 integer)
add: 4 1
m: (9 integer)
sizeof: (9 integer)
run: 5 => (9 integer)
setm: (9 integer) <= 5
setm: size of (9 integer) is 1
setm: (9 integer): setting 1020 to 5
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 4) (1020 5) (1021 t) (1022 o) (1024 1077) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o))
run: 70 interpolate 24: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 4 1
m: (8 integer)
sizeof: (8 integer)
run: 5 => (8 integer)
setm: (8 integer) <= 5
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 5
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 5) (1020 5) (1021 t) (1022 o) (1024 1077) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o))
run: 71 interpolate 25: (jump (-10 offset))
jump: jumping to 16
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 5) (1020 5) (1021 t) (1022 o) (1024 1077) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o))
run: 72 interpolate 16: ((10 boolean) <- lt (9 integer) (2 integer))
m: (9 integer)
sizeof: (9 integer)
m: (2 integer)
sizeof: (2 integer)
run: t => (10 boolean)
setm: (10 boolean) <= t
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1021 to t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 5) (1020 5) (1021 t) (1022 o) (1024 1077) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o))
run: 73 interpolate 17: (jump-unless (10 boolean) (19 offset))
m: (10 boolean)
sizeof: (10 boolean)
jump: checking that t is not t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 5) (1020 5) (1021 t) (1022 o) (1024 1077) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o))
run: 74 interpolate 18: ((11 byte) <- index (1 string-address deref) (9 integer))
m: (9 integer)
sizeof: (9 integer)
array-len: (1000 string global)
m: (1000 integer global)
sizeof: (1000 integer global)
sizeof: byte
m: (1006 byte global)
sizeof: (1006 byte global)
run: ! => (11 byte)
setm: (11 byte) <= !
setm: size of (11 byte) is 1
setm: (11 byte): setting 1022 to !
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 5) (1020 5) (1021 t) (1022 !) (1024 1077) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o))
run: 75 interpolate 19: ((12 boolean) <- eq (11 byte) (_ literal))
m: (11 byte)
sizeof: (11 byte)
run: nil => (12 boolean)
setm: (12 boolean) <= nil
setm: size of (12 boolean) is 1
setm: (12 boolean): setting 1023 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 5) (1020 5) (1021 t) (1022 !) (1024 1077) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o))
run: 76 interpolate 20: (jump-if (12 boolean) (5 offset))
m: (12 boolean)
sizeof: (12 boolean)
jump: checking that nil is t
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 5) (1020 5) (1021 t) (1022 !) (1024 1077) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o))
run: 77 interpolate 21: ((13 byte-address) <- index-address (7 string-address deref) (8 integer))
m: (8 integer)
sizeof: (8 integer)
array-len: (1072 string global)
m: (1072 integer global)
sizeof: (1072 integer global)
sizeof: byte
run: 1078 => (13 byte-address)
setm: (13 byte-address) <= 1078
setm: size of (13 byte-address) is 1
setm: (13 byte-address): setting 1024 to 1078
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 5) (1020 5) (1021 t) (1022 !) (1024 1078) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o))
run: 78 interpolate 22: ((13 byte-address deref) <- copy (11 byte))
m: (11 byte)
sizeof: (11 byte)
run: ! => (13 byte-address deref)
setm: (13 byte-address deref) <= !
setm: size of (13 byte-address deref) is 1
setm: (13 byte-address deref): setting 1078 to !
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 5) (1020 5) (1021 t) (1022 !) (1024 1078) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o) (1078 !))
run: 79 interpolate 23: ((9 integer) <- add (9 integer) (1 literal))
m: (9 integer)
sizeof: (9 integer)
add: 5 1
m: (9 integer)
sizeof: (9 integer)
run: 6 => (9 integer)
setm: (9 integer) <= 6
setm: size of (9 integer) is 1
setm: (9 integer): setting 1020 to 6
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 5) (1020 6) (1021 t) (1022 !) (1024 1078) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o) (1078 !))
run: 80 interpolate 24: ((8 integer) <- add (8 integer) (1 literal))
m: (8 integer)
sizeof: (8 integer)
add: 5 1
m: (8 integer)
sizeof: (8 integer)
run: 6 => (8 integer)
setm: (8 integer) <= 6
setm: size of (8 integer) is 1
setm: (8 integer): setting 1019 to 6
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 6) (1020 6) (1021 t) (1022 !) (1024 1078) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o) (1078 !))
run: 81 interpolate 25: (jump (-10 offset))
jump: jumping to 16
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 6) (1020 6) (1021 t) (1022 !) (1024 1078) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o) (1078 !))
run: 82 interpolate 16: ((10 boolean) <- lt (9 integer) (2 integer))
m: (9 integer)
sizeof: (9 integer)
m: (2 integer)
sizeof: (2 integer)
run: nil => (10 boolean)
setm: (10 boolean) <= nil
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1021 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 6) (1020 6) (1022 !) (1024 1078) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o) (1078 !))
run: 83 interpolate 17: (jump-unless (10 boolean) (19 offset))
m: (10 boolean)
sizeof: (10 boolean)
jump: checking that nil is not t
jump: jumping to 37
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 6) (1020 6) (1022 !) (1024 1078) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o) (1078 !))
run: 84 interpolate 37: ((10 boolean) <- lt (9 integer) (2 integer))
m: (9 integer)
sizeof: (9 integer)
m: (2 integer)
sizeof: (2 integer)
run: nil => (10 boolean)
setm: (10 boolean) <= nil
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1021 to nil
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 6) (1020 6) (1022 !) (1024 1078) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o) (1078 !))
run: 85 interpolate 38: (jump-unless (10 boolean) (6 offset))
m: (10 boolean)
sizeof: (10 boolean)
jump: checking that nil is not t
jump: jumping to 45
run: -- ((1 1000) (2 1007) (1000 6) (1001 h) (1002 e) (1003 l) (1004 l) (1005 o) (1006 !) (1007 3) (1008 a) (1009 b) (1010 c) (1011 60) (1012 1000) (1013 6) (1014 8) (1015 1007) (1016 t) (1017 3) (1018 1072) (1019 6) (1020 6) (1022 !) (1024 1078) (1072 8) (1073 h) (1074 e) (1075 l) (1076 l) (1077 o) (1078 !))
run: 86 interpolate 45: (reply (7 string-address))
m: (7 string-address)
sizeof: (7 string-address)
reply: ((7 string-address)) ((3 string-address))
reply: 1072 => (3 string-address)
setm: (3 string-address) <= 1072
setm: size of (3 string-address) is 1
setm: (3 string-address): setting 3 to 1072
schedule: done with routine
