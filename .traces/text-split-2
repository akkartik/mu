9991 parse: --- defining scenario_text-split-2
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:array:character <- new [a/b/c]\n    2:address:shared:array:address:shared:array:character <- split 1:address:shared:array:character, 47/slash\n    3:number <- length *2:address:shared:array:address:shared:array:character\n    4:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 0\n    5:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 1\n    6:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 2\n    10:array:character <- copy *4:address:shared:array:character\n    20:array:character <- copy *5:address:shared:array:character\n    30:array:character <- copy *6:address:shared:array:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:shared:array:character <- new [a/b/c]
    2:address:shared:array:address:shared:array:character <- split 1:address:shared:array:character, 47/slash
    3:number <- length *2:address:shared:array:address:shared:array:character
    4:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 0
    5:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 1
    6:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 2
    10:array:character <- copy *4:address:shared:array:character
    20:array:character <- copy *5:address:shared:array:character
    30:array:character <- copy *6:address:shared:array:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    3 <- 3  # length of result\n    10:array:character <- [a]\n    20:array:character <- [b]\n    30:array:character <- [c]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    3 <- 3  # length of result
    10:array:character <- [a]
    20:array:character <- [b]
    30:array:character <- [c]
  ]
9999 parse: recipe scenario_text-split-2 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_text-split-2
9991 transform: --- deduce types for recipe scenario_text-split-2
9991 transform: --- collect surrounding spaces for recipe scenario_text-split-2
9991 transform: --- transform names for recipe scenario_text-split-2
9991 transform: --- resolve ambiguous calls for recipe scenario_text-split-2
9991 transform: --- compute instruction operations for recipe scenario_text-split-2
9991 transform: --- transform braces for recipe scenario_text-split-2
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_text-split-2
9991 transform: --- type-check 'call' instructions inside recipe scenario_text-split-2
9991 transform: --- type-check calls inside recipe scenario_text-split-2
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_text-split-2
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_text-split-2
 102 run: run [
    1:address:shared:array:character <- new [a/b/c]
    2:address:shared:array:address:shared:array:character <- split 1:address:shared:array:character, 47/slash
    3:number <- length *2:address:shared:array:address:shared:array:character
    4:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 0
    5:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 1
    6:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 2
    10:array:character <- copy *4:address:shared:array:character
    20:array:character <- copy *5:address:shared:array:character
    30:array:character <- copy *6:address:shared:array:character
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"a/b/c": "literal-string"}
9993 parse:   product: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 load: after rewriting: 1:address:shared:array:character <- new [a/b/c]
9993 parse: instruction: split
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9993 parse:   ingredient: {"47": "literal", "slash": <>}
9993 parse:   product: {"2": <"address" : <"shared" : <"array" : <"address" : <"shared" : <"array" : <"character" : <>>>>>>>>}
9992 load: after rewriting: 2:address:shared:array:address:shared:array:character <- split 1:address:shared:array:character, 47/slash
9993 parse: instruction: length
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"array" : <"address" : <"shared" : <"array" : <"character" : <>>>>>>>>, "lookup": <>}
9993 parse:   product: {"3": "number"}
9992 load: after rewriting: 3:number <- length *2:address:shared:array:address:shared:array:character
9993 parse: instruction: index
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"array" : <"address" : <"shared" : <"array" : <"character" : <>>>>>>>>, "lookup": <>}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"4": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 load: after rewriting: 4:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 0
9993 parse: instruction: index
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"array" : <"address" : <"shared" : <"array" : <"character" : <>>>>>>>>, "lookup": <>}
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   product: {"5": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 load: after rewriting: 5:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 1
9993 parse: instruction: index
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"array" : <"address" : <"shared" : <"array" : <"character" : <>>>>>>>>, "lookup": <>}
9993 parse:   ingredient: {"2": "literal"}
9993 parse:   product: {"6": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 load: after rewriting: 6:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 2
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"4": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "lookup": <>}
9993 parse:   product: {"10": <"array" : <"character" : <>>>}
9992 load: after rewriting: 10:array:character <- copy *4:address:shared:array:character
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"5": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "lookup": <>}
9993 parse:   product: {"20": <"array" : <"character" : <>>>}
9992 load: after rewriting: 20:array:character <- copy *5:address:shared:array:character
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"6": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "lookup": <>}
9993 parse:   product: {"30": <"array" : <"character" : <>>>}
9992 load: after rewriting: 30:array:character <- copy *6:address:shared:array:character
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction split
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for base: 990
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 0: 990
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new ...
9992 transform: split ...
9992 transform: length ...
9992 transform: index ...
9992 transform: index ...
9992 transform: index ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:array:character <- new [a/b/c]
9999 mem: storing 1000 in location 1
9999 mem: incrementing refcount of 1000: 0 -> 1
 103 run: 2:address:shared:array:address:shared:array:character <- split 1:address:shared:array:character, 47/slash
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 13
9999 mem: allocating size 15
9999 mem: new alloc: 1007
9999 mem: storing 13 in location 1008
 104 run: s:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1010
9999 mem: incrementing refcount of 1000: 1 -> 2
 104 run: delim:character <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1011
 104 run: len:number <- length *s
9999 mem: location 1010 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 5 in location 1012
 104 run: empty?:boolean <- equal len, 0
9999 mem: location 1012 is 5
9999 mem: storing 0 in location 1013
 104 run: jump-unless empty?, 
9999 mem: location 1013 is 0
9998 run: jumping to instruction 9
 104 run: count:number <- copy 1
9999 mem: storing 1 in location 1015
 104 run: idx:number <- copy 0
9999 mem: storing 0 in location 1016
 104 run: idx <- find-next s, delim, idx
9999 mem: location 1010 is 1000
9999 mem: location 1011 is 47
9999 mem: location 1016 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1022
9999 mem: storing 8 in location 1023
 105 run: text:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1025
9999 mem: incrementing refcount of 1000: 2 -> 3
 105 run: pattern:character <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1026
 105 run: idx:number <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1027
 105 run: len:number <- length *text
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 5 in location 1028
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1027 is 0
9999 mem: location 1028 is 5
9999 mem: storing 0 in location 1029
 105 run: jump-if eof?, 
9999 mem: location 1029 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 0
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 97
9999 mem: storing 97 in location 1030
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1030 is 97
9999 mem: location 1026 is 47
9999 mem: storing 0 in location 1031
 105 run: jump-if found?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1027 is 0
9999 mem: storing 1 in location 1027
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1027 is 1
9999 mem: location 1028 is 5
9999 mem: storing 0 in location 1029
 105 run: jump-if eof?, 
9999 mem: location 1029 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 1
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 47
9999 mem: storing 47 in location 1030
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1030 is 47
9999 mem: location 1026 is 47
9999 mem: storing 1 in location 1031
 105 run: jump-if found?, 
9999 mem: location 1031 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1027 is 1
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1016
 104 run: done?:boolean <- greater-or-equal idx, len
9999 mem: location 1016 is 1
9999 mem: location 1012 is 5
9999 mem: storing 0 in location 1017
 104 run: jump-if done?, 
9999 mem: location 1017 is 0
9998 run: jump-if fell through
 104 run: idx <- add idx, 1
9999 mem: location 1016 is 1
9999 mem: storing 2 in location 1016
 104 run: count <- add count, 1
9999 mem: location 1015 is 1
9999 mem: storing 2 in location 1015
 104 run: jump 
9998 run: jumping to instruction 13
 104 run: idx <- find-next s, delim, idx
9999 mem: location 1010 is 1000
9999 mem: location 1011 is 47
9999 mem: location 1016 is 2
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
 105 run: text:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1025
9999 mem: incrementing refcount of 1000: 3 -> 4
 105 run: pattern:character <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1026
 105 run: idx:number <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1027
 105 run: len:number <- length *text
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 5 in location 1028
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1027 is 2
9999 mem: location 1028 is 5
9999 mem: storing 0 in location 1029
 105 run: jump-if eof?, 
9999 mem: location 1029 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 2
9998 run: address to copy is 1004
9998 run: its type is character
9999 mem: location 1004 is 98
9999 mem: storing 98 in location 1030
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1030 is 98
9999 mem: location 1026 is 47
9999 mem: storing 0 in location 1031
 105 run: jump-if found?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1027 is 2
9999 mem: storing 3 in location 1027
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1027 is 3
9999 mem: location 1028 is 5
9999 mem: storing 0 in location 1029
 105 run: jump-if eof?, 
9999 mem: location 1029 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 3
9998 run: address to copy is 1005
9998 run: its type is character
9999 mem: location 1005 is 47
9999 mem: storing 47 in location 1030
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1030 is 47
9999 mem: location 1026 is 47
9999 mem: storing 1 in location 1031
 105 run: jump-if found?, 
9999 mem: location 1031 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1027 is 3
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 3
9999 mem: storing 3 in location 1016
 104 run: done?:boolean <- greater-or-equal idx, len
9999 mem: location 1016 is 3
9999 mem: location 1012 is 5
9999 mem: storing 0 in location 1017
 104 run: jump-if done?, 
9999 mem: location 1017 is 0
9998 run: jump-if fell through
 104 run: idx <- add idx, 1
9999 mem: location 1016 is 3
9999 mem: storing 4 in location 1016
 104 run: count <- add count, 1
9999 mem: location 1015 is 2
9999 mem: storing 3 in location 1015
 104 run: jump 
9998 run: jumping to instruction 13
 104 run: idx <- find-next s, delim, idx
9999 mem: location 1010 is 1000
9999 mem: location 1011 is 47
9999 mem: location 1016 is 4
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
 105 run: text:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1025
9999 mem: incrementing refcount of 1000: 4 -> 5
 105 run: pattern:character <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1026
 105 run: idx:number <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1027
 105 run: len:number <- length *text
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 5 in location 1028
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1027 is 4
9999 mem: location 1028 is 5
9999 mem: storing 0 in location 1029
 105 run: jump-if eof?, 
9999 mem: location 1029 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 4
9998 run: address to copy is 1006
9998 run: its type is character
9999 mem: location 1006 is 99
9999 mem: storing 99 in location 1030
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1030 is 99
9999 mem: location 1026 is 47
9999 mem: storing 0 in location 1031
 105 run: jump-if found?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1027 is 4
9999 mem: storing 5 in location 1027
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1027 is 5
9999 mem: location 1028 is 5
9999 mem: storing 1 in location 1029
 105 run: jump-if eof?, 
9999 mem: location 1029 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1027 is 5
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 5
9999 mem: storing 5 in location 1016
 104 run: done?:boolean <- greater-or-equal idx, len
9999 mem: location 1016 is 5
9999 mem: location 1012 is 5
9999 mem: storing 1 in location 1017
 104 run: jump-if done?, 
9999 mem: location 1017 is 1
9998 run: jumping to instruction 19
 104 run: result <- new {(address shared array character): type}, count
9999 mem: location 1015 is 3
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1032
9999 mem: storing 3 in location 1033
9999 mem: storing 1032 in location 1014
9999 mem: incrementing refcount of 1032: 0 -> 1
 104 run: curr-result:number <- copy 0
9999 mem: storing 0 in location 1018
 104 run: start:number <- copy 0
9999 mem: storing 0 in location 1019
 104 run: done?:boolean <- greater-or-equal start, len
9999 mem: location 1019 is 0
9999 mem: location 1012 is 5
9999 mem: storing 0 in location 1017
 104 run: jump-if done?, 
9999 mem: location 1017 is 0
9998 run: jump-if fell through
 104 run: end:number <- find-next s, delim, start
9999 mem: location 1010 is 1000
9999 mem: location 1011 is 47
9999 mem: location 1019 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
 105 run: text:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1025
9999 mem: incrementing refcount of 1000: 5 -> 6
 105 run: pattern:character <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1026
 105 run: idx:number <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1027
 105 run: len:number <- length *text
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 5 in location 1028
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1027 is 0
9999 mem: location 1028 is 5
9999 mem: storing 0 in location 1029
 105 run: jump-if eof?, 
9999 mem: location 1029 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 0
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 97
9999 mem: storing 97 in location 1030
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1030 is 97
9999 mem: location 1026 is 47
9999 mem: storing 0 in location 1031
 105 run: jump-if found?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1027 is 0
9999 mem: storing 1 in location 1027
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1027 is 1
9999 mem: location 1028 is 5
9999 mem: storing 0 in location 1029
 105 run: jump-if eof?, 
9999 mem: location 1029 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 1
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 47
9999 mem: storing 47 in location 1030
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1030 is 47
9999 mem: location 1026 is 47
9999 mem: storing 1 in location 1031
 105 run: jump-if found?, 
9999 mem: location 1031 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1027 is 1
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1020
 104 run: dest:address:address:shared:array:character <- index-address *result, curr-result
9999 mem: location 1014 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1018 is 0
9999 mem: storing 1034 in location 1021
 104 run: *dest <- copy-range s, start, end
9999 mem: location 1010 is 1000
9999 mem: location 1019 is 0
9999 mem: location 1020 is 1
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1037
9999 mem: storing 11 in location 1038
 105 run: buf:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1040
9999 mem: incrementing refcount of 1000: 6 -> 7
 105 run: start:number <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1041
 105 run: end:number <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1042
 105 run: len:number <- length *buf
9999 mem: location 1040 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 5 in location 1043
 105 run: end:number <- min len, end
9999 mem: location 1043 is 5
9999 mem: location 1042 is 1
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1050
9999 mem: storing 4 in location 1051
 106 run: x:number <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1053
 106 run: y:number <- next-ingredient-without-typechecking 
9999 mem: storing 1 in location 1054
 106 run: return-x?:boolean <- lesser-than x, y
9999 mem: location 1053 is 5
9999 mem: location 1054 is 1
9999 mem: storing 0 in location 1055
 106 run: jump-if return-x?, 
9999 mem: location 1055 is 0
9998 run: jump-if fell through
 106 run: reply y
9999 mem: location 1054 is 1
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1
9999 mem: storing 1 in location 1042
 105 run: len <- subtract end, start
9999 mem: location 1042 is 1
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1043
 105 run: result:address:shared:array:character <- new character:type, len
9999 mem: location 1043 is 1
9999 mem: array size is 1
9999 mem: allocating size 3
9999 mem: new alloc: 1056
9999 mem: storing 1 in location 1057
9999 mem: storing 1056 in location 1044
9999 mem: incrementing refcount of 1056: 0 -> 1
 105 run: src-idx:number <- copy start
9999 mem: location 1041 is 0
9999 mem: storing 0 in location 1045
 105 run: dest-idx:number <- copy 0
9999 mem: storing 0 in location 1046
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1045 is 0
9999 mem: location 1042 is 1
9999 mem: storing 0 in location 1047
 105 run: jump-if done?, 
9999 mem: location 1047 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *buf, src-idx
9999 mem: location 1040 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1045 is 0
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 97
9999 mem: storing 97 in location 1048
 105 run: dest:address:character <- index-address *result, dest-idx
9999 mem: location 1044 is 1056
9999 mem: skipping refcount at 1056
9999 mem: location 1046 is 0
9999 mem: storing 1058 in location 1049
 105 run: *dest <- copy src
9999 mem: location 1048 is 97
9999 mem: location 1049 is 1058
9999 mem: storing 97 in location 1058
 105 run: src-idx <- add src-idx, 1
9999 mem: location 1045 is 0
9999 mem: storing 1 in location 1045
 105 run: dest-idx <- add dest-idx, 1
9999 mem: location 1046 is 0
9999 mem: storing 1 in location 1046
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1045 is 1
9999 mem: location 1042 is 1
9999 mem: storing 1 in location 1047
 105 run: jump-if done?, 
9999 mem: location 1047 is 1
9998 run: jumping to instruction 19
 105 run: reply result:address:shared:array:character
9999 mem: location 1044 is 1056
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1056
9999 mem: location 1021 is 1034
9999 mem: storing 1056 in location 1034
9999 mem: incrementing refcount of 1056: 1 -> 2
 104 run: start <- add end, 1
9999 mem: location 1020 is 1
9999 mem: storing 2 in location 1019
 104 run: curr-result <- add curr-result, 1
9999 mem: location 1018 is 0
9999 mem: storing 1 in location 1018
 104 run: jump 
9998 run: jumping to instruction 24
 104 run: done?:boolean <- greater-or-equal start, len
9999 mem: location 1019 is 2
9999 mem: location 1012 is 5
9999 mem: storing 0 in location 1017
 104 run: jump-if done?, 
9999 mem: location 1017 is 0
9998 run: jump-if fell through
 104 run: end:number <- find-next s, delim, start
9999 mem: location 1010 is 1000
9999 mem: location 1011 is 47
9999 mem: location 1019 is 2
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
 105 run: text:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1025
9999 mem: incrementing refcount of 1000: 7 -> 8
 105 run: pattern:character <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1026
 105 run: idx:number <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1027
 105 run: len:number <- length *text
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 5 in location 1028
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1027 is 2
9999 mem: location 1028 is 5
9999 mem: storing 0 in location 1029
 105 run: jump-if eof?, 
9999 mem: location 1029 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 2
9998 run: address to copy is 1004
9998 run: its type is character
9999 mem: location 1004 is 98
9999 mem: storing 98 in location 1030
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1030 is 98
9999 mem: location 1026 is 47
9999 mem: storing 0 in location 1031
 105 run: jump-if found?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1027 is 2
9999 mem: storing 3 in location 1027
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1027 is 3
9999 mem: location 1028 is 5
9999 mem: storing 0 in location 1029
 105 run: jump-if eof?, 
9999 mem: location 1029 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 3
9998 run: address to copy is 1005
9998 run: its type is character
9999 mem: location 1005 is 47
9999 mem: storing 47 in location 1030
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1030 is 47
9999 mem: location 1026 is 47
9999 mem: storing 1 in location 1031
 105 run: jump-if found?, 
9999 mem: location 1031 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1027 is 3
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 3
9999 mem: storing 3 in location 1020
 104 run: dest:address:address:shared:array:character <- index-address *result, curr-result
9999 mem: location 1014 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1018 is 1
9999 mem: storing 1035 in location 1021
 104 run: *dest <- copy-range s, start, end
9999 mem: location 1010 is 1000
9999 mem: location 1019 is 2
9999 mem: location 1020 is 3
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 abandon: picking up space from free-list of size 13
 105 run: buf:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1040
9999 mem: incrementing refcount of 1000: 8 -> 9
 105 run: start:number <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1041
 105 run: end:number <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1042
 105 run: len:number <- length *buf
9999 mem: location 1040 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 5 in location 1043
 105 run: end:number <- min len, end
9999 mem: location 1043 is 5
9999 mem: location 1042 is 3
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
 106 run: x:number <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1053
 106 run: y:number <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1054
 106 run: return-x?:boolean <- lesser-than x, y
9999 mem: location 1053 is 5
9999 mem: location 1054 is 3
9999 mem: storing 0 in location 1055
 106 run: jump-if return-x?, 
9999 mem: location 1055 is 0
9998 run: jump-if fell through
 106 run: reply y
9999 mem: location 1054 is 3
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 3
9999 mem: storing 3 in location 1042
 105 run: len <- subtract end, start
9999 mem: location 1042 is 3
9999 mem: location 1041 is 2
9999 mem: storing 1 in location 1043
 105 run: result:address:shared:array:character <- new character:type, len
9999 mem: location 1043 is 1
9999 mem: array size is 1
9999 mem: allocating size 3
9999 mem: new alloc: 1059
9999 mem: storing 1 in location 1060
9999 mem: storing 1059 in location 1044
9999 mem: incrementing refcount of 1059: 0 -> 1
 105 run: src-idx:number <- copy start
9999 mem: location 1041 is 2
9999 mem: storing 2 in location 1045
 105 run: dest-idx:number <- copy 0
9999 mem: storing 0 in location 1046
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1045 is 2
9999 mem: location 1042 is 3
9999 mem: storing 0 in location 1047
 105 run: jump-if done?, 
9999 mem: location 1047 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *buf, src-idx
9999 mem: location 1040 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1045 is 2
9998 run: address to copy is 1004
9998 run: its type is character
9999 mem: location 1004 is 98
9999 mem: storing 98 in location 1048
 105 run: dest:address:character <- index-address *result, dest-idx
9999 mem: location 1044 is 1059
9999 mem: skipping refcount at 1059
9999 mem: location 1046 is 0
9999 mem: storing 1061 in location 1049
 105 run: *dest <- copy src
9999 mem: location 1048 is 98
9999 mem: location 1049 is 1061
9999 mem: storing 98 in location 1061
 105 run: src-idx <- add src-idx, 1
9999 mem: location 1045 is 2
9999 mem: storing 3 in location 1045
 105 run: dest-idx <- add dest-idx, 1
9999 mem: location 1046 is 0
9999 mem: storing 1 in location 1046
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1045 is 3
9999 mem: location 1042 is 3
9999 mem: storing 1 in location 1047
 105 run: jump-if done?, 
9999 mem: location 1047 is 1
9998 run: jumping to instruction 19
 105 run: reply result:address:shared:array:character
9999 mem: location 1044 is 1059
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1059
9999 mem: location 1021 is 1035
9999 mem: storing 1059 in location 1035
9999 mem: incrementing refcount of 1059: 1 -> 2
 104 run: start <- add end, 1
9999 mem: location 1020 is 3
9999 mem: storing 4 in location 1019
 104 run: curr-result <- add curr-result, 1
9999 mem: location 1018 is 1
9999 mem: storing 2 in location 1018
 104 run: jump 
9998 run: jumping to instruction 24
 104 run: done?:boolean <- greater-or-equal start, len
9999 mem: location 1019 is 4
9999 mem: location 1012 is 5
9999 mem: storing 0 in location 1017
 104 run: jump-if done?, 
9999 mem: location 1017 is 0
9998 run: jump-if fell through
 104 run: end:number <- find-next s, delim, start
9999 mem: location 1010 is 1000
9999 mem: location 1011 is 47
9999 mem: location 1019 is 4
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
 105 run: text:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1025
9999 mem: incrementing refcount of 1000: 9 -> 10
 105 run: pattern:character <- next-ingredient-without-typechecking 
9999 mem: storing 47 in location 1026
 105 run: idx:number <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1027
 105 run: len:number <- length *text
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 5 in location 1028
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1027 is 4
9999 mem: location 1028 is 5
9999 mem: storing 0 in location 1029
 105 run: jump-if eof?, 
9999 mem: location 1029 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1025 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 4
9998 run: address to copy is 1006
9998 run: its type is character
9999 mem: location 1006 is 99
9999 mem: storing 99 in location 1030
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1030 is 99
9999 mem: location 1026 is 47
9999 mem: storing 0 in location 1031
 105 run: jump-if found?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1027 is 4
9999 mem: storing 5 in location 1027
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1027 is 5
9999 mem: location 1028 is 5
9999 mem: storing 1 in location 1029
 105 run: jump-if eof?, 
9999 mem: location 1029 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1027 is 5
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 5
9999 mem: storing 5 in location 1020
 104 run: dest:address:address:shared:array:character <- index-address *result, curr-result
9999 mem: location 1014 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1018 is 2
9999 mem: storing 1036 in location 1021
 104 run: *dest <- copy-range s, start, end
9999 mem: location 1010 is 1000
9999 mem: location 1019 is 4
9999 mem: location 1020 is 5
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 abandon: picking up space from free-list of size 13
 105 run: buf:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1040
9999 mem: incrementing refcount of 1000: 10 -> 11
 105 run: start:number <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1041
 105 run: end:number <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1042
 105 run: len:number <- length *buf
9999 mem: location 1040 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 5 in location 1043
 105 run: end:number <- min len, end
9999 mem: location 1043 is 5
9999 mem: location 1042 is 5
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 abandon: picking up space from free-list of size 6
 106 run: x:number <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1053
 106 run: y:number <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1054
 106 run: return-x?:boolean <- lesser-than x, y
9999 mem: location 1053 is 5
9999 mem: location 1054 is 5
9999 mem: storing 0 in location 1055
 106 run: jump-if return-x?, 
9999 mem: location 1055 is 0
9998 run: jump-if fell through
 106 run: reply y
9999 mem: location 1054 is 5
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 5
9999 mem: storing 5 in location 1042
 105 run: len <- subtract end, start
9999 mem: location 1042 is 5
9999 mem: location 1041 is 4
9999 mem: storing 1 in location 1043
 105 run: result:address:shared:array:character <- new character:type, len
9999 mem: location 1043 is 1
9999 mem: array size is 1
9999 mem: allocating size 3
9999 mem: new alloc: 1062
9999 mem: storing 1 in location 1063
9999 mem: storing 1062 in location 1044
9999 mem: incrementing refcount of 1062: 0 -> 1
 105 run: src-idx:number <- copy start
9999 mem: location 1041 is 4
9999 mem: storing 4 in location 1045
 105 run: dest-idx:number <- copy 0
9999 mem: storing 0 in location 1046
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1045 is 4
9999 mem: location 1042 is 5
9999 mem: storing 0 in location 1047
 105 run: jump-if done?, 
9999 mem: location 1047 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *buf, src-idx
9999 mem: location 1040 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1045 is 4
9998 run: address to copy is 1006
9998 run: its type is character
9999 mem: location 1006 is 99
9999 mem: storing 99 in location 1048
 105 run: dest:address:character <- index-address *result, dest-idx
9999 mem: location 1044 is 1062
9999 mem: skipping refcount at 1062
9999 mem: location 1046 is 0
9999 mem: storing 1064 in location 1049
 105 run: *dest <- copy src
9999 mem: location 1048 is 99
9999 mem: location 1049 is 1064
9999 mem: storing 99 in location 1064
 105 run: src-idx <- add src-idx, 1
9999 mem: location 1045 is 4
9999 mem: storing 5 in location 1045
 105 run: dest-idx <- add dest-idx, 1
9999 mem: location 1046 is 0
9999 mem: storing 1 in location 1046
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal src-idx, end
9999 mem: location 1045 is 5
9999 mem: location 1042 is 5
9999 mem: storing 1 in location 1047
 105 run: jump-if done?, 
9999 mem: location 1047 is 1
9998 run: jumping to instruction 19
 105 run: reply result:address:shared:array:character
9999 mem: location 1044 is 1062
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1062
9999 mem: location 1021 is 1036
9999 mem: storing 1062 in location 1036
9999 mem: incrementing refcount of 1062: 1 -> 2
 104 run: start <- add end, 1
9999 mem: location 1020 is 5
9999 mem: storing 6 in location 1019
 104 run: curr-result <- add curr-result, 1
9999 mem: location 1018 is 2
9999 mem: storing 3 in location 1018
 104 run: jump 
9998 run: jumping to instruction 24
 104 run: done?:boolean <- greater-or-equal start, len
9999 mem: location 1019 is 6
9999 mem: location 1012 is 5
9999 mem: storing 1 in location 1017
 104 run: jump-if done?, 
9999 mem: location 1017 is 1
9998 run: jumping to instruction 32
 104 run: reply result:address:shared:array:address:shared:array:character
9999 mem: location 1014 is 1032
9999 abandon: saving in free-list of size 15
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1032
9999 mem: storing 1032 in location 2
9999 mem: incrementing refcount of 1032: 1 -> 2
 103 run: 3:number <- length *2:address:shared:array:address:shared:array:character
9999 mem: location 2 is 1032
9999 mem: skipping refcount at 1032
9999 mem: storing 3 in location 3
 103 run: 4:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 0
9999 mem: location 2 is 1032
9999 mem: skipping refcount at 1032
9998 run: base address is 1033
9998 run: address to copy is 1034
9998 run: its type is address
9999 mem: location 1034 is 1056
9999 mem: storing 1056 in location 4
9999 mem: incrementing refcount of 1056: 2 -> 3
 103 run: 5:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 1
9999 mem: location 2 is 1032
9999 mem: skipping refcount at 1032
9998 run: base address is 1033
9998 run: address to copy is 1035
9998 run: its type is address
9999 mem: location 1035 is 1059
9999 mem: storing 1059 in location 5
9999 mem: incrementing refcount of 1059: 2 -> 3
 103 run: 6:address:shared:array:character <- index *2:address:shared:array:address:shared:array:character, 2
9999 mem: location 2 is 1032
9999 mem: skipping refcount at 1032
9998 run: base address is 1033
9998 run: address to copy is 1036
9998 run: its type is address
9999 mem: location 1036 is 1062
9999 mem: storing 1062 in location 6
9999 mem: incrementing refcount of 1062: 2 -> 3
 103 run: 10:array:character <- copy *4:address:shared:array:character
9999 mem: location 4 is 1056
9999 mem: skipping refcount at 1056
9999 mem: location 1057 is 1
9999 mem: location 1058 is 97
9999 mem: storing 1 in location 10
9999 mem: storing 97 in location 11
 103 run: 20:array:character <- copy *5:address:shared:array:character
9999 mem: location 5 is 1059
9999 mem: skipping refcount at 1059
9999 mem: location 1060 is 1
9999 mem: location 1061 is 98
9999 mem: storing 1 in location 20
9999 mem: storing 98 in location 21
 103 run: 30:array:character <- copy *6:address:shared:array:character
9999 mem: location 6 is 1062
9999 mem: skipping refcount at 1062
9999 mem: location 1063 is 1
9999 mem: location 1064 is 99
9999 mem: storing 1 in location 30
9999 mem: storing 99 in location 31
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    3 <- 3  # length of result
    10:array:character <- [a]
    20:array:character <- [b]
    30:array:character <- [c]
  ]
9999 run: checking location 3
9999 run: checking string length at 10
9999 run: checking location 11
9999 run: checking string length at 20
9999 run: checking location 21
9999 run: checking string length at 30
9999 run: checking location 31
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
