9991 parse: --- defining scenario-stash-handles-list-with-cycle
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    x:address:list:number <- push 4, 0\n    y:address:address:list:number <- get-address *x, next:offset\n    *y <- copy x\n    stash [foo foo], x\n  ": "literal-string"}
9992 load: after rewriting: run [
    x:address:list:number <- push 4, 0
    y:address:address:list:number <- get-address *x, next:offset
    *y <- copy x
    stash [foo foo], x
  ]
9993 parse: instruction: trace-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    app: foo foo 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> ...\n  ": "literal-string"}
9992 load: after rewriting: trace-should-contain [
    app: foo foo 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> ...
  ]
9999 parse: recipe scenario-stash-handles-list-with-cycle has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-stash-handles-list-with-cycle
9991 transform: --- deduce types for recipe scenario-stash-handles-list-with-cycle
9991 transform: --- resolve ambiguous calls for recipe scenario-stash-handles-list-with-cycle
9991 transform: --- compute instruction operations for recipe scenario-stash-handles-list-with-cycle
9991 transform: --- transform braces for recipe scenario-stash-handles-list-with-cycle
9992 transform: run ...
9992 transform: trace-should-contain ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe scenario-stash-handles-list-with-cycle
9991 transform: --- transform names for recipe scenario-stash-handles-list-with-cycle
9991 transform: --- perform checks for recipe scenario-stash-handles-list-with-cycle
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-stash-handles-list-with-cycle
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-stash-handles-list-with-cycle
 102 run: run [
    x:address:list:number <- push 4, 0
    y:address:address:list:number <- get-address *x, next:offset
    *y <- copy x
    stash [foo foo], x
  ]
9991 parse: --- defining run1001
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "literal"}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"x": <"address" : <"list" : <"number" : <>>>>}
9992 load: after rewriting: x:address:list:number <- push 4, 0
9993 parse: instruction: get-address
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <>, "lookup": <>}
9993 parse:   ingredient: {"next": "offset"}
9993 parse:   product: {"y": <"address" : <"address" : <"list" : <"number" : <>>>>>}
9992 load: after rewriting: y:address:address:list:number <- get-address *x, next:offset
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"x": <>}
9993 parse:   product: {"y": <>, "lookup": <>}
9992 load: after rewriting: *y <- copy x
9993 parse: instruction: stash
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"foo foo": "literal-string"}
9993 parse:   ingredient: {"x": <>}
9992 load: after rewriting: stash [foo foo], x
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- deduce types for recipe run1001
9992 transform: x => <address : <list : <number : <>>>>
9992 transform: x <= <address : <list : <number : <>>>>
9992 transform: y => <address : <address : <list : <number : <>>>>>
9992 transform: x <= <address : <list : <number : <>>>>
9992 transform: y <= <address : <address : <list : <number : <>>>>>
9992 transform: x <= <address : <list : <number : <>>>>
9992 transform: stash_0_1 => <address : <array : <character : <>>>>
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: non-strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: mismatch: product 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 104
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9993 transform: mismatch: product 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 2
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 3
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 233 push
9993 transform: switching push to push_5
9993 transform: compute type names: push_5
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of in is <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"result": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of result is <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: x:_elem <- next-ingredient 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: in:address:list:_elem <- next-ingredient 
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: result <- new {(list _elem): type}
9994 transform:     checking {"(list _elem)": "type"}: "type"
9993 transform: type of (list _elem) is "type"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: val:address:_elem <- get-address *result, value:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"val": <"address" : <"_elem" : <>>>}: <"address" : <"_elem" : <>>>
9993 transform: type of val is <"address" : <"_elem" : <>>>
9993 transform:   instruction: *val <- copy x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"val": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"_elem" : <>>>
9993 transform:   instruction: next:address:address:list:_elem <- get-address *result, next:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"next": <"address" : <"address" : <"list" : <"_elem" : <>>>>>}: <"address" : <"address" : <"list" : <"_elem" : <>>>>>
9993 transform: type of next is <"address" : <"address" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: *next <- copy in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"next": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: reply result
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9993 transform: adding mapping from _elem to "literal"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'in:address:list:_elem <- next-ingredient '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'result <- new {(list _elem): type}'
9993 transform: replacing in ingredient {(list _elem): type}
9993 transform:   after: ?0
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'val:address:_elem <- get-address *result, value:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient val:address:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <number : <>>>
9993 transform: replacing in instruction '*val <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient *val
9993 transform: _elem => "number"
9993 transform:   after: <address : <number : <>>>
9993 transform: replacing in instruction 'next:address:address:list:_elem <- get-address *result, next:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient next:address:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <address : <list : <number : <>>>>>
9993 transform: replacing in instruction '*next <- copy in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient *next
9993 transform: _elem => "number"
9993 transform:   after: <address : <address : <list : <number : <>>>>>
9993 transform: replacing in instruction 'reply result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9992 transform: transforming new specialization: push_5
9991 transform: --- checking reply instructions against header for push_5
9991 transform: --- fill in reply ingredients from header for recipe push_5
9991 transform: --- deduce types for recipe push_5
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: x => number
9992 transform: in => <address : <list : <number : <>>>>
9992 transform: result => <address : <list : <number : <>>>>
9992 transform: val => <address : <number : <>>>
9992 transform: next => <address : <address : <list : <number : <>>>>>
9991 transform: --- deduce types from header for push_5
9993 transform: type of x is number
9993 transform: type of in is <address : <list : <number : <>>>>
9993 transform: type of result is <address : <list : <number : <>>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: x:_elem <- next-ingredient 
9993 transform:   product: x: number -- {"x": "number"}
9992 transform: instruction: in:address:list:_elem <- next-ingredient 
9993 transform:   product: in: <address : <list : <number : <>>>> -- {"in": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: result <- new {(list _elem): type}
9993 transform:   product: result: <address : <list : <number : <>>>> -- {"result": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: val:address:_elem <- get-address *result, value:offset
9993 transform:   product: val: <address : <number : <>>> -- {"val": <"address" : <"number" : <>>>}
9992 transform: instruction: *val <- copy x
9993 transform:   product: val: <address : <number : <>>> -- {"val": <"address" : <"number" : <>>>, "lookup": <>}
9992 transform: instruction: next:address:address:list:_elem <- get-address *result, next:offset
9993 transform:   product: next: <address : <address : <list : <number : <>>>>> -- {"next": <"address" : <"address" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: *next <- copy in
9993 transform:   product: next: <address : <address : <list : <number : <>>>>> -- {"next": <"address" : <"address" : <"list" : <"number" : <>>>>>, "lookup": <>}
9992 transform: instruction: reply result
9991 transform: --- resolve ambiguous calls for recipe push_5
9992 transform: instruction copy
9992 transform: score for base: -1
9993 transform: too few ingredients
9992 transform: score for variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction copy
9992 transform: score for base: -1
9993 transform: too few ingredients
9992 transform: score for variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9991 transform: --- compute instruction operations for recipe push_5
9991 transform: --- transform braces for recipe push_5
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: reply ...
9991 transform: --- collect surrounding spaces for recipe push_5
9991 transform: --- transform names for recipe push_5
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element value of type list is at offset 0
9993 name: assign val 4
9993 name: element next of type list is at offset 1
9993 name: assign next 5
9991 transform: --- perform checks for recipe push_5
9991 transform: --- convert 'new' to 'allocate' for recipe push_5
9992 new: size of "location" is 1
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9992 new: size of <"list" : <"number" : <>>> is 2
9991 transform: --- checking reply instructions against header for push_5
9992 transform: new specialization: push_5
9992 transform: instruction copy
9992 transform: score for base: -1
9993 transform: too few ingredients
9992 transform: score for variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction to-text-line
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: score for variant 2: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 103
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9992 transform: final score: 105
9992 transform: matches
9992 transform: found variant to specialize: 237 to-text-line_2
9993 transform: switching to-text-line to to-text-line_3
9993 transform: compute type names: to-text-line_3
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of in is <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"result": <"address" : <"array" : <"character" : <>>>>}: <"address" : <"array" : <"character" : <>>>>
9993 transform: type of result is <"address" : <"array" : <"character" : <>>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: in:address:list:_elem <- next-ingredient 
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: buf:address:buffer <- new-buffer 80
9994 transform:     checking {"80": "literal"}: "literal"
9993 transform: type of 80 is "literal"
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform: type of buf is <"address" : <"buffer" : <>>>
9993 transform:   instruction: buf <- to-buffer in, buf, 6
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"6": "literal"}: "literal"
9993 transform: type of 6 is "literal"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: result <- buffer-to-array buf
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:array:character
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'in:address:list:_elem <- next-ingredient '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'buf:address:buffer <- new-buffer 80'
9993 transform: replacing in ingredient 80
9993 transform:   after: ?0
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'buf <- to-buffer in, buf, 6'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient 6
9993 transform:   after: ?0
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'result <- buffer-to-array buf'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient result
9993 transform:   after: <address : <array : <character : <>>>>
9992 transform: transforming new specialization: to-text-line_3
9991 transform: --- checking reply instructions against header for to-text-line_3
9991 transform: --- fill in reply ingredients from header for recipe to-text-line_3
9991 transform: --- deduce types for recipe to-text-line_3
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: in => <address : <list : <number : <>>>>
9992 transform: buf => <address : <buffer : <>>>
9992 transform: result => <address : <array : <character : <>>>>
9991 transform: --- deduce types from header for to-text-line_3
9993 transform: type of in is <address : <list : <number : <>>>>
9993 transform: type of result is <address : <array : <character : <>>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: in:address:list:_elem <- next-ingredient 
9993 transform:   product: in: <address : <list : <number : <>>>> -- {"in": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: buf:address:buffer <- new-buffer 80
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: buf <- to-buffer in, buf, 6
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: result <- buffer-to-array buf
9993 transform:   product: result: <address : <array : <character : <>>>> -- {"result": <"address" : <"array" : <"character" : <>>>>}
9992 transform: instruction: reply result:address:array:character
9991 transform: --- resolve ambiguous calls for recipe to-text-line_3
9992 transform: instruction new-buffer
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 1000
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 0: 1000
9992 transform: instruction to-buffer
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: score for variant 1: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 105
9992 transform: matches
9992 transform: found variant to specialize: 238 to-buffer
9993 transform: switching to-buffer to to-buffer_2
9993 transform: compute type names: to-buffer_2
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of in is <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform: type of buf is <"address" : <"buffer" : <>>>
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: in:address:list:_elem <- next-ingredient 
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: buf:address:buffer <- next-ingredient 
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform:   instruction: {
9993 transform:   instruction: break-if in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: $print [000], 10/newline
9994 transform:     checking {"000": "literal-string"}: "literal-string"
9993 transform: type of 000 is "literal-string"
9994 transform:     checking {"10": "literal", "newline": <>}: "literal"
9993 transform: type of 10 is "literal"
9993 transform:   instruction: buf <- append buf, 48/0
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"48": "literal", "0": <>}: "literal"
9993 transform: type of 48 is "literal"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: reply 
9993 transform:   instruction: }
9993 transform:   instruction: val:_elem <- get *in, value:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"val": "_elem"}: "_elem"
9993 transform: type of val is "_elem"
9993 transform:   instruction: buf <- append buf, val
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"val": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: next:address:list:_elem <- rest in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"next": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of next is <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: nextn:number <- copy next
9994 transform:     checking {"next": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"nextn": "number"}: "number"
9993 transform: type of nextn is "number"
9993 transform:   instruction: jump-if next, 1:offset
9994 transform:     checking {"next": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"1": "offset"}: "offset"
9993 transform:   instruction: reply 
9993 transform:   instruction: space:character <- copy 32/space
9994 transform:     checking {"32": "literal", "space": <>}: "literal"
9993 transform: type of 32 is "literal"
9994 transform:     checking {"space": "character"}: "character"
9993 transform: type of space is "character"
9993 transform:   instruction: buf <- append buf, space:character
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"space": "character"}: "character"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: s:address:array:character <- new [-> ]
9994 transform:     checking {"-> ": "literal-string"}: "literal-string"
9993 transform: type of ->  is "literal-string"
9994 transform:     checking {"s": <"address" : <"array" : <"character" : <>>>>}: <"address" : <"array" : <"character" : <>>>>
9993 transform: type of s is <"address" : <"array" : <"character" : <>>>>
9993 transform:   instruction: n:number <- length *s
9994 transform:     checking {"s": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9994 transform:     checking {"n": "number"}: "number"
9993 transform: type of n is "number"
9993 transform:   instruction: buf <- append buf, s
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"s": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9994 transform:     checking {"remaining": "number"}: "number"
9993 transform: type of remaining is "number"
9994 transform:     checking {"optional-ingredient-found?": "boolean"}: "boolean"
9993 transform: type of optional-ingredient-found? is "boolean"
9993 transform:   instruction: {
9993 transform:   instruction: break-if optional-ingredient-found?
9994 transform:     checking {"optional-ingredient-found?": <>}: <>
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: buf <- to-buffer next, buf
9994 transform:     checking {"next": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: reply 
9993 transform:   instruction: }
9993 transform:   instruction: {
9993 transform:   instruction: break-unless remaining
9994 transform:     checking {"remaining": <>}: <>
9994 transform:     deducing type to "number"
9993 transform:   instruction: remaining <- subtract remaining, 1
9994 transform:     checking {"remaining": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"1": "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {"remaining": <>}: <>
9994 transform:     deducing type to "number"
9993 transform:   instruction: buf <- to-buffer next, buf, remaining
9994 transform:     checking {"next": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"remaining": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: reply 
9993 transform:   instruction: }
9993 transform:   instruction: s:address:array:character <- new [...]
9994 transform:     checking {"...": "literal-string"}: "literal-string"
9993 transform: type of ... is "literal-string"
9994 transform:     checking {"s": <"address" : <"array" : <"character" : <>>>>}: <"address" : <"array" : <"character" : <>>>>
9993 transform:   instruction: append buf, s
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"s": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'in:address:list:_elem <- next-ingredient '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'buf:address:buffer <- next-ingredient '
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-if in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction '$print [000], 10/newline'
9993 transform: replacing in ingredient [000]
9993 transform:   after: ?0
9993 transform: replacing in ingredient 10/newline
9993 transform:   after: ?0
9993 transform: replacing in instruction 'buf <- append buf, 48/0'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient 48/0
9993 transform:   after: ?0
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'val:_elem <- get *in, value:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'buf <- append buf, val'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient val
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'next:address:list:_elem <- rest in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient next:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'nextn:number <- copy next'
9993 transform: replacing in ingredient next
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient nextn:number
9993 transform:   after: number
9993 transform: replacing in instruction 'jump-if next, 1:offset'
9993 transform: replacing in ingredient next
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient 1:offset
9993 transform:   after: ?0
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction 'space:character <- copy 32/space'
9993 transform: replacing in ingredient 32/space
9993 transform:   after: ?0
9993 transform: replacing in ingredient space:character
9993 transform:   after: character
9993 transform: replacing in instruction 'buf <- append buf, space:character'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient space:character
9993 transform:   after: character
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 's:address:array:character <- new [-> ]'
9993 transform: replacing in ingredient [-> ]
9993 transform:   after: ?0
9993 transform: replacing in ingredient s:address:array:character
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in instruction 'n:number <- length *s'
9993 transform: replacing in ingredient *s
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient n:number
9993 transform:   after: number
9993 transform: replacing in instruction 'buf <- append buf, s'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient s
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'remaining:number, optional-ingredient-found?:boolean <- next-ingredient '
9993 transform: replacing in ingredient remaining:number
9993 transform:   after: number
9993 transform: replacing in ingredient optional-ingredient-found?:boolean
9993 transform:   after: boolean
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-if optional-ingredient-found?'
9993 transform: replacing in ingredient optional-ingredient-found?
9993 transform:   after: boolean
9993 transform: replacing in instruction 'buf <- to-buffer next, buf'
9993 transform: replacing in ingredient next
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless remaining'
9993 transform: replacing in ingredient remaining
9993 transform:   after: number
9993 transform: replacing in instruction 'remaining <- subtract remaining, 1'
9993 transform: replacing in ingredient remaining
9993 transform:   after: number
9993 transform: replacing in ingredient 1
9993 transform:   after: ?0
9993 transform: replacing in ingredient remaining
9993 transform:   after: number
9993 transform: replacing in instruction 'buf <- to-buffer next, buf, remaining'
9993 transform: replacing in ingredient next
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient remaining
9993 transform:   after: number
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 's:address:array:character <- new [...]'
9993 transform: replacing in ingredient [...]
9993 transform:   after: ?0
9993 transform: replacing in ingredient s:address:array:character
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in instruction 'append buf, s'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient s
9993 transform:   after: <address : <array : <character : <>>>>
9992 transform: transforming new specialization: to-buffer_2
9991 transform: --- checking reply instructions against header for to-buffer_2
9991 transform: --- fill in reply ingredients from header for recipe to-buffer_2
9991 transform: --- deduce types for recipe to-buffer_2
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: in => <address : <list : <number : <>>>>
9992 transform: buf => <address : <buffer : <>>>
9992 transform: val => number
9992 transform: next => <address : <list : <number : <>>>>
9992 transform: nextn => number
9992 transform: space => character
9992 transform: s => <address : <array : <character : <>>>>
9992 transform: n => number
9992 transform: remaining => number
9992 transform: optional-ingredient-found? => boolean
9991 transform: --- deduce types from header for to-buffer_2
9993 transform: type of in is <address : <list : <number : <>>>>
9993 transform: type of buf is <address : <buffer : <>>>
9993 transform: type of buf is <address : <buffer : <>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: in:address:list:_elem <- next-ingredient 
9993 transform:   product: in: <address : <list : <number : <>>>> -- {"in": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: buf:address:buffer <- next-ingredient 
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: {
9992 transform: instruction: break-if in
9992 transform: instruction: $print [000], 10/newline
9992 transform: instruction: buf <- append buf, 48/0
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: reply buf:address:buffer
9992 transform: instruction: }
9992 transform: instruction: val:_elem <- get *in, value:offset
9993 transform:   product: val: number -- {"val": "number"}
9992 transform: instruction: buf <- append buf, val
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: next:address:list:_elem <- rest in
9993 transform:   product: next: <address : <list : <number : <>>>> -- {"next": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: nextn:number <- copy next
9993 transform:   product: nextn: number -- {"nextn": "number"}
9992 transform: instruction: jump-if next, 1:offset
9992 transform: instruction: reply buf:address:buffer
9992 transform: instruction: space:character <- copy 32/space
9993 transform:   product: space: character -- {"space": "character"}
9992 transform: instruction: buf <- append buf, space:character
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: s:address:array:character <- new [-> ]
9993 transform:   product: s: <address : <array : <character : <>>>> -- {"s": <"address" : <"array" : <"character" : <>>>>}
9992 transform: instruction: n:number <- length *s
9993 transform:   product: n: number -- {"n": "number"}
9992 transform: instruction: buf <- append buf, s
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9993 transform:   product: remaining: number -- {"remaining": "number"}
9993 transform:   product: optional-ingredient-found?: boolean -- {"optional-ingredient-found?": "boolean"}
9992 transform: instruction: {
9992 transform: instruction: break-if optional-ingredient-found?
9992 transform: instruction: buf <- to-buffer next, buf
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: reply buf:address:buffer
9992 transform: instruction: }
9992 transform: instruction: {
9992 transform: instruction: break-unless remaining
9992 transform: instruction: remaining <- subtract remaining, 1
9993 transform:   product: remaining: number -- {"remaining": "number"}
9992 transform: instruction: buf <- to-buffer next, buf, remaining
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: reply buf:address:buffer
9992 transform: instruction: }
9992 transform: instruction: s:address:array:character <- new [...]
9993 transform:   product: s: <address : <array : <character : <>>>> -- {"s": <"address" : <"array" : <"character" : <>>>>}
9992 transform: instruction: append buf, s
9992 transform: instruction: reply buf:address:buffer
9991 transform: --- resolve ambiguous calls for recipe to-buffer_2
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 990
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 104
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 2
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 3
9993 transform: mismatch: ingredient 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 4
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 207 append
9993 transform: switching append to append_6
9993 transform: compute type names: append_6
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform: type of buf is <"address" : <"buffer" : <>>>
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: buf:address:buffer <- next-ingredient 
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform:   instruction: x:_elem <- next-ingredient 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: text:address:array:character <- to-text x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"text": <"address" : <"array" : <"character" : <>>>>}: <"address" : <"array" : <"character" : <>>>>
9993 transform: type of text is <"address" : <"array" : <"character" : <>>>>
9993 transform:   instruction: len:number <- length *text
9994 transform:     checking {"text": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9994 transform:     checking {"len": "number"}: "number"
9993 transform: type of len is "number"
9993 transform:   instruction: i:number <- copy 0
9994 transform:     checking {"0": "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {"i": "number"}: "number"
9993 transform: type of i is "number"
9993 transform:   instruction: {
9993 transform:   instruction: done?:boolean <- greater-or-equal i, len
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"len": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"done?": "boolean"}: "boolean"
9993 transform: type of done? is "boolean"
9993 transform:   instruction: break-if done?
9994 transform:     checking {"done?": <>}: <>
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: c:character <- index *text, i
9994 transform:     checking {"text": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"c": "character"}: "character"
9993 transform: type of c is "character"
9993 transform:   instruction: buf <- append buf, c
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"c": <>}: <>
9994 transform:     deducing type to "character"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: i <- add i, 1
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"1": "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9993 transform:   instruction: loop 
9993 transform:   instruction: }
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'buf:address:buffer <- next-ingredient '
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'text:address:array:character <- to-text x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient text:address:array:character
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in instruction 'len:number <- length *text'
9993 transform: replacing in ingredient *text
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient len:number
9993 transform:   after: number
9993 transform: replacing in instruction 'i:number <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform:   after: ?0
9993 transform: replacing in ingredient i:number
9993 transform:   after: number
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'done?:boolean <- greater-or-equal i, len'
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient len
9993 transform:   after: number
9993 transform: replacing in ingredient done?:boolean
9993 transform:   after: boolean
9993 transform: replacing in instruction 'break-if done?'
9993 transform: replacing in ingredient done?
9993 transform:   after: boolean
9993 transform: replacing in instruction 'c:character <- index *text, i'
9993 transform: replacing in ingredient *text
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient c:character
9993 transform:   after: character
9993 transform: replacing in instruction 'buf <- append buf, c'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient c
9993 transform:   after: character
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'i <- add i, 1'
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient 1
9993 transform:   after: ?0
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in instruction 'loop '
9993 transform: replacing in instruction '}'
9992 transform: transforming new specialization: append_6
9991 transform: --- checking reply instructions against header for append_6
9991 transform: --- fill in reply ingredients from header for recipe append_6
9991 transform: --- deduce types for recipe append_6
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: buf => <address : <buffer : <>>>
9992 transform: x => number
9992 transform: text => <address : <array : <character : <>>>>
9992 transform: len => number
9992 transform: i => number
9992 transform: done? => boolean
9992 transform: c => character
9991 transform: --- deduce types from header for append_6
9993 transform: type of buf is <address : <buffer : <>>>
9993 transform: type of x is number
9993 transform: type of buf is <address : <buffer : <>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: buf:address:buffer <- next-ingredient 
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: x:_elem <- next-ingredient 
9993 transform:   product: x: number -- {"x": "number"}
9992 transform: instruction: text:address:array:character <- to-text x
9993 transform:   product: text: <address : <array : <character : <>>>> -- {"text": <"address" : <"array" : <"character" : <>>>>}
9992 transform: instruction: len:number <- length *text
9993 transform:   product: len: number -- {"len": "number"}
9992 transform: instruction: i:number <- copy 0
9993 transform:   product: i: number -- {"i": "number"}
9992 transform: instruction: {
9992 transform: instruction: done?:boolean <- greater-or-equal i, len
9993 transform:   product: done?: boolean -- {"done?": "boolean"}
9992 transform: instruction: break-if done?
9992 transform: instruction: c:character <- index *text, i
9993 transform:   product: c: character -- {"c": "character"}
9992 transform: instruction: buf <- append buf, c
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: i <- add i, 1
9993 transform:   product: i: number -- {"i": "number"}
9992 transform: instruction: loop 
9992 transform: instruction: }
9992 transform: instruction: reply buf:address:buffer
9991 transform: --- resolve ambiguous calls for recipe append_6
9992 transform: instruction to-text
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9992 transform: instruction copy
9992 transform: score for base: -1
9993 transform: too few ingredients
9992 transform: score for variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 7: -1
9991 transform: --- compute instruction operations for recipe append_6
9991 transform: --- transform braces for recipe append_6
9993 transform: append_6: push (open, 6)
9993 transform: push (close, 13)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: to-text ...
9992 transform: length ...
9992 transform: copy ...
9992 transform: greater-or-equal ...
9992 transform: jump-if done?, 4:offset
9992 transform: index ...
9992 transform: append ...
9992 transform: add ...
9992 transform: jump -6:offset
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe append_6
9991 transform: --- transform names for recipe append_6
9993 name: assign buf 1
9993 name: assign x 2
9993 name: assign text 3
9993 name: assign len 4
9993 name: assign i 5
9993 name: assign done? 6
9993 name: assign c 7
9991 transform: --- perform checks for recipe append_6
9991 transform: --- convert 'new' to 'allocate' for recipe append_6
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for append_6
9992 transform: new specialization: append_6
9992 transform: instruction rest
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: score for variant 2: -1
9992 transform: score for variant 3: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 104
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 235 rest
9993 transform: switching rest to rest_3
9993 transform: compute type names: rest_3
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of in is <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"result": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of result is <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: in:address:list:_elem <- next-ingredient 
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: result <- get *in, next:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'in:address:list:_elem <- next-ingredient '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'result <- get *in, next:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9992 transform: transforming new specialization: rest_3
9991 transform: --- checking reply instructions against header for rest_3
9991 transform: --- fill in reply ingredients from header for recipe rest_3
9991 transform: --- deduce types for recipe rest_3
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: in => <address : <list : <number : <>>>>
9992 transform: result => <address : <list : <number : <>>>>
9991 transform: --- deduce types from header for rest_3
9993 transform: type of in is <address : <list : <number : <>>>>
9993 transform: type of result is <address : <list : <number : <>>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: in:address:list:_elem <- next-ingredient 
9993 transform:   product: in: <address : <list : <number : <>>>> -- {"in": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: result <- get *in, next:offset
9993 transform:   product: result: <address : <list : <number : <>>>> -- {"result": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: reply result:address:list:_elem
9991 transform: --- resolve ambiguous calls for recipe rest_3
9991 transform: --- compute instruction operations for recipe rest_3
9991 transform: --- transform braces for recipe rest_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe rest_3
9991 transform: --- transform names for recipe rest_3
9993 name: assign in 1
9993 name: element next of type list is at offset 1
9993 name: assign result 2
9991 transform: --- perform checks for recipe rest_3
9991 transform: --- convert 'new' to 'allocate' for recipe rest_3
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for rest_3
9992 transform: new specialization: rest_3
9992 transform: instruction copy
9992 transform: score for base: -1
9993 transform: too few ingredients
9992 transform: score for variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction copy
9992 transform: score for base: -1
9993 transform: too few ingredients
9992 transform: score for variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 7: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 7: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 104
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 2
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 3
9993 transform: mismatch: ingredient 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 4
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 7
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 207 append
9993 transform: switching append to append_7
9993 transform: compute type names: append_7
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform: type of buf is <"address" : <"buffer" : <>>>
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: buf:address:buffer <- next-ingredient 
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform:   instruction: x:_elem <- next-ingredient 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: text:address:array:character <- to-text x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"text": <"address" : <"array" : <"character" : <>>>>}: <"address" : <"array" : <"character" : <>>>>
9993 transform: type of text is <"address" : <"array" : <"character" : <>>>>
9993 transform:   instruction: len:number <- length *text
9994 transform:     checking {"text": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9994 transform:     checking {"len": "number"}: "number"
9993 transform: type of len is "number"
9993 transform:   instruction: i:number <- copy 0
9994 transform:     checking {"0": "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {"i": "number"}: "number"
9993 transform: type of i is "number"
9993 transform:   instruction: {
9993 transform:   instruction: done?:boolean <- greater-or-equal i, len
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"len": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"done?": "boolean"}: "boolean"
9993 transform: type of done? is "boolean"
9993 transform:   instruction: break-if done?
9994 transform:     checking {"done?": <>}: <>
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: c:character <- index *text, i
9994 transform:     checking {"text": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"c": "character"}: "character"
9993 transform: type of c is "character"
9993 transform:   instruction: buf <- append buf, c
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"c": <>}: <>
9994 transform:     deducing type to "character"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: i <- add i, 1
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"1": "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9993 transform:   instruction: loop 
9993 transform:   instruction: }
9993 transform: adding mapping from _elem to <"address" : <"array" : <"character" : <>>>>
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => <"address" : <"array" : <"character" : <>>>>
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'buf:address:buffer <- next-ingredient '
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => <"address" : <"array" : <"character" : <>>>>
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in instruction 'text:address:array:character <- to-text x'
9993 transform: replacing in ingredient x
9993 transform: _elem => <"address" : <"array" : <"character" : <>>>>
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient text:address:array:character
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in instruction 'len:number <- length *text'
9993 transform: replacing in ingredient *text
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient len:number
9993 transform:   after: number
9993 transform: replacing in instruction 'i:number <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform:   after: ?0
9993 transform: replacing in ingredient i:number
9993 transform:   after: number
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'done?:boolean <- greater-or-equal i, len'
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient len
9993 transform:   after: number
9993 transform: replacing in ingredient done?:boolean
9993 transform:   after: boolean
9993 transform: replacing in instruction 'break-if done?'
9993 transform: replacing in ingredient done?
9993 transform:   after: boolean
9993 transform: replacing in instruction 'c:character <- index *text, i'
9993 transform: replacing in ingredient *text
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient c:character
9993 transform:   after: character
9993 transform: replacing in instruction 'buf <- append buf, c'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient c
9993 transform:   after: character
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'i <- add i, 1'
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient 1
9993 transform:   after: ?0
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in instruction 'loop '
9993 transform: replacing in instruction '}'
9992 transform: transforming new specialization: append_7
9991 transform: --- checking reply instructions against header for append_7
9991 transform: --- fill in reply ingredients from header for recipe append_7
9991 transform: --- deduce types for recipe append_7
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: buf => <address : <buffer : <>>>
9992 transform: x => <address : <array : <character : <>>>>
9992 transform: text => <address : <array : <character : <>>>>
9992 transform: len => number
9992 transform: i => number
9992 transform: done? => boolean
9992 transform: c => character
9991 transform: --- deduce types from header for append_7
9993 transform: type of buf is <address : <buffer : <>>>
9993 transform: type of x is <address : <array : <character : <>>>>
9993 transform: type of buf is <address : <buffer : <>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: buf:address:buffer <- next-ingredient 
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: x:_elem <- next-ingredient 
9993 transform:   product: x: <address : <array : <character : <>>>> -- {"x": <"address" : <"array" : <"character" : <>>>>}
9992 transform: instruction: text:address:array:character <- to-text x
9993 transform:   product: text: <address : <array : <character : <>>>> -- {"text": <"address" : <"array" : <"character" : <>>>>}
9992 transform: instruction: len:number <- length *text
9993 transform:   product: len: number -- {"len": "number"}
9992 transform: instruction: i:number <- copy 0
9993 transform:   product: i: number -- {"i": "number"}
9992 transform: instruction: {
9992 transform: instruction: done?:boolean <- greater-or-equal i, len
9993 transform:   product: done?: boolean -- {"done?": "boolean"}
9992 transform: instruction: break-if done?
9992 transform: instruction: c:character <- index *text, i
9993 transform:   product: c: character -- {"c": "character"}
9992 transform: instruction: buf <- append buf, c
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: i <- add i, 1
9993 transform:   product: i: number -- {"i": "number"}
9992 transform: instruction: loop 
9992 transform: instruction: }
9992 transform: instruction: reply buf:address:buffer
9991 transform: --- resolve ambiguous calls for recipe append_7
9992 transform: instruction to-text
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 1000
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 0: 1000
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9992 transform: instruction copy
9992 transform: score for base: -1
9993 transform: too few ingredients
9992 transform: score for variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 7: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 8: -1
9991 transform: --- compute instruction operations for recipe append_7
9991 transform: --- transform braces for recipe append_7
9993 transform: append_7: push (open, 6)
9993 transform: push (close, 13)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: to-text ...
9992 transform: length ...
9992 transform: copy ...
9992 transform: greater-or-equal ...
9992 transform: jump-if done?, 4:offset
9992 transform: index ...
9992 transform: append ...
9992 transform: add ...
9992 transform: jump -6:offset
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe append_7
9991 transform: --- transform names for recipe append_7
9993 name: assign buf 1
9993 name: assign x 2
9993 name: assign text 3
9993 name: assign len 4
9993 name: assign i 5
9993 name: assign done? 6
9993 name: assign c 7
9991 transform: --- perform checks for recipe append_7
9991 transform: --- convert 'new' to 'allocate' for recipe append_7
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for append_7
9992 transform: new specialization: append_7
9992 transform: instruction to-buffer
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: score for variant 1: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 2: 1000
9992 transform: instruction to-buffer
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: score for variant 1: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 2: 999
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 7: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9992 transform: score for variant 8: 999
9991 transform: --- compute instruction operations for recipe to-buffer_2
9991 transform: --- transform braces for recipe to-buffer_2
9993 transform: to-buffer_2: push (open, 3)
9993 transform: push (close, 8)
9993 transform: to-buffer_2: push (open, 21)
9993 transform: push (close, 25)
9993 transform: to-buffer_2: push (open, 26)
9993 transform: push (close, 31)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: jump-if in, 3:offset
9992 transform: $print ...
9992 transform: append ...
9992 transform: reply ...
9992 transform: get ...
9992 transform: append ...
9992 transform: rest ...
9992 transform: copy ...
9992 transform: reply-unless ...
9992 transform:  ...
9992 transform: copy ...
9992 transform: append ...
9992 transform: new ...
9992 transform: length ...
9992 transform: append ...
9992 transform: next-ingredient ...
9992 transform: jump-if optional-ingredient-found?, 2:offset
9992 transform: to-buffer ...
9992 transform: reply ...
9992 transform: jump-unless remaining, 3:offset
9992 transform: subtract ...
9992 transform: to-buffer ...
9992 transform: reply ...
9992 transform: new ...
9992 transform: append ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe to-buffer_2
9991 transform: --- transform names for recipe to-buffer_2
9993 name: assign in 1
9993 name: assign buf 2
9993 name: element value of type list is at offset 0
9993 name: assign val 3
9993 name: assign next 4
9993 name: assign nextn 5
9993 name: assign space 6
9993 name: assign s 7
9993 name: assign n 8
9993 name: assign remaining 9
9993 name: assign optional-ingredient-found? 10
9991 transform: --- perform checks for recipe to-buffer_2
9991 transform: --- convert 'new' to 'allocate' for recipe to-buffer_2
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for to-buffer_2
9992 transform: new specialization: to-buffer_2
9992 transform: instruction buffer-to-array
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 1000
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 0: 1000
9991 transform: --- compute instruction operations for recipe to-text-line_3
9991 transform: --- transform braces for recipe to-text-line_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: new-buffer ...
9992 transform: to-buffer ...
9992 transform: buffer-to-array ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe to-text-line_3
9991 transform: --- transform names for recipe to-text-line_3
9993 name: assign in 1
9993 name: assign buf 2
9993 name: assign result 3
9991 transform: --- perform checks for recipe to-text-line_3
9991 transform: --- convert 'new' to 'allocate' for recipe to-text-line_3
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for to-text-line_3
9992 transform: new specialization: to-text-line_3
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: push ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform:  ...
9992 transform: stash ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9993 name: assign x 1
9993 name: element next of type list is at offset 1
9993 name: assign y 2
9993 name: assign stash_0_1 3
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: x:address:list:number <- push_5 4, 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1002
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 0 in location 1003
 104 run: result <- new {(list _elem): type}
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1004 is 1007
9998 run: address to copy is 1007
9999 mem: storing 1007 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 4
9999 mem: location 1005 is 1007
9999 mem: storing 4 in location 1007
 104 run: next:address:address:list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 0
9999 mem: location 1004 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1008
9999 mem: storing 0 in location 1008
 104 run: reply result
9999 mem: location 1004 is 1007
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: y:address:address:list:number <- get-address *x, next:offset
9999 mem: location 1 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 0
9999 mem: location 1 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 2
 103 run: *y <- copy x
9999 mem: location 1 is 1007
9999 mem: location 2 is 1008
9999 mem: storing 1007 in location 1008
 103 run: stash_0_1:address:array:character <- to-text-line_3 x
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1009
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1011
 104 run: buf:address:buffer <- new-buffer 80
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1014
 105 run: capacity:number <- next-ingredient 
9999 mem: storing 80 in location 1016
 105 run: result <- new buffer:type
9999 mem: new alloc: 1020
9999 mem: storing 1020 in location 1017
 105 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1017 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1017 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1018
 105 run: *len:address:number <- copy 0
9999 mem: location 1018 is 1020
9999 mem: storing 0 in location 1020
 105 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1017 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 0
9999 mem: location 1017 is 1020
9998 run: address to copy is 1021
9999 mem: storing 1021 in location 1019
 105 run: *s <- new character:type, capacity
9999 mem: location 1016 is 80
9999 mem: array size is 80
9999 mem: new alloc: 1022
9999 mem: location 1019 is 1021
9999 mem: storing 1022 in location 1021
 105 run: reply result
9999 mem: location 1017 is 1020
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1012
 104 run: buf <- to-buffer_2 in, buf, 6
9999 mem: location 1011 is 1007
9999 mem: location 1012 is 1020
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1103
 105 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1105
 105 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1106
 105 run: jump-if in, 
9999 mem: location 1105 is 1007
9998 run: jumping to instruction 8
 105 run: val:_elem <- get *in, value:offset
9999 mem: location 1105 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1105 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 4
9999 mem: storing 4 in location 1107
 105 run: buf <- append_6 buf, val
9999 mem: location 1106 is 1020
9999 mem: location 1107 is 4
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1115
 106 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 106 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1118
 106 run: text:address:array:character <- to-text_2 x
9999 mem: location 1118 is 4
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
9999 mem: new alloc: 1124
 107 run: n:number <- next-ingredient 
9999 mem: storing 4 in location 1126
 107 run: jump-if n, 
9999 mem: location 1126 is 4
9998 run: jumping to instruction 6
 107 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1128
 107 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1129
 107 run: jump-unless negative?, 
9999 mem: location 1129 is 0
9998 run: jumping to instruction 13
 107 run: tmp:address:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 108 run: capacity:number <- next-ingredient 
9999 mem: storing 30 in location 1016
 108 run: result <- new buffer:type
9999 mem: new alloc: 1141
9999 mem: storing 1141 in location 1017
 108 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1017 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1142 is 0
9999 mem: location 1017 is 1141
9998 run: address to copy is 1141
9999 mem: storing 1141 in location 1018
 108 run: *len:address:number <- copy 0
9999 mem: location 1018 is 1141
9999 mem: storing 0 in location 1141
 108 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1017 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1142 is 0
9999 mem: location 1017 is 1141
9998 run: address to copy is 1142
9999 mem: storing 1142 in location 1019
 108 run: *s <- new character:type, capacity
9999 mem: location 1016 is 30
9999 mem: array size is 30
9999 mem: new alloc: 1143
9999 mem: location 1019 is 1142
9999 mem: storing 1143 in location 1142
 108 run: reply result
9999 mem: location 1017 is 1141
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1141
9999 mem: storing 1141 in location 1130
 107 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1131
 107 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1132
 107 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 107 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1126
9999 mem: storing 4 in location 1133
 107 run: c:character <- add digit-base, digit
9999 mem: location 1131 is 48
9999 mem: location 1133 is 4
9999 mem: storing 52 in location 1134
 107 run: tmp:address:buffer <- append_2 tmp, c
9999 mem: location 1130 is 1141
9999 mem: location 1134 is 52
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1174
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1141 in location 1176
 108 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1142 is 1143
9999 mem: location 1176 is 1141
9998 run: address to copy is 1141
9999 mem: storing 1141 in location 1178
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 108 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1141
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1141 in location 1002
 109 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1142 is 1143
9999 mem: location 1002 is 1141
9998 run: address to copy is 1141
9998 run: its type is number
9999 mem: location 1141 is 0
9999 mem: storing 0 in location 1003
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1142 is 1143
9999 mem: location 1002 is 1141
9998 run: address to copy is 1142
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1142 is 1143
9999 mem: storing 1143 in location 1004
 109 run: capacity:number <- length *s
9999 mem: location 1004 is 1143
9999 mem: storing 30 in location 1005
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 0
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 109 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 108 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1142 is 1143
9999 mem: location 1176 is 1141
9998 run: address to copy is 1142
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1142 is 1143
9999 mem: storing 1143 in location 1182
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1143
9999 mem: location 1178 is 1141
9999 mem: location 1141 is 0
9999 mem: storing 1144 in location 1183
 108 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1144
9999 mem: storing 52 in location 1144
 108 run: *len <- add *len, 1
9999 mem: location 1178 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1178 is 1141
9999 mem: storing 1 in location 1141
 108 run: reply in:address:buffer
9999 mem: location 1176 is 1141
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1141
9999 mem: storing 1141 in location 1130
 107 run: jump 
9998 run: jumping to instruction 17
 107 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 0
9999 mem: storing 1 in location 1132
 107 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 23
 107 run: jump-unless negate-result:boolean, 
9999 mem: location 1128 is 0
9998 run: jumping to instruction 27
 107 run: len:number <- get *tmp, length:offset
9999 mem: location 1130 is 1141
9999 mem: location 1141 is 1
9999 mem: location 1142 is 1143
9999 mem: location 1130 is 1141
9998 run: address to copy is 1141
9998 run: its type is number
9999 mem: location 1141 is 1
9999 mem: storing 1 in location 1135
 107 run: buf:address:array:character <- get *tmp, data:offset
9999 mem: location 1130 is 1141
9999 mem: location 1141 is 1
9999 mem: location 1142 is 1143
9999 mem: location 1130 is 1141
9998 run: address to copy is 1142
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1142 is 1143
9999 mem: storing 1143 in location 1136
 107 run: result <- new character:type, len
9999 mem: location 1135 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1184
9999 mem: storing 1184 in location 1127
 107 run: i:number <- subtract len, 1
9999 mem: location 1135 is 1
9999 mem: storing 0 in location 1137
 107 run: j:number <- copy 0
9999 mem: storing 0 in location 1138
 107 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is 0
9999 mem: storing 0 in location 1132
 107 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 107 run: src:character <- index *buf, i
9999 mem: location 1136 is 1143
9999 mem: location 1137 is 0
9998 run: address to copy is 1144
9998 run: its type is character
9999 mem: location 1144 is 52
9999 mem: storing 52 in location 1139
 107 run: dest:address:character <- index-address *result, j
9999 mem: location 1127 is 1184
9999 mem: location 1138 is 0
9999 mem: storing 1185 in location 1140
 107 run: *dest <- copy src
9999 mem: location 1139 is 52
9999 mem: location 1140 is 1185
9999 mem: storing 52 in location 1185
 107 run: i <- subtract i, 1
9999 mem: location 1137 is 0
9999 mem: storing -1 in location 1137
 107 run: j <- add j, 1
9999 mem: location 1138 is 0
9999 mem: storing 1 in location 1138
 107 run: jump 
9998 run: jumping to instruction 34
 107 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is -1
9999 mem: storing 1 in location 1132
 107 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 42
 107 run: reply result:address:array:character
9999 mem: location 1127 is 1184
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1184
9999 mem: storing 1184 in location 1119
 106 run: len:number <- length *text
9999 mem: location 1119 is 1184
9999 mem: storing 1 in location 1120
 106 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 1
9999 mem: storing 0 in location 1122
 106 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 106 run: c:character <- index *text, i
9999 mem: location 1119 is 1184
9999 mem: location 1121 is 0
9998 run: address to copy is 1185
9998 run: its type is character
9999 mem: location 1185 is 52
9999 mem: storing 52 in location 1123
 106 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 52
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 107 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 107 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 107 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 108 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 0
9999 mem: storing 0 in location 1003
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 108 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 0
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 108 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 107 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 107 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 0
9999 mem: storing 1023 in location 1183
 107 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1023
9999 mem: storing 52 in location 1023
 107 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 0
9999 mem: location 1178 is 1020
9999 mem: storing 1 in location 1020
 107 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 106 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 106 run: jump 
9998 run: jumping to instruction 7
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 1
9999 mem: storing 1 in location 1122
 106 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 106 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1106
 105 run: next:address:list:_elem <- rest_3 in
9999 mem: location 1105 is 1007
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1186
 106 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1188
 106 run: result <- get *in, next:offset
9999 mem: location 1188 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1188 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9998 run: its type is <address : <list : <number : <>>>>
9999 mem: location 1008 is 1007
9999 mem: storing 1007 in location 1189
 106 run: reply result:address:list:_elem
9999 mem: location 1189 is 1007
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1108
 105 run: nextn:number <- copy next
9999 mem: location 1108 is 1007
9999 mem: storing 1007 in location 1109
 105 run: jump-if next, 1:offset
9999 mem: location 1108 is 1007
9998 run: jumping to instruction 15
 105 run: space:character <- copy 32/space
9999 mem: storing 32 in location 1110
 105 run: buf <- append_2 buf, space:character
9999 mem: location 1106 is 1020
9999 mem: location 1110 is 32
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 106 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 106 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 106 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 106 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 106 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 106 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 107 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 107 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 1
9999 mem: storing 1 in location 1003
 107 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 107 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 107 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 1
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 107 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 106 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 106 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 1
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 106 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 1
9999 mem: storing 1024 in location 1183
 106 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1024
9999 mem: storing 32 in location 1024
 106 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 1
9999 mem: location 1178 is 1020
9999 mem: storing 2 in location 1020
 106 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1106
 105 run: s:address:array:character <- new [-> ]
9999 mem: storing 1190 in location 1111
 105 run: n:number <- length *s
9999 mem: location 1111 is 1190
9999 mem: storing 3 in location 1112
 105 run: buf <- append_7 buf, s
9999 mem: location 1106 is 1020
9999 mem: location 1111 is 1190
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 106 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 106 run: x:_elem <- next-ingredient 
9999 mem: storing 1190 in location 1118
 106 run: text:address:array:character <- to-text x
9999 mem: location 1118 is 1190
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1194
 107 run: x:address:array:character <- next-ingredient 
9999 mem: storing 1190 in location 1196
 107 run: reply x
9999 mem: location 1196 is 1190
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1190
9999 mem: storing 1190 in location 1119
 106 run: len:number <- length *text
9999 mem: location 1119 is 1190
9999 mem: storing 3 in location 1120
 106 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 106 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 106 run: c:character <- index *text, i
9999 mem: location 1119 is 1190
9999 mem: location 1121 is 0
9998 run: address to copy is 1191
9998 run: its type is character
9999 mem: location 1191 is 45
9999 mem: storing 45 in location 1123
 106 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 45
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 107 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 107 run: c:character <- next-ingredient 
9999 mem: storing 45 in location 1177
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 45
9999 mem: storing 0 in location 1179
 107 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 108 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 2
9999 mem: storing 2 in location 1003
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 108 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 2
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 108 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 107 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 107 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 2
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 2
9999 mem: storing 1025 in location 1183
 107 run: *dest <- copy c
9999 mem: location 1177 is 45
9999 mem: location 1183 is 1025
9999 mem: storing 45 in location 1025
 107 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 2
9999 mem: location 1178 is 1020
9999 mem: storing 3 in location 1020
 107 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 106 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 106 run: jump 
9998 run: jumping to instruction 7
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 106 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 106 run: c:character <- index *text, i
9999 mem: location 1119 is 1190
9999 mem: location 1121 is 1
9998 run: address to copy is 1192
9998 run: its type is character
9999 mem: location 1192 is 62
9999 mem: storing 62 in location 1123
 106 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 62
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 107 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 107 run: c:character <- next-ingredient 
9999 mem: storing 62 in location 1177
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 3
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 62
9999 mem: storing 0 in location 1179
 107 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 108 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 3
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 3
9999 mem: storing 3 in location 1003
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 3
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 108 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 3
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 108 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 107 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 107 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 3
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 3
9999 mem: storing 1026 in location 1183
 107 run: *dest <- copy c
9999 mem: location 1177 is 62
9999 mem: location 1183 is 1026
9999 mem: storing 62 in location 1026
 107 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 3
9999 mem: location 1178 is 1020
9999 mem: storing 4 in location 1020
 107 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 106 run: i <- add i, 1
9999 mem: location 1121 is 1
9999 mem: storing 2 in location 1121
 106 run: jump 
9998 run: jumping to instruction 7
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 2
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 106 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 106 run: c:character <- index *text, i
9999 mem: location 1119 is 1190
9999 mem: location 1121 is 2
9998 run: address to copy is 1193
9998 run: its type is character
9999 mem: location 1193 is 32
9999 mem: storing 32 in location 1123
 106 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 32
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 107 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 107 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 4
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 107 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 108 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 4
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 4
9999 mem: storing 4 in location 1003
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 4
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 108 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 4
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 108 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 107 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 107 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 4
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 4
9999 mem: storing 1027 in location 1183
 107 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1027
9999 mem: storing 32 in location 1027
 107 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 4
9999 mem: location 1178 is 1020
9999 mem: storing 5 in location 1020
 107 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 106 run: i <- add i, 1
9999 mem: location 1121 is 2
9999 mem: storing 3 in location 1121
 106 run: jump 
9998 run: jumping to instruction 7
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 3
9999 mem: location 1120 is 3
9999 mem: storing 1 in location 1122
 106 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 106 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1106
 105 run: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9999 mem: storing 6 in location 1113
9999 mem: storing 1 in location 1114
 105 run: jump-if optional-ingredient-found?, 
9999 mem: location 1114 is 1
9998 run: jumping to instruction 25
 105 run: jump-unless remaining, 
9999 mem: location 1113 is 6
9998 run: jump-unless fell through
 105 run: remaining <- subtract remaining, 1
9999 mem: location 1113 is 6
9999 mem: storing 5 in location 1113
 105 run: buf <- to-buffer_2 next, buf, remaining
9999 mem: location 1108 is 1007
9999 mem: location 1106 is 1020
9999 mem: location 1113 is 5
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1197
 106 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1199
 106 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1200
 106 run: jump-if in, 
9999 mem: location 1199 is 1007
9998 run: jumping to instruction 8
 106 run: val:_elem <- get *in, value:offset
9999 mem: location 1199 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1199 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 4
9999 mem: storing 4 in location 1201
 106 run: buf <- append_6 buf, val
9999 mem: location 1200 is 1020
9999 mem: location 1201 is 4
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 107 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 107 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1118
 107 run: text:address:array:character <- to-text_2 x
9999 mem: location 1118 is 4
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
 108 run: n:number <- next-ingredient 
9999 mem: storing 4 in location 1126
 108 run: jump-if n, 
9999 mem: location 1126 is 4
9998 run: jumping to instruction 6
 108 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1128
 108 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1129
 108 run: jump-unless negative?, 
9999 mem: location 1129 is 0
9998 run: jumping to instruction 13
 108 run: tmp:address:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 109 run: capacity:number <- next-ingredient 
9999 mem: storing 30 in location 1016
 109 run: result <- new buffer:type
9999 mem: new alloc: 1209
9999 mem: storing 1209 in location 1017
 109 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1017 is 1209
9999 mem: location 1209 is 0
9999 mem: location 1210 is 0
9999 mem: location 1017 is 1209
9998 run: address to copy is 1209
9999 mem: storing 1209 in location 1018
 109 run: *len:address:number <- copy 0
9999 mem: location 1018 is 1209
9999 mem: storing 0 in location 1209
 109 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1017 is 1209
9999 mem: location 1209 is 0
9999 mem: location 1210 is 0
9999 mem: location 1017 is 1209
9998 run: address to copy is 1210
9999 mem: storing 1210 in location 1019
 109 run: *s <- new character:type, capacity
9999 mem: location 1016 is 30
9999 mem: array size is 30
9999 mem: new alloc: 1211
9999 mem: location 1019 is 1210
9999 mem: storing 1211 in location 1210
 109 run: reply result
9999 mem: location 1017 is 1209
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1209
9999 mem: storing 1209 in location 1130
 108 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1131
 108 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1132
 108 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 108 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1126
9999 mem: storing 4 in location 1133
 108 run: c:character <- add digit-base, digit
9999 mem: location 1131 is 48
9999 mem: location 1133 is 4
9999 mem: storing 52 in location 1134
 108 run: tmp:address:buffer <- append_2 tmp, c
9999 mem: location 1130 is 1209
9999 mem: location 1134 is 52
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1209 in location 1176
 109 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 109 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1209
9999 mem: location 1209 is 0
9999 mem: location 1210 is 1211
9999 mem: location 1176 is 1209
9998 run: address to copy is 1209
9999 mem: storing 1209 in location 1178
 109 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 109 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 109 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1209
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1209 in location 1002
 110 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1209
9999 mem: location 1209 is 0
9999 mem: location 1210 is 1211
9999 mem: location 1002 is 1209
9998 run: address to copy is 1209
9998 run: its type is number
9999 mem: location 1209 is 0
9999 mem: storing 0 in location 1003
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1209
9999 mem: location 1209 is 0
9999 mem: location 1210 is 1211
9999 mem: location 1002 is 1209
9998 run: address to copy is 1210
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1210 is 1211
9999 mem: storing 1211 in location 1004
 110 run: capacity:number <- length *s
9999 mem: location 1004 is 1211
9999 mem: storing 30 in location 1005
 110 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 0
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 110 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 109 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1209
9999 mem: location 1209 is 0
9999 mem: location 1210 is 1211
9999 mem: location 1176 is 1209
9998 run: address to copy is 1210
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1210 is 1211
9999 mem: storing 1211 in location 1182
 109 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1211
9999 mem: location 1178 is 1209
9999 mem: location 1209 is 0
9999 mem: storing 1212 in location 1183
 109 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1212
9999 mem: storing 52 in location 1212
 109 run: *len <- add *len, 1
9999 mem: location 1178 is 1209
9999 mem: location 1209 is 0
9999 mem: location 1178 is 1209
9999 mem: storing 1 in location 1209
 109 run: reply in:address:buffer
9999 mem: location 1176 is 1209
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1209
9999 mem: storing 1209 in location 1130
 108 run: jump 
9998 run: jumping to instruction 17
 108 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 0
9999 mem: storing 1 in location 1132
 108 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 23
 108 run: jump-unless negate-result:boolean, 
9999 mem: location 1128 is 0
9998 run: jumping to instruction 27
 108 run: len:number <- get *tmp, length:offset
9999 mem: location 1130 is 1209
9999 mem: location 1209 is 1
9999 mem: location 1210 is 1211
9999 mem: location 1130 is 1209
9998 run: address to copy is 1209
9998 run: its type is number
9999 mem: location 1209 is 1
9999 mem: storing 1 in location 1135
 108 run: buf:address:array:character <- get *tmp, data:offset
9999 mem: location 1130 is 1209
9999 mem: location 1209 is 1
9999 mem: location 1210 is 1211
9999 mem: location 1130 is 1209
9998 run: address to copy is 1210
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1210 is 1211
9999 mem: storing 1211 in location 1136
 108 run: result <- new character:type, len
9999 mem: location 1135 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1242
9999 mem: storing 1242 in location 1127
 108 run: i:number <- subtract len, 1
9999 mem: location 1135 is 1
9999 mem: storing 0 in location 1137
 108 run: j:number <- copy 0
9999 mem: storing 0 in location 1138
 108 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is 0
9999 mem: storing 0 in location 1132
 108 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 108 run: src:character <- index *buf, i
9999 mem: location 1136 is 1211
9999 mem: location 1137 is 0
9998 run: address to copy is 1212
9998 run: its type is character
9999 mem: location 1212 is 52
9999 mem: storing 52 in location 1139
 108 run: dest:address:character <- index-address *result, j
9999 mem: location 1127 is 1242
9999 mem: location 1138 is 0
9999 mem: storing 1243 in location 1140
 108 run: *dest <- copy src
9999 mem: location 1139 is 52
9999 mem: location 1140 is 1243
9999 mem: storing 52 in location 1243
 108 run: i <- subtract i, 1
9999 mem: location 1137 is 0
9999 mem: storing -1 in location 1137
 108 run: j <- add j, 1
9999 mem: location 1138 is 0
9999 mem: storing 1 in location 1138
 108 run: jump 
9998 run: jumping to instruction 34
 108 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is -1
9999 mem: storing 1 in location 1132
 108 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 42
 108 run: reply result:address:array:character
9999 mem: location 1127 is 1242
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1242
9999 mem: storing 1242 in location 1119
 107 run: len:number <- length *text
9999 mem: location 1119 is 1242
9999 mem: storing 1 in location 1120
 107 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 1
9999 mem: storing 0 in location 1122
 107 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 107 run: c:character <- index *text, i
9999 mem: location 1119 is 1242
9999 mem: location 1121 is 0
9998 run: address to copy is 1243
9998 run: its type is character
9999 mem: location 1243 is 52
9999 mem: storing 52 in location 1123
 107 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 52
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 108 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 5
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 108 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 109 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 5
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 5
9999 mem: storing 5 in location 1003
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 5
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 109 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 5
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 109 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 108 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 5
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 5
9999 mem: storing 1028 in location 1183
 108 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1028
9999 mem: storing 52 in location 1028
 108 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 5
9999 mem: location 1178 is 1020
9999 mem: storing 6 in location 1020
 108 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 107 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 107 run: jump 
9998 run: jumping to instruction 7
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 1
9999 mem: storing 1 in location 1122
 107 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 107 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1200
 106 run: next:address:list:_elem <- rest_3 in
9999 mem: location 1199 is 1007
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1188
 107 run: result <- get *in, next:offset
9999 mem: location 1188 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1188 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9998 run: its type is <address : <list : <number : <>>>>
9999 mem: location 1008 is 1007
9999 mem: storing 1007 in location 1189
 107 run: reply result:address:list:_elem
9999 mem: location 1189 is 1007
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1202
 106 run: nextn:number <- copy next
9999 mem: location 1202 is 1007
9999 mem: storing 1007 in location 1203
 106 run: jump-if next, 1:offset
9999 mem: location 1202 is 1007
9998 run: jumping to instruction 15
 106 run: space:character <- copy 32/space
9999 mem: storing 32 in location 1204
 106 run: buf <- append_2 buf, space:character
9999 mem: location 1200 is 1020
9999 mem: location 1204 is 32
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 107 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 107 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 6
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 107 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 108 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 6
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 6
9999 mem: storing 6 in location 1003
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 6
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 108 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 6
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 108 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 107 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 107 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 6
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 6
9999 mem: storing 1029 in location 1183
 107 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1029
9999 mem: storing 32 in location 1029
 107 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 6
9999 mem: location 1178 is 1020
9999 mem: storing 7 in location 1020
 107 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1200
 106 run: s:address:array:character <- new [-> ]
9999 mem: storing 1244 in location 1205
 106 run: n:number <- length *s
9999 mem: location 1205 is 1244
9999 mem: storing 3 in location 1206
 106 run: buf <- append_7 buf, s
9999 mem: location 1200 is 1020
9999 mem: location 1205 is 1244
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 107 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 107 run: x:_elem <- next-ingredient 
9999 mem: storing 1244 in location 1118
 107 run: text:address:array:character <- to-text x
9999 mem: location 1118 is 1244
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
 108 run: x:address:array:character <- next-ingredient 
9999 mem: storing 1244 in location 1196
 108 run: reply x
9999 mem: location 1196 is 1244
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1244
9999 mem: storing 1244 in location 1119
 107 run: len:number <- length *text
9999 mem: location 1119 is 1244
9999 mem: storing 3 in location 1120
 107 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 107 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 107 run: c:character <- index *text, i
9999 mem: location 1119 is 1244
9999 mem: location 1121 is 0
9998 run: address to copy is 1245
9998 run: its type is character
9999 mem: location 1245 is 45
9999 mem: storing 45 in location 1123
 107 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 45
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 108 run: c:character <- next-ingredient 
9999 mem: storing 45 in location 1177
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 7
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 45
9999 mem: storing 0 in location 1179
 108 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 109 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 7
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 7
9999 mem: storing 7 in location 1003
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 7
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 109 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 7
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 109 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 108 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 7
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 7
9999 mem: storing 1030 in location 1183
 108 run: *dest <- copy c
9999 mem: location 1177 is 45
9999 mem: location 1183 is 1030
9999 mem: storing 45 in location 1030
 108 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 7
9999 mem: location 1178 is 1020
9999 mem: storing 8 in location 1020
 108 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 107 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 107 run: jump 
9998 run: jumping to instruction 7
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 107 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
9990 schedule: append_7/to-buffer_2/to-buffer_2/to-text-line_3/run1001/scenario-stash-handles-list-with-cycle
 107 run: c:character <- index *text, i
9999 mem: location 1119 is 1244
9999 mem: location 1121 is 1
9998 run: address to copy is 1246
9998 run: its type is character
9999 mem: location 1246 is 62
9999 mem: storing 62 in location 1123
 107 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 62
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 108 run: c:character <- next-ingredient 
9999 mem: storing 62 in location 1177
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 8
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 62
9999 mem: storing 0 in location 1179
 108 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 109 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 8
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 8
9999 mem: storing 8 in location 1003
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 8
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 109 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 8
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 109 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 108 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 8
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 8
9999 mem: storing 1031 in location 1183
 108 run: *dest <- copy c
9999 mem: location 1177 is 62
9999 mem: location 1183 is 1031
9999 mem: storing 62 in location 1031
 108 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 8
9999 mem: location 1178 is 1020
9999 mem: storing 9 in location 1020
 108 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 107 run: i <- add i, 1
9999 mem: location 1121 is 1
9999 mem: storing 2 in location 1121
 107 run: jump 
9998 run: jumping to instruction 7
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 2
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 107 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 107 run: c:character <- index *text, i
9999 mem: location 1119 is 1244
9999 mem: location 1121 is 2
9998 run: address to copy is 1247
9998 run: its type is character
9999 mem: location 1247 is 32
9999 mem: storing 32 in location 1123
 107 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 32
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 108 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 9
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 108 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 109 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 9
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 9
9999 mem: storing 9 in location 1003
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 9
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 109 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 9
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 109 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 108 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 9
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 9
9999 mem: storing 1032 in location 1183
 108 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1032
9999 mem: storing 32 in location 1032
 108 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 9
9999 mem: location 1178 is 1020
9999 mem: storing 10 in location 1020
 108 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 107 run: i <- add i, 1
9999 mem: location 1121 is 2
9999 mem: storing 3 in location 1121
 107 run: jump 
9998 run: jumping to instruction 7
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 3
9999 mem: location 1120 is 3
9999 mem: storing 1 in location 1122
 107 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 107 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1200
 106 run: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9999 mem: storing 5 in location 1207
9999 mem: storing 1 in location 1208
 106 run: jump-if optional-ingredient-found?, 
9999 mem: location 1208 is 1
9998 run: jumping to instruction 25
 106 run: jump-unless remaining, 
9999 mem: location 1207 is 5
9998 run: jump-unless fell through
 106 run: remaining <- subtract remaining, 1
9999 mem: location 1207 is 5
9999 mem: storing 4 in location 1207
 106 run: buf <- to-buffer_2 next, buf, remaining
9999 mem: location 1202 is 1007
9999 mem: location 1200 is 1020
9999 mem: location 1207 is 4
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1248
 107 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1250
 107 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1251
 107 run: jump-if in, 
9999 mem: location 1250 is 1007
9998 run: jumping to instruction 8
 107 run: val:_elem <- get *in, value:offset
9999 mem: location 1250 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1250 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 4
9999 mem: storing 4 in location 1252
 107 run: buf <- append_6 buf, val
9999 mem: location 1251 is 1020
9999 mem: location 1252 is 4
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 108 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 108 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1118
 108 run: text:address:array:character <- to-text_2 x
9999 mem: location 1118 is 4
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
 109 run: n:number <- next-ingredient 
9999 mem: storing 4 in location 1126
 109 run: jump-if n, 
9999 mem: location 1126 is 4
9998 run: jumping to instruction 6
 109 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1128
 109 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1129
 109 run: jump-unless negative?, 
9999 mem: location 1129 is 0
9998 run: jumping to instruction 13
 109 run: tmp:address:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 110 run: capacity:number <- next-ingredient 
9999 mem: storing 30 in location 1016
 110 run: result <- new buffer:type
9999 mem: new alloc: 1260
9999 mem: storing 1260 in location 1017
 110 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1017 is 1260
9999 mem: location 1260 is 0
9999 mem: location 1261 is 0
9999 mem: location 1017 is 1260
9998 run: address to copy is 1260
9999 mem: storing 1260 in location 1018
 110 run: *len:address:number <- copy 0
9999 mem: location 1018 is 1260
9999 mem: storing 0 in location 1260
 110 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1017 is 1260
9999 mem: location 1260 is 0
9999 mem: location 1261 is 0
9999 mem: location 1017 is 1260
9998 run: address to copy is 1261
9999 mem: storing 1261 in location 1019
 110 run: *s <- new character:type, capacity
9999 mem: location 1016 is 30
9999 mem: array size is 30
9999 mem: new alloc: 1262
9999 mem: location 1019 is 1261
9999 mem: storing 1262 in location 1261
 110 run: reply result
9999 mem: location 1017 is 1260
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1260
9999 mem: storing 1260 in location 1130
 109 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1131
 109 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1132
 109 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 109 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1126
9999 mem: storing 4 in location 1133
 109 run: c:character <- add digit-base, digit
9999 mem: location 1131 is 48
9999 mem: location 1133 is 4
9999 mem: storing 52 in location 1134
 109 run: tmp:address:buffer <- append_2 tmp, c
9999 mem: location 1130 is 1260
9999 mem: location 1134 is 52
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1260 in location 1176
 110 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 110 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1260
9999 mem: location 1260 is 0
9999 mem: location 1261 is 1262
9999 mem: location 1176 is 1260
9998 run: address to copy is 1260
9999 mem: storing 1260 in location 1178
 110 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 110 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 110 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1260
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 111 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1260 in location 1002
 111 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1260
9999 mem: location 1260 is 0
9999 mem: location 1261 is 1262
9999 mem: location 1002 is 1260
9998 run: address to copy is 1260
9998 run: its type is number
9999 mem: location 1260 is 0
9999 mem: storing 0 in location 1003
 111 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1260
9999 mem: location 1260 is 0
9999 mem: location 1261 is 1262
9999 mem: location 1002 is 1260
9998 run: address to copy is 1261
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1261 is 1262
9999 mem: storing 1262 in location 1004
 111 run: capacity:number <- length *s
9999 mem: location 1004 is 1262
9999 mem: storing 30 in location 1005
 111 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 0
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 111 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 110 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1260
9999 mem: location 1260 is 0
9999 mem: location 1261 is 1262
9999 mem: location 1176 is 1260
9998 run: address to copy is 1261
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1261 is 1262
9999 mem: storing 1262 in location 1182
 110 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1262
9999 mem: location 1178 is 1260
9999 mem: location 1260 is 0
9999 mem: storing 1263 in location 1183
 110 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1263
9999 mem: storing 52 in location 1263
 110 run: *len <- add *len, 1
9999 mem: location 1178 is 1260
9999 mem: location 1260 is 0
9999 mem: location 1178 is 1260
9999 mem: storing 1 in location 1260
 110 run: reply in:address:buffer
9999 mem: location 1176 is 1260
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1260
9999 mem: storing 1260 in location 1130
 109 run: jump 
9998 run: jumping to instruction 17
 109 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 0
9999 mem: storing 1 in location 1132
 109 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 23
 109 run: jump-unless negate-result:boolean, 
9999 mem: location 1128 is 0
9998 run: jumping to instruction 27
 109 run: len:number <- get *tmp, length:offset
9999 mem: location 1130 is 1260
9999 mem: location 1260 is 1
9999 mem: location 1261 is 1262
9999 mem: location 1130 is 1260
9998 run: address to copy is 1260
9998 run: its type is number
9999 mem: location 1260 is 1
9999 mem: storing 1 in location 1135
 109 run: buf:address:array:character <- get *tmp, data:offset
9999 mem: location 1130 is 1260
9999 mem: location 1260 is 1
9999 mem: location 1261 is 1262
9999 mem: location 1130 is 1260
9998 run: address to copy is 1261
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1261 is 1262
9999 mem: storing 1262 in location 1136
 109 run: result <- new character:type, len
9999 mem: location 1135 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1293
9999 mem: storing 1293 in location 1127
 109 run: i:number <- subtract len, 1
9999 mem: location 1135 is 1
9999 mem: storing 0 in location 1137
 109 run: j:number <- copy 0
9999 mem: storing 0 in location 1138
 109 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is 0
9999 mem: storing 0 in location 1132
 109 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 109 run: src:character <- index *buf, i
9999 mem: location 1136 is 1262
9999 mem: location 1137 is 0
9998 run: address to copy is 1263
9998 run: its type is character
9999 mem: location 1263 is 52
9999 mem: storing 52 in location 1139
 109 run: dest:address:character <- index-address *result, j
9999 mem: location 1127 is 1293
9999 mem: location 1138 is 0
9999 mem: storing 1294 in location 1140
 109 run: *dest <- copy src
9999 mem: location 1139 is 52
9999 mem: location 1140 is 1294
9999 mem: storing 52 in location 1294
 109 run: i <- subtract i, 1
9999 mem: location 1137 is 0
9999 mem: storing -1 in location 1137
 109 run: j <- add j, 1
9999 mem: location 1138 is 0
9999 mem: storing 1 in location 1138
 109 run: jump 
9998 run: jumping to instruction 34
 109 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is -1
9999 mem: storing 1 in location 1132
 109 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 42
 109 run: reply result:address:array:character
9999 mem: location 1127 is 1293
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1293
9999 mem: storing 1293 in location 1119
 108 run: len:number <- length *text
9999 mem: location 1119 is 1293
9999 mem: storing 1 in location 1120
 108 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 108 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 1
9999 mem: storing 0 in location 1122
 108 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 108 run: c:character <- index *text, i
9999 mem: location 1119 is 1293
9999 mem: location 1121 is 0
9998 run: address to copy is 1294
9998 run: its type is character
9999 mem: location 1294 is 52
9999 mem: storing 52 in location 1123
 108 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 52
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 109 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 109 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 10
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 109 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 109 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 109 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 110 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 10
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 10
9999 mem: storing 10 in location 1003
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 10
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 110 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 110 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 10
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 110 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 109 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 10
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 109 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 10
9999 mem: storing 1033 in location 1183
 109 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1033
9999 mem: storing 52 in location 1033
 109 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 10
9999 mem: location 1178 is 1020
9999 mem: storing 11 in location 1020
 109 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 108 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 108 run: jump 
9998 run: jumping to instruction 7
 108 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 1
9999 mem: storing 1 in location 1122
 108 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 108 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1251
 107 run: next:address:list:_elem <- rest_3 in
9999 mem: location 1250 is 1007
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 108 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1188
 108 run: result <- get *in, next:offset
9999 mem: location 1188 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1188 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9998 run: its type is <address : <list : <number : <>>>>
9999 mem: location 1008 is 1007
9999 mem: storing 1007 in location 1189
 108 run: reply result:address:list:_elem
9999 mem: location 1189 is 1007
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1253
 107 run: nextn:number <- copy next
9999 mem: location 1253 is 1007
9999 mem: storing 1007 in location 1254
 107 run: jump-if next, 1:offset
9999 mem: location 1253 is 1007
9998 run: jumping to instruction 15
 107 run: space:character <- copy 32/space
9999 mem: storing 32 in location 1255
 107 run: buf <- append_2 buf, space:character
9999 mem: location 1251 is 1020
9999 mem: location 1255 is 32
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 108 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 11
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 108 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 109 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 11
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 11
9999 mem: storing 11 in location 1003
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 11
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 109 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 11
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 109 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 108 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 11
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 11
9999 mem: storing 1034 in location 1183
 108 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1034
9999 mem: storing 32 in location 1034
 108 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 11
9999 mem: location 1178 is 1020
9999 mem: storing 12 in location 1020
 108 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1251
 107 run: s:address:array:character <- new [-> ]
9999 mem: storing 1295 in location 1256
 107 run: n:number <- length *s
9999 mem: location 1256 is 1295
9999 mem: storing 3 in location 1257
 107 run: buf <- append_7 buf, s
9999 mem: location 1251 is 1020
9999 mem: location 1256 is 1295
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 108 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 108 run: x:_elem <- next-ingredient 
9999 mem: storing 1295 in location 1118
 108 run: text:address:array:character <- to-text x
9999 mem: location 1118 is 1295
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
 109 run: x:address:array:character <- next-ingredient 
9999 mem: storing 1295 in location 1196
 109 run: reply x
9999 mem: location 1196 is 1295
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1295
9999 mem: storing 1295 in location 1119
 108 run: len:number <- length *text
9999 mem: location 1119 is 1295
9999 mem: storing 3 in location 1120
 108 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 108 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 108 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 108 run: c:character <- index *text, i
9999 mem: location 1119 is 1295
9999 mem: location 1121 is 0
9998 run: address to copy is 1296
9998 run: its type is character
9999 mem: location 1296 is 45
9999 mem: storing 45 in location 1123
 108 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 45
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 109 run: c:character <- next-ingredient 
9999 mem: storing 45 in location 1177
 109 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 12
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 109 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 45
9999 mem: storing 0 in location 1179
 109 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 109 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 110 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 12
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 12
9999 mem: storing 12 in location 1003
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 12
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 110 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 110 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 12
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 110 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 109 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 12
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 109 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 12
9999 mem: storing 1035 in location 1183
 109 run: *dest <- copy c
9999 mem: location 1177 is 45
9999 mem: location 1183 is 1035
9999 mem: storing 45 in location 1035
 109 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 12
9999 mem: location 1178 is 1020
9999 mem: storing 13 in location 1020
 109 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 108 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 108 run: jump 
9998 run: jumping to instruction 7
 108 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 108 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 108 run: c:character <- index *text, i
9999 mem: location 1119 is 1295
9999 mem: location 1121 is 1
9998 run: address to copy is 1297
9998 run: its type is character
9999 mem: location 1297 is 62
9999 mem: storing 62 in location 1123
 108 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 62
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 109 run: c:character <- next-ingredient 
9999 mem: storing 62 in location 1177
 109 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 13
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 109 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 62
9999 mem: storing 0 in location 1179
 109 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 109 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 110 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 13
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 13
9999 mem: storing 13 in location 1003
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 13
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 110 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 110 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 13
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 110 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 109 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 13
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 109 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 13
9999 mem: storing 1036 in location 1183
 109 run: *dest <- copy c
9999 mem: location 1177 is 62
9999 mem: location 1183 is 1036
9999 mem: storing 62 in location 1036
 109 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 13
9999 mem: location 1178 is 1020
9999 mem: storing 14 in location 1020
 109 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 108 run: i <- add i, 1
9999 mem: location 1121 is 1
9999 mem: storing 2 in location 1121
 108 run: jump 
9998 run: jumping to instruction 7
 108 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 2
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 108 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 108 run: c:character <- index *text, i
9999 mem: location 1119 is 1295
9999 mem: location 1121 is 2
9998 run: address to copy is 1298
9998 run: its type is character
9999 mem: location 1298 is 32
9999 mem: storing 32 in location 1123
 108 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 32
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 109 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 109 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 14
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 109 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 109 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 109 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 110 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 14
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 14
9999 mem: storing 14 in location 1003
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 14
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 110 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 110 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 14
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 110 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 109 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 14
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 109 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 14
9999 mem: storing 1037 in location 1183
 109 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1037
9999 mem: storing 32 in location 1037
 109 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 14
9999 mem: location 1178 is 1020
9999 mem: storing 15 in location 1020
 109 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 108 run: i <- add i, 1
9999 mem: location 1121 is 2
9999 mem: storing 3 in location 1121
 108 run: jump 
9998 run: jumping to instruction 7
 108 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 3
9999 mem: location 1120 is 3
9999 mem: storing 1 in location 1122
 108 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 108 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1251
 107 run: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9999 mem: storing 4 in location 1258
9999 mem: storing 1 in location 1259
 107 run: jump-if optional-ingredient-found?, 
9999 mem: location 1259 is 1
9998 run: jumping to instruction 25
 107 run: jump-unless remaining, 
9999 mem: location 1258 is 4
9998 run: jump-unless fell through
 107 run: remaining <- subtract remaining, 1
9999 mem: location 1258 is 4
9999 mem: storing 3 in location 1258
 107 run: buf <- to-buffer_2 next, buf, remaining
9999 mem: location 1253 is 1007
9999 mem: location 1251 is 1020
9999 mem: location 1258 is 3
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1299
 108 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1301
 108 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1302
 108 run: jump-if in, 
9999 mem: location 1301 is 1007
9998 run: jumping to instruction 8
 108 run: val:_elem <- get *in, value:offset
9999 mem: location 1301 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1301 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 4
9999 mem: storing 4 in location 1303
 108 run: buf <- append_6 buf, val
9999 mem: location 1302 is 1020
9999 mem: location 1303 is 4
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 109 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 109 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1118
 109 run: text:address:array:character <- to-text_2 x
9999 mem: location 1118 is 4
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
 110 run: n:number <- next-ingredient 
9999 mem: storing 4 in location 1126
 110 run: jump-if n, 
9999 mem: location 1126 is 4
9998 run: jumping to instruction 6
 110 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1128
 110 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1129
 110 run: jump-unless negative?, 
9999 mem: location 1129 is 0
9998 run: jumping to instruction 13
 110 run: tmp:address:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 111 run: capacity:number <- next-ingredient 
9999 mem: storing 30 in location 1016
 111 run: result <- new buffer:type
9999 mem: new alloc: 1311
9999 mem: storing 1311 in location 1017
 111 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1017 is 1311
9999 mem: location 1311 is 0
9999 mem: location 1312 is 0
9999 mem: location 1017 is 1311
9998 run: address to copy is 1311
9999 mem: storing 1311 in location 1018
 111 run: *len:address:number <- copy 0
9999 mem: location 1018 is 1311
9999 mem: storing 0 in location 1311
 111 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1017 is 1311
9999 mem: location 1311 is 0
9999 mem: location 1312 is 0
9999 mem: location 1017 is 1311
9998 run: address to copy is 1312
9999 mem: storing 1312 in location 1019
 111 run: *s <- new character:type, capacity
9999 mem: location 1016 is 30
9999 mem: array size is 30
9999 mem: new alloc: 1313
9999 mem: location 1019 is 1312
9999 mem: storing 1313 in location 1312
 111 run: reply result
9999 mem: location 1017 is 1311
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1311
9999 mem: storing 1311 in location 1130
 110 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1131
 110 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1132
 110 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 110 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1126
9999 mem: storing 4 in location 1133
 110 run: c:character <- add digit-base, digit
9999 mem: location 1131 is 48
9999 mem: location 1133 is 4
9999 mem: storing 52 in location 1134
 110 run: tmp:address:buffer <- append_2 tmp, c
9999 mem: location 1130 is 1311
9999 mem: location 1134 is 52
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 111 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1311 in location 1176
 111 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 111 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1311
9999 mem: location 1311 is 0
9999 mem: location 1312 is 1313
9999 mem: location 1176 is 1311
9998 run: address to copy is 1311
9999 mem: storing 1311 in location 1178
 111 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 111 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 111 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1311
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 112 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1311 in location 1002
 112 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1311
9999 mem: location 1311 is 0
9999 mem: location 1312 is 1313
9999 mem: location 1002 is 1311
9998 run: address to copy is 1311
9998 run: its type is number
9999 mem: location 1311 is 0
9999 mem: storing 0 in location 1003
 112 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1311
9999 mem: location 1311 is 0
9999 mem: location 1312 is 1313
9999 mem: location 1002 is 1311
9998 run: address to copy is 1312
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1312 is 1313
9999 mem: storing 1313 in location 1004
 112 run: capacity:number <- length *s
9999 mem: location 1004 is 1313
9999 mem: storing 30 in location 1005
 112 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 0
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 112 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 111 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 111 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1311
9999 mem: location 1311 is 0
9999 mem: location 1312 is 1313
9999 mem: location 1176 is 1311
9998 run: address to copy is 1312
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1312 is 1313
9999 mem: storing 1313 in location 1182
 111 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1313
9999 mem: location 1178 is 1311
9999 mem: location 1311 is 0
9999 mem: storing 1314 in location 1183
 111 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1314
9999 mem: storing 52 in location 1314
 111 run: *len <- add *len, 1
9999 mem: location 1178 is 1311
9999 mem: location 1311 is 0
9999 mem: location 1178 is 1311
9999 mem: storing 1 in location 1311
 111 run: reply in:address:buffer
9999 mem: location 1176 is 1311
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1311
9999 mem: storing 1311 in location 1130
 110 run: jump 
9998 run: jumping to instruction 17
 110 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 0
9999 mem: storing 1 in location 1132
 110 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 23
 110 run: jump-unless negate-result:boolean, 
9999 mem: location 1128 is 0
9998 run: jumping to instruction 27
 110 run: len:number <- get *tmp, length:offset
9999 mem: location 1130 is 1311
9999 mem: location 1311 is 1
9999 mem: location 1312 is 1313
9999 mem: location 1130 is 1311
9998 run: address to copy is 1311
9998 run: its type is number
9999 mem: location 1311 is 1
9999 mem: storing 1 in location 1135
 110 run: buf:address:array:character <- get *tmp, data:offset
9999 mem: location 1130 is 1311
9999 mem: location 1311 is 1
9999 mem: location 1312 is 1313
9999 mem: location 1130 is 1311
9998 run: address to copy is 1312
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1312 is 1313
9999 mem: storing 1313 in location 1136
 110 run: result <- new character:type, len
9999 mem: location 1135 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1344
9999 mem: storing 1344 in location 1127
 110 run: i:number <- subtract len, 1
9999 mem: location 1135 is 1
9999 mem: storing 0 in location 1137
 110 run: j:number <- copy 0
9999 mem: storing 0 in location 1138
 110 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is 0
9999 mem: storing 0 in location 1132
 110 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 110 run: src:character <- index *buf, i
9999 mem: location 1136 is 1313
9999 mem: location 1137 is 0
9998 run: address to copy is 1314
9998 run: its type is character
9999 mem: location 1314 is 52
9999 mem: storing 52 in location 1139
 110 run: dest:address:character <- index-address *result, j
9999 mem: location 1127 is 1344
9999 mem: location 1138 is 0
9999 mem: storing 1345 in location 1140
 110 run: *dest <- copy src
9999 mem: location 1139 is 52
9999 mem: location 1140 is 1345
9999 mem: storing 52 in location 1345
 110 run: i <- subtract i, 1
9999 mem: location 1137 is 0
9999 mem: storing -1 in location 1137
 110 run: j <- add j, 1
9999 mem: location 1138 is 0
9999 mem: storing 1 in location 1138
 110 run: jump 
9998 run: jumping to instruction 34
 110 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is -1
9999 mem: storing 1 in location 1132
 110 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 42
 110 run: reply result:address:array:character
9999 mem: location 1127 is 1344
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1344
9999 mem: storing 1344 in location 1119
 109 run: len:number <- length *text
9999 mem: location 1119 is 1344
9999 mem: storing 1 in location 1120
 109 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 109 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 1
9999 mem: storing 0 in location 1122
 109 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 109 run: c:character <- index *text, i
9999 mem: location 1119 is 1344
9999 mem: location 1121 is 0
9998 run: address to copy is 1345
9998 run: its type is character
9999 mem: location 1345 is 52
9999 mem: storing 52 in location 1123
 109 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 52
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 110 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 110 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 15
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 110 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 110 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 110 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 111 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 111 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 15
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 15
9999 mem: storing 15 in location 1003
 111 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 15
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 111 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 111 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 15
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 111 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 110 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 15
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 110 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 15
9999 mem: storing 1038 in location 1183
 110 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1038
9999 mem: storing 52 in location 1038
 110 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 15
9999 mem: location 1178 is 1020
9999 mem: storing 16 in location 1020
 110 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 109 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 109 run: jump 
9998 run: jumping to instruction 7
 109 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 1
9999 mem: storing 1 in location 1122
 109 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 109 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1302
 108 run: next:address:list:_elem <- rest_3 in
9999 mem: location 1301 is 1007
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 109 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1188
 109 run: result <- get *in, next:offset
9999 mem: location 1188 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1188 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9998 run: its type is <address : <list : <number : <>>>>
9999 mem: location 1008 is 1007
9999 mem: storing 1007 in location 1189
 109 run: reply result:address:list:_elem
9999 mem: location 1189 is 1007
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1304
 108 run: nextn:number <- copy next
9999 mem: location 1304 is 1007
9999 mem: storing 1007 in location 1305
 108 run: jump-if next, 1:offset
9999 mem: location 1304 is 1007
9998 run: jumping to instruction 15
 108 run: space:character <- copy 32/space
9999 mem: storing 32 in location 1306
 108 run: buf <- append_2 buf, space:character
9999 mem: location 1302 is 1020
9999 mem: location 1306 is 32
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 109 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 109 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 16
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 109 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 109 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 109 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 110 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 16
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 16
9999 mem: storing 16 in location 1003
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 16
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 110 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 110 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 16
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 110 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 109 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 16
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 109 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 16
9999 mem: storing 1039 in location 1183
 109 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1039
9999 mem: storing 32 in location 1039
 109 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 16
9999 mem: location 1178 is 1020
9999 mem: storing 17 in location 1020
 109 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1302
 108 run: s:address:array:character <- new [-> ]
9999 mem: storing 1346 in location 1307
9990 schedule: to-buffer_2/to-buffer_2/to-buffer_2/to-buffer_2/to-text-line_3/run1001/scenario-stash-handles-list-with-cycle
 108 run: n:number <- length *s
9999 mem: location 1307 is 1346
9999 mem: storing 3 in location 1308
 108 run: buf <- append_7 buf, s
9999 mem: location 1302 is 1020
9999 mem: location 1307 is 1346
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 109 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 109 run: x:_elem <- next-ingredient 
9999 mem: storing 1346 in location 1118
 109 run: text:address:array:character <- to-text x
9999 mem: location 1118 is 1346
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
 110 run: x:address:array:character <- next-ingredient 
9999 mem: storing 1346 in location 1196
 110 run: reply x
9999 mem: location 1196 is 1346
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1346
9999 mem: storing 1346 in location 1119
 109 run: len:number <- length *text
9999 mem: location 1119 is 1346
9999 mem: storing 3 in location 1120
 109 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 109 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 109 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 109 run: c:character <- index *text, i
9999 mem: location 1119 is 1346
9999 mem: location 1121 is 0
9998 run: address to copy is 1347
9998 run: its type is character
9999 mem: location 1347 is 45
9999 mem: storing 45 in location 1123
 109 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 45
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 110 run: c:character <- next-ingredient 
9999 mem: storing 45 in location 1177
 110 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 17
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 110 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 45
9999 mem: storing 0 in location 1179
 110 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 110 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 111 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 111 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 17
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 17
9999 mem: storing 17 in location 1003
 111 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 17
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 111 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 111 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 17
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 111 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 110 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 17
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 110 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 17
9999 mem: storing 1040 in location 1183
 110 run: *dest <- copy c
9999 mem: location 1177 is 45
9999 mem: location 1183 is 1040
9999 mem: storing 45 in location 1040
 110 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 17
9999 mem: location 1178 is 1020
9999 mem: storing 18 in location 1020
 110 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 109 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 109 run: jump 
9998 run: jumping to instruction 7
 109 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 109 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 109 run: c:character <- index *text, i
9999 mem: location 1119 is 1346
9999 mem: location 1121 is 1
9998 run: address to copy is 1348
9998 run: its type is character
9999 mem: location 1348 is 62
9999 mem: storing 62 in location 1123
 109 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 62
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 110 run: c:character <- next-ingredient 
9999 mem: storing 62 in location 1177
 110 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 18
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 110 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 62
9999 mem: storing 0 in location 1179
 110 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 110 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 111 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 111 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 18
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 18
9999 mem: storing 18 in location 1003
 111 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 18
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 111 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 111 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 18
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 111 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 110 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 18
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 110 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 18
9999 mem: storing 1041 in location 1183
 110 run: *dest <- copy c
9999 mem: location 1177 is 62
9999 mem: location 1183 is 1041
9999 mem: storing 62 in location 1041
 110 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 18
9999 mem: location 1178 is 1020
9999 mem: storing 19 in location 1020
 110 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 109 run: i <- add i, 1
9999 mem: location 1121 is 1
9999 mem: storing 2 in location 1121
 109 run: jump 
9998 run: jumping to instruction 7
 109 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 2
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 109 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 109 run: c:character <- index *text, i
9999 mem: location 1119 is 1346
9999 mem: location 1121 is 2
9998 run: address to copy is 1349
9998 run: its type is character
9999 mem: location 1349 is 32
9999 mem: storing 32 in location 1123
 109 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 32
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 110 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 110 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 19
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 110 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 110 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 110 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 111 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 111 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 19
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 19
9999 mem: storing 19 in location 1003
 111 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 19
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 111 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 111 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 19
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 111 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 110 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 19
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 110 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 19
9999 mem: storing 1042 in location 1183
 110 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1042
9999 mem: storing 32 in location 1042
 110 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 19
9999 mem: location 1178 is 1020
9999 mem: storing 20 in location 1020
 110 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 109 run: i <- add i, 1
9999 mem: location 1121 is 2
9999 mem: storing 3 in location 1121
 109 run: jump 
9998 run: jumping to instruction 7
 109 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 3
9999 mem: location 1120 is 3
9999 mem: storing 1 in location 1122
 109 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 109 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1302
 108 run: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9999 mem: storing 3 in location 1309
9999 mem: storing 1 in location 1310
 108 run: jump-if optional-ingredient-found?, 
9999 mem: location 1310 is 1
9998 run: jumping to instruction 25
 108 run: jump-unless remaining, 
9999 mem: location 1309 is 3
9998 run: jump-unless fell through
 108 run: remaining <- subtract remaining, 1
9999 mem: location 1309 is 3
9999 mem: storing 2 in location 1309
 108 run: buf <- to-buffer_2 next, buf, remaining
9999 mem: location 1304 is 1007
9999 mem: location 1302 is 1020
9999 mem: location 1309 is 2
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1350
 109 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1352
 109 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1353
 109 run: jump-if in, 
9999 mem: location 1352 is 1007
9998 run: jumping to instruction 8
 109 run: val:_elem <- get *in, value:offset
9999 mem: location 1352 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1352 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 4
9999 mem: storing 4 in location 1354
 109 run: buf <- append_6 buf, val
9999 mem: location 1353 is 1020
9999 mem: location 1354 is 4
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 110 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 110 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1118
 110 run: text:address:array:character <- to-text_2 x
9999 mem: location 1118 is 4
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
 111 run: n:number <- next-ingredient 
9999 mem: storing 4 in location 1126
 111 run: jump-if n, 
9999 mem: location 1126 is 4
9998 run: jumping to instruction 6
 111 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1128
 111 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1129
 111 run: jump-unless negative?, 
9999 mem: location 1129 is 0
9998 run: jumping to instruction 13
 111 run: tmp:address:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 112 run: capacity:number <- next-ingredient 
9999 mem: storing 30 in location 1016
 112 run: result <- new buffer:type
9999 mem: new alloc: 1362
9999 mem: storing 1362 in location 1017
 112 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1017 is 1362
9999 mem: location 1362 is 0
9999 mem: location 1363 is 0
9999 mem: location 1017 is 1362
9998 run: address to copy is 1362
9999 mem: storing 1362 in location 1018
 112 run: *len:address:number <- copy 0
9999 mem: location 1018 is 1362
9999 mem: storing 0 in location 1362
 112 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1017 is 1362
9999 mem: location 1362 is 0
9999 mem: location 1363 is 0
9999 mem: location 1017 is 1362
9998 run: address to copy is 1363
9999 mem: storing 1363 in location 1019
 112 run: *s <- new character:type, capacity
9999 mem: location 1016 is 30
9999 mem: array size is 30
9999 mem: new alloc: 1364
9999 mem: location 1019 is 1363
9999 mem: storing 1364 in location 1363
 112 run: reply result
9999 mem: location 1017 is 1362
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 1362
9999 mem: storing 1362 in location 1130
 111 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1131
 111 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1132
 111 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 111 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1126
9999 mem: storing 4 in location 1133
 111 run: c:character <- add digit-base, digit
9999 mem: location 1131 is 48
9999 mem: location 1133 is 4
9999 mem: storing 52 in location 1134
 111 run: tmp:address:buffer <- append_2 tmp, c
9999 mem: location 1130 is 1362
9999 mem: location 1134 is 52
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 112 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1362 in location 1176
 112 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 112 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1362
9999 mem: location 1362 is 0
9999 mem: location 1363 is 1364
9999 mem: location 1176 is 1362
9998 run: address to copy is 1362
9999 mem: storing 1362 in location 1178
 112 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 112 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 112 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1362
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1362 in location 1002
 113 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1362
9999 mem: location 1362 is 0
9999 mem: location 1363 is 1364
9999 mem: location 1002 is 1362
9998 run: address to copy is 1362
9998 run: its type is number
9999 mem: location 1362 is 0
9999 mem: storing 0 in location 1003
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1362
9999 mem: location 1362 is 0
9999 mem: location 1363 is 1364
9999 mem: location 1002 is 1362
9998 run: address to copy is 1363
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1363 is 1364
9999 mem: storing 1364 in location 1004
 113 run: capacity:number <- length *s
9999 mem: location 1004 is 1364
9999 mem: storing 30 in location 1005
 113 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 0
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 113 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 112 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 112 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1362
9999 mem: location 1362 is 0
9999 mem: location 1363 is 1364
9999 mem: location 1176 is 1362
9998 run: address to copy is 1363
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1363 is 1364
9999 mem: storing 1364 in location 1182
 112 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1364
9999 mem: location 1178 is 1362
9999 mem: location 1362 is 0
9999 mem: storing 1365 in location 1183
 112 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1365
9999 mem: storing 52 in location 1365
 112 run: *len <- add *len, 1
9999 mem: location 1178 is 1362
9999 mem: location 1362 is 0
9999 mem: location 1178 is 1362
9999 mem: storing 1 in location 1362
 112 run: reply in:address:buffer
9999 mem: location 1176 is 1362
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 1362
9999 mem: storing 1362 in location 1130
 111 run: jump 
9998 run: jumping to instruction 17
 111 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 0
9999 mem: storing 1 in location 1132
 111 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 23
 111 run: jump-unless negate-result:boolean, 
9999 mem: location 1128 is 0
9998 run: jumping to instruction 27
 111 run: len:number <- get *tmp, length:offset
9999 mem: location 1130 is 1362
9999 mem: location 1362 is 1
9999 mem: location 1363 is 1364
9999 mem: location 1130 is 1362
9998 run: address to copy is 1362
9998 run: its type is number
9999 mem: location 1362 is 1
9999 mem: storing 1 in location 1135
 111 run: buf:address:array:character <- get *tmp, data:offset
9999 mem: location 1130 is 1362
9999 mem: location 1362 is 1
9999 mem: location 1363 is 1364
9999 mem: location 1130 is 1362
9998 run: address to copy is 1363
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1363 is 1364
9999 mem: storing 1364 in location 1136
 111 run: result <- new character:type, len
9999 mem: location 1135 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1395
9999 mem: storing 1395 in location 1127
 111 run: i:number <- subtract len, 1
9999 mem: location 1135 is 1
9999 mem: storing 0 in location 1137
 111 run: j:number <- copy 0
9999 mem: storing 0 in location 1138
 111 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is 0
9999 mem: storing 0 in location 1132
 111 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 111 run: src:character <- index *buf, i
9999 mem: location 1136 is 1364
9999 mem: location 1137 is 0
9998 run: address to copy is 1365
9998 run: its type is character
9999 mem: location 1365 is 52
9999 mem: storing 52 in location 1139
 111 run: dest:address:character <- index-address *result, j
9999 mem: location 1127 is 1395
9999 mem: location 1138 is 0
9999 mem: storing 1396 in location 1140
 111 run: *dest <- copy src
9999 mem: location 1139 is 52
9999 mem: location 1140 is 1396
9999 mem: storing 52 in location 1396
 111 run: i <- subtract i, 1
9999 mem: location 1137 is 0
9999 mem: storing -1 in location 1137
 111 run: j <- add j, 1
9999 mem: location 1138 is 0
9999 mem: storing 1 in location 1138
 111 run: jump 
9998 run: jumping to instruction 34
 111 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is -1
9999 mem: storing 1 in location 1132
 111 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 42
 111 run: reply result:address:array:character
9999 mem: location 1127 is 1395
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1395
9999 mem: storing 1395 in location 1119
 110 run: len:number <- length *text
9999 mem: location 1119 is 1395
9999 mem: storing 1 in location 1120
 110 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 110 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 1
9999 mem: storing 0 in location 1122
 110 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 110 run: c:character <- index *text, i
9999 mem: location 1119 is 1395
9999 mem: location 1121 is 0
9998 run: address to copy is 1396
9998 run: its type is character
9999 mem: location 1396 is 52
9999 mem: storing 52 in location 1123
 110 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 52
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 111 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 111 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 111 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 20
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 111 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 111 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 111 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 112 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 112 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 20
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 20
9999 mem: storing 20 in location 1003
 112 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 20
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 112 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 112 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 20
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 112 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 111 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 111 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 20
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 111 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 20
9999 mem: storing 1043 in location 1183
 111 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1043
9999 mem: storing 52 in location 1043
 111 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 20
9999 mem: location 1178 is 1020
9999 mem: storing 21 in location 1020
 111 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 110 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 110 run: jump 
9998 run: jumping to instruction 7
 110 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 1
9999 mem: storing 1 in location 1122
 110 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 110 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1353
 109 run: next:address:list:_elem <- rest_3 in
9999 mem: location 1352 is 1007
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 110 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1188
 110 run: result <- get *in, next:offset
9999 mem: location 1188 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1188 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9998 run: its type is <address : <list : <number : <>>>>
9999 mem: location 1008 is 1007
9999 mem: storing 1007 in location 1189
 110 run: reply result:address:list:_elem
9999 mem: location 1189 is 1007
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1355
 109 run: nextn:number <- copy next
9999 mem: location 1355 is 1007
9999 mem: storing 1007 in location 1356
 109 run: jump-if next, 1:offset
9999 mem: location 1355 is 1007
9998 run: jumping to instruction 15
 109 run: space:character <- copy 32/space
9999 mem: storing 32 in location 1357
 109 run: buf <- append_2 buf, space:character
9999 mem: location 1353 is 1020
9999 mem: location 1357 is 32
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 110 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 110 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 21
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 110 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 110 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 110 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 111 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 111 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 21
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 21
9999 mem: storing 21 in location 1003
 111 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 21
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 111 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 111 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 21
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 111 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 110 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 21
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 110 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 21
9999 mem: storing 1044 in location 1183
 110 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1044
9999 mem: storing 32 in location 1044
 110 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 21
9999 mem: location 1178 is 1020
9999 mem: storing 22 in location 1020
 110 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1353
 109 run: s:address:array:character <- new [-> ]
9999 mem: storing 1397 in location 1358
 109 run: n:number <- length *s
9999 mem: location 1358 is 1397
9999 mem: storing 3 in location 1359
 109 run: buf <- append_7 buf, s
9999 mem: location 1353 is 1020
9999 mem: location 1358 is 1397
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 110 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 110 run: x:_elem <- next-ingredient 
9999 mem: storing 1397 in location 1118
 110 run: text:address:array:character <- to-text x
9999 mem: location 1118 is 1397
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
 111 run: x:address:array:character <- next-ingredient 
9999 mem: storing 1397 in location 1196
 111 run: reply x
9999 mem: location 1196 is 1397
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1397
9999 mem: storing 1397 in location 1119
 110 run: len:number <- length *text
9999 mem: location 1119 is 1397
9999 mem: storing 3 in location 1120
 110 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 110 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 110 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 110 run: c:character <- index *text, i
9999 mem: location 1119 is 1397
9999 mem: location 1121 is 0
9998 run: address to copy is 1398
9998 run: its type is character
9999 mem: location 1398 is 45
9999 mem: storing 45 in location 1123
 110 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 45
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 111 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 111 run: c:character <- next-ingredient 
9999 mem: storing 45 in location 1177
 111 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 22
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 111 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 45
9999 mem: storing 0 in location 1179
 111 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 111 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 112 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 112 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 22
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 22
9999 mem: storing 22 in location 1003
 112 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 22
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 112 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 112 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 22
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 112 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 111 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 111 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 22
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 111 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 22
9999 mem: storing 1045 in location 1183
 111 run: *dest <- copy c
9999 mem: location 1177 is 45
9999 mem: location 1183 is 1045
9999 mem: storing 45 in location 1045
 111 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 22
9999 mem: location 1178 is 1020
9999 mem: storing 23 in location 1020
 111 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 110 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 110 run: jump 
9998 run: jumping to instruction 7
 110 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 110 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 110 run: c:character <- index *text, i
9999 mem: location 1119 is 1397
9999 mem: location 1121 is 1
9998 run: address to copy is 1399
9998 run: its type is character
9999 mem: location 1399 is 62
9999 mem: storing 62 in location 1123
 110 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 62
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 111 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 111 run: c:character <- next-ingredient 
9999 mem: storing 62 in location 1177
 111 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 23
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 111 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 62
9999 mem: storing 0 in location 1179
 111 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 111 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 112 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 112 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 23
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 23
9999 mem: storing 23 in location 1003
 112 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 23
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 112 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 112 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 23
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 112 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 111 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 111 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 23
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 111 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 23
9999 mem: storing 1046 in location 1183
 111 run: *dest <- copy c
9999 mem: location 1177 is 62
9999 mem: location 1183 is 1046
9999 mem: storing 62 in location 1046
 111 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 23
9999 mem: location 1178 is 1020
9999 mem: storing 24 in location 1020
 111 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 110 run: i <- add i, 1
9999 mem: location 1121 is 1
9999 mem: storing 2 in location 1121
 110 run: jump 
9998 run: jumping to instruction 7
 110 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 2
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 110 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 110 run: c:character <- index *text, i
9999 mem: location 1119 is 1397
9999 mem: location 1121 is 2
9998 run: address to copy is 1400
9998 run: its type is character
9999 mem: location 1400 is 32
9999 mem: storing 32 in location 1123
 110 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 32
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 111 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 111 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 111 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 24
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 111 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 111 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 111 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 112 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 112 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 24
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 24
9999 mem: storing 24 in location 1003
 112 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 24
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 112 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 112 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 24
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 112 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 111 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 111 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 24
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 111 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 24
9999 mem: storing 1047 in location 1183
 111 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1047
9999 mem: storing 32 in location 1047
 111 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 24
9999 mem: location 1178 is 1020
9999 mem: storing 25 in location 1020
 111 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 110 run: i <- add i, 1
9999 mem: location 1121 is 2
9999 mem: storing 3 in location 1121
 110 run: jump 
9998 run: jumping to instruction 7
 110 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 3
9999 mem: location 1120 is 3
9999 mem: storing 1 in location 1122
 110 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 110 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1353
 109 run: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9999 mem: storing 2 in location 1360
9999 mem: storing 1 in location 1361
 109 run: jump-if optional-ingredient-found?, 
9999 mem: location 1361 is 1
9998 run: jumping to instruction 25
 109 run: jump-unless remaining, 
9999 mem: location 1360 is 2
9998 run: jump-unless fell through
 109 run: remaining <- subtract remaining, 1
9999 mem: location 1360 is 2
9999 mem: storing 1 in location 1360
 109 run: buf <- to-buffer_2 next, buf, remaining
9999 mem: location 1355 is 1007
9999 mem: location 1353 is 1020
9999 mem: location 1360 is 1
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1401
 110 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1403
 110 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1404
 110 run: jump-if in, 
9999 mem: location 1403 is 1007
9998 run: jumping to instruction 8
 110 run: val:_elem <- get *in, value:offset
9999 mem: location 1403 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1403 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 4
9999 mem: storing 4 in location 1405
 110 run: buf <- append_6 buf, val
9999 mem: location 1404 is 1020
9999 mem: location 1405 is 4
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 111 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 111 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1118
 111 run: text:address:array:character <- to-text_2 x
9999 mem: location 1118 is 4
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
 112 run: n:number <- next-ingredient 
9999 mem: storing 4 in location 1126
 112 run: jump-if n, 
9999 mem: location 1126 is 4
9998 run: jumping to instruction 6
 112 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1128
 112 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1129
 112 run: jump-unless negative?, 
9999 mem: location 1129 is 0
9998 run: jumping to instruction 13
 112 run: tmp:address:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 113 run: capacity:number <- next-ingredient 
9999 mem: storing 30 in location 1016
 113 run: result <- new buffer:type
9999 mem: new alloc: 1413
9999 mem: storing 1413 in location 1017
 113 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1017 is 1413
9999 mem: location 1413 is 0
9999 mem: location 1414 is 0
9999 mem: location 1017 is 1413
9998 run: address to copy is 1413
9999 mem: storing 1413 in location 1018
 113 run: *len:address:number <- copy 0
9999 mem: location 1018 is 1413
9999 mem: storing 0 in location 1413
 113 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1017 is 1413
9999 mem: location 1413 is 0
9999 mem: location 1414 is 0
9999 mem: location 1017 is 1413
9998 run: address to copy is 1414
9999 mem: storing 1414 in location 1019
 113 run: *s <- new character:type, capacity
9999 mem: location 1016 is 30
9999 mem: array size is 30
9999 mem: new alloc: 1415
9999 mem: location 1019 is 1414
9999 mem: storing 1415 in location 1414
 113 run: reply result
9999 mem: location 1017 is 1413
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 1413
9999 mem: storing 1413 in location 1130
 112 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1131
 112 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1132
 112 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 112 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1126
9999 mem: storing 4 in location 1133
 112 run: c:character <- add digit-base, digit
9999 mem: location 1131 is 48
9999 mem: location 1133 is 4
9999 mem: storing 52 in location 1134
 112 run: tmp:address:buffer <- append_2 tmp, c
9999 mem: location 1130 is 1413
9999 mem: location 1134 is 52
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1413 in location 1176
 113 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 113 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1413
9999 mem: location 1413 is 0
9999 mem: location 1414 is 1415
9999 mem: location 1176 is 1413
9998 run: address to copy is 1413
9999 mem: storing 1413 in location 1178
 113 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 113 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 113 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1413
9999 trace: incrementing callstack depth to 13
 114 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 114 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1413 in location 1002
 114 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1413
9999 mem: location 1413 is 0
9999 mem: location 1414 is 1415
9999 mem: location 1002 is 1413
9998 run: address to copy is 1413
9998 run: its type is number
9999 mem: location 1413 is 0
9999 mem: storing 0 in location 1003
 114 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1413
9999 mem: location 1413 is 0
9999 mem: location 1414 is 1415
9999 mem: location 1002 is 1413
9998 run: address to copy is 1414
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1414 is 1415
9999 mem: storing 1415 in location 1004
 114 run: capacity:number <- length *s
9999 mem: location 1004 is 1415
9999 mem: storing 30 in location 1005
 114 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 0
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 114 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 13
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 113 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1413
9999 mem: location 1413 is 0
9999 mem: location 1414 is 1415
9999 mem: location 1176 is 1413
9998 run: address to copy is 1414
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1414 is 1415
9999 mem: storing 1415 in location 1182
 113 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1415
9999 mem: location 1178 is 1413
9999 mem: location 1413 is 0
9999 mem: storing 1416 in location 1183
 113 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1416
9999 mem: storing 52 in location 1416
 113 run: *len <- add *len, 1
9999 mem: location 1178 is 1413
9999 mem: location 1413 is 0
9999 mem: location 1178 is 1413
9999 mem: storing 1 in location 1413
 113 run: reply in:address:buffer
9999 mem: location 1176 is 1413
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 1413
9999 mem: storing 1413 in location 1130
 112 run: jump 
9998 run: jumping to instruction 17
 112 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 0
9999 mem: storing 1 in location 1132
 112 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 23
 112 run: jump-unless negate-result:boolean, 
9999 mem: location 1128 is 0
9998 run: jumping to instruction 27
 112 run: len:number <- get *tmp, length:offset
9999 mem: location 1130 is 1413
9999 mem: location 1413 is 1
9999 mem: location 1414 is 1415
9999 mem: location 1130 is 1413
9998 run: address to copy is 1413
9998 run: its type is number
9999 mem: location 1413 is 1
9999 mem: storing 1 in location 1135
 112 run: buf:address:array:character <- get *tmp, data:offset
9999 mem: location 1130 is 1413
9999 mem: location 1413 is 1
9999 mem: location 1414 is 1415
9999 mem: location 1130 is 1413
9998 run: address to copy is 1414
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1414 is 1415
9999 mem: storing 1415 in location 1136
 112 run: result <- new character:type, len
9999 mem: location 1135 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1446
9999 mem: storing 1446 in location 1127
 112 run: i:number <- subtract len, 1
9999 mem: location 1135 is 1
9999 mem: storing 0 in location 1137
 112 run: j:number <- copy 0
9999 mem: storing 0 in location 1138
 112 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is 0
9999 mem: storing 0 in location 1132
 112 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 112 run: src:character <- index *buf, i
9999 mem: location 1136 is 1415
9999 mem: location 1137 is 0
9998 run: address to copy is 1416
9998 run: its type is character
9999 mem: location 1416 is 52
9999 mem: storing 52 in location 1139
 112 run: dest:address:character <- index-address *result, j
9999 mem: location 1127 is 1446
9999 mem: location 1138 is 0
9999 mem: storing 1447 in location 1140
 112 run: *dest <- copy src
9999 mem: location 1139 is 52
9999 mem: location 1140 is 1447
9999 mem: storing 52 in location 1447
 112 run: i <- subtract i, 1
9999 mem: location 1137 is 0
9999 mem: storing -1 in location 1137
 112 run: j <- add j, 1
9999 mem: location 1138 is 0
9999 mem: storing 1 in location 1138
 112 run: jump 
9998 run: jumping to instruction 34
 112 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is -1
9999 mem: storing 1 in location 1132
 112 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 42
 112 run: reply result:address:array:character
9999 mem: location 1127 is 1446
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 1446
9999 mem: storing 1446 in location 1119
 111 run: len:number <- length *text
9999 mem: location 1119 is 1446
9999 mem: storing 1 in location 1120
 111 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 111 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 1
9999 mem: storing 0 in location 1122
 111 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 111 run: c:character <- index *text, i
9999 mem: location 1119 is 1446
9999 mem: location 1121 is 0
9998 run: address to copy is 1447
9998 run: its type is character
9999 mem: location 1447 is 52
9999 mem: storing 52 in location 1123
 111 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 52
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 112 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 112 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 112 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 25
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 112 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 112 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 112 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 113 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 25
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 25
9999 mem: storing 25 in location 1003
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 25
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 113 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 113 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 25
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 113 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 112 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 112 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 25
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
9990 schedule: append_2/append_6/to-buffer_2/to-buffer_2/to-buffer_2/to-buffer_2/to-buffer_2/to-buffer_2/to-text-line_3/run1001/scenario-stash-handles-list-with-cycle
 112 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 25
9999 mem: storing 1048 in location 1183
 112 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1048
9999 mem: storing 52 in location 1048
 112 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 25
9999 mem: location 1178 is 1020
9999 mem: storing 26 in location 1020
 112 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 111 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 111 run: jump 
9998 run: jumping to instruction 7
 111 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 1
9999 mem: storing 1 in location 1122
 111 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 111 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1404
 110 run: next:address:list:_elem <- rest_3 in
9999 mem: location 1403 is 1007
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 111 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1188
 111 run: result <- get *in, next:offset
9999 mem: location 1188 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1188 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9998 run: its type is <address : <list : <number : <>>>>
9999 mem: location 1008 is 1007
9999 mem: storing 1007 in location 1189
 111 run: reply result:address:list:_elem
9999 mem: location 1189 is 1007
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1406
 110 run: nextn:number <- copy next
9999 mem: location 1406 is 1007
9999 mem: storing 1007 in location 1407
 110 run: jump-if next, 1:offset
9999 mem: location 1406 is 1007
9998 run: jumping to instruction 15
 110 run: space:character <- copy 32/space
9999 mem: storing 32 in location 1408
 110 run: buf <- append_2 buf, space:character
9999 mem: location 1404 is 1020
9999 mem: location 1408 is 32
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 111 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 111 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 111 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 26
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 111 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 111 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 111 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 112 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 112 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 26
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 26
9999 mem: storing 26 in location 1003
 112 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 26
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 112 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 112 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 26
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 112 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 111 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 111 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 26
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 111 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 26
9999 mem: storing 1049 in location 1183
 111 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1049
9999 mem: storing 32 in location 1049
 111 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 26
9999 mem: location 1178 is 1020
9999 mem: storing 27 in location 1020
 111 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1404
 110 run: s:address:array:character <- new [-> ]
9999 mem: storing 1448 in location 1409
 110 run: n:number <- length *s
9999 mem: location 1409 is 1448
9999 mem: storing 3 in location 1410
 110 run: buf <- append_7 buf, s
9999 mem: location 1404 is 1020
9999 mem: location 1409 is 1448
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 111 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 111 run: x:_elem <- next-ingredient 
9999 mem: storing 1448 in location 1118
 111 run: text:address:array:character <- to-text x
9999 mem: location 1118 is 1448
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
 112 run: x:address:array:character <- next-ingredient 
9999 mem: storing 1448 in location 1196
 112 run: reply x
9999 mem: location 1196 is 1448
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 1448
9999 mem: storing 1448 in location 1119
 111 run: len:number <- length *text
9999 mem: location 1119 is 1448
9999 mem: storing 3 in location 1120
 111 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 111 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 111 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 111 run: c:character <- index *text, i
9999 mem: location 1119 is 1448
9999 mem: location 1121 is 0
9998 run: address to copy is 1449
9998 run: its type is character
9999 mem: location 1449 is 45
9999 mem: storing 45 in location 1123
 111 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 45
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 112 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 112 run: c:character <- next-ingredient 
9999 mem: storing 45 in location 1177
 112 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 27
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 112 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 45
9999 mem: storing 0 in location 1179
 112 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 112 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 113 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 27
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 27
9999 mem: storing 27 in location 1003
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 27
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 113 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 113 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 27
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 113 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 112 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 112 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 27
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 112 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 27
9999 mem: storing 1050 in location 1183
 112 run: *dest <- copy c
9999 mem: location 1177 is 45
9999 mem: location 1183 is 1050
9999 mem: storing 45 in location 1050
 112 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 27
9999 mem: location 1178 is 1020
9999 mem: storing 28 in location 1020
 112 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 111 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 111 run: jump 
9998 run: jumping to instruction 7
 111 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 111 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 111 run: c:character <- index *text, i
9999 mem: location 1119 is 1448
9999 mem: location 1121 is 1
9998 run: address to copy is 1450
9998 run: its type is character
9999 mem: location 1450 is 62
9999 mem: storing 62 in location 1123
 111 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 62
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 112 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 112 run: c:character <- next-ingredient 
9999 mem: storing 62 in location 1177
 112 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 28
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 112 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 62
9999 mem: storing 0 in location 1179
 112 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 112 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 113 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 28
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 28
9999 mem: storing 28 in location 1003
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 28
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 113 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 113 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 28
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 113 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 112 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 112 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 28
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 112 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 28
9999 mem: storing 1051 in location 1183
 112 run: *dest <- copy c
9999 mem: location 1177 is 62
9999 mem: location 1183 is 1051
9999 mem: storing 62 in location 1051
 112 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 28
9999 mem: location 1178 is 1020
9999 mem: storing 29 in location 1020
 112 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 111 run: i <- add i, 1
9999 mem: location 1121 is 1
9999 mem: storing 2 in location 1121
 111 run: jump 
9998 run: jumping to instruction 7
 111 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 2
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 111 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 111 run: c:character <- index *text, i
9999 mem: location 1119 is 1448
9999 mem: location 1121 is 2
9998 run: address to copy is 1451
9998 run: its type is character
9999 mem: location 1451 is 32
9999 mem: storing 32 in location 1123
 111 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 32
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 112 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 112 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 112 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 29
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 112 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 112 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 112 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 113 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 29
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 29
9999 mem: storing 29 in location 1003
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 29
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 113 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 113 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 29
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 113 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 112 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 112 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 29
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 112 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 29
9999 mem: storing 1052 in location 1183
 112 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1052
9999 mem: storing 32 in location 1052
 112 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 29
9999 mem: location 1178 is 1020
9999 mem: storing 30 in location 1020
 112 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 111 run: i <- add i, 1
9999 mem: location 1121 is 2
9999 mem: storing 3 in location 1121
 111 run: jump 
9998 run: jumping to instruction 7
 111 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 3
9999 mem: location 1120 is 3
9999 mem: storing 1 in location 1122
 111 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 111 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1404
 110 run: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9999 mem: storing 1 in location 1411
9999 mem: storing 1 in location 1412
 110 run: jump-if optional-ingredient-found?, 
9999 mem: location 1412 is 1
9998 run: jumping to instruction 25
 110 run: jump-unless remaining, 
9999 mem: location 1411 is 1
9998 run: jump-unless fell through
 110 run: remaining <- subtract remaining, 1
9999 mem: location 1411 is 1
9999 mem: storing 0 in location 1411
 110 run: buf <- to-buffer_2 next, buf, remaining
9999 mem: location 1406 is 1007
9999 mem: location 1404 is 1020
9999 mem: location 1411 is 0
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1452
 111 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1454
 111 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1455
 111 run: jump-if in, 
9999 mem: location 1454 is 1007
9998 run: jumping to instruction 8
 111 run: val:_elem <- get *in, value:offset
9999 mem: location 1454 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1454 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 4
9999 mem: storing 4 in location 1456
 111 run: buf <- append_6 buf, val
9999 mem: location 1455 is 1020
9999 mem: location 1456 is 4
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 112 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 112 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1118
 112 run: text:address:array:character <- to-text_2 x
9999 mem: location 1118 is 4
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
 113 run: n:number <- next-ingredient 
9999 mem: storing 4 in location 1126
 113 run: jump-if n, 
9999 mem: location 1126 is 4
9998 run: jumping to instruction 6
 113 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1128
 113 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1129
 113 run: jump-unless negative?, 
9999 mem: location 1129 is 0
9998 run: jumping to instruction 13
 113 run: tmp:address:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 13
 114 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 114 run: capacity:number <- next-ingredient 
9999 mem: storing 30 in location 1016
 114 run: result <- new buffer:type
9999 mem: new alloc: 1464
9999 mem: storing 1464 in location 1017
 114 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1017 is 1464
9999 mem: location 1464 is 0
9999 mem: location 1465 is 0
9999 mem: location 1017 is 1464
9998 run: address to copy is 1464
9999 mem: storing 1464 in location 1018
 114 run: *len:address:number <- copy 0
9999 mem: location 1018 is 1464
9999 mem: storing 0 in location 1464
 114 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1017 is 1464
9999 mem: location 1464 is 0
9999 mem: location 1465 is 0
9999 mem: location 1017 is 1464
9998 run: address to copy is 1465
9999 mem: storing 1465 in location 1019
 114 run: *s <- new character:type, capacity
9999 mem: location 1016 is 30
9999 mem: array size is 30
9999 mem: new alloc: 1466
9999 mem: location 1019 is 1465
9999 mem: storing 1466 in location 1465
 114 run: reply result
9999 mem: location 1017 is 1464
9999 trace: reply: decrementing callstack depth from 13
9998 run: result 0 is 1464
9999 mem: storing 1464 in location 1130
 113 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1131
 113 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1132
 113 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 113 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1126
9999 mem: storing 4 in location 1133
 113 run: c:character <- add digit-base, digit
9999 mem: location 1131 is 48
9999 mem: location 1133 is 4
9999 mem: storing 52 in location 1134
 113 run: tmp:address:buffer <- append_2 tmp, c
9999 mem: location 1130 is 1464
9999 mem: location 1134 is 52
9999 trace: incrementing callstack depth to 13
 114 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 114 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1464 in location 1176
 114 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 114 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1464
9999 mem: location 1464 is 0
9999 mem: location 1465 is 1466
9999 mem: location 1176 is 1464
9998 run: address to copy is 1464
9999 mem: storing 1464 in location 1178
 114 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 114 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 114 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1464
9999 trace: incrementing callstack depth to 14
 115 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 115 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1464 in location 1002
 115 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1464
9999 mem: location 1464 is 0
9999 mem: location 1465 is 1466
9999 mem: location 1002 is 1464
9998 run: address to copy is 1464
9998 run: its type is number
9999 mem: location 1464 is 0
9999 mem: storing 0 in location 1003
 115 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1464
9999 mem: location 1464 is 0
9999 mem: location 1465 is 1466
9999 mem: location 1002 is 1464
9998 run: address to copy is 1465
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1465 is 1466
9999 mem: storing 1466 in location 1004
 115 run: capacity:number <- length *s
9999 mem: location 1004 is 1466
9999 mem: storing 30 in location 1005
 115 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 0
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 115 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 14
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 114 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 114 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1464
9999 mem: location 1464 is 0
9999 mem: location 1465 is 1466
9999 mem: location 1176 is 1464
9998 run: address to copy is 1465
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1465 is 1466
9999 mem: storing 1466 in location 1182
 114 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1466
9999 mem: location 1178 is 1464
9999 mem: location 1464 is 0
9999 mem: storing 1467 in location 1183
 114 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1467
9999 mem: storing 52 in location 1467
 114 run: *len <- add *len, 1
9999 mem: location 1178 is 1464
9999 mem: location 1464 is 0
9999 mem: location 1178 is 1464
9999 mem: storing 1 in location 1464
 114 run: reply in:address:buffer
9999 mem: location 1176 is 1464
9999 trace: reply: decrementing callstack depth from 13
9998 run: result 0 is 1464
9999 mem: storing 1464 in location 1130
 113 run: jump 
9998 run: jumping to instruction 17
 113 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 0
9999 mem: storing 1 in location 1132
 113 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 23
 113 run: jump-unless negate-result:boolean, 
9999 mem: location 1128 is 0
9998 run: jumping to instruction 27
 113 run: len:number <- get *tmp, length:offset
9999 mem: location 1130 is 1464
9999 mem: location 1464 is 1
9999 mem: location 1465 is 1466
9999 mem: location 1130 is 1464
9998 run: address to copy is 1464
9998 run: its type is number
9999 mem: location 1464 is 1
9999 mem: storing 1 in location 1135
 113 run: buf:address:array:character <- get *tmp, data:offset
9999 mem: location 1130 is 1464
9999 mem: location 1464 is 1
9999 mem: location 1465 is 1466
9999 mem: location 1130 is 1464
9998 run: address to copy is 1465
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1465 is 1466
9999 mem: storing 1466 in location 1136
 113 run: result <- new character:type, len
9999 mem: location 1135 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1497
9999 mem: storing 1497 in location 1127
 113 run: i:number <- subtract len, 1
9999 mem: location 1135 is 1
9999 mem: storing 0 in location 1137
 113 run: j:number <- copy 0
9999 mem: storing 0 in location 1138
 113 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is 0
9999 mem: storing 0 in location 1132
 113 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 113 run: src:character <- index *buf, i
9999 mem: location 1136 is 1466
9999 mem: location 1137 is 0
9998 run: address to copy is 1467
9998 run: its type is character
9999 mem: location 1467 is 52
9999 mem: storing 52 in location 1139
 113 run: dest:address:character <- index-address *result, j
9999 mem: location 1127 is 1497
9999 mem: location 1138 is 0
9999 mem: storing 1498 in location 1140
 113 run: *dest <- copy src
9999 mem: location 1139 is 52
9999 mem: location 1140 is 1498
9999 mem: storing 52 in location 1498
 113 run: i <- subtract i, 1
9999 mem: location 1137 is 0
9999 mem: storing -1 in location 1137
 113 run: j <- add j, 1
9999 mem: location 1138 is 0
9999 mem: storing 1 in location 1138
 113 run: jump 
9998 run: jumping to instruction 34
 113 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is -1
9999 mem: storing 1 in location 1132
 113 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 42
 113 run: reply result:address:array:character
9999 mem: location 1127 is 1497
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 1497
9999 mem: storing 1497 in location 1119
 112 run: len:number <- length *text
9999 mem: location 1119 is 1497
9999 mem: storing 1 in location 1120
 112 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 112 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 1
9999 mem: storing 0 in location 1122
 112 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 112 run: c:character <- index *text, i
9999 mem: location 1119 is 1497
9999 mem: location 1121 is 0
9998 run: address to copy is 1498
9998 run: its type is character
9999 mem: location 1498 is 52
9999 mem: storing 52 in location 1123
 112 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 52
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 113 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1177
 113 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 30
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 113 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 52
9999 mem: storing 0 in location 1179
 113 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 113 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 13
 114 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 114 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 114 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 30
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 30
9999 mem: storing 30 in location 1003
 114 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 30
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 114 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 114 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 30
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 114 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 13
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 113 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 30
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 113 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 30
9999 mem: storing 1053 in location 1183
 113 run: *dest <- copy c
9999 mem: location 1177 is 52
9999 mem: location 1183 is 1053
9999 mem: storing 52 in location 1053
 113 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 30
9999 mem: location 1178 is 1020
9999 mem: storing 31 in location 1020
 113 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 112 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 112 run: jump 
9998 run: jumping to instruction 7
 112 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 1
9999 mem: storing 1 in location 1122
 112 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 112 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1455
 111 run: next:address:list:_elem <- rest_3 in
9999 mem: location 1454 is 1007
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 112 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1188
 112 run: result <- get *in, next:offset
9999 mem: location 1188 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 1007
9999 mem: location 1188 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9998 run: its type is <address : <list : <number : <>>>>
9999 mem: location 1008 is 1007
9999 mem: storing 1007 in location 1189
 112 run: reply result:address:list:_elem
9999 mem: location 1189 is 1007
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1457
 111 run: nextn:number <- copy next
9999 mem: location 1457 is 1007
9999 mem: storing 1007 in location 1458
 111 run: jump-if next, 1:offset
9999 mem: location 1457 is 1007
9998 run: jumping to instruction 15
 111 run: space:character <- copy 32/space
9999 mem: storing 32 in location 1459
 111 run: buf <- append_2 buf, space:character
9999 mem: location 1455 is 1020
9999 mem: location 1459 is 32
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 112 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 112 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 112 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 31
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 112 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 112 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 112 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 113 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 31
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 31
9999 mem: storing 31 in location 1003
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 31
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 113 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 113 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 31
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 113 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 112 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 112 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 31
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 112 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 31
9999 mem: storing 1054 in location 1183
 112 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1054
9999 mem: storing 32 in location 1054
 112 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 31
9999 mem: location 1178 is 1020
9999 mem: storing 32 in location 1020
 112 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1455
 111 run: s:address:array:character <- new [-> ]
9999 mem: storing 1499 in location 1460
 111 run: n:number <- length *s
9999 mem: location 1460 is 1499
9999 mem: storing 3 in location 1461
 111 run: buf <- append_7 buf, s
9999 mem: location 1455 is 1020
9999 mem: location 1460 is 1499
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 112 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 112 run: x:_elem <- next-ingredient 
9999 mem: storing 1499 in location 1118
 112 run: text:address:array:character <- to-text x
9999 mem: location 1118 is 1499
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
 113 run: x:address:array:character <- next-ingredient 
9999 mem: storing 1499 in location 1196
 113 run: reply x
9999 mem: location 1196 is 1499
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 1499
9999 mem: storing 1499 in location 1119
 112 run: len:number <- length *text
9999 mem: location 1119 is 1499
9999 mem: storing 3 in location 1120
 112 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 112 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 112 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 112 run: c:character <- index *text, i
9999 mem: location 1119 is 1499
9999 mem: location 1121 is 0
9998 run: address to copy is 1500
9998 run: its type is character
9999 mem: location 1500 is 45
9999 mem: storing 45 in location 1123
 112 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 45
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 113 run: c:character <- next-ingredient 
9999 mem: storing 45 in location 1177
 113 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 32
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 113 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 45
9999 mem: storing 0 in location 1179
 113 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 113 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 13
 114 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 114 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 114 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 32
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 32
9999 mem: storing 32 in location 1003
 114 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 32
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 114 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 114 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 32
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 114 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 13
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 113 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 32
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 113 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 32
9999 mem: storing 1055 in location 1183
 113 run: *dest <- copy c
9999 mem: location 1177 is 45
9999 mem: location 1183 is 1055
9999 mem: storing 45 in location 1055
 113 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 32
9999 mem: location 1178 is 1020
9999 mem: storing 33 in location 1020
 113 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 112 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 112 run: jump 
9998 run: jumping to instruction 7
 112 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 112 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 112 run: c:character <- index *text, i
9999 mem: location 1119 is 1499
9999 mem: location 1121 is 1
9998 run: address to copy is 1501
9998 run: its type is character
9999 mem: location 1501 is 62
9999 mem: storing 62 in location 1123
 112 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 62
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 113 run: c:character <- next-ingredient 
9999 mem: storing 62 in location 1177
 113 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 33
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 113 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 62
9999 mem: storing 0 in location 1179
 113 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 113 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 13
 114 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 114 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 114 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 33
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 33
9999 mem: storing 33 in location 1003
 114 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 33
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 114 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 114 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 33
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 114 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 13
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 113 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 33
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 113 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 33
9999 mem: storing 1056 in location 1183
 113 run: *dest <- copy c
9999 mem: location 1177 is 62
9999 mem: location 1183 is 1056
9999 mem: storing 62 in location 1056
 113 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 33
9999 mem: location 1178 is 1020
9999 mem: storing 34 in location 1020
 113 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 112 run: i <- add i, 1
9999 mem: location 1121 is 1
9999 mem: storing 2 in location 1121
 112 run: jump 
9998 run: jumping to instruction 7
 112 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 2
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 112 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 112 run: c:character <- index *text, i
9999 mem: location 1119 is 1499
9999 mem: location 1121 is 2
9998 run: address to copy is 1502
9998 run: its type is character
9999 mem: location 1502 is 32
9999 mem: storing 32 in location 1123
 112 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 32
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 113 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 113 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 34
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 113 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 113 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 113 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 13
 114 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 114 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 114 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 34
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 34
9999 mem: storing 34 in location 1003
 114 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 34
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 114 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 114 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 34
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 114 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 13
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 113 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 34
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 113 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 34
9999 mem: storing 1057 in location 1183
 113 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1057
9999 mem: storing 32 in location 1057
 113 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 34
9999 mem: location 1178 is 1020
9999 mem: storing 35 in location 1020
 113 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 112 run: i <- add i, 1
9999 mem: location 1121 is 2
9999 mem: storing 3 in location 1121
 112 run: jump 
9998 run: jumping to instruction 7
 112 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 3
9999 mem: location 1120 is 3
9999 mem: storing 1 in location 1122
 112 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 112 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 11
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1455
 111 run: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1462
9999 mem: storing 1 in location 1463
 111 run: jump-if optional-ingredient-found?, 
9999 mem: location 1463 is 1
9998 run: jumping to instruction 25
 111 run: jump-unless remaining, 
9999 mem: location 1462 is 0
9998 run: jumping to instruction 31
 111 run: s:address:array:character <- new [...]
9999 mem: storing 1503 in location 1460
 111 run: append_7 buf, s
9999 mem: location 1455 is 1020
9999 mem: location 1460 is 1503
9999 trace: incrementing callstack depth to 11
 112 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 112 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1117
 112 run: x:_elem <- next-ingredient 
9999 mem: storing 1503 in location 1118
 112 run: text:address:array:character <- to-text x
9999 mem: location 1118 is 1503
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
 113 run: x:address:array:character <- next-ingredient 
9999 mem: storing 1503 in location 1196
 113 run: reply x
9999 mem: location 1196 is 1503
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 1503
9999 mem: storing 1503 in location 1119
 112 run: len:number <- length *text
9999 mem: location 1119 is 1503
9999 mem: storing 3 in location 1120
 112 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 112 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 112 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 112 run: c:character <- index *text, i
9999 mem: location 1119 is 1503
9999 mem: location 1121 is 0
9998 run: address to copy is 1504
9998 run: its type is character
9999 mem: location 1504 is 46
9999 mem: storing 46 in location 1123
 112 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 46
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 113 run: c:character <- next-ingredient 
9999 mem: storing 46 in location 1177
 113 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 35
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 113 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 46
9999 mem: storing 0 in location 1179
 113 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 113 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 13
 114 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 114 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 114 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 35
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 35
9999 mem: storing 35 in location 1003
 114 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 35
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 114 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 114 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 35
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 114 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 13
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 113 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 35
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 113 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 35
9999 mem: storing 1058 in location 1183
 113 run: *dest <- copy c
9999 mem: location 1177 is 46
9999 mem: location 1183 is 1058
9999 mem: storing 46 in location 1058
 113 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 35
9999 mem: location 1178 is 1020
9999 mem: storing 36 in location 1020
 113 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 112 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 112 run: jump 
9998 run: jumping to instruction 7
 112 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 112 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 112 run: c:character <- index *text, i
9999 mem: location 1119 is 1503
9999 mem: location 1121 is 1
9998 run: address to copy is 1505
9998 run: its type is character
9999 mem: location 1505 is 46
9999 mem: storing 46 in location 1123
 112 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 46
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 113 run: c:character <- next-ingredient 
9999 mem: storing 46 in location 1177
 113 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 36
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 113 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 46
9999 mem: storing 0 in location 1179
 113 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 113 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 13
 114 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 114 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 114 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 36
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 36
9999 mem: storing 36 in location 1003
 114 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 36
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 114 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 114 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 36
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 114 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 13
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 113 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 36
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 113 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 36
9999 mem: storing 1059 in location 1183
 113 run: *dest <- copy c
9999 mem: location 1177 is 46
9999 mem: location 1183 is 1059
9999 mem: storing 46 in location 1059
 113 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 36
9999 mem: location 1178 is 1020
9999 mem: storing 37 in location 1020
 113 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 112 run: i <- add i, 1
9999 mem: location 1121 is 1
9999 mem: storing 2 in location 1121
9990 schedule: append_7/to-buffer_2/to-buffer_2/to-buffer_2/to-buffer_2/to-buffer_2/to-buffer_2/to-buffer_2/to-text-line_3/run1001/scenario-stash-handles-list-with-cycle
 112 run: jump 
9998 run: jumping to instruction 7
 112 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 2
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 112 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 112 run: c:character <- index *text, i
9999 mem: location 1119 is 1503
9999 mem: location 1121 is 2
9998 run: address to copy is 1506
9998 run: its type is character
9999 mem: location 1506 is 46
9999 mem: storing 46 in location 1123
 112 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1020
9999 mem: location 1123 is 46
9999 trace: incrementing callstack depth to 12
 113 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 113 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 113 run: c:character <- next-ingredient 
9999 mem: storing 46 in location 1177
 113 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 37
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9999 mem: storing 1020 in location 1178
 113 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 46
9999 mem: storing 0 in location 1179
 113 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 113 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1020
9999 trace: incrementing callstack depth to 13
 114 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 114 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1002
 114 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 37
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 37
9999 mem: storing 37 in location 1003
 114 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1020
9999 mem: location 1020 is 37
9999 mem: location 1021 is 1022
9999 mem: location 1002 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1004
 114 run: capacity:number <- length *s
9999 mem: location 1004 is 1022
9999 mem: storing 80 in location 1005
 114 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 37
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 114 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 13
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 113 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 113 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 37
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1182
 113 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1022
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 37
9999 mem: storing 1060 in location 1183
 113 run: *dest <- copy c
9999 mem: location 1177 is 46
9999 mem: location 1183 is 1060
9999 mem: storing 46 in location 1060
 113 run: *len <- add *len, 1
9999 mem: location 1178 is 1020
9999 mem: location 1020 is 37
9999 mem: location 1178 is 1020
9999 mem: storing 38 in location 1020
 113 run: reply in:address:buffer
9999 mem: location 1176 is 1020
9999 trace: reply: decrementing callstack depth from 12
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1117
 112 run: i <- add i, 1
9999 mem: location 1121 is 2
9999 mem: storing 3 in location 1121
 112 run: jump 
9998 run: jumping to instruction 7
 112 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 3
9999 mem: location 1120 is 3
9999 mem: storing 1 in location 1122
 112 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 112 run: reply buf:address:buffer
9999 mem: location 1117 is 1020
9999 trace: reply: decrementing callstack depth from 11
 111 run: reply buf:address:buffer
9999 mem: location 1455 is 1020
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1404
 110 run: reply buf:address:buffer
9999 mem: location 1404 is 1020
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1353
 109 run: reply buf:address:buffer
9999 mem: location 1353 is 1020
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1302
 108 run: reply buf:address:buffer
9999 mem: location 1302 is 1020
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1251
 107 run: reply buf:address:buffer
9999 mem: location 1251 is 1020
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1200
 106 run: reply buf:address:buffer
9999 mem: location 1200 is 1020
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1106
 105 run: reply buf:address:buffer
9999 mem: location 1106 is 1020
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1020
9999 mem: storing 1020 in location 1012
 104 run: result <- buffer-to-array buf
9999 mem: location 1012 is 1020
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1020 in location 1176
 105 run: jump-if in, 
9999 mem: location 1176 is 1020
9998 run: jumping to instruction 5
 105 run: len:number <- get *in, length:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 38
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1020
9998 run: its type is number
9999 mem: location 1020 is 38
9999 mem: storing 38 in location 1177
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1020
9999 mem: location 1020 is 38
9999 mem: location 1021 is 1022
9999 mem: location 1176 is 1020
9998 run: address to copy is 1021
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1021 is 1022
9999 mem: storing 1022 in location 1178
 105 run: result <- new character:type, len
9999 mem: location 1177 is 38
9999 mem: array size is 38
9999 mem: new alloc: 1507
9999 mem: storing 1507 in location 1179
 105 run: i:number <- copy 0
9999 mem: storing 0 in location 1180
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 0
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 0
9998 run: address to copy is 1023
9998 run: its type is character
9999 mem: location 1023 is 52
9999 mem: storing 52 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 0
9999 mem: storing 1508 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 52
9999 mem: location 1183 is 1508
9999 mem: storing 52 in location 1508
 105 run: i <- add i, 1
9999 mem: location 1180 is 0
9999 mem: storing 1 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 1
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 1
9998 run: address to copy is 1024
9998 run: its type is character
9999 mem: location 1024 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 1
9999 mem: storing 1509 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1509
9999 mem: storing 32 in location 1509
 105 run: i <- add i, 1
9999 mem: location 1180 is 1
9999 mem: storing 2 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 2
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 2
9998 run: address to copy is 1025
9998 run: its type is character
9999 mem: location 1025 is 45
9999 mem: storing 45 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 2
9999 mem: storing 1510 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 45
9999 mem: location 1183 is 1510
9999 mem: storing 45 in location 1510
 105 run: i <- add i, 1
9999 mem: location 1180 is 2
9999 mem: storing 3 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 3
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 3
9998 run: address to copy is 1026
9998 run: its type is character
9999 mem: location 1026 is 62
9999 mem: storing 62 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 3
9999 mem: storing 1511 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 62
9999 mem: location 1183 is 1511
9999 mem: storing 62 in location 1511
 105 run: i <- add i, 1
9999 mem: location 1180 is 3
9999 mem: storing 4 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 4
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 4
9998 run: address to copy is 1027
9998 run: its type is character
9999 mem: location 1027 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 4
9999 mem: storing 1512 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1512
9999 mem: storing 32 in location 1512
 105 run: i <- add i, 1
9999 mem: location 1180 is 4
9999 mem: storing 5 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 5
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 5
9998 run: address to copy is 1028
9998 run: its type is character
9999 mem: location 1028 is 52
9999 mem: storing 52 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 5
9999 mem: storing 1513 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 52
9999 mem: location 1183 is 1513
9999 mem: storing 52 in location 1513
 105 run: i <- add i, 1
9999 mem: location 1180 is 5
9999 mem: storing 6 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 6
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 6
9998 run: address to copy is 1029
9998 run: its type is character
9999 mem: location 1029 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 6
9999 mem: storing 1514 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1514
9999 mem: storing 32 in location 1514
 105 run: i <- add i, 1
9999 mem: location 1180 is 6
9999 mem: storing 7 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 7
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 7
9998 run: address to copy is 1030
9998 run: its type is character
9999 mem: location 1030 is 45
9999 mem: storing 45 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 7
9999 mem: storing 1515 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 45
9999 mem: location 1183 is 1515
9999 mem: storing 45 in location 1515
 105 run: i <- add i, 1
9999 mem: location 1180 is 7
9999 mem: storing 8 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 8
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 8
9998 run: address to copy is 1031
9998 run: its type is character
9999 mem: location 1031 is 62
9999 mem: storing 62 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 8
9999 mem: storing 1516 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 62
9999 mem: location 1183 is 1516
9999 mem: storing 62 in location 1516
 105 run: i <- add i, 1
9999 mem: location 1180 is 8
9999 mem: storing 9 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 9
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 9
9998 run: address to copy is 1032
9998 run: its type is character
9999 mem: location 1032 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 9
9999 mem: storing 1517 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1517
9999 mem: storing 32 in location 1517
 105 run: i <- add i, 1
9999 mem: location 1180 is 9
9999 mem: storing 10 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 10
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 10
9998 run: address to copy is 1033
9998 run: its type is character
9999 mem: location 1033 is 52
9999 mem: storing 52 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 10
9999 mem: storing 1518 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 52
9999 mem: location 1183 is 1518
9999 mem: storing 52 in location 1518
 105 run: i <- add i, 1
9999 mem: location 1180 is 10
9999 mem: storing 11 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 11
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 11
9998 run: address to copy is 1034
9998 run: its type is character
9999 mem: location 1034 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 11
9999 mem: storing 1519 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1519
9999 mem: storing 32 in location 1519
 105 run: i <- add i, 1
9999 mem: location 1180 is 11
9999 mem: storing 12 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 12
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 12
9998 run: address to copy is 1035
9998 run: its type is character
9999 mem: location 1035 is 45
9999 mem: storing 45 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 12
9999 mem: storing 1520 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 45
9999 mem: location 1183 is 1520
9999 mem: storing 45 in location 1520
 105 run: i <- add i, 1
9999 mem: location 1180 is 12
9999 mem: storing 13 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 13
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 13
9998 run: address to copy is 1036
9998 run: its type is character
9999 mem: location 1036 is 62
9999 mem: storing 62 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 13
9999 mem: storing 1521 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 62
9999 mem: location 1183 is 1521
9999 mem: storing 62 in location 1521
 105 run: i <- add i, 1
9999 mem: location 1180 is 13
9999 mem: storing 14 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 14
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 14
9998 run: address to copy is 1037
9998 run: its type is character
9999 mem: location 1037 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 14
9999 mem: storing 1522 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1522
9999 mem: storing 32 in location 1522
 105 run: i <- add i, 1
9999 mem: location 1180 is 14
9999 mem: storing 15 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 15
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 15
9998 run: address to copy is 1038
9998 run: its type is character
9999 mem: location 1038 is 52
9999 mem: storing 52 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 15
9999 mem: storing 1523 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 52
9999 mem: location 1183 is 1523
9999 mem: storing 52 in location 1523
 105 run: i <- add i, 1
9999 mem: location 1180 is 15
9999 mem: storing 16 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 16
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 16
9998 run: address to copy is 1039
9998 run: its type is character
9999 mem: location 1039 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 16
9999 mem: storing 1524 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1524
9999 mem: storing 32 in location 1524
 105 run: i <- add i, 1
9999 mem: location 1180 is 16
9999 mem: storing 17 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 17
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 17
9998 run: address to copy is 1040
9998 run: its type is character
9999 mem: location 1040 is 45
9999 mem: storing 45 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 17
9999 mem: storing 1525 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 45
9999 mem: location 1183 is 1525
9999 mem: storing 45 in location 1525
 105 run: i <- add i, 1
9999 mem: location 1180 is 17
9999 mem: storing 18 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 18
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 18
9998 run: address to copy is 1041
9998 run: its type is character
9999 mem: location 1041 is 62
9999 mem: storing 62 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 18
9999 mem: storing 1526 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 62
9999 mem: location 1183 is 1526
9999 mem: storing 62 in location 1526
 105 run: i <- add i, 1
9999 mem: location 1180 is 18
9999 mem: storing 19 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 19
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 19
9998 run: address to copy is 1042
9998 run: its type is character
9999 mem: location 1042 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 19
9999 mem: storing 1527 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1527
9999 mem: storing 32 in location 1527
 105 run: i <- add i, 1
9999 mem: location 1180 is 19
9999 mem: storing 20 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 20
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 20
9998 run: address to copy is 1043
9998 run: its type is character
9999 mem: location 1043 is 52
9999 mem: storing 52 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 20
9999 mem: storing 1528 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 52
9999 mem: location 1183 is 1528
9999 mem: storing 52 in location 1528
 105 run: i <- add i, 1
9999 mem: location 1180 is 20
9999 mem: storing 21 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 21
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 21
9998 run: address to copy is 1044
9998 run: its type is character
9999 mem: location 1044 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 21
9999 mem: storing 1529 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1529
9999 mem: storing 32 in location 1529
 105 run: i <- add i, 1
9999 mem: location 1180 is 21
9999 mem: storing 22 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 22
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 22
9998 run: address to copy is 1045
9998 run: its type is character
9999 mem: location 1045 is 45
9999 mem: storing 45 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 22
9999 mem: storing 1530 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 45
9999 mem: location 1183 is 1530
9999 mem: storing 45 in location 1530
 105 run: i <- add i, 1
9999 mem: location 1180 is 22
9999 mem: storing 23 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 23
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 23
9998 run: address to copy is 1046
9998 run: its type is character
9999 mem: location 1046 is 62
9999 mem: storing 62 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 23
9999 mem: storing 1531 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 62
9999 mem: location 1183 is 1531
9999 mem: storing 62 in location 1531
 105 run: i <- add i, 1
9999 mem: location 1180 is 23
9999 mem: storing 24 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 24
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 24
9998 run: address to copy is 1047
9998 run: its type is character
9999 mem: location 1047 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 24
9999 mem: storing 1532 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1532
9999 mem: storing 32 in location 1532
 105 run: i <- add i, 1
9999 mem: location 1180 is 24
9999 mem: storing 25 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 25
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 25
9998 run: address to copy is 1048
9998 run: its type is character
9999 mem: location 1048 is 52
9999 mem: storing 52 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 25
9999 mem: storing 1533 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 52
9999 mem: location 1183 is 1533
9999 mem: storing 52 in location 1533
 105 run: i <- add i, 1
9999 mem: location 1180 is 25
9999 mem: storing 26 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 26
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 26
9998 run: address to copy is 1049
9998 run: its type is character
9999 mem: location 1049 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 26
9999 mem: storing 1534 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1534
9999 mem: storing 32 in location 1534
 105 run: i <- add i, 1
9999 mem: location 1180 is 26
9999 mem: storing 27 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 27
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 27
9998 run: address to copy is 1050
9998 run: its type is character
9999 mem: location 1050 is 45
9999 mem: storing 45 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 27
9999 mem: storing 1535 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 45
9999 mem: location 1183 is 1535
9999 mem: storing 45 in location 1535
 105 run: i <- add i, 1
9999 mem: location 1180 is 27
9999 mem: storing 28 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 28
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 28
9998 run: address to copy is 1051
9998 run: its type is character
9999 mem: location 1051 is 62
9999 mem: storing 62 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 28
9999 mem: storing 1536 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 62
9999 mem: location 1183 is 1536
9999 mem: storing 62 in location 1536
 105 run: i <- add i, 1
9999 mem: location 1180 is 28
9999 mem: storing 29 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 29
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 29
9998 run: address to copy is 1052
9998 run: its type is character
9999 mem: location 1052 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 29
9999 mem: storing 1537 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1537
9999 mem: storing 32 in location 1537
 105 run: i <- add i, 1
9999 mem: location 1180 is 29
9999 mem: storing 30 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 30
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 30
9998 run: address to copy is 1053
9998 run: its type is character
9999 mem: location 1053 is 52
9999 mem: storing 52 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 30
9999 mem: storing 1538 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 52
9999 mem: location 1183 is 1538
9999 mem: storing 52 in location 1538
 105 run: i <- add i, 1
9999 mem: location 1180 is 30
9999 mem: storing 31 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 31
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 31
9998 run: address to copy is 1054
9998 run: its type is character
9999 mem: location 1054 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 31
9999 mem: storing 1539 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1539
9999 mem: storing 32 in location 1539
 105 run: i <- add i, 1
9999 mem: location 1180 is 31
9999 mem: storing 32 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 32
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 32
9998 run: address to copy is 1055
9998 run: its type is character
9999 mem: location 1055 is 45
9999 mem: storing 45 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 32
9999 mem: storing 1540 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 45
9999 mem: location 1183 is 1540
9999 mem: storing 45 in location 1540
 105 run: i <- add i, 1
9999 mem: location 1180 is 32
9999 mem: storing 33 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 33
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 33
9998 run: address to copy is 1056
9998 run: its type is character
9999 mem: location 1056 is 62
9999 mem: storing 62 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 33
9999 mem: storing 1541 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 62
9999 mem: location 1183 is 1541
9999 mem: storing 62 in location 1541
 105 run: i <- add i, 1
9999 mem: location 1180 is 33
9999 mem: storing 34 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 34
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 34
9998 run: address to copy is 1057
9998 run: its type is character
9999 mem: location 1057 is 32
9999 mem: storing 32 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 34
9999 mem: storing 1542 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 32
9999 mem: location 1183 is 1542
9999 mem: storing 32 in location 1542
 105 run: i <- add i, 1
9999 mem: location 1180 is 34
9999 mem: storing 35 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 35
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 35
9998 run: address to copy is 1058
9998 run: its type is character
9999 mem: location 1058 is 46
9999 mem: storing 46 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 35
9999 mem: storing 1543 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 46
9999 mem: location 1183 is 1543
9999 mem: storing 46 in location 1543
 105 run: i <- add i, 1
9999 mem: location 1180 is 35
9999 mem: storing 36 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 36
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 36
9998 run: address to copy is 1059
9998 run: its type is character
9999 mem: location 1059 is 46
9999 mem: storing 46 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 36
9999 mem: storing 1544 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 46
9999 mem: location 1183 is 1544
9999 mem: storing 46 in location 1544
 105 run: i <- add i, 1
9999 mem: location 1180 is 36
9999 mem: storing 37 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 37
9999 mem: location 1177 is 38
9999 mem: storing 0 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1178 is 1022
9999 mem: location 1180 is 37
9998 run: address to copy is 1060
9998 run: its type is character
9999 mem: location 1060 is 46
9999 mem: storing 46 in location 1182
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1179 is 1507
9999 mem: location 1180 is 37
9999 mem: storing 1545 in location 1183
 105 run: *dest <- copy src
9999 mem: location 1182 is 46
9999 mem: location 1183 is 1545
9999 mem: storing 46 in location 1545
 105 run: i <- add i, 1
9999 mem: location 1180 is 37
9999 mem: storing 38 in location 1180
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1180 is 38
9999 mem: location 1177 is 38
9999 mem: storing 1 in location 1181
 105 run: jump-if done?, 
9999 mem: location 1181 is 1
9998 run: jumping to instruction 18
 105 run: reply result:address:array:character
9999 mem: location 1179 is 1507
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1507
9999 mem: storing 1507 in location 1013
 104 run: reply result:address:array:character
9999 mem: location 1013 is 1507
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1507
9999 mem: storing 1507 in location 3
 103 run: stash [foo foo], stash_0_1:address:array:character
9999 mem: location 3 is 1507
   2 app: foo foo 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> ...
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: trace-should-contain [
    app: foo foo 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> ...
  ]
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
