9999 parse: instruction: run
9999 parse:   ingredient: {name: "\n    1:address:array:character <- new [abc]\n    2:address:array:character <- new []\n    3:boolean <- match-at 1:address:array:character, 2:address:array:character, 0\n  ", properties: [_: "literal-string"]}
9999 parse: instruction: memory-should-contain
9999 parse:   ingredient: {name: "\n    3 <- 1  # always matches empty pattern given a valid index\n  ", properties: [_: "literal-string"]}
9999 after-brace: recipe scenario-match-at-empty-pattern
9999 after-brace: run ...
9999 after-brace: memory-should-contain ...
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9999 schedule: scenario-match-at-empty-pattern
 102 run: run [
    1:address:array:character <- new [abc]
    2:address:array:character <- new []
    3:boolean <- match-at 1:address:array:character, 2:address:array:character, 0
  ]
9999 parse: instruction: new
9999 parse:   ingredient: {name: "abc", properties: [_: "literal-string"]}
9999 parse:   product: {name: "1", properties: ["1": "address":"array":"character"]}
9999 parse: instruction: new
9999 parse:   ingredient: {name: "", properties: [_: "literal-string"]}
9999 parse:   product: {name: "2", properties: ["2": "address":"array":"character"]}
9999 parse: instruction: match-at
9999 parse:   ingredient: {name: "1", properties: ["1": "address":"array":"character"]}
9999 parse:   ingredient: {name: "2", properties: ["2": "address":"array":"character"]}
9999 parse:   ingredient: {name: "0", properties: ["0": "literal"]}
9999 parse:   product: {name: "3", properties: ["3": "boolean"]}
9999 after-brace: recipe run1001
9999 after-brace: new ...
9999 after-brace: new ...
9999 after-brace: match-at ...
9999 trace: run: incrementing callstack depth to 2
 103 run: 1:address:array:character <- new [abc]
9999 mem: storing 1000 in location 1
 103 run: 2:address:array:character <- new []
9999 mem: storing 1004 in location 2
 103 run: 3:boolean <- match-at 1:address:array:character, 2:address:array:character, 0
9999 mem: location 1 is 1000
9999 mem: location 2 is 1004
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
9999 mem: new alloc: 1005
 104 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1007
 104 run: pattern:address:array:character <- next-ingredient 
9999 mem: storing 1004 in location 1008
 104 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1009
 104 run: pattern-len:number <- length *pattern
9999 mem: location 1008 is 1004
9999 mem: storing 0 in location 1010
 104 run: x:number <- length *text
9999 mem: location 1007 is 1000
9999 mem: storing 3 in location 1011
 104 run: x <- subtract x, pattern-len
9999 mem: location 1011 is 3
9999 mem: location 1010 is 0
9999 mem: storing 3 in location 1011
 104 run: enough-room?:boolean <- lesser-or-equal idx, x
9999 mem: location 1009 is 0
9999 mem: location 1011 is 3
9999 mem: storing 1 in location 1012
 104 run: break-if enough-room?, 
9999 mem: location 1012 is 1
9999 run: jumping to instruction 11
 104 run: pattern-idx:number <- copy 0
9999 mem: storing 0 in location 1013
 104 run: done?:boolean <- greater-or-equal pattern-idx, pattern-len
9999 mem: location 1013 is 0
9999 mem: location 1010 is 0
9999 mem: storing 1 in location 1014
 104 run: break-if done?, 
9999 mem: location 1014 is 1
9999 run: jumping to instruction 26
 104 run: reply 1/found
9999 trace: reply: decrementing callstack depth from 3
9999 run: result 0 is 1
9999 mem: storing 1 in location 3
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    3 <- 1  # always matches empty pattern given a valid index
  ]
9999 run: checking location 3
9999 trace: fall-through: exiting scenario-match-at-empty-pattern; decrementing callstack depth from 1
