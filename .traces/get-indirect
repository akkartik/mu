schedule: main
run: -- nil
run: 1 main 0: ((1 integer) <- copy (34 literal))
run: 34 => (1 integer)
setm: (1 integer) <= 34
sz: (1 integer)
setm: size of (1 integer) is 1
setm: (1 integer): setting 1 to 34
run: -- ((1 34))
run: 2 main 1: ((2 boolean) <- copy (nil literal))
run: nil => (2 boolean)
setm: (2 boolean) <= nil
sz: (2 boolean)
setm: size of (2 boolean) is 1
setm: (2 boolean): setting 2 to nil
run: -- ((1 34))
run: 3 main 2: ((3 integer-boolean-pair-address) <- copy (1 literal))
run: 1 => (3 integer-boolean-pair-address)
setm: (3 integer-boolean-pair-address) <= 1
sz: (3 integer-boolean-pair-address)
setm: size of (3 integer-boolean-pair-address) is 1
setm: (3 integer-boolean-pair-address): setting 3 to 1
run: -- ((1 34) (3 1))
run: 4 main 3: ((4 boolean) <- get (3 integer-boolean-pair-address deref) (1 offset))
record-info: (3 integer-boolean-pair-address deref) (1 offset)
record-info: initial base 1 type ((address t) (elem integer-boolean-pair) (size 1))
record-info: (3 integer-boolean-pair-address deref) requests deref => ((elems (integer boolean)) (fields (int bool)) (record t) (size 2))
get: (3 integer-boolean-pair-address deref) (1 offset) => 2 boolean
m: (2 boolean global)
sz: (2 boolean global)
run: nil => (4 boolean)
setm: (4 boolean) <= nil
sz: (4 boolean)
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 4 to nil
run: -- ((1 34) (3 1))
run: 5 main 4: ((5 integer) <- get (3 integer-boolean-pair-address deref) (0 offset))
record-info: (3 integer-boolean-pair-address deref) (0 offset)
record-info: initial base 1 type ((address t) (elem integer-boolean-pair) (size 1))
record-info: (3 integer-boolean-pair-address deref) requests deref => ((elems (integer boolean)) (fields (int bool)) (record t) (size 2))
get: (3 integer-boolean-pair-address deref) (0 offset) => 1 integer
m: (1 integer global)
sz: (1 integer global)
run: 34 => (5 integer)
setm: (5 integer) <= 34
sz: (5 integer)
setm: size of (5 integer) is 1
setm: (5 integer): setting 5 to 34
schedule: done with routine
