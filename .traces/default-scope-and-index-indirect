schedule: main
run: -- nil
run: 1 main 0: ((default-scope scope-address) <- new (scope literal) (5 literal))
sizeof: location
run: 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 5))
run: 2 main 1: ((1 integer-array-address) <- new (integer-array literal) (4 literal))
sizeof: integer
run: 1006 => (1 integer-array-address)
setm: (1 integer-array-address) <= 1006
sz: (1 integer-array-address)
addr: (1 integer-array-address)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 integer-array-address) is 1
setm: (1 integer-array-address): setting 1001 to 1006
run: -- ((1000 5) (1001 1006) (1006 4))
run: 3 main 2: ((2 integer-address) <- index-address (1 integer-array-address deref) (2 offset))
array-info: (1 integer-array-address deref) (2 offset)
addr: (1 integer-array-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1006
array-info: initial base 1006 type ((address t) (elem integer-array) (size 1))
array-info: (1 integer-array-address deref) requests deref => ((array t) (elem integer))
array-len: (1 integer-array-address deref)
m: (1 integer-address deref)
sz: (1 integer-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1000
sz: (1006 integer)
addr: (1 integer-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1006
array-info: array-len of (1 integer-array-address deref) is 4
index-address: (1 integer-array-address deref) (2 offset) => 1009
run: 1009 => (2 integer-address)
setm: (2 integer-address) <= 1009
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 1002 to 1009
run: -- ((1000 5) (1001 1006) (1002 1009) (1006 4))
run: 4 main 3: ((2 integer-address deref) <- copy (34 literal))
run: 34 => (2 integer-address deref)
setm: (2 integer-address deref) <= 34
sz: (2 integer-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
addr: incrementing by 1000
sz: (1009 integer)
addr: (2 integer-address deref)
addr: initial result: 2
addr: incrementing by 1000
addr: deref 1002 => 1009
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1009 to 34
run: -- ((1000 5) (1001 1006) (1002 1009) (1006 4) (1009 34))
run: 5 main 4: ((3 integer global) <- index (1 integer-array-address deref) (2 offset))
array-info: (1 integer-array-address deref) (2 offset)
addr: (1 integer-array-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1006
array-info: initial base 1006 type ((address t) (elem integer-array) (size 1))
array-info: (1 integer-array-address deref) requests deref => ((array t) (elem integer))
array-len: (1 integer-array-address deref)
m: (1 integer-address deref)
sz: (1 integer-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1000
sz: (1006 integer)
addr: (1 integer-address deref)
addr: initial result: 1
addr: incrementing by 1000
addr: deref 1001 => 1006
array-info: array-len of (1 integer-array-address deref) is 4
index: (1 integer-array-address deref) (2 offset) => 1009 integer
m: (1009 integer global)
sz: (1009 integer global)
addr: (1009 integer global)
addr: initial result: 1009
run: 34 => (3 integer global)
setm: (3 integer global) <= 34
sz: (3 integer global)
addr: (3 integer global)
addr: initial result: 3
setm: size of (3 integer global) is 1
setm: (3 integer global): setting 3 to 34
schedule: done with routine
