parse: instruction: create-delimited-continuation
parse:   ingredient: {name: "f", properties: ["f": "recipe"]}
parse:   ingredient: {name: "12", properties: ["12": "literal"]}
parse:   product: {name: "1", properties: ["1": "continuation"]}
parse: instruction: copy
parse:   ingredient: {name: "5", properties: ["5": "literal"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: label: {
parse: instruction: call-delimited-continuation
parse:   ingredient: {name: "1", properties: ["1": "continuation"]}
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse:   product: {name: "2", properties: ["2": "number"]}
parse: instruction: greater-or-equal
parse:   ingredient: {name: "2", properties: ["2": "number"]}
parse:   ingredient: {name: "8", properties: ["8": "literal"]}
parse:   product: {name: "3", properties: ["3": "boolean"]}
parse: instruction: break-if
parse:   ingredient: {name: "3", properties: ["3": "boolean"]}
parse: instruction: loop
parse: label: }
parse: instruction: g
parse:   product: {name: "11", properties: ["11": "number"]}
parse: instruction: reply
parse:   ingredient: {name: "11", properties: ["11": "number"]}
parse: instruction: reply-delimited-continuation
parse: instruction: next-ingredient
parse:   product: {name: "22", properties: ["22": "number"]}
parse: instruction: add
parse:   ingredient: {name: "22", properties: ["22": "number"]}
parse:   ingredient: {name: "1", properties: ["1": "literal"]}
parse:   product: {name: "22", properties: ["22": "number"]}
parse: instruction: reply
parse:   ingredient: {name: "22", properties: ["22": "number"]}
brace: 1000: push (open, 2)
brace: push (close, 7)
after-brace: recipe main
after-brace: create-delimited-continuation ...
after-brace: copy ...
after-brace: call-delimited-continuation ...
after-brace: greater-or-equal ...
after-brace: jump-if 3, 1:offset
after-brace: jump -4:offset
after-brace: 6: {name: "", properties: ["": ]}
after-brace: 6: {name: "", properties: ["": ]}
after-brace: recipe f
after-brace: g ...
after-brace: reply ...
after-brace: recipe g
after-brace: reply-delimited-continuation ...
after-brace: next-ingredient ...
after-brace: add ...
after-brace: reply ...
9999 new: routine allocated memory from 1000 to 101000
schedule: main
 101 run: 1:continuation <- create-delimited-continuation f:recipe, 12:literal
 102 run: 11:number <- g 
 103 run: reply-delimited-continuation 
9999 mem: storing 0 in location 1
 103 run: 2:number <- copy 5:literal
9999 mem: storing 5 in location 2
 103 run: 2:number <- call-delimited-continuation 1:continuation, 2:number
9999 mem: location 1 is 0
9999 mem: location 2 is 5
 104 run: reply-delimited-continuation 
9999 mem: storing 1 in location 2
 104 run: 3:boolean <- greater-or-equal 2:number, 8:literal
9999 mem: location 2 is 1
9999 mem: storing 0 in location 3
 104 run: break-if 3:boolean, 
9999 mem: location 3 is 0
9999 run: jump-if fell through
 104 run: loop 
9999 run: jumping to instruction 3
 104 run: 2:number <- call-delimited-continuation 1:continuation, 2:number
9999 mem: location 1 is 0
9999 mem: location 2 is 1
 105 run: reply-delimited-continuation 
9999 mem: storing 2 in location 2
 105 run: 3:boolean <- greater-or-equal 2:number, 8:literal
9999 mem: location 2 is 2
9999 mem: storing 0 in location 3
 105 run: break-if 3:boolean, 
9999 mem: location 3 is 0
9999 run: jump-if fell through
 105 run: loop 
9999 run: jumping to instruction 3
 105 run: 2:number <- call-delimited-continuation 1:continuation, 2:number
9999 mem: location 1 is 0
9999 mem: location 2 is 2
 106 run: reply-delimited-continuation 
9999 mem: storing 3 in location 2
 106 run: 3:boolean <- greater-or-equal 2:number, 8:literal
9999 mem: location 2 is 3
9999 mem: storing 0 in location 3
 106 run: break-if 3:boolean, 
9999 mem: location 3 is 0
9999 run: jump-if fell through
 106 run: loop 
9999 run: jumping to instruction 3
 106 run: 2:number <- call-delimited-continuation 1:continuation, 2:number
9999 mem: location 1 is 0
9999 mem: location 2 is 3
 107 run: reply-delimited-continuation 
9999 mem: storing 4 in location 2
 107 run: 3:boolean <- greater-or-equal 2:number, 8:literal
9999 mem: location 2 is 4
9999 mem: storing 0 in location 3
 107 run: break-if 3:boolean, 
9999 mem: location 3 is 0
9999 run: jump-if fell through
 107 run: loop 
9999 run: jumping to instruction 3
 107 run: 2:number <- call-delimited-continuation 1:continuation, 2:number
9999 mem: location 1 is 0
9999 mem: location 2 is 4
 108 run: reply-delimited-continuation 
9999 mem: storing 5 in location 2
 108 run: 3:boolean <- greater-or-equal 2:number, 8:literal
9999 mem: location 2 is 5
9999 mem: storing 0 in location 3
 108 run: break-if 3:boolean, 
9999 mem: location 3 is 0
9999 run: jump-if fell through
 108 run: loop 
9999 run: jumping to instruction 3
 108 run: 2:number <- call-delimited-continuation 1:continuation, 2:number
9999 mem: location 1 is 0
9999 mem: location 2 is 5
 109 run: reply-delimited-continuation 
9999 mem: storing 6 in location 2
 109 run: 3:boolean <- greater-or-equal 2:number, 8:literal
9999 mem: location 2 is 6
9999 mem: storing 0 in location 3
 109 run: break-if 3:boolean, 
9999 mem: location 3 is 0
9999 run: jump-if fell through
 109 run: loop 
9999 run: jumping to instruction 3
 109 run: 2:number <- call-delimited-continuation 1:continuation, 2:number
9999 mem: location 1 is 0
9999 mem: location 2 is 6
 110 run: reply-delimited-continuation 
9999 mem: storing 7 in location 2
 110 run: 3:boolean <- greater-or-equal 2:number, 8:literal
9999 mem: location 2 is 7
9999 mem: storing 0 in location 3
 110 run: break-if 3:boolean, 
9999 mem: location 3 is 0
9999 run: jump-if fell through
 110 run: loop 
9999 run: jumping to instruction 3
 110 run: 2:number <- call-delimited-continuation 1:continuation, 2:number
9999 mem: location 1 is 0
9999 mem: location 2 is 7
 111 run: reply-delimited-continuation 
9999 mem: storing 8 in location 2
 111 run: 3:boolean <- greater-or-equal 2:number, 8:literal
9999 mem: location 2 is 8
9999 mem: storing 1 in location 3
 111 run: break-if 3:boolean, 
9999 mem: location 3 is 1
9999 run: jumping to instruction 7
