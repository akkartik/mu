parse: instruction: run
parse:   ingredient: {name: "\n    1:address:array:character <- new [a/b/c]\n    2:address:array:address:array:character <- split 1:address:array:character, 47:literal/slash\n    3:number <- length 2:address:array:address:array:character/deref\n    4:address:array:character <- index 2:address:array:address:array:character/deref, 0:literal\n    5:address:array:character <- index 2:address:array:address:array:character/deref, 1:literal\n    6:address:array:character <- index 2:address:array:address:array:character/deref, 2:literal\n    10:array:character <- copy 4:address:array:character/deref\n    20:array:character <- copy 5:address:array:character/deref\n    30:array:character <- copy 6:address:array:character/deref\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    3 <- 3  # length of result\n    10:string <- [a]\n    20:string <- [b]\n    30:string <- [c]\n  ", properties: [_: "literal-string"]}
after-brace: recipe string-split-2
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: string-split-2
 101 run: run [
    1:address:array:character <- new [a/b/c]
    2:address:array:address:array:character <- split 1:address:array:character, 47:literal/slash
    3:number <- length 2:address:array:address:array:character/deref
    4:address:array:character <- index 2:address:array:address:array:character/deref, 0:literal
    5:address:array:character <- index 2:address:array:address:array:character/deref, 1:literal
    6:address:array:character <- index 2:address:array:address:array:character/deref, 2:literal
    10:array:character <- copy 4:address:array:character/deref
    20:array:character <- copy 5:address:array:character/deref
    30:array:character <- copy 6:address:array:character/deref
  ]
parse: instruction: new
parse:   ingredient: {name: "a/b/c", properties: [_: "literal-string"]}
parse:   product: {name: "1", properties: ["1": "address":"array":"character"]}
parse: instruction: split
parse:   ingredient: {name: "1", properties: ["1": "address":"array":"character"]}
parse:   ingredient: {name: "47", properties: ["47": "literal", "slash": ]}
parse:   product: {name: "2", properties: ["2": "address":"array":"address":"array":"character"]}
parse: instruction: length
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"address":"array":"character", "deref": ]}
parse:   product: {name: "3", properties: ["3": "number"]}
parse: instruction: index
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"address":"array":"character", "deref": ]}
parse:   ingredient: {name: "0", properties: ["0": "literal"]}
parse:   product: {name: "4", properties: ["4": "address":"array":"character"]}
parse: instruction: index
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"address":"array":"character", "deref": ]}
parse:   ingredient: {name: "1", properties: ["1": "literal"]}
parse:   product: {name: "5", properties: ["5": "address":"array":"character"]}
parse: instruction: index
parse:   ingredient: {name: "2", properties: ["2": "address":"array":"address":"array":"character", "deref": ]}
parse:   ingredient: {name: "2", properties: ["2": "literal"]}
parse:   product: {name: "6", properties: ["6": "address":"array":"character"]}
parse: instruction: copy
parse:   ingredient: {name: "4", properties: ["4": "address":"array":"character", "deref": ]}
parse:   product: {name: "10", properties: ["10": "array":"character"]}
parse: instruction: copy
parse:   ingredient: {name: "5", properties: ["5": "address":"array":"character", "deref": ]}
parse:   product: {name: "20", properties: ["20": "array":"character"]}
parse: instruction: copy
parse:   ingredient: {name: "6", properties: ["6": "address":"array":"character", "deref": ]}
parse:   product: {name: "30", properties: ["30": "array":"character"]}
after-brace: recipe run1001
after-brace: new ...
after-brace: split ...
after-brace: length ...
after-brace: index ...
after-brace: index ...
after-brace: index ...
after-brace: copy ...
after-brace: copy ...
after-brace: copy ...
 101 run: 1:address:array:character <- new [a/b/c]
9999 mem: storing 1000 in location 1
 101 run: 2:address:array:address:array:character <- split 1:address:array:character, 47:literal/slash
9999 mem: location 1 is 1000
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 13
9999 mem: new alloc: 1006
 102 run: s:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1008
 102 run: delim:character <- next-ingredient 
9999 mem: storing 47 in location 1009
 102 run: len:number <- length s:address:array:character/deref
9999 mem: location 1008 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1008 is 1000
9999 mem: storing 5 in location 1010
 102 run: empty?:boolean <- equal len:number, 0:literal
9999 mem: location 1010 is 5
9999 mem: storing 0 in location 1011
 102 run: break-unless empty?:boolean, 
9999 mem: location 1011 is 0
9999 run: jumping to instruction 9
 102 run: count:number <- copy 1:literal
9999 mem: storing 1 in location 1013
 102 run: idx:number <- copy 0:literal
9999 mem: storing 0 in location 1014
 102 run: idx:number <- find-next s:address:array:character, delim:character, idx:number
9999 mem: location 1008 is 1000
9999 mem: location 1009 is 47
9999 mem: location 1014 is 0
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1020
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1022
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1023
 103 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1024
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1022 is 1000
9999 mem: storing 5 in location 1025
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1024 is 0
9999 mem: location 1025 is 5
9999 mem: storing 0 in location 1026
 103 run: break-if eof?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1024 is 0
9999 mem: location 1022 is 1000
9999 mem: location 1024 is 0
9999 run: address to copy is 1001
9999 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1027
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1027 is 97
9999 mem: location 1023 is 47
9999 mem: storing 0 in location 1028
 103 run: break-if found?:boolean, 
9999 mem: location 1028 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1024 is 0
9999 mem: storing 1 in location 1024
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1024 is 1
9999 mem: location 1025 is 5
9999 mem: storing 0 in location 1026
 103 run: break-if eof?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1024 is 1
9999 mem: location 1022 is 1000
9999 mem: location 1024 is 1
9999 run: address to copy is 1002
9999 run: its type is character
9999 mem: location 1002 is 47
9999 mem: storing 47 in location 1027
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1027 is 47
9999 mem: location 1023 is 47
9999 mem: storing 1 in location 1028
 103 run: break-if found?:boolean, 
9999 mem: location 1028 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1024 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 1014
 102 run: done?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1014 is 1
9999 mem: location 1010 is 5
9999 mem: storing 0 in location 1015
 102 run: break-if done?:boolean, 
9999 mem: location 1015 is 0
9999 run: jump-if fell through
 102 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1014 is 1
9999 mem: storing 2 in location 1014
 102 run: count:number <- add count:number, 1:literal
9999 mem: location 1013 is 1
9999 mem: storing 2 in location 1013
 102 run: loop 
9999 run: jumping to instruction 13
 102 run: idx:number <- find-next s:address:array:character, delim:character, idx:number
9999 mem: location 1008 is 1000
9999 mem: location 1009 is 47
9999 mem: location 1014 is 2
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1022
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1023
 103 run: idx:number <- next-ingredient 
9999 mem: storing 2 in location 1024
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1022 is 1000
9999 mem: storing 5 in location 1025
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1024 is 2
9999 mem: location 1025 is 5
9999 mem: storing 0 in location 1026
 103 run: break-if eof?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1024 is 2
9999 mem: location 1022 is 1000
9999 mem: location 1024 is 2
9999 run: address to copy is 1003
9999 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1027
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1027 is 98
9999 mem: location 1023 is 47
9999 mem: storing 0 in location 1028
 103 run: break-if found?:boolean, 
9999 mem: location 1028 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1024 is 2
9999 mem: storing 3 in location 1024
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1024 is 3
9999 mem: location 1025 is 5
9999 mem: storing 0 in location 1026
 103 run: break-if eof?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1024 is 3
9999 mem: location 1022 is 1000
9999 mem: location 1024 is 3
9999 run: address to copy is 1004
9999 run: its type is character
9999 mem: location 1004 is 47
9999 mem: storing 47 in location 1027
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1027 is 47
9999 mem: location 1023 is 47
9999 mem: storing 1 in location 1028
 103 run: break-if found?:boolean, 
9999 mem: location 1028 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1024 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 1014
 102 run: done?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1014 is 3
9999 mem: location 1010 is 5
9999 mem: storing 0 in location 1015
 102 run: break-if done?:boolean, 
9999 mem: location 1015 is 0
9999 run: jump-if fell through
 102 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1014 is 3
9999 mem: storing 4 in location 1014
 102 run: count:number <- add count:number, 1:literal
9999 mem: location 1013 is 2
9999 mem: storing 3 in location 1013
 102 run: loop 
9999 run: jumping to instruction 13
 102 run: idx:number <- find-next s:address:array:character, delim:character, idx:number
9999 mem: location 1008 is 1000
9999 mem: location 1009 is 47
9999 mem: location 1014 is 4
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1022
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1023
 103 run: idx:number <- next-ingredient 
9999 mem: storing 4 in location 1024
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1022 is 1000
9999 mem: storing 5 in location 1025
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1024 is 4
9999 mem: location 1025 is 5
9999 mem: storing 0 in location 1026
 103 run: break-if eof?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1024 is 4
9999 mem: location 1022 is 1000
9999 mem: location 1024 is 4
9999 run: address to copy is 1005
9999 run: its type is character
9999 mem: location 1005 is 99
9999 mem: storing 99 in location 1027
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1027 is 99
9999 mem: location 1023 is 47
9999 mem: storing 0 in location 1028
 103 run: break-if found?:boolean, 
9999 mem: location 1028 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1024 is 4
9999 mem: storing 5 in location 1024
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1024 is 5
9999 mem: location 1025 is 5
9999 mem: storing 1 in location 1026
 103 run: break-if eof?:boolean, 
9999 mem: location 1026 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1024 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1014
 102 run: done?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1014 is 5
9999 mem: location 1010 is 5
9999 mem: storing 1 in location 1015
 102 run: break-if done?:boolean, 
9999 mem: location 1015 is 1
9999 run: jumping to instruction 19
 102 run: result:address:array:address:array:character <- new location:type, count:number
9999 mem: location 1013 is 3
9999 mem: array size is 3
9999 mem: new alloc: 1029
9999 mem: storing 1029 in location 1012
 102 run: curr-result:number <- copy 0:literal
9999 mem: storing 0 in location 1016
 102 run: start:number <- copy 0:literal
9999 mem: storing 0 in location 1017
 102 run: done?:boolean <- greater-or-equal start:number, len:number
9999 mem: location 1017 is 0
9999 mem: location 1010 is 5
9999 mem: storing 0 in location 1015
 102 run: break-if done?:boolean, 
9999 mem: location 1015 is 0
9999 run: jump-if fell through
 102 run: end:number <- find-next s:address:array:character, delim:character, start:number
9999 mem: location 1008 is 1000
9999 mem: location 1009 is 47
9999 mem: location 1017 is 0
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1022
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1023
 103 run: idx:number <- next-ingredient 
9999 mem: storing 0 in location 1024
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1022 is 1000
9999 mem: storing 5 in location 1025
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1024 is 0
9999 mem: location 1025 is 5
9999 mem: storing 0 in location 1026
 103 run: break-if eof?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1024 is 0
9999 mem: location 1022 is 1000
9999 mem: location 1024 is 0
9999 run: address to copy is 1001
9999 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1027
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1027 is 97
9999 mem: location 1023 is 47
9999 mem: storing 0 in location 1028
 103 run: break-if found?:boolean, 
9999 mem: location 1028 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1024 is 0
9999 mem: storing 1 in location 1024
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1024 is 1
9999 mem: location 1025 is 5
9999 mem: storing 0 in location 1026
 103 run: break-if eof?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1024 is 1
9999 mem: location 1022 is 1000
9999 mem: location 1024 is 1
9999 run: address to copy is 1002
9999 run: its type is character
9999 mem: location 1002 is 47
9999 mem: storing 47 in location 1027
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1027 is 47
9999 mem: location 1023 is 47
9999 mem: storing 1 in location 1028
 103 run: break-if found?:boolean, 
9999 mem: location 1028 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1024 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 1018
 102 run: dest:address:address:array:character <- index-address result:address:array:address:array:character/deref, curr-result:number
9999 mem: location 1012 is 1029
9999 mem: location 1029 is 3
9999 mem: location 1030 is 0
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1016 is 0
9999 mem: location 1012 is 1029
9999 mem: location 1016 is 0
9999 mem: storing 1030 in location 1019
 102 run: dest:address:address:array:character/deref <- string-copy s:address:array:character, start:number, end:number
9999 mem: location 1008 is 1000
9999 mem: location 1017 is 0
9999 mem: location 1018 is 1
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1033
 103 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1035
 103 run: start:number <- next-ingredient 
9999 mem: storing 0 in location 1036
 103 run: end:number <- next-ingredient 
9999 mem: storing 1 in location 1037
 103 run: len:number <- length buf:address:array:character/deref
9999 mem: location 1035 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1035 is 1000
9999 mem: storing 5 in location 1038
 103 run: end:number <- min len:number, end:number
9999 mem: location 1038 is 5
9999 mem: location 1037 is 1
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1045
 104 run: x:number <- next-ingredient 
9999 mem: storing 5 in location 1047
 104 run: y:number <- next-ingredient 
9999 mem: storing 1 in location 1048
 104 run: return-x?:boolean <- lesser-than x:number, y:number
9999 mem: location 1047 is 5
9999 mem: location 1048 is 1
9999 mem: storing 0 in location 1049
 104 run: break-if return-x?:boolean, 
9999 mem: location 1049 is 0
9999 run: jump-if fell through
 104 run: reply y:number
9999 mem: location 1048 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 1037
 103 run: len:number <- subtract end:number, start:number
9999 mem: location 1037 is 1
9999 mem: location 1036 is 0
9999 mem: storing 1 in location 1038
 103 run: result:address:array:character <- new character:type, len:number
9999 mem: location 1038 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1050
9999 mem: storing 1050 in location 1039
 103 run: src-idx:number <- copy start:number
9999 mem: location 1036 is 0
9999 mem: storing 0 in location 1040
 103 run: dest-idx:number <- copy 0:literal
9999 mem: storing 0 in location 1041
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1040 is 0
9999 mem: location 1037 is 1
9999 mem: storing 0 in location 1042
 103 run: break-if done?:boolean, 
9999 mem: location 1042 is 0
9999 run: jump-if fell through
 103 run: src:character <- index buf:address:array:character/deref, src-idx:number
9999 mem: location 1035 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1040 is 0
9999 mem: location 1035 is 1000
9999 mem: location 1040 is 0
9999 run: address to copy is 1001
9999 run: its type is character
9999 mem: location 1001 is 97
9999 mem: storing 97 in location 1043
 103 run: dest:address:character <- index-address result:address:array:character/deref, dest-idx:number
9999 mem: location 1039 is 1050
9999 mem: location 1050 is 1
9999 mem: location 1051 is 0
9999 mem: location 1041 is 0
9999 mem: location 1039 is 1050
9999 mem: location 1041 is 0
9999 mem: storing 1051 in location 1044
 103 run: dest:address:character/deref <- copy src:character
9999 mem: location 1043 is 97
9999 mem: location 1044 is 1051
9999 mem: storing 97 in location 1051
 103 run: src-idx:number <- add src-idx:number, 1:literal
9999 mem: location 1040 is 0
9999 mem: storing 1 in location 1040
 103 run: dest-idx:number <- add dest-idx:number, 1:literal
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1041
 103 run: loop 
9999 run: jumping to instruction 11
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1040 is 1
9999 mem: location 1037 is 1
9999 mem: storing 1 in location 1042
 103 run: break-if done?:boolean, 
9999 mem: location 1042 is 1
9999 run: jumping to instruction 19
 103 run: reply result:address:array:character
9999 mem: location 1039 is 1050
9999 run: result 0 is 1050
9999 mem: location 1019 is 1030
9999 mem: storing 1050 in location 1030
 102 run: start:number <- add end:number, 1:literal
9999 mem: location 1018 is 1
9999 mem: storing 2 in location 1017
 102 run: curr-result:number <- add curr-result:number, 1:literal
9999 mem: location 1016 is 0
9999 mem: storing 1 in location 1016
 102 run: loop 
9999 run: jumping to instruction 24
 102 run: done?:boolean <- greater-or-equal start:number, len:number
9999 mem: location 1017 is 2
9999 mem: location 1010 is 5
9999 mem: storing 0 in location 1015
 102 run: break-if done?:boolean, 
9999 mem: location 1015 is 0
9999 run: jump-if fell through
 102 run: end:number <- find-next s:address:array:character, delim:character, start:number
9999 mem: location 1008 is 1000
9999 mem: location 1009 is 47
9999 mem: location 1017 is 2
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1022
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1023
 103 run: idx:number <- next-ingredient 
9999 mem: storing 2 in location 1024
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1022 is 1000
9999 mem: storing 5 in location 1025
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1024 is 2
9999 mem: location 1025 is 5
9999 mem: storing 0 in location 1026
 103 run: break-if eof?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1024 is 2
9999 mem: location 1022 is 1000
9999 mem: location 1024 is 2
9999 run: address to copy is 1003
9999 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1027
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1027 is 98
9999 mem: location 1023 is 47
9999 mem: storing 0 in location 1028
 103 run: break-if found?:boolean, 
9999 mem: location 1028 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1024 is 2
9999 mem: storing 3 in location 1024
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1024 is 3
9999 mem: location 1025 is 5
9999 mem: storing 0 in location 1026
 103 run: break-if eof?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1024 is 3
9999 mem: location 1022 is 1000
9999 mem: location 1024 is 3
9999 run: address to copy is 1004
9999 run: its type is character
9999 mem: location 1004 is 47
9999 mem: storing 47 in location 1027
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1027 is 47
9999 mem: location 1023 is 47
9999 mem: storing 1 in location 1028
 103 run: break-if found?:boolean, 
9999 mem: location 1028 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1024 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 1018
 102 run: dest:address:address:array:character <- index-address result:address:array:address:array:character/deref, curr-result:number
9999 mem: location 1012 is 1029
9999 mem: location 1029 is 3
9999 mem: location 1030 is 1050
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1016 is 1
9999 mem: location 1012 is 1029
9999 mem: location 1016 is 1
9999 mem: storing 1031 in location 1019
 102 run: dest:address:address:array:character/deref <- string-copy s:address:array:character, start:number, end:number
9999 mem: location 1008 is 1000
9999 mem: location 1017 is 2
9999 mem: location 1018 is 3
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
 103 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1035
 103 run: start:number <- next-ingredient 
9999 mem: storing 2 in location 1036
 103 run: end:number <- next-ingredient 
9999 mem: storing 3 in location 1037
 103 run: len:number <- length buf:address:array:character/deref
9999 mem: location 1035 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1035 is 1000
9999 mem: storing 5 in location 1038
 103 run: end:number <- min len:number, end:number
9999 mem: location 1038 is 5
9999 mem: location 1037 is 3
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 104 run: x:number <- next-ingredient 
9999 mem: storing 5 in location 1047
 104 run: y:number <- next-ingredient 
9999 mem: storing 3 in location 1048
 104 run: return-x?:boolean <- lesser-than x:number, y:number
9999 mem: location 1047 is 5
9999 mem: location 1048 is 3
9999 mem: storing 0 in location 1049
 104 run: break-if return-x?:boolean, 
9999 mem: location 1049 is 0
9999 run: jump-if fell through
 104 run: reply y:number
9999 mem: location 1048 is 3
9999 run: result 0 is 3
9999 mem: storing 3 in location 1037
 103 run: len:number <- subtract end:number, start:number
9999 mem: location 1037 is 3
9999 mem: location 1036 is 2
9999 mem: storing 1 in location 1038
 103 run: result:address:array:character <- new character:type, len:number
9999 mem: location 1038 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1052
9999 mem: storing 1052 in location 1039
 103 run: src-idx:number <- copy start:number
9999 mem: location 1036 is 2
9999 mem: storing 2 in location 1040
 103 run: dest-idx:number <- copy 0:literal
9999 mem: storing 0 in location 1041
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1040 is 2
9999 mem: location 1037 is 3
9999 mem: storing 0 in location 1042
 103 run: break-if done?:boolean, 
9999 mem: location 1042 is 0
9999 run: jump-if fell through
 103 run: src:character <- index buf:address:array:character/deref, src-idx:number
9999 mem: location 1035 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1040 is 2
9999 mem: location 1035 is 1000
9999 mem: location 1040 is 2
9999 run: address to copy is 1003
9999 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1043
 103 run: dest:address:character <- index-address result:address:array:character/deref, dest-idx:number
9999 mem: location 1039 is 1052
9999 mem: location 1052 is 1
9999 mem: location 1053 is 0
9999 mem: location 1041 is 0
9999 mem: location 1039 is 1052
9999 mem: location 1041 is 0
9999 mem: storing 1053 in location 1044
 103 run: dest:address:character/deref <- copy src:character
9999 mem: location 1043 is 98
9999 mem: location 1044 is 1053
9999 mem: storing 98 in location 1053
 103 run: src-idx:number <- add src-idx:number, 1:literal
9999 mem: location 1040 is 2
9999 mem: storing 3 in location 1040
 103 run: dest-idx:number <- add dest-idx:number, 1:literal
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1041
 103 run: loop 
9999 run: jumping to instruction 11
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1040 is 3
9999 mem: location 1037 is 3
9999 mem: storing 1 in location 1042
 103 run: break-if done?:boolean, 
9999 mem: location 1042 is 1
9999 run: jumping to instruction 19
 103 run: reply result:address:array:character
9999 mem: location 1039 is 1052
9999 run: result 0 is 1052
9999 mem: location 1019 is 1031
9999 mem: storing 1052 in location 1031
 102 run: start:number <- add end:number, 1:literal
9999 mem: location 1018 is 3
9999 mem: storing 4 in location 1017
 102 run: curr-result:number <- add curr-result:number, 1:literal
9999 mem: location 1016 is 1
9999 mem: storing 2 in location 1016
 102 run: loop 
9999 run: jumping to instruction 24
 102 run: done?:boolean <- greater-or-equal start:number, len:number
9999 mem: location 1017 is 4
9999 mem: location 1010 is 5
9999 mem: storing 0 in location 1015
 102 run: break-if done?:boolean, 
9999 mem: location 1015 is 0
9999 run: jump-if fell through
 102 run: end:number <- find-next s:address:array:character, delim:character, start:number
9999 mem: location 1008 is 1000
9999 mem: location 1009 is 47
9999 mem: location 1017 is 4
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 8
 103 run: text:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1022
 103 run: pattern:character <- next-ingredient 
9999 mem: storing 47 in location 1023
 103 run: idx:number <- next-ingredient 
9999 mem: storing 4 in location 1024
 103 run: len:number <- length text:address:array:character/deref
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1022 is 1000
9999 mem: storing 5 in location 1025
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1024 is 4
9999 mem: location 1025 is 5
9999 mem: storing 0 in location 1026
 103 run: break-if eof?:boolean, 
9999 mem: location 1026 is 0
9999 run: jump-if fell through
 103 run: curr:character <- index text:address:array:character/deref, idx:number
9999 mem: location 1022 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1024 is 4
9999 mem: location 1022 is 1000
9999 mem: location 1024 is 4
9999 run: address to copy is 1005
9999 run: its type is character
9999 mem: location 1005 is 99
9999 mem: storing 99 in location 1027
 103 run: found?:boolean <- equal curr:character, pattern:character
9999 mem: location 1027 is 99
9999 mem: location 1023 is 47
9999 mem: storing 0 in location 1028
 103 run: break-if found?:boolean, 
9999 mem: location 1028 is 0
9999 run: jump-if fell through
 103 run: idx:number <- add idx:number, 1:literal
9999 mem: location 1024 is 4
9999 mem: storing 5 in location 1024
 103 run: loop 
9999 run: jumping to instruction 6
 103 run: eof?:boolean <- greater-or-equal idx:number, len:number
9999 mem: location 1024 is 5
9999 mem: location 1025 is 5
9999 mem: storing 1 in location 1026
 103 run: break-if eof?:boolean, 
9999 mem: location 1026 is 1
9999 run: jumping to instruction 13
 103 run: reply idx:number
9999 mem: location 1024 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1018
 102 run: dest:address:address:array:character <- index-address result:address:array:address:array:character/deref, curr-result:number
9999 mem: location 1012 is 1029
9999 mem: location 1029 is 3
9999 mem: location 1030 is 1050
9999 mem: location 1031 is 1052
9999 mem: location 1032 is 0
9999 mem: location 1016 is 2
9999 mem: location 1012 is 1029
9999 mem: location 1016 is 2
9999 mem: storing 1032 in location 1019
 102 run: dest:address:address:array:character/deref <- string-copy s:address:array:character, start:number, end:number
9999 mem: location 1008 is 1000
9999 mem: location 1017 is 4
9999 mem: location 1018 is 5
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 11
 103 run: buf:address:array:character <- next-ingredient 
9999 mem: storing 1000 in location 1035
 103 run: start:number <- next-ingredient 
9999 mem: storing 4 in location 1036
 103 run: end:number <- next-ingredient 
9999 mem: storing 5 in location 1037
 103 run: len:number <- length buf:address:array:character/deref
9999 mem: location 1035 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1035 is 1000
9999 mem: storing 5 in location 1038
 103 run: end:number <- min len:number, end:number
9999 mem: location 1038 is 5
9999 mem: location 1037 is 5
 104 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 4
 104 run: x:number <- next-ingredient 
9999 mem: storing 5 in location 1047
 104 run: y:number <- next-ingredient 
9999 mem: storing 5 in location 1048
 104 run: return-x?:boolean <- lesser-than x:number, y:number
9999 mem: location 1047 is 5
9999 mem: location 1048 is 5
9999 mem: storing 0 in location 1049
 104 run: break-if return-x?:boolean, 
9999 mem: location 1049 is 0
9999 run: jump-if fell through
 104 run: reply y:number
9999 mem: location 1048 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1037
 103 run: len:number <- subtract end:number, start:number
9999 mem: location 1037 is 5
9999 mem: location 1036 is 4
9999 mem: storing 1 in location 1038
 103 run: result:address:array:character <- new character:type, len:number
9999 mem: location 1038 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1054
9999 mem: storing 1054 in location 1039
 103 run: src-idx:number <- copy start:number
9999 mem: location 1036 is 4
9999 mem: storing 4 in location 1040
 103 run: dest-idx:number <- copy 0:literal
9999 mem: storing 0 in location 1041
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1040 is 4
9999 mem: location 1037 is 5
9999 mem: storing 0 in location 1042
 103 run: break-if done?:boolean, 
9999 mem: location 1042 is 0
9999 run: jump-if fell through
 103 run: src:character <- index buf:address:array:character/deref, src-idx:number
9999 mem: location 1035 is 1000
9999 mem: location 1000 is 5
9999 mem: location 1001 is 97
9999 mem: location 1002 is 47
9999 mem: location 1003 is 98
9999 mem: location 1004 is 47
9999 mem: location 1005 is 99
9999 mem: location 1040 is 4
9999 mem: location 1035 is 1000
9999 mem: location 1040 is 4
9999 run: address to copy is 1005
9999 run: its type is character
9999 mem: location 1005 is 99
9999 mem: storing 99 in location 1043
 103 run: dest:address:character <- index-address result:address:array:character/deref, dest-idx:number
9999 mem: location 1039 is 1054
9999 mem: location 1054 is 1
9999 mem: location 1055 is 0
9999 mem: location 1041 is 0
9999 mem: location 1039 is 1054
9999 mem: location 1041 is 0
9999 mem: storing 1055 in location 1044
 103 run: dest:address:character/deref <- copy src:character
9999 mem: location 1043 is 99
9999 mem: location 1044 is 1055
9999 mem: storing 99 in location 1055
 103 run: src-idx:number <- add src-idx:number, 1:literal
9999 mem: location 1040 is 4
9999 mem: storing 5 in location 1040
 103 run: dest-idx:number <- add dest-idx:number, 1:literal
9999 mem: location 1041 is 0
9999 mem: storing 1 in location 1041
 103 run: loop 
9999 run: jumping to instruction 11
 103 run: done?:boolean <- greater-or-equal src-idx:number, end:number
9999 mem: location 1040 is 5
9999 mem: location 1037 is 5
9999 mem: storing 1 in location 1042
 103 run: break-if done?:boolean, 
9999 mem: location 1042 is 1
9999 run: jumping to instruction 19
 103 run: reply result:address:array:character
9999 mem: location 1039 is 1054
9999 run: result 0 is 1054
9999 mem: location 1019 is 1032
9999 mem: storing 1054 in location 1032
 102 run: start:number <- add end:number, 1:literal
9999 mem: location 1018 is 5
9999 mem: storing 6 in location 1017
 102 run: curr-result:number <- add curr-result:number, 1:literal
9999 mem: location 1016 is 2
9999 mem: storing 3 in location 1016
 102 run: loop 
9999 run: jumping to instruction 24
 102 run: done?:boolean <- greater-or-equal start:number, len:number
9999 mem: location 1017 is 6
9999 mem: location 1010 is 5
9999 mem: storing 1 in location 1015
 102 run: break-if done?:boolean, 
9999 mem: location 1015 is 1
9999 run: jumping to instruction 32
 102 run: reply result:address:array:address:array:character
9999 mem: location 1012 is 1029
9999 run: result 0 is 1029
9999 mem: storing 1029 in location 2
 101 run: 3:number <- length 2:address:array:address:array:character/deref
9999 mem: location 2 is 1029
9999 mem: location 1029 is 3
9999 mem: location 1030 is 1050
9999 mem: location 1031 is 1052
9999 mem: location 1032 is 1054
9999 mem: location 2 is 1029
9999 mem: storing 3 in location 3
 101 run: 4:address:array:character <- index 2:address:array:address:array:character/deref, 0:literal
9999 mem: location 2 is 1029
9999 mem: location 1029 is 3
9999 mem: location 1030 is 1050
9999 mem: location 1031 is 1052
9999 mem: location 1032 is 1054
9999 mem: location 2 is 1029
9999 run: address to copy is 1030
9999 run: its type is address
9999 mem: location 1030 is 1050
9999 mem: storing 1050 in location 4
 101 run: 5:address:array:character <- index 2:address:array:address:array:character/deref, 1:literal
9999 mem: location 2 is 1029
9999 mem: location 1029 is 3
9999 mem: location 1030 is 1050
9999 mem: location 1031 is 1052
9999 mem: location 1032 is 1054
9999 mem: location 2 is 1029
9999 run: address to copy is 1031
9999 run: its type is address
9999 mem: location 1031 is 1052
9999 mem: storing 1052 in location 5
 101 run: 6:address:array:character <- index 2:address:array:address:array:character/deref, 2:literal
9999 mem: location 2 is 1029
9999 mem: location 1029 is 3
9999 mem: location 1030 is 1050
9999 mem: location 1031 is 1052
9999 mem: location 1032 is 1054
9999 mem: location 2 is 1029
9999 run: address to copy is 1032
9999 run: its type is address
9999 mem: location 1032 is 1054
9999 mem: storing 1054 in location 6
 101 run: 10:array:character <- copy 4:address:array:character/deref
9999 mem: location 4 is 1050
9999 mem: location 1050 is 1
9999 mem: location 1051 is 97
9999 mem: storing 1 in location 10
9999 mem: storing 97 in location 11
 101 run: 20:array:character <- copy 5:address:array:character/deref
9999 mem: location 5 is 1052
9999 mem: location 1052 is 1
9999 mem: location 1053 is 98
9999 mem: storing 1 in location 20
9999 mem: storing 98 in location 21
 101 run: 30:array:character <- copy 6:address:array:character/deref
9999 mem: location 6 is 1054
9999 mem: location 1054 is 1
9999 mem: location 1055 is 99
9999 mem: storing 1 in location 30
9999 mem: storing 99 in location 31
 100 run: memory-should-contain [
    3 <- 3  # length of result
    10:string <- [a]
    20:string <- [b]
    30:string <- [c]
  ]
9999 run: checking location 3
9999 run: checking string length at 10
9999 run: checking location 11
9999 run: checking string length at 20
9999 run: checking location 21
9999 run: checking string length at 30
9999 run: checking location 31
