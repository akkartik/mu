9991 parse: --- defining scenario_buffer-append-handles-backspace
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    local-scope\n    x:address:shared:buffer <- new-buffer 3\n    x <- append x, 97  # 'a'\n    x <- append x, 98  # 'b'\n    x <- append x, 8/backspace\n    s:address:shared:array:character <- buffer-to-array x\n    1:array:character/raw <- copy *s\n  ": "literal-string"}
9992 load: after rewriting: run [
    local-scope
    x:address:shared:buffer <- new-buffer 3
    x <- append x, 97  # 'a'
    x <- append x, 98  # 'b'
    x <- append x, 8/backspace
    s:address:shared:array:character <- buffer-to-array x
    1:array:character/raw <- copy *s
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1 <- 1   # length\n    2 <- 97  # contents\n    3 <- 0\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    1 <- 1   # length
    2 <- 97  # contents
    3 <- 0
  ]
9999 parse: recipe scenario_buffer-append-handles-backspace has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_buffer-append-handles-backspace
9991 transform: --- deduce types for recipe scenario_buffer-append-handles-backspace
9991 transform: --- collect surrounding spaces for recipe scenario_buffer-append-handles-backspace
9991 transform: --- transform names for recipe scenario_buffer-append-handles-backspace
9991 transform: --- resolve ambiguous calls for recipe scenario_buffer-append-handles-backspace
9991 transform: --- compute instruction operations for recipe scenario_buffer-append-handles-backspace
9991 transform: --- transform braces for recipe scenario_buffer-append-handles-backspace
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_buffer-append-handles-backspace
9991 transform: --- type-check 'call' instructions inside recipe scenario_buffer-append-handles-backspace
9991 transform: --- type-check calls inside recipe scenario_buffer-append-handles-backspace
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_buffer-append-handles-backspace
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_buffer-append-handles-backspace
 102 run: run [
    local-scope
    x:address:shared:buffer <- new-buffer 3
    x <- append x, 97  # 'a'
    x <- append x, 98  # 'b'
    x <- append x, 8/backspace
    s:address:shared:array:character <- buffer-to-array x
    1:array:character/raw <- copy *s
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: new-buffer
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   product: {"x": <"address" : <"shared" : <"buffer" : <>>>>}
9992 load: after rewriting: x:address:shared:buffer <- new-buffer 3
9993 parse: instruction: append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <>}
9993 parse:   ingredient: {"97": "literal"}
9993 parse:   product: {"x": <>}
9992 load: after rewriting: x <- append x, 97
9993 parse: instruction: append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <>}
9993 parse:   ingredient: {"98": "literal"}
9993 parse:   product: {"x": <>}
9992 load: after rewriting: x <- append x, 98
9993 parse: instruction: append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <>}
9993 parse:   ingredient: {"8": "literal", "backspace": <>}
9993 parse:   product: {"x": <>}
9992 load: after rewriting: x <- append x, 8/backspace
9993 parse: instruction: buffer-to-array
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"x": <>}
9993 parse:   product: {"s": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 load: after rewriting: s:address:shared:array:character <- buffer-to-array x
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"s": <>, "lookup": <>}
9993 parse:   product: {"1": <"array" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 1:array:character/raw <- copy *s
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: x => <address : <shared : <buffer : <>>>>
9992 transform: x <= <address : <shared : <buffer : <>>>>
9992 transform: x <= <address : <shared : <buffer : <>>>>
9992 transform: x <= <address : <shared : <buffer : <>>>>
9992 transform: x <= <address : <shared : <buffer : <>>>>
9992 transform: x <= <address : <shared : <buffer : <>>>>
9992 transform: x <= <address : <shared : <buffer : <>>>>
9992 transform: x <= <address : <shared : <buffer : <>>>>
9992 transform: s => <address : <shared : <array : <character : <>>>>>
9992 transform: s <= <address : <shared : <array : <character : <>>>>>
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9993 name: assign x 1
9993 name: assign s 2
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction new-buffer
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 1000
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 0: 1000
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 990
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 990
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 990
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9992 transform: instruction buffer-to-array
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 1000
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 0: 1000
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: local-scope ...
9992 transform: new-buffer ...
9992 transform: append ...
9992 transform: append ...
9992 transform: append ...
9992 transform: buffer-to-array ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9992 new: size of "location" is 1
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1000
9999 mem: storing 3 in location 1001
 103 run: x:address:shared:buffer <- new-buffer 3
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1005
9999 mem: storing 5 in location 1006
 104 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 3 in location 1008
 104 run: result <- new buffer:type
9999 mem: allocating size 3
9999 mem: new alloc: 1012
9999 mem: storing 1012 in location 1009
9999 mem: incrementing refcount of 1012: 0 -> 1
 104 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1009 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1009 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1010
 104 run: *len:address:number <- copy 0
9999 mem: location 1010 is 1013
9999 mem: storing 0 in location 1013
 104 run: s:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1009 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1009 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1011
 104 run: *s <- new character:type, capacity
9999 mem: location 1008 is 3
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1015
9999 mem: storing 3 in location 1016
9999 mem: location 1011 is 1014
9999 mem: storing 1015 in location 1014
9999 mem: incrementing refcount of 1015: 0 -> 1
 104 run: reply result
9999 mem: location 1009 is 1012
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: storing 1012 in location 1003
9999 mem: incrementing refcount of 1012: 1 -> 2
 103 run: x <- append_2 x, 97
9999 mem: location 1003 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 mem: new alloc: 1020
9999 mem: storing 9 in location 1021
 104 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1023
9999 mem: incrementing refcount of 1012: 2 -> 3
 104 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 97 in location 1024
 104 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1025
 104 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1024 is 97
9999 mem: storing 0 in location 1026
 104 run: jump-unless backspace?, 
9999 mem: location 1026 is 0
9998 run: jumping to instruction 12
 104 run: full?:boolean <- buffer-full? in
9999 mem: location 1023 is 1012
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1031
9999 mem: storing 6 in location 1032
 105 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1034
9999 mem: incrementing refcount of 1012: 3 -> 4
 105 run: len:number <- get *in, length:offset
9999 mem: location 1034 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1034 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is number
9999 mem: location 1013 is 0
9999 mem: storing 0 in location 1035
 105 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1034 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1034 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1036
9999 mem: incrementing refcount of 1015: 1 -> 2
 105 run: capacity:number <- length *s
9999 mem: location 1036 is 1015
9999 mem: skipping refcount at 1015
9999 mem: storing 3 in location 1037
 105 run: result <- greater-or-equal len, capacity
9999 mem: location 1035 is 0
9999 mem: location 1037 is 3
9999 mem: storing 0 in location 1038
 105 run: reply result:boolean
9999 mem: location 1038 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1028
 104 run: jump-unless full?, 
9999 mem: location 1028 is 0
9998 run: jumping to instruction 17
 104 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1029
9999 mem: incrementing refcount of 1015: 2 -> 3
 104 run: dest:address:character <- index-address *s, *len
9999 mem: location 1029 is 1015
9999 mem: skipping refcount at 1015
9999 mem: location 1025 is 1013
9999 mem: location 1013 is 0
9999 mem: storing 1017 in location 1030
 104 run: *dest <- copy c
9999 mem: location 1024 is 97
9999 mem: location 1030 is 1017
9999 mem: storing 97 in location 1017
 104 run: *len <- add *len, 1
9999 mem: location 1025 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1025 is 1013
9999 mem: storing 1 in location 1013
 104 run: reply in:address:shared:buffer
9999 mem: location 1023 is 1012
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 4 -> 3
9999 mem: storing 1012 in location 1003
9999 mem: incrementing refcount of 1012: 3 -> 4
 103 run: x <- append_2 x, 98
9999 mem: location 1003 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 104 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1023
9999 mem: incrementing refcount of 1012: 4 -> 5
 104 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1024
 104 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1025
 104 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1024 is 98
9999 mem: storing 0 in location 1026
 104 run: jump-unless backspace?, 
9999 mem: location 1026 is 0
9998 run: jumping to instruction 12
 104 run: full?:boolean <- buffer-full? in
9999 mem: location 1023 is 1012
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 105 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1034
9999 mem: incrementing refcount of 1012: 5 -> 6
 105 run: len:number <- get *in, length:offset
9999 mem: location 1034 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1034 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is number
9999 mem: location 1013 is 1
9999 mem: storing 1 in location 1035
 105 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1034 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1034 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1036
9999 mem: incrementing refcount of 1015: 3 -> 4
 105 run: capacity:number <- length *s
9999 mem: location 1036 is 1015
9999 mem: skipping refcount at 1015
9999 mem: storing 3 in location 1037
 105 run: result <- greater-or-equal len, capacity
9999 mem: location 1035 is 1
9999 mem: location 1037 is 3
9999 mem: storing 0 in location 1038
 105 run: reply result:boolean
9999 mem: location 1038 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1028
 104 run: jump-unless full?, 
9999 mem: location 1028 is 0
9998 run: jumping to instruction 17
 104 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1029
9999 mem: incrementing refcount of 1015: 4 -> 5
 104 run: dest:address:character <- index-address *s, *len
9999 mem: location 1029 is 1015
9999 mem: skipping refcount at 1015
9999 mem: location 1025 is 1013
9999 mem: location 1013 is 1
9999 mem: storing 1018 in location 1030
 104 run: *dest <- copy c
9999 mem: location 1024 is 98
9999 mem: location 1030 is 1018
9999 mem: storing 98 in location 1018
 104 run: *len <- add *len, 1
9999 mem: location 1025 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1025 is 1013
9999 mem: storing 2 in location 1013
 104 run: reply in:address:shared:buffer
9999 mem: location 1023 is 1012
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 6 -> 5
9999 mem: storing 1012 in location 1003
9999 mem: incrementing refcount of 1012: 5 -> 6
 103 run: x <- append_2 x, 8/backspace
9999 mem: location 1003 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 104 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1023
9999 mem: incrementing refcount of 1012: 6 -> 7
 104 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 8 in location 1024
 104 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1025
 104 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1024 is 8
9999 mem: storing 1 in location 1026
 104 run: jump-unless backspace?, 
9999 mem: location 1026 is 1
9998 run: jump-unless fell through
 104 run: empty?:boolean <- lesser-or-equal *len, 0
9999 mem: location 1025 is 1013
9999 mem: location 1013 is 2
9999 mem: storing 0 in location 1027
 104 run: jump-unless empty?, 1:offset
9999 mem: location 1027 is 0
9998 run: jumping to instruction 10
 104 run: *len <- subtract *len, 1
9999 mem: location 1025 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1025 is 1013
9999 mem: storing 1 in location 1013
 104 run: reply in:address:shared:buffer
9999 mem: location 1023 is 1012
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: decrementing refcount of 1012: 7 -> 6
9999 mem: storing 1012 in location 1003
9999 mem: incrementing refcount of 1012: 6 -> 7
 103 run: s:address:shared:array:character <- buffer-to-array x
9999 mem: location 1003 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 104 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1012 in location 1023
9999 mem: incrementing refcount of 1012: 7 -> 8
 104 run: jump-if in, 
9999 mem: location 1023 is 1012
9998 run: jumping to instruction 5
 104 run: len:number <- get *in, length:offset
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1013
9998 run: its type is number
9999 mem: location 1013 is 1
9999 mem: storing 1 in location 1024
 104 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1023 is 1012
9999 mem: skipping refcount at 1012
9998 run: address to copy is 1014
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1025
9999 mem: incrementing refcount of 1015: 5 -> 6
 104 run: result <- new character:type, len
9999 mem: location 1024 is 1
9999 mem: array size is 1
9999 mem: allocating size 3
9999 mem: new alloc: 1039
9999 mem: storing 1 in location 1040
9999 mem: storing 1039 in location 1026
9999 mem: incrementing refcount of 1039: 0 -> 1
 104 run: i:number <- copy 0
9999 mem: storing 0 in location 1027
 104 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1027 is 0
9999 mem: location 1024 is 1
9999 mem: storing 0 in location 1028
 104 run: jump-if done?, 
9999 mem: location 1028 is 0
9998 run: jump-if fell through
 104 run: src:character <- index *s, i
9999 mem: location 1025 is 1015
9999 mem: skipping refcount at 1015
9998 run: base address is 1016
9999 mem: location 1027 is 0
9998 run: address to copy is 1017
9998 run: its type is character
9999 mem: location 1017 is 97
9999 mem: storing 97 in location 1029
 104 run: dest:address:character <- index-address *result, i
9999 mem: location 1026 is 1039
9999 mem: skipping refcount at 1039
9999 mem: location 1027 is 0
9999 mem: storing 1041 in location 1030
 104 run: *dest <- copy src
9999 mem: location 1029 is 97
9999 mem: location 1030 is 1041
9999 mem: storing 97 in location 1041
 104 run: i <- add i, 1
9999 mem: location 1027 is 0
9999 mem: storing 1 in location 1027
 104 run: jump 
9998 run: jumping to instruction 11
 104 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1027 is 1
9999 mem: location 1024 is 1
9999 mem: storing 1 in location 1028
 104 run: jump-if done?, 
9999 mem: location 1028 is 1
9998 run: jumping to instruction 18
 104 run: reply result:address:shared:array:character
9999 mem: location 1026 is 1039
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1039
9999 mem: storing 1039 in location 1004
9999 mem: incrementing refcount of 1039: 1 -> 2
 103 run: 1:array:character/raw <- copy *s
9999 mem: location 1004 is 1039
9999 mem: skipping refcount at 1039
9999 mem: location 1040 is 1
9999 mem: location 1041 is 97
9999 mem: storing 1 in location 1
9999 mem: storing 97 in location 2
 103 run: reply 
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    1 <- 1   # length
    2 <- 97  # contents
    3 <- 0
  ]
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
