9991 parse: --- defining scenario-buffer-append-works
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    local-scope\n    x:address:buffer <- new-buffer 3\n    s1:address:array:character <- get *x:address:buffer, data:offset\n    x:address:buffer <- append x:address:buffer, 97  # 'a'\n    x:address:buffer <- append x:address:buffer, 98  # 'b'\n    x:address:buffer <- append x:address:buffer, 99  # 'c'\n    s2:address:array:character <- get *x:address:buffer, data:offset\n    1:boolean/raw <- equal s1:address:array:character, s2:address:array:character\n    2:array:character/raw <- copy *s2:address:array:character\n    +buffer-filled\n    x:address:buffer <- append x:address:buffer, 100  # 'd'\n    s3:address:array:character <- get *x:address:buffer, data:offset\n    10:boolean/raw <- equal s1:address:array:character, s3:address:array:character\n    11:number/raw <- get *x:address:buffer, length:offset\n    12:array:character/raw <- copy *s3:address:array:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    local-scope
    x:address:buffer <- new-buffer 3
    s1:address:array:character <- get *x:address:buffer, data:offset
    x:address:buffer <- append x:address:buffer, 97  # 'a'
    x:address:buffer <- append x:address:buffer, 98  # 'b'
    x:address:buffer <- append x:address:buffer, 99  # 'c'
    s2:address:array:character <- get *x:address:buffer, data:offset
    1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
    2:array:character/raw <- copy *s2:address:array:character
    +buffer-filled
    x:address:buffer <- append x:address:buffer, 100  # 'd'
    s3:address:array:character <- get *x:address:buffer, data:offset
    10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
    11:number/raw <- get *x:address:buffer, length:offset
    12:array:character/raw <- copy *s3:address:array:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    # before +buffer-filled\n    1 <- 1   # no change in data pointer\n    2 <- 3   # size of data\n    3 <- 97  # data\n    4 <- 98\n    5 <- 99\n    # in the end\n    10 <- 0   # data pointer has grown\n    11 <- 4   # final length\n    12 <- 6   # but data's capacity has doubled\n    13 <- 97  # data\n    14 <- 98\n    15 <- 99\n    16 <- 100\n    17 <- 0\n    18 <- 0\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    # before +buffer-filled
    1 <- 1   # no change in data pointer
    2 <- 3   # size of data
    3 <- 97  # data
    4 <- 98
    5 <- 99
    # in the end
    10 <- 0   # data pointer has grown
    11 <- 4   # final length
    12 <- 6   # but data's capacity has doubled
    13 <- 97  # data
    14 <- 98
    15 <- 99
    16 <- 100
    17 <- 0
    18 <- 0
  ]
9999 parse: recipe scenario-buffer-append-works has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-buffer-append-works
9991 transform: --- deduce types for recipe scenario-buffer-append-works
9991 transform: --- resolve ambiguous calls for recipe scenario-buffer-append-works
9991 transform: --- compute instruction operations for recipe scenario-buffer-append-works
9991 transform: --- transform braces for recipe scenario-buffer-append-works
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe scenario-buffer-append-works
9991 transform: --- transform names for recipe scenario-buffer-append-works
9991 transform: --- perform checks for recipe scenario-buffer-append-works
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-buffer-append-works
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-buffer-append-works
 102 run: run [
    local-scope
    x:address:buffer <- new-buffer 3
    s1:address:array:character <- get *x:address:buffer, data:offset
    x:address:buffer <- append x:address:buffer, 97  # 'a'
    x:address:buffer <- append x:address:buffer, 98  # 'b'
    x:address:buffer <- append x:address:buffer, 99  # 'c'
    s2:address:array:character <- get *x:address:buffer, data:offset
    1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
    2:array:character/raw <- copy *s2:address:array:character
    +buffer-filled
    x:address:buffer <- append x:address:buffer, 100  # 'd'
    s3:address:array:character <- get *x:address:buffer, data:offset
    10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
    11:number/raw <- get *x:address:buffer, length:offset
    12:array:character/raw <- copy *s3:address:array:character
  ]
9991 parse: --- defining run1001
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: new-buffer
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   product: {"x": <"address" : <"buffer" : <>>>}
9992 load: after rewriting: x:address:buffer <- new-buffer 3
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"data": "offset"}
9993 parse:   product: {"s1": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: s1:address:array:character <- get *x:address:buffer, data:offset
9993 parse: instruction: append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>}
9993 parse:   ingredient: {"97": "literal"}
9993 parse:   product: {"x": <"address" : <"buffer" : <>>>}
9992 load: after rewriting: x:address:buffer <- append x:address:buffer, 97
9993 parse: instruction: append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>}
9993 parse:   ingredient: {"98": "literal"}
9993 parse:   product: {"x": <"address" : <"buffer" : <>>>}
9992 load: after rewriting: x:address:buffer <- append x:address:buffer, 98
9993 parse: instruction: append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>}
9993 parse:   ingredient: {"99": "literal"}
9993 parse:   product: {"x": <"address" : <"buffer" : <>>>}
9992 load: after rewriting: x:address:buffer <- append x:address:buffer, 99
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"data": "offset"}
9993 parse:   product: {"s2": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: s2:address:array:character <- get *x:address:buffer, data:offset
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"s1": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   ingredient: {"s2": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   product: {"1": "boolean", "raw": <>}
9992 load: after rewriting: 1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"s2": <"address" : <"array" : <"character" : <>>>>, "lookup": <>}
9993 parse:   product: {"2": <"array" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 2:array:character/raw <- copy *s2:address:array:character
9993 parse: label: +buffer-filled
9992 load: after rewriting: +buffer-filled
9993 parse: instruction: append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>}
9993 parse:   ingredient: {"100": "literal"}
9993 parse:   product: {"x": <"address" : <"buffer" : <>>>}
9992 load: after rewriting: x:address:buffer <- append x:address:buffer, 100
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"data": "offset"}
9993 parse:   product: {"s3": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: s3:address:array:character <- get *x:address:buffer, data:offset
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"s1": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   ingredient: {"s3": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   product: {"10": "boolean", "raw": <>}
9992 load: after rewriting: 10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"length": "offset"}
9993 parse:   product: {"11": "number", "raw": <>}
9992 load: after rewriting: 11:number/raw <- get *x:address:buffer, length:offset
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"s3": <"address" : <"array" : <"character" : <>>>>, "lookup": <>}
9993 parse:   product: {"12": <"array" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 12:array:character/raw <- copy *s3:address:array:character
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- deduce types for recipe run1001
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: x => <address : <buffer : <>>>
9992 transform: s1 => <address : <array : <character : <>>>>
9992 transform: s2 => <address : <array : <character : <>>>>
9992 transform: s3 => <address : <array : <character : <>>>>
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction new-buffer
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: checking variant 0: 100
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 1: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 4: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 1: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 4: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 1: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 4: -1
9992 transform: instruction equal
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 0: 100
9992 transform: checking variant 1: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 1: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 4: -1
9992 transform: instruction equal
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 0: 100
9992 transform: checking variant 1: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: local-scope ...
9992 transform: new-buffer ...
9992 transform: get ...
9992 transform: append ...
9992 transform: append ...
9992 transform: append ...
9992 transform: get ...
9992 transform: equal ...
9992 transform: copy ...
9992 transform: append ...
9992 transform: get ...
9992 transform: equal ...
9992 transform: get ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9993 name: assign x 1
9993 name: element data of type buffer is at offset 1
9993 name: assign s1 2
9993 name: element data of type buffer is at offset 1
9993 name: assign s2 3
9993 name: element data of type buffer is at offset 1
9993 name: assign s3 4
9993 name: element length of type buffer is at offset 0
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9992 new: size of "location" is 1
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1000
 103 run: x:address:buffer <- new-buffer 3
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1006
 104 run: capacity:number <- next-ingredient 
9999 mem: storing 3 in location 1008
 104 run: result <- new buffer:type
9999 mem: new alloc: 1012
9999 mem: storing 1012 in location 1009
 104 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1009 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1009 is 1012
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1010
 104 run: *len:address:number <- copy 0
9999 mem: location 1010 is 1012
9999 mem: storing 0 in location 1012
 104 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1009 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1009 is 1012
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1011
 104 run: *s <- new character:type, capacity
9999 mem: location 1008 is 3
9999 mem: array size is 3
9999 mem: new alloc: 1014
9999 mem: location 1011 is 1013
9999 mem: storing 1014 in location 1013
 104 run: reply result
9999 mem: location 1009 is 1012
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: storing 1012 in location 1002
 103 run: s1:address:array:character <- get *x:address:buffer, data:offset
9999 mem: location 1002 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1002 is 1012
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1003
 103 run: x:address:buffer <- append_2 x:address:buffer, 97
9999 mem: location 1002 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1018
 104 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1012 in location 1020
 104 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1021
 104 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1020 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1020 is 1012
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1022
 104 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1021 is 97
9999 mem: storing 0 in location 1023
 104 run: jump-unless backspace?, 
9999 mem: location 1023 is 0
9998 run: jumping to instruction 12
 104 run: full?:boolean <- buffer-full? in
9999 mem: location 1020 is 1012
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1028
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1012 in location 1030
 105 run: len:number <- get *in, length:offset
9999 mem: location 1030 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1030 is 1012
9998 run: address to copy is 1012
9998 run: its type is number
9999 mem: location 1012 is 0
9999 mem: storing 0 in location 1031
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1030 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1030 is 1012
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1032
 105 run: capacity:number <- length *s
9999 mem: location 1032 is 1014
9999 mem: storing 3 in location 1033
 105 run: result <- greater-or-equal len, capacity
9999 mem: location 1031 is 0
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1034
 105 run: reply result:boolean
9999 mem: location 1034 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1025
 104 run: jump-unless full?, 
9999 mem: location 1025 is 0
9998 run: jumping to instruction 17
 104 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1020 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1020 is 1012
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1026
 104 run: dest:address:character <- index-address *s, *len
9999 mem: location 1026 is 1014
9999 mem: location 1022 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 1015 in location 1027
 104 run: *dest <- copy c
9999 mem: location 1021 is 97
9999 mem: location 1027 is 1015
9999 mem: storing 97 in location 1015
 104 run: *len <- add *len, 1
9999 mem: location 1022 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1022 is 1012
9999 mem: storing 1 in location 1012
 104 run: reply in:address:buffer
9999 mem: location 1020 is 1012
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: storing 1012 in location 1002
 103 run: x:address:buffer <- append_2 x:address:buffer, 98
9999 mem: location 1002 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 104 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1012 in location 1020
 104 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 1021
 104 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1020 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1020 is 1012
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1022
 104 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1021 is 98
9999 mem: storing 0 in location 1023
 104 run: jump-unless backspace?, 
9999 mem: location 1023 is 0
9998 run: jumping to instruction 12
 104 run: full?:boolean <- buffer-full? in
9999 mem: location 1020 is 1012
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1012 in location 1030
 105 run: len:number <- get *in, length:offset
9999 mem: location 1030 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1030 is 1012
9998 run: address to copy is 1012
9998 run: its type is number
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1031
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1030 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1030 is 1012
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1032
 105 run: capacity:number <- length *s
9999 mem: location 1032 is 1014
9999 mem: storing 3 in location 1033
 105 run: result <- greater-or-equal len, capacity
9999 mem: location 1031 is 1
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1034
 105 run: reply result:boolean
9999 mem: location 1034 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1025
 104 run: jump-unless full?, 
9999 mem: location 1025 is 0
9998 run: jumping to instruction 17
 104 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1020 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1020 is 1012
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1026
 104 run: dest:address:character <- index-address *s, *len
9999 mem: location 1026 is 1014
9999 mem: location 1022 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 1016 in location 1027
 104 run: *dest <- copy c
9999 mem: location 1021 is 98
9999 mem: location 1027 is 1016
9999 mem: storing 98 in location 1016
 104 run: *len <- add *len, 1
9999 mem: location 1022 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1022 is 1012
9999 mem: storing 2 in location 1012
 104 run: reply in:address:buffer
9999 mem: location 1020 is 1012
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: storing 1012 in location 1002
 103 run: x:address:buffer <- append_2 x:address:buffer, 99
9999 mem: location 1002 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 104 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1012 in location 1020
 104 run: c:character <- next-ingredient 
9999 mem: storing 99 in location 1021
 104 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1020 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1020 is 1012
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1022
 104 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1021 is 99
9999 mem: storing 0 in location 1023
 104 run: jump-unless backspace?, 
9999 mem: location 1023 is 0
9998 run: jumping to instruction 12
 104 run: full?:boolean <- buffer-full? in
9999 mem: location 1020 is 1012
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1012 in location 1030
 105 run: len:number <- get *in, length:offset
9999 mem: location 1030 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1030 is 1012
9998 run: address to copy is 1012
9998 run: its type is number
9999 mem: location 1012 is 2
9999 mem: storing 2 in location 1031
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1030 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1030 is 1012
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1032
 105 run: capacity:number <- length *s
9999 mem: location 1032 is 1014
9999 mem: storing 3 in location 1033
 105 run: result <- greater-or-equal len, capacity
9999 mem: location 1031 is 2
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1034
 105 run: reply result:boolean
9999 mem: location 1034 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1025
 104 run: jump-unless full?, 
9999 mem: location 1025 is 0
9998 run: jumping to instruction 17
 104 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1020 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1013 is 1014
9999 mem: location 1020 is 1012
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1026
 104 run: dest:address:character <- index-address *s, *len
9999 mem: location 1026 is 1014
9999 mem: location 1022 is 1012
9999 mem: location 1012 is 2
9999 mem: storing 1017 in location 1027
 104 run: *dest <- copy c
9999 mem: location 1021 is 99
9999 mem: location 1027 is 1017
9999 mem: storing 99 in location 1017
 104 run: *len <- add *len, 1
9999 mem: location 1022 is 1012
9999 mem: location 1012 is 2
9999 mem: location 1022 is 1012
9999 mem: storing 3 in location 1012
 104 run: reply in:address:buffer
9999 mem: location 1020 is 1012
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: storing 1012 in location 1002
 103 run: s2:address:array:character <- get *x:address:buffer, data:offset
9999 mem: location 1002 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1002 is 1012
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1004
 103 run: 1:boolean/raw <- equal_2 s1:address:array:character, s2:address:array:character
9999 mem: location 1003 is 1014
9999 mem: location 1004 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: new alloc: 1035
 104 run: a:address:array:character <- next-ingredient 
9999 mem: storing 1014 in location 1037
 104 run: b:address:array:character <- next-ingredient 
9999 mem: storing 1014 in location 1038
 104 run: a-len:number <- length *a
9999 mem: location 1037 is 1014
9999 mem: storing 3 in location 1039
 104 run: b-len:number <- length *b
9999 mem: location 1038 is 1014
9999 mem: storing 3 in location 1040
 104 run: trace 99, [text-equal], [comparing lengths]
  99 text-equal: comparing lengths 
 104 run: length-equal?:boolean <- equal a-len, b-len
9999 mem: location 1039 is 3
9999 mem: location 1040 is 3
9999 mem: storing 1 in location 1041
 104 run: jump-if length-equal?, 
9999 mem: location 1041 is 1
9998 run: jumping to instruction 10
 104 run: trace 99, [text-equal], [comparing characters]
  99 text-equal: comparing characters 
 104 run: i:number <- copy 0
9999 mem: storing 0 in location 1042
 104 run: done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1042 is 0
9999 mem: location 1039 is 3
9999 mem: storing 0 in location 1043
 104 run: jump-if done?, 
9999 mem: location 1043 is 0
9998 run: jump-if fell through
 104 run: a2:character <- index *a, i
9999 mem: location 1037 is 1014
9999 mem: location 1042 is 0
9998 run: address to copy is 1015
9998 run: its type is character
9999 mem: location 1015 is 97
9999 mem: storing 97 in location 1044
 104 run: b2:character <- index *b, i
9999 mem: location 1038 is 1014
9999 mem: location 1042 is 0
9998 run: address to copy is 1015
9998 run: its type is character
9999 mem: location 1015 is 97
9999 mem: storing 97 in location 1045
 104 run: chars-match?:boolean <- equal a2, b2
9999 mem: location 1044 is 97
9999 mem: location 1045 is 97
9999 mem: storing 1 in location 1046
 104 run: jump-if chars-match?, 
9999 mem: location 1046 is 1
9998 run: jumping to instruction 22
 104 run: i <- add i, 1
9999 mem: location 1042 is 0
9999 mem: storing 1 in location 1042
 104 run: jump 
9998 run: jumping to instruction 14
 104 run: done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1042 is 1
9999 mem: location 1039 is 3
9999 mem: storing 0 in location 1043
 104 run: jump-if done?, 
9999 mem: location 1043 is 0
9998 run: jump-if fell through
 104 run: a2:character <- index *a, i
9999 mem: location 1037 is 1014
9999 mem: location 1042 is 1
9998 run: address to copy is 1016
9998 run: its type is character
9999 mem: location 1016 is 98
9999 mem: storing 98 in location 1044
 104 run: b2:character <- index *b, i
9999 mem: location 1038 is 1014
9999 mem: location 1042 is 1
9998 run: address to copy is 1016
9998 run: its type is character
9999 mem: location 1016 is 98
9999 mem: storing 98 in location 1045
 104 run: chars-match?:boolean <- equal a2, b2
9999 mem: location 1044 is 98
9999 mem: location 1045 is 98
9999 mem: storing 1 in location 1046
 104 run: jump-if chars-match?, 
9999 mem: location 1046 is 1
9998 run: jumping to instruction 22
 104 run: i <- add i, 1
9999 mem: location 1042 is 1
9999 mem: storing 2 in location 1042
 104 run: jump 
9998 run: jumping to instruction 14
 104 run: done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1042 is 2
9999 mem: location 1039 is 3
9999 mem: storing 0 in location 1043
 104 run: jump-if done?, 
9999 mem: location 1043 is 0
9998 run: jump-if fell through
 104 run: a2:character <- index *a, i
9999 mem: location 1037 is 1014
9999 mem: location 1042 is 2
9998 run: address to copy is 1017
9998 run: its type is character
9999 mem: location 1017 is 99
9999 mem: storing 99 in location 1044
 104 run: b2:character <- index *b, i
9999 mem: location 1038 is 1014
9999 mem: location 1042 is 2
9998 run: address to copy is 1017
9998 run: its type is character
9999 mem: location 1017 is 99
9999 mem: storing 99 in location 1045
 104 run: chars-match?:boolean <- equal a2, b2
9999 mem: location 1044 is 99
9999 mem: location 1045 is 99
9999 mem: storing 1 in location 1046
 104 run: jump-if chars-match?, 
9999 mem: location 1046 is 1
9998 run: jumping to instruction 22
 104 run: i <- add i, 1
9999 mem: location 1042 is 2
9999 mem: storing 3 in location 1042
 104 run: jump 
9998 run: jumping to instruction 14
 104 run: done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1042 is 3
9999 mem: location 1039 is 3
9999 mem: storing 1 in location 1043
 104 run: jump-if done?, 
9999 mem: location 1043 is 1
9998 run: jumping to instruction 25
 104 run: reply 1
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1
9999 mem: storing 1 in location 1
 103 run: 2:array:character/raw <- copy *s2:address:array:character
9999 mem: location 1004 is 1014
9999 mem: location 1014 is 3
9999 mem: location 1015 is 97
9999 mem: location 1016 is 98
9999 mem: location 1017 is 99
9999 mem: storing 3 in location 2
9999 mem: storing 97 in location 3
9999 mem: storing 98 in location 4
9999 mem: storing 99 in location 5
 103 run: x:address:buffer <- append_2 x:address:buffer, 100
9999 mem: location 1002 is 1012
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 104 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1012 in location 1020
 104 run: c:character <- next-ingredient 
9999 mem: storing 100 in location 1021
 104 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1020 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1020 is 1012
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1022
 104 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1021 is 100
9999 mem: storing 0 in location 1023
 104 run: jump-unless backspace?, 
9999 mem: location 1023 is 0
9998 run: jumping to instruction 12
 104 run: full?:boolean <- buffer-full? in
9999 mem: location 1020 is 1012
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1012 in location 1030
 105 run: len:number <- get *in, length:offset
9999 mem: location 1030 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1030 is 1012
9998 run: address to copy is 1012
9998 run: its type is number
9999 mem: location 1012 is 3
9999 mem: storing 3 in location 1031
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1030 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1030 is 1012
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1032
 105 run: capacity:number <- length *s
9999 mem: location 1032 is 1014
9999 mem: storing 3 in location 1033
 105 run: result <- greater-or-equal len, capacity
9999 mem: location 1031 is 3
9999 mem: location 1033 is 3
9999 mem: storing 1 in location 1034
 105 run: reply result:boolean
9999 mem: location 1034 is 1
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1025
 104 run: jump-unless full?, 
9999 mem: location 1025 is 1
9998 run: jump-unless fell through
 104 run: in <- grow-buffer in
9999 mem: location 1020 is 1012
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1047
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1012 in location 1049
 105 run: x:address:address:array:character <- get-address *in, data:offset
9999 mem: location 1049 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1049 is 1012
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1050
 105 run: oldlen:number <- length **x
9999 mem: location 1050 is 1013
9999 mem: location 1013 is 1014
9999 mem: storing 3 in location 1051
 105 run: newlen:number <- multiply oldlen, 2
9999 mem: location 1051 is 3
9999 mem: storing 6 in location 1052
 105 run: olddata:address:array:character <- copy *x
9999 mem: location 1050 is 1013
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1053
 105 run: *x <- new character:type, newlen
9999 mem: location 1052 is 6
9999 mem: array size is 6
9999 mem: location 1050 is 1013
9999 mem: storing 1028 in location 1013
 105 run: i:number <- copy 0
9999 mem: storing 0 in location 1054
 105 run: done?:boolean <- greater-or-equal i, oldlen
9999 mem: location 1054 is 0
9999 mem: location 1051 is 3
9999 mem: storing 0 in location 1055
 105 run: jump-if done?, 
9999 mem: location 1055 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *olddata, i
9999 mem: location 1053 is 1014
9999 mem: location 1054 is 0
9998 run: address to copy is 1015
9998 run: its type is character
9999 mem: location 1015 is 97
9999 mem: storing 97 in location 1056
 105 run: dest:address:character <- index-address **x, i
9999 mem: location 1050 is 1013
9999 mem: location 1013 is 1028
9999 mem: location 1054 is 0
9999 mem: storing 1029 in location 1057
 105 run: *dest <- copy src
9999 mem: location 1056 is 97
9999 mem: location 1057 is 1029
9999 mem: storing 97 in location 1029
 105 run: i <- add i, 1
9999 mem: location 1054 is 0
9999 mem: storing 1 in location 1054
 105 run: jump 
9998 run: jumping to instruction 9
 105 run: done?:boolean <- greater-or-equal i, oldlen
9999 mem: location 1054 is 1
9999 mem: location 1051 is 3
9999 mem: storing 0 in location 1055
 105 run: jump-if done?, 
9999 mem: location 1055 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *olddata, i
9999 mem: location 1053 is 1014
9999 mem: location 1054 is 1
9998 run: address to copy is 1016
9998 run: its type is character
9999 mem: location 1016 is 98
9999 mem: storing 98 in location 1056
 105 run: dest:address:character <- index-address **x, i
9999 mem: location 1050 is 1013
9999 mem: location 1013 is 1028
9999 mem: location 1054 is 1
9999 mem: storing 1030 in location 1057
 105 run: *dest <- copy src
9999 mem: location 1056 is 98
9999 mem: location 1057 is 1030
9999 mem: storing 98 in location 1030
 105 run: i <- add i, 1
9999 mem: location 1054 is 1
9999 mem: storing 2 in location 1054
 105 run: jump 
9998 run: jumping to instruction 9
 105 run: done?:boolean <- greater-or-equal i, oldlen
9999 mem: location 1054 is 2
9999 mem: location 1051 is 3
9999 mem: storing 0 in location 1055
 105 run: jump-if done?, 
9999 mem: location 1055 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *olddata, i
9999 mem: location 1053 is 1014
9999 mem: location 1054 is 2
9998 run: address to copy is 1017
9998 run: its type is character
9999 mem: location 1017 is 99
9999 mem: storing 99 in location 1056
 105 run: dest:address:character <- index-address **x, i
9999 mem: location 1050 is 1013
9999 mem: location 1013 is 1028
9999 mem: location 1054 is 2
9999 mem: storing 1031 in location 1057
 105 run: *dest <- copy src
9999 mem: location 1056 is 99
9999 mem: location 1057 is 1031
9999 mem: storing 99 in location 1031
 105 run: i <- add i, 1
9999 mem: location 1054 is 2
9999 mem: storing 3 in location 1054
 105 run: jump 
9998 run: jumping to instruction 9
 105 run: done?:boolean <- greater-or-equal i, oldlen
9999 mem: location 1054 is 3
9999 mem: location 1051 is 3
9999 mem: storing 1 in location 1055
 105 run: jump-if done?, 
9999 mem: location 1055 is 1
9998 run: jumping to instruction 16
 105 run: reply in:address:buffer
9999 mem: location 1049 is 1012
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1012
9999 mem: storing 1012 in location 1020
 104 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1020 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1028
9999 mem: location 1020 is 1012
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1013 is 1028
9999 mem: storing 1028 in location 1026
 104 run: dest:address:character <- index-address *s, *len
9999 mem: location 1026 is 1028
9999 mem: location 1022 is 1012
9999 mem: location 1012 is 3
9999 mem: storing 1032 in location 1027
 104 run: *dest <- copy c
9999 mem: location 1021 is 100
9999 mem: location 1027 is 1032
9999 mem: storing 100 in location 1032
 104 run: *len <- add *len, 1
9999 mem: location 1022 is 1012
9999 mem: location 1012 is 3
9999 mem: location 1022 is 1012
9999 mem: storing 4 in location 1012
 104 run: reply in:address:buffer
9999 mem: location 1020 is 1012
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1012
9999 mem: storing 1012 in location 1002
 103 run: s3:address:array:character <- get *x:address:buffer, data:offset
9999 mem: location 1002 is 1012
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1028
9999 mem: location 1002 is 1012
9998 run: address to copy is 1013
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1013 is 1028
9999 mem: storing 1028 in location 1005
 103 run: 10:boolean/raw <- equal_2 s1:address:array:character, s3:address:array:character
9999 mem: location 1003 is 1014
9999 mem: location 1005 is 1028
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
 104 run: a:address:array:character <- next-ingredient 
9999 mem: storing 1014 in location 1037
 104 run: b:address:array:character <- next-ingredient 
9999 mem: storing 1028 in location 1038
 104 run: a-len:number <- length *a
9999 mem: location 1037 is 1014
9999 mem: storing 3 in location 1039
 104 run: b-len:number <- length *b
9999 mem: location 1038 is 1028
9999 mem: storing 6 in location 1040
 104 run: trace 99, [text-equal], [comparing lengths]
  99 text-equal: comparing lengths 
 104 run: length-equal?:boolean <- equal a-len, b-len
9999 mem: location 1039 is 3
9999 mem: location 1040 is 6
9999 mem: storing 0 in location 1041
 104 run: jump-if length-equal?, 
9999 mem: location 1041 is 0
9998 run: jump-if fell through
 104 run: reply 0
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 10
 103 run: 11:number/raw <- get *x:address:buffer, length:offset
9999 mem: location 1002 is 1012
9999 mem: location 1012 is 4
9999 mem: location 1013 is 1028
9999 mem: location 1002 is 1012
9998 run: address to copy is 1012
9998 run: its type is number
9999 mem: location 1012 is 4
9999 mem: storing 4 in location 11
 103 run: 12:array:character/raw <- copy *s3:address:array:character
9999 mem: location 1005 is 1028
9999 mem: location 1028 is 6
9999 mem: location 1029 is 97
9999 mem: location 1030 is 98
9999 mem: location 1031 is 99
9999 mem: location 1032 is 100
9999 mem: location 1033 is 0
9999 mem: location 1034 is 0
9999 mem: storing 6 in location 12
9999 mem: storing 97 in location 13
9999 mem: storing 98 in location 14
9999 mem: storing 99 in location 15
9999 mem: storing 100 in location 16
9999 mem: storing 0 in location 17
9999 mem: storing 0 in location 18
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    # before +buffer-filled
    1 <- 1   # no change in data pointer
    2 <- 3   # size of data
    3 <- 97  # data
    4 <- 98
    5 <- 99
    # in the end
    10 <- 0   # data pointer has grown
    11 <- 4   # final length
    12 <- 6   # but data's capacity has doubled
    13 <- 97  # data
    14 <- 98
    15 <- 99
    16 <- 100
    17 <- 0
    18 <- 0
  ]
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
9999 run: checking location 14
9999 run: checking location 15
9999 run: checking location 16
9999 run: checking location 17
9999 run: checking location 18
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
