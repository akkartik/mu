parse: instruction: run
parse:   ingredient: {name: "\n    local-scope\n    x:address:buffer <- new-buffer 3\n    s1:address:array:character <- get x:address:buffer/deref, data:offset\n    x:address:buffer <- buffer-append x:address:buffer, 97  # 'a'\n    x:address:buffer <- buffer-append x:address:buffer, 98  # 'b'\n    x:address:buffer <- buffer-append x:address:buffer, 99  # 'c'\n    s2:address:array:character <- get x:address:buffer/deref, data:offset\n    1:boolean/raw <- equal s1:address:array:character, s2:address:array:character\n    2:array:character/raw <- copy s2:address:array:character/deref\n    +buffer-filled\n    x:address:buffer <- buffer-append x:address:buffer, 100  # 'd'\n    s3:address:array:character <- get x:address:buffer/deref, data:offset\n    10:boolean/raw <- equal s1:address:array:character, s3:address:array:character\n    11:number/raw <- get x:address:buffer/deref, length:offset\n    12:array:character/raw <- copy s3:address:array:character/deref\n  ", properties: [_: "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "\n    # before +buffer-filled\n    1 <- 1   # no change in data pointer\n    2 <- 3   # size of data\n    3 <- 97  # data\n    4 <- 98\n    5 <- 99\n    # in the end\n    10 <- 0   # data pointer has grown\n    11 <- 4   # final length\n    12 <- 6   # but data's capacity has doubled\n    13 <- 97  # data\n    14 <- 98\n    15 <- 99\n    16 <- 100\n    17 <- 0\n    18 <- 0\n  ", properties: [_: "literal-string"]}
after-brace: recipe scenario-buffer-append-works
after-brace: run ...
after-brace: memory-should-contain ...
9999 new: routine allocated memory from 1000 to 101000
schedule: scenario-buffer-append-works
 101 run: run [
    local-scope
    x:address:buffer <- new-buffer 3
    s1:address:array:character <- get x:address:buffer/deref, data:offset
    x:address:buffer <- buffer-append x:address:buffer, 97  # 'a'
    x:address:buffer <- buffer-append x:address:buffer, 98  # 'b'
    x:address:buffer <- buffer-append x:address:buffer, 99  # 'c'
    s2:address:array:character <- get x:address:buffer/deref, data:offset
    1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
    2:array:character/raw <- copy s2:address:array:character/deref
    +buffer-filled
    x:address:buffer <- buffer-append x:address:buffer, 100  # 'd'
    s3:address:array:character <- get x:address:buffer/deref, data:offset
    10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
    11:number/raw <- get x:address:buffer/deref, length:offset
    12:array:character/raw <- copy s3:address:array:character/deref
  ]
parse: instruction: local-scope
parse: instruction: new-buffer
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse:   product: {name: "x", properties: ["x": "address":"buffer"]}
parse: instruction: get
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer", "deref": ]}
parse:   ingredient: {name: "data", properties: ["data": "offset"]}
parse:   product: {name: "s1", properties: ["s1": "address":"array":"character"]}
parse: instruction: buffer-append
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer"]}
parse:   ingredient: {name: "97", properties: ["97": "literal"]}
parse:   product: {name: "x", properties: ["x": "address":"buffer"]}
parse: instruction: buffer-append
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer"]}
parse:   ingredient: {name: "98", properties: ["98": "literal"]}
parse:   product: {name: "x", properties: ["x": "address":"buffer"]}
parse: instruction: buffer-append
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer"]}
parse:   ingredient: {name: "99", properties: ["99": "literal"]}
parse:   product: {name: "x", properties: ["x": "address":"buffer"]}
parse: instruction: get
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer", "deref": ]}
parse:   ingredient: {name: "data", properties: ["data": "offset"]}
parse:   product: {name: "s2", properties: ["s2": "address":"array":"character"]}
parse: instruction: equal
parse:   ingredient: {name: "s1", properties: ["s1": "address":"array":"character"]}
parse:   ingredient: {name: "s2", properties: ["s2": "address":"array":"character"]}
parse:   product: {name: "1", properties: ["1": "boolean", "raw": ]}
parse: instruction: copy
parse:   ingredient: {name: "s2", properties: ["s2": "address":"array":"character", "deref": ]}
parse:   product: {name: "2", properties: ["2": "array":"character", "raw": ]}
parse: label: +buffer-filled
parse: instruction: buffer-append
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer"]}
parse:   ingredient: {name: "100", properties: ["100": "literal"]}
parse:   product: {name: "x", properties: ["x": "address":"buffer"]}
parse: instruction: get
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer", "deref": ]}
parse:   ingredient: {name: "data", properties: ["data": "offset"]}
parse:   product: {name: "s3", properties: ["s3": "address":"array":"character"]}
parse: instruction: equal
parse:   ingredient: {name: "s1", properties: ["s1": "address":"array":"character"]}
parse:   ingredient: {name: "s3", properties: ["s3": "address":"array":"character"]}
parse:   product: {name: "10", properties: ["10": "boolean", "raw": ]}
parse: instruction: get
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer", "deref": ]}
parse:   ingredient: {name: "length", properties: ["length": "offset"]}
parse:   product: {name: "11", properties: ["11": "number", "raw": ]}
parse: instruction: copy
parse:   ingredient: {name: "s3", properties: ["s3": "address":"array":"character", "deref": ]}
parse:   product: {name: "12", properties: ["12": "array":"character", "raw": ]}
9999 new: location -> location
name: assign x 1
name: element data of type buffer is at offset 1
name: assign s1 2
name: element data of type buffer is at offset 1
name: assign s2 3
name: element data of type buffer is at offset 1
name: assign s3 4
name: element length of type buffer is at offset 0
after-brace: recipe run1001
after-brace: local-scope ...
after-brace: new-buffer ...
after-brace: get ...
after-brace: buffer-append ...
after-brace: buffer-append ...
after-brace: buffer-append ...
after-brace: get ...
after-brace: equal ...
after-brace: copy ...
after-brace: buffer-append ...
after-brace: get ...
after-brace: equal ...
after-brace: get ...
after-brace: copy ...
 101 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1000
 101 run: x:address:buffer <- new-buffer 3
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1006
 102 run: result:address:buffer <- new buffer:type
9999 mem: new alloc: 1013
9999 mem: storing 1013 in location 1008
 102 run: len:address:number <- get-address result:address:buffer/deref, length:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1008 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1009
 102 run: len:address:number/deref <- copy 0
9999 mem: location 1009 is 1013
9999 mem: storing 0 in location 1013
 102 run: s:address:address:array:character <- get-address result:address:buffer/deref, data:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1008 is 1013
9999 run: address to copy is 1014
9999 mem: storing 1014 in location 1010
 102 run: capacity:number, found?:boolean <- next-ingredient 
9999 mem: storing 3 in location 1011
9999 mem: storing 1 in location 1012
 102 run: assert found?:boolean, [new-buffer must get a capacity argument]
9999 mem: location 1012 is 1
 102 run: s:address:address:array:character/deref <- new character:type, capacity:number
9999 mem: location 1011 is 3
9999 mem: array size is 3
9999 mem: new alloc: 1015
9999 mem: location 1010 is 1014
9999 mem: storing 1015 in location 1014
 102 run: reply result:address:buffer
9999 mem: location 1008 is 1013
9999 run: result 0 is 1013
9999 mem: storing 1013 in location 1002
 101 run: s1:address:array:character <- get x:address:buffer/deref, data:offset
9999 mem: location 1002 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1002 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1003
 101 run: x:address:buffer <- buffer-append x:address:buffer, 97
9999 mem: location 1002 is 1013
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1019
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1021
 102 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1022
 102 run: len:address:number <- get-address in:address:buffer/deref, length:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1023
 102 run: backspace?:boolean <- equal c:character, 8/backspace
9999 mem: location 1022 is 97
9999 mem: storing 0 in location 1024
 102 run: break-unless backspace?:boolean, 
9999 mem: location 1024 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 1021 is 1013
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1008
 103 run: len:number <- get in:address:buffer/deref, length:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9999 run: address to copy is 1013
9999 run: its type is number
9999 mem: location 1013 is 0
9999 mem: storing 0 in location 1009
 103 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1010
 103 run: capacity:number <- length s:address:array:character/deref
9999 mem: location 1010 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1010 is 1015
9999 mem: storing 3 in location 1011
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 1009 is 0
9999 mem: location 1011 is 3
9999 mem: storing 0 in location 1012
 103 run: reply result:boolean
9999 mem: location 1012 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1026
 102 run: break-unless full?:boolean, 
9999 mem: location 1026 is 0
9999 run: jumping to instruction 17
 102 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1027
 102 run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
9999 mem: location 1027 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 0
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1027 is 1015
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 0
9999 mem: storing 1016 in location 1028
 102 run: dest:address:character/deref <- copy c:character
9999 mem: location 1022 is 97
9999 mem: location 1028 is 1016
9999 mem: storing 97 in location 1016
 102 run: len:address:number/deref <- add len:address:number/deref, 1
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1023 is 1013
9999 mem: storing 1 in location 1013
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 1021 is 1013
9999 run: result 0 is 1013
9999 mem: storing 1013 in location 1002
 101 run: x:address:buffer <- buffer-append x:address:buffer, 98
9999 mem: location 1002 is 1013
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1021
 102 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 1022
 102 run: len:address:number <- get-address in:address:buffer/deref, length:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1023
 102 run: backspace?:boolean <- equal c:character, 8/backspace
9999 mem: location 1022 is 98
9999 mem: storing 0 in location 1024
 102 run: break-unless backspace?:boolean, 
9999 mem: location 1024 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 1021 is 1013
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1008
 103 run: len:number <- get in:address:buffer/deref, length:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9999 run: address to copy is 1013
9999 run: its type is number
9999 mem: location 1013 is 1
9999 mem: storing 1 in location 1009
 103 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1010
 103 run: capacity:number <- length s:address:array:character/deref
9999 mem: location 1010 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 97
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1010 is 1015
9999 mem: storing 3 in location 1011
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 1009 is 1
9999 mem: location 1011 is 3
9999 mem: storing 0 in location 1012
 103 run: reply result:boolean
9999 mem: location 1012 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1026
 102 run: break-unless full?:boolean, 
9999 mem: location 1026 is 0
9999 run: jumping to instruction 17
 102 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1027
 102 run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
9999 mem: location 1027 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 97
9999 mem: location 1017 is 0
9999 mem: location 1018 is 0
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1027 is 1015
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 1
9999 mem: storing 1017 in location 1028
 102 run: dest:address:character/deref <- copy c:character
9999 mem: location 1022 is 98
9999 mem: location 1028 is 1017
9999 mem: storing 98 in location 1017
 102 run: len:address:number/deref <- add len:address:number/deref, 1
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1023 is 1013
9999 mem: storing 2 in location 1013
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 1021 is 1013
9999 run: result 0 is 1013
9999 mem: storing 1013 in location 1002
 101 run: x:address:buffer <- buffer-append x:address:buffer, 99
9999 mem: location 1002 is 1013
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1021
 102 run: c:character <- next-ingredient 
9999 mem: storing 99 in location 1022
 102 run: len:address:number <- get-address in:address:buffer/deref, length:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1023
 102 run: backspace?:boolean <- equal c:character, 8/backspace
9999 mem: location 1022 is 99
9999 mem: storing 0 in location 1024
 102 run: break-unless backspace?:boolean, 
9999 mem: location 1024 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 1021 is 1013
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1008
 103 run: len:number <- get in:address:buffer/deref, length:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9999 run: address to copy is 1013
9999 run: its type is number
9999 mem: location 1013 is 2
9999 mem: storing 2 in location 1009
 103 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1010
 103 run: capacity:number <- length s:address:array:character/deref
9999 mem: location 1010 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 97
9999 mem: location 1017 is 98
9999 mem: location 1018 is 0
9999 mem: location 1010 is 1015
9999 mem: storing 3 in location 1011
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 1009 is 2
9999 mem: location 1011 is 3
9999 mem: storing 0 in location 1012
 103 run: reply result:boolean
9999 mem: location 1012 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1026
 102 run: break-unless full?:boolean, 
9999 mem: location 1026 is 0
9999 run: jumping to instruction 17
 102 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1027
 102 run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
9999 mem: location 1027 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 97
9999 mem: location 1017 is 98
9999 mem: location 1018 is 0
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1027 is 1015
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 2
9999 mem: storing 1018 in location 1028
 102 run: dest:address:character/deref <- copy c:character
9999 mem: location 1022 is 99
9999 mem: location 1028 is 1018
9999 mem: storing 99 in location 1018
 102 run: len:address:number/deref <- add len:address:number/deref, 1
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1023 is 1013
9999 mem: storing 3 in location 1013
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 1021 is 1013
9999 run: result 0 is 1013
9999 mem: storing 1013 in location 1002
 101 run: s2:address:array:character <- get x:address:buffer/deref, data:offset
9999 mem: location 1002 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 1002 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1004
 101 run: 1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
9999 mem: location 1003 is 1015
9999 mem: location 1004 is 1015
9999 mem: storing 1 in location 1
 101 run: 2:array:character/raw <- copy s2:address:array:character/deref
9999 mem: location 1004 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 97
9999 mem: location 1017 is 98
9999 mem: location 1018 is 99
9999 mem: storing 3 in location 2
9999 mem: storing 97 in location 3
9999 mem: storing 98 in location 4
9999 mem: storing 99 in location 5
 101 run: x:address:buffer <- buffer-append x:address:buffer, 100
9999 mem: location 1002 is 1013
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 9
 102 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1021
 102 run: c:character <- next-ingredient 
9999 mem: storing 100 in location 1022
 102 run: len:address:number <- get-address in:address:buffer/deref, length:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9999 run: address to copy is 1013
9999 mem: storing 1013 in location 1023
 102 run: backspace?:boolean <- equal c:character, 8/backspace
9999 mem: location 1022 is 100
9999 mem: storing 0 in location 1024
 102 run: break-unless backspace?:boolean, 
9999 mem: location 1024 is 0
9999 run: jumping to instruction 12
 102 run: full?:boolean <- buffer-full? in:address:buffer
9999 mem: location 1021 is 1013
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1008
 103 run: len:number <- get in:address:buffer/deref, length:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9999 run: address to copy is 1013
9999 run: its type is number
9999 mem: location 1013 is 3
9999 mem: storing 3 in location 1009
 103 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1010
 103 run: capacity:number <- length s:address:array:character/deref
9999 mem: location 1010 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 97
9999 mem: location 1017 is 98
9999 mem: location 1018 is 99
9999 mem: location 1010 is 1015
9999 mem: storing 3 in location 1011
 103 run: result:boolean <- greater-or-equal len:number, capacity:number
9999 mem: location 1009 is 3
9999 mem: location 1011 is 3
9999 mem: storing 1 in location 1012
 103 run: reply result:boolean
9999 mem: location 1012 is 1
9999 run: result 0 is 1
9999 mem: storing 1 in location 1026
 102 run: break-unless full?:boolean, 
9999 mem: location 1026 is 1
9999 run: jump-unless fell through
 102 run: in:address:buffer <- grow-buffer in:address:buffer
9999 mem: location 1021 is 1013
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1029
 103 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1031
 103 run: x:address:address:array:character <- get-address in:address:buffer/deref, data:offset
9999 mem: location 1031 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 1031 is 1013
9999 run: address to copy is 1014
9999 mem: storing 1014 in location 1032
 103 run: oldlen:number <- length x:address:address:array:character/deref/deref
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 97
9999 mem: location 1017 is 98
9999 mem: location 1018 is 99
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1015
9999 mem: storing 3 in location 1033
 103 run: newlen:number <- multiply oldlen:number, 2
9999 mem: location 1033 is 3
9999 mem: storing 6 in location 1034
 103 run: olddata:address:array:character <- copy x:address:address:array:character/deref
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1035
 103 run: x:address:address:array:character/deref <- new character:type, newlen:number
9999 mem: location 1034 is 6
9999 mem: array size is 6
9999 mem: location 1032 is 1014
9999 mem: storing 1006 in location 1014
 103 run: i:number <- copy 0
9999 mem: storing 0 in location 1036
 103 run: done?:boolean <- greater-or-equal i:number, oldlen:number
9999 mem: location 1036 is 0
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1037
 103 run: break-if done?:boolean, 
9999 mem: location 1037 is 0
9999 run: jump-if fell through
 103 run: src:character <- index olddata:address:array:character/deref, i:number
9999 mem: location 1035 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 97
9999 mem: location 1017 is 98
9999 mem: location 1018 is 99
9999 mem: location 1036 is 0
9999 mem: location 1035 is 1015
9999 mem: location 1036 is 0
9999 run: address to copy is 1016
9999 run: its type is character
9999 mem: location 1016 is 97
9999 mem: storing 97 in location 1038
 103 run: dest:address:character <- index-address x:address:address:array:character/deref/deref, i:number
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1006
9999 mem: location 1006 is 6
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1036 is 0
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1006
9999 mem: location 1036 is 0
9999 mem: storing 1007 in location 1039
 103 run: dest:address:character/deref <- copy src:character
9999 mem: location 1038 is 97
9999 mem: location 1039 is 1007
9999 mem: storing 97 in location 1007
 103 run: i:number <- add i:number, 1
9999 mem: location 1036 is 0
9999 mem: storing 1 in location 1036
 103 run: loop 
9999 run: jumping to instruction 9
 103 run: done?:boolean <- greater-or-equal i:number, oldlen:number
9999 mem: location 1036 is 1
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1037
 103 run: break-if done?:boolean, 
9999 mem: location 1037 is 0
9999 run: jump-if fell through
 103 run: src:character <- index olddata:address:array:character/deref, i:number
9999 mem: location 1035 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 97
9999 mem: location 1017 is 98
9999 mem: location 1018 is 99
9999 mem: location 1036 is 1
9999 mem: location 1035 is 1015
9999 mem: location 1036 is 1
9999 run: address to copy is 1017
9999 run: its type is character
9999 mem: location 1017 is 98
9999 mem: storing 98 in location 1038
 103 run: dest:address:character <- index-address x:address:address:array:character/deref/deref, i:number
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1006
9999 mem: location 1006 is 6
9999 mem: location 1007 is 97
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1036 is 1
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1006
9999 mem: location 1036 is 1
9999 mem: storing 1008 in location 1039
 103 run: dest:address:character/deref <- copy src:character
9999 mem: location 1038 is 98
9999 mem: location 1039 is 1008
9999 mem: storing 98 in location 1008
 103 run: i:number <- add i:number, 1
9999 mem: location 1036 is 1
9999 mem: storing 2 in location 1036
 103 run: loop 
9999 run: jumping to instruction 9
 103 run: done?:boolean <- greater-or-equal i:number, oldlen:number
9999 mem: location 1036 is 2
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1037
 103 run: break-if done?:boolean, 
9999 mem: location 1037 is 0
9999 run: jump-if fell through
 103 run: src:character <- index olddata:address:array:character/deref, i:number
9999 mem: location 1035 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 97
9999 mem: location 1017 is 98
9999 mem: location 1018 is 99
9999 mem: location 1036 is 2
9999 mem: location 1035 is 1015
9999 mem: location 1036 is 2
9999 run: address to copy is 1018
9999 run: its type is character
9999 mem: location 1018 is 99
9999 mem: storing 99 in location 1038
 103 run: dest:address:character <- index-address x:address:address:array:character/deref/deref, i:number
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1006
9999 mem: location 1006 is 6
9999 mem: location 1007 is 97
9999 mem: location 1008 is 98
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1036 is 2
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1006
9999 mem: location 1036 is 2
9999 mem: storing 1009 in location 1039
 103 run: dest:address:character/deref <- copy src:character
9999 mem: location 1038 is 99
9999 mem: location 1039 is 1009
9999 mem: storing 99 in location 1009
 103 run: i:number <- add i:number, 1
9999 mem: location 1036 is 2
9999 mem: storing 3 in location 1036
 103 run: loop 
9999 run: jumping to instruction 9
 103 run: done?:boolean <- greater-or-equal i:number, oldlen:number
9999 mem: location 1036 is 3
9999 mem: location 1033 is 3
9999 mem: storing 1 in location 1037
 103 run: break-if done?:boolean, 
9999 mem: location 1037 is 1
9999 run: jumping to instruction 16
 103 run: reply in:address:buffer
9999 mem: location 1031 is 1013
9999 run: result 0 is 1013
9999 mem: storing 1013 in location 1021
 102 run: s:address:array:character <- get in:address:buffer/deref, data:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1006
9999 mem: location 1021 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1006
9999 mem: storing 1006 in location 1027
 102 run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
9999 mem: location 1027 is 1006
9999 mem: location 1006 is 6
9999 mem: location 1007 is 97
9999 mem: location 1008 is 98
9999 mem: location 1009 is 99
9999 mem: location 1010 is 0
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1027 is 1006
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 3
9999 mem: storing 1010 in location 1028
 102 run: dest:address:character/deref <- copy c:character
9999 mem: location 1022 is 100
9999 mem: location 1028 is 1010
9999 mem: storing 100 in location 1010
 102 run: len:address:number/deref <- add len:address:number/deref, 1
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1023 is 1013
9999 mem: storing 4 in location 1013
 102 run: reply in:address:buffer/same-as-ingredient:0
9999 mem: location 1021 is 1013
9999 run: result 0 is 1013
9999 mem: storing 1013 in location 1002
 101 run: s3:address:array:character <- get x:address:buffer/deref, data:offset
9999 mem: location 1002 is 1013
9999 mem: location 1013 is 4
9999 mem: location 1014 is 1006
9999 mem: location 1002 is 1013
9999 run: address to copy is 1014
9999 run: its type is address
9999 mem: location 1014 is 1006
9999 mem: storing 1006 in location 1005
 101 run: 10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
9999 mem: location 1003 is 1015
9999 mem: location 1005 is 1006
9999 mem: storing 0 in location 10
 101 run: 11:number/raw <- get x:address:buffer/deref, length:offset
9999 mem: location 1002 is 1013
9999 mem: location 1013 is 4
9999 mem: location 1014 is 1006
9999 mem: location 1002 is 1013
9999 run: address to copy is 1013
9999 run: its type is number
9999 mem: location 1013 is 4
9999 mem: storing 4 in location 11
 101 run: 12:array:character/raw <- copy s3:address:array:character/deref
9999 mem: location 1005 is 1006
9999 mem: location 1006 is 6
9999 mem: location 1007 is 97
9999 mem: location 1008 is 98
9999 mem: location 1009 is 99
9999 mem: location 1010 is 100
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: storing 6 in location 12
9999 mem: storing 97 in location 13
9999 mem: storing 98 in location 14
9999 mem: storing 99 in location 15
9999 mem: storing 100 in location 16
9999 mem: storing 0 in location 17
9999 mem: storing 0 in location 18
 100 run: memory-should-contain [
    # before +buffer-filled
    1 <- 1   # no change in data pointer
    2 <- 3   # size of data
    3 <- 97  # data
    4 <- 98
    5 <- 99
    # in the end
    10 <- 0   # data pointer has grown
    11 <- 4   # final length
    12 <- 6   # but data's capacity has doubled
    13 <- 97  # data
    14 <- 98
    15 <- 99
    16 <- 100
    17 <- 0
    18 <- 0
  ]
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
9999 run: checking location 14
9999 run: checking location 15
9999 run: checking location 16
9999 run: checking location 17
9999 run: checking location 18
