9991 parse: --- defining scenario-buffer-append-works
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    local-scope\n    x:address:buffer <- new-buffer 3\n    s1:address:array:character <- get *x:address:buffer, data:offset\n    x:address:buffer <- buffer-append x:address:buffer, 97  # 'a'\n    x:address:buffer <- buffer-append x:address:buffer, 98  # 'b'\n    x:address:buffer <- buffer-append x:address:buffer, 99  # 'c'\n    s2:address:array:character <- get *x:address:buffer, data:offset\n    1:boolean/raw <- equal s1:address:array:character, s2:address:array:character\n    2:array:character/raw <- copy *s2:address:array:character\n    +buffer-filled\n    x:address:buffer <- buffer-append x:address:buffer, 100  # 'd'\n    s3:address:array:character <- get *x:address:buffer, data:offset\n    10:boolean/raw <- equal s1:address:array:character, s3:address:array:character\n    11:number/raw <- get *x:address:buffer, length:offset\n    12:array:character/raw <- copy *s3:address:array:character\n  ": "literal-string"}
9992 load: after rewriting: run [
    local-scope
    x:address:buffer <- new-buffer 3
    s1:address:array:character <- get *x:address:buffer, data:offset
    x:address:buffer <- buffer-append x:address:buffer, 97  # 'a'
    x:address:buffer <- buffer-append x:address:buffer, 98  # 'b'
    x:address:buffer <- buffer-append x:address:buffer, 99  # 'c'
    s2:address:array:character <- get *x:address:buffer, data:offset
    1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
    2:array:character/raw <- copy *s2:address:array:character
    +buffer-filled
    x:address:buffer <- buffer-append x:address:buffer, 100  # 'd'
    s3:address:array:character <- get *x:address:buffer, data:offset
    10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
    11:number/raw <- get *x:address:buffer, length:offset
    12:array:character/raw <- copy *s3:address:array:character
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    # before +buffer-filled\n    1 <- 1   # no change in data pointer\n    2 <- 3   # size of data\n    3 <- 97  # data\n    4 <- 98\n    5 <- 99\n    # in the end\n    10 <- 0   # data pointer has grown\n    11 <- 4   # final length\n    12 <- 6   # but data's capacity has doubled\n    13 <- 97  # data\n    14 <- 98\n    15 <- 99\n    16 <- 100\n    17 <- 0\n    18 <- 0\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    # before +buffer-filled
    1 <- 1   # no change in data pointer
    2 <- 3   # size of data
    3 <- 97  # data
    4 <- 98
    5 <- 99
    # in the end
    10 <- 0   # data pointer has grown
    11 <- 4   # final length
    12 <- 6   # but data's capacity has doubled
    13 <- 97  # data
    14 <- 98
    15 <- 99
    16 <- 100
    17 <- 0
    18 <- 0
  ]
9999 parse: recipe scenario-buffer-append-works has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-buffer-append-works
9991 transform: --- transform braces for recipe scenario-buffer-append-works
9992 transform: run ...
9992 transform: memory-should-contain ...
9991 transform: --- deduce types for recipe scenario-buffer-append-works
9991 transform: --- resolve ambiguous calls for recipe scenario-buffer-append-works
9991 transform: --- collect surrounding spaces for recipe scenario-buffer-append-works
9991 transform: --- transform names for recipe scenario-buffer-append-works
9991 transform: --- compute instruction operations for recipe scenario-buffer-append-works
9991 transform: --- perform checks for recipe scenario-buffer-append-works
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-buffer-append-works
9991 transform: --- parsing any uninitialized reagents as integers
9991 transform: --- checking type and type_name pointers for recipe string-equal
9991 transform: --- checking type and type_name pointers for recipe new-buffer
9991 transform: --- checking type and type_name pointers for recipe grow-buffer
9991 transform: --- checking type and type_name pointers for recipe buffer-full?
9991 transform: --- checking type and type_name pointers for recipe buffer-append
9991 transform: --- checking type and type_name pointers for recipe integer-to-decimal-string
9991 transform: --- checking type and type_name pointers for recipe buffer-to-array
9991 transform: --- checking type and type_name pointers for recipe string-append
9991 transform: --- checking type and type_name pointers for recipe string-replace
9991 transform: --- checking type and type_name pointers for recipe interpolate
9991 transform: --- checking type and type_name pointers for recipe space?
9991 transform: --- checking type and type_name pointers for recipe trim
9991 transform: --- checking type and type_name pointers for recipe find-next
9991 transform: --- checking type and type_name pointers for recipe find-substring
9991 transform: --- checking type and type_name pointers for recipe match-at
9991 transform: --- checking type and type_name pointers for recipe split
9991 transform: --- checking type and type_name pointers for recipe split-first
9991 transform: --- checking type and type_name pointers for recipe string-copy
9991 transform: --- checking type and type_name pointers for recipe min
9991 transform: --- checking type and type_name pointers for recipe max
9991 transform: --- checking type and type_name pointers for recipe new-channel
9991 transform: --- checking type and type_name pointers for recipe write
9991 transform: --- checking type and type_name pointers for recipe read
9991 transform: --- checking type and type_name pointers for recipe clear-channel
9991 transform: --- checking type and type_name pointers for recipe channel-empty?
9991 transform: --- checking type and type_name pointers for recipe channel-full?
9991 transform: --- checking type and type_name pointers for recipe channel-capacity
9991 transform: --- checking type and type_name pointers for recipe buffer-lines
9991 transform: --- checking type and type_name pointers for recipe new-array
9991 transform: --- checking type and type_name pointers for recipe force-specialization-list-number
9991 transform: --- checking type and type_name pointers for recipe force-specialization-duplex-list-character
9991 transform: --- checking type and type_name pointers for recipe new-stream
9991 transform: --- checking type and type_name pointers for recipe rewind-stream
9991 transform: --- checking type and type_name pointers for recipe read-line
9991 transform: --- checking type and type_name pointers for recipe end-of-stream?
9991 transform: --- checking type and type_name pointers for recipe new-fake-screen
9991 transform: --- checking type and type_name pointers for recipe clear-screen
9991 transform: --- checking type and type_name pointers for recipe sync-screen
9991 transform: --- checking type and type_name pointers for recipe fake-screen-is-empty?
9991 transform: --- checking type and type_name pointers for recipe print-character
9991 transform: --- checking type and type_name pointers for recipe clear-line
9991 transform: --- checking type and type_name pointers for recipe cursor-position
9991 transform: --- checking type and type_name pointers for recipe move-cursor
9991 transform: --- checking type and type_name pointers for recipe cursor-down
9991 transform: --- checking type and type_name pointers for recipe cursor-up
9991 transform: --- checking type and type_name pointers for recipe cursor-right
9991 transform: --- checking type and type_name pointers for recipe cursor-left
9991 transform: --- checking type and type_name pointers for recipe cursor-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe cursor-to-next-line
9991 transform: --- checking type and type_name pointers for recipe screen-width
9991 transform: --- checking type and type_name pointers for recipe screen-height
9991 transform: --- checking type and type_name pointers for recipe hide-cursor
9991 transform: --- checking type and type_name pointers for recipe show-cursor
9991 transform: --- checking type and type_name pointers for recipe hide-screen
9991 transform: --- checking type and type_name pointers for recipe show-screen
9991 transform: --- checking type and type_name pointers for recipe print-string
9991 transform: --- checking type and type_name pointers for recipe print-integer
9991 transform: --- checking type and type_name pointers for recipe new-fake-console
9991 transform: --- checking type and type_name pointers for recipe read-event
9991 transform: --- checking type and type_name pointers for recipe read-key
9991 transform: --- checking type and type_name pointers for recipe send-keys-to-channel
9991 transform: --- checking type and type_name pointers for recipe wait-for-event
9991 transform: --- checking type and type_name pointers for recipe has-more-events?
9991 transform: --- checking type and type_name pointers for recipe push_2
9991 transform: --- checking type and type_name pointers for recipe first_2
9991 transform: --- checking type and type_name pointers for recipe rest_2
9991 transform: --- checking type and type_name pointers for recipe push-duplex_2
9991 transform: --- checking type and type_name pointers for recipe first-duplex_2
9991 transform: --- checking type and type_name pointers for recipe next-duplex_2
9991 transform: --- checking type and type_name pointers for recipe prev-duplex_2
9991 transform: --- checking type and type_name pointers for recipe insert-duplex_2
9991 transform: --- checking type and type_name pointers for recipe remove-duplex_2
9991 transform: --- checking type and type_name pointers for recipe remove-duplex-between_2
9991 transform: --- checking type and type_name pointers for recipe insert-duplex-range_2
9991 transform: --- checking type and type_name pointers for recipe append-duplex_2
9991 transform: --- checking type and type_name pointers for recipe last-duplex_2
9991 transform: --- checking type and type_name pointers for recipe sandbox
9991 transform: --- checking type and type_name pointers for recipe main_2
9991 transform: --- checking type and type_name pointers for recipe new-editor
9991 transform: --- checking type and type_name pointers for recipe insert-text
9991 transform: --- checking type and type_name pointers for recipe render
9991 transform: --- checking type and type_name pointers for recipe clear-line-delimited
9991 transform: --- checking type and type_name pointers for recipe clear-screen-from
9991 transform: --- checking type and type_name pointers for recipe clear-rest-of-screen
9991 transform: --- checking type and type_name pointers for recipe get-color
9991 transform: --- checking type and type_name pointers for recipe editor-event-loop
9991 transform: --- checking type and type_name pointers for recipe move-cursor-in-editor
9991 transform: --- checking type and type_name pointers for recipe snap-cursor
9991 transform: --- checking type and type_name pointers for recipe handle-keyboard-event
9991 transform: --- checking type and type_name pointers for recipe insert-at-cursor
9991 transform: --- checking type and type_name pointers for recipe editor-render
9991 transform: --- checking type and type_name pointers for recipe insert-new-line-and-indent
9991 transform: --- checking type and type_name pointers for recipe line-indent
9991 transform: --- checking type and type_name pointers for recipe draw-horizontal
9991 transform: --- checking type and type_name pointers for recipe delete-before-cursor
9991 transform: --- checking type and type_name pointers for recipe move-cursor-coordinates-left
9991 transform: --- checking type and type_name pointers for recipe previous-line-length
9991 transform: --- checking type and type_name pointers for recipe delete-at-cursor
9991 transform: --- checking type and type_name pointers for recipe move-cursor-coordinates-right
9991 transform: --- checking type and type_name pointers for recipe move-to-previous-line
9991 transform: --- checking type and type_name pointers for recipe move-to-next-line
9991 transform: --- checking type and type_name pointers for recipe move-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe move-to-end-of-line
9991 transform: --- checking type and type_name pointers for recipe delete-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe delete-to-end-of-line
9991 transform: --- checking type and type_name pointers for recipe before-start-of-next-line
9991 transform: --- checking type and type_name pointers for recipe before-previous-line
9991 transform: --- checking type and type_name pointers for recipe page-down
9991 transform: --- checking type and type_name pointers for recipe page-up
9991 transform: --- checking type and type_name pointers for recipe new-programming-environment
9991 transform: --- checking type and type_name pointers for recipe event-loop
9991 transform: --- checking type and type_name pointers for recipe resize
9991 transform: --- checking type and type_name pointers for recipe render-all
9991 transform: --- checking type and type_name pointers for recipe render-recipes
9991 transform: --- checking type and type_name pointers for recipe render-sandbox-side
9991 transform: --- checking type and type_name pointers for recipe update-cursor
9991 transform: --- checking type and type_name pointers for recipe render-string
9991 transform: --- checking type and type_name pointers for recipe render-code-string
9991 transform: --- checking type and type_name pointers for recipe maximize
9991 transform: --- checking type and type_name pointers for recipe draw-vertical
9991 transform: --- checking type and type_name pointers for recipe run-sandboxes
9991 transform: --- checking type and type_name pointers for recipe update-recipes
9991 transform: --- checking type and type_name pointers for recipe update-sandbox
9991 transform: --- checking type and type_name pointers for recipe update-status
9991 transform: --- checking type and type_name pointers for recipe save-sandboxes
9991 transform: --- checking type and type_name pointers for recipe render-sandboxes
9991 transform: --- checking type and type_name pointers for recipe restore-sandboxes
9991 transform: --- checking type and type_name pointers for recipe render-screen
9991 transform: --- checking type and type_name pointers for recipe editor-contents
9991 transform: --- checking type and type_name pointers for recipe empty-editor?
9991 transform: --- checking type and type_name pointers for recipe extract-sandbox
9991 transform: --- checking type and type_name pointers for recipe delete-sandbox
9991 transform: --- checking type and type_name pointers for recipe find-click-in-sandbox-output
9991 transform: --- checking type and type_name pointers for recipe toggle-expected-response
9991 transform: --- checking type and type_name pointers for recipe find-click-in-sandbox-code
9991 transform: --- checking type and type_name pointers for recipe add-operation
9991 transform: --- checking type and type_name pointers for recipe first_3
9991 transform: --- checking type and type_name pointers for recipe rest_3
9991 transform: --- checking type and type_name pointers for recipe push_3
9991 transform: --- checking type and type_name pointers for recipe scenario-buffer-append-works
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-buffer-append-works
 102 run: run [
    local-scope
    x:address:buffer <- new-buffer 3
    s1:address:array:character <- get *x:address:buffer, data:offset
    x:address:buffer <- buffer-append x:address:buffer, 97  # 'a'
    x:address:buffer <- buffer-append x:address:buffer, 98  # 'b'
    x:address:buffer <- buffer-append x:address:buffer, 99  # 'c'
    s2:address:array:character <- get *x:address:buffer, data:offset
    1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
    2:array:character/raw <- copy *s2:address:array:character
    +buffer-filled
    x:address:buffer <- buffer-append x:address:buffer, 100  # 'd'
    s3:address:array:character <- get *x:address:buffer, data:offset
    10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
    11:number/raw <- get *x:address:buffer, length:offset
    12:array:character/raw <- copy *s3:address:array:character
  ]
9991 parse: --- defining run1001
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: new-buffer
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   product: {"x": <"address" : <"buffer" : <>>>}
9992 load: after rewriting: x:address:buffer <- new-buffer 3
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"data": "offset"}
9993 parse:   product: {"s1": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: s1:address:array:character <- get *x:address:buffer, data:offset
9993 parse: instruction: buffer-append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>}
9993 parse:   ingredient: {"97": "literal"}
9993 parse:   product: {"x": <"address" : <"buffer" : <>>>}
9992 load: after rewriting: x:address:buffer <- buffer-append x:address:buffer, 97
9993 parse: instruction: buffer-append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>}
9993 parse:   ingredient: {"98": "literal"}
9993 parse:   product: {"x": <"address" : <"buffer" : <>>>}
9992 load: after rewriting: x:address:buffer <- buffer-append x:address:buffer, 98
9993 parse: instruction: buffer-append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>}
9993 parse:   ingredient: {"99": "literal"}
9993 parse:   product: {"x": <"address" : <"buffer" : <>>>}
9992 load: after rewriting: x:address:buffer <- buffer-append x:address:buffer, 99
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"data": "offset"}
9993 parse:   product: {"s2": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: s2:address:array:character <- get *x:address:buffer, data:offset
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"s1": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   ingredient: {"s2": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   product: {"1": "boolean", "raw": <>}
9992 load: after rewriting: 1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"s2": <"address" : <"array" : <"character" : <>>>>, "lookup": <>}
9993 parse:   product: {"2": <"array" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 2:array:character/raw <- copy *s2:address:array:character
9993 parse: label: +buffer-filled
9992 load: after rewriting: +buffer-filled
9993 parse: instruction: buffer-append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>}
9993 parse:   ingredient: {"100": "literal"}
9993 parse:   product: {"x": <"address" : <"buffer" : <>>>}
9992 load: after rewriting: x:address:buffer <- buffer-append x:address:buffer, 100
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"data": "offset"}
9993 parse:   product: {"s3": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: s3:address:array:character <- get *x:address:buffer, data:offset
9993 parse: instruction: equal
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"s1": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   ingredient: {"s3": <"address" : <"array" : <"character" : <>>>>}
9993 parse:   product: {"10": "boolean", "raw": <>}
9992 load: after rewriting: 10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
9993 parse: instruction: get
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"x": <"address" : <"buffer" : <>>>, "lookup": <>}
9993 parse:   ingredient: {"length": "offset"}
9993 parse:   product: {"11": "number", "raw": <>}
9992 load: after rewriting: 11:number/raw <- get *x:address:buffer, length:offset
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"s3": <"address" : <"array" : <"character" : <>>>>, "lookup": <>}
9993 parse:   product: {"12": <"array" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 12:array:character/raw <- copy *s3:address:array:character
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: local-scope ...
9992 transform: new-buffer ...
9992 transform: get ...
9992 transform: buffer-append ...
9992 transform: buffer-append ...
9992 transform: buffer-append ...
9992 transform: get ...
9992 transform: equal ...
9992 transform: copy ...
9992 transform: buffer-append ...
9992 transform: get ...
9992 transform: equal ...
9992 transform: get ...
9992 transform: copy ...
9991 transform: --- deduce types for recipe run1001
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: x => <address : <buffer : <>>>
9992 transform: s1 => <address : <array : <character : <>>>>
9992 transform: s2 => <address : <array : <character : <>>>>
9992 transform: s3 => <address : <array : <character : <>>>>
9991 transform: --- resolve ambiguous calls for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9993 name: assign x 1
9993 name: element data of type buffer is at offset 1
9993 name: assign s1 2
9993 name: element data of type buffer is at offset 1
9993 name: assign s2 3
9993 name: element data of type buffer is at offset 1
9993 name: assign s3 4
9993 name: element length of type buffer is at offset 0
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9992 new: size of "location" is 1
9991 transform: --- parsing any uninitialized reagents as integers
9991 transform: --- checking type and type_name pointers for recipe string-equal
9991 transform: --- checking type and type_name pointers for recipe new-buffer
9991 transform: --- checking type and type_name pointers for recipe grow-buffer
9991 transform: --- checking type and type_name pointers for recipe buffer-full?
9991 transform: --- checking type and type_name pointers for recipe buffer-append
9991 transform: --- checking type and type_name pointers for recipe integer-to-decimal-string
9991 transform: --- checking type and type_name pointers for recipe buffer-to-array
9991 transform: --- checking type and type_name pointers for recipe string-append
9991 transform: --- checking type and type_name pointers for recipe string-replace
9991 transform: --- checking type and type_name pointers for recipe interpolate
9991 transform: --- checking type and type_name pointers for recipe space?
9991 transform: --- checking type and type_name pointers for recipe trim
9991 transform: --- checking type and type_name pointers for recipe find-next
9991 transform: --- checking type and type_name pointers for recipe find-substring
9991 transform: --- checking type and type_name pointers for recipe match-at
9991 transform: --- checking type and type_name pointers for recipe split
9991 transform: --- checking type and type_name pointers for recipe split-first
9991 transform: --- checking type and type_name pointers for recipe string-copy
9991 transform: --- checking type and type_name pointers for recipe min
9991 transform: --- checking type and type_name pointers for recipe max
9991 transform: --- checking type and type_name pointers for recipe new-channel
9991 transform: --- checking type and type_name pointers for recipe write
9991 transform: --- checking type and type_name pointers for recipe read
9991 transform: --- checking type and type_name pointers for recipe clear-channel
9991 transform: --- checking type and type_name pointers for recipe channel-empty?
9991 transform: --- checking type and type_name pointers for recipe channel-full?
9991 transform: --- checking type and type_name pointers for recipe channel-capacity
9991 transform: --- checking type and type_name pointers for recipe buffer-lines
9991 transform: --- checking type and type_name pointers for recipe new-array
9991 transform: --- checking type and type_name pointers for recipe force-specialization-list-number
9991 transform: --- checking type and type_name pointers for recipe force-specialization-duplex-list-character
9991 transform: --- checking type and type_name pointers for recipe new-stream
9991 transform: --- checking type and type_name pointers for recipe rewind-stream
9991 transform: --- checking type and type_name pointers for recipe read-line
9991 transform: --- checking type and type_name pointers for recipe end-of-stream?
9991 transform: --- checking type and type_name pointers for recipe new-fake-screen
9991 transform: --- checking type and type_name pointers for recipe clear-screen
9991 transform: --- checking type and type_name pointers for recipe sync-screen
9991 transform: --- checking type and type_name pointers for recipe fake-screen-is-empty?
9991 transform: --- checking type and type_name pointers for recipe print-character
9991 transform: --- checking type and type_name pointers for recipe clear-line
9991 transform: --- checking type and type_name pointers for recipe cursor-position
9991 transform: --- checking type and type_name pointers for recipe move-cursor
9991 transform: --- checking type and type_name pointers for recipe cursor-down
9991 transform: --- checking type and type_name pointers for recipe cursor-up
9991 transform: --- checking type and type_name pointers for recipe cursor-right
9991 transform: --- checking type and type_name pointers for recipe cursor-left
9991 transform: --- checking type and type_name pointers for recipe cursor-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe cursor-to-next-line
9991 transform: --- checking type and type_name pointers for recipe screen-width
9991 transform: --- checking type and type_name pointers for recipe screen-height
9991 transform: --- checking type and type_name pointers for recipe hide-cursor
9991 transform: --- checking type and type_name pointers for recipe show-cursor
9991 transform: --- checking type and type_name pointers for recipe hide-screen
9991 transform: --- checking type and type_name pointers for recipe show-screen
9991 transform: --- checking type and type_name pointers for recipe print-string
9991 transform: --- checking type and type_name pointers for recipe print-integer
9991 transform: --- checking type and type_name pointers for recipe new-fake-console
9991 transform: --- checking type and type_name pointers for recipe read-event
9991 transform: --- checking type and type_name pointers for recipe read-key
9991 transform: --- checking type and type_name pointers for recipe send-keys-to-channel
9991 transform: --- checking type and type_name pointers for recipe wait-for-event
9991 transform: --- checking type and type_name pointers for recipe has-more-events?
9991 transform: --- checking type and type_name pointers for recipe push_2
9991 transform: --- checking type and type_name pointers for recipe first_2
9991 transform: --- checking type and type_name pointers for recipe rest_2
9991 transform: --- checking type and type_name pointers for recipe push-duplex_2
9991 transform: --- checking type and type_name pointers for recipe first-duplex_2
9991 transform: --- checking type and type_name pointers for recipe next-duplex_2
9991 transform: --- checking type and type_name pointers for recipe prev-duplex_2
9991 transform: --- checking type and type_name pointers for recipe insert-duplex_2
9991 transform: --- checking type and type_name pointers for recipe remove-duplex_2
9991 transform: --- checking type and type_name pointers for recipe remove-duplex-between_2
9991 transform: --- checking type and type_name pointers for recipe insert-duplex-range_2
9991 transform: --- checking type and type_name pointers for recipe append-duplex_2
9991 transform: --- checking type and type_name pointers for recipe last-duplex_2
9991 transform: --- checking type and type_name pointers for recipe sandbox
9991 transform: --- checking type and type_name pointers for recipe main_2
9991 transform: --- checking type and type_name pointers for recipe new-editor
9991 transform: --- checking type and type_name pointers for recipe insert-text
9991 transform: --- checking type and type_name pointers for recipe render
9991 transform: --- checking type and type_name pointers for recipe clear-line-delimited
9991 transform: --- checking type and type_name pointers for recipe clear-screen-from
9991 transform: --- checking type and type_name pointers for recipe clear-rest-of-screen
9991 transform: --- checking type and type_name pointers for recipe get-color
9991 transform: --- checking type and type_name pointers for recipe editor-event-loop
9991 transform: --- checking type and type_name pointers for recipe move-cursor-in-editor
9991 transform: --- checking type and type_name pointers for recipe snap-cursor
9991 transform: --- checking type and type_name pointers for recipe handle-keyboard-event
9991 transform: --- checking type and type_name pointers for recipe insert-at-cursor
9991 transform: --- checking type and type_name pointers for recipe editor-render
9991 transform: --- checking type and type_name pointers for recipe insert-new-line-and-indent
9991 transform: --- checking type and type_name pointers for recipe line-indent
9991 transform: --- checking type and type_name pointers for recipe draw-horizontal
9991 transform: --- checking type and type_name pointers for recipe delete-before-cursor
9991 transform: --- checking type and type_name pointers for recipe move-cursor-coordinates-left
9991 transform: --- checking type and type_name pointers for recipe previous-line-length
9991 transform: --- checking type and type_name pointers for recipe delete-at-cursor
9991 transform: --- checking type and type_name pointers for recipe move-cursor-coordinates-right
9991 transform: --- checking type and type_name pointers for recipe move-to-previous-line
9991 transform: --- checking type and type_name pointers for recipe move-to-next-line
9991 transform: --- checking type and type_name pointers for recipe move-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe move-to-end-of-line
9991 transform: --- checking type and type_name pointers for recipe delete-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe delete-to-end-of-line
9991 transform: --- checking type and type_name pointers for recipe before-start-of-next-line
9991 transform: --- checking type and type_name pointers for recipe before-previous-line
9991 transform: --- checking type and type_name pointers for recipe page-down
9991 transform: --- checking type and type_name pointers for recipe page-up
9991 transform: --- checking type and type_name pointers for recipe new-programming-environment
9991 transform: --- checking type and type_name pointers for recipe event-loop
9991 transform: --- checking type and type_name pointers for recipe resize
9991 transform: --- checking type and type_name pointers for recipe render-all
9991 transform: --- checking type and type_name pointers for recipe render-recipes
9991 transform: --- checking type and type_name pointers for recipe render-sandbox-side
9991 transform: --- checking type and type_name pointers for recipe update-cursor
9991 transform: --- checking type and type_name pointers for recipe render-string
9991 transform: --- checking type and type_name pointers for recipe render-code-string
9991 transform: --- checking type and type_name pointers for recipe maximize
9991 transform: --- checking type and type_name pointers for recipe draw-vertical
9991 transform: --- checking type and type_name pointers for recipe run-sandboxes
9991 transform: --- checking type and type_name pointers for recipe update-recipes
9991 transform: --- checking type and type_name pointers for recipe update-sandbox
9991 transform: --- checking type and type_name pointers for recipe update-status
9991 transform: --- checking type and type_name pointers for recipe save-sandboxes
9991 transform: --- checking type and type_name pointers for recipe render-sandboxes
9991 transform: --- checking type and type_name pointers for recipe restore-sandboxes
9991 transform: --- checking type and type_name pointers for recipe render-screen
9991 transform: --- checking type and type_name pointers for recipe editor-contents
9991 transform: --- checking type and type_name pointers for recipe empty-editor?
9991 transform: --- checking type and type_name pointers for recipe extract-sandbox
9991 transform: --- checking type and type_name pointers for recipe delete-sandbox
9991 transform: --- checking type and type_name pointers for recipe find-click-in-sandbox-output
9991 transform: --- checking type and type_name pointers for recipe toggle-expected-response
9991 transform: --- checking type and type_name pointers for recipe find-click-in-sandbox-code
9991 transform: --- checking type and type_name pointers for recipe add-operation
9991 transform: --- checking type and type_name pointers for recipe first_3
9991 transform: --- checking type and type_name pointers for recipe rest_3
9991 transform: --- checking type and type_name pointers for recipe push_3
9991 transform: --- checking type and type_name pointers for recipe scenario-buffer-append-works
9991 transform: --- checking type and type_name pointers for recipe run1001
9998 trace: run: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1000
 103 run: x:address:buffer <- new-buffer 3
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1006
 104 run: result:address:buffer <- new buffer:type
9999 mem: new alloc: 1013
9999 mem: storing 1013 in location 1008
 104 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1008 is 1013
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1009
 104 run: *len:address:number <- copy 0
9999 mem: location 1009 is 1013
9999 mem: storing 0 in location 1013
 104 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 0
9999 mem: location 1008 is 1013
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1010
 104 run: capacity:number, found?:boolean <- next-ingredient 
9999 mem: storing 3 in location 1011
9999 mem: storing 1 in location 1012
 104 run: assert found?, [new-buffer must get a capacity argument]
9999 mem: location 1012 is 1
 104 run: *s <- new character:type, capacity
9999 mem: location 1011 is 3
9999 mem: array size is 3
9999 mem: new alloc: 1015
9999 mem: location 1010 is 1014
9999 mem: storing 1015 in location 1014
 104 run: reply result
9999 mem: location 1008 is 1013
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: storing 1013 in location 1002
 103 run: s1:address:array:character <- get *x:address:buffer, data:offset
9999 mem: location 1002 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1002 is 1013
9998 run: address to copy is 1014
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1003
 103 run: x:address:buffer <- buffer-append x:address:buffer, 97
9999 mem: location 1002 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1019
 104 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1021
 104 run: c:character <- next-ingredient 
9999 mem: storing 97 in location 1022
 104 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1023
 104 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1022 is 97
9999 mem: storing 0 in location 1024
 104 run: jump-unless backspace?, 
9999 mem: location 1024 is 0
9998 run: jumping to instruction 12
 104 run: full?:boolean <- buffer-full? in
9999 mem: location 1021 is 1013
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1008
 105 run: len:number <- get *in, length:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9998 run: address to copy is 1013
9998 run: its type is number
9999 mem: location 1013 is 0
9999 mem: storing 0 in location 1009
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9998 run: address to copy is 1014
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1010
 105 run: capacity:number <- length *s
9999 mem: location 1010 is 1015
9999 mem: storing 3 in location 1011
 105 run: result:boolean <- greater-or-equal len, capacity
9999 mem: location 1009 is 0
9999 mem: location 1011 is 3
9999 mem: storing 0 in location 1012
 105 run: reply result
9999 mem: location 1012 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1026
 104 run: jump-unless full?, 
9999 mem: location 1026 is 0
9998 run: jumping to instruction 17
 104 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9998 run: address to copy is 1014
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1027
 104 run: dest:address:character <- index-address *s, *len
9999 mem: location 1027 is 1015
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 0
9999 mem: storing 1016 in location 1028
 104 run: *dest <- copy c
9999 mem: location 1022 is 97
9999 mem: location 1028 is 1016
9999 mem: storing 97 in location 1016
 104 run: *len <- add *len, 1
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 0
9999 mem: location 1023 is 1013
9999 mem: storing 1 in location 1013
 104 run: reply in/same-as-ingredient:0
9999 mem: location 1021 is 1013
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: storing 1013 in location 1002
 103 run: x:address:buffer <- buffer-append x:address:buffer, 98
9999 mem: location 1002 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 104 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1021
 104 run: c:character <- next-ingredient 
9999 mem: storing 98 in location 1022
 104 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1023
 104 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1022 is 98
9999 mem: storing 0 in location 1024
 104 run: jump-unless backspace?, 
9999 mem: location 1024 is 0
9998 run: jumping to instruction 12
 104 run: full?:boolean <- buffer-full? in
9999 mem: location 1021 is 1013
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1008
 105 run: len:number <- get *in, length:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9998 run: address to copy is 1013
9998 run: its type is number
9999 mem: location 1013 is 1
9999 mem: storing 1 in location 1009
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9998 run: address to copy is 1014
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1010
 105 run: capacity:number <- length *s
9999 mem: location 1010 is 1015
9999 mem: storing 3 in location 1011
 105 run: result:boolean <- greater-or-equal len, capacity
9999 mem: location 1009 is 1
9999 mem: location 1011 is 3
9999 mem: storing 0 in location 1012
 105 run: reply result
9999 mem: location 1012 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1026
 104 run: jump-unless full?, 
9999 mem: location 1026 is 0
9998 run: jumping to instruction 17
 104 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9998 run: address to copy is 1014
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1027
 104 run: dest:address:character <- index-address *s, *len
9999 mem: location 1027 is 1015
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 1
9999 mem: storing 1017 in location 1028
 104 run: *dest <- copy c
9999 mem: location 1022 is 98
9999 mem: location 1028 is 1017
9999 mem: storing 98 in location 1017
 104 run: *len <- add *len, 1
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 1
9999 mem: location 1023 is 1013
9999 mem: storing 2 in location 1013
 104 run: reply in/same-as-ingredient:0
9999 mem: location 1021 is 1013
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: storing 1013 in location 1002
 103 run: x:address:buffer <- buffer-append x:address:buffer, 99
9999 mem: location 1002 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 104 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1021
 104 run: c:character <- next-ingredient 
9999 mem: storing 99 in location 1022
 104 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1023
 104 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1022 is 99
9999 mem: storing 0 in location 1024
 104 run: jump-unless backspace?, 
9999 mem: location 1024 is 0
9998 run: jumping to instruction 12
 104 run: full?:boolean <- buffer-full? in
9999 mem: location 1021 is 1013
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1008
 105 run: len:number <- get *in, length:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9998 run: address to copy is 1013
9998 run: its type is number
9999 mem: location 1013 is 2
9999 mem: storing 2 in location 1009
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9998 run: address to copy is 1014
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1010
 105 run: capacity:number <- length *s
9999 mem: location 1010 is 1015
9999 mem: storing 3 in location 1011
 105 run: result:boolean <- greater-or-equal len, capacity
9999 mem: location 1009 is 2
9999 mem: location 1011 is 3
9999 mem: storing 0 in location 1012
 105 run: reply result
9999 mem: location 1012 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1026
 104 run: jump-unless full?, 
9999 mem: location 1026 is 0
9998 run: jumping to instruction 17
 104 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9998 run: address to copy is 1014
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1027
 104 run: dest:address:character <- index-address *s, *len
9999 mem: location 1027 is 1015
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 2
9999 mem: storing 1018 in location 1028
 104 run: *dest <- copy c
9999 mem: location 1022 is 99
9999 mem: location 1028 is 1018
9999 mem: storing 99 in location 1018
 104 run: *len <- add *len, 1
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 2
9999 mem: location 1023 is 1013
9999 mem: storing 3 in location 1013
 104 run: reply in/same-as-ingredient:0
9999 mem: location 1021 is 1013
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: storing 1013 in location 1002
 103 run: s2:address:array:character <- get *x:address:buffer, data:offset
9999 mem: location 1002 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 1002 is 1013
9998 run: address to copy is 1014
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1004
 103 run: 1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
9999 mem: location 1003 is 1015
9999 mem: location 1004 is 1015
9999 mem: storing 1 in location 1
 103 run: 2:array:character/raw <- copy *s2:address:array:character
9999 mem: location 1004 is 1015
9999 mem: location 1015 is 3
9999 mem: location 1016 is 97
9999 mem: location 1017 is 98
9999 mem: location 1018 is 99
9999 mem: storing 3 in location 2
9999 mem: storing 97 in location 3
9999 mem: storing 98 in location 4
9999 mem: storing 99 in location 5
 103 run: x:address:buffer <- buffer-append x:address:buffer, 100
9999 mem: location 1002 is 1013
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 104 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1021
 104 run: c:character <- next-ingredient 
9999 mem: storing 100 in location 1022
 104 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 1021 is 1013
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1023
 104 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1022 is 100
9999 mem: storing 0 in location 1024
 104 run: jump-unless backspace?, 
9999 mem: location 1024 is 0
9998 run: jumping to instruction 12
 104 run: full?:boolean <- buffer-full? in
9999 mem: location 1021 is 1013
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1008
 105 run: len:number <- get *in, length:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9998 run: address to copy is 1013
9998 run: its type is number
9999 mem: location 1013 is 3
9999 mem: storing 3 in location 1009
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1008 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 1008 is 1013
9998 run: address to copy is 1014
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1010
 105 run: capacity:number <- length *s
9999 mem: location 1010 is 1015
9999 mem: storing 3 in location 1011
 105 run: result:boolean <- greater-or-equal len, capacity
9999 mem: location 1009 is 3
9999 mem: location 1011 is 3
9999 mem: storing 1 in location 1012
 105 run: reply result
9999 mem: location 1012 is 1
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1026
 104 run: jump-unless full?, 
9999 mem: location 1026 is 1
9998 run: jump-unless fell through
 104 run: in <- grow-buffer in
9999 mem: location 1021 is 1013
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1029
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1013 in location 1031
 105 run: x:address:address:array:character <- get-address *in, data:offset
9999 mem: location 1031 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1015
9999 mem: location 1031 is 1013
9998 run: address to copy is 1014
9999 mem: storing 1014 in location 1032
 105 run: oldlen:number <- length **x
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1015
9999 mem: storing 3 in location 1033
 105 run: newlen:number <- multiply oldlen, 2
9999 mem: location 1033 is 3
9999 mem: storing 6 in location 1034
 105 run: olddata:address:array:character <- copy *x
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1015
9999 mem: storing 1015 in location 1035
 105 run: *x <- new character:type, newlen
9999 mem: location 1034 is 6
9999 mem: array size is 6
9999 mem: location 1032 is 1014
9999 mem: storing 1006 in location 1014
 105 run: i:number <- copy 0
9999 mem: storing 0 in location 1036
 105 run: done?:boolean <- greater-or-equal i, oldlen
9999 mem: location 1036 is 0
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1037
 105 run: jump-if done?, 
9999 mem: location 1037 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *olddata, i
9999 mem: location 1035 is 1015
9999 mem: location 1036 is 0
9998 run: address to copy is 1016
9998 run: its type is character
9999 mem: location 1016 is 97
9999 mem: storing 97 in location 1038
 105 run: dest:address:character <- index-address **x, i
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1006
9999 mem: location 1036 is 0
9999 mem: storing 1007 in location 1039
 105 run: *dest <- copy src
9999 mem: location 1038 is 97
9999 mem: location 1039 is 1007
9999 mem: storing 97 in location 1007
 105 run: i <- add i, 1
9999 mem: location 1036 is 0
9999 mem: storing 1 in location 1036
 105 run: jump 
9998 run: jumping to instruction 9
 105 run: done?:boolean <- greater-or-equal i, oldlen
9999 mem: location 1036 is 1
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1037
 105 run: jump-if done?, 
9999 mem: location 1037 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *olddata, i
9999 mem: location 1035 is 1015
9999 mem: location 1036 is 1
9998 run: address to copy is 1017
9998 run: its type is character
9999 mem: location 1017 is 98
9999 mem: storing 98 in location 1038
 105 run: dest:address:character <- index-address **x, i
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1006
9999 mem: location 1036 is 1
9999 mem: storing 1008 in location 1039
 105 run: *dest <- copy src
9999 mem: location 1038 is 98
9999 mem: location 1039 is 1008
9999 mem: storing 98 in location 1008
 105 run: i <- add i, 1
9999 mem: location 1036 is 1
9999 mem: storing 2 in location 1036
 105 run: jump 
9998 run: jumping to instruction 9
 105 run: done?:boolean <- greater-or-equal i, oldlen
9999 mem: location 1036 is 2
9999 mem: location 1033 is 3
9999 mem: storing 0 in location 1037
 105 run: jump-if done?, 
9999 mem: location 1037 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *olddata, i
9999 mem: location 1035 is 1015
9999 mem: location 1036 is 2
9998 run: address to copy is 1018
9998 run: its type is character
9999 mem: location 1018 is 99
9999 mem: storing 99 in location 1038
 105 run: dest:address:character <- index-address **x, i
9999 mem: location 1032 is 1014
9999 mem: location 1014 is 1006
9999 mem: location 1036 is 2
9999 mem: storing 1009 in location 1039
 105 run: *dest <- copy src
9999 mem: location 1038 is 99
9999 mem: location 1039 is 1009
9999 mem: storing 99 in location 1009
 105 run: i <- add i, 1
9999 mem: location 1036 is 2
9999 mem: storing 3 in location 1036
 105 run: jump 
9998 run: jumping to instruction 9
 105 run: done?:boolean <- greater-or-equal i, oldlen
9999 mem: location 1036 is 3
9999 mem: location 1033 is 3
9999 mem: storing 1 in location 1037
 105 run: jump-if done?, 
9999 mem: location 1037 is 1
9998 run: jumping to instruction 16
 105 run: reply in
9999 mem: location 1031 is 1013
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1013
9999 mem: storing 1013 in location 1021
 104 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1021 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1014 is 1006
9999 mem: location 1021 is 1013
9998 run: address to copy is 1014
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1014 is 1006
9999 mem: storing 1006 in location 1027
 104 run: dest:address:character <- index-address *s, *len
9999 mem: location 1027 is 1006
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 3
9999 mem: storing 1010 in location 1028
 104 run: *dest <- copy c
9999 mem: location 1022 is 100
9999 mem: location 1028 is 1010
9999 mem: storing 100 in location 1010
 104 run: *len <- add *len, 1
9999 mem: location 1023 is 1013
9999 mem: location 1013 is 3
9999 mem: location 1023 is 1013
9999 mem: storing 4 in location 1013
 104 run: reply in/same-as-ingredient:0
9999 mem: location 1021 is 1013
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1013
9999 mem: storing 1013 in location 1002
 103 run: s3:address:array:character <- get *x:address:buffer, data:offset
9999 mem: location 1002 is 1013
9999 mem: location 1013 is 4
9999 mem: location 1014 is 1006
9999 mem: location 1002 is 1013
9998 run: address to copy is 1014
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1014 is 1006
9999 mem: storing 1006 in location 1005
 103 run: 10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
9999 mem: location 1003 is 1015
9999 mem: location 1005 is 1006
9999 mem: storing 0 in location 10
 103 run: 11:number/raw <- get *x:address:buffer, length:offset
9999 mem: location 1002 is 1013
9999 mem: location 1013 is 4
9999 mem: location 1014 is 1006
9999 mem: location 1002 is 1013
9998 run: address to copy is 1013
9998 run: its type is number
9999 mem: location 1013 is 4
9999 mem: storing 4 in location 11
 103 run: 12:array:character/raw <- copy *s3:address:array:character
9999 mem: location 1005 is 1006
9999 mem: location 1006 is 6
9999 mem: location 1007 is 97
9999 mem: location 1008 is 98
9999 mem: location 1009 is 99
9999 mem: location 1010 is 100
9999 mem: location 1011 is 0
9999 mem: location 1012 is 0
9999 mem: storing 6 in location 12
9999 mem: storing 97 in location 13
9999 mem: storing 98 in location 14
9999 mem: storing 99 in location 15
9999 mem: storing 100 in location 16
9999 mem: storing 0 in location 17
9999 mem: storing 0 in location 18
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    # before +buffer-filled
    1 <- 1   # no change in data pointer
    2 <- 3   # size of data
    3 <- 97  # data
    4 <- 98
    5 <- 99
    # in the end
    10 <- 0   # data pointer has grown
    11 <- 4   # final length
    12 <- 6   # but data's capacity has doubled
    13 <- 97  # data
    14 <- 98
    15 <- 99
    16 <- 100
    17 <- 0
    18 <- 0
  ]
9999 run: checking location 1
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
9999 run: checking location 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
9999 run: checking location 14
9999 run: checking location 15
9999 run: checking location 16
9999 run: checking location 17
9999 run: checking location 18
9999 trace: fall-through: exiting scenario-buffer-append-works; decrementing callstack depth from 1
