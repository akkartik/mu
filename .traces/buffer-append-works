parse: instruction: run
parse:   ingredient: {name: "
    default-space:address:array:location <- new location:type, 30:literal
    x:address:buffer <- init-buffer 3:literal
    s1:address:array:character <- get x:address:buffer/deref, data:offset
    x:address:buffer <- buffer-append x:address:buffer, 97:literal  # 'a'
    x:address:buffer <- buffer-append x:address:buffer, 98:literal  # 'b'
    x:address:buffer <- buffer-append x:address:buffer, 99:literal  # 'c'
    s2:address:array:character <- get x:address:buffer/deref, data:offset
    1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
#?     $print s2:address:array:character, [
#? ]
#?     $print 1060:number/raw, [
#? ]
#?     $print 1061:number/raw, [
#? ]
#?     $print 1062:number/raw, [
#? ]
#?     $print 1063:number/raw, [
#? ]
#?     $print 1064:number/raw, [
#? ]
#?     $print 1065:number/raw, [
#? ]
    2:array:character/raw <- copy s2:address:array:character/deref
    +buffer-filled
    x:address:buffer <- buffer-append x:address:buffer, 100:literal  # 'd'
    s3:address:array:character <- get x:address:buffer/deref, data:offset
    10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
    11:number/raw <- get x:address:buffer/deref, length:offset
    12:array:character/raw <- copy s3:address:array:character/deref
  ", properties: ["
    default-space:address:array:location <- new location:type, 30:literal
    x:address:buffer <- init-buffer 3:literal
    s1:address:array:character <- get x:address:buffer/deref, data:offset
    x:address:buffer <- buffer-append x:address:buffer, 97:literal  # 'a'
    x:address:buffer <- buffer-append x:address:buffer, 98:literal  # 'b'
    x:address:buffer <- buffer-append x:address:buffer, 99:literal  # 'c'
    s2:address:array:character <- get x:address:buffer/deref, data:offset
    1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
#?     $print s2:address:array:character, [
#? ]
#?     $print 1060:number/raw, [
#? ]
#?     $print 1061:number/raw, [
#? ]
#?     $print 1062:number/raw, [
#? ]
#?     $print 1063:number/raw, [
#? ]
#?     $print 1064:number/raw, [
#? ]
#?     $print 1065:number/raw, [
#? ]
    2:array:character/raw <- copy s2:address:array:character/deref
    +buffer-filled
    x:address:buffer <- buffer-append x:address:buffer, 100:literal  # 'd'
    s3:address:array:character <- get x:address:buffer/deref, data:offset
    10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
    11:number/raw <- get x:address:buffer/deref, length:offset
    12:array:character/raw <- copy s3:address:array:character/deref
  ": "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    # before +buffer-filled
    1 <- 1   # no change in data pointer
    2 <- 3   # size of data
    3 <- 97  # data
    4 <- 98
    5 <- 99
    # in the end
    10 <- 0   # data pointer has grown
    11 <- 4   # final length
    12 <- 6   # but data's capacity has doubled
    13 <- 97  # data
    14 <- 98
    15 <- 99
    16 <- 100
    17 <- 0
    18 <- 0
  ", properties: ["
    # before +buffer-filled
    1 <- 1   # no change in data pointer
    2 <- 3   # size of data
    3 <- 97  # data
    4 <- 98
    5 <- 99
    # in the end
    10 <- 0   # data pointer has grown
    11 <- 4   # final length
    12 <- 6   # but data's capacity has doubled
    13 <- 97  # data
    14 <- 98
    15 <- 99
    16 <- 100
    17 <- 0
    18 <- 0
  ": "literal-string"]}
after-brace: recipe buffer-append-works
after-brace: run ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: buffer-append-works
run: run [
    default-space:address:array:location <- new location:type, 30:literal
    x:address:buffer <- init-buffer 3:literal
    s1:address:array:character <- get x:address:buffer/deref, data:offset
    x:address:buffer <- buffer-append x:address:buffer, 97:literal  # 'a'
    x:address:buffer <- buffer-append x:address:buffer, 98:literal  # 'b'
    x:address:buffer <- buffer-append x:address:buffer, 99:literal  # 'c'
    s2:address:array:character <- get x:address:buffer/deref, data:offset
    1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
#?     $print s2:address:array:character, [
#? ]
#?     $print 1060:number/raw, [
#? ]
#?     $print 1061:number/raw, [
#? ]
#?     $print 1062:number/raw, [
#? ]
#?     $print 1063:number/raw, [
#? ]
#?     $print 1064:number/raw, [
#? ]
#?     $print 1065:number/raw, [
#? ]
    2:array:character/raw <- copy s2:address:array:character/deref
    +buffer-filled
    x:address:buffer <- buffer-append x:address:buffer, 100:literal  # 'd'
    s3:address:array:character <- get x:address:buffer/deref, data:offset
    10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
    11:number/raw <- get x:address:buffer/deref, length:offset
    12:array:character/raw <- copy s3:address:array:character/deref
  ]
parse: instruction: new
parse:   ingredient: {name: "location", properties: ["location": "type"]}
parse:   ingredient: {name: "30", properties: ["30": "literal"]}
parse:   product: {name: "default-space", properties: ["default-space": "address":"array":"location"]}
parse: instruction: init-buffer
parse:   ingredient: {name: "3", properties: ["3": "literal"]}
parse:   product: {name: "x", properties: ["x": "address":"buffer"]}
parse: instruction: get
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer", "deref": ]}
parse:   ingredient: {name: "data", properties: ["data": "offset"]}
parse:   product: {name: "s1", properties: ["s1": "address":"array":"character"]}
parse: instruction: buffer-append
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer"]}
parse:   ingredient: {name: "97", properties: ["97": "literal"]}
parse:   product: {name: "x", properties: ["x": "address":"buffer"]}
parse: instruction: buffer-append
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer"]}
parse:   ingredient: {name: "98", properties: ["98": "literal"]}
parse:   product: {name: "x", properties: ["x": "address":"buffer"]}
parse: instruction: buffer-append
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer"]}
parse:   ingredient: {name: "99", properties: ["99": "literal"]}
parse:   product: {name: "x", properties: ["x": "address":"buffer"]}
parse: instruction: get
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer", "deref": ]}
parse:   ingredient: {name: "data", properties: ["data": "offset"]}
parse:   product: {name: "s2", properties: ["s2": "address":"array":"character"]}
parse: instruction: equal
parse:   ingredient: {name: "s1", properties: ["s1": "address":"array":"character"]}
parse:   ingredient: {name: "s2", properties: ["s2": "address":"array":"character"]}
parse:   product: {name: "1", properties: ["1": "boolean", "raw": ]}
parse: instruction: copy
parse:   ingredient: {name: "s2", properties: ["s2": "address":"array":"character", "deref": ]}
parse:   product: {name: "2", properties: ["2": "array":"character", "raw": ]}
parse: label: +buffer-filled
parse: instruction: buffer-append
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer"]}
parse:   ingredient: {name: "100", properties: ["100": "literal"]}
parse:   product: {name: "x", properties: ["x": "address":"buffer"]}
parse: instruction: get
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer", "deref": ]}
parse:   ingredient: {name: "data", properties: ["data": "offset"]}
parse:   product: {name: "s3", properties: ["s3": "address":"array":"character"]}
parse: instruction: equal
parse:   ingredient: {name: "s1", properties: ["s1": "address":"array":"character"]}
parse:   ingredient: {name: "s3", properties: ["s3": "address":"array":"character"]}
parse:   product: {name: "10", properties: ["10": "boolean", "raw": ]}
parse: instruction: get
parse:   ingredient: {name: "x", properties: ["x": "address":"buffer", "deref": ]}
parse:   ingredient: {name: "length", properties: ["length": "offset"]}
parse:   product: {name: "11", properties: ["11": "number", "raw": ]}
parse: instruction: copy
parse:   ingredient: {name: "s3", properties: ["s3": "address":"array":"character", "deref": ]}
parse:   product: {name: "12", properties: ["12": "array":"character", "raw": ]}
new: location -> 1
name: assign x 1
name: element data of type buffer is at offset 1
name: assign s1 2
name: element data of type buffer is at offset 1
name: assign s2 3
name: element data of type buffer is at offset 1
name: assign s3 4
name: element length of type buffer is at offset 0
after-brace: recipe run1001
after-brace: new ...
after-brace: init-buffer ...
after-brace: get ...
after-brace: buffer-append ...
after-brace: buffer-append ...
after-brace: buffer-append ...
after-brace: get ...
after-brace: equal ...
after-brace: copy ...
after-brace: buffer-append ...
after-brace: get ...
after-brace: equal ...
after-brace: get ...
after-brace: copy ...
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1000
run: x:address:buffer <- init-buffer 3:literal
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1031
run: result:address:buffer <- new buffer:type
mem: new alloc: 1062
mem: storing 1062 in location 1033
run: len:address:number <- get-address result:address:buffer/deref, length:offset
mem: location 1033 is 1062
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1033 is 1062
run: address to copy is 1062
mem: storing 1062 in location 1034
run: len:address:number/deref <- copy 0:literal
mem: location 1034 is 1062
mem: storing 0 in location 1062
run: s:address:address:array:character <- get-address result:address:buffer/deref, data:offset
mem: location 1033 is 1062
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1033 is 1062
run: address to copy is 1063
mem: storing 1063 in location 1035
run: capacity:number <- next-ingredient 
mem: storing 3 in location 1036
run: s:address:address:array:character/deref <- new character:type, capacity:number
mem: location 1036 is 3
mem: array size is 3
mem: new alloc: 1064
mem: location 1035 is 1063
mem: storing 1064 in location 1063
run: reply result:address:buffer
mem: location 1033 is 1062
run: result 0 is 1062
mem: storing 1062 in location 1002
run: s1:address:array:character <- get x:address:buffer/deref, data:offset
mem: location 1002 is 1062
mem: location 1062 is 0
mem: location 1063 is 1064
mem: location 1002 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1003
run: x:address:buffer <- buffer-append x:address:buffer, 97:literal
mem: location 1002 is 1062
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1068
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1070
run: c:character <- next-ingredient 
mem: storing 97 in location 1071
run: full?:boolean <- buffer-full? in:address:buffer
mem: location 1070 is 1062
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1099
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1101
run: len:number <- get in:address:buffer/deref, length:offset
mem: location 1101 is 1062
mem: location 1062 is 0
mem: location 1063 is 1064
mem: location 1101 is 1062
run: address to copy is 1062
run: its type is 1
mem: location 1062 is 0
mem: storing 0 in location 1102
run: s:address:array:character <- get in:address:buffer/deref, data:offset
mem: location 1101 is 1062
mem: location 1062 is 0
mem: location 1063 is 1064
mem: location 1101 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1103
run: capacity:number <- length s:address:array:character/deref
mem: location 1103 is 1064
mem: location 1064 is 3
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1103 is 1064
mem: storing 3 in location 1104
run: result:boolean <- greater-or-equal len:number, capacity:number
mem: location 1102 is 0
mem: location 1104 is 3
mem: storing 0 in location 1105
run: reply result:boolean
mem: location 1105 is 0
run: result 0 is 0
mem: storing 0 in location 1072
run: break-unless full?:boolean, 
mem: location 1072 is 0
run: jumping to instruction 7
run: len:address:number <- get-address in:address:buffer/deref, length:offset
mem: location 1070 is 1062
mem: location 1062 is 0
mem: location 1063 is 1064
mem: location 1070 is 1062
run: address to copy is 1062
mem: storing 1062 in location 1073
run: s:address:array:character <- get in:address:buffer/deref, data:offset
mem: location 1070 is 1062
mem: location 1062 is 0
mem: location 1063 is 1064
mem: location 1070 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1074
run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
mem: location 1074 is 1064
mem: location 1064 is 3
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1073 is 1062
mem: location 1062 is 0
mem: location 1074 is 1064
mem: location 1073 is 1062
mem: location 1062 is 0
mem: storing 1065 in location 1075
run: dest:address:character/deref <- copy c:character
mem: location 1071 is 97
mem: location 1075 is 1065
mem: storing 97 in location 1065
run: len:address:number/deref <- add len:address:number/deref, 1:literal
mem: location 1073 is 1062
mem: location 1062 is 0
mem: location 1073 is 1062
mem: storing 1 in location 1062
run: reply in:address:buffer/same-as-ingredient:0
mem: location 1070 is 1062
run: result 0 is 1062
mem: storing 1062 in location 1002
run: x:address:buffer <- buffer-append x:address:buffer, 98:literal
mem: location 1002 is 1062
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1130
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1132
run: c:character <- next-ingredient 
mem: storing 98 in location 1133
run: full?:boolean <- buffer-full? in:address:buffer
mem: location 1132 is 1062
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1161
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1163
run: len:number <- get in:address:buffer/deref, length:offset
mem: location 1163 is 1062
mem: location 1062 is 1
mem: location 1063 is 1064
mem: location 1163 is 1062
run: address to copy is 1062
run: its type is 1
mem: location 1062 is 1
mem: storing 1 in location 1164
run: s:address:array:character <- get in:address:buffer/deref, data:offset
mem: location 1163 is 1062
mem: location 1062 is 1
mem: location 1063 is 1064
mem: location 1163 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1165
run: capacity:number <- length s:address:array:character/deref
mem: location 1165 is 1064
mem: location 1064 is 3
mem: location 1065 is 97
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1165 is 1064
mem: storing 3 in location 1166
run: result:boolean <- greater-or-equal len:number, capacity:number
mem: location 1164 is 1
mem: location 1166 is 3
mem: storing 0 in location 1167
run: reply result:boolean
mem: location 1167 is 0
run: result 0 is 0
mem: storing 0 in location 1134
run: break-unless full?:boolean, 
mem: location 1134 is 0
run: jumping to instruction 7
run: len:address:number <- get-address in:address:buffer/deref, length:offset
mem: location 1132 is 1062
mem: location 1062 is 1
mem: location 1063 is 1064
mem: location 1132 is 1062
run: address to copy is 1062
mem: storing 1062 in location 1135
run: s:address:array:character <- get in:address:buffer/deref, data:offset
mem: location 1132 is 1062
mem: location 1062 is 1
mem: location 1063 is 1064
mem: location 1132 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1136
run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
mem: location 1136 is 1064
mem: location 1064 is 3
mem: location 1065 is 97
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1135 is 1062
mem: location 1062 is 1
mem: location 1136 is 1064
mem: location 1135 is 1062
mem: location 1062 is 1
mem: storing 1066 in location 1137
run: dest:address:character/deref <- copy c:character
mem: location 1133 is 98
mem: location 1137 is 1066
mem: storing 98 in location 1066
run: len:address:number/deref <- add len:address:number/deref, 1:literal
mem: location 1135 is 1062
mem: location 1062 is 1
mem: location 1135 is 1062
mem: storing 2 in location 1062
run: reply in:address:buffer/same-as-ingredient:0
mem: location 1132 is 1062
run: result 0 is 1062
mem: storing 1062 in location 1002
run: x:address:buffer <- buffer-append x:address:buffer, 99:literal
mem: location 1002 is 1062
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1192
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1194
run: c:character <- next-ingredient 
mem: storing 99 in location 1195
run: full?:boolean <- buffer-full? in:address:buffer
mem: location 1194 is 1062
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1223
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1225
run: len:number <- get in:address:buffer/deref, length:offset
mem: location 1225 is 1062
mem: location 1062 is 2
mem: location 1063 is 1064
mem: location 1225 is 1062
run: address to copy is 1062
run: its type is 1
mem: location 1062 is 2
mem: storing 2 in location 1226
run: s:address:array:character <- get in:address:buffer/deref, data:offset
mem: location 1225 is 1062
mem: location 1062 is 2
mem: location 1063 is 1064
mem: location 1225 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1227
run: capacity:number <- length s:address:array:character/deref
mem: location 1227 is 1064
mem: location 1064 is 3
mem: location 1065 is 97
mem: location 1066 is 98
mem: location 1067 is 0
mem: location 1227 is 1064
mem: storing 3 in location 1228
run: result:boolean <- greater-or-equal len:number, capacity:number
mem: location 1226 is 2
mem: location 1228 is 3
mem: storing 0 in location 1229
run: reply result:boolean
mem: location 1229 is 0
run: result 0 is 0
mem: storing 0 in location 1196
run: break-unless full?:boolean, 
mem: location 1196 is 0
run: jumping to instruction 7
run: len:address:number <- get-address in:address:buffer/deref, length:offset
mem: location 1194 is 1062
mem: location 1062 is 2
mem: location 1063 is 1064
mem: location 1194 is 1062
run: address to copy is 1062
mem: storing 1062 in location 1197
run: s:address:array:character <- get in:address:buffer/deref, data:offset
mem: location 1194 is 1062
mem: location 1062 is 2
mem: location 1063 is 1064
mem: location 1194 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1198
run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
mem: location 1198 is 1064
mem: location 1064 is 3
mem: location 1065 is 97
mem: location 1066 is 98
mem: location 1067 is 0
mem: location 1197 is 1062
mem: location 1062 is 2
mem: location 1198 is 1064
mem: location 1197 is 1062
mem: location 1062 is 2
mem: storing 1067 in location 1199
run: dest:address:character/deref <- copy c:character
mem: location 1195 is 99
mem: location 1199 is 1067
mem: storing 99 in location 1067
run: len:address:number/deref <- add len:address:number/deref, 1:literal
mem: location 1197 is 1062
mem: location 1062 is 2
mem: location 1197 is 1062
mem: storing 3 in location 1062
run: reply in:address:buffer/same-as-ingredient:0
mem: location 1194 is 1062
run: result 0 is 1062
mem: storing 1062 in location 1002
run: s2:address:array:character <- get x:address:buffer/deref, data:offset
mem: location 1002 is 1062
mem: location 1062 is 3
mem: location 1063 is 1064
mem: location 1002 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1004
run: 1:boolean/raw <- equal s1:address:array:character, s2:address:array:character
mem: location 1003 is 1064
mem: location 1004 is 1064
mem: storing 1 in location 1
run: 2:array:character/raw <- copy s2:address:array:character/deref
mem: location 1004 is 1064
mem: location 1064 is 3
mem: location 1065 is 97
mem: location 1066 is 98
mem: location 1067 is 99
mem: storing 3 in location 2
mem: storing 97 in location 3
mem: storing 98 in location 4
mem: storing 99 in location 5
run: x:address:buffer <- buffer-append x:address:buffer, 100:literal
mem: location 1002 is 1062
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1254
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1256
run: c:character <- next-ingredient 
mem: storing 100 in location 1257
run: full?:boolean <- buffer-full? in:address:buffer
mem: location 1256 is 1062
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1285
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1287
run: len:number <- get in:address:buffer/deref, length:offset
mem: location 1287 is 1062
mem: location 1062 is 3
mem: location 1063 is 1064
mem: location 1287 is 1062
run: address to copy is 1062
run: its type is 1
mem: location 1062 is 3
mem: storing 3 in location 1288
run: s:address:array:character <- get in:address:buffer/deref, data:offset
mem: location 1287 is 1062
mem: location 1062 is 3
mem: location 1063 is 1064
mem: location 1287 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1289
run: capacity:number <- length s:address:array:character/deref
mem: location 1289 is 1064
mem: location 1064 is 3
mem: location 1065 is 97
mem: location 1066 is 98
mem: location 1067 is 99
mem: location 1289 is 1064
mem: storing 3 in location 1290
run: result:boolean <- greater-or-equal len:number, capacity:number
mem: location 1288 is 3
mem: location 1290 is 3
mem: storing 1 in location 1291
run: reply result:boolean
mem: location 1291 is 1
run: result 0 is 1
mem: storing 1 in location 1258
run: break-unless full?:boolean, 
mem: location 1258 is 1
run: jump-unless fell through
run: in:address:buffer <- grow-buffer in:address:buffer
mem: location 1256 is 1062
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1316
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1318
run: x:address:address:array:character <- get-address in:address:buffer/deref, data:offset
mem: location 1318 is 1062
mem: location 1062 is 3
mem: location 1063 is 1064
mem: location 1318 is 1062
run: address to copy is 1063
mem: storing 1063 in location 1319
run: oldlen:number <- length x:address:address:array:character/deref/deref
mem: location 1319 is 1063
mem: location 1063 is 1064
mem: location 1064 is 3
mem: location 1065 is 97
mem: location 1066 is 98
mem: location 1067 is 99
mem: location 1319 is 1063
mem: location 1063 is 1064
mem: storing 3 in location 1320
run: newlen:number <- multiply oldlen:number, 2:literal
mem: location 1320 is 3
mem: storing 6 in location 1321
run: olddata:address:array:character <- copy x:address:address:array:character/deref
mem: location 1319 is 1063
mem: location 1063 is 1064
mem: storing 1064 in location 1322
run: x:address:address:array:character/deref <- new character:type, newlen:number
mem: location 1321 is 6
mem: array size is 6
mem: new alloc: 1347
mem: location 1319 is 1063
mem: storing 1347 in location 1063
run: i:number <- copy 0:literal
mem: storing 0 in location 1323
run: done?:boolean <- greater-or-equal i:number, oldlen:number
mem: location 1323 is 0
mem: location 1320 is 3
mem: storing 0 in location 1324
run: break-if done?:boolean, 
mem: location 1324 is 0
run: jump-if fell through
run: src:character <- index olddata:address:array:character/deref, i:number
mem: location 1322 is 1064
mem: location 1064 is 3
mem: location 1065 is 97
mem: location 1066 is 98
mem: location 1067 is 99
mem: location 1323 is 0
mem: location 1322 is 1064
mem: location 1323 is 0
run: address to copy is 1065
run: its type is 4
mem: location 1065 is 97
mem: storing 97 in location 1325
run: dest:address:character <- index-address x:address:address:array:character/deref/deref, i:number
mem: location 1319 is 1063
mem: location 1063 is 1347
mem: location 1347 is 6
mem: location 1348 is 0
mem: location 1349 is 0
mem: location 1350 is 0
mem: location 1351 is 0
mem: location 1352 is 0
mem: location 1353 is 0
mem: location 1323 is 0
mem: location 1319 is 1063
mem: location 1063 is 1347
mem: location 1323 is 0
mem: storing 1348 in location 1326
run: dest:address:character/deref <- copy src:character
mem: location 1325 is 97
mem: location 1326 is 1348
mem: storing 97 in location 1348
run: i:number <- add i:number, 1:literal
mem: location 1323 is 0
mem: storing 1 in location 1323
run: loop 
run: jumping to instruction 9
run: done?:boolean <- greater-or-equal i:number, oldlen:number
mem: location 1323 is 1
mem: location 1320 is 3
mem: storing 0 in location 1324
run: break-if done?:boolean, 
mem: location 1324 is 0
run: jump-if fell through
run: src:character <- index olddata:address:array:character/deref, i:number
mem: location 1322 is 1064
mem: location 1064 is 3
mem: location 1065 is 97
mem: location 1066 is 98
mem: location 1067 is 99
mem: location 1323 is 1
mem: location 1322 is 1064
mem: location 1323 is 1
run: address to copy is 1066
run: its type is 4
mem: location 1066 is 98
mem: storing 98 in location 1325
run: dest:address:character <- index-address x:address:address:array:character/deref/deref, i:number
mem: location 1319 is 1063
mem: location 1063 is 1347
mem: location 1347 is 6
mem: location 1348 is 97
mem: location 1349 is 0
mem: location 1350 is 0
mem: location 1351 is 0
mem: location 1352 is 0
mem: location 1353 is 0
mem: location 1323 is 1
mem: location 1319 is 1063
mem: location 1063 is 1347
mem: location 1323 is 1
mem: storing 1349 in location 1326
run: dest:address:character/deref <- copy src:character
mem: location 1325 is 98
mem: location 1326 is 1349
mem: storing 98 in location 1349
run: i:number <- add i:number, 1:literal
mem: location 1323 is 1
mem: storing 2 in location 1323
run: loop 
run: jumping to instruction 9
run: done?:boolean <- greater-or-equal i:number, oldlen:number
mem: location 1323 is 2
mem: location 1320 is 3
mem: storing 0 in location 1324
run: break-if done?:boolean, 
mem: location 1324 is 0
run: jump-if fell through
run: src:character <- index olddata:address:array:character/deref, i:number
mem: location 1322 is 1064
mem: location 1064 is 3
mem: location 1065 is 97
mem: location 1066 is 98
mem: location 1067 is 99
mem: location 1323 is 2
mem: location 1322 is 1064
mem: location 1323 is 2
run: address to copy is 1067
run: its type is 4
mem: location 1067 is 99
mem: storing 99 in location 1325
run: dest:address:character <- index-address x:address:address:array:character/deref/deref, i:number
mem: location 1319 is 1063
mem: location 1063 is 1347
mem: location 1347 is 6
mem: location 1348 is 97
mem: location 1349 is 98
mem: location 1350 is 0
mem: location 1351 is 0
mem: location 1352 is 0
mem: location 1353 is 0
mem: location 1323 is 2
mem: location 1319 is 1063
mem: location 1063 is 1347
mem: location 1323 is 2
mem: storing 1350 in location 1326
run: dest:address:character/deref <- copy src:character
mem: location 1325 is 99
mem: location 1326 is 1350
mem: storing 99 in location 1350
run: i:number <- add i:number, 1:literal
mem: location 1323 is 2
mem: storing 3 in location 1323
run: loop 
run: jumping to instruction 9
run: done?:boolean <- greater-or-equal i:number, oldlen:number
mem: location 1323 is 3
mem: location 1320 is 3
mem: storing 1 in location 1324
run: break-if done?:boolean, 
mem: location 1324 is 1
run: jumping to instruction 16
run: reply in:address:buffer
mem: location 1318 is 1062
run: result 0 is 1062
mem: storing 1062 in location 1256
run: len:address:number <- get-address in:address:buffer/deref, length:offset
mem: location 1256 is 1062
mem: location 1062 is 3
mem: location 1063 is 1347
mem: location 1256 is 1062
run: address to copy is 1062
mem: storing 1062 in location 1259
run: s:address:array:character <- get in:address:buffer/deref, data:offset
mem: location 1256 is 1062
mem: location 1062 is 3
mem: location 1063 is 1347
mem: location 1256 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1347
mem: storing 1347 in location 1260
run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
mem: location 1260 is 1347
mem: location 1347 is 6
mem: location 1348 is 97
mem: location 1349 is 98
mem: location 1350 is 99
mem: location 1351 is 0
mem: location 1352 is 0
mem: location 1353 is 0
mem: location 1259 is 1062
mem: location 1062 is 3
mem: location 1260 is 1347
mem: location 1259 is 1062
mem: location 1062 is 3
mem: storing 1351 in location 1261
run: dest:address:character/deref <- copy c:character
mem: location 1257 is 100
mem: location 1261 is 1351
mem: storing 100 in location 1351
run: len:address:number/deref <- add len:address:number/deref, 1:literal
mem: location 1259 is 1062
mem: location 1062 is 3
mem: location 1259 is 1062
mem: storing 4 in location 1062
run: reply in:address:buffer/same-as-ingredient:0
mem: location 1256 is 1062
run: result 0 is 1062
mem: storing 1062 in location 1002
run: s3:address:array:character <- get x:address:buffer/deref, data:offset
mem: location 1002 is 1062
mem: location 1062 is 4
mem: location 1063 is 1347
mem: location 1002 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1347
mem: storing 1347 in location 1005
run: 10:boolean/raw <- equal s1:address:array:character, s3:address:array:character
mem: location 1003 is 1064
mem: location 1005 is 1347
mem: storing 0 in location 10
run: 11:number/raw <- get x:address:buffer/deref, length:offset
mem: location 1002 is 1062
mem: location 1062 is 4
mem: location 1063 is 1347
mem: location 1002 is 1062
run: address to copy is 1062
run: its type is 1
mem: location 1062 is 4
mem: storing 4 in location 11
run: 12:array:character/raw <- copy s3:address:array:character/deref
mem: location 1005 is 1347
mem: location 1347 is 6
mem: location 1348 is 97
mem: location 1349 is 98
mem: location 1350 is 99
mem: location 1351 is 100
mem: location 1352 is 0
mem: location 1353 is 0
mem: storing 6 in location 12
mem: storing 97 in location 13
mem: storing 98 in location 14
mem: storing 99 in location 15
mem: storing 100 in location 16
mem: storing 0 in location 17
mem: storing 0 in location 18
run: memory-should-contain [
    # before +buffer-filled
    1 <- 1   # no change in data pointer
    2 <- 3   # size of data
    3 <- 97  # data
    4 <- 98
    5 <- 99
    # in the end
    10 <- 0   # data pointer has grown
    11 <- 4   # final length
    12 <- 6   # but data's capacity has doubled
    13 <- 97  # data
    14 <- 98
    15 <- 99
    16 <- 100
    17 <- 0
    18 <- 0
  ]
run: checking location 1
run: checking location 2
run: checking location 3
run: checking location 4
run: checking location 5
run: checking location 10
run: checking location 11
run: checking location 12
run: checking location 13
run: checking location 14
run: checking location 15
run: checking location 16
run: checking location 17
run: checking location 18
