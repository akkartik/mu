9991 parse: --- defining scenario_replace-character-in-text
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:array:character/raw <- new [abc]\n    1:address:shared:array:character/raw <- replace 1:address:shared:array:character/raw, 98/b, 122/z\n    2:array:character/raw <- copy *1:address:shared:array:character/raw\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:shared:array:character/raw <- new [abc]
    1:address:shared:array:character/raw <- replace 1:address:shared:array:character/raw, 98/b, 122/z
    2:array:character/raw <- copy *1:address:shared:array:character/raw
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2:array:character <- [azc]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2:array:character <- [azc]
  ]
9999 parse: recipe scenario_replace-character-in-text has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_replace-character-in-text
9991 transform: --- deduce types for recipe scenario_replace-character-in-text
9991 transform: --- collect surrounding spaces for recipe scenario_replace-character-in-text
9991 transform: --- transform names for recipe scenario_replace-character-in-text
9991 transform: --- resolve ambiguous calls for recipe scenario_replace-character-in-text
9991 transform: --- compute instruction operations for recipe scenario_replace-character-in-text
9991 transform: --- transform braces for recipe scenario_replace-character-in-text
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_replace-character-in-text
9991 transform: --- type-check 'call' instructions inside recipe scenario_replace-character-in-text
9991 transform: --- type-check calls inside recipe scenario_replace-character-in-text
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_replace-character-in-text
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_replace-character-in-text
 102 run: run [
    1:address:shared:array:character/raw <- new [abc]
    1:address:shared:array:character/raw <- replace 1:address:shared:array:character/raw, 98/b, 122/z
    2:array:character/raw <- copy *1:address:shared:array:character/raw
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"abc": "literal-string"}
9993 parse:   product: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>}
9992 load: after rewriting: 1:address:shared:array:character/raw <- new [abc]
9993 parse: instruction: replace
9993 parse:   number of ingredients: 3
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>}
9993 parse:   ingredient: {"98": "literal", "b": <>}
9993 parse:   ingredient: {"122": "literal", "z": <>}
9993 parse:   product: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>}
9992 load: after rewriting: 1:address:shared:array:character/raw <- replace 1:address:shared:array:character/raw, 98/b, 122/z
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>, "lookup": <>}
9993 parse:   product: {"2": <"array" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 2:array:character/raw <- copy *1:address:shared:array:character/raw
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction replace
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: non-strict match: ingredient 2
9993 transform: strict match: product 0
9992 transform: score for base: 979
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: non-strict match: ingredient 2
9993 transform: strict match: product 0
9992 transform: score for variant 0: 979
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new ...
9992 transform: replace ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:array:character/raw <- new [abc]
9999 mem: storing 1000 in location 1
9999 mem: incrementing refcount of 1000: 0 -> 1
 103 run: 1:address:shared:array:character/raw <- replace 1:address:shared:array:character/raw, 98/b, 122/z
9999 mem: location 1 is 1000
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 mem: new alloc: 1005
9999 mem: storing 9 in location 1006
 104 run: s:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1008
9999 mem: incrementing refcount of 1000: 1 -> 2
 104 run: oldc:character <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1009
 104 run: newc:character <- next-ingredient-without-typechecking 
9999 mem: storing 122 in location 1010
 104 run: from:number/optional <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1011
 104 run: len:number <- length *s
9999 mem: location 1008 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 3 in location 1012
 104 run: i:number <- find-next s, oldc, from
9999 mem: location 1008 is 1000
9999 mem: location 1009 is 98
9999 mem: location 1011 is 0
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1016
9999 mem: storing 8 in location 1017
 105 run: text:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1019
9999 mem: incrementing refcount of 1000: 2 -> 3
 105 run: pattern:character <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1020
 105 run: idx:number <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1021
 105 run: len:number <- length *text
9999 mem: location 1019 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 3 in location 1022
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1021 is 0
9999 mem: location 1022 is 3
9999 mem: storing 0 in location 1023
 105 run: jump-if eof?, 
9999 mem: location 1023 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1019 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1021 is 0
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 97
9999 mem: storing 97 in location 1024
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1024 is 97
9999 mem: location 1020 is 98
9999 mem: storing 0 in location 1025
 105 run: jump-if found?, 
9999 mem: location 1025 is 0
9998 run: jump-if fell through
 105 run: idx <- add idx, 1
9999 mem: location 1021 is 0
9999 mem: storing 1 in location 1021
 105 run: jump 
9998 run: jumping to instruction 6
 105 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1021 is 1
9999 mem: location 1022 is 3
9999 mem: storing 0 in location 1023
 105 run: jump-if eof?, 
9999 mem: location 1023 is 0
9998 run: jump-if fell through
 105 run: curr:character <- index *text, idx
9999 mem: location 1019 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1021 is 1
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 98
9999 mem: storing 98 in location 1024
 105 run: found?:boolean <- equal curr, pattern
9999 mem: location 1024 is 98
9999 mem: location 1020 is 98
9999 mem: storing 1 in location 1025
 105 run: jump-if found?, 
9999 mem: location 1025 is 1
9998 run: jumping to instruction 13
 105 run: reply idx
9999 mem: location 1021 is 1
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1
9999 mem: storing 1 in location 1013
 104 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1013 is 1
9999 mem: location 1012 is 3
9999 mem: storing 0 in location 1014
 104 run: jump-unless done?, 1:offset
9999 mem: location 1014 is 0
9998 run: jumping to instruction 10
 104 run: dest:address:character <- index-address *s, i
9999 mem: location 1008 is 1000
9999 mem: skipping refcount at 1000
9999 mem: location 1013 is 1
9999 mem: storing 1003 in location 1015
 104 run: *dest <- copy newc
9999 mem: location 1010 is 122
9999 mem: location 1015 is 1003
9999 mem: storing 122 in location 1003
 104 run: i <- add i, 1
9999 mem: location 1013 is 1
9999 mem: storing 2 in location 1013
 104 run: s <- replace s, oldc, newc, i
9999 mem: location 1008 is 1000
9999 mem: location 1009 is 98
9999 mem: location 1010 is 122
9999 mem: location 1013 is 2
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 mem: new alloc: 1026
9999 mem: storing 9 in location 1027
 105 run: s:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1029
9999 mem: incrementing refcount of 1000: 3 -> 4
 105 run: oldc:character <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1030
 105 run: newc:character <- next-ingredient-without-typechecking 
9999 mem: storing 122 in location 1031
 105 run: from:number/optional <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1032
 105 run: len:number <- length *s
9999 mem: location 1029 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 3 in location 1033
 105 run: i:number <- find-next s, oldc, from
9999 mem: location 1029 is 1000
9999 mem: location 1030 is 98
9999 mem: location 1032 is 2
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
 106 run: text:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1019
9999 mem: incrementing refcount of 1000: 4 -> 5
 106 run: pattern:character <- next-ingredient-without-typechecking 
9999 mem: storing 98 in location 1020
 106 run: idx:number <- next-ingredient-without-typechecking 
9999 mem: storing 2 in location 1021
 106 run: len:number <- length *text
9999 mem: location 1019 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 3 in location 1022
 106 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1021 is 2
9999 mem: location 1022 is 3
9999 mem: storing 0 in location 1023
 106 run: jump-if eof?, 
9999 mem: location 1023 is 0
9998 run: jump-if fell through
 106 run: curr:character <- index *text, idx
9999 mem: location 1019 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1021 is 2
9998 run: address to copy is 1004
9998 run: its type is character
9999 mem: location 1004 is 99
9999 mem: storing 99 in location 1024
 106 run: found?:boolean <- equal curr, pattern
9999 mem: location 1024 is 99
9999 mem: location 1020 is 98
9999 mem: storing 0 in location 1025
 106 run: jump-if found?, 
9999 mem: location 1025 is 0
9998 run: jump-if fell through
 106 run: idx <- add idx, 1
9999 mem: location 1021 is 2
9999 mem: storing 3 in location 1021
 106 run: jump 
9998 run: jumping to instruction 6
 106 run: eof?:boolean <- greater-or-equal idx, len
9999 mem: location 1021 is 3
9999 mem: location 1022 is 3
9999 mem: storing 1 in location 1023
 106 run: jump-if eof?, 
9999 mem: location 1023 is 1
9998 run: jumping to instruction 13
 106 run: reply idx
9999 mem: location 1021 is 3
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 3
9999 mem: storing 3 in location 1034
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1034 is 3
9999 mem: location 1033 is 3
9999 mem: storing 1 in location 1035
 105 run: jump-unless done?, 1:offset
9999 mem: location 1035 is 1
9998 run: jump-unless fell through
 105 run: reply s/same-as-ingredient:0
9999 mem: location 1029 is 1000
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1000
9999 mem: decrementing refcount of 1000: 5 -> 4
9999 mem: storing 1000 in location 1008
9999 mem: incrementing refcount of 1000: 4 -> 5
 104 run: reply s:address:shared:array:character
9999 mem: location 1008 is 1000
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1000
9999 mem: decrementing refcount of 1000: 5 -> 4
9999 mem: storing 1000 in location 1
9999 mem: incrementing refcount of 1000: 4 -> 5
 103 run: 2:array:character/raw <- copy *1:address:shared:array:character/raw
9999 mem: location 1 is 1000
9999 mem: skipping refcount at 1000
9999 mem: location 1001 is 3
9999 mem: location 1002 is 97
9999 mem: location 1003 is 122
9999 mem: location 1004 is 99
9999 mem: storing 3 in location 2
9999 mem: storing 97 in location 3
9999 mem: storing 122 in location 4
9999 mem: storing 99 in location 5
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    2:array:character <- [azc]
  ]
9999 run: checking string length at 2
9999 run: checking location 3
9999 run: checking location 4
9999 run: checking location 5
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
