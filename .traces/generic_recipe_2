9991 parse: --- defining main
9993 parse: instruction: merge
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"14": "literal"}
9993 parse:   ingredient: {"15": "literal"}
9993 parse:   product: {"10": "point"}
9992 load: after rewriting: 10:point <- merge 14, 15
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"10": "point"}
9993 parse:   product: {"11": "point"}
9992 load: after rewriting: 11:point <- foo 10:point
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:_t
9999 parse: header ingredient: b:_t
9999 parse: header product: result:number
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"result": <>}
9992 load: after rewriting: result <- copy 34
9999 parse: recipe foo has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:_t
9999 parse: header product: result:_t
9991 parse: --- defining foo_2
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"a": <>}
9993 parse:   product: {"result": <>}
9992 load: after rewriting: result <- copy a
9999 parse: recipe foo_2 has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe main
9993 transform: too few ingredients
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking variant 0
9993 transform: too few ingredients
9992 transform: final score: -1
9992 transform: checking variant 1
9992 transform: final score: 100
9992 transform: matches
9992 transform: found variant to specialize: 1001 foo_2
9993 transform: switching foo to foo_4
9992 transform: new specialization: foo_4
9991 transform: --- resolve ambiguous calls for recipe foo
9991 transform: --- resolve ambiguous calls for recipe foo_2
9991 transform: --- resolve ambiguous calls for recipe foo_4
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- collect surrounding spaces for recipe foo_2
9991 transform: --- collect surrounding spaces for recipe foo_4
9991 transform: --- deduce types from header for foo
9992 transform: default-space:address:array:location <- new location:type, number-of-locals:literal
9992 transform: a:_t <- next-ingredient 
9992 transform: b:_t <- next-ingredient 
9992 transform: result <- copy 34
9993 transform: type of result is number
9992 transform: reply result:number
9991 transform: --- deduce types from header for foo_2
9992 transform: default-space:address:array:location <- new location:type, number-of-locals:literal
9992 transform: a:_t <- next-ingredient 
9992 transform: result <- copy a
9993 transform: type of result is 
9992 transform: reply result:_t
9991 transform: --- deduce types from header for foo_4
9992 transform: default-space:address:array:location <- new location:type, number-of-locals:literal
9992 transform: a:_t <- next-ingredient 
9992 transform: result <- copy a
9992 transform: reply result:_t
9991 transform: --- transform names for recipe main
9991 transform: --- transform names for recipe foo
9999 new: location -> location
9993 name: assign a 1
9993 name: assign b 2
9993 name: assign result 3
9991 transform: --- transform names for recipe foo_2
9999 new: location -> location
9993 name: assign a 1
9993 name: assign result 2
9991 transform: --- transform names for recipe foo_4
9999 new: location -> location
9991 transform: --- transform braces for recipe main
9991 transform: merge ...
9991 transform: foo ...
9991 transform: --- transform braces for recipe foo
9991 transform: local-scope ...
9991 transform:  ...
9991 transform:  ...
9991 transform: copy ...
9991 transform:  ...
9991 transform: --- transform braces for recipe foo_2
9991 transform: local-scope ...
9991 transform:  ...
9991 transform: copy ...
9991 transform:  ...
9991 transform: --- transform braces for recipe foo_4
9991 transform: local-scope ...
9991 transform:  ...
9991 transform: copy ...
9991 transform:  ...
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- compute instruction operations for recipe foo_2
9991 transform: --- compute instruction operations for recipe foo_4
9991 transform: --- checking reply instructions against header for foo
9991 transform: --- checking reply instructions against header for foo_2
9991 transform: --- checking reply instructions against header for foo_4
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: 10:point <- merge 14, 15
9999 mem: storing 14 in location 10
9999 mem: storing 15 in location 11
 102 run: 11:point <- foo_4 10:point
9999 mem: location 10 is 14
9999 mem: location 11 is 15
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 103 run: a:_t <- next-ingredient 
9999 mem: storing 14 in location 1002
9999 mem: storing 15 in location 1003
 103 run: result <- copy a
9999 mem: location 1002 is 14
9999 mem: location 1003 is 15
9999 mem: storing 14 in location 1004
9999 mem: storing 15 in location 1005
 103 run: reply result:_t
9999 mem: location 1004 is 14
9999 mem: location 1005 is 15
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is [14, 15]
9999 mem: storing 14 in location 11
9999 mem: storing 15 in location 12
9999 trace: fall-through: exiting main; decrementing callstack depth from 1
